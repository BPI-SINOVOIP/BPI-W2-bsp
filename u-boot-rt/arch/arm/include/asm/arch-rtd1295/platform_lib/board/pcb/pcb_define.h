//VDC SIGNAL POSITIVE PATH
typedef enum {
	VIDEO_INPUT0 = 0,
	VIDEO_INPUT1,
	VIDEO_INPUT2,
	VIDEO_INPUT3,
	VIDEO_INPUT4,
	VIDEO_INPUT5,
	VIDEO_INPUT6,
	VIDEO_INPUT7,
	VIDEO_INPUT8,
	VIDEO_INPUT9,
	VIDEO_INPUT10,
	VIDEO_INPUT11,
	VIDEO_INPUT12,
	VIDEO_INPUT13,
	VIDEO_INPUT14,
	TV_INPUT,
} VIDEO_PATH;

typedef enum {
	VIDEO_GNDA0 = 0x30,
	VIDEO_GNDA1 = 0x31,
	VIDEO_GNDA2 = 0x32,
	VIDEO_BN = 0x00,
	VIDEO_Y0N = 0x21,
	VIDEO_Y1N = 0x22,
//	VIDEO_RN = 0x20,		// no support
//	VIDEO_GN = 0x10,		// no support
}VIDEO_GND_PATH;

enum ENUM_AUDIO_BBADC_SRC {
	AUDIO_BBADC_SRC_MUTE_ALL = 0x00FF,
	AUDIO_BBADC_SRC_AIN1 = 0x0001,
	AUDIO_BBADC_SRC_AIN2 = 0x0002,
	AUDIO_BBADC_SRC_AIN3 = 0x0004,
	AUDIO_BBADC_SRC_AIN4 = 0x0008,
	AUDIO_BBADC_SRC_AIN5 = 0x0010,
	AUDIO_BBADC_SRC_AIO1 = 0x0020,
	AUDIO_BBADC_SRC_AIO2 = 0x0040,
	AUDIO_BBADC_SRC_UNKNOWN = 0x0100,
};
typedef enum ENUM_AUDIO_BBADC_SRC ENUM_AUDIO_BBADC_SRC;

//ADC SIGNAL POSITIVE PATH
//Swap  ADC R,G,B  for VGIP__RGB
//VD_ADC same as ADC
typedef enum {
       ADC_SWAP_RGB = 0x00,
        ADC_SWAP_GRB,
        ADC_SWAP_BGR,
        ADC_SWAP_BRG,
        ADC_SWAP_RBG,
        ADC_SWAP_GBR,
} ADC_PATH_SWAP;

typedef enum {
        ADC_SOY_MUX_VIN0P = 0x00,
        ADC_SOY_MUX_VIN1P,
        ADC_SOY_MUX_VIN2P,
        ADC_SOY_MUX_VIN3P,
        ADC_SOY_MUX_VIN4P,
        ADC_SOY_MUX_VIN5P,
        ADC_SOY_MUX_VIN6P,
        ADC_SOY_MUX_VIN7P,
        ADC_SOY_MUX_VIN8PP,
        ADC_SOY_MUX_VIN9P,
        ADC_SOY_MUX_VIN10P,
        ADC_SOY_MUX_VIN11PP,
        ADC_SOY_MUX_GND1,
        ADC_SOY_MUX_GND2,
        ADC_SOY_MUX_GND3,
        ADC_SOY_MUX_VSOG_CAL
} ADC_SOY_PATH;

typedef enum {
        ADC_DATA_INPUT0 = 0,
        ADC_DATA_INPUT1,
        ADC_DATA_INPUT2,
} ADC_DATA_PATH;
