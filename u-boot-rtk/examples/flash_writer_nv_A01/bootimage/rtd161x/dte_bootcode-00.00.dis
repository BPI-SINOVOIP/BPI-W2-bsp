
/home1/edison_shih/thor/trunk-8.1/DTE_Bootcode/bin/../out/dte_bootcode-00.00.elf:     file format elf64-littleaarch64

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         00009a30  0000000003000000  0000000003000000  00010000  2**11
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000938  0000000003009a30  0000000003009a30  00019a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000428  000000000300a368  000000000300a368  0001a368  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001ff0  000000000300a790  000000000300a790  0001a790  2**3
                  ALLOC
  4 .debug_line   00003f9d  0000000000000000  0000000000000000  0001a790  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000c66d  0000000000000000  0000000000000000  0001e72d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000030ac  0000000000000000  0000000000000000  0002ad9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000520  0000000000000000  0000000000000000  0002de50  2**4
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000bb70  0000000000000000  0000000000000000  0002e370  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002b47  0000000000000000  0000000000000000  00039ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000043  0000000000000000  0000000000000000  0003ca27  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001ac0  0000000000000000  0000000000000000  0003ca70  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e00  0000000000000000  0000000000000000  0003e530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000000003000000 <dte_bootcode_start>:
.global dte_bootcode_start
.type dte_bootcode_start, @function
dte_bootcode_start:

	// identify core ID (A55: core ID in Aff1)
	mrs	x19, MPIDR_EL1
 3000000:	d53800b3 	mrs	x19, mpidr_el1
	ubfx	x19, x19, MPIDR_EL1_AFF1_LSB, MPIDR_EL1_AFF_WIDTH
 3000004:	d3483e73 	ubfx	x19, x19, #8, #8
	cbnz	x19, not_primary_core
 3000008:	b50000f3 	cbnz	x19, 3000024 <not_primary_core>

	// program the VBARs
	ldr	x1, lit_el1_vectors
 300000c:	580000e1 	ldr	x1, 3000028 <lit_el1_vectors>
	msr	VBAR_EL1, x1
 3000010:	d518c001 	msr	vbar_el1, x1

	bl	clear_bss_section
 3000014:	9400264a 	bl	300993c <clear_bss_section>

	// setup stack
	ldr	x0, =_stack_base
 3000018:	580000c0 	ldr	x0, 3000030 <lit_el1_vectors+0x8>
	mov	sp, x0
 300001c:	9100001f 	mov	sp, x0

	// load DTE_Bootcode_RTK (should never return)
	bl	c_entry
 3000020:	940000c1 	bl	3000324 <c_entry>

0000000003000024 <not_primary_core>:
not_primary_core:
#ifdef ENV_SIMULATION
	bl	simulation_result_fail
#endif
1:
	b	1b
 3000024:	14000000 	b	3000024 <not_primary_core>

0000000003000028 <lit_el1_vectors>:
 3000028:	03008000 	.word	0x03008000
 300002c:	00000000 	.word	0x00000000
 3000030:	0300d780 	.word	0x0300d780
 3000034:	00000000 	.word	0x00000000

0000000003000038 <sys_dcache_flush_all>:
void sys_dcache_flush_all()
{
	extern void __asm_flush_dcache_all();
    extern unsigned int sys_bisr_done;

    if (sys_bisr_done == 0)
 3000038:	d0000040 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 300003c:	b9479800 	ldr	w0, [x0,#1944]
 3000040:	35000040 	cbnz	w0, 3000048 <sys_dcache_flush_all+0x10>
        return;

	__asm_flush_dcache_all();
}
 3000044:	d65f03c0 	ret
    extern unsigned int sys_bisr_done;

    if (sys_bisr_done == 0)
        return;

	__asm_flush_dcache_all();
 3000048:	1400261f 	b	30098c4 <__asm_flush_dcache_all>

000000000300004c <sys_dcache_flush_MVA>:
	extern void __asm_flush_dcache_range(UINT32 start_adr, UINT32 end_adr);
    UINT32 i=0;
    UINT32* addr=NULL;
    extern unsigned int sys_bisr_done;

    if (sys_bisr_done == 0)
 300004c:	d0000042 	adrp	x2, 300a000 <__FUNCTION__.3108+0x3d8>
 3000050:	b9479842 	ldr	w2, [x2,#1944]
    icache cache line size : 32B
    dcache cache line size : 64B
    L2 : 64B
  */
void sys_dcache_flush_MVA(UINT32 start_adr, UINT32 end_adr)
{
 3000054:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
	extern void __asm_flush_dcache_range(UINT32 start_adr, UINT32 end_adr);
    UINT32 i=0;
    UINT32* addr=NULL;
    extern unsigned int sys_bisr_done;

    if (sys_bisr_done == 0)
 3000058:	34000162 	cbz	w2, 3000084 <sys_dcache_flush_MVA+0x38>
        return;

    CP15DSB;
 300005c:	d5033f9f 	dsb	sy
}
#endif // ENABLE_MMU

void sync(void)
{
    CP15DMB;
 3000060:	d5033fbf 	dmb	sy
    //1295 rbus sync register
    REG32(0x9801A020) = 0x0;
 3000064:	d2940413 	mov	x19, #0xa020                	// #40992
 3000068:	f2b30033 	movk	x19, #0x9801, lsl #16
 300006c:	b900027f 	str	wzr, [x19]
    CP15DMB;
 3000070:	d5033fbf 	dmb	sy
    if (sys_bisr_done == 0)
        return;

    CP15DSB;
    sync();
   	__asm_flush_dcache_range(start_adr, end_adr);
 3000074:	9400261e 	bl	30098ec <__asm_flush_dcache_range>
}
#endif // ENABLE_MMU

void sync(void)
{
    CP15DMB;
 3000078:	d5033fbf 	dmb	sy
    //1295 rbus sync register
    REG32(0x9801A020) = 0x0;
 300007c:	b900027f 	str	wzr, [x19]
    CP15DMB;
 3000080:	d5033fbf 	dmb	sy

    CP15DSB;
    sync();
   	__asm_flush_dcache_range(start_adr, end_adr);
    sync();
}
 3000084:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3000088:	d65f03c0 	ret

000000000300008c <enable_dcache>:
		__asm_invalidate_tlb_all();
	}
}

void enable_dcache()
{
 300008c:	f81f0ffe 	str	x30, [sp,#-16]!
//#define MMU_DEBUG

static inline UINT32 get_SCTLR_EL3(void)
{
        UINT64 val;
        asm volatile("MRS %0, SCTLR_EL3" : "=r" (val) : : );
 3000090:	d53e1000 	mrs	x0, sctlr_el3
	extern void __asm_invalidate_tlb_all();
	//extern void enable_l2dcache();

	//1. enable d-cache
    reg32 = get_SCTLR_EL3();	/* get control reg. */
    reg32 |= SCTLR_EL3_C;	// enable d-cache
 3000094:	321e0000 	orr	w0, w0, #0x4
        return val;
}

static inline void set_SCTLR_EL3(UINT32 val)
{
        asm volatile("MSR SCTLR_EL3, %0" : : "r" (val) : "cc");
 3000098:	d51e1000 	msr	sctlr_el3, x0
		CP15ISB;
 300009c:	d5033fdf 	isb
        #if 0
        /* copro seems to need some delay between reading and writing */
        for (i = 0; i < 100; i++)
                nop();
        #else
        func_nop(0,0,0,100);
 30000a0:	52800c83 	mov	w3, #0x64                  	// #100
 30000a4:	52800002 	mov	w2, #0x0                   	// #0
 30000a8:	52800001 	mov	w1, #0x0                   	// #0
 30000ac:	52800000 	mov	w0, #0x0                   	// #0
 30000b0:	9400262a 	bl	3009958 <func_nop>
    reg32 = get_SCTLR_EL3();	/* get control reg. */
    reg32 |= SCTLR_EL3_C;	// enable d-cache
    set_SCTLR_EL3(reg32);
    cp_delay();

	__asm_invalidate_dcache_all();
 30000b4:	94002609 	bl	30098d8 <__asm_invalidate_dcache_all>


	//no standalone switch for l2 cache
	//2. enable L2 D$ while mmu is disabled
	//enable_l2dcache();
}
 30000b8:	f84107fe 	ldr	x30, [sp],#16
    reg32 |= SCTLR_EL3_C;	// enable d-cache
    set_SCTLR_EL3(reg32);
    cp_delay();

	__asm_invalidate_dcache_all();
	__asm_invalidate_tlb_all();
 30000bc:	1400261c 	b	300992c <__asm_invalidate_tlb_all>

00000000030000c0 <enable_mmu_cache>:
{
	return get_SCTLR_EL3() & SCTLR_EL3_M;
}

void enable_mmu_cache(UINT32 bdcache)
{
 30000c0:	a9be53f3 	stp	x19, x20, [sp,#-32]!
 30000c4:	2a0003f3 	mov	w19, w0
 30000c8:	f9000bfe 	str	x30, [sp,#16]
//#define MMU_DEBUG

static inline UINT32 get_SCTLR_EL3(void)
{
        UINT64 val;
        asm volatile("MRS %0, SCTLR_EL3" : "=r" (val) : : );
 30000cc:	d53e1014 	mrs	x20, sctlr_el3
	extern void __asm_invalidate_tlb_all();
	extern void __asm_flush_dcache_all();

    //1. enable i-cache first
	reg32 = get_SCTLR_EL3();	/* get control reg. */
    reg32 |= SCTLR_EL3_I;	// enable i-cache
 30000d0:	32140280 	orr	w0, w20, #0x1000
        return val;
}

static inline void set_SCTLR_EL3(UINT32 val)
{
        asm volatile("MSR SCTLR_EL3, %0" : : "r" (val) : "cc");
 30000d4:	d51e1000 	msr	sctlr_el3, x0
		CP15ISB;
 30000d8:	d5033fdf 	isb
        #if 0
        /* copro seems to need some delay between reading and writing */
        for (i = 0; i < 100; i++)
                nop();
        #else
        func_nop(0,0,0,100);
 30000dc:	52800c83 	mov	w3, #0x64                  	// #100
 30000e0:	52800002 	mov	w2, #0x0                   	// #0
 30000e4:	52800001 	mov	w1, #0x0                   	// #0
 30000e8:	52800000 	mov	w0, #0x0                   	// #0
 30000ec:	9400261b 	bl	3009958 <func_nop>
    //1. enable i-cache first
	reg32 = get_SCTLR_EL3();	/* get control reg. */
    reg32 |= SCTLR_EL3_I;	// enable i-cache
    set_SCTLR_EL3(reg32);
	cp_delay();
	__asm_invalidate_icache_all();
 30000f0:	9400260c 	bl	3009920 <__asm_invalidate_icache_all>
	__asm_invalidate_tlb_all();
 30000f4:	9400260e 	bl	300992c <__asm_invalidate_tlb_all>
//#define MMU_DEBUG

static inline UINT32 get_SCTLR_EL3(void)
{
        UINT64 val;
        asm volatile("MRS %0, SCTLR_EL3" : "=r" (val) : : );
 30000f8:	d53e1000 	mrs	x0, sctlr_el3
	cp_delay();
	__asm_invalidate_icache_all();
	__asm_invalidate_tlb_all();

	//2. setup mmu page table
    if (!mmu_enabled()){
 30000fc:	36000260 	tbz	w0, #0, 3000148 <enable_mmu_cache+0x88>
	    mmu_setup();
    }

	//3. setup d-cache
	/* The data cache is not active unless the mmu is enabled too */
    if (bdcache)
 3000100:	35000cf3 	cbnz	w19, 300029c <enable_mmu_cache+0x1dc>
    {
		enable_dcache();
    }
	else{
		/* if dcache isn't enabled no need to disable */
		if ((reg32 & SCTLR_EL3_C) != SCTLR_EL3_C)
 3000104:	37100094 	tbnz	w20, #2, 3000114 <enable_mmu_cache+0x54>
		set_SCTLR_EL3(reg32 & ~cache_bit);
		cp_delay();
		__asm_flush_dcache_all();
		__asm_invalidate_tlb_all();
	}
}
 3000108:	f9400bfe 	ldr	x30, [sp,#16]
 300010c:	a8c253f3 	ldp	x19, x20, [sp],#32
 3000110:	d65f03c0 	ret
	else{
		/* if dcache isn't enabled no need to disable */
		if ((reg32 & SCTLR_EL3_C) != SCTLR_EL3_C)
			return;
		cache_bit |= SCTLR_EL3_C;
		set_SCTLR_EL3(reg32 & ~cache_bit);
 3000114:	121d7a80 	and	w0, w20, #0xfffffffb
 3000118:	32140000 	orr	w0, w0, #0x1000
        return val;
}

static inline void set_SCTLR_EL3(UINT32 val)
{
        asm volatile("MSR SCTLR_EL3, %0" : : "r" (val) : "cc");
 300011c:	d51e1000 	msr	sctlr_el3, x0
		CP15ISB;
 3000120:	d5033fdf 	isb
        #if 0
        /* copro seems to need some delay between reading and writing */
        for (i = 0; i < 100; i++)
                nop();
        #else
        func_nop(0,0,0,100);
 3000124:	52800c83 	mov	w3, #0x64                  	// #100
 3000128:	52800002 	mov	w2, #0x0                   	// #0
 300012c:	52800001 	mov	w1, #0x0                   	// #0
 3000130:	52800000 	mov	w0, #0x0                   	// #0
 3000134:	94002609 	bl	3009958 <func_nop>
		if ((reg32 & SCTLR_EL3_C) != SCTLR_EL3_C)
			return;
		cache_bit |= SCTLR_EL3_C;
		set_SCTLR_EL3(reg32 & ~cache_bit);
		cp_delay();
		__asm_flush_dcache_all();
 3000138:	940025e3 	bl	30098c4 <__asm_flush_dcache_all>
		__asm_invalidate_tlb_all();
	}
}
 300013c:	f9400bfe 	ldr	x30, [sp,#16]
 3000140:	a8c253f3 	ldp	x19, x20, [sp],#32
			return;
		cache_bit |= SCTLR_EL3_C;
		set_SCTLR_EL3(reg32 & ~cache_bit);
		cp_delay();
		__asm_flush_dcache_all();
		__asm_invalidate_tlb_all();
 3000144:	140025fa 	b	300992c <__asm_invalidate_tlb_all>
#endif
	//Set Memory Attribute Indirection Register
	//attr 0 ->11111111, Normal, outer/inner Write-back Allocate
	//attr 1 ->00000000, Device, Device-nGnRnE memory
	reg = 0x00FF;
	asm volatile("MSR MAIR_EL3, %0" : : "r" (reg) : "cc");
 3000148:	d2801fe0 	mov	x0, #0xff                  	// #255
 300014c:	d51ea200 	msr	mair_el3, x0
	CP15ISB;
 3000150:	d5033fdf 	isb
	//ORGN0: 01 Normal memory, Inner Write-Back Write-Allocate Cacheable.
	//SH:	 10 outer sharable
	//TG0:	 00 Granule size = 4KB
	//PS:	 00->32 bit 4G
	reg32 = 0x2520;
	asm volatile("MSR TCR_EL3, %0" : : "r" (reg32) : "cc");
 3000154:	5284a400 	mov	w0, #0x2520                	// #9504
 3000158:	d51e2040 	msr	tcr_el3, x0
	CP15ISB;
 300015c:	d5033fdf 	isb
}
#endif // ENABLE_MMU

void sync(void)
{
    CP15DMB;
 3000160:	d5033fbf 	dmb	sy
    //1295 rbus sync register
    REG32(0x9801A020) = 0x0;
 3000164:	d2940400 	mov	x0, #0xa020                	// #40992
 3000168:	f2b30020 	movk	x0, #0x9801, lsl #16
 300016c:	b900001f 	str	wzr, [x0]
    CP15DMB;
 3000170:	d5033fbf 	dmb	sy

	//2. init page table
	//32 bit VA=>PA, VA=PA, AArch64 long descritpor
	//TTBR0_EL3 range [32:5], level table only has 4 entries (32 byte)
	addr = PAGE_TBL_ADDR & ~(0x0000001F);
	asm volatile("MSR TTBR0_EL3, %0" : : "r"(addr): "cc");
 3000174:	d2b00020 	mov	x0, #0x80010000            	// #2147549184
 3000178:	d51e2000 	msr	ttbr0_el3, x0
	CP15ISB;
 300017c:	d5033fdf 	isb
#ifdef MMU_DEBUG
	prints("\nM3:");
#endif
	//Level 1
	page_table[0] =	(addr + 0x1000) | 0x03;
	page_table[1] =	(addr + 0x2000) | 0x03;
 3000180:	d2800105 	mov	x5, #0x8                   	// #8
 3000184:	f2b00025 	movk	x5, #0x8001, lsl #16
	page_table[2] = (addr + 0x3000) | 0x03;
 3000188:	d2800203 	mov	x3, #0x10                  	// #16
 300018c:	f2b00023 	movk	x3, #0x8001, lsl #16
	page_table[3] = (addr + 0x4000) | 0x03;
 3000190:	d2800301 	mov	x1, #0x18                  	// #24
 3000194:	f2b00021 	movk	x1, #0x8001, lsl #16

#ifdef MMU_DEBUG
	prints("\nM3:");
#endif
	//Level 1
	page_table[0] =	(addr + 0x1000) | 0x03;
 3000198:	d2820067 	mov	x7, #0x1003                	// #4099
 300019c:	f2b00027 	movk	x7, #0x8001, lsl #16
 30001a0:	f9000007 	str	x7, [x0]
	page_table[1] =	(addr + 0x2000) | 0x03;
 30001a4:	d2840066 	mov	x6, #0x2003                	// #8195
 30001a8:	f2b00026 	movk	x6, #0x8001, lsl #16
 30001ac:	f90000a6 	str	x6, [x5]
	page_table[2] = (addr + 0x3000) | 0x03;
 30001b0:	d2860064 	mov	x4, #0x3003                	// #12291
 30001b4:	f2b00024 	movk	x4, #0x8001, lsl #16
		//move to i-th level2 page table
		page_table = (UINT64*)(addr + (0x1000 * i) );
		for (j = 0; j < 0x200; j++){
			oa = (i << 30) | (j << 21);
			block_descriptor =   oa | 0x1;
            if (oa >= 0x88000000 && oa <= 0x8A000000){ // Nor Flash, mem attr 1: device
 30001b8:	92b0ffe8 	mov	x8, #0xffffffff7800ffff    	// #-2281635841
	prints("\nM3:");
#endif
	//Level 1
	page_table[0] =	(addr + 0x1000) | 0x03;
	page_table[1] =	(addr + 0x2000) | 0x03;
	page_table[2] = (addr + 0x3000) | 0x03;
 30001bc:	f9000064 	str	x4, [x3]
		for (j = 0; j < 0x200; j++){
			oa = (i << 30) | (j << 21);
			block_descriptor =   oa | 0x1;
            if (oa >= 0x88000000 && oa <= 0x8A000000){ // Nor Flash, mem attr 1: device
                    block_descriptor |= (0x111 << 2);
					block_descriptor |= XN;
 30001c0:	d28088a6 	mov	x6, #0x445                 	// #1093
#endif
	//Level 1
	page_table[0] =	(addr + 0x1000) | 0x03;
	page_table[1] =	(addr + 0x2000) | 0x03;
	page_table[2] = (addr + 0x3000) | 0x03;
	page_table[3] = (addr + 0x4000) | 0x03;
 30001c4:	d2880062 	mov	x2, #0x4003                	// #16387
 30001c8:	f2b00022 	movk	x2, #0x8001, lsl #16
 30001cc:	f9000022 	str	x2, [x1]
                    block_descriptor |= (0x111 << 2);
					block_descriptor |= XN;
            }
            else if (oa == 0x98000000 ) //R-Bus, mem attr 1: device
                    block_descriptor |= (0x111  << 2);
			else if (oa >= 0xff000000) // ARM JTAG+GIC: device
 30001d0:	d29fffec 	mov	x12, #0xffff                	// #65535
 30001d4:	f2bfdfec 	movk	x12, #0xfeff, lsl #16
 30001d8:	d282000f 	mov	x15, #0x1000                	// #4096
 30001dc:	f2b0002f 	movk	x15, #0x8001, lsl #16
#endif
	//Level 1
	page_table[0] =	(addr + 0x1000) | 0x03;
	page_table[1] =	(addr + 0x2000) | 0x03;
	page_table[2] = (addr + 0x3000) | 0x03;
	page_table[3] = (addr + 0x4000) | 0x03;
 30001e0:	d280000e 	mov	x14, #0x0                   	// #0
#endif

	//Level 2
	//move to the 0th level table address
	addr = (addr + 0x1000);
	for (i = 0; i < 4; i++){
 30001e4:	d280000d 	mov	x13, #0x0                   	// #0
		//move to i-th level2 page table
		page_table = (UINT64*)(addr + (0x1000 * i) );
		for (j = 0; j < 0x200; j++){
			oa = (i << 30) | (j << 21);
			block_descriptor =   oa | 0x1;
            if (oa >= 0x88000000 && oa <= 0x8A000000){ // Nor Flash, mem attr 1: device
 30001e8:	f2800008 	movk	x8, #0x0
 30001ec:	d2a04007 	mov	x7, #0x2000000             	// #33554432
                    block_descriptor |= (0x111 << 2);
					block_descriptor |= XN;
            }
            else if (oa == 0x98000000 ) //R-Bus, mem attr 1: device
 30001f0:	d2b3000b 	mov	x11, #0x98000000            	// #2550136832
                    block_descriptor |= (0x111  << 2);
			else if (oa >= 0xff000000) // ARM JTAG+GIC: device
					block_descriptor |= (0x111  << 2);
            else //Normal memory*/
                    block_descriptor |= (0x1D0  << 2);
 30001f4:	d280e82a 	mov	x10, #0x741                 	// #1857
					block_descriptor |= XN;
            }
            else if (oa == 0x98000000 ) //R-Bus, mem attr 1: device
                    block_descriptor |= (0x111  << 2);
			else if (oa >= 0xff000000) // ARM JTAG+GIC: device
					block_descriptor |= (0x111  << 2);
 30001f8:	d28088a9 	mov	x9, #0x445                 	// #1093
		for (j = 0; j < 0x200; j++){
			oa = (i << 30) | (j << 21);
			block_descriptor =   oa | 0x1;
            if (oa >= 0x88000000 && oa <= 0x8A000000){ // Nor Flash, mem attr 1: device
                    block_descriptor |= (0x111 << 2);
					block_descriptor |= XN;
 30001fc:	f2e00806 	movk	x6, #0x40, lsl #48
 3000200:	d36285a5 	lsl	x5, x13, #30
	//move to the 0th level table address
	addr = (addr + 0x1000);
	for (i = 0; i < 4; i++){
		//move to i-th level2 page table
		page_table = (UINT64*)(addr + (0x1000 * i) );
		for (j = 0; j < 0x200; j++){
 3000204:	d2800000 	mov	x0, #0x0                   	// #0
 3000208:	8b0f01c4 	add	x4, x14, x15
 300020c:	14000007 	b	3000228 <enable_mmu_cache+0x168>
					block_descriptor |= XN;
            }
            else if (oa == 0x98000000 ) //R-Bus, mem attr 1: device
                    block_descriptor |= (0x111  << 2);
			else if (oa >= 0xff000000) // ARM JTAG+GIC: device
					block_descriptor |= (0x111  << 2);
 3000210:	eb0c003f 	cmp	x1, x12
 3000214:	9a839042 	csel	x2, x2, x3, ls
            else //Normal memory*/
                    block_descriptor |= (0x1D0  << 2);
			page_table[j] = block_descriptor;
 3000218:	f8207882 	str	x2, [x4,x0,lsl #3]
	//move to the 0th level table address
	addr = (addr + 0x1000);
	for (i = 0; i < 4; i++){
		//move to i-th level2 page table
		page_table = (UINT64*)(addr + (0x1000 * i) );
		for (j = 0; j < 0x200; j++){
 300021c:	91000400 	add	x0, x0, #0x1
 3000220:	f108001f 	cmp	x0, #0x200
 3000224:	54000200 	b.eq	3000264 <enable_mmu_cache+0x1a4>
			oa = (i << 30) | (j << 21);
 3000228:	aa0054a1 	orr	x1, x5, x0, lsl #21
			block_descriptor =   oa | 0x1;
            if (oa >= 0x88000000 && oa <= 0x8A000000){ // Nor Flash, mem attr 1: device
 300022c:	8b080023 	add	x3, x1, x8
                    block_descriptor |= (0x111 << 2);
					block_descriptor |= XN;
 3000230:	aa060022 	orr	x2, x1, x6
		//move to i-th level2 page table
		page_table = (UINT64*)(addr + (0x1000 * i) );
		for (j = 0; j < 0x200; j++){
			oa = (i << 30) | (j << 21);
			block_descriptor =   oa | 0x1;
            if (oa >= 0x88000000 && oa <= 0x8A000000){ // Nor Flash, mem attr 1: device
 3000234:	eb07007f 	cmp	x3, x7
 3000238:	54ffff09 	b.ls	3000218 <enable_mmu_cache+0x158>
                    block_descriptor |= (0x111 << 2);
					block_descriptor |= XN;
            }
            else if (oa == 0x98000000 ) //R-Bus, mem attr 1: device
 300023c:	eb0b003f 	cmp	x1, x11
                    block_descriptor |= (0x111  << 2);
			else if (oa >= 0xff000000) // ARM JTAG+GIC: device
					block_descriptor |= (0x111  << 2);
 3000240:	aa090023 	orr	x3, x1, x9
 3000244:	aa0a0022 	orr	x2, x1, x10
			block_descriptor =   oa | 0x1;
            if (oa >= 0x88000000 && oa <= 0x8A000000){ // Nor Flash, mem attr 1: device
                    block_descriptor |= (0x111 << 2);
					block_descriptor |= XN;
            }
            else if (oa == 0x98000000 ) //R-Bus, mem attr 1: device
 3000248:	54fffe41 	b.ne	3000210 <enable_mmu_cache+0x150>
                    block_descriptor |= (0x111  << 2);
 300024c:	d28088a2 	mov	x2, #0x445                 	// #1093
 3000250:	f2b30002 	movk	x2, #0x9800, lsl #16
			else if (oa >= 0xff000000) // ARM JTAG+GIC: device
					block_descriptor |= (0x111  << 2);
            else //Normal memory*/
                    block_descriptor |= (0x1D0  << 2);
			page_table[j] = block_descriptor;
 3000254:	f8207882 	str	x2, [x4,x0,lsl #3]
	//move to the 0th level table address
	addr = (addr + 0x1000);
	for (i = 0; i < 4; i++){
		//move to i-th level2 page table
		page_table = (UINT64*)(addr + (0x1000 * i) );
		for (j = 0; j < 0x200; j++){
 3000258:	91000400 	add	x0, x0, #0x1
 300025c:	f108001f 	cmp	x0, #0x200
 3000260:	54fffe41 	b.ne	3000228 <enable_mmu_cache+0x168>
#endif

	//Level 2
	//move to the 0th level table address
	addr = (addr + 0x1000);
	for (i = 0; i < 4; i++){
 3000264:	910005ad 	add	x13, x13, #0x1
 3000268:	914005ce 	add	x14, x14, #0x1, lsl #12
 300026c:	f10011bf 	cmp	x13, #0x4
 3000270:	54fffc81 	b.ne	3000200 <enable_mmu_cache+0x140>
//#define MMU_DEBUG

static inline UINT32 get_SCTLR_EL3(void)
{
        UINT64 val;
        asm volatile("MRS %0, SCTLR_EL3" : "=r" (val) : : );
 3000274:	d53e1000 	mrs	x0, sctlr_el3
	//4. Enable MMU
#ifdef MMU_DEBUG
	prints("\nM5:");
#endif
	reg32 = get_SCTLR_EL3();	/* get control reg. */
	set_SCTLR_EL3(reg32 | SCTLR_EL3_M);
 3000278:	32000000 	orr	w0, w0, #0x1
        return val;
}

static inline void set_SCTLR_EL3(UINT32 val)
{
        asm volatile("MSR SCTLR_EL3, %0" : : "r" (val) : "cc");
 300027c:	d51e1000 	msr	sctlr_el3, x0
		CP15ISB;
 3000280:	d5033fdf 	isb
        #if 0
        /* copro seems to need some delay between reading and writing */
        for (i = 0; i < 100; i++)
                nop();
        #else
        func_nop(0,0,0,100);
 3000284:	52800c83 	mov	w3, #0x64                  	// #100
 3000288:	52800002 	mov	w2, #0x0                   	// #0
 300028c:	52800001 	mov	w1, #0x0                   	// #0
 3000290:	52800000 	mov	w0, #0x0                   	// #0
 3000294:	940025b1 	bl	3009958 <func_nop>
	    mmu_setup();
    }

	//3. setup d-cache
	/* The data cache is not active unless the mmu is enabled too */
    if (bdcache)
 3000298:	34fff373 	cbz	w19, 3000104 <enable_mmu_cache+0x44>
		set_SCTLR_EL3(reg32 & ~cache_bit);
		cp_delay();
		__asm_flush_dcache_all();
		__asm_invalidate_tlb_all();
	}
}
 300029c:	f9400bfe 	ldr	x30, [sp,#16]
 30002a0:	a8c253f3 	ldp	x19, x20, [sp],#32

	//3. setup d-cache
	/* The data cache is not active unless the mmu is enabled too */
    if (bdcache)
    {
		enable_dcache();
 30002a4:	17ffff7a 	b	300008c <enable_dcache>

00000000030002a8 <disable_mmu_cache>:
	//2. enable L2 D$ while mmu is disabled
	//enable_l2dcache();
}

void disable_mmu_cache()
{
 30002a8:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
//#define MMU_DEBUG

static inline UINT32 get_SCTLR_EL3(void)
{
        UINT64 val;
        asm volatile("MRS %0, SCTLR_EL3" : "=r" (val) : : );
 30002ac:	d53e1000 	mrs	x0, sctlr_el3
	UINT32 reg32, cache_bit=0;

	reg32 = get_SCTLR_EL3();

	//1. disable i-cache
	set_SCTLR_EL3(reg32 & ~SCTLR_EL3_I);
 30002b0:	12137800 	and	w0, w0, #0xffffefff
        return val;
}

static inline void set_SCTLR_EL3(UINT32 val)
{
        asm volatile("MSR SCTLR_EL3, %0" : : "r" (val) : "cc");
 30002b4:	d51e1000 	msr	sctlr_el3, x0
		CP15ISB;
 30002b8:	d5033fdf 	isb
        #if 0
        /* copro seems to need some delay between reading and writing */
        for (i = 0; i < 100; i++)
                nop();
        #else
        func_nop(0,0,0,100);
 30002bc:	52800c83 	mov	w3, #0x64                  	// #100
 30002c0:	52800002 	mov	w2, #0x0                   	// #0
 30002c4:	52800001 	mov	w1, #0x0                   	// #0
 30002c8:	52800000 	mov	w0, #0x0                   	// #0
 30002cc:	940025a3 	bl	3009958 <func_nop>
	reg32 = get_SCTLR_EL3();

	//1. disable i-cache
	set_SCTLR_EL3(reg32 & ~SCTLR_EL3_I);
	cp_delay();
	__asm_invalidate_icache_all();
 30002d0:	94002594 	bl	3009920 <__asm_invalidate_icache_all>
//#define MMU_DEBUG

static inline UINT32 get_SCTLR_EL3(void)
{
        UINT64 val;
        asm volatile("MRS %0, SCTLR_EL3" : "=r" (val) : : );
 30002d4:	d53e1013 	mrs	x19, sctlr_el3

	//2. disable d-cache and MMU

	cache_bit |= SCTLR_EL3_C;
	cache_bit |= SCTLR_EL3_M;
	set_SCTLR_EL3(reg32 & ~cache_bit);
 30002d8:	128000a0 	mov	w0, #0xfffffffa            	// #-6
 30002dc:	0a130000 	and	w0, w0, w19
        return val;
}

static inline void set_SCTLR_EL3(UINT32 val)
{
        asm volatile("MSR SCTLR_EL3, %0" : : "r" (val) : "cc");
 30002e0:	d51e1000 	msr	sctlr_el3, x0
		CP15ISB;
 30002e4:	d5033fdf 	isb
        #if 0
        /* copro seems to need some delay between reading and writing */
        for (i = 0; i < 100; i++)
                nop();
        #else
        func_nop(0,0,0,100);
 30002e8:	52800c83 	mov	w3, #0x64                  	// #100
 30002ec:	52800002 	mov	w2, #0x0                   	// #0
 30002f0:	52800001 	mov	w1, #0x0                   	// #0
 30002f4:	52800000 	mov	w0, #0x0                   	// #0
 30002f8:	94002598 	bl	3009958 <func_nop>
	cache_bit |= SCTLR_EL3_C;
	cache_bit |= SCTLR_EL3_M;
	set_SCTLR_EL3(reg32 & ~cache_bit);

	cp_delay();
	if (reg32 & SCTLR_EL3_C){ //only flush dcache when C bit is on
 30002fc:	36100053 	tbz	w19, #2, 3000304 <disable_mmu_cache+0x5c>
		__asm_flush_dcache_all();
 3000300:	94002571 	bl	30098c4 <__asm_flush_dcache_all>
	}
	__asm_invalidate_tlb_all();

}
 3000304:	a8c17bf3 	ldp	x19, x30, [sp],#16

	cp_delay();
	if (reg32 & SCTLR_EL3_C){ //only flush dcache when C bit is on
		__asm_flush_dcache_all();
	}
	__asm_invalidate_tlb_all();
 3000308:	14002589 	b	300992c <__asm_invalidate_tlb_all>

000000000300030c <sync>:
}
#endif // ENABLE_MMU

void sync(void)
{
    CP15DMB;
 300030c:	d5033fbf 	dmb	sy
    //1295 rbus sync register
    REG32(0x9801A020) = 0x0;
 3000310:	d2940400 	mov	x0, #0xa020                	// #40992
 3000314:	f2b30020 	movk	x0, #0x9801, lsl #16
 3000318:	b900001f 	str	wzr, [x0]
    CP15DMB;
 300031c:	d5033fbf 	dmb	sy
}
 3000320:	d65f03c0 	ret

0000000003000324 <c_entry>:
	#ifdef ENABLE_BSD
	unsigned char uart_key;
	#endif

	#ifdef FLOW_DEBUG
	printf("DTE_Bootcode: %s, %s\n", __DATE__, __TIME__);
 3000324:	b0000042 	adrp	x2, 3009000 <el3_vectors>
 3000328:	b0000041 	adrp	x1, 3009000 <el3_vectors>
 300032c:	b0000040 	adrp	x0, 3009000 <el3_vectors>
 3000330:	9130c042 	add	x2, x2, #0xc30
/*
 * This is the first C function entry point from assembly code.
 * It is responsible for loading and verifing DTE_Bootcode_RTK (LK)
 */
void c_entry(void)
{
 3000334:	a9be53f3 	stp	x19, x20, [sp,#-32]!
	#ifdef ENABLE_BSD
	unsigned char uart_key;
	#endif

	#ifdef FLOW_DEBUG
	printf("DTE_Bootcode: %s, %s\n", __DATE__, __TIME__);
 3000338:	91310021 	add	x1, x1, #0xc40
 300033c:	91314000 	add	x0, x0, #0xc50
/*
 * This is the first C function entry point from assembly code.
 * It is responsible for loading and verifing DTE_Bootcode_RTK (LK)
 */
void c_entry(void)
{
 3000340:	f9000bfe 	str	x30, [sp,#16]
 *  Function body
 ************************************************************************/
static void init_variables(void)
{
	sys_aes_mode = AES_MODE_128;
	sys_boot_flash_type = get_boot_flash_type();
 3000344:	d0000053 	adrp	x19, 300a000 <__FUNCTION__.3108+0x3d8>
	#ifdef ENABLE_BSD
	unsigned char uart_key;
	#endif

	#ifdef FLOW_DEBUG
	printf("DTE_Bootcode: %s, %s\n", __DATE__, __TIME__);
 3000348:	940002ff 	bl	3000f44 <printf>
/************************************************************************
 *  Function body
 ************************************************************************/
static void init_variables(void)
{
	sys_aes_mode = AES_MODE_128;
 300034c:	d0000040 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3000350:	b907901f 	str	wzr, [x0,#1936]
	sys_boot_flash_type = get_boot_flash_type();
 3000354:	94000e19 	bl	3003bb8 <get_boot_flash_type>
 3000358:	b9036a60 	str	w0, [x19,#872]
	sys_is_scs_activated = is_scs_activated();
 300035c:	94000ec2 	bl	3003e64 <is_scs_activated>
 3000360:	d0000045 	adrp	x5, 300a000 <__FUNCTION__.3108+0x3d8>
	// get fw table from Aux code
	p_BootArray_FW_Table = (BootArray_FW_Table_T *)BOOTARRAY_FW_ENTRY_INFO_ADDR;
 3000364:	f0000043 	adrp	x3, 300b000 <g_nand_data_dma+0x2c0>
}

static void init_flash(void)
{
	switch (sys_boot_flash_type) {
 3000368:	b9436a61 	ldr	w1, [x19,#872]
 300036c:	52828282 	mov	w2, #0x1414                	// #5140
 3000370:	72a28282 	movk	w2, #0x1414, lsl #16
{
	sys_aes_mode = AES_MODE_128;
	sys_boot_flash_type = get_boot_flash_type();
	sys_is_scs_activated = is_scs_activated();
	// get fw table from Aux code
	p_BootArray_FW_Table = (BootArray_FW_Table_T *)BOOTARRAY_FW_ENTRY_INFO_ADDR;
 3000374:	d2a20004 	mov	x4, #0x10000000            	// #268435456
 ************************************************************************/
static void init_variables(void)
{
	sys_aes_mode = AES_MODE_128;
	sys_boot_flash_type = get_boot_flash_type();
	sys_is_scs_activated = is_scs_activated();
 3000378:	b90374a0 	str	w0, [x5,#884]
	// get fw table from Aux code
	p_BootArray_FW_Table = (BootArray_FW_Table_T *)BOOTARRAY_FW_ENTRY_INFO_ADDR;
 300037c:	f906a064 	str	x4, [x3,#3392]
}

static void init_flash(void)
{
	switch (sys_boot_flash_type) {
 3000380:	6b02003f 	cmp	w1, w2
 3000384:	540001a0 	b.eq	30003b8 <c_entry+0x94>
 3000388:	52846460 	mov	w0, #0x2323                	// #8995
 300038c:	72a46460 	movk	w0, #0x2323, lsl #16
 3000390:	6b00003f 	cmp	w1, w0
 3000394:	54000140 	b.eq	30003bc <c_entry+0x98>
 3000398:	52826260 	mov	w0, #0x1313                	// #4883
 300039c:	72a26260 	movk	w0, #0x1313, lsl #16
 30003a0:	6b00003f 	cmp	w1, w0
 30003a4:	54000440 	b.eq	300042c <c_entry+0x108>
		case NAND_FLASH_BOOT:
			nand_initial();
			break;
		default:
			#ifdef FLOW_DEBUG
			printf("unknown flash type: 0x%x\n", sys_boot_flash_type);
 30003a8:	b0000040 	adrp	x0, 3009000 <el3_vectors>
 30003ac:	9131a000 	add	x0, x0, #0xc68
 30003b0:	940002e5 	bl	3000f44 <printf>
			faultDetect();
 30003b4:	94001bc6 	bl	30072cc <faultDetect>

static void init_flash(void)
{
	switch (sys_boot_flash_type) {
		case EMMC_BOOT:
			init_card_rca();
 30003b8:	94000666 	bl	3001d50 <init_card_rca>
	#endif

	init_variables();
	init_flash();

	save_bootarray_fw_entries();
 30003bc:	940012c9 	bl	3004ee0 <save_bootarray_fw_entries>

	ret = process_dte_fw_certificate();
 30003c0:	94001358 	bl	3005120 <process_dte_fw_certificate>
 30003c4:	2a0003f4 	mov	w20, w0
	#ifdef FLOW_DEBUG
	printf("process_dte_fw_certificate: 0x%x\n", ret);
 30003c8:	b0000040 	adrp	x0, 3009000 <el3_vectors>
 30003cc:	2a1403e1 	mov	w1, w20
 30003d0:	91322000 	add	x0, x0, #0xc88
 30003d4:	940002dc 	bl	3000f44 <printf>
	#endif
	if (ret != OK) {
 30003d8:	34000094 	cbz	w20, 30003e8 <c_entry+0xc4>
	ret = process_dte_bootcode_rtk();
	#ifdef FLOW_DEBUG
	printf("process_dte_bootcode_rtk: 0x%x\n", ret);
	#endif
	if (ret != OK) {
		sys_errno = ret;
 30003dc:	910da273 	add	x19, x19, #0x368
 30003e0:	b9000674 	str	w20, [x19,#4]
		faultDetect();
 30003e4:	94001bba 	bl	30072cc <faultDetect>
	if (ret != OK) {
		sys_errno = ret;
		faultDetect();
	}

	ret = process_dte_bootcode_rtk();
 30003e8:	9400138c 	bl	3005218 <process_dte_bootcode_rtk>
 30003ec:	2a0003f4 	mov	w20, w0
	#ifdef FLOW_DEBUG
	printf("process_dte_bootcode_rtk: 0x%x\n", ret);
 30003f0:	b0000040 	adrp	x0, 3009000 <el3_vectors>
 30003f4:	2a1403e1 	mov	w1, w20
 30003f8:	9132c000 	add	x0, x0, #0xcb0
 30003fc:	940002d2 	bl	3000f44 <printf>
	#endif
	if (ret != OK) {
 3000400:	35fffef4 	cbnz	w20, 30003dc <c_entry+0xb8>
		sys_errno = ret;
		faultDetect();
	}

	#ifdef FLOW_DEBUG
	printf("jump to DTE_Bootcode_RTK: 0x%x\n", DTE_BOOTCODE_RTK_TARGET_ADDR);
 3000404:	b0000040 	adrp	x0, 3009000 <el3_vectors>
 3000408:	52a00061 	mov	w1, #0x30000               	// #196608
 300040c:	91334000 	add	x0, x0, #0xcd0
 3000410:	940002cd 	bl	3000f44 <printf>

static inline UINT32 get_chip_rev_id(){
#ifdef FORCE_IC_REV
	return (FORCE_IC_REV << 16);
#else
	return REG32(SB2_CHIP_INFO);
 3000414:	d2944080 	mov	x0, #0xa204                	// #41476
 3000418:	f2b30020 	movk	x0, #0x9801, lsl #16
 300041c:	b9400000 	ldr	w0, [x0]
	#endif
	
	if (get_chip_rev_id() > RTD161x_CHIP_REVISION_A00){
 3000420:	340000a0 	cbz	w0, 3000434 <c_entry+0x110>
		//Trap to scs_mem's EL3 vector to redirect to BL31 to have the BL31's initialization
		asm volatile("smc #0" : : : "cc");
 3000424:	d4000003 	smc	#0x0
		//shouldn't get here
		faultDetect();
 3000428:	94001ba9 	bl	30072cc <faultDetect>
			init_card_rca();
			break;
		case SPI_FLASH_BOOT:
			break;
		case NAND_FLASH_BOOT:
			nand_initial();
 300042c:	94000b74 	bl	30031fc <nand_initial>
 3000430:	17ffffe3 	b	30003bc <c_entry+0x98>
		bsd_startServer(1);
		printf("After enter bsd_startServer\n");
	}
	#endif

	prints("jump to dte_bootcode_rtk_addr \n");
 3000434:	b0000040 	adrp	x0, 3009000 <el3_vectors>
 3000438:	9133c000 	add	x0, x0, #0xcf0
	((int (*)())(UINT64)DTE_BOOTCODE_RTK_TARGET_ADDR)();

	// in case of return
	sys_errno = ERR_UNEXPECTED_RETURN;
 300043c:	910da273 	add	x19, x19, #0x368
		bsd_startServer(1);
		printf("After enter bsd_startServer\n");
	}
	#endif

	prints("jump to dte_bootcode_rtk_addr \n");
 3000440:	94001724 	bl	30060d0 <prints>
	((int (*)())(UINT64)DTE_BOOTCODE_RTK_TARGET_ADDR)();
 3000444:	d2a00060 	mov	x0, #0x30000               	// #196608
 3000448:	d63f0000 	blr	x0

	// in case of return
	sys_errno = ERR_UNEXPECTED_RETURN;
 300044c:	528013e0 	mov	w0, #0x9f                  	// #159
 3000450:	b9000660 	str	w0, [x19,#4]
	faultDetect();
 3000454:	94001b9e 	bl	30072cc <faultDetect>

0000000003000458 <Reflect>:
	}
	//crc_table_computed = 1;
}

static UINT32 Reflect(UINT32 ref, char ch)
{
 3000458:	53001c21 	uxtb	w1, w1
	UINT32 value = 0;
	int i;
	// Swap bit 0 for bit 7
	// bit 1 for bit 6, etc.
	for (i = 1; i < (ch + 1); i++)
 300045c:	340001a1 	cbz	w1, 3000490 <Reflect+0x38>
 3000460:	51000421 	sub	w1, w1, #0x1
 3000464:	52800003 	mov	w3, #0x0                   	// #0
	{
		if (ref & 1)
			value |= 1 << (ch - i);
 3000468:	52800024 	mov	w4, #0x1                   	// #1
 300046c:	1ac12082 	lsl	w2, w4, w1
 3000470:	51000421 	sub	w1, w1, #0x1
{
	UINT32 value = 0;
	int i;
	// Swap bit 0 for bit 7
	// bit 1 for bit 6, etc.
	for (i = 1; i < (ch + 1); i++)
 3000474:	3100043f 	cmn	w1, #0x1
	{
		if (ref & 1)
 3000478:	36000040 	tbz	w0, #0, 3000480 <Reflect+0x28>
			value |= 1 << (ch - i);
 300047c:	2a020063 	orr	w3, w3, w2
		ref >>= 1;
 3000480:	53017c00 	lsr	w0, w0, #1
{
	UINT32 value = 0;
	int i;
	// Swap bit 0 for bit 7
	// bit 1 for bit 6, etc.
	for (i = 1; i < (ch + 1); i++)
 3000484:	54ffff41 	b.ne	300046c <Reflect+0x14>
	if (i != (ch + 1)) // loop no completed
	{
		faultDetect();
	}
	return value;
}
 3000488:	2a0303e0 	mov	w0, w3
 300048c:	d65f03c0 	ret
	//crc_table_computed = 1;
}

static UINT32 Reflect(UINT32 ref, char ch)
{
	UINT32 value = 0;
 3000490:	52800003 	mov	w3, #0x0                   	// #0
 3000494:	17fffffd 	b	3000488 <Reflect+0x30>

0000000003000498 <crc32>:
UINT32
crc32(
    UINT8  *p,
    int	   len,
    UINT32 *crc )
{
 3000498:	a9bb53f3 	stp	x19, x20, [sp,#-80]!

	for (i = 0; i <= 0xFF; i++)
	{
		crc_table[i] = Reflect(i, 8) << 24;
		for (j = 0; j < 8; j++)
			crc_table[i] = (crc_table[i] << 1) ^ (crc_table[i] & (1 << 31) ? polynomial : 0);
 300049c:	5283b6f3 	mov	w19, #0x1db7                	// #7607
 30004a0:	72a09833 	movk	w19, #0x4c1, lsl #16
UINT32
crc32(
    UINT8  *p,
    int	   len,
    UINT32 *crc )
{
 30004a4:	a9015bf5 	stp	x21, x22, [sp,#16]
 30004a8:	a90263f7 	stp	x23, x24, [sp,#32]
 30004ac:	a9036bf9 	stp	x25, x26, [sp,#48]
 30004b0:	f90023fe 	str	x30, [sp,#64]
 30004b4:	aa0003f6 	mov	x22, x0
 30004b8:	2a0103f7 	mov	w23, w1
 30004bc:	aa0203f8 	mov	x24, x2
 30004c0:	d2800019 	mov	x25, #0x0                   	// #0
 30004c4:	d0000055 	adrp	x21, 300a000 <__FUNCTION__.3108+0x3d8>
	}
*/

	for (i = 0; i <= 0xFF; i++)
	{
		crc_table[i] = Reflect(i, 8) << 24;
 30004c8:	52800101 	mov	w1, #0x8                   	// #8
 30004cc:	2a1903e0 	mov	w0, w25
 30004d0:	d37ef734 	lsl	x20, x25, #2
 30004d4:	97ffffe1 	bl	3000458 <Reflect>
 30004d8:	53081c02 	lsl	w2, w0, #24
 30004dc:	52800101 	mov	w1, #0x8                   	// #8
		for (j = 0; j < 8; j++)
			crc_table[i] = (crc_table[i] << 1) ^ (crc_table[i] & (1 << 31) ? polynomial : 0);
 30004e0:	6b1f005f 	cmp	w2, wzr
 30004e4:	0b020042 	add	w2, w2, w2
 30004e8:	1a9fb260 	csel	w0, w19, wzr, lt
*/

	for (i = 0; i <= 0xFF; i++)
	{
		crc_table[i] = Reflect(i, 8) << 24;
		for (j = 0; j < 8; j++)
 30004ec:	71000421 	subs	w1, w1, #0x1
			crc_table[i] = (crc_table[i] << 1) ^ (crc_table[i] & (1 << 31) ? polynomial : 0);
 30004f0:	4a020002 	eor	w2, w0, w2
*/

	for (i = 0; i <= 0xFF; i++)
	{
		crc_table[i] = Reflect(i, 8) << 24;
		for (j = 0; j < 8; j++)
 30004f4:	54ffff61 	b.ne	30004e0 <crc32+0x48>
 30004f8:	911ea2ba 	add	x26, x21, #0x7a8
			crc_table[i] = (crc_table[i] << 1) ^ (crc_table[i] & (1 << 31) ? polynomial : 0);
        if (j != 8) // loop no completed
        {
            faultDetect();
        }
		crc_table[i] = Reflect(crc_table[i],  32);
 30004fc:	52800401 	mov	w1, #0x20                  	// #32
 3000500:	2a0203e0 	mov	w0, w2
 3000504:	91000739 	add	x25, x25, #0x1
 3000508:	b83a6a82 	str	w2, [x20,x26]
 300050c:	97ffffd3 	bl	3000458 <Reflect>
		}
		crc_table[n] = c;
	}
*/

	for (i = 0; i <= 0xFF; i++)
 3000510:	f104033f 	cmp	x25, #0x100
			crc_table[i] = (crc_table[i] << 1) ^ (crc_table[i] & (1 << 31) ? polynomial : 0);
        if (j != 8) // loop no completed
        {
            faultDetect();
        }
		crc_table[i] = Reflect(crc_table[i],  32);
 3000514:	b8346b40 	str	w0, [x26,x20]
		}
		crc_table[n] = c;
	}
*/

	for (i = 0; i <= 0xFF; i++)
 3000518:	54fffd81 	b.ne	30004c8 <crc32+0x30>
	// add by alan
	//if (!crc_table_computed)
	make_crc_table();

	value = 0xFFFFFFFF;
	while (cnt--) {
 300051c:	340002d7 	cbz	w23, 3000574 <crc32+0xdc>
 3000520:	510006e4 	sub	w4, w23, #0x1
 3000524:	12800002 	mov	w2, #0xffffffff            	// #-1
 3000528:	91000484 	add	x4, x4, #0x1
 300052c:	8b0402c4 	add	x4, x22, x4
		value = (value >> 8) ^ crc_table[(value & 0xFF) ^ *p++];
 3000530:	384016c1 	ldrb	w1, [x22],#1
 3000534:	12001c43 	and	w3, w2, #0xff
 3000538:	911ea2a0 	add	x0, x21, #0x7a8
 300053c:	4a010061 	eor	w1, w3, w1
	// add by alan
	//if (!crc_table_computed)
	make_crc_table();

	value = 0xFFFFFFFF;
	while (cnt--) {
 3000540:	eb0402df 	cmp	x22, x4
		value = (value >> 8) ^ crc_table[(value & 0xFF) ^ *p++];
 3000544:	b8615800 	ldr	w0, [x0,w1,uxtw #2]
 3000548:	4a422002 	eor	w2, w0, w2, lsr #8
	// add by alan
	//if (!crc_table_computed)
	make_crc_table();

	value = 0xFFFFFFFF;
	while (cnt--) {
 300054c:	54ffff21 	b.ne	3000530 <crc32+0x98>
 3000550:	2a2203e2 	mvn	w2, w2
	if (cnt > 0) // loop no completed
	{
		faultDetect();
	}

	*crc = value ^ 0xFFFFFFFF;
 3000554:	b9000302 	str	w2, [x24]

     *crc = ~(*crc);
*/

	return OK;
}
 3000558:	52800000 	mov	w0, #0x0                   	// #0
 300055c:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3000560:	a94263f7 	ldp	x23, x24, [sp,#32]
 3000564:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3000568:	f94023fe 	ldr	x30, [sp,#64]
 300056c:	a8c553f3 	ldp	x19, x20, [sp],#80
 3000570:	d65f03c0 	ret
	// add by alan
	//if (!crc_table_computed)
	make_crc_table();

	value = 0xFFFFFFFF;
	while (cnt--) {
 3000574:	52800002 	mov	w2, #0x0                   	// #0
	if (cnt > 0) // loop no completed
	{
		faultDetect();
	}

	*crc = value ^ 0xFFFFFFFF;
 3000578:	b9000302 	str	w2, [x24]

     *crc = ~(*crc);
*/

	return OK;
}
 300057c:	52800000 	mov	w0, #0x0                   	// #0
 3000580:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3000584:	a94263f7 	ldp	x23, x24, [sp,#32]
 3000588:	a9436bf9 	ldp	x25, x26, [sp,#48]
 300058c:	f94023fe 	ldr	x30, [sp,#64]
 3000590:	a8c553f3 	ldp	x19, x20, [sp],#80
 3000594:	d65f03c0 	ret

0000000003000598 <longlong_to_string.constprop.0>:
static char *longlong_to_string(char *buf, unsigned long long n, int len, unsigned int flag)
{
	int pos = len;
	int negative = 0;

	if((flag & SIGNEDFLAG) && (long long)n < 0) {
 3000598:	36400042 	tbz	w2, #8, 30005a0 <longlong_to_string.constprop.0+0x8>
 300059c:	b7f80501 	tbnz	x1, #63, 300063c <longlong_to_string.constprop.0+0xa4>
		negative = 1;
		n = -n;
	}

	buf[--pos] = 0;
 30005a0:	39007c1f 	strb	wzr, [x0,#31]

	/* only do the math if the number is >= 10 */
	while(n >= 10) {
 30005a4:	f100243f 	cmp	x1, #0x9
 30005a8:	52800007 	mov	w7, #0x0                   	// #0
 30005ac:	540005c9 	b.ls	3000664 <longlong_to_string.constprop.0+0xcc>
		int digit = n % 10;
 30005b0:	b202e7e6 	mov	x6, #0xcccccccccccccccc    	// #-3689348814741910324
{
	int pos = len;
	int negative = 0;

	if((flag & SIGNEDFLAG) && (long long)n < 0) {
		negative = 1;
 30005b4:	528003e5 	mov	w5, #0x1f                  	// #31

	buf[--pos] = 0;

	/* only do the math if the number is >= 10 */
	while(n >= 10) {
		int digit = n % 10;
 30005b8:	910004c6 	add	x6, x6, #0x1
 30005bc:	9bc67c24 	umulh	x4, x1, x6

		n /= 10;

		buf[--pos] = digit + '0';
 30005c0:	510004a5 	sub	w5, w5, #0x1

	buf[--pos] = 0;

	/* only do the math if the number is >= 10 */
	while(n >= 10) {
		int digit = n % 10;
 30005c4:	d343fc84 	lsr	x4, x4, #3
	}

	buf[--pos] = 0;

	/* only do the math if the number is >= 10 */
	while(n >= 10) {
 30005c8:	f100249f 	cmp	x4, #0x9
		int digit = n % 10;
 30005cc:	8b040883 	add	x3, x4, x4, lsl #2
 30005d0:	8b030063 	add	x3, x3, x3
 30005d4:	cb030023 	sub	x3, x1, x3

		n /= 10;
 30005d8:	aa0403e1 	mov	x1, x4

		buf[--pos] = digit + '0';
 30005dc:	1100c063 	add	w3, w3, #0x30
 30005e0:	3825c803 	strb	w3, [x0,w5,sxtw]
	}

	buf[--pos] = 0;

	/* only do the math if the number is >= 10 */
	while(n >= 10) {
 30005e4:	54fffec8 	b.hi	30005bc <longlong_to_string.constprop.0+0x24>

		n /= 10;

		buf[--pos] = digit + '0';
	}
	buf[--pos] = n + '0';
 30005e8:	510004a3 	sub	w3, w5, #0x1
 30005ec:	1100c081 	add	w1, w4, #0x30
	while(n >= 10) {
		int digit = n % 10;

		n /= 10;

		buf[--pos] = digit + '0';
 30005f0:	2a0503e4 	mov	w4, w5
	}
	buf[--pos] = n + '0';
 30005f4:	3823c801 	strb	w1, [x0,w3,sxtw]

	if(negative)
 30005f8:	35000147 	cbnz	w7, 3000620 <longlong_to_string.constprop.0+0x88>
 30005fc:	8b23c003 	add	x3, x0, w3, sxtw
		buf[--pos] = '-';
	else if((flag & SHOWSIGNFLAG))
 3000600:	363800c2 	tbz	w2, #7, 3000618 <longlong_to_string.constprop.0+0x80>
		buf[--pos] = '+';
 3000604:	51000884 	sub	w4, w4, #0x2
 3000608:	52800561 	mov	w1, #0x2b                  	// #43
 300060c:	93407c84 	sxtw	x4, w4
 3000610:	8b040003 	add	x3, x0, x4
 3000614:	38246801 	strb	w1, [x0,x4]

	return &buf[pos];
}
 3000618:	aa0303e0 	mov	x0, x3
 300061c:	d65f03c0 	ret
 3000620:	510008a5 	sub	w5, w5, #0x2
 3000624:	93407ca5 	sxtw	x5, w5
		buf[--pos] = digit + '0';
	}
	buf[--pos] = n + '0';

	if(negative)
		buf[--pos] = '-';
 3000628:	8b050003 	add	x3, x0, x5
 300062c:	528005a1 	mov	w1, #0x2d                  	// #45
 3000630:	38256801 	strb	w1, [x0,x5]
	else if((flag & SHOWSIGNFLAG))
		buf[--pos] = '+';

	return &buf[pos];
}
 3000634:	aa0303e0 	mov	x0, x3
 3000638:	d65f03c0 	ret
	int pos = len;
	int negative = 0;

	if((flag & SIGNEDFLAG) && (long long)n < 0) {
		negative = 1;
		n = -n;
 300063c:	cb0103e1 	neg	x1, x1
	}

	buf[--pos] = 0;
 3000640:	39007c1f 	strb	wzr, [x0,#31]

	/* only do the math if the number is >= 10 */
	while(n >= 10) {
 3000644:	f100243f 	cmp	x1, #0x9
 3000648:	54000069 	b.ls	3000654 <longlong_to_string.constprop.0+0xbc>
{
	int pos = len;
	int negative = 0;

	if((flag & SIGNEDFLAG) && (long long)n < 0) {
		negative = 1;
 300064c:	52800027 	mov	w7, #0x1                   	// #1
 3000650:	17ffffd8 	b	30005b0 <longlong_to_string.constprop.0+0x18>

		n /= 10;

		buf[--pos] = digit + '0';
	}
	buf[--pos] = n + '0';
 3000654:	1100c021 	add	w1, w1, #0x30
 3000658:	d28003a5 	mov	x5, #0x1d                  	// #29
 300065c:	39007801 	strb	w1, [x0,#30]
 3000660:	17fffff2 	b	3000628 <longlong_to_string.constprop.0+0x90>
 3000664:	1100c021 	add	w1, w1, #0x30
 3000668:	528003c3 	mov	w3, #0x1e                  	// #30
 300066c:	39007801 	strb	w1, [x0,#30]
	if((flag & SIGNEDFLAG) && (long long)n < 0) {
		negative = 1;
		n = -n;
	}

	buf[--pos] = 0;
 3000670:	528003e4 	mov	w4, #0x1f                  	// #31
 3000674:	17ffffe2 	b	30005fc <longlong_to_string.constprop.0+0x64>

0000000003000678 <putchar>:
#include "utility.h"
#include "dprintf.h"
#include "uart.h"

int putchar(int c)
{
 3000678:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
	int n;

	if (c == '\n') {
 300067c:	7100281f 	cmp	w0, #0xa
 3000680:	2a0003f3 	mov	w19, w0
#include "utility.h"
#include "dprintf.h"
#include "uart.h"

int putchar(int c)
{
 3000684:	f9000bfe 	str	x30, [sp,#16]
 3000688:	b9002fe0 	str	w0, [sp,#44]
	int n;

	if (c == '\n') {
 300068c:	540000e0 	b.eq	30006a8 <putchar+0x30>
		serial_write((unsigned char*)&n);
		n = 0xa;
		serial_write((unsigned char*)&n);
	}
	else {
		serial_write((unsigned char*)&c);
 3000690:	9100b3e0 	add	x0, sp, #0x2c
 3000694:	94001683 	bl	30060a0 <serial_write>
	}

	return c;
}
 3000698:	b9402fe0 	ldr	w0, [sp,#44]
 300069c:	f9400bfe 	ldr	x30, [sp,#16]
 30006a0:	a8c453f3 	ldp	x19, x20, [sp],#64
 30006a4:	d65f03c0 	ret
int putchar(int c)
{
	int n;

	if (c == '\n') {
		n = 0xd;
 30006a8:	910103f4 	add	x20, sp, #0x40
 30006ac:	528001a0 	mov	w0, #0xd                   	// #13
 30006b0:	b81fce80 	str	w0, [x20,#-4]!
		serial_write((unsigned char*)&n);
 30006b4:	aa1403e0 	mov	x0, x20
 30006b8:	9400167a 	bl	30060a0 <serial_write>
		n = 0xa;
 30006bc:	b9003ff3 	str	w19, [sp,#60]
		serial_write((unsigned char*)&n);
 30006c0:	aa1403e0 	mov	x0, x20
 30006c4:	94001677 	bl	30060a0 <serial_write>
	else {
		serial_write((unsigned char*)&c);
	}

	return c;
}
 30006c8:	b9402fe0 	ldr	w0, [sp,#44]
 30006cc:	f9400bfe 	ldr	x30, [sp,#16]
 30006d0:	a8c453f3 	ldp	x19, x20, [sp],#64
 30006d4:	d65f03c0 	ret

00000000030006d8 <puts>:

int puts(const char *str)
{
 30006d8:	f81f0ffe 	str	x30, [sp,#-16]!
	prints(str);
 30006dc:	9400167d 	bl	30060d0 <prints>
	putchar('\n'); // trailing newline
 30006e0:	52800140 	mov	w0, #0xa                   	// #10
 30006e4:	97ffffe5 	bl	3000678 <putchar>
	return 1;
}
 30006e8:	52800020 	mov	w0, #0x1                   	// #1
 30006ec:	f84107fe 	ldr	x30, [sp],#16
 30006f0:	d65f03c0 	ret

00000000030006f4 <vsnprintf>:
{
	return vsnprintf(str, INT_MAX, fmt, ap);
}

int vsnprintf(char *str, size_t len, const char *fmt, va_list ap)
{
 30006f4:	a9b653f3 	stp	x19, x20, [sp,#-160]!
				OUTPUT_CHAR(uc);
				break;
			case 's':
				s = va_arg(ap, const char *);
				if(s == 0)
					s = "<null>";
 30006f8:	b0000054 	adrp	x20, 3009000 <el3_vectors>
 30006fc:	91344284 	add	x4, x20, #0xd10
{
	return vsnprintf(str, INT_MAX, fmt, ap);
}

int vsnprintf(char *str, size_t len, const char *fmt, va_list ap)
{
 3000700:	a90263f7 	stp	x23, x24, [sp,#32]
 3000704:	a9036bf9 	stp	x25, x26, [sp,#48]
 3000708:	a90473fb 	stp	x27, x28, [sp,#64]
 300070c:	a9015bf5 	stp	x21, x22, [sp,#16]
 3000710:	f9002bfe 	str	x30, [sp,#80]
 3000714:	aa0003f7 	mov	x23, x0
		/* grab the next format character */
		c = *fmt++;
		if(c == 0)
			break;

		switch(c) {
 3000718:	b000005c 	adrp	x28, 3009000 <el3_vectors>
 300071c:	9128c39c 	add	x28, x28, #0xa30
 3000720:	f9400460 	ldr	x0, [x3,#8]
{
	return vsnprintf(str, INT_MAX, fmt, ap);
}

int vsnprintf(char *str, size_t len, const char *fmt, va_list ap)
{
 3000724:	aa0103f8 	mov	x24, x1
 3000728:	f940007b 	ldr	x27, [x3]
 300072c:	aa0203f9 	mov	x25, x2
 3000730:	b9401874 	ldr	w20, [x3,#24]
	const char *s;
	unsigned long long n;
	void *ptr;
	int flags;
	unsigned int format_num;
	size_t chars_written = 0;
 3000734:	d2800013 	mov	x19, #0x0                   	// #0
				OUTPUT_CHAR(uc);
				break;
			case 's':
				s = va_arg(ap, const char *);
				if(s == 0)
					s = "<null>";
 3000738:	f90037e4 	str	x4, [sp,#104]
 300073c:	910203fa 	add	x26, sp, #0x80
 3000740:	f90033e0 	str	x0, [sp,#96]
#define OUTPUT_CHAR(c) do { (*str++ = c); chars_written++; if (chars_written + 1 == len) goto done; } while(0)
#define OUTPUT_CHAR_NOLENCHECK(c) do { (*str++ = c); chars_written++; } while(0)

	for(;;) {
		/* handle regular chars that aren't format related */
		while((c = *fmt++) != 0) {
 3000744:	39400320 	ldrb	w0, [x25]
 3000748:	35000140 	cbnz	w0, 3000770 <vsnprintf+0x7c>
		continue;
	}

done:
	/* null terminate */
	OUTPUT_CHAR_NOLENCHECK('\0');
 300074c:	390002ff 	strb	wzr, [x23]

#undef OUTPUT_CHAR
#undef OUTPUT_CHAR_NOLENCHECK

	return chars_written;
}
 3000750:	2a1303e0 	mov	w0, w19
 3000754:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3000758:	a94263f7 	ldp	x23, x24, [sp,#32]
 300075c:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3000760:	a94473fb 	ldp	x27, x28, [sp,#64]
 3000764:	f9402bfe 	ldr	x30, [sp,#80]
 3000768:	a8ca53f3 	ldp	x19, x20, [sp],#160
 300076c:	d65f03c0 	ret
#define OUTPUT_CHAR_NOLENCHECK(c) do { (*str++ = c); chars_written++; } while(0)

	for(;;) {
		/* handle regular chars that aren't format related */
		while((c = *fmt++) != 0) {
			if(c == '%')
 3000770:	7100941f 	cmp	w0, #0x25
#define OUTPUT_CHAR(c) do { (*str++ = c); chars_written++; if (chars_written + 1 == len) goto done; } while(0)
#define OUTPUT_CHAR_NOLENCHECK(c) do { (*str++ = c); chars_written++; } while(0)

	for(;;) {
		/* handle regular chars that aren't format related */
		while((c = *fmt++) != 0) {
 3000774:	91000739 	add	x25, x25, #0x1
			if(c == '%')
 3000778:	54000160 	b.eq	30007a4 <vsnprintf+0xb0>
				break; /* we saw a '%', break and start parsing format */
			else if (c == '\n') {
 300077c:	7100281f 	cmp	w0, #0xa
 3000780:	54001820 	b.eq	3000a84 <vsnprintf+0x390>
				OUTPUT_CHAR(0xd);
				OUTPUT_CHAR(0xa);
			}
			else
				OUTPUT_CHAR(c);
 3000784:	390002e0 	strb	w0, [x23]
 3000788:	91000a60 	add	x0, x19, #0x2
 300078c:	eb18001f 	cmp	x0, x24
 3000790:	91000660 	add	x0, x19, #0x1
 3000794:	910006f7 	add	x23, x23, #0x1
 3000798:	aa0003f3 	mov	x19, x0
 300079c:	54fffd41 	b.ne	3000744 <vsnprintf+0x50>
 30007a0:	17ffffeb 	b	300074c <vsnprintf+0x58>
#define OUTPUT_CHAR_NOLENCHECK(c) do { (*str++ = c); chars_written++; } while(0)

	for(;;) {
		/* handle regular chars that aren't format related */
		while((c = *fmt++) != 0) {
			if(c == '%')
 30007a4:	52800015 	mov	w21, #0x0                   	// #0
 30007a8:	52800007 	mov	w7, #0x0                   	// #0

		switch(c) {
			case '0'...'9':
				if (c == '0' && format_num == 0)
					flags |= LEADZEROFLAG;
				format_num *= 10;
 30007ac:	52800142 	mov	w2, #0xa                   	// #10
		flags = 0;
		format_num = 0;

next_format:
		/* grab the next format character */
		c = *fmt++;
 30007b0:	38401720 	ldrb	w0, [x25],#1
		if(c == 0)
 30007b4:	34fffcc0 	cbz	w0, 300074c <vsnprintf+0x58>
			break;

		switch(c) {
 30007b8:	51008c01 	sub	w1, w0, #0x23
 30007bc:	71015c3f 	cmp	w1, #0x57
 30007c0:	540001a9 	b.ls	30007f4 <vsnprintf+0x100>
					*(size_t *)ptr = chars_written;
				else
					*(int *)ptr = chars_written;
				break;
			default:
				OUTPUT_CHAR('%');
 30007c4:	91000a61 	add	x1, x19, #0x2
 30007c8:	528004a2 	mov	w2, #0x25                  	// #37
 30007cc:	eb18003f 	cmp	x1, x24
 30007d0:	390002e2 	strb	w2, [x23]
 30007d4:	54001620 	b.eq	3000a98 <vsnprintf+0x3a4>
				OUTPUT_CHAR(c);
 30007d8:	390006e0 	strb	w0, [x23,#1]
 30007dc:	91000e60 	add	x0, x19, #0x3
 30007e0:	eb18001f 	cmp	x0, x24
 30007e4:	aa0103f3 	mov	x19, x1
 30007e8:	91000af7 	add	x23, x23, #0x2
 30007ec:	54fffac1 	b.ne	3000744 <vsnprintf+0x50>
 30007f0:	17ffffd7 	b	300074c <vsnprintf+0x58>
		/* grab the next format character */
		c = *fmt++;
		if(c == 0)
			break;

		switch(c) {
 30007f4:	78615b81 	ldrh	w1, [x28,w1,uxtw #1]
 30007f8:	10000063 	adr	x3, 3000804 <vsnprintf+0x110>
 30007fc:	8b21a861 	add	x1, x3, w1, sxth #2
 3000800:	d61f0020 	br	x1
				goto _output_string;
			case 'p':
				flags |= LONGFLAG | ALTFLAG;
				goto hex;
			case 'X':
				flags |= CAPSFLAG;
 3000804:	321a00e7 	orr	w7, w7, #0x40
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000808:	36080a67 	tbz	w7, #1, 3000954 <vsnprintf+0x260>
 300080c:	37f82094 	tbnz	w20, #31, 3000c1c <vsnprintf+0x528>
 3000810:	91003f61 	add	x1, x27, #0xf
 3000814:	aa1b03e0 	mov	x0, x27
 3000818:	927df03b 	and	x27, x1, #0xfffffffffffffff8
 300081c:	f9400000 	ldr	x0, [x0]
	static const char hextable[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
	static const char hextable_caps[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
	const char *table;

	if((flag & CAPSFLAG))
		table = hextable_caps;
 3000820:	b0000048 	adrp	x8, 3009000 <el3_vectors>
 3000824:	912b8108 	add	x8, x8, #0xae0
	int pos = len;
	static const char hextable[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
	static const char hextable_caps[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
	const char *table;

	if((flag & CAPSFLAG))
 3000828:	121a00e9 	and	w9, w7, #0x40
 300082c:	37300047 	tbnz	w7, #6, 3000834 <vsnprintf+0x140>
		table = hextable_caps;
	else
		table = hextable;
 3000830:	91004108 	add	x8, x8, #0x10

	buf[--pos] = 0;
 3000834:	39027fff 	strb	wzr, [sp,#159]
 3000838:	528003e2 	mov	w2, #0x1f                  	// #31
	do {
		unsigned int digit = u % 16;
 300083c:	12000c01 	and	w1, w0, #0xf
		u /= 16;

		buf[--pos] = table[digit];
 3000840:	51000442 	sub	w2, w2, #0x1
		table = hextable;

	buf[--pos] = 0;
	do {
		unsigned int digit = u % 16;
		u /= 16;
 3000844:	d344fc00 	lsr	x0, x0, #4

		buf[--pos] = table[digit];
 3000848:	2a0103e1 	mov	w1, w1
 300084c:	93407c43 	sxtw	x3, w2
 3000850:	8b030344 	add	x4, x26, x3
 3000854:	38616901 	ldrb	w1, [x8,x1]
 3000858:	38236b41 	strb	w1, [x26,x3]
	} while(u != 0);
 300085c:	b5ffff00 	cbnz	x0, 300083c <vsnprintf+0x148>
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
					(flags & SIZETFLAG) ? va_arg(ap, size_t) :
					va_arg(ap, unsigned int);
				s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
				if(flags & ALTFLAG) {
 3000860:	36280207 	tbz	w7, #5, 30008a0 <vsnprintf+0x1ac>
					OUTPUT_CHAR('0');
 3000864:	91000a62 	add	x2, x19, #0x2
 3000868:	52800600 	mov	w0, #0x30                  	// #48
 300086c:	eb18005f 	cmp	x2, x24
 3000870:	390002e0 	strb	w0, [x23]
 3000874:	54001120 	b.eq	3000a98 <vsnprintf+0x3a4>
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
 3000878:	6b1f013f 	cmp	w9, wzr
 300087c:	91000e60 	add	x0, x19, #0x3
 3000880:	52800b01 	mov	w1, #0x58                  	// #88
 3000884:	52800f03 	mov	w3, #0x78                  	// #120
 3000888:	1a831021 	csel	w1, w1, w3, ne
 300088c:	eb18001f 	cmp	x0, x24
 3000890:	390006e1 	strb	w1, [x23,#1]
 3000894:	aa0203f3 	mov	x19, x2
 3000898:	91000af7 	add	x23, x23, #0x2
 300089c:	54fff580 	b.eq	300074c <vsnprintf+0x58>
 30008a0:	2a1503f6 	mov	w22, w21
		/* move on to the next field */
		continue;

		/* shared output code */
_output_string:
		if (flags & LEFTFORMATFLAG) {
 30008a4:	36480867 	tbz	w7, #9, 30009b0 <vsnprintf+0x2bc>
			/* left justify the text */
			unsigned int count = 0;
			while(*s != 0) {
 30008a8:	39400080 	ldrb	w0, [x4]
 30008ac:	340022a0 	cbz	w0, 3000d00 <vsnprintf+0x60c>
				OUTPUT_CHAR(*s++);
 30008b0:	390002e0 	strb	w0, [x23]
 30008b4:	91000a60 	add	x0, x19, #0x2
 30008b8:	eb18001f 	cmp	x0, x24
 30008bc:	910006e2 	add	x2, x23, #0x1
 30008c0:	91000660 	add	x0, x19, #0x1
 30008c4:	54000da0 	b.eq	3000a78 <vsnprintf+0x384>
 30008c8:	cb130093 	sub	x19, x4, x19
 30008cc:	52800003 	mov	w3, #0x0                   	// #0
 30008d0:	14000006 	b	30008e8 <vsnprintf+0x1f4>
 30008d4:	91000804 	add	x4, x0, #0x2
 30008d8:	38001441 	strb	w1, [x2],#1
 30008dc:	eb18009f 	cmp	x4, x24
 30008e0:	91000400 	add	x0, x0, #0x1
 30008e4:	54000ca0 	b.eq	3000a78 <vsnprintf+0x384>
		/* shared output code */
_output_string:
		if (flags & LEFTFORMATFLAG) {
			/* left justify the text */
			unsigned int count = 0;
			while(*s != 0) {
 30008e8:	38606a61 	ldrb	w1, [x19,x0]
				OUTPUT_CHAR(*s++);
				count++;
 30008ec:	11000463 	add	w3, w3, #0x1
		/* shared output code */
_output_string:
		if (flags & LEFTFORMATFLAG) {
			/* left justify the text */
			unsigned int count = 0;
			while(*s != 0) {
 30008f0:	35ffff21 	cbnz	w1, 30008d4 <vsnprintf+0x1e0>
				OUTPUT_CHAR(*s++);
				count++;
			}

			/* pad to the right (if necessary) */
			for (; format_num > count; format_num--)
 30008f4:	6b15007f 	cmp	w3, w21
 30008f8:	54000d62 	b.cs	3000aa4 <vsnprintf+0x3b0>
				OUTPUT_CHAR(' ');
 30008fc:	91000801 	add	x1, x0, #0x2
 3000900:	52800404 	mov	w4, #0x20                  	// #32
 3000904:	eb18003f 	cmp	x1, x24
 3000908:	39000044 	strb	w4, [x2]
 300090c:	91000400 	add	x0, x0, #0x1
 3000910:	91000441 	add	x1, x2, #0x1
 3000914:	54002760 	b.eq	3000e00 <vsnprintf+0x70c>
 3000918:	510006b7 	sub	w23, w21, #0x1
 300091c:	aa0003f3 	mov	x19, x0
 3000920:	4b0302f7 	sub	w23, w23, w3
 3000924:	910006f7 	add	x23, x23, #0x1
 3000928:	8b170057 	add	x23, x2, x23
 300092c:	cb020002 	sub	x2, x0, x2
				OUTPUT_CHAR(*s++);
				count++;
			}

			/* pad to the right (if necessary) */
			for (; format_num > count; format_num--)
 3000930:	eb17003f 	cmp	x1, x23
 3000934:	54fff080 	b.eq	3000744 <vsnprintf+0x50>
				OUTPUT_CHAR(' ');
 3000938:	38001424 	strb	w4, [x1],#1
 300093c:	91000673 	add	x19, x19, #0x1
 3000940:	8b020020 	add	x0, x1, x2
 3000944:	eb18001f 	cmp	x0, x24
 3000948:	54ffff41 	b.ne	3000930 <vsnprintf+0x23c>
 300094c:	aa0103f7 	mov	x23, x1
 3000950:	17ffff7f 	b	300074c <vsnprintf+0x58>
			case 'X':
				flags |= CAPSFLAG;
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000954:	3707f5c7 	tbnz	w7, #0, 300080c <vsnprintf+0x118>
 3000958:	36181807 	tbz	w7, #3, 3000c58 <vsnprintf+0x564>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
 300095c:	37f821d4 	tbnz	w20, #31, 3000d94 <vsnprintf+0x6a0>
 3000960:	aa1b03e0 	mov	x0, x27
 3000964:	91002f61 	add	x1, x27, #0xb
 3000968:	927df03b 	and	x27, x1, #0xfffffffffffffff8
			case 'X':
				flags |= CAPSFLAG;
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 300096c:	39400000 	ldrb	w0, [x0]
 3000970:	17ffffac 	b	3000820 <vsnprintf+0x12c>
					va_arg(ap, int);
				flags |= SIGNEDFLAG;
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags);
				goto _output_string;
			case 'U':
				flags |= LONGFLAG;
 3000974:	320000e7 	orr	w7, w7, #0x1
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000978:	36080b07 	tbz	w7, #1, 3000ad8 <vsnprintf+0x3e4>
 300097c:	37f81654 	tbnz	w20, #31, 3000c44 <vsnprintf+0x550>
 3000980:	91003f61 	add	x1, x27, #0xf
 3000984:	aa1b03e0 	mov	x0, x27
 3000988:	927df03b 	and	x27, x1, #0xfffffffffffffff8
 300098c:	f9400001 	ldr	x1, [x0]
					(flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
					(flags & SIZETFLAG) ? va_arg(ap, size_t) :
					va_arg(ap, unsigned int);
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags);
 3000990:	2a0703e2 	mov	w2, w7
 3000994:	aa1a03e0 	mov	x0, x26
 3000998:	b90073e7 	str	w7, [sp,#112]
				goto _output_string;
 300099c:	2a1503f6 	mov	w22, w21
					(flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
					(flags & SIZETFLAG) ? va_arg(ap, size_t) :
					va_arg(ap, unsigned int);
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags);
 30009a0:	97fffefe 	bl	3000598 <longlong_to_string.constprop.0>
 30009a4:	aa0003e4 	mov	x4, x0
				goto _output_string;
 30009a8:	b94073e7 	ldr	w7, [sp,#112]
		/* move on to the next field */
		continue;

		/* shared output code */
_output_string:
		if (flags & LEFTFORMATFLAG) {
 30009ac:	374ff7e7 	tbnz	w7, #9, 30008a8 <vsnprintf+0x1b4>
			/* pad to the right (if necessary) */
			for (; format_num > count; format_num--)
				OUTPUT_CHAR(' ');
		} else {
			/* right justify the text (digits) */
			size_t str_len = string_len(s);
 30009b0:	aa0403e0 	mov	x0, x4
 30009b4:	b9007fe7 	str	w7, [sp,#124]
 30009b8:	f9003be4 	str	x4, [sp,#112]
 30009bc:	94001c60 	bl	3007b3c <string_len>
 30009c0:	93407c03 	sxtw	x3, w0
			char outchar = (flags & LEADZEROFLAG) ? '0' : ' ';
 30009c4:	b9407fe7 	ldr	w7, [sp,#124]
 30009c8:	52800402 	mov	w2, #0x20                  	// #32
			for (; format_num > str_len; format_num--)
 30009cc:	f9403be4 	ldr	x4, [sp,#112]
			for (; format_num > count; format_num--)
				OUTPUT_CHAR(' ');
		} else {
			/* right justify the text (digits) */
			size_t str_len = string_len(s);
			char outchar = (flags & LEADZEROFLAG) ? '0' : ' ';
 30009d0:	121600e1 	and	w1, w7, #0x400
 30009d4:	6b1f003f 	cmp	w1, wzr
 30009d8:	52800601 	mov	w1, #0x30                  	// #48
 30009dc:	1a821022 	csel	w2, w1, w2, ne
			for (; format_num > str_len; format_num--)
 30009e0:	eb35407f 	cmp	x3, w21, uxtw
 30009e4:	54001d42 	b.cs	3000d8c <vsnprintf+0x698>
				OUTPUT_CHAR(outchar);
 30009e8:	91000a60 	add	x0, x19, #0x2
 30009ec:	390002e2 	strb	w2, [x23]
 30009f0:	eb18001f 	cmp	x0, x24
 30009f4:	910006f7 	add	x23, x23, #0x1
 30009f8:	91000660 	add	x0, x19, #0x1
 30009fc:	54000101 	b.ne	3000a1c <vsnprintf+0x328>
 3000a00:	14000083 	b	3000c0c <vsnprintf+0x518>
 3000a04:	91000801 	add	x1, x0, #0x2
 3000a08:	380016e2 	strb	w2, [x23],#1
 3000a0c:	eb18003f 	cmp	x1, x24
 3000a10:	91000413 	add	x19, x0, #0x1
 3000a14:	54ffe9c0 	b.eq	300074c <vsnprintf+0x58>
 3000a18:	aa1303e0 	mov	x0, x19
				OUTPUT_CHAR(' ');
		} else {
			/* right justify the text (digits) */
			size_t str_len = string_len(s);
			char outchar = (flags & LEADZEROFLAG) ? '0' : ' ';
			for (; format_num > str_len; format_num--)
 3000a1c:	510006d6 	sub	w22, w22, #0x1
 3000a20:	eb36407f 	cmp	x3, w22, uxtw
 3000a24:	54ffff03 	b.cc	3000a04 <vsnprintf+0x310>
 3000a28:	aa0003f3 	mov	x19, x0
 3000a2c:	cb000084 	sub	x4, x4, x0
				OUTPUT_CHAR(outchar);

			/* output the string */
			while(*s != 0)
 3000a30:	38736880 	ldrb	w0, [x4,x19]
 3000a34:	34ffe880 	cbz	w0, 3000744 <vsnprintf+0x50>
				OUTPUT_CHAR(*s++);
 3000a38:	380016e0 	strb	w0, [x23],#1
 3000a3c:	91000a60 	add	x0, x19, #0x2
 3000a40:	eb18001f 	cmp	x0, x24
 3000a44:	91000660 	add	x0, x19, #0x1
 3000a48:	aa0003f3 	mov	x19, x0
 3000a4c:	54ffff21 	b.ne	3000a30 <vsnprintf+0x33c>
 3000a50:	17ffff3f 	b	300074c <vsnprintf+0x58>
				goto next_format;
			case 'z':
				flags |= SIZETFLAG;
				goto next_format;
			case 'D':
				flags |= LONGFLAG;
 3000a54:	320000e7 	orr	w7, w7, #0x1
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
 3000a58:	360802c7 	tbz	w7, #1, 3000ab0 <vsnprintf+0x3bc>
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
					(flags & HALFFLAG) ? (short)va_arg(ap, int) :
					(flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
 3000a5c:	37f80eb4 	tbnz	w20, #31, 3000c30 <vsnprintf+0x53c>
 3000a60:	aa1b03e0 	mov	x0, x27
 3000a64:	91003f61 	add	x1, x27, #0xf
 3000a68:	927df03b 	and	x27, x1, #0xfffffffffffffff8
			case 'D':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
 3000a6c:	f9400001 	ldr	x1, [x0]
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
					(flags & HALFFLAG) ? (short)va_arg(ap, int) :
					(flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
					va_arg(ap, int);
				flags |= SIGNEDFLAG;
 3000a70:	321800e7 	orr	w7, w7, #0x100
 3000a74:	17ffffc7 	b	3000990 <vsnprintf+0x29c>
_output_string:
		if (flags & LEFTFORMATFLAG) {
			/* left justify the text */
			unsigned int count = 0;
			while(*s != 0) {
				OUTPUT_CHAR(*s++);
 3000a78:	aa0003f3 	mov	x19, x0
 3000a7c:	aa0203f7 	mov	x23, x2
 3000a80:	17ffff33 	b	300074c <vsnprintf+0x58>
		/* handle regular chars that aren't format related */
		while((c = *fmt++) != 0) {
			if(c == '%')
				break; /* we saw a '%', break and start parsing format */
			else if (c == '\n') {
				OUTPUT_CHAR(0xd);
 3000a84:	91000a61 	add	x1, x19, #0x2
 3000a88:	528001a2 	mov	w2, #0xd                   	// #13
 3000a8c:	eb18003f 	cmp	x1, x24
 3000a90:	390002e2 	strb	w2, [x23]
 3000a94:	54ffea21 	b.ne	30007d8 <vsnprintf+0xe4>
 3000a98:	910006f7 	add	x23, x23, #0x1
 3000a9c:	91000673 	add	x19, x19, #0x1
 3000aa0:	17ffff2b 	b	300074c <vsnprintf+0x58>
				OUTPUT_CHAR(*s++);
				count++;
			}

			/* pad to the right (if necessary) */
			for (; format_num > count; format_num--)
 3000aa4:	aa0003f3 	mov	x19, x0
 3000aa8:	aa0203f7 	mov	x23, x2
 3000aac:	17ffff26 	b	3000744 <vsnprintf+0x50>
			case 'D':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
 3000ab0:	3707fd67 	tbnz	w7, #0, 3000a5c <vsnprintf+0x368>
 3000ab4:	37180ee7 	tbnz	w7, #3, 3000c90 <vsnprintf+0x59c>
 3000ab8:	36101347 	tbz	w7, #2, 3000d20 <vsnprintf+0x62c>
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
					(flags & HALFFLAG) ? (short)va_arg(ap, int) :
 3000abc:	37f81c34 	tbnz	w20, #31, 3000e40 <vsnprintf+0x74c>
 3000ac0:	aa1b03e0 	mov	x0, x27
 3000ac4:	91002f61 	add	x1, x27, #0xb
 3000ac8:	927df03b 	and	x27, x1, #0xfffffffffffffff8
			case 'D':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
 3000acc:	79800001 	ldrsh	x1, [x0]
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
					(flags & HALFFLAG) ? (short)va_arg(ap, int) :
					(flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
					va_arg(ap, int);
				flags |= SIGNEDFLAG;
 3000ad0:	321800e7 	orr	w7, w7, #0x100
 3000ad4:	17ffffaf 	b	3000990 <vsnprintf+0x29c>
				goto _output_string;
			case 'U':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000ad8:	3707f527 	tbnz	w7, #0, 300097c <vsnprintf+0x288>
 3000adc:	37180ce7 	tbnz	w7, #3, 3000c78 <vsnprintf+0x584>
 3000ae0:	36101367 	tbz	w7, #2, 3000d4c <vsnprintf+0x658>
					(flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
 3000ae4:	37f81a54 	tbnz	w20, #31, 3000e2c <vsnprintf+0x738>
 3000ae8:	aa1b03e0 	mov	x0, x27
 3000aec:	91002f61 	add	x1, x27, #0xb
 3000af0:	927df03b 	and	x27, x1, #0xfffffffffffffff8
				goto _output_string;
			case 'U':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000af4:	79400001 	ldrh	w1, [x0]
 3000af8:	17ffffa6 	b	3000990 <vsnprintf+0x29c>
				if(flags & HALFFLAG)
					flags |= HALFHALFFLAG;
				flags |= HALFFLAG;
				goto next_format;
			case 'z':
				flags |= SIZETFLAG;
 3000afc:	321c00e7 	orr	w7, w7, #0x10
				goto next_format;
 3000b00:	17ffff2c 	b	30007b0 <vsnprintf+0xbc>
					(flags & SIZETFLAG) ? va_arg(ap, size_t) :
					va_arg(ap, unsigned int);
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags);
				goto _output_string;
			case 'p':
				flags |= LONGFLAG | ALTFLAG;
 3000b04:	52800420 	mov	w0, #0x21                  	// #33
 3000b08:	2a0000e7 	orr	w7, w7, w0
			case 'X':
				flags |= CAPSFLAG;
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000b0c:	370fe807 	tbnz	w7, #1, 300080c <vsnprintf+0x118>
 3000b10:	17ffff91 	b	3000954 <vsnprintf+0x260>
				goto next_format;
			case '%':
				OUTPUT_CHAR('%');
				break;
			case 'c':
				uc = va_arg(ap, unsigned int);
 3000b14:	37f80ed4 	tbnz	w20, #31, 3000cec <vsnprintf+0x5f8>
 3000b18:	91002f61 	add	x1, x27, #0xb
 3000b1c:	aa1b03e0 	mov	x0, x27
 3000b20:	927df03b 	and	x27, x1, #0xfffffffffffffff8
 3000b24:	b9400000 	ldr	w0, [x0]
				OUTPUT_CHAR(uc);
 3000b28:	910006f7 	add	x23, x23, #0x1
				goto next_format;
			case '%':
				OUTPUT_CHAR('%');
				break;
			case 'c':
				uc = va_arg(ap, unsigned int);
 3000b2c:	381ff2e0 	sturb	w0, [x23,#-1]
				OUTPUT_CHAR(uc);
 3000b30:	91000a60 	add	x0, x19, #0x2
 3000b34:	eb18001f 	cmp	x0, x24
 3000b38:	91000660 	add	x0, x19, #0x1
 3000b3c:	54000680 	b.eq	3000c0c <vsnprintf+0x518>
 3000b40:	aa0003f3 	mov	x19, x0
 3000b44:	17ffff00 	b	3000744 <vsnprintf+0x50>
				goto next_format;
			case '#':
				flags |= ALTFLAG;
				goto next_format;
			case 'l':
				if(flags & LONGFLAG)
 3000b48:	120000e0 	and	w0, w7, #0x1
					flags |= LONGLONGFLAG;
 3000b4c:	2a0004e7 	orr	w7, w7, w0, lsl #1
				flags |= LONGFLAG;
 3000b50:	320000e7 	orr	w7, w7, #0x1
				goto next_format;
 3000b54:	17ffff17 	b	30007b0 <vsnprintf+0xbc>
					OUTPUT_CHAR('0');
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
				}
				goto _output_string;
			case 'n':
				ptr = va_arg(ap, void *);
 3000b58:	37f80c14 	tbnz	w20, #31, 3000cd8 <vsnprintf+0x5e4>
 3000b5c:	91003f61 	add	x1, x27, #0xf
 3000b60:	aa1b03e0 	mov	x0, x27
 3000b64:	927df03b 	and	x27, x1, #0xfffffffffffffff8
 3000b68:	f9400000 	ldr	x0, [x0]
				if(flags & LONGLONGFLAG)
 3000b6c:	37080547 	tbnz	w7, #1, 3000c14 <vsnprintf+0x520>
					*(long long *)ptr = chars_written;
				else if(flags & LONGFLAG)
 3000b70:	37000527 	tbnz	w7, #0, 3000c14 <vsnprintf+0x520>
					*(long *)ptr = chars_written;
				else if(flags & HALFHALFFLAG)
 3000b74:	36180e67 	tbz	w7, #3, 3000d40 <vsnprintf+0x64c>
					*(signed char *)ptr = chars_written;
 3000b78:	39000013 	strb	w19, [x0]
 3000b7c:	17fffef2 	b	3000744 <vsnprintf+0x50>
				if(flags & LONGFLAG)
					flags |= LONGLONGFLAG;
				flags |= LONGFLAG;
				goto next_format;
			case 'h':
				if(flags & HALFFLAG)
 3000b80:	121e00e0 	and	w0, w7, #0x4
					flags |= HALFHALFFLAG;
 3000b84:	6b1f001f 	cmp	w0, wzr
 3000b88:	321d00e0 	orr	w0, w7, #0x8
 3000b8c:	1a871007 	csel	w7, w0, w7, ne
				flags |= HALFFLAG;
 3000b90:	321e00e7 	orr	w7, w7, #0x4
				goto next_format;
 3000b94:	17ffff07 	b	30007b0 <vsnprintf+0xbc>
				goto next_format;
			case '+':
				flags |= SHOWSIGNFLAG;
				goto next_format;
			case '#':
				flags |= ALTFLAG;
 3000b98:	321b00e7 	orr	w7, w7, #0x20
				goto next_format;
 3000b9c:	17ffff05 	b	30007b0 <vsnprintf+0xbc>
				goto _output_string;
			case '-':
				flags |= LEFTFORMATFLAG;
				goto next_format;
			case '+':
				flags |= SHOWSIGNFLAG;
 3000ba0:	321900e7 	orr	w7, w7, #0x80
				goto next_format;
 3000ba4:	17ffff03 	b	30007b0 <vsnprintf+0xbc>
				s = va_arg(ap, const char *);
				if(s == 0)
					s = "<null>";
				goto _output_string;
			case '-':
				flags |= LEFTFORMATFLAG;
 3000ba8:	321700e7 	orr	w7, w7, #0x200
				goto next_format;
 3000bac:	17ffff01 	b	30007b0 <vsnprintf+0xbc>
		if(c == 0)
			break;

		switch(c) {
			case '0'...'9':
				if (c == '0' && format_num == 0)
 3000bb0:	35000095 	cbnz	w21, 3000bc0 <vsnprintf+0x4cc>
					flags |= LEADZEROFLAG;
 3000bb4:	7100c01f 	cmp	w0, #0x30
 3000bb8:	321600e1 	orr	w1, w7, #0x400
 3000bbc:	1a870027 	csel	w7, w1, w7, eq
 3000bc0:	5100c000 	sub	w0, w0, #0x30
				format_num *= 10;
				format_num += c - '0';
 3000bc4:	1b0202b5 	madd	w21, w21, w2, w0
				goto next_format;
 3000bc8:	17fffefa 	b	30007b0 <vsnprintf+0xbc>
			case 'c':
				uc = va_arg(ap, unsigned int);
				OUTPUT_CHAR(uc);
				break;
			case 's':
				s = va_arg(ap, const char *);
 3000bcc:	37f807d4 	tbnz	w20, #31, 3000cc4 <vsnprintf+0x5d0>
 3000bd0:	91003f61 	add	x1, x27, #0xf
 3000bd4:	aa1b03e0 	mov	x0, x27
 3000bd8:	927df03b 	and	x27, x1, #0xfffffffffffffff8
 3000bdc:	f9400004 	ldr	x4, [x0]
 3000be0:	2a1503f6 	mov	w22, w21
				if(s == 0)
 3000be4:	b5ffe604 	cbnz	x4, 30008a4 <vsnprintf+0x1b0>
					s = "<null>";
 3000be8:	f94037e4 	ldr	x4, [sp,#104]
 3000bec:	17ffff2e 	b	30008a4 <vsnprintf+0x1b0>
				goto next_format;
			case '.':
				/* XXX for now eat numeric formatting */
				goto next_format;
			case '%':
				OUTPUT_CHAR('%');
 3000bf0:	91000a60 	add	x0, x19, #0x2
 3000bf4:	528004a1 	mov	w1, #0x25                  	// #37
 3000bf8:	eb18001f 	cmp	x0, x24
 3000bfc:	390002e1 	strb	w1, [x23]
 3000c00:	91000660 	add	x0, x19, #0x1
 3000c04:	910006f7 	add	x23, x23, #0x1
 3000c08:	54fff9c1 	b.ne	3000b40 <vsnprintf+0x44c>
		} else {
			/* right justify the text (digits) */
			size_t str_len = string_len(s);
			char outchar = (flags & LEADZEROFLAG) ? '0' : ' ';
			for (; format_num > str_len; format_num--)
				OUTPUT_CHAR(outchar);
 3000c0c:	aa0003f3 	mov	x19, x0
 3000c10:	17fffecf 	b	300074c <vsnprintf+0x58>
				else if(flags & HALFHALFFLAG)
					*(signed char *)ptr = chars_written;
				else if(flags & HALFFLAG)
					*(short *)ptr = chars_written;
				else if(flags & SIZETFLAG)
					*(size_t *)ptr = chars_written;
 3000c14:	f9000013 	str	x19, [x0]
 3000c18:	17fffecb 	b	3000744 <vsnprintf+0x50>
			case 'X':
				flags |= CAPSFLAG;
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000c1c:	11002281 	add	w1, w20, #0x8
 3000c20:	6b1f003f 	cmp	w1, wzr
 3000c24:	5400076d 	b.le	3000d10 <vsnprintf+0x61c>
 3000c28:	2a0103f4 	mov	w20, w1
 3000c2c:	17fffef9 	b	3000810 <vsnprintf+0x11c>
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
					(flags & HALFFLAG) ? (short)va_arg(ap, int) :
					(flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
 3000c30:	11002281 	add	w1, w20, #0x8
 3000c34:	6b1f003f 	cmp	w1, wzr
 3000c38:	5400098d 	b.le	3000d68 <vsnprintf+0x674>
 3000c3c:	2a0103f4 	mov	w20, w1
 3000c40:	17ffff88 	b	3000a60 <vsnprintf+0x36c>
				goto _output_string;
			case 'U':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000c44:	11002281 	add	w1, w20, #0x8
 3000c48:	6b1f003f 	cmp	w1, wzr
 3000c4c:	5400098d 	b.le	3000d7c <vsnprintf+0x688>
 3000c50:	2a0103f4 	mov	w20, w1
 3000c54:	17ffff4b 	b	3000980 <vsnprintf+0x28c>
			case 'X':
				flags |= CAPSFLAG;
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000c58:	371002a7 	tbnz	w7, #2, 3000cac <vsnprintf+0x5b8>
 3000c5c:	3727dd87 	tbnz	w7, #4, 300080c <vsnprintf+0x118>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
					(flags & SIZETFLAG) ? va_arg(ap, size_t) :
					va_arg(ap, unsigned int);
 3000c60:	37f81054 	tbnz	w20, #31, 3000e68 <vsnprintf+0x774>
 3000c64:	aa1b03e0 	mov	x0, x27
 3000c68:	91002f61 	add	x1, x27, #0xb
 3000c6c:	927df03b 	and	x27, x1, #0xfffffffffffffff8
			case 'X':
				flags |= CAPSFLAG;
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000c70:	b9400000 	ldr	w0, [x0]
 3000c74:	17fffeeb 	b	3000820 <vsnprintf+0x12c>
				flags |= LONGFLAG;
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
					(flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
 3000c78:	37f80ab4 	tbnz	w20, #31, 3000dcc <vsnprintf+0x6d8>
 3000c7c:	aa1b03e0 	mov	x0, x27
 3000c80:	91002f61 	add	x1, x27, #0xb
 3000c84:	927df03b 	and	x27, x1, #0xfffffffffffffff8
				goto _output_string;
			case 'U':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000c88:	39400001 	ldrb	w1, [x0]
 3000c8c:	17ffff41 	b	3000990 <vsnprintf+0x29c>
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
 3000c90:	37f80954 	tbnz	w20, #31, 3000db8 <vsnprintf+0x6c4>
 3000c94:	aa1b03e0 	mov	x0, x27
 3000c98:	91002f61 	add	x1, x27, #0xb
 3000c9c:	927df03b 	and	x27, x1, #0xfffffffffffffff8
			case 'D':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
 3000ca0:	39800001 	ldrsb	x1, [x0]
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
					(flags & HALFFLAG) ? (short)va_arg(ap, int) :
					(flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
					va_arg(ap, int);
				flags |= SIGNEDFLAG;
 3000ca4:	321800e7 	orr	w7, w7, #0x100
 3000ca8:	17ffff3a 	b	3000990 <vsnprintf+0x29c>
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
 3000cac:	37f80b74 	tbnz	w20, #31, 3000e18 <vsnprintf+0x724>
 3000cb0:	aa1b03e0 	mov	x0, x27
 3000cb4:	91002f61 	add	x1, x27, #0xb
 3000cb8:	927df03b 	and	x27, x1, #0xfffffffffffffff8
			case 'X':
				flags |= CAPSFLAG;
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000cbc:	79400000 	ldrh	w0, [x0]
 3000cc0:	17fffed8 	b	3000820 <vsnprintf+0x12c>
			case 'c':
				uc = va_arg(ap, unsigned int);
				OUTPUT_CHAR(uc);
				break;
			case 's':
				s = va_arg(ap, const char *);
 3000cc4:	11002281 	add	w1, w20, #0x8
 3000cc8:	6b1f003f 	cmp	w1, wzr
 3000ccc:	5400092d 	b.le	3000df0 <vsnprintf+0x6fc>
 3000cd0:	2a0103f4 	mov	w20, w1
 3000cd4:	17ffffbf 	b	3000bd0 <vsnprintf+0x4dc>
					OUTPUT_CHAR('0');
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
				}
				goto _output_string;
			case 'n':
				ptr = va_arg(ap, void *);
 3000cd8:	11002281 	add	w1, w20, #0x8
 3000cdc:	6b1f003f 	cmp	w1, wzr
 3000ce0:	5400064d 	b.le	3000da8 <vsnprintf+0x6b4>
 3000ce4:	2a0103f4 	mov	w20, w1
 3000ce8:	17ffff9d 	b	3000b5c <vsnprintf+0x468>
				goto next_format;
			case '%':
				OUTPUT_CHAR('%');
				break;
			case 'c':
				uc = va_arg(ap, unsigned int);
 3000cec:	11002281 	add	w1, w20, #0x8
 3000cf0:	6b1f003f 	cmp	w1, wzr
 3000cf4:	5400076d 	b.le	3000de0 <vsnprintf+0x6ec>
 3000cf8:	2a0103f4 	mov	w20, w1
 3000cfc:	17ffff87 	b	3000b18 <vsnprintf+0x424>
		/* shared output code */
_output_string:
		if (flags & LEFTFORMATFLAG) {
			/* left justify the text */
			unsigned int count = 0;
			while(*s != 0) {
 3000d00:	aa1303e0 	mov	x0, x19
 3000d04:	aa1703e2 	mov	x2, x23
 3000d08:	52800003 	mov	w3, #0x0                   	// #0
 3000d0c:	17fffefa 	b	30008f4 <vsnprintf+0x200>
			case 'X':
				flags |= CAPSFLAG;
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000d10:	f94033e0 	ldr	x0, [sp,#96]
 3000d14:	8b34c000 	add	x0, x0, w20, sxtw
 3000d18:	2a0103f4 	mov	w20, w1
 3000d1c:	17fffec0 	b	300081c <vsnprintf+0x128>
			case 'D':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
 3000d20:	3727e9e7 	tbnz	w7, #4, 3000a5c <vsnprintf+0x368>
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
					(flags & HALFFLAG) ? (short)va_arg(ap, int) :
					(flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
					va_arg(ap, int);
 3000d24:	37f80b74 	tbnz	w20, #31, 3000e90 <vsnprintf+0x79c>
 3000d28:	aa1b03e0 	mov	x0, x27
 3000d2c:	91002f61 	add	x1, x27, #0xb
 3000d30:	927df03b 	and	x27, x1, #0xfffffffffffffff8
			case 'D':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
 3000d34:	b9800001 	ldrsw	x1, [x0]
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
					(flags & HALFFLAG) ? (short)va_arg(ap, int) :
					(flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
					va_arg(ap, int);
				flags |= SIGNEDFLAG;
 3000d38:	321800e7 	orr	w7, w7, #0x100
 3000d3c:	17ffff15 	b	3000990 <vsnprintf+0x29c>
					*(long long *)ptr = chars_written;
				else if(flags & LONGFLAG)
					*(long *)ptr = chars_written;
				else if(flags & HALFHALFFLAG)
					*(signed char *)ptr = chars_written;
				else if(flags & HALFFLAG)
 3000d40:	36100667 	tbz	w7, #2, 3000e0c <vsnprintf+0x718>
					*(short *)ptr = chars_written;
 3000d44:	79000013 	strh	w19, [x0]
 3000d48:	17fffe7f 	b	3000744 <vsnprintf+0x50>
				goto _output_string;
			case 'U':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000d4c:	3727e187 	tbnz	w7, #4, 300097c <vsnprintf+0x288>
					(flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
					(flags & SIZETFLAG) ? va_arg(ap, size_t) :
					va_arg(ap, unsigned int);
 3000d50:	37f80974 	tbnz	w20, #31, 3000e7c <vsnprintf+0x788>
 3000d54:	aa1b03e0 	mov	x0, x27
 3000d58:	91002f61 	add	x1, x27, #0xb
 3000d5c:	927df03b 	and	x27, x1, #0xfffffffffffffff8
				goto _output_string;
			case 'U':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000d60:	b9400001 	ldr	w1, [x0]
 3000d64:	17ffff0b 	b	3000990 <vsnprintf+0x29c>
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
					(flags & HALFFLAG) ? (short)va_arg(ap, int) :
					(flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
 3000d68:	f94033e0 	ldr	x0, [sp,#96]
 3000d6c:	8b34c000 	add	x0, x0, w20, sxtw
 3000d70:	2a0103f4 	mov	w20, w1
			case 'D':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
 3000d74:	f9400001 	ldr	x1, [x0]
 3000d78:	17ffff3e 	b	3000a70 <vsnprintf+0x37c>
				goto _output_string;
			case 'U':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000d7c:	f94033e0 	ldr	x0, [sp,#96]
 3000d80:	8b34c000 	add	x0, x0, w20, sxtw
 3000d84:	2a0103f4 	mov	w20, w1
 3000d88:	17ffff01 	b	300098c <vsnprintf+0x298>
				OUTPUT_CHAR(' ');
		} else {
			/* right justify the text (digits) */
			size_t str_len = string_len(s);
			char outchar = (flags & LEADZEROFLAG) ? '0' : ' ';
			for (; format_num > str_len; format_num--)
 3000d8c:	aa1303e0 	mov	x0, x19
 3000d90:	17ffff26 	b	3000a28 <vsnprintf+0x334>
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
 3000d94:	11002281 	add	w1, w20, #0x8
 3000d98:	6b1f003f 	cmp	w1, wzr
 3000d9c:	540005cd 	b.le	3000e54 <vsnprintf+0x760>
 3000da0:	2a0103f4 	mov	w20, w1
 3000da4:	17fffeef 	b	3000960 <vsnprintf+0x26c>
					OUTPUT_CHAR('0');
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
				}
				goto _output_string;
			case 'n':
				ptr = va_arg(ap, void *);
 3000da8:	f94033e0 	ldr	x0, [sp,#96]
 3000dac:	8b34c000 	add	x0, x0, w20, sxtw
 3000db0:	2a0103f4 	mov	w20, w1
 3000db4:	17ffff6d 	b	3000b68 <vsnprintf+0x474>
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
 3000db8:	11002281 	add	w1, w20, #0x8
 3000dbc:	6b1f003f 	cmp	w1, wzr
 3000dc0:	5400072d 	b.le	3000ea4 <vsnprintf+0x7b0>
 3000dc4:	2a0103f4 	mov	w20, w1
 3000dc8:	17ffffb3 	b	3000c94 <vsnprintf+0x5a0>
				flags |= LONGFLAG;
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
					(flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
 3000dcc:	11002281 	add	w1, w20, #0x8
 3000dd0:	6b1f003f 	cmp	w1, wzr
 3000dd4:	5400072d 	b.le	3000eb8 <vsnprintf+0x7c4>
 3000dd8:	2a0103f4 	mov	w20, w1
 3000ddc:	17ffffa8 	b	3000c7c <vsnprintf+0x588>
				goto next_format;
			case '%':
				OUTPUT_CHAR('%');
				break;
			case 'c':
				uc = va_arg(ap, unsigned int);
 3000de0:	f94033e0 	ldr	x0, [sp,#96]
 3000de4:	8b34c000 	add	x0, x0, w20, sxtw
 3000de8:	2a0103f4 	mov	w20, w1
 3000dec:	17ffff4e 	b	3000b24 <vsnprintf+0x430>
				OUTPUT_CHAR(uc);
				break;
			case 's':
				s = va_arg(ap, const char *);
 3000df0:	f94033e0 	ldr	x0, [sp,#96]
 3000df4:	8b34c000 	add	x0, x0, w20, sxtw
 3000df8:	2a0103f4 	mov	w20, w1
 3000dfc:	17ffff78 	b	3000bdc <vsnprintf+0x4e8>
				count++;
			}

			/* pad to the right (if necessary) */
			for (; format_num > count; format_num--)
				OUTPUT_CHAR(' ');
 3000e00:	aa0003f3 	mov	x19, x0
 3000e04:	aa0103f7 	mov	x23, x1
 3000e08:	17fffe51 	b	300074c <vsnprintf+0x58>
					*(long *)ptr = chars_written;
				else if(flags & HALFHALFFLAG)
					*(signed char *)ptr = chars_written;
				else if(flags & HALFFLAG)
					*(short *)ptr = chars_written;
				else if(flags & SIZETFLAG)
 3000e0c:	3727f047 	tbnz	w7, #4, 3000c14 <vsnprintf+0x520>
					*(size_t *)ptr = chars_written;
				else
					*(int *)ptr = chars_written;
 3000e10:	b9000013 	str	w19, [x0]
 3000e14:	17fffe4c 	b	3000744 <vsnprintf+0x50>
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
 3000e18:	11002281 	add	w1, w20, #0x8
 3000e1c:	6b1f003f 	cmp	w1, wzr
 3000e20:	5400056d 	b.le	3000ecc <vsnprintf+0x7d8>
 3000e24:	2a0103f4 	mov	w20, w1
 3000e28:	17ffffa2 	b	3000cb0 <vsnprintf+0x5bc>
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
					(flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
 3000e2c:	11002281 	add	w1, w20, #0x8
 3000e30:	6b1f003f 	cmp	w1, wzr
 3000e34:	5400060d 	b.le	3000ef4 <vsnprintf+0x800>
 3000e38:	2a0103f4 	mov	w20, w1
 3000e3c:	17ffff2b 	b	3000ae8 <vsnprintf+0x3f4>
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
					(flags & HALFFLAG) ? (short)va_arg(ap, int) :
 3000e40:	11002281 	add	w1, w20, #0x8
 3000e44:	6b1f003f 	cmp	w1, wzr
 3000e48:	540006ad 	b.le	3000f1c <vsnprintf+0x828>
 3000e4c:	2a0103f4 	mov	w20, w1
 3000e50:	17ffff1c 	b	3000ac0 <vsnprintf+0x3cc>
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
 3000e54:	f94033e0 	ldr	x0, [sp,#96]
 3000e58:	8b34c000 	add	x0, x0, w20, sxtw
 3000e5c:	2a0103f4 	mov	w20, w1
			case 'X':
				flags |= CAPSFLAG;
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000e60:	39400000 	ldrb	w0, [x0]
 3000e64:	17fffe6f 	b	3000820 <vsnprintf+0x12c>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
					(flags & SIZETFLAG) ? va_arg(ap, size_t) :
					va_arg(ap, unsigned int);
 3000e68:	11002281 	add	w1, w20, #0x8
 3000e6c:	6b1f003f 	cmp	w1, wzr
 3000e70:	540004cd 	b.le	3000f08 <vsnprintf+0x814>
 3000e74:	2a0103f4 	mov	w20, w1
 3000e78:	17ffff7b 	b	3000c64 <vsnprintf+0x570>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
					(flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
					(flags & SIZETFLAG) ? va_arg(ap, size_t) :
					va_arg(ap, unsigned int);
 3000e7c:	11002281 	add	w1, w20, #0x8
 3000e80:	6b1f003f 	cmp	w1, wzr
 3000e84:	540002ed 	b.le	3000ee0 <vsnprintf+0x7ec>
 3000e88:	2a0103f4 	mov	w20, w1
 3000e8c:	17ffffb2 	b	3000d54 <vsnprintf+0x660>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
					(flags & HALFFLAG) ? (short)va_arg(ap, int) :
					(flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
					va_arg(ap, int);
 3000e90:	11002281 	add	w1, w20, #0x8
 3000e94:	6b1f003f 	cmp	w1, wzr
 3000e98:	540004cd 	b.le	3000f30 <vsnprintf+0x83c>
 3000e9c:	2a0103f4 	mov	w20, w1
 3000ea0:	17ffffa2 	b	3000d28 <vsnprintf+0x634>
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
 3000ea4:	f94033e0 	ldr	x0, [sp,#96]
 3000ea8:	8b34c000 	add	x0, x0, w20, sxtw
 3000eac:	2a0103f4 	mov	w20, w1
			case 'D':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
 3000eb0:	39800001 	ldrsb	x1, [x0]
 3000eb4:	17ffff7c 	b	3000ca4 <vsnprintf+0x5b0>
				flags |= LONGFLAG;
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
					(flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
 3000eb8:	f94033e0 	ldr	x0, [sp,#96]
 3000ebc:	8b34c000 	add	x0, x0, w20, sxtw
 3000ec0:	2a0103f4 	mov	w20, w1
				goto _output_string;
			case 'U':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000ec4:	39400001 	ldrb	w1, [x0]
 3000ec8:	17fffeb2 	b	3000990 <vsnprintf+0x29c>
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
 3000ecc:	f94033e0 	ldr	x0, [sp,#96]
 3000ed0:	8b34c000 	add	x0, x0, w20, sxtw
 3000ed4:	2a0103f4 	mov	w20, w1
			case 'X':
				flags |= CAPSFLAG;
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000ed8:	79400000 	ldrh	w0, [x0]
 3000edc:	17fffe51 	b	3000820 <vsnprintf+0x12c>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
					(flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
					(flags & SIZETFLAG) ? va_arg(ap, size_t) :
					va_arg(ap, unsigned int);
 3000ee0:	f94033e0 	ldr	x0, [sp,#96]
 3000ee4:	8b34c000 	add	x0, x0, w20, sxtw
 3000ee8:	2a0103f4 	mov	w20, w1
				goto _output_string;
			case 'U':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000eec:	b9400001 	ldr	w1, [x0]
 3000ef0:	17fffea8 	b	3000990 <vsnprintf+0x29c>
					(flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
 3000ef4:	f94033e0 	ldr	x0, [sp,#96]
 3000ef8:	8b34c000 	add	x0, x0, w20, sxtw
 3000efc:	2a0103f4 	mov	w20, w1
				goto _output_string;
			case 'U':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'u':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000f00:	79400001 	ldrh	w1, [x0]
 3000f04:	17fffea3 	b	3000990 <vsnprintf+0x29c>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
					(flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
					(flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
					(flags & SIZETFLAG) ? va_arg(ap, size_t) :
					va_arg(ap, unsigned int);
 3000f08:	f94033e0 	ldr	x0, [sp,#96]
 3000f0c:	8b34c000 	add	x0, x0, w20, sxtw
 3000f10:	2a0103f4 	mov	w20, w1
			case 'X':
				flags |= CAPSFLAG;
				/* fallthrough */
hex:
			case 'x':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
 3000f14:	b9400000 	ldr	w0, [x0]
 3000f18:	17fffe42 	b	3000820 <vsnprintf+0x12c>
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
					(flags & HALFFLAG) ? (short)va_arg(ap, int) :
 3000f1c:	f94033e0 	ldr	x0, [sp,#96]
 3000f20:	8b34c000 	add	x0, x0, w20, sxtw
 3000f24:	2a0103f4 	mov	w20, w1
			case 'D':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
 3000f28:	79800001 	ldrsh	x1, [x0]
 3000f2c:	17fffee9 	b	3000ad0 <vsnprintf+0x3dc>
					(flags & LONGFLAG) ? va_arg(ap, long) :
					(flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
					(flags & HALFFLAG) ? (short)va_arg(ap, int) :
					(flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
					va_arg(ap, int);
 3000f30:	f94033e0 	ldr	x0, [sp,#96]
 3000f34:	8b34c000 	add	x0, x0, w20, sxtw
 3000f38:	2a0103f4 	mov	w20, w1
			case 'D':
				flags |= LONGFLAG;
				/* fallthrough */
			case 'i':
			case 'd':
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
 3000f3c:	b9800001 	ldrsw	x1, [x0]
 3000f40:	17ffff7e 	b	3000d38 <vsnprintf+0x644>

0000000003000f44 <printf>:
	return err;
}


int printf(const char *fmt, ...)
{
 3000f44:	d10883ff 	sub	sp, sp, #0x220
 3000f48:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
	int err;

	va_list ap;
	va_start(ap, fmt);
 3000f4c:	9108c3e8 	add	x8, sp, #0x230
 3000f50:	f9001be8 	str	x8, [sp,#48]
 3000f54:	f9001fe8 	str	x8, [sp,#56]
 3000f58:	128006e8 	mov	w8, #0xffffffc8            	// #-56
	return err;
}


int printf(const char *fmt, ...)
{
 3000f5c:	f9010fe5 	str	x5, [sp,#536]
	int err;

	va_list ap;
	va_start(ap, fmt);
 3000f60:	9107c3e9 	add	x9, sp, #0x1f0
 3000f64:	b9004be8 	str	w8, [sp,#72]
 3000f68:	12800fe8 	mov	w8, #0xffffff80            	// #-128
	return err;
}


int printf(const char *fmt, ...)
{
 3000f6c:	f90113e6 	str	x6, [sp,#544]
 3000f70:	f90117e7 	str	x7, [sp,#552]
	int err;

	va_list ap;
	va_start(ap, fmt);
 3000f74:	f90023e9 	str	x9, [sp,#64]
 3000f78:	b9004fe8 	str	w8, [sp,#76]
	return err;
}


int printf(const char *fmt, ...)
{
 3000f7c:	f900ffe1 	str	x1, [sp,#504]
static int _dvprintf(const char *fmt, va_list ap)
{
	char buf[256];
	int err;

	err = vsnprintf(buf, sizeof(buf), fmt, ap);
 3000f80:	d2802001 	mov	x1, #0x100                 	// #256
	return err;
}


int printf(const char *fmt, ...)
{
 3000f84:	f90103e2 	str	x2, [sp,#512]
static int _dvprintf(const char *fmt, va_list ap)
{
	char buf[256];
	int err;

	err = vsnprintf(buf, sizeof(buf), fmt, ap);
 3000f88:	aa0003e2 	mov	x2, x0
	return err;
}


int printf(const char *fmt, ...)
{
 3000f8c:	f90107e3 	str	x3, [sp,#520]
 3000f90:	9105c3e0 	add	x0, sp, #0x170
 3000f94:	f9010be4 	str	x4, [sp,#528]
 3000f98:	910603e4 	add	x4, sp, #0x180
 3000f9c:	a9432fea 	ldp	x10, x11, [sp,#48]
 3000fa0:	a94427e8 	ldp	x8, x9, [sp,#64]
 3000fa4:	3d800000 	str	q0, [x0]
static int _dvprintf(const char *fmt, va_list ap)
{
	char buf[256];
	int err;

	err = vsnprintf(buf, sizeof(buf), fmt, ap);
 3000fa8:	910043e3 	add	x3, sp, #0x10
	return err;
}


int printf(const char *fmt, ...)
{
 3000fac:	3d800081 	str	q1, [x4]
 3000fb0:	910643e4 	add	x4, sp, #0x190
static int _dvprintf(const char *fmt, va_list ap)
{
	char buf[256];
	int err;

	err = vsnprintf(buf, sizeof(buf), fmt, ap);
 3000fb4:	9101c3e0 	add	x0, sp, #0x70
	return err;
}


int printf(const char *fmt, ...)
{
 3000fb8:	3d800082 	str	q2, [x4]
 3000fbc:	910683e4 	add	x4, sp, #0x1a0
 3000fc0:	3d800083 	str	q3, [x4]
 3000fc4:	9106c3e4 	add	x4, sp, #0x1b0
 3000fc8:	3d800084 	str	q4, [x4]
 3000fcc:	910703e4 	add	x4, sp, #0x1c0
 3000fd0:	3d800085 	str	q5, [x4]
 3000fd4:	910743e4 	add	x4, sp, #0x1d0
 3000fd8:	3d800086 	str	q6, [x4]
 3000fdc:	910783e4 	add	x4, sp, #0x1e0
 3000fe0:	3d800087 	str	q7, [x4]
 3000fe4:	a9052fea 	stp	x10, x11, [sp,#80]
 3000fe8:	a90627e8 	stp	x8, x9, [sp,#96]
static int _dvprintf(const char *fmt, va_list ap)
{
	char buf[256];
	int err;

	err = vsnprintf(buf, sizeof(buf), fmt, ap);
 3000fec:	a9012fea 	stp	x10, x11, [sp,#16]
 3000ff0:	a90227e8 	stp	x8, x9, [sp,#32]
 3000ff4:	97fffdc0 	bl	30006f4 <vsnprintf>
 3000ff8:	2a0003f3 	mov	w19, w0

	prints(buf);
 3000ffc:	9101c3e0 	add	x0, sp, #0x70
 3001000:	94001434 	bl	30060d0 <prints>
	va_start(ap, fmt);
	err = _dvprintf(fmt, ap);
	va_end(ap);

	return err;
}
 3001004:	2a1303e0 	mov	w0, w19
 3001008:	a8c17bf3 	ldp	x19, x30, [sp],#16
 300100c:	910883ff 	add	sp, sp, #0x220
 3001010:	d65f03c0 	ret

0000000003001014 <snprintf>:

	return err;
}

int snprintf(char *str, size_t len, const char *fmt, ...)
{
 3001014:	d10403ff 	sub	sp, sp, #0x100
	int err;

	va_list ap;
	va_start(ap, fmt);
 3001018:	910403e8 	add	x8, sp, #0x100
 300101c:	910343e9 	add	x9, sp, #0xd0

	return err;
}

int snprintf(char *str, size_t len, const char *fmt, ...)
{
 3001020:	3d8017e0 	str	q0, [sp,#80]
	int err;

	va_list ap;
	va_start(ap, fmt);
 3001024:	f9001be8 	str	x8, [sp,#48]
 3001028:	f9001fe8 	str	x8, [sp,#56]
 300102c:	128004e8 	mov	w8, #0xffffffd8            	// #-40
 3001030:	f90023e9 	str	x9, [sp,#64]
 3001034:	b9004be8 	str	w8, [sp,#72]
 3001038:	12800fe8 	mov	w8, #0xffffff80            	// #-128
 300103c:	b9004fe8 	str	w8, [sp,#76]

	return err;
}

int snprintf(char *str, size_t len, const char *fmt, ...)
{
 3001040:	f90073e4 	str	x4, [sp,#224]
	int err;

	va_list ap;
	va_start(ap, fmt);
	err = vsnprintf(str, len, fmt, ap);
 3001044:	a94327e8 	ldp	x8, x9, [sp,#48]

	return err;
}

int snprintf(char *str, size_t len, const char *fmt, ...)
{
 3001048:	f90077e5 	str	x5, [sp,#232]
	int err;

	va_list ap;
	va_start(ap, fmt);
	err = vsnprintf(str, len, fmt, ap);
 300104c:	a94417e4 	ldp	x4, x5, [sp,#64]

	return err;
}

int snprintf(char *str, size_t len, const char *fmt, ...)
{
 3001050:	f9006fe3 	str	x3, [sp,#216]
	int err;

	va_list ap;
	va_start(ap, fmt);
	err = vsnprintf(str, len, fmt, ap);
 3001054:	910043e3 	add	x3, sp, #0x10

	return err;
}

int snprintf(char *str, size_t len, const char *fmt, ...)
{
 3001058:	f90003fe 	str	x30, [sp]
 300105c:	f9007be6 	str	x6, [sp,#240]
 3001060:	3d801be1 	str	q1, [sp,#96]
 3001064:	f9007fe7 	str	x7, [sp,#248]
 3001068:	3d801fe2 	str	q2, [sp,#112]
 300106c:	3d8023e3 	str	q3, [sp,#128]
 3001070:	3d8027e4 	str	q4, [sp,#144]
 3001074:	3d802be5 	str	q5, [sp,#160]
 3001078:	3d802fe6 	str	q6, [sp,#176]
 300107c:	3d8033e7 	str	q7, [sp,#192]
	int err;

	va_list ap;
	va_start(ap, fmt);
	err = vsnprintf(str, len, fmt, ap);
 3001080:	a90127e8 	stp	x8, x9, [sp,#16]
 3001084:	a90217e4 	stp	x4, x5, [sp,#32]
 3001088:	97fffd9b 	bl	30006f4 <vsnprintf>
	va_end(ap);

	return err;
}
 300108c:	f94003fe 	ldr	x30, [sp]
 3001090:	910403ff 	add	sp, sp, #0x100
 3001094:	d65f03c0 	ret

0000000003001098 <vsprintf>:

	return &buf[pos];
}

int vsprintf(char *str, const char *fmt, va_list ap)
{
 3001098:	aa0203e4 	mov	x4, x2
 300109c:	f81d0ffe 	str	x30, [sp,#-48]!
	return vsnprintf(str, INT_MAX, fmt, ap);
 30010a0:	aa0103e2 	mov	x2, x1
 30010a4:	b2407be1 	mov	x1, #0x7fffffff            	// #2147483647
 30010a8:	910043e3 	add	x3, sp, #0x10
 30010ac:	a9401c86 	ldp	x6, x7, [x4]
 30010b0:	a9411484 	ldp	x4, x5, [x4,#16]
 30010b4:	a90217e4 	stp	x4, x5, [sp,#32]
 30010b8:	a9011fe6 	stp	x6, x7, [sp,#16]
 30010bc:	97fffd8e 	bl	30006f4 <vsnprintf>
}
 30010c0:	f84307fe 	ldr	x30, [sp],#48
 30010c4:	d65f03c0 	ret

00000000030010c8 <sprintf>:

	return err;
}

int sprintf(char *str, const char *fmt, ...)
{
 30010c8:	d10483ff 	sub	sp, sp, #0x120
	int err;

	va_list ap;
	va_start(ap, fmt);
 30010cc:	910483e8 	add	x8, sp, #0x120
 30010d0:	9103c3e9 	add	x9, sp, #0xf0

	return err;
}

int sprintf(char *str, const char *fmt, ...)
{
 30010d4:	3d801fe0 	str	q0, [sp,#112]
	int err;

	va_list ap;
	va_start(ap, fmt);
 30010d8:	f9001be8 	str	x8, [sp,#48]
 30010dc:	f9001fe8 	str	x8, [sp,#56]
 30010e0:	128005e8 	mov	w8, #0xffffffd0            	// #-48
 30010e4:	f90023e9 	str	x9, [sp,#64]
 30010e8:	b9004be8 	str	w8, [sp,#72]
 30010ec:	12800fe8 	mov	w8, #0xffffff80            	// #-128
 30010f0:	b9004fe8 	str	w8, [sp,#76]

	return err;
}

int sprintf(char *str, const char *fmt, ...)
{
 30010f4:	f90083e4 	str	x4, [sp,#256]
 30010f8:	a94327e8 	ldp	x8, x9, [sp,#48]
 30010fc:	f90087e5 	str	x5, [sp,#264]
 3001100:	a94417e4 	ldp	x4, x5, [sp,#64]
 3001104:	f9007be2 	str	x2, [sp,#240]
	return &buf[pos];
}

int vsprintf(char *str, const char *fmt, va_list ap)
{
	return vsnprintf(str, INT_MAX, fmt, ap);
 3001108:	aa0103e2 	mov	x2, x1

	return err;
}

int sprintf(char *str, const char *fmt, ...)
{
 300110c:	f9007fe3 	str	x3, [sp,#248]
	return &buf[pos];
}

int vsprintf(char *str, const char *fmt, va_list ap)
{
	return vsnprintf(str, INT_MAX, fmt, ap);
 3001110:	b2407be1 	mov	x1, #0x7fffffff            	// #2147483647
 3001114:	910043e3 	add	x3, sp, #0x10

	return err;
}

int sprintf(char *str, const char *fmt, ...)
{
 3001118:	f90003fe 	str	x30, [sp]
 300111c:	f9008be6 	str	x6, [sp,#272]
 3001120:	3d8023e1 	str	q1, [sp,#128]
 3001124:	f9008fe7 	str	x7, [sp,#280]
 3001128:	3d8027e2 	str	q2, [sp,#144]
 300112c:	3d802be3 	str	q3, [sp,#160]
 3001130:	3d802fe4 	str	q4, [sp,#176]
 3001134:	3d8033e5 	str	q5, [sp,#192]
 3001138:	3d8037e6 	str	q6, [sp,#208]
 300113c:	3d803be7 	str	q7, [sp,#224]
 3001140:	a90527e8 	stp	x8, x9, [sp,#80]
 3001144:	a90617e4 	stp	x4, x5, [sp,#96]
	return &buf[pos];
}

int vsprintf(char *str, const char *fmt, va_list ap)
{
	return vsnprintf(str, INT_MAX, fmt, ap);
 3001148:	a90127e8 	stp	x8, x9, [sp,#16]
 300114c:	a90217e4 	stp	x4, x5, [sp,#32]
 3001150:	97fffd69 	bl	30006f4 <vsnprintf>
	va_start(ap, fmt);
	err = vsprintf(str, fmt, ap);
	va_end(ap);

	return err;
}
 3001154:	f94003fe 	ldr	x30, [sp]
 3001158:	910483ff 	add	sp, sp, #0x120
 300115c:	d65f03c0 	ret

0000000003001160 <wait_done_timeout>:


#pragma GCC push_options
#pragma GCC optimize ("O2")

void wait_done_timeout(volatile UINT32 *addr, UINT32 mask, UINT32 value){
 3001160:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
 3001164:	aa0003f4 	mov	x20, x0
	unsigned int n = 0;

	while (((*addr) &mask) != value)
 3001168:	5298d833 	mov	w19, #0xc6c1                	// #50881
 300116c:	72a005b3 	movk	w19, #0x2d, lsl #16


#pragma GCC push_options
#pragma GCC optimize ("O2")

void wait_done_timeout(volatile UINT32 *addr, UINT32 mask, UINT32 value){
 3001170:	a9015bf5 	stp	x21, x22, [sp,#16]
 3001174:	f90013fe 	str	x30, [sp,#32]
 3001178:	2a0103f5 	mov	w21, w1
 300117c:	2a0203f6 	mov	w22, w2
	unsigned int n = 0;

	while (((*addr) &mask) != value)
 3001180:	b9400000 	ldr	w0, [x0]
 3001184:	0a010000 	and	w0, w0, w1
 3001188:	6b02001f 	cmp	w0, w2
 300118c:	54000081 	b.ne	300119c <wait_done_timeout+0x3c>
 3001190:	1400000a 	b	30011b8 <wait_done_timeout+0x58>
	{
		//timeout 3s
		if(n++ > 3000000)
 3001194:	71000673 	subs	w19, w19, #0x1
 3001198:	54000200 	b.eq	30011d8 <wait_done_timeout+0x78>
			prints(",0x");
			print_hex(value);
			prints(")\n");
			return;
	 	}
		udelay(0, 1);
 300119c:	52800021 	mov	w1, #0x1                   	// #1
 30011a0:	52800000 	mov	w0, #0x0                   	// #0
 30011a4:	94001244 	bl	3005ab4 <udelay>
#pragma GCC optimize ("O2")

void wait_done_timeout(volatile UINT32 *addr, UINT32 mask, UINT32 value){
	unsigned int n = 0;

	while (((*addr) &mask) != value)
 30011a8:	b9400280 	ldr	w0, [x20]
 30011ac:	0a150000 	and	w0, w0, w21
 30011b0:	6b16001f 	cmp	w0, w22
 30011b4:	54ffff01 	b.ne	3001194 <wait_done_timeout+0x34>
			prints(")\n");
			return;
	 	}
		udelay(0, 1);
	}
	if (((*addr) &mask) != value)
 30011b8:	b9400280 	ldr	w0, [x20]
 30011bc:	0a150015 	and	w21, w0, w21
 30011c0:	6b1602bf 	cmp	w21, w22
 30011c4:	54000341 	b.ne	300122c <wait_done_timeout+0xcc>
	{
		faultDetect();
	}
}
 30011c8:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30011cc:	f94013fe 	ldr	x30, [sp,#32]
 30011d0:	a8c353f3 	ldp	x19, x20, [sp],#48
 30011d4:	d65f03c0 	ret
	while (((*addr) &mask) != value)
	{
		//timeout 3s
		if(n++ > 3000000)
		{
			prints("emmc timeout(addr,mask,value)=(0x");
 30011d8:	90000040 	adrp	x0, 3009000 <el3_vectors>
 30011dc:	91346000 	add	x0, x0, #0xd18
			print_hex(addr);
			prints(",0x");
 30011e0:	90000053 	adrp	x19, 3009000 <el3_vectors>
 30011e4:	91350273 	add	x19, x19, #0xd40
	while (((*addr) &mask) != value)
	{
		//timeout 3s
		if(n++ > 3000000)
		{
			prints("emmc timeout(addr,mask,value)=(0x");
 30011e8:	940013ba 	bl	30060d0 <prints>
			print_hex(addr);
 30011ec:	2a1403e0 	mov	w0, w20
 30011f0:	940013ea 	bl	3006198 <print_hex>
			prints(",0x");
 30011f4:	aa1303e0 	mov	x0, x19
 30011f8:	940013b6 	bl	30060d0 <prints>
			print_hex(mask);
 30011fc:	2a1503e0 	mov	w0, w21
 3001200:	940013e6 	bl	3006198 <print_hex>
			prints(",0x");
 3001204:	aa1303e0 	mov	x0, x19
 3001208:	940013b2 	bl	30060d0 <prints>
			print_hex(value);
 300120c:	2a1603e0 	mov	w0, w22
 3001210:	940013e2 	bl	3006198 <print_hex>
	}
	if (((*addr) &mask) != value)
	{
		faultDetect();
	}
}
 3001214:	f94013fe 	ldr	x30, [sp,#32]
			print_hex(addr);
			prints(",0x");
			print_hex(mask);
			prints(",0x");
			print_hex(value);
			prints(")\n");
 3001218:	90000040 	adrp	x0, 3009000 <el3_vectors>
 300121c:	91352000 	add	x0, x0, #0xd48
	}
	if (((*addr) &mask) != value)
	{
		faultDetect();
	}
}
 3001220:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3001224:	a8c353f3 	ldp	x19, x20, [sp],#48
			print_hex(addr);
			prints(",0x");
			print_hex(mask);
			prints(",0x");
			print_hex(value);
			prints(")\n");
 3001228:	140013aa 	b	30060d0 <prints>
	 	}
		udelay(0, 1);
	}
	if (((*addr) &mask) != value)
	{
		faultDetect();
 300122c:	94001828 	bl	30072cc <faultDetect>

0000000003001230 <check_error>:


UINT32 check_error(){
	//int i;
	UINT32 error;
	error = cr_readl(CR_EMMC_RINTSTS);
 3001230:	d2840880 	mov	x0, #0x2044                	// #8260
 3001234:	f2b30020 	movk	x0, #0x9801, lsl #16
		faultDetect();
	}
}


UINT32 check_error(){
 3001238:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
	//int i;
	UINT32 error;
	error = cr_readl(CR_EMMC_RINTSTS);
 300123c:	b9400013 	ldr	w19, [x0]
	CP15ISB;
 3001240:	d5033fdf 	isb
	sync();
 3001244:	97fffc32 	bl	300030c <sync>

	prints("Emmc STATUS = 0x");
	print_hex(cr_readl(CR_EMMC_STATUS));
	prints("\n");
#endif
	if ((error&CR_EMMC_EBE)==CR_EMMC_EBE)
 3001248:	377802d3 	tbnz	w19, #15, 30012a0 <check_error+0x70>
	{
		prints("End bit error \n");
		return CR_EMMC_EBE;
	}
	else if ((error&CR_EMMC_SBE)==CR_EMMC_SBE)
 300124c:	376801f3 	tbnz	w19, #13, 3001288 <check_error+0x58>
	{
		prints("Start bit error \n");
		return CR_EMMC_SBE;
	}
	else if ((error&CR_EMMC_HLE)==CR_EMMC_HLE)
 3001250:	37600353 	tbnz	w19, #12, 30012b8 <check_error+0x88>
	{
		prints("Hardware locked write error \n");
		return CR_EMMC_HLE;
	}
	else if ((error&CR_EMMC_FRUN)==CR_EMMC_FRUN)
 3001254:	375803f3 	tbnz	w19, #11, 30012d0 <check_error+0xa0>
	{
		prints("FIFO underrun/overrun error \n");
		return CR_EMMC_FRUN;
	}
	else if ((error&CR_EMMC_HTO)==CR_EMMC_HTO)
 3001258:	37500473 	tbnz	w19, #10, 30012e4 <check_error+0xb4>
	{
		prints("Data starvation by host timeout\n");
		return CR_EMMC_HTO;
	}
	else if ((error&CR_EMMC_DRTO)==CR_EMMC_DRTO)
 300125c:	374804f3 	tbnz	w19, #9, 30012f8 <check_error+0xc8>
	{
		prints("Data read timeout\n");
		return CR_EMMC_DRTO;
		}
	else if ((error&CR_EMMC_RTO)==CR_EMMC_RTO)
 3001260:	37400573 	tbnz	w19, #8, 300130c <check_error+0xdc>
	{
		prints("Response timeout\n");
		return CR_EMMC_RTO;
	}
	else if ((error&CR_EMMC_DCRC)==CR_EMMC_DCRC)
 3001264:	373805f3 	tbnz	w19, #7, 3001320 <check_error+0xf0>
	{
		prints("Data CRC error\n");
		return CR_EMMC_DCRC;
	}
	else if ((error&CR_EMMC_RCRC)==CR_EMMC_RCRC)
 3001268:	37300673 	tbnz	w19, #6, 3001334 <check_error+0x104>
	{
		prints("Response CRC error\n");
		return CR_EMMC_RCRC;
	}
	else if ((error&CR_EMMC_RE)==CR_EMMC_RE)
 300126c:	121f0260 	and	w0, w19, #0x2
 3001270:	36080153 	tbz	w19, #1, 3001298 <check_error+0x68>
	{
		prints("Response error\n");
 3001274:	90000040 	adrp	x0, 3009000 <el3_vectors>
 3001278:	9138e000 	add	x0, x0, #0xe38
 300127c:	94001395 	bl	30060d0 <prints>
		return CR_EMMC_RE;
 3001280:	52800040 	mov	w0, #0x2                   	// #2
 3001284:	14000005 	b	3001298 <check_error+0x68>
		prints("End bit error \n");
		return CR_EMMC_EBE;
	}
	else if ((error&CR_EMMC_SBE)==CR_EMMC_SBE)
	{
		prints("Start bit error \n");
 3001288:	90000040 	adrp	x0, 3009000 <el3_vectors>
 300128c:	91358000 	add	x0, x0, #0xd60
 3001290:	94001390 	bl	30060d0 <prints>
		return CR_EMMC_SBE;
 3001294:	52840000 	mov	w0, #0x2000                	// #8192
#endif
		return 0;
	}
	return 0;
	sync();
}
 3001298:	a8c17bf3 	ldp	x19, x30, [sp],#16
 300129c:	d65f03c0 	ret
	print_hex(cr_readl(CR_EMMC_STATUS));
	prints("\n");
#endif
	if ((error&CR_EMMC_EBE)==CR_EMMC_EBE)
	{
		prints("End bit error \n");
 30012a0:	90000040 	adrp	x0, 3009000 <el3_vectors>
 30012a4:	91354000 	add	x0, x0, #0xd50
 30012a8:	9400138a 	bl	30060d0 <prints>
		return CR_EMMC_EBE;
 30012ac:	52900000 	mov	w0, #0x8000                	// #32768
#endif
		return 0;
	}
	return 0;
	sync();
}
 30012b0:	a8c17bf3 	ldp	x19, x30, [sp],#16
 30012b4:	d65f03c0 	ret
		prints("Start bit error \n");
		return CR_EMMC_SBE;
	}
	else if ((error&CR_EMMC_HLE)==CR_EMMC_HLE)
	{
		prints("Hardware locked write error \n");
 30012b8:	90000040 	adrp	x0, 3009000 <el3_vectors>
 30012bc:	9135e000 	add	x0, x0, #0xd78
 30012c0:	94001384 	bl	30060d0 <prints>
		return CR_EMMC_HLE;
 30012c4:	52820000 	mov	w0, #0x1000                	// #4096
#endif
		return 0;
	}
	return 0;
	sync();
}
 30012c8:	a8c17bf3 	ldp	x19, x30, [sp],#16
 30012cc:	d65f03c0 	ret
		prints("Hardware locked write error \n");
		return CR_EMMC_HLE;
	}
	else if ((error&CR_EMMC_FRUN)==CR_EMMC_FRUN)
	{
		prints("FIFO underrun/overrun error \n");
 30012d0:	90000040 	adrp	x0, 3009000 <el3_vectors>
 30012d4:	91366000 	add	x0, x0, #0xd98
 30012d8:	9400137e 	bl	30060d0 <prints>
		return CR_EMMC_FRUN;
 30012dc:	52810000 	mov	w0, #0x800                 	// #2048
 30012e0:	17ffffee 	b	3001298 <check_error+0x68>
	}
	else if ((error&CR_EMMC_HTO)==CR_EMMC_HTO)
	{
		prints("Data starvation by host timeout\n");
 30012e4:	90000040 	adrp	x0, 3009000 <el3_vectors>
 30012e8:	9136e000 	add	x0, x0, #0xdb8
 30012ec:	94001379 	bl	30060d0 <prints>
		return CR_EMMC_HTO;
 30012f0:	52808000 	mov	w0, #0x400                 	// #1024
 30012f4:	17ffffe9 	b	3001298 <check_error+0x68>
	}
	else if ((error&CR_EMMC_DRTO)==CR_EMMC_DRTO)
	{
		prints("Data read timeout\n");
 30012f8:	90000040 	adrp	x0, 3009000 <el3_vectors>
 30012fc:	91378000 	add	x0, x0, #0xde0
 3001300:	94001374 	bl	30060d0 <prints>
		return CR_EMMC_DRTO;
 3001304:	52804000 	mov	w0, #0x200                 	// #512
 3001308:	17ffffe4 	b	3001298 <check_error+0x68>
		}
	else if ((error&CR_EMMC_RTO)==CR_EMMC_RTO)
	{
		prints("Response timeout\n");
 300130c:	90000040 	adrp	x0, 3009000 <el3_vectors>
 3001310:	9137e000 	add	x0, x0, #0xdf8
 3001314:	9400136f 	bl	30060d0 <prints>
		return CR_EMMC_RTO;
 3001318:	52802000 	mov	w0, #0x100                 	// #256
 300131c:	17ffffdf 	b	3001298 <check_error+0x68>
	}
	else if ((error&CR_EMMC_DCRC)==CR_EMMC_DCRC)
	{
		prints("Data CRC error\n");
 3001320:	90000040 	adrp	x0, 3009000 <el3_vectors>
 3001324:	91384000 	add	x0, x0, #0xe10
 3001328:	9400136a 	bl	30060d0 <prints>
		return CR_EMMC_DCRC;
 300132c:	52801000 	mov	w0, #0x80                  	// #128
 3001330:	17ffffda 	b	3001298 <check_error+0x68>
	}
	else if ((error&CR_EMMC_RCRC)==CR_EMMC_RCRC)
	{
		prints("Response CRC error\n");
 3001334:	90000040 	adrp	x0, 3009000 <el3_vectors>
 3001338:	91388000 	add	x0, x0, #0xe20
 300133c:	94001365 	bl	30060d0 <prints>
		return CR_EMMC_RCRC;
 3001340:	52800800 	mov	w0, #0x40                  	// #64
 3001344:	17ffffd5 	b	3001298 <check_error+0x68>

0000000003001348 <reset_ip>:
	return 0;
	sync();
}

void reset_ip(){
	cr_writel(0x00000081, CR_EMMC_BMOD); //reset
 3001348:	d2841000 	mov	x0, #0x2080                	// #8320
 300134c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3001350:	52801021 	mov	w1, #0x81                  	// #129
 3001354:	b9000001 	str	w1, [x0]
	sync();
 3001358:	17fffbed 	b	300030c <sync>

000000000300135c <emmc_send_cmd_no_rsp>:
}

//rsp_con -  0: no rsp, 1: short rsp, 3: long rsp
int emmc_send_cmd_no_rsp(UINT32 cmd_idx, UINT32 sd_arg, UINT32 rsp_con, UINT32 crc){
 300135c:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
 3001360:	2a0203f3 	mov	w19, w2
 3001364:	2a0303f4 	mov	w20, w3
 3001368:	a9015bf5 	stp	x21, x22, [sp,#16]
	//int ret_error = 0;

	cr_writel(0x0000ffff, CR_EMMC_RINTSTS); 		// clear all interrupt status
 300136c:	d2840895 	mov	x21, #0x2044                	// #8260
 3001370:	f2b30035 	movk	x21, #0x9801, lsl #16
	cr_writel(0x00000081, CR_EMMC_BMOD); //reset
	sync();
}

//rsp_con -  0: no rsp, 1: short rsp, 3: long rsp
int emmc_send_cmd_no_rsp(UINT32 cmd_idx, UINT32 sd_arg, UINT32 rsp_con, UINT32 crc){
 3001374:	a90263f7 	stp	x23, x24, [sp,#32]
 3001378:	f9001bfe 	str	x30, [sp,#48]
	//int ret_error = 0;

	cr_writel(0x0000ffff, CR_EMMC_RINTSTS); 		// clear all interrupt status
 300137c:	529ffff6 	mov	w22, #0xffff                	// #65535
	cr_writel(0x00000081, CR_EMMC_BMOD); //reset
	sync();
}

//rsp_con -  0: no rsp, 1: short rsp, 3: long rsp
int emmc_send_cmd_no_rsp(UINT32 cmd_idx, UINT32 sd_arg, UINT32 rsp_con, UINT32 crc){
 3001380:	2a0003f7 	mov	w23, w0
 3001384:	2a0103f8 	mov	w24, w1
	//int ret_error = 0;

	cr_writel(0x0000ffff, CR_EMMC_RINTSTS); 		// clear all interrupt status
 3001388:	b90002b6 	str	w22, [x21]
	CP15ISB;
 300138c:	d5033fdf 	isb
	sync();
 3001390:	97fffbdf 	bl	300030c <sync>
	cr_writel(0x0000ffff, CR_EMMC_INTMASK); 		// enable all interrupts
 3001394:	d2840480 	mov	x0, #0x2024                	// #8228
 3001398:	f2b30020 	movk	x0, #0x9801, lsl #16
 300139c:	b9000016 	str	w22, [x0]
	CP15ISB;
 30013a0:	d5033fdf 	isb
	sync();
 30013a4:	97fffbda 	bl	300030c <sync>
	cr_writel(sd_arg, CR_EMMC_CMDARG);	// cmd argument
 30013a8:	d2840500 	mov	x0, #0x2028                	// #8232
 30013ac:	f2b30020 	movk	x0, #0x9801, lsl #16
 30013b0:	b9000018 	str	w24, [x0]
	CP15ISB;
 30013b4:	d5033fdf 	isb
	sync();
 30013b8:	97fffbd5 	bl	300030c <sync>
 30013bc:	2a1422f4 	orr	w20, w23, w20, lsl #8
#ifdef CR_DEBUG
	prints("Emmc cmd = 0x");
	print_hex(cmd_idx);
	prints("\n");
#endif
	cr_writel(0xa0000000|cmd_idx|(rsp_con<<6)|(crc<<8), CR_EMMC_CMD);	// cmd Register
 30013c0:	d2840581 	mov	x1, #0x202c                	// #8236
 30013c4:	f2b30021 	movk	x1, #0x9801, lsl #16
 30013c8:	52b40002 	mov	w2, #0xa0000000            	// #-1610612736
 30013cc:	2a131853 	orr	w19, w2, w19, lsl #6
 30013d0:	2a130293 	orr	w19, w20, w19
 30013d4:	b9000033 	str	w19, [x1]
	CP15ISB;
 30013d8:	d5033fdf 	isb
	sync();
 30013dc:	97fffbcc 	bl	300030c <sync>
	wait_done_timeout((UINT32 *)CR_EMMC_RINTSTS, 0x4, 0x4);
 30013e0:	52800082 	mov	w2, #0x4                   	// #4
 30013e4:	aa1503e0 	mov	x0, x21
 30013e8:	2a0203e1 	mov	w1, w2
 30013ec:	97ffff5d 	bl	3001160 <wait_done_timeout>
	wait_done_timeout((UINT32 *)CR_EMMC_STATUS, 0x200, 0x0);
 30013f0:	52800002 	mov	w2, #0x0                   	// #0
 30013f4:	52804001 	mov	w1, #0x200                 	// #512
 30013f8:	d2840900 	mov	x0, #0x2048                	// #8264
 30013fc:	f2b30020 	movk	x0, #0x9801, lsl #16
 3001400:	97ffff58 	bl	3001160 <wait_done_timeout>
	CP15ISB;
 3001404:	d5033fdf 	isb
	sync();
 3001408:	97fffbc1 	bl	300030c <sync>

	return 0;

}
 300140c:	52800000 	mov	w0, #0x0                   	// #0
 3001410:	f9401bfe 	ldr	x30, [sp,#48]
 3001414:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3001418:	a94263f7 	ldp	x23, x24, [sp,#32]
 300141c:	a8c453f3 	ldp	x19, x20, [sp],#64
 3001420:	d65f03c0 	ret

0000000003001424 <emmc_send_cmd_get_rsp>:

//rsp_con -  0: no rsp, 1: short rsp, 3: long rsp
int emmc_send_cmd_get_rsp(UINT32 cmd_idx, UINT32 sd_arg, UINT32 rsp_con, UINT32 crc){
 3001424:	a9bb53f3 	stp	x19, x20, [sp,#-80]!
 3001428:	2a0203f3 	mov	w19, w2
 300142c:	2a0303f4 	mov	w20, w3
 3001430:	a9015bf5 	stp	x21, x22, [sp,#16]

	int ret_error = 0;

	cr_writel(0x0000ffff, CR_EMMC_RINTSTS); 		// clear all interrupt status
 3001434:	d2840895 	mov	x21, #0x2044                	// #8260
 3001438:	f2b30035 	movk	x21, #0x9801, lsl #16
	return 0;

}

//rsp_con -  0: no rsp, 1: short rsp, 3: long rsp
int emmc_send_cmd_get_rsp(UINT32 cmd_idx, UINT32 sd_arg, UINT32 rsp_con, UINT32 crc){
 300143c:	a90263f7 	stp	x23, x24, [sp,#32]
 3001440:	f9001bfe 	str	x30, [sp,#48]

	int ret_error = 0;

	cr_writel(0x0000ffff, CR_EMMC_RINTSTS); 		// clear all interrupt status
 3001444:	529ffff6 	mov	w22, #0xffff                	// #65535
	return 0;

}

//rsp_con -  0: no rsp, 1: short rsp, 3: long rsp
int emmc_send_cmd_get_rsp(UINT32 cmd_idx, UINT32 sd_arg, UINT32 rsp_con, UINT32 crc){
 3001448:	2a0003f7 	mov	w23, w0
 300144c:	2a0103f8 	mov	w24, w1

	int ret_error = 0;

	cr_writel(0x0000ffff, CR_EMMC_RINTSTS); 		// clear all interrupt status
 3001450:	b90002b6 	str	w22, [x21]
	CP15ISB;
 3001454:	d5033fdf 	isb
	sync();
 3001458:	97fffbad 	bl	300030c <sync>
	cr_writel(0x0000ffff, CR_EMMC_INTMASK); 		// enable all interrupts
 300145c:	d2840480 	mov	x0, #0x2024                	// #8228
 3001460:	f2b30020 	movk	x0, #0x9801, lsl #16
 3001464:	b9000016 	str	w22, [x0]
	CP15ISB;
 3001468:	d5033fdf 	isb
	sync();
 300146c:	97fffba8 	bl	300030c <sync>
	cr_writel(sd_arg, CR_EMMC_CMDARG);	// cmd argument
 3001470:	d2840500 	mov	x0, #0x2028                	// #8232
 3001474:	f2b30020 	movk	x0, #0x9801, lsl #16
 3001478:	b9000018 	str	w24, [x0]
	CP15ISB;
 300147c:	d5033fdf 	isb
	sync();
 3001480:	97fffba3 	bl	300030c <sync>
 3001484:	2a1422f4 	orr	w20, w23, w20, lsl #8
#ifdef CR_DEBUG
	prints("Emmc cmd = 0x");
	print_hex(cmd_idx);
	prints("\n");
#endif
	cr_writel(0xa0000000|cmd_idx|(rsp_con<<6)|(crc<<8), CR_EMMC_CMD);	// cmd Register
 3001488:	d2840581 	mov	x1, #0x202c                	// #8236
 300148c:	f2b30021 	movk	x1, #0x9801, lsl #16
 3001490:	52b40002 	mov	w2, #0xa0000000            	// #-1610612736
 3001494:	2a131853 	orr	w19, w2, w19, lsl #6
 3001498:	2a130293 	orr	w19, w20, w19
 300149c:	b9000033 	str	w19, [x1]
	CP15ISB;
 30014a0:	d5033fdf 	isb
	sync();
 30014a4:	97fffb9a 	bl	300030c <sync>
	wait_done_timeout((UINT32 *)CR_EMMC_RINTSTS, 0x4, 0x4);
 30014a8:	52800082 	mov	w2, #0x4                   	// #4
 30014ac:	aa1503e0 	mov	x0, x21
 30014b0:	2a0203e1 	mov	w1, w2
 30014b4:	97ffff2b 	bl	3001160 <wait_done_timeout>
	wait_done_timeout((UINT32 *)CR_EMMC_STATUS, 0x200, 0x0);
 30014b8:	52800002 	mov	w2, #0x0                   	// #0
 30014bc:	52804001 	mov	w1, #0x200                 	// #512
 30014c0:	d2840900 	mov	x0, #0x2048                	// #8264
 30014c4:	f2b30020 	movk	x0, #0x9801, lsl #16
 30014c8:	97ffff26 	bl	3001160 <wait_done_timeout>
	CP15ISB;
 30014cc:	d5033fdf 	isb
	sync();
 30014d0:	97fffb8f 	bl	300030c <sync>
	prints("Emmc Resp3 = 0x");
	print_hex(cr_readl(CR_EMMC_RESP3));
	prints("\n");
#endif

	if ((ret_error = check_error())==0)
 30014d4:	97ffff57 	bl	3001230 <check_error>
 30014d8:	34000100 	cbz	w0, 30014f8 <emmc_send_cmd_get_rsp+0xd4>
	return 0;
	sync();
}

void reset_ip(){
	cr_writel(0x00000081, CR_EMMC_BMOD); //reset
 30014dc:	d2841001 	mov	x1, #0x2080                	// #8320
 30014e0:	f2b30021 	movk	x1, #0x9801, lsl #16
 30014e4:	b9004fe0 	str	w0, [sp,#76]
 30014e8:	52801022 	mov	w2, #0x81                  	// #129
 30014ec:	b9000022 	str	w2, [x1]
	sync();
 30014f0:	97fffb87 	bl	300030c <sync>
 30014f4:	b9404fe0 	ldr	w0, [sp,#76]
	else
	{
		reset_ip();
		return ret_error;
	}
}
 30014f8:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30014fc:	a94263f7 	ldp	x23, x24, [sp,#32]
 3001500:	f9401bfe 	ldr	x30, [sp,#48]
 3001504:	a8c553f3 	ldp	x19, x20, [sp],#80
 3001508:	d65f03c0 	ret

000000000300150c <IsAddressSRAM>:



UINT32 IsAddressSRAM(UINT32 addr)
{
    if ((addr<SRAM_BASE_PHY) || (addr > SRAM_LAST_ADDR))
 300150c:	2a0003e2 	mov	w2, w0
 3001510:	f03e7fe1 	adrp	x1, 80000000 <_sram>
 3001514:	91000021 	add	x1, x1, #0x0
 3001518:	eb01005f 	cmp	x2, x1
        //ddr address
        return 0;
 300151c:	52800000 	mov	w0, #0x0                   	// #0



UINT32 IsAddressSRAM(UINT32 addr)
{
    if ((addr<SRAM_BASE_PHY) || (addr > SRAM_LAST_ADDR))
 3001520:	540000a3 	b.cc	3001534 <IsAddressSRAM+0x28>
 3001524:	91407c21 	add	x1, x1, #0x1f, lsl #12
 3001528:	913ffc21 	add	x1, x1, #0xfff
 300152c:	eb01005f 	cmp	x2, x1
 3001530:	1a9f87e0 	cset	w0, ls
        //ddr address
        return 0;
    else
        //secureRam addr
        return 1;
}
 3001534:	d65f03c0 	ret

0000000003001538 <make_ip_des>:

#pragma GCC push_options
#pragma GCC optimize ("O2")

void make_ip_des(UINT32 dma_addr, UINT32 dma_length){
 3001538:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
 300153c:	2a0003f4 	mov	w20, w0
 3001540:	a9015bf5 	stp	x21, x22, [sp,#16]

	UINT32* des_base = rw_descriptor;
 3001544:	b0000056 	adrp	x22, 300a000 <__FUNCTION__.3108+0x3d8>
 3001548:	f945d6d3 	ldr	x19, [x22,#2984]

	UINT32  tmp_val;


	//blk_cnt must be the multiple of 512(0x200)
	blk_cnt  = dma_length>>9;
 300154c:	53097c35 	lsr	w21, w1, #9
}

#pragma GCC push_options
#pragma GCC optimize ("O2")

void make_ip_des(UINT32 dma_addr, UINT32 dma_length){
 3001550:	f90013fe 	str	x30, [sp,#32]
	//blk_cnt must be the multiple of 512(0x200)
	blk_cnt  = dma_length>>9;
  	remain_blk_cnt  = blk_cnt;

#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(rw_descriptor, rw_descriptor+4*MAX_DESCRIPTOR_NUM);
 3001554:	11020261 	add	w1, w19, #0x80
 3001558:	2a1303e0 	mov	w0, w19
 300155c:	97fffabc 	bl	300004c <sys_dcache_flush_MVA>
#endif

	while(remain_blk_cnt){
 3001560:	34000375 	cbz	w21, 30015cc <make_ip_des+0x94>
 3001564:	52800342 	mov	w2, #0x1a                  	// #26
 3001568:	72b00002 	movk	w2, #0x8000, lsl #16

		/* setting des0; transfer parameter  */
		tmp_val = 0x80000000 | 0x2 | 0x10;

		if(remain_blk_cnt == blk_cnt)
		        tmp_val |= 0x8;
 300156c:	52800245 	mov	w5, #0x12                  	// #18
 3001570:	72b00005 	movk	w5, #0x8000, lsl #16

#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(rw_descriptor, rw_descriptor+4*MAX_DESCRIPTOR_NUM);
#endif

	while(remain_blk_cnt){
 3001574:	2a1503e0 	mov	w0, w21

		/* setting des0; transfer parameter  */
		tmp_val = 0x80000000 | 0x2 | 0x10;

		if(remain_blk_cnt == blk_cnt)
		        tmp_val |= 0x8;
 3001578:	2a0203e4 	mov	w4, w2
 300157c:	1400000c 	b	30015ac <make_ip_des+0x74>

		if(remain_blk_cnt <= EMMC_MAX_SCRIPT_BLK)
		        tmp_val |= 0x4;

		des_base[0] = tmp_val;
 3001580:	b9000263 	str	w3, [x19]
 3001584:	52800000 	mov	w0, #0x0                   	// #0
		        blk_cnt2 = remain_blk_cnt;
		}
		des_base[1] = (blk_cnt2<<9);

		/* setting des2; Physical address to DMA to/from */
		des_base[2] = (dma_addr);
 3001588:	b9000a74 	str	w20, [x19,#8]

		/* setting des3; next descrpter entry */
		des_base[3] = ((unsigned int)(des_base+4));
 300158c:	91004273 	add	x19, x19, #0x10
		if(remain_blk_cnt > EMMC_MAX_SCRIPT_BLK){
		        blk_cnt2 = EMMC_MAX_SCRIPT_BLK;
		}else{
		        blk_cnt2 = remain_blk_cnt;
		}
		des_base[1] = (blk_cnt2<<9);
 3001590:	b81f4261 	stur	w1, [x19,#-12]

		/* setting des2; Physical address to DMA to/from */
		des_base[2] = (dma_addr);

		/* setting des3; next descrpter entry */
		des_base[3] = ((unsigned int)(des_base+4));
 3001594:	b81fc273 	stur	w19, [x19,#-4]

		CP15ISB;
 3001598:	d5033fdf 	isb

		/* setting des0; transfer parameter  */
		tmp_val = 0x80000000 | 0x2 | 0x10;

		if(remain_blk_cnt == blk_cnt)
		        tmp_val |= 0x8;
 300159c:	6b0002bf 	cmp	w21, w0
		/* setting des3; next descrpter entry */
		des_base[3] = ((unsigned int)(des_base+4));

		CP15ISB;

		dma_addr = dma_addr+(blk_cnt2<<9);
 30015a0:	0b010294 	add	w20, w20, w1

		/* setting des0; transfer parameter  */
		tmp_val = 0x80000000 | 0x2 | 0x10;

		if(remain_blk_cnt == blk_cnt)
		        tmp_val |= 0x8;
 30015a4:	1a8410a2 	csel	w2, w5, w4, ne

#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(rw_descriptor, rw_descriptor+4*MAX_DESCRIPTOR_NUM);
#endif

	while(remain_blk_cnt){
 30015a8:	34000120 	cbz	w0, 30015cc <make_ip_des+0x94>
		tmp_val = 0x80000000 | 0x2 | 0x10;

		if(remain_blk_cnt == blk_cnt)
		        tmp_val |= 0x8;

		if(remain_blk_cnt <= EMMC_MAX_SCRIPT_BLK)
 30015ac:	7100201f 	cmp	w0, #0x8
 30015b0:	53175801 	lsl	w1, w0, #9
		        tmp_val |= 0x4;
 30015b4:	321e0043 	orr	w3, w2, #0x4
		tmp_val = 0x80000000 | 0x2 | 0x10;

		if(remain_blk_cnt == blk_cnt)
		        tmp_val |= 0x8;

		if(remain_blk_cnt <= EMMC_MAX_SCRIPT_BLK)
 30015b8:	54fffe49 	b.ls	3001580 <make_ip_des+0x48>
		        tmp_val |= 0x4;

		des_base[0] = tmp_val;
 30015bc:	b9000262 	str	w2, [x19]
 30015c0:	51002000 	sub	w0, w0, #0x8
 30015c4:	52820001 	mov	w1, #0x1000                	// #4096
 30015c8:	17fffff0 	b	3001588 <make_ip_des+0x50>
	{
		faultDetect();
	}

#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(rw_descriptor, rw_descriptor+4*MAX_DESCRIPTOR_NUM);
 30015cc:	f945d6c0 	ldr	x0, [x22,#2984]
#endif
}
 30015d0:	f94013fe 	ldr	x30, [sp,#32]
 30015d4:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30015d8:	a8c353f3 	ldp	x19, x20, [sp],#48
	{
		faultDetect();
	}

#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(rw_descriptor, rw_descriptor+4*MAX_DESCRIPTOR_NUM);
 30015dc:	11020001 	add	w1, w0, #0x80
 30015e0:	17fffa9b 	b	300004c <sys_dcache_flush_MVA>

00000000030015e4 <emmc_read_write_ip>:
#endif
}

int emmc_read_write_ip(UINT32 cmd_idx, UINT32 blk_addr, UINT32 dma_addr, UINT32 dma_length){
 30015e4:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
 30015e8:	2a0203e2 	mov	w2, w2



UINT32 IsAddressSRAM(UINT32 addr)
{
    if ((addr<SRAM_BASE_PHY) || (addr > SRAM_LAST_ADDR))
 30015ec:	f03e7fe4 	adrp	x4, 80000000 <_sram>
 30015f0:	91000084 	add	x4, x4, #0x0
#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(rw_descriptor, rw_descriptor+4*MAX_DESCRIPTOR_NUM);
#endif
}

int emmc_read_write_ip(UINT32 cmd_idx, UINT32 blk_addr, UINT32 dma_addr, UINT32 dma_length){
 30015f4:	a9015bf5 	stp	x21, x22, [sp,#16]
 30015f8:	a9027bf7 	stp	x23, x30, [sp,#32]



UINT32 IsAddressSRAM(UINT32 addr)
{
    if ((addr<SRAM_BASE_PHY) || (addr > SRAM_LAST_ADDR))
 30015fc:	eb04005f 	cmp	x2, x4
#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(rw_descriptor, rw_descriptor+4*MAX_DESCRIPTOR_NUM);
#endif
}

int emmc_read_write_ip(UINT32 cmd_idx, UINT32 blk_addr, UINT32 dma_addr, UINT32 dma_length){
 3001600:	aa0203f5 	mov	x21, x2
 3001604:	2a0003f3 	mov	w19, w0
 3001608:	2a0103f6 	mov	w22, w1
 300160c:	2a0303f7 	mov	w23, w3



UINT32 IsAddressSRAM(UINT32 addr)
{
    if ((addr<SRAM_BASE_PHY) || (addr > SRAM_LAST_ADDR))
 3001610:	540000a3 	b.cc	3001624 <emmc_read_write_ip+0x40>
 3001614:	91407c84 	add	x4, x4, #0x1f, lsl #12
 3001618:	913ffc84 	add	x4, x4, #0xfff
 300161c:	eb04005f 	cmp	x2, x4
 3001620:	54000e69 	b.ls	30017ec <emmc_read_write_ip+0x208>
		cr_writel(1, CR_EMMC_SWC_SEL3);
		cr_writel(0x41, CR_EMMC_CP);
		rw_descriptor = sbuf_descriptor;
	}
	else{
		cr_writel(1, CR_EMMC_SWC_SEL0);
 3001624:	d2849a85 	mov	x5, #0x24d4                	// #9428
 3001628:	f2b30025 	movk	x5, #0x9801, lsl #16
		cr_writel(0, CR_EMMC_SWC_SEL1);
 300162c:	d2849b04 	mov	x4, #0x24d8                	// #9432
 3001630:	f2b30024 	movk	x4, #0x9801, lsl #16
		cr_writel(1, CR_EMMC_SWC_SEL2);
 3001634:	d2849b83 	mov	x3, #0x24dc                	// #9436
 3001638:	f2b30023 	movk	x3, #0x9801, lsl #16
		cr_writel(1, CR_EMMC_SWC_SEL3);
		cr_writel(0x41, CR_EMMC_CP);
		rw_descriptor = sbuf_descriptor;
	}
	else{
		cr_writel(1, CR_EMMC_SWC_SEL0);
 300163c:	52800020 	mov	w0, #0x1                   	// #1
		cr_writel(0, CR_EMMC_SWC_SEL1);
		cr_writel(1, CR_EMMC_SWC_SEL2);
		cr_writel(0, CR_EMMC_SWC_SEL3);
 3001640:	d2849c02 	mov	x2, #0x24e0                	// #9440
 3001644:	f2b30022 	movk	x2, #0x9801, lsl #16
		cr_writel(1, CR_EMMC_SWC_SEL3);
		cr_writel(0x41, CR_EMMC_CP);
		rw_descriptor = sbuf_descriptor;
	}
	else{
		cr_writel(1, CR_EMMC_SWC_SEL0);
 3001648:	b90000a0 	str	w0, [x5]
		cr_writel(0, CR_EMMC_SWC_SEL1);
		cr_writel(1, CR_EMMC_SWC_SEL2);
		cr_writel(0, CR_EMMC_SWC_SEL3);
		cr_writel(0, CR_EMMC_CP);
 300164c:	d2848381 	mov	x1, #0x241c                	// #9244
 3001650:	f2b30021 	movk	x1, #0x9801, lsl #16
		cr_writel(0x41, CR_EMMC_CP);
		rw_descriptor = sbuf_descriptor;
	}
	else{
		cr_writel(1, CR_EMMC_SWC_SEL0);
		cr_writel(0, CR_EMMC_SWC_SEL1);
 3001654:	b900009f 	str	wzr, [x4]
		cr_writel(1, CR_EMMC_SWC_SEL2);
		cr_writel(0, CR_EMMC_SWC_SEL3);
		cr_writel(0, CR_EMMC_CP);
		rw_descriptor = ddr_descriptor;
 3001658:	b0000054 	adrp	x20, 300a000 <__FUNCTION__.3108+0x3d8>
		rw_descriptor = sbuf_descriptor;
	}
	else{
		cr_writel(1, CR_EMMC_SWC_SEL0);
		cr_writel(0, CR_EMMC_SWC_SEL1);
		cr_writel(1, CR_EMMC_SWC_SEL2);
 300165c:	b9000060 	str	w0, [x3]
		cr_writel(0, CR_EMMC_SWC_SEL3);
		cr_writel(0, CR_EMMC_CP);
		rw_descriptor = ddr_descriptor;
 3001660:	d2a04000 	mov	x0, #0x2000000             	// #33554432
	}
	else{
		cr_writel(1, CR_EMMC_SWC_SEL0);
		cr_writel(0, CR_EMMC_SWC_SEL1);
		cr_writel(1, CR_EMMC_SWC_SEL2);
		cr_writel(0, CR_EMMC_SWC_SEL3);
 3001664:	b900005f 	str	wzr, [x2]
		cr_writel(0, CR_EMMC_CP);
 3001668:	b900003f 	str	wzr, [x1]
		rw_descriptor = ddr_descriptor;
 300166c:	f905d680 	str	x0, [x20,#2984]
	}


	CP15ISB;
 3001670:	d5033fdf 	isb
	sync();
 3001674:	97fffb26 	bl	300030c <sync>

	make_ip_des(dma_addr, dma_length);
 3001678:	2a1703e1 	mov	w1, w23
 300167c:	2a1503e0 	mov	w0, w21
 3001680:	97ffffae 	bl	3001538 <make_ip_des>

	cr_writel(dma_length, CR_EMMC_BYTCNT);
 3001684:	d2840400 	mov	x0, #0x2020                	// #8224
 3001688:	f2b30020 	movk	x0, #0x9801, lsl #16
	cr_writel(rw_descriptor, CR_EMMC_DBADDR);
 300168c:	d2841104 	mov	x4, #0x2088                	// #8328
 3001690:	f2b30024 	movk	x4, #0x9801, lsl #16
	cr_writel(0x0000ffff, CR_EMMC_RINTSTS);
 3001694:	d2840883 	mov	x3, #0x2044                	// #8260
 3001698:	f2b30023 	movk	x3, #0x9801, lsl #16
	CP15ISB;
	sync();

	make_ip_des(dma_addr, dma_length);

	cr_writel(dma_length, CR_EMMC_BYTCNT);
 300169c:	b9000017 	str	w23, [x0]
	cr_writel(rw_descriptor, CR_EMMC_DBADDR);
	cr_writel(0x0000ffff, CR_EMMC_RINTSTS);
	cr_writel(0x0000ffff, CR_EMMC_INTMASK);
 30016a0:	d2840482 	mov	x2, #0x2024                	// #8228
 30016a4:	f2b30022 	movk	x2, #0x9801, lsl #16
	sync();

	make_ip_des(dma_addr, dma_length);

	cr_writel(dma_length, CR_EMMC_BYTCNT);
	cr_writel(rw_descriptor, CR_EMMC_DBADDR);
 30016a8:	f945d685 	ldr	x5, [x20,#2984]
	cr_writel(0x0000ffff, CR_EMMC_RINTSTS);
	cr_writel(0x0000ffff, CR_EMMC_INTMASK);
	cr_writel(blk_addr,CR_EMMC_CMDARG);
 30016ac:	d2840501 	mov	x1, #0x2028                	// #8232
 30016b0:	f2b30021 	movk	x1, #0x9801, lsl #16
	sync();

	make_ip_des(dma_addr, dma_length);

	cr_writel(dma_length, CR_EMMC_BYTCNT);
	cr_writel(rw_descriptor, CR_EMMC_DBADDR);
 30016b4:	b9000085 	str	w5, [x4]
	cr_writel(0x0000ffff, CR_EMMC_RINTSTS);
 30016b8:	529fffe0 	mov	w0, #0xffff                	// #65535
 30016bc:	b9000060 	str	w0, [x3]
	cr_writel(0x0000ffff, CR_EMMC_INTMASK);
 30016c0:	b9000040 	str	w0, [x2]
	cr_writel(blk_addr,CR_EMMC_CMDARG);
 30016c4:	b9000036 	str	w22, [x1]
	CP15ISB;
 30016c8:	d5033fdf 	isb
	sync();
 30016cc:	97fffb10 	bl	300030c <sync>
	prints("Emmc cmd = 0x");
	print_hex(cmd_idx);
	prints("\n");
#endif

	if((cmd_idx==MMC_READ_SINGLE_BLOCK) || (cmd_idx==MMC_SEND_EXT_CSD)){
 30016d0:	7100227f 	cmp	w19, #0x8
 30016d4:	1a9f17f4 	cset	w20, eq
 30016d8:	350001b4 	cbnz	w20, 300170c <emmc_read_write_ip+0x128>
 30016dc:	7100467f 	cmp	w19, #0x11
 30016e0:	54000160 	b.eq	300170c <emmc_read_write_ip+0x128>
		cr_writel(0xa0000340|cmd_idx,CR_EMMC_CMD);
	}
	else if(cmd_idx==MMC_READ_MULTIPLE_BLOCK){
 30016e4:	71004a7f 	cmp	w19, #0x12
 30016e8:	54000d00 	b.eq	3001888 <emmc_read_write_ip+0x2a4>
		cr_writel(0xa0001340|cmd_idx,CR_EMMC_CMD);
	}
	else if(cmd_idx==MMC_WRITE_BLOCK){
 30016ec:	7100627f 	cmp	w19, #0x18
 30016f0:	54000e40 	b.eq	30018b8 <emmc_read_write_ip+0x2d4>
		cr_writel(0xa0000740|cmd_idx,CR_EMMC_CMD);
	}
	else if(cmd_idx==MMC_WRITE_MULTIPLE_BLOCK){
 30016f4:	7100667f 	cmp	w19, #0x19
 30016f8:	54000d40 	b.eq	30018a0 <emmc_read_write_ip+0x2bc>
		cr_writel(0xa0001740|cmd_idx,CR_EMMC_CMD);
	}
	else{
		prints("Illegal command \n");
 30016fc:	90000040 	adrp	x0, 3009000 <el3_vectors>
 3001700:	91392000 	add	x0, x0, #0xe48
 3001704:	94001273 	bl	30060d0 <prints>
 3001708:	14000007 	b	3001724 <emmc_read_write_ip+0x140>
	print_hex(cmd_idx);
	prints("\n");
#endif

	if((cmd_idx==MMC_READ_SINGLE_BLOCK) || (cmd_idx==MMC_SEND_EXT_CSD)){
		cr_writel(0xa0000340|cmd_idx,CR_EMMC_CMD);
 300170c:	d2840581 	mov	x1, #0x202c                	// #8236
 3001710:	f2b30021 	movk	x1, #0x9801, lsl #16
 3001714:	52806800 	mov	w0, #0x340                 	// #832
 3001718:	72b40000 	movk	w0, #0xa000, lsl #16
 300171c:	2a000260 	orr	w0, w19, w0
 3001720:	b9000020 	str	w0, [x1]
		cr_writel(0xa0001740|cmd_idx,CR_EMMC_CMD);
	}
	else{
		prints("Illegal command \n");
	}
	CP15ISB;
 3001724:	d5033fdf 	isb
	sync();
 3001728:	97fffaf9 	bl	300030c <sync>

	wait_done_timeout((UINT32 *)CR_EMMC_RINTSTS, 0x4, 0x4); //command done
 300172c:	52800082 	mov	w2, #0x4                   	// #4
 3001730:	d2840880 	mov	x0, #0x2044                	// #8260
 3001734:	f2b30020 	movk	x0, #0x9801, lsl #16
 3001738:	2a0203e1 	mov	w1, w2
 300173c:	97fffe89 	bl	3001160 <wait_done_timeout>
	wait_done_timeout((UINT32 *)CR_EMMC_RINTSTS, 0x8, 0x8); //data transfer over
 3001740:	52800102 	mov	w2, #0x8                   	// #8
 3001744:	d2840880 	mov	x0, #0x2044                	// #8260
 3001748:	f2b30020 	movk	x0, #0x9801, lsl #16
 300174c:	2a0203e1 	mov	w1, w2
 3001750:	97fffe84 	bl	3001160 <wait_done_timeout>

	CP15ISB;
 3001754:	d5033fdf 	isb
	sync();
 3001758:	97fffaed 	bl	300030c <sync>


	if ((cmd_idx==MMC_READ_MULTIPLE_BLOCK) ||(cmd_idx==MMC_WRITE_MULTIPLE_BLOCK) ){
 300175c:	7100667f 	cmp	w19, #0x19
 3001760:	54000880 	b.eq	3001870 <emmc_read_write_ip+0x28c>
 3001764:	71004a7f 	cmp	w19, #0x12
 3001768:	54000840 	b.eq	3001870 <emmc_read_write_ip+0x28c>
		wait_done_timeout((UINT32 *)CR_EMMC_RINTSTS, 0x4000, 0x4000); //auto command done (stop command done)
	}
	wait_done_timeout((UINT32 *)CR_EMMC_STATUS, 0x200, 0x0);
 300176c:	52800002 	mov	w2, #0x0                   	// #0
 3001770:	52804001 	mov	w1, #0x200                 	// #512
 3001774:	d2840900 	mov	x0, #0x2048                	// #8264
 3001778:	f2b30020 	movk	x0, #0x9801, lsl #16
 300177c:	97fffe79 	bl	3001160 <wait_done_timeout>

	CP15ISB;
 3001780:	d5033fdf 	isb
	sync();
 3001784:	97fffae2 	bl	300030c <sync>

	//read case : polling dma_done for safety
	if (cmd_idx==MMC_READ_SINGLE_BLOCK || cmd_idx==MMC_READ_MULTIPLE_BLOCK || cmd_idx==MMC_SEND_EXT_CSD) {
 3001788:	51004673 	sub	w19, w19, #0x11
 300178c:	7100067f 	cmp	w19, #0x1
 3001790:	540005a9 	b.ls	3001844 <emmc_read_write_ip+0x260>
 3001794:	35000594 	cbnz	w20, 3001844 <emmc_read_write_ip+0x260>
		CP15ISB;
		sync();
	}

	//always switch eMMC back to NWC
	cr_writel(1, CR_EMMC_SWC_SEL0);
 3001798:	d2849a85 	mov	x5, #0x24d4                	// #9428
 300179c:	f2b30025 	movk	x5, #0x9801, lsl #16
	cr_writel(0, CR_EMMC_SWC_SEL1);
 30017a0:	d2849b04 	mov	x4, #0x24d8                	// #9432
 30017a4:	f2b30024 	movk	x4, #0x9801, lsl #16
	cr_writel(1, CR_EMMC_SWC_SEL2);
 30017a8:	d2849b83 	mov	x3, #0x24dc                	// #9436
 30017ac:	f2b30023 	movk	x3, #0x9801, lsl #16
		CP15ISB;
		sync();
	}

	//always switch eMMC back to NWC
	cr_writel(1, CR_EMMC_SWC_SEL0);
 30017b0:	52800020 	mov	w0, #0x1                   	// #1
	cr_writel(0, CR_EMMC_SWC_SEL1);
	cr_writel(1, CR_EMMC_SWC_SEL2);
	cr_writel(0, CR_EMMC_SWC_SEL3);
 30017b4:	d2849c02 	mov	x2, #0x24e0                	// #9440
 30017b8:	f2b30022 	movk	x2, #0x9801, lsl #16
		CP15ISB;
		sync();
	}

	//always switch eMMC back to NWC
	cr_writel(1, CR_EMMC_SWC_SEL0);
 30017bc:	b90000a0 	str	w0, [x5]
	cr_writel(0, CR_EMMC_SWC_SEL1);
	cr_writel(1, CR_EMMC_SWC_SEL2);
	cr_writel(0, CR_EMMC_SWC_SEL3);
	cr_writel(0, CR_EMMC_CP);
 30017c0:	d2848381 	mov	x1, #0x241c                	// #9244
 30017c4:	f2b30021 	movk	x1, #0x9801, lsl #16
		sync();
	}

	//always switch eMMC back to NWC
	cr_writel(1, CR_EMMC_SWC_SEL0);
	cr_writel(0, CR_EMMC_SWC_SEL1);
 30017c8:	b900009f 	str	wzr, [x4]
	cr_writel(1, CR_EMMC_SWC_SEL2);
 30017cc:	b9000060 	str	w0, [x3]
	cr_writel(0, CR_EMMC_SWC_SEL3);
 30017d0:	b900005f 	str	wzr, [x2]
	cr_writel(0, CR_EMMC_CP);
 30017d4:	b900003f 	str	wzr, [x1]

	if ((ret_error = check_error())!=0){
 30017d8:	97fffe96 	bl	3001230 <check_error>
			sync();
		}
#endif
		return 0;
	}
}
 30017dc:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30017e0:	a9427bf7 	ldp	x23, x30, [sp,#32]
 30017e4:	a8c353f3 	ldp	x19, x20, [sp],#48
 30017e8:	d65f03c0 	ret
int emmc_read_write_ip(UINT32 cmd_idx, UINT32 blk_addr, UINT32 dma_addr, UINT32 dma_length){
	UINT32 ret_error = 0;
	UINT32 reg = 0;

	if (IsAddressSRAM(dma_addr)){
		cr_writel(0, CR_EMMC_SWC_SEL0);
 30017ec:	d2849a85 	mov	x5, #0x24d4                	// #9428
 30017f0:	f2b30025 	movk	x5, #0x9801, lsl #16
		cr_writel(1, CR_EMMC_SWC_SEL1);
 30017f4:	d2849b00 	mov	x0, #0x24d8                	// #9432
 30017f8:	f2b30020 	movk	x0, #0x9801, lsl #16
		cr_writel(0, CR_EMMC_SWC_SEL2);
 30017fc:	d2849b83 	mov	x3, #0x24dc                	// #9436
 3001800:	f2b30023 	movk	x3, #0x9801, lsl #16
int emmc_read_write_ip(UINT32 cmd_idx, UINT32 blk_addr, UINT32 dma_addr, UINT32 dma_length){
	UINT32 ret_error = 0;
	UINT32 reg = 0;

	if (IsAddressSRAM(dma_addr)){
		cr_writel(0, CR_EMMC_SWC_SEL0);
 3001804:	b90000bf 	str	wzr, [x5]
		cr_writel(1, CR_EMMC_SWC_SEL1);
		cr_writel(0, CR_EMMC_SWC_SEL2);
		cr_writel(1, CR_EMMC_SWC_SEL3);
 3001808:	d2849c04 	mov	x4, #0x24e0                	// #9440
 300180c:	f2b30024 	movk	x4, #0x9801, lsl #16
	UINT32 ret_error = 0;
	UINT32 reg = 0;

	if (IsAddressSRAM(dma_addr)){
		cr_writel(0, CR_EMMC_SWC_SEL0);
		cr_writel(1, CR_EMMC_SWC_SEL1);
 3001810:	52800021 	mov	w1, #0x1                   	// #1
		cr_writel(0, CR_EMMC_SWC_SEL2);
		cr_writel(1, CR_EMMC_SWC_SEL3);
		cr_writel(0x41, CR_EMMC_CP);
 3001814:	d2848382 	mov	x2, #0x241c                	// #9244
 3001818:	f2b30022 	movk	x2, #0x9801, lsl #16
	UINT32 ret_error = 0;
	UINT32 reg = 0;

	if (IsAddressSRAM(dma_addr)){
		cr_writel(0, CR_EMMC_SWC_SEL0);
		cr_writel(1, CR_EMMC_SWC_SEL1);
 300181c:	b9000001 	str	w1, [x0]
		cr_writel(0, CR_EMMC_SWC_SEL2);
		cr_writel(1, CR_EMMC_SWC_SEL3);
		cr_writel(0x41, CR_EMMC_CP);
		rw_descriptor = sbuf_descriptor;
 3001820:	b0000054 	adrp	x20, 300a000 <__FUNCTION__.3108+0x3d8>
 3001824:	912ea280 	add	x0, x20, #0xba8
	UINT32 reg = 0;

	if (IsAddressSRAM(dma_addr)){
		cr_writel(0, CR_EMMC_SWC_SEL0);
		cr_writel(1, CR_EMMC_SWC_SEL1);
		cr_writel(0, CR_EMMC_SWC_SEL2);
 3001828:	b900007f 	str	wzr, [x3]
		cr_writel(1, CR_EMMC_SWC_SEL3);
		cr_writel(0x41, CR_EMMC_CP);
 300182c:	52800823 	mov	w3, #0x41                  	// #65

	if (IsAddressSRAM(dma_addr)){
		cr_writel(0, CR_EMMC_SWC_SEL0);
		cr_writel(1, CR_EMMC_SWC_SEL1);
		cr_writel(0, CR_EMMC_SWC_SEL2);
		cr_writel(1, CR_EMMC_SWC_SEL3);
 3001830:	b9000081 	str	w1, [x4]
		cr_writel(0x41, CR_EMMC_CP);
		rw_descriptor = sbuf_descriptor;
 3001834:	91002000 	add	x0, x0, #0x8
	if (IsAddressSRAM(dma_addr)){
		cr_writel(0, CR_EMMC_SWC_SEL0);
		cr_writel(1, CR_EMMC_SWC_SEL1);
		cr_writel(0, CR_EMMC_SWC_SEL2);
		cr_writel(1, CR_EMMC_SWC_SEL3);
		cr_writel(0x41, CR_EMMC_CP);
 3001838:	b9000043 	str	w3, [x2]
		rw_descriptor = sbuf_descriptor;
 300183c:	f905d680 	str	x0, [x20,#2984]
 3001840:	17ffff8c 	b	3001670 <emmc_read_write_ip+0x8c>
	CP15ISB;
	sync();

	//read case : polling dma_done for safety
	if (cmd_idx==MMC_READ_SINGLE_BLOCK || cmd_idx==MMC_READ_MULTIPLE_BLOCK || cmd_idx==MMC_SEND_EXT_CSD) {
		wait_done_timeout((UINT32 *)CR_EMMC_ISR, 0x2, 0x2); //dma_done_int
 3001844:	52800042 	mov	w2, #0x2                   	// #2
 3001848:	d2848493 	mov	x19, #0x2424                	// #9252
 300184c:	f2b30033 	movk	x19, #0x9801, lsl #16
 3001850:	aa1303e0 	mov	x0, x19
 3001854:	2a0203e1 	mov	w1, w2
 3001858:	97fffe42 	bl	3001160 <wait_done_timeout>
		cr_writel(0x2, CR_EMMC_ISR);
 300185c:	52800040 	mov	w0, #0x2                   	// #2
 3001860:	b9000260 	str	w0, [x19]
		CP15ISB;
 3001864:	d5033fdf 	isb
		sync();
 3001868:	97fffaa9 	bl	300030c <sync>
 300186c:	17ffffcb 	b	3001798 <emmc_read_write_ip+0x1b4>
	CP15ISB;
	sync();


	if ((cmd_idx==MMC_READ_MULTIPLE_BLOCK) ||(cmd_idx==MMC_WRITE_MULTIPLE_BLOCK) ){
		wait_done_timeout((UINT32 *)CR_EMMC_RINTSTS, 0x4000, 0x4000); //auto command done (stop command done)
 3001870:	52880002 	mov	w2, #0x4000                	// #16384
 3001874:	d2840880 	mov	x0, #0x2044                	// #8260
 3001878:	f2b30020 	movk	x0, #0x9801, lsl #16
 300187c:	2a0203e1 	mov	w1, w2
 3001880:	97fffe38 	bl	3001160 <wait_done_timeout>
 3001884:	17ffffba 	b	300176c <emmc_read_write_ip+0x188>

	if((cmd_idx==MMC_READ_SINGLE_BLOCK) || (cmd_idx==MMC_SEND_EXT_CSD)){
		cr_writel(0xa0000340|cmd_idx,CR_EMMC_CMD);
	}
	else if(cmd_idx==MMC_READ_MULTIPLE_BLOCK){
		cr_writel(0xa0001340|cmd_idx,CR_EMMC_CMD);
 3001888:	d2840580 	mov	x0, #0x202c                	// #8236
 300188c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3001890:	52826a41 	mov	w1, #0x1352                	// #4946
 3001894:	72b40001 	movk	w1, #0xa000, lsl #16
 3001898:	b9000001 	str	w1, [x0]
 300189c:	17ffffa2 	b	3001724 <emmc_read_write_ip+0x140>
	}
	else if(cmd_idx==MMC_WRITE_BLOCK){
		cr_writel(0xa0000740|cmd_idx,CR_EMMC_CMD);
	}
	else if(cmd_idx==MMC_WRITE_MULTIPLE_BLOCK){
		cr_writel(0xa0001740|cmd_idx,CR_EMMC_CMD);
 30018a0:	d2840580 	mov	x0, #0x202c                	// #8236
 30018a4:	f2b30020 	movk	x0, #0x9801, lsl #16
 30018a8:	5282eb21 	mov	w1, #0x1759                	// #5977
 30018ac:	72b40001 	movk	w1, #0xa000, lsl #16
 30018b0:	b9000001 	str	w1, [x0]
 30018b4:	17ffff9c 	b	3001724 <emmc_read_write_ip+0x140>
	}
	else if(cmd_idx==MMC_READ_MULTIPLE_BLOCK){
		cr_writel(0xa0001340|cmd_idx,CR_EMMC_CMD);
	}
	else if(cmd_idx==MMC_WRITE_BLOCK){
		cr_writel(0xa0000740|cmd_idx,CR_EMMC_CMD);
 30018b8:	d2840580 	mov	x0, #0x202c                	// #8236
 30018bc:	f2b30020 	movk	x0, #0x9801, lsl #16
 30018c0:	5280eb01 	mov	w1, #0x758                 	// #1880
 30018c4:	72b40001 	movk	w1, #0xa000, lsl #16
 30018c8:	b9000001 	str	w1, [x0]
 30018cc:	17ffff96 	b	3001724 <emmc_read_write_ip+0x140>

00000000030018d0 <romcr_blk_ops>:
#endif
		return 0;
	}
}

int romcr_blk_ops(UINT32 bWrite, UINT32 blk_addr,UINT32 blk_cnt, UINT8 *dma_addr){
 30018d0:	a9bb53f3 	stp	x19, x20, [sp,#-80]!
 30018d4:	2a0203f3 	mov	w19, w2
 30018d8:	a90263f7 	stp	x23, x24, [sp,#32]
 30018dc:	a9036bf9 	stp	x25, x26, [sp,#48]
 30018e0:	a9015bf5 	stp	x21, x22, [sp,#16]
 30018e4:	a9047bfb 	stp	x27, x30, [sp,#64]
 30018e8:	2a0003f9 	mov	w25, w0
 30018ec:	2a0103f7 	mov	w23, w1
 30018f0:	aa0303f8 	mov	x24, x3
	UINT32  EMMC_MAX_MULTI_BLK = EMMC_MAX_SCRIPT_BLK * MAX_DESCRIPTOR_NUM;
	UINT32  remain_blk_cnt = blk_cnt;
	UINT32  cur_blk_addr = blk_addr;
	UINT32  cur_blk_cnt;

	if (remain_blk_cnt == 0 || dma_addr == 0)
 30018f4:	34000882 	cbz	w2, 3001a04 <romcr_blk_ops+0x134>
 30018f8:	2a0103f5 	mov	w21, w1
 30018fc:	b4000843 	cbz	x3, 3001a04 <romcr_blk_ops+0x134>
				ret_err = emmc_read_write_ip(MMC_WRITE_MULTIPLE_BLOCK, cur_blk_addr,
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
			else
				ret_err = emmc_read_write_ip(MMC_WRITE_BLOCK, cur_blk_addr,
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
			prints("/");
 3001900:	9000005b 	adrp	x27, 3009000 <el3_vectors>
 3001904:	9139837b 	add	x27, x27, #0xe60
 3001908:	5280081a 	mov	w26, #0x40                  	// #64
 300190c:	1400000d 	b	3001940 <romcr_blk_ops+0x70>

		CP15ISB;
		sync();

		if (bWrite){
			if (cur_blk_cnt > 1)
 3001910:	54000480 	b.eq	30019a0 <romcr_blk_ops+0xd0>
				ret_err = emmc_read_write_ip(MMC_WRITE_MULTIPLE_BLOCK, cur_blk_addr,
 3001914:	53175a83 	lsl	w3, w20, #9
 3001918:	2a1503e1 	mov	w1, w21
 300191c:	52800320 	mov	w0, #0x19                  	// #25
 3001920:	0b022702 	add	w2, w24, w2, lsl #9
 3001924:	97ffff30 	bl	30015e4 <emmc_read_write_ip>
 3001928:	2a0003f6 	mov	w22, w0
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
			else
				ret_err = emmc_read_write_ip(MMC_WRITE_BLOCK, cur_blk_addr,
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
			prints("/");
 300192c:	aa1b03e0 	mov	x0, x27
 3001930:	940011e8 	bl	30060d0 <prints>
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
			else
				ret_err = emmc_read_write_ip(MMC_READ_SINGLE_BLOCK, cur_blk_addr,
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
		}
		cur_blk_addr += cur_blk_cnt;
 3001934:	0b1402b5 	add	w21, w21, w20
		if (ret_err ) return ret_err;
 3001938:	35000276 	cbnz	w22, 3001984 <romcr_blk_ops+0xb4>
		CP15ISB;
		sync();
	}

#else
	while (remain_blk_cnt) {
 300193c:	340004f3 	cbz	w19, 30019d8 <romcr_blk_ops+0x108>
 3001940:	7101027f 	cmp	w19, #0x40
 3001944:	1a9a9274 	csel	w20, w19, w26, ls
		if (remain_blk_cnt > EMMC_MAX_MULTI_BLK)
			cur_blk_cnt = EMMC_MAX_MULTI_BLK;
		else
			cur_blk_cnt = remain_blk_cnt;

		remain_blk_cnt -= cur_blk_cnt;
 3001948:	4b140273 	sub	w19, w19, w20

		CP15ISB;
 300194c:	d5033fdf 	isb
		sync();
 3001950:	97fffa6f 	bl	300030c <sync>

		if (bWrite){
			if (cur_blk_cnt > 1)
 3001954:	7100069f 	cmp	w20, #0x1
				ret_err = emmc_read_write_ip(MMC_WRITE_MULTIPLE_BLOCK, cur_blk_addr,
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
 3001958:	4b1702a2 	sub	w2, w21, w23
		remain_blk_cnt -= cur_blk_cnt;

		CP15ISB;
		sync();

		if (bWrite){
 300195c:	35fffdb9 	cbnz	w25, 3001910 <romcr_blk_ops+0x40>
				ret_err = emmc_read_write_ip(MMC_WRITE_BLOCK, cur_blk_addr,
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
			prints("/");
		}
		else{
			if (cur_blk_cnt > 1)
 3001960:	540002e0 	b.eq	30019bc <romcr_blk_ops+0xec>
				ret_err = emmc_read_write_ip(MMC_READ_MULTIPLE_BLOCK, cur_blk_addr,
 3001964:	2a1503e1 	mov	w1, w21
 3001968:	53175a83 	lsl	w3, w20, #9
 300196c:	52800240 	mov	w0, #0x12                  	// #18
 3001970:	0b022702 	add	w2, w24, w2, lsl #9
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
			else
				ret_err = emmc_read_write_ip(MMC_READ_SINGLE_BLOCK, cur_blk_addr,
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
		}
		cur_blk_addr += cur_blk_cnt;
 3001974:	0b1402b5 	add	w21, w21, w20
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
			prints("/");
		}
		else{
			if (cur_blk_cnt > 1)
				ret_err = emmc_read_write_ip(MMC_READ_MULTIPLE_BLOCK, cur_blk_addr,
 3001978:	97ffff1b 	bl	30015e4 <emmc_read_write_ip>
 300197c:	2a0003f6 	mov	w22, w0
			else
				ret_err = emmc_read_write_ip(MMC_READ_SINGLE_BLOCK, cur_blk_addr,
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
		}
		cur_blk_addr += cur_blk_cnt;
		if (ret_err ) return ret_err;
 3001980:	34fffdf6 	cbz	w22, 300193c <romcr_blk_ops+0x6c>

    if (bWrite){
        prints("\n");
    }
    return ret_err;
}
 3001984:	2a1603e0 	mov	w0, w22
 3001988:	a9415bf5 	ldp	x21, x22, [sp,#16]
 300198c:	a94263f7 	ldp	x23, x24, [sp,#32]
 3001990:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3001994:	a9447bfb 	ldp	x27, x30, [sp,#64]
 3001998:	a8c553f3 	ldp	x19, x20, [sp],#80
 300199c:	d65f03c0 	ret
		if (bWrite){
			if (cur_blk_cnt > 1)
				ret_err = emmc_read_write_ip(MMC_WRITE_MULTIPLE_BLOCK, cur_blk_addr,
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
			else
				ret_err = emmc_read_write_ip(MMC_WRITE_BLOCK, cur_blk_addr,
 30019a0:	52804003 	mov	w3, #0x200                 	// #512
 30019a4:	2a1503e1 	mov	w1, w21
 30019a8:	52800300 	mov	w0, #0x18                  	// #24
 30019ac:	0b022702 	add	w2, w24, w2, lsl #9
 30019b0:	97ffff0d 	bl	30015e4 <emmc_read_write_ip>
 30019b4:	2a0003f6 	mov	w22, w0
 30019b8:	17ffffdd 	b	300192c <romcr_blk_ops+0x5c>
		else{
			if (cur_blk_cnt > 1)
				ret_err = emmc_read_write_ip(MMC_READ_MULTIPLE_BLOCK, cur_blk_addr,
							(UINT32)dma_addr + ((cur_blk_addr - blk_addr) << 9), cur_blk_cnt << 9);
			else
				ret_err = emmc_read_write_ip(MMC_READ_SINGLE_BLOCK, cur_blk_addr,
 30019bc:	52804003 	mov	w3, #0x200                 	// #512
 30019c0:	2a1503e1 	mov	w1, w21
 30019c4:	52800220 	mov	w0, #0x11                  	// #17
 30019c8:	0b022702 	add	w2, w24, w2, lsl #9
 30019cc:	97ffff06 	bl	30015e4 <emmc_read_write_ip>
 30019d0:	2a0003f6 	mov	w22, w0
 30019d4:	17ffffd8 	b	3001934 <romcr_blk_ops+0x64>
	{
		faultDetect();
	}
#endif

    if (bWrite){
 30019d8:	34fffd79 	cbz	w25, 3001984 <romcr_blk_ops+0xb4>
        prints("\n");
 30019dc:	90000040 	adrp	x0, 3009000 <el3_vectors>
 30019e0:	91396000 	add	x0, x0, #0xe58
 30019e4:	940011bb 	bl	30060d0 <prints>
    }
    return ret_err;
}
 30019e8:	2a1603e0 	mov	w0, w22
 30019ec:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30019f0:	a94263f7 	ldp	x23, x24, [sp,#32]
 30019f4:	a9436bf9 	ldp	x25, x26, [sp,#48]
 30019f8:	a9447bfb 	ldp	x27, x30, [sp,#64]
 30019fc:	a8c553f3 	ldp	x19, x20, [sp],#80
 3001a00:	d65f03c0 	ret
	UINT32  remain_blk_cnt = blk_cnt;
	UINT32  cur_blk_addr = blk_addr;
	UINT32  cur_blk_cnt;

	if (remain_blk_cnt == 0 || dma_addr == 0)
		faultDetect();
 3001a04:	94001632 	bl	30072cc <faultDetect>

0000000003001a08 <switch_bus>:
        prints("\n");
    }
    return ret_err;
}

void switch_bus(UINT8 WIDTH){
 3001a08:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
 3001a0c:	53001c13 	uxtb	w19, w0
	emmc_send_cmd_get_rsp(MMC_SWITCH, 0x03b70000|(WIDTH<<8), 1, 1); //WIDTH - 0: SDR1b, 1: SDR4b, 2: SDR8b, 5: DDR4b, 6: DDR8b
 3001a10:	52800023 	mov	w3, #0x1                   	// #1
 3001a14:	52a076e1 	mov	w1, #0x3b70000             	// #62324736
 3001a18:	2a0303e2 	mov	w2, w3
 3001a1c:	2a132021 	orr	w1, w1, w19, lsl #8
 3001a20:	528000c0 	mov	w0, #0x6                   	// #6
 3001a24:	97fffe80 	bl	3001424 <emmc_send_cmd_get_rsp>
	emmc_send_cmd_get_rsp(MMC_SEND_STATUS, emmc_card.rca, 1, 1);
 3001a28:	b0000041 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 3001a2c:	52800023 	mov	w3, #0x1                   	// #1
 3001a30:	2a0303e2 	mov	w2, w3
 3001a34:	528001a0 	mov	w0, #0xd                   	// #13
 3001a38:	b94c3021 	ldr	w1, [x1,#3120]
 3001a3c:	97fffe7a 	bl	3001424 <emmc_send_cmd_get_rsp>
	CP15ISB;
 3001a40:	d5033fdf 	isb
	if ((cr_readl(CR_EMMC_RESP0)&0x80)==0){
 3001a44:	d2840600 	mov	x0, #0x2030                	// #8240
 3001a48:	f2b30020 	movk	x0, #0x9801, lsl #16
 3001a4c:	b9400000 	ldr	w0, [x0]
 3001a50:	37380260 	tbnz	w0, #7, 3001a9c <switch_bus+0x94>
#ifdef CR_DEBUG
		prints("switch bus width to 0x");
		print_hex(WIDTH * 4);
		prints(" bits success\n");
#endif
		switch(WIDTH)
 3001a54:	71001a7f 	cmp	w19, #0x6
			case 6:
				cr_writel(0x00010000, CR_EMMC_CTYPE); // 8bit
				cr_writel(0x00010001, CR_EMMC_UHSREG); //DDR mode, SW 1.8V
				break;
			default:
				cr_writel(0x00010000, CR_EMMC_CTYPE); // 8bit
 3001a58:	d2840302 	mov	x2, #0x2018                	// #8216
 3001a5c:	f2b30022 	movk	x2, #0x9801, lsl #16
#ifdef CR_DEBUG
		prints("switch bus width to 0x");
		print_hex(WIDTH * 4);
		prints(" bits success\n");
#endif
		switch(WIDTH)
 3001a60:	54000129 	b.ls	3001a84 <switch_bus+0x7c>
				cr_writel(0x00010000, CR_EMMC_CTYPE); // 8bit
				cr_writel(0x00010001, CR_EMMC_UHSREG); //DDR mode, SW 1.8V
				break;
			default:
				cr_writel(0x00010000, CR_EMMC_CTYPE); // 8bit
				cr_writel(0x00000001, CR_EMMC_UHSREG); //non-DDR mode, SW 1.8V
 3001a64:	d2840e80 	mov	x0, #0x2074                	// #8308
 3001a68:	f2b30020 	movk	x0, #0x9801, lsl #16
			case 6:
				cr_writel(0x00010000, CR_EMMC_CTYPE); // 8bit
				cr_writel(0x00010001, CR_EMMC_UHSREG); //DDR mode, SW 1.8V
				break;
			default:
				cr_writel(0x00010000, CR_EMMC_CTYPE); // 8bit
 3001a6c:	52a00023 	mov	w3, #0x10000               	// #65536
 3001a70:	b9000043 	str	w3, [x2]
				cr_writel(0x00000001, CR_EMMC_UHSREG); //non-DDR mode, SW 1.8V
 3001a74:	52800021 	mov	w1, #0x1                   	// #1
 3001a78:	b9000001 	str	w1, [x0]
	else{
		prints("switch bus width to 0x");
		print_hex(WIDTH * 4);
		prints(" bits fail\n");
	}
}
 3001a7c:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3001a80:	d65f03c0 	ret
#ifdef CR_DEBUG
		prints("switch bus width to 0x");
		print_hex(WIDTH * 4);
		prints(" bits success\n");
#endif
		switch(WIDTH)
 3001a84:	90000040 	adrp	x0, 3009000 <el3_vectors>
 3001a88:	912c0000 	add	x0, x0, #0xb00
 3001a8c:	38734800 	ldrb	w0, [x0,w19,uxtw]
 3001a90:	10000061 	adr	x1, 3001a9c <switch_bus+0x94>
 3001a94:	8b208820 	add	x0, x1, w0, sxtb #2
 3001a98:	d61f0000 	br	x0
				break;
				break;
		}
	}
	else{
		prints("switch bus width to 0x");
 3001a9c:	90000040 	adrp	x0, 3009000 <el3_vectors>
 3001aa0:	9139a000 	add	x0, x0, #0xe68
 3001aa4:	9400118b 	bl	30060d0 <prints>
		print_hex(WIDTH * 4);
 3001aa8:	531e7660 	lsl	w0, w19, #2
 3001aac:	940011bb 	bl	3006198 <print_hex>
		prints(" bits fail\n");
	}
}
 3001ab0:	a8c17bf3 	ldp	x19, x30, [sp],#16
		}
	}
	else{
		prints("switch bus width to 0x");
		print_hex(WIDTH * 4);
		prints(" bits fail\n");
 3001ab4:	90000040 	adrp	x0, 3009000 <el3_vectors>
 3001ab8:	913a0000 	add	x0, x0, #0xe80
 3001abc:	14001185 	b	30060d0 <prints>
				cr_writel(0x00010000, CR_EMMC_CTYPE); // 8bit
				cr_writel(0x00000001, CR_EMMC_UHSREG); //non-DDR mode, SW 1.8V
				break;
			case 5:
				cr_writel(0x00000001, CR_EMMC_CTYPE); // 4bit
				cr_writel(0x00010001, CR_EMMC_UHSREG); //DDR mode, SW 1.8V
 3001ac0:	d2840e80 	mov	x0, #0x2074                	// #8308
 3001ac4:	f2b30020 	movk	x0, #0x9801, lsl #16
			case 2:
				cr_writel(0x00010000, CR_EMMC_CTYPE); // 8bit
				cr_writel(0x00000001, CR_EMMC_UHSREG); //non-DDR mode, SW 1.8V
				break;
			case 5:
				cr_writel(0x00000001, CR_EMMC_CTYPE); // 4bit
 3001ac8:	52800023 	mov	w3, #0x1                   	// #1
 3001acc:	b9000043 	str	w3, [x2]
				cr_writel(0x00010001, CR_EMMC_UHSREG); //DDR mode, SW 1.8V
 3001ad0:	320083e1 	mov	w1, #0x10001               	// #65537
 3001ad4:	b9000001 	str	w1, [x0]
	else{
		prints("switch bus width to 0x");
		print_hex(WIDTH * 4);
		prints(" bits fail\n");
	}
}
 3001ad8:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3001adc:	d65f03c0 	ret
				cr_writel(0x00000001, CR_EMMC_CTYPE); // 4bit
				cr_writel(0x00010001, CR_EMMC_UHSREG); //DDR mode, SW 1.8V
				break;
			case 6:
				cr_writel(0x00010000, CR_EMMC_CTYPE); // 8bit
				cr_writel(0x00010001, CR_EMMC_UHSREG); //DDR mode, SW 1.8V
 3001ae0:	d2840e80 	mov	x0, #0x2074                	// #8308
 3001ae4:	f2b30020 	movk	x0, #0x9801, lsl #16
			case 5:
				cr_writel(0x00000001, CR_EMMC_CTYPE); // 4bit
				cr_writel(0x00010001, CR_EMMC_UHSREG); //DDR mode, SW 1.8V
				break;
			case 6:
				cr_writel(0x00010000, CR_EMMC_CTYPE); // 8bit
 3001ae8:	52a00023 	mov	w3, #0x10000               	// #65536
 3001aec:	b9000043 	str	w3, [x2]
				cr_writel(0x00010001, CR_EMMC_UHSREG); //DDR mode, SW 1.8V
 3001af0:	320083e1 	mov	w1, #0x10001               	// #65537
 3001af4:	b9000001 	str	w1, [x0]
	else{
		prints("switch bus width to 0x");
		print_hex(WIDTH * 4);
		prints(" bits fail\n");
	}
}
 3001af8:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3001afc:	d65f03c0 	ret
				cr_writel(0x00000000, CR_EMMC_CTYPE); // 1bit
				cr_writel(0x00000001, CR_EMMC_UHSREG); //non-DDR mode, SW 1.8V
				break;
			case 1:
				cr_writel(0x00000001, CR_EMMC_CTYPE); // 4bit
				cr_writel(0x00000001, CR_EMMC_UHSREG); //non-DDR mode, SW 1.8V
 3001b00:	d2840e81 	mov	x1, #0x2074                	// #8308
 3001b04:	f2b30021 	movk	x1, #0x9801, lsl #16
			case 0:
				cr_writel(0x00000000, CR_EMMC_CTYPE); // 1bit
				cr_writel(0x00000001, CR_EMMC_UHSREG); //non-DDR mode, SW 1.8V
				break;
			case 1:
				cr_writel(0x00000001, CR_EMMC_CTYPE); // 4bit
 3001b08:	52800020 	mov	w0, #0x1                   	// #1
 3001b0c:	b9000040 	str	w0, [x2]
				cr_writel(0x00000001, CR_EMMC_UHSREG); //non-DDR mode, SW 1.8V
 3001b10:	b9000020 	str	w0, [x1]
	else{
		prints("switch bus width to 0x");
		print_hex(WIDTH * 4);
		prints(" bits fail\n");
	}
}
 3001b14:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3001b18:	d65f03c0 	ret
#endif
		switch(WIDTH)
		{
			case 0:
				cr_writel(0x00000000, CR_EMMC_CTYPE); // 1bit
				cr_writel(0x00000001, CR_EMMC_UHSREG); //non-DDR mode, SW 1.8V
 3001b1c:	d2840e80 	mov	x0, #0x2074                	// #8308
 3001b20:	f2b30020 	movk	x0, #0x9801, lsl #16
		prints(" bits success\n");
#endif
		switch(WIDTH)
		{
			case 0:
				cr_writel(0x00000000, CR_EMMC_CTYPE); // 1bit
 3001b24:	b900005f 	str	wzr, [x2]
				cr_writel(0x00000001, CR_EMMC_UHSREG); //non-DDR mode, SW 1.8V
 3001b28:	52800021 	mov	w1, #0x1                   	// #1
 3001b2c:	b9000001 	str	w1, [x0]
	else{
		prints("switch bus width to 0x");
		print_hex(WIDTH * 4);
		prints(" bits fail\n");
	}
}
 3001b30:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3001b34:	d65f03c0 	ret

0000000003001b38 <switch_speed>:
void switch_speed(UINT8 speed){
 3001b38:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
 3001b3c:	53001c13 	uxtb	w19, w0
	int speed_modify=speed;
	if ((speed==0 )||(speed==1)){
 3001b40:	7100067f 	cmp	w19, #0x1
 3001b44:	540003c9 	b.ls	3001bbc <switch_speed+0x84>
 3001b48:	52a07721 	mov	w1, #0x3b90000             	// #62455808
 3001b4c:	2a132021 	orr	w1, w1, w19, lsl #8
		speed_modify=1;
	}
	CP15ISB;
 3001b50:	d5033fdf 	isb

	//speed - 0, backward compatible timing, 1: High speed, 2: HS200
	emmc_send_cmd_get_rsp(MMC_SWITCH, 0x03b90000|(speed_modify<<8), 1, 1);
 3001b54:	52800023 	mov	w3, #0x1                   	// #1
 3001b58:	528000c0 	mov	w0, #0x6                   	// #6
 3001b5c:	2a0303e2 	mov	w2, w3
 3001b60:	97fffe31 	bl	3001424 <emmc_send_cmd_get_rsp>
	emmc_send_cmd_get_rsp(MMC_SEND_STATUS, emmc_card.rca, 1, 1);
 3001b64:	b0000041 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 3001b68:	52800023 	mov	w3, #0x1                   	// #1
 3001b6c:	2a0303e2 	mov	w2, w3
 3001b70:	528001a0 	mov	w0, #0xd                   	// #13
 3001b74:	b94c3021 	ldr	w1, [x1,#3120]
 3001b78:	97fffe2b 	bl	3001424 <emmc_send_cmd_get_rsp>
	CP15ISB;
 3001b7c:	d5033fdf 	isb
	if ((cr_readl(CR_EMMC_RESP0)&0x80)==0){
 3001b80:	d2840600 	mov	x0, #0x2030                	// #8240
 3001b84:	f2b30020 	movk	x0, #0x9801, lsl #16
 3001b88:	b9400000 	ldr	w0, [x0]
 3001b8c:	37380060 	tbnz	w0, #7, 3001b98 <switch_speed+0x60>
	else{
		prints("switch speed to 0x");
		print_hex(speed);
		prints(" fail\n");
	}
}
 3001b90:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3001b94:	d65f03c0 	ret
		print_hex(speed);
		prints(" success\n");
#endif
	}
	else{
		prints("switch speed to 0x");
 3001b98:	90000040 	adrp	x0, 3009000 <el3_vectors>
 3001b9c:	913a4000 	add	x0, x0, #0xe90
 3001ba0:	9400114c 	bl	30060d0 <prints>
		print_hex(speed);
 3001ba4:	2a1303e0 	mov	w0, w19
 3001ba8:	9400117c 	bl	3006198 <print_hex>
		prints(" fail\n");
	}
}
 3001bac:	a8c17bf3 	ldp	x19, x30, [sp],#16
#endif
	}
	else{
		prints("switch speed to 0x");
		print_hex(speed);
		prints(" fail\n");
 3001bb0:	90000040 	adrp	x0, 3009000 <el3_vectors>
 3001bb4:	913aa000 	add	x0, x0, #0xea8
 3001bb8:	14001146 	b	30060d0 <prints>
 3001bbc:	52802001 	mov	w1, #0x100                 	// #256
 3001bc0:	72a07721 	movk	w1, #0x3b9, lsl #16
 3001bc4:	17ffffe3 	b	3001b50 <switch_speed+0x18>

0000000003001bc8 <switch_partition>:
}

void switch_partition(emmc_partition_t partition){

	//0:default, 1: boot1, 2:boot2, 3: RPMB, 4~7: GP1~4
	emmc_send_cmd_get_rsp(MMC_SWITCH, 0x03b30000|(partition<<8), 1, 1);
 3001bc8:	52800023 	mov	w3, #0x1                   	// #1
 3001bcc:	52a07661 	mov	w1, #0x3b30000             	// #62062592
		print_hex(speed);
		prints(" fail\n");
	}
}

void switch_partition(emmc_partition_t partition){
 3001bd0:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!

	//0:default, 1: boot1, 2:boot2, 3: RPMB, 4~7: GP1~4
	emmc_send_cmd_get_rsp(MMC_SWITCH, 0x03b30000|(partition<<8), 1, 1);
 3001bd4:	2a0303e2 	mov	w2, w3
 3001bd8:	2a002021 	orr	w1, w1, w0, lsl #8
		print_hex(speed);
		prints(" fail\n");
	}
}

void switch_partition(emmc_partition_t partition){
 3001bdc:	2a0003f3 	mov	w19, w0

	//0:default, 1: boot1, 2:boot2, 3: RPMB, 4~7: GP1~4
	emmc_send_cmd_get_rsp(MMC_SWITCH, 0x03b30000|(partition<<8), 1, 1);
 3001be0:	528000c0 	mov	w0, #0x6                   	// #6
 3001be4:	97fffe10 	bl	3001424 <emmc_send_cmd_get_rsp>
	emmc_send_cmd_get_rsp(MMC_SEND_STATUS, emmc_card.rca, 1, 1);
 3001be8:	b0000041 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 3001bec:	52800023 	mov	w3, #0x1                   	// #1
 3001bf0:	2a0303e2 	mov	w2, w3
 3001bf4:	528001a0 	mov	w0, #0xd                   	// #13
 3001bf8:	b94c3021 	ldr	w1, [x1,#3120]
 3001bfc:	97fffe0a 	bl	3001424 <emmc_send_cmd_get_rsp>
	CP15ISB;
 3001c00:	d5033fdf 	isb
	if ((cr_readl(CR_EMMC_RESP0)&0x80)==0){
 3001c04:	d2840600 	mov	x0, #0x2030                	// #8240
 3001c08:	f2b30020 	movk	x0, #0x9801, lsl #16
 3001c0c:	b9400000 	ldr	w0, [x0]
 3001c10:	37380060 	tbnz	w0, #7, 3001c1c <switch_partition+0x54>
	else{
		prints("switch partition to 0x");
		print_hex(partition);
		prints(" fail\n");
	}
}
 3001c14:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3001c18:	d65f03c0 	ret
		print_hex(partition);
		prints(" success\n");
#endif
	}
	else{
		prints("switch partition to 0x");
 3001c1c:	90000040 	adrp	x0, 3009000 <el3_vectors>
 3001c20:	913ac000 	add	x0, x0, #0xeb0
 3001c24:	9400112b 	bl	30060d0 <prints>
		print_hex(partition);
 3001c28:	2a1303e0 	mov	w0, w19
 3001c2c:	9400115b 	bl	3006198 <print_hex>
		prints(" fail\n");
	}
}
 3001c30:	a8c17bf3 	ldp	x19, x30, [sp],#16
#endif
	}
	else{
		prints("switch partition to 0x");
		print_hex(partition);
		prints(" fail\n");
 3001c34:	90000040 	adrp	x0, 3009000 <el3_vectors>
 3001c38:	913aa000 	add	x0, x0, #0xea8
 3001c3c:	14001125 	b	30060d0 <prints>

0000000003001c40 <frequency>:
	}
}


int frequency(UINT32 fre, UINT32 div){
 3001c40:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
#ifndef FPGA
	cr_writel((cr_readl(SYS_PLL_EMMC3)&0xffff) | (fre << 16), SYS_PLL_EMMC3);
 3001c44:	d2803f02 	mov	x2, #0x1f8                 	// #504
 3001c48:	f2b30002 	movk	x2, #0x9800, lsl #16
		prints(" fail\n");
	}
}


int frequency(UINT32 fre, UINT32 div){
 3001c4c:	a9015bf5 	stp	x21, x22, [sp,#16]
 3001c50:	f90013fe 	str	x30, [sp,#32]
 3001c54:	2a0103f6 	mov	w22, w1
#ifndef FPGA
	cr_writel((cr_readl(SYS_PLL_EMMC3)&0xffff) | (fre << 16), SYS_PLL_EMMC3);
 3001c58:	b9400041 	ldr	w1, [x2]
 3001c5c:	12003c21 	and	w1, w1, #0xffff
 3001c60:	2a004020 	orr	w0, w1, w0, lsl #16
 3001c64:	b9000040 	str	w0, [x2]
	CP15ISB;
 3001c68:	d5033fdf 	isb
	sync();
 3001c6c:	97fff9a8 	bl	300030c <sync>
#endif
	wait_done_timeout((UINT32*)CR_EMMC_STATUS, 0x200, 0x0); 	 //card is not busy
 3001c70:	52800002 	mov	w2, #0x0                   	// #0
 3001c74:	52804001 	mov	w1, #0x200                 	// #512
 3001c78:	d2840900 	mov	x0, #0x2048                	// #8264
 3001c7c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3001c80:	97fffd38 	bl	3001160 <wait_done_timeout>
	CP15ISB;
 3001c84:	d5033fdf 	isb
	sync();

	//disable clock
	cr_writel(0, CR_EMMC_CLKENA);
 3001c88:	d2840215 	mov	x21, #0x2010                	// #8208
 3001c8c:	f2b30035 	movk	x21, #0x9801, lsl #16
	CP15ISB;
	sync();
#endif
	wait_done_timeout((UINT32*)CR_EMMC_STATUS, 0x200, 0x0); 	 //card is not busy
	CP15ISB;
	sync();
 3001c90:	97fff99f 	bl	300030c <sync>

	//disable clock
	cr_writel(0, CR_EMMC_CLKENA);
 3001c94:	b90002bf 	str	wzr, [x21]
	CP15ISB;
 3001c98:	d5033fdf 	isb
	sync();

	//EMMC Cmd
	cr_writel(0xa0202000, CR_EMMC_CMD);
 3001c9c:	d2840593 	mov	x19, #0x202c                	// #8236
 3001ca0:	f2b30033 	movk	x19, #0x9801, lsl #16
	sync();

	//disable clock
	cr_writel(0, CR_EMMC_CLKENA);
	CP15ISB;
	sync();
 3001ca4:	97fff99a 	bl	300030c <sync>

	//EMMC Cmd
	cr_writel(0xa0202000, CR_EMMC_CMD);
 3001ca8:	52840014 	mov	w20, #0x2000                	// #8192
 3001cac:	72b40414 	movk	w20, #0xa020, lsl #16
 3001cb0:	b9000274 	str	w20, [x19]
	CP15ISB;
 3001cb4:	d5033fdf 	isb
	sync();
 3001cb8:	97fff995 	bl	300030c <sync>
	wait_done_timeout((UINT32*)CR_EMMC_CMD, 0x80000000, 0x0);
 3001cbc:	52800002 	mov	w2, #0x0                   	// #0
 3001cc0:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
 3001cc4:	aa1303e0 	mov	x0, x19
 3001cc8:	97fffd26 	bl	3001160 <wait_done_timeout>
	CP15ISB;
 3001ccc:	d5033fdf 	isb
	sync();
 3001cd0:	97fff98f 	bl	300030c <sync>

	//set divider
	cr_writel(div, CR_EMMC_CLKDIV);
 3001cd4:	d2840100 	mov	x0, #0x2008                	// #8200
 3001cd8:	f2b30020 	movk	x0, #0x9801, lsl #16
 3001cdc:	b9000016 	str	w22, [x0]
	CP15ISB;
 3001ce0:	d5033fdf 	isb
	sync();
 3001ce4:	97fff98a 	bl	300030c <sync>

	//EMMC Cmd
	cr_writel(0xa0202000, CR_EMMC_CMD);
 3001ce8:	b9000274 	str	w20, [x19]
	CP15ISB;
 3001cec:	d5033fdf 	isb
	sync();
 3001cf0:	97fff987 	bl	300030c <sync>
	wait_done_timeout((UINT32*)CR_EMMC_CMD, 0x80000000, 0x0);
 3001cf4:	52800002 	mov	w2, #0x0                   	// #0
 3001cf8:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
 3001cfc:	aa1303e0 	mov	x0, x19
 3001d00:	97fffd18 	bl	3001160 <wait_done_timeout>
	CP15ISB;
 3001d04:	d5033fdf 	isb
	sync();
 3001d08:	97fff981 	bl	300030c <sync>

	//enable clock
	cr_writel(0x10001, CR_EMMC_CLKENA);
 3001d0c:	320083e0 	mov	w0, #0x10001               	// #65537
 3001d10:	b90002a0 	str	w0, [x21]
	CP15ISB;
 3001d14:	d5033fdf 	isb
	sync();
 3001d18:	97fff97d 	bl	300030c <sync>

	//EMMC Cmd
	cr_writel(0xa0202000, CR_EMMC_CMD);
 3001d1c:	b9000274 	str	w20, [x19]
	CP15ISB;
 3001d20:	d5033fdf 	isb
	sync();
 3001d24:	97fff97a 	bl	300030c <sync>
	wait_done_timeout((UINT32*)CR_EMMC_CMD, 0x80000000, 0x0);
 3001d28:	52800002 	mov	w2, #0x0                   	// #0
 3001d2c:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
 3001d30:	aa1303e0 	mov	x0, x19
 3001d34:	97fffd0b 	bl	3001160 <wait_done_timeout>
	CP15ISB;
 3001d38:	d5033fdf 	isb
	sync();
 3001d3c:	97fff974 	bl	300030c <sync>

	prints("frequency divider is 0x");
	print_hex(div);
	prints("\n");
#endif
}
 3001d40:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3001d44:	f94013fe 	ldr	x30, [sp,#32]
 3001d48:	a8c353f3 	ldp	x19, x20, [sp],#48
 3001d4c:	d65f03c0 	ret

0000000003001d50 <init_card_rca>:
}
#endif // 0

void init_card_rca(void)
{
	emmc_card.rca = 1 << RCA_SHIFTER;
 3001d50:	b0000040 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3001d54:	52a00021 	mov	w1, #0x10000               	// #65536
 3001d58:	b90c3001 	str	w1, [x0,#3120]
}
 3001d5c:	d65f03c0 	ret

0000000003001d60 <do_HW_RSA>:

/************************************************************************
 *  Function body
 ************************************************************************/
int do_HW_RSA(const unsigned int signature_addr, const rsa_key_t *p_rsa_key, const unsigned int output_addr)
{
 3001d60:	a9ab53f3 	stp	x19, x20, [sp,#-336]!
 3001d64:	a9015bf5 	stp	x21, x22, [sp,#16]
 3001d68:	a90263f7 	stp	x23, x24, [sp,#32]
 3001d6c:	f9001bfe 	str	x30, [sp,#48]

#ifdef ENV_SIMULATION
	tcnt = 10000;
#endif

	if (p_rsa_key == NULL) {
 3001d70:	b4000b81 	cbz	x1, 3001ee0 <do_HW_RSA+0x180>
		return ERR_INVALID_PARAM;
	}

	if ((p_rsa_key->type == NORMAL_KEY) && (p_rsa_key->key == NULL)) {
 3001d74:	b9400023 	ldr	w3, [x1]
 3001d78:	35000063 	cbnz	w3, 3001d84 <do_HW_RSA+0x24>
 3001d7c:	f9400423 	ldr	x3, [x1,#8]
 3001d80:	b4000b03 	cbz	x3, 3001ee0 <do_HW_RSA+0x180>
 3001d84:	2a0003f4 	mov	w20, w0
 3001d88:	2a0203f8 	mov	w24, w2
 3001d8c:	aa0103f3 	mov	x19, x1
		return ERR_INVALID_PARAM;
	}

	loopsTrap(); //random delay to avoid timing attack
 3001d90:	9400168c 	bl	30077c0 <loopsTrap>

	// prepare RSA input
	// M: message
	if (copy_memory((char *)(uintptr_t)RSA_M_ADDR, (char *)(uintptr_t)signature_addr, RSA_SIGNATURE_LENGTH) != RSA_SIGNATURE_LENGTH)
 3001d94:	2a1403e1 	mov	w1, w20
 3001d98:	52802002 	mov	w2, #0x100                 	// #256
 3001d9c:	d2980000 	mov	x0, #0xc000                	// #49152
 3001da0:	f2b30080 	movk	x0, #0x9804, lsl #16
 3001da4:	9400159c 	bl	3007414 <copy_memory>
 3001da8:	7104001f 	cmp	w0, #0x100
 3001dac:	2a0003f4 	mov	w20, w0
 3001db0:	54000d81 	b.ne	3001f60 <do_HW_RSA+0x200>
		faultDetect();

	if (p_rsa_key->type == NORMAL_KEY) { // key from input
 3001db4:	b9400260 	ldr	w0, [x19]
 3001db8:	34000ac0 	cbz	w0, 3001f10 <do_HW_RSA+0x1b0>
			faultDetect();
		// E: exponent
		if (copy_memory((char *)(uintptr_t)RSA_E_ADDR, publicExponent, RSA_SIGNATURE_LENGTH) != RSA_SIGNATURE_LENGTH)
			faultDetect();
	}
	else if (p_rsa_key->type > CONST_KEY4) { // only support 4 constant key
 3001dbc:	7100101f 	cmp	w0, #0x4
 3001dc0:	54000d08 	b.hi	3001f60 <do_HW_RSA+0x200>
		PrintInfo("RSA const key", p_rsa_key->type);
	}
#endif

#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(RSA_M_ADDR, RSA_M_ADDR + RSA_SIGNATURE_LENGTH);
 3001dc4:	52982001 	mov	w1, #0xc100                	// #49408
 3001dc8:	72b30081 	movk	w1, #0x9804, lsl #16
 3001dcc:	52980000 	mov	w0, #0xc000                	// #49152
 3001dd0:	72b30080 	movk	w0, #0x9804, lsl #16
 3001dd4:	97fff89e 	bl	300004c <sys_dcache_flush_MVA>
	if (p_rsa_key->type == NORMAL_KEY) {
 3001dd8:	b9400260 	ldr	w0, [x19]
 3001ddc:	34000c40 	cbz	w0, 3001f64 <do_HW_RSA+0x204>
		sys_dcache_flush_MVA(RSA_E_ADDR, RSA_E_ADDR + RSA_SIGNATURE_LENGTH);
	}
#endif

	// set n_sel & key_sel
	value = REG32(RSA_CTRL1) & 0x03ff;
 3001de0:	d299e004 	mov	x4, #0xcf00                	// #52992
 3001de4:	f2b30084 	movk	x4, #0x9804, lsl #16
	value = value | (p_rsa_key->type << 13) | (p_rsa_key->type << 10);
 3001de8:	53165405 	lsl	w5, w0, #10
	REG32(RSA_CTRL1) = value;

	// set go bit & int_en bit
	REG32(RSA_CTRL3) |= ((0x1 << 31) | (0x1 << 1));
 3001dec:	d299e103 	mov	x3, #0xcf08                	// #53000
 3001df0:	f2b30083 	movk	x3, #0x9804, lsl #16
		sys_dcache_flush_MVA(RSA_E_ADDR, RSA_E_ADDR + RSA_SIGNATURE_LENGTH);
	}
#endif

	// set n_sel & key_sel
	value = REG32(RSA_CTRL1) & 0x03ff;
 3001df4:	b9400082 	ldr	w2, [x4]
 3001df8:	2a0034a0 	orr	w0, w5, w0, lsl #13
	value = value | (p_rsa_key->type << 13) | (p_rsa_key->type << 10);
	REG32(RSA_CTRL1) = value;

	// set go bit & int_en bit
	REG32(RSA_CTRL3) |= ((0x1 << 31) | (0x1 << 1));
 3001dfc:	52800041 	mov	w1, #0x2                   	// #2
 3001e00:	72b00001 	movk	w1, #0x8000, lsl #16
		sys_dcache_flush_MVA(RSA_E_ADDR, RSA_E_ADDR + RSA_SIGNATURE_LENGTH);
	}
#endif

	// set n_sel & key_sel
	value = REG32(RSA_CTRL1) & 0x03ff;
 3001e04:	12002442 	and	w2, w2, #0x3ff
 3001e08:	b9004fe2 	str	w2, [sp,#76]
	REG32(RSA_CTRL1) = value;

	// set go bit & int_en bit
	REG32(RSA_CTRL3) |= ((0x1 << 31) | (0x1 << 1));
	while (tcnt >= 0) {
		value = REG32(RSA_CTRL4);
 3001e0c:	d299e196 	mov	x22, #0xcf0c                	// #53004
 3001e10:	f2b30096 	movk	x22, #0x9804, lsl #16
	}
#endif

	// set n_sel & key_sel
	value = REG32(RSA_CTRL1) & 0x03ff;
	value = value | (p_rsa_key->type << 13) | (p_rsa_key->type << 10);
 3001e14:	b9404fe2 	ldr	w2, [sp,#76]
	REG32(RSA_CTRL1) = value;

	// set go bit & int_en bit
	REG32(RSA_CTRL3) |= ((0x1 << 31) | (0x1 << 1));
 3001e18:	52807d34 	mov	w20, #0x3e9                 	// #1001
	while (tcnt >= 0) {
		value = REG32(RSA_CTRL4);
		if ((value & STATUS_MASK_DONE) == STATUS_MASK_DONE) {
 3001e1c:	52800275 	mov	w21, #0x13                  	// #19
			break; // RSA done without error
		}
		else if (value & STATUS_MASK_ERROR) {
 3001e20:	528e1817 	mov	w23, #0x70c0                	// #28864
	}
#endif

	// set n_sel & key_sel
	value = REG32(RSA_CTRL1) & 0x03ff;
	value = value | (p_rsa_key->type << 13) | (p_rsa_key->type << 10);
 3001e24:	2a020000 	orr	w0, w0, w2
 3001e28:	b9004fe0 	str	w0, [sp,#76]
	REG32(RSA_CTRL1) = value;
 3001e2c:	b9404fe0 	ldr	w0, [sp,#76]
 3001e30:	b9000080 	str	w0, [x4]

	// set go bit & int_en bit
	REG32(RSA_CTRL3) |= ((0x1 << 31) | (0x1 << 1));
 3001e34:	b9400060 	ldr	w0, [x3]
 3001e38:	2a010000 	orr	w0, w0, w1
 3001e3c:	b9000060 	str	w0, [x3]
 3001e40:	14000009 	b	3001e64 <do_HW_RSA+0x104>
	while (tcnt >= 0) {
		value = REG32(RSA_CTRL4);
		if ((value & STATUS_MASK_DONE) == STATUS_MASK_DONE) {
			break; // RSA done without error
		}
		else if (value & STATUS_MASK_ERROR) {
 3001e44:	b9404fe0 	ldr	w0, [sp,#76]
 3001e48:	6a17001f 	tst	w0, w23
 3001e4c:	54000561 	b.ne	3001ef8 <do_HW_RSA+0x198>
			return ERR_RSA_ERROR;
		}
		mdelay(0,1);
 3001e50:	52800021 	mov	w1, #0x1                   	// #1
 3001e54:	52800000 	mov	w0, #0x0                   	// #0
 3001e58:	94000f03 	bl	3005a64 <mdelay>
	value = value | (p_rsa_key->type << 13) | (p_rsa_key->type << 10);
	REG32(RSA_CTRL1) = value;

	// set go bit & int_en bit
	REG32(RSA_CTRL3) |= ((0x1 << 31) | (0x1 << 1));
	while (tcnt >= 0) {
 3001e5c:	71000694 	subs	w20, w20, #0x1
 3001e60:	540009a0 	b.eq	3001f94 <do_HW_RSA+0x234>
		value = REG32(RSA_CTRL4);
 3001e64:	b94002c0 	ldr	w0, [x22]
 3001e68:	b9004fe0 	str	w0, [sp,#76]
		if ((value & STATUS_MASK_DONE) == STATUS_MASK_DONE) {
 3001e6c:	b9404ff3 	ldr	w19, [sp,#76]
 3001e70:	0a150273 	and	w19, w19, w21
 3001e74:	71004e7f 	cmp	w19, #0x13
 3001e78:	54fffe61 	b.ne	3001e44 <do_HW_RSA+0xe4>
		prints("RSA timeout\n");
		return ERR_TIMEOUT;
        }

	// RSA result address (without padding bytes)
	if (copy_memory((char *)(uintptr_t)output_addr, (char *)(uintptr_t)RSA_RR_MODE_N_ADDR, 32) != 32)
 3001e7c:	52800402 	mov	w2, #0x20                  	// #32
 3001e80:	d2983001 	mov	x1, #0xc180                	// #49536
 3001e84:	f2b30081 	movk	x1, #0x9804, lsl #16
 3001e88:	2a1803e0 	mov	w0, w24
 3001e8c:	94001562 	bl	3007414 <copy_memory>
 3001e90:	7100801f 	cmp	w0, #0x20
 3001e94:	54000661 	b.ne	3001f60 <do_HW_RSA+0x200>
		faultDetect();
#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(output_addr, output_addr+32);
 3001e98:	11008314 	add	w20, w24, #0x20
 3001e9c:	2a1803e0 	mov	w0, w24
 3001ea0:	2a1403e1 	mov	w1, w20
 3001ea4:	97fff86a 	bl	300004c <sys_dcache_flush_MVA>
#endif
	reverse_rsa_signature(output_addr);
 3001ea8:	2a1803e0 	mov	w0, w24
 3001eac:	940016bd 	bl	30079a0 <reverse_rsa_signature>
#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(output_addr, output_addr+32);
 3001eb0:	2a1403e1 	mov	w1, w20
 3001eb4:	2a1803e0 	mov	w0, w24
 3001eb8:	97fff865 	bl	300004c <sys_dcache_flush_MVA>
#endif
	return (value & STATUS_MASK_DONE ? OK : ERR_RSA_ERROR);
 3001ebc:	b9404fe1 	ldr	w1, [sp,#76]
 3001ec0:	52800640 	mov	w0, #0x32                  	// #50
 3001ec4:	6a13003f 	tst	w1, w19
 3001ec8:	1a8013e0 	csel	w0, wzr, w0, ne
}
 3001ecc:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3001ed0:	a94263f7 	ldp	x23, x24, [sp,#32]
 3001ed4:	f9401bfe 	ldr	x30, [sp,#48]
 3001ed8:	a8d553f3 	ldp	x19, x20, [sp],#336
 3001edc:	d65f03c0 	ret
 3001ee0:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3001ee4:	a94263f7 	ldp	x23, x24, [sp,#32]
 3001ee8:	f9401bfe 	ldr	x30, [sp,#48]
#ifdef ENV_SIMULATION
	tcnt = 10000;
#endif

	if (p_rsa_key == NULL) {
		return ERR_INVALID_PARAM;
 3001eec:	52801260 	mov	w0, #0x93                  	// #147
	reverse_rsa_signature(output_addr);
#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(output_addr, output_addr+32);
#endif
	return (value & STATUS_MASK_DONE ? OK : ERR_RSA_ERROR);
}
 3001ef0:	a8d553f3 	ldp	x19, x20, [sp],#336
 3001ef4:	d65f03c0 	ret
 3001ef8:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3001efc:	a94263f7 	ldp	x23, x24, [sp,#32]
 3001f00:	f9401bfe 	ldr	x30, [sp,#48]
		value = REG32(RSA_CTRL4);
		if ((value & STATUS_MASK_DONE) == STATUS_MASK_DONE) {
			break; // RSA done without error
		}
		else if (value & STATUS_MASK_ERROR) {
			return ERR_RSA_ERROR;
 3001f04:	52800640 	mov	w0, #0x32                  	// #50
	reverse_rsa_signature(output_addr);
#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(output_addr, output_addr+32);
#endif
	return (value & STATUS_MASK_DONE ? OK : ERR_RSA_ERROR);
}
 3001f08:	a8d553f3 	ldp	x19, x20, [sp],#336
 3001f0c:	d65f03c0 	ret
	// M: message
	if (copy_memory((char *)(uintptr_t)RSA_M_ADDR, (char *)(uintptr_t)signature_addr, RSA_SIGNATURE_LENGTH) != RSA_SIGNATURE_LENGTH)
		faultDetect();

	if (p_rsa_key->type == NORMAL_KEY) { // key from input
		set_memory(publicExponent, 0x00, sizeof(publicExponent));
 3001f10:	2a1403e2 	mov	w2, w20
 3001f14:	52800001 	mov	w1, #0x0                   	// #0
 3001f18:	910143e0 	add	x0, sp, #0x50
 3001f1c:	940014b8 	bl	30071fc <set_memory>
		publicExponent[0] = 65537; //default public exponent
		// N: modules
		if (copy_memory((char *)(uintptr_t)RSA_N_ADDR, p_rsa_key->key, RSA_SIGNATURE_LENGTH) != RSA_SIGNATURE_LENGTH)
 3001f20:	f9400661 	ldr	x1, [x19,#8]
	if (copy_memory((char *)(uintptr_t)RSA_M_ADDR, (char *)(uintptr_t)signature_addr, RSA_SIGNATURE_LENGTH) != RSA_SIGNATURE_LENGTH)
		faultDetect();

	if (p_rsa_key->type == NORMAL_KEY) { // key from input
		set_memory(publicExponent, 0x00, sizeof(publicExponent));
		publicExponent[0] = 65537; //default public exponent
 3001f24:	320083e3 	mov	w3, #0x10001               	// #65537
		// N: modules
		if (copy_memory((char *)(uintptr_t)RSA_N_ADDR, p_rsa_key->key, RSA_SIGNATURE_LENGTH) != RSA_SIGNATURE_LENGTH)
 3001f28:	2a1403e2 	mov	w2, w20
 3001f2c:	d2989000 	mov	x0, #0xc480                	// #50304
 3001f30:	f2b30080 	movk	x0, #0x9804, lsl #16
	if (copy_memory((char *)(uintptr_t)RSA_M_ADDR, (char *)(uintptr_t)signature_addr, RSA_SIGNATURE_LENGTH) != RSA_SIGNATURE_LENGTH)
		faultDetect();

	if (p_rsa_key->type == NORMAL_KEY) { // key from input
		set_memory(publicExponent, 0x00, sizeof(publicExponent));
		publicExponent[0] = 65537; //default public exponent
 3001f34:	b90053e3 	str	w3, [sp,#80]
		// N: modules
		if (copy_memory((char *)(uintptr_t)RSA_N_ADDR, p_rsa_key->key, RSA_SIGNATURE_LENGTH) != RSA_SIGNATURE_LENGTH)
 3001f38:	94001537 	bl	3007414 <copy_memory>
 3001f3c:	7104001f 	cmp	w0, #0x100
 3001f40:	54000101 	b.ne	3001f60 <do_HW_RSA+0x200>
			faultDetect();
		// E: exponent
		if (copy_memory((char *)(uintptr_t)RSA_E_ADDR, publicExponent, RSA_SIGNATURE_LENGTH) != RSA_SIGNATURE_LENGTH)
 3001f44:	2a0003e2 	mov	w2, w0
 3001f48:	910143e1 	add	x1, sp, #0x50
 3001f4c:	d298c000 	mov	x0, #0xc600                	// #50688
 3001f50:	f2b30080 	movk	x0, #0x9804, lsl #16
 3001f54:	94001530 	bl	3007414 <copy_memory>
 3001f58:	7104001f 	cmp	w0, #0x100
 3001f5c:	54fff340 	b.eq	3001dc4 <do_HW_RSA+0x64>
	loopsTrap(); //random delay to avoid timing attack

	// prepare RSA input
	// M: message
	if (copy_memory((char *)(uintptr_t)RSA_M_ADDR, (char *)(uintptr_t)signature_addr, RSA_SIGNATURE_LENGTH) != RSA_SIGNATURE_LENGTH)
		faultDetect();
 3001f60:	940014db 	bl	30072cc <faultDetect>
#endif

#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(RSA_M_ADDR, RSA_M_ADDR + RSA_SIGNATURE_LENGTH);
	if (p_rsa_key->type == NORMAL_KEY) {
		sys_dcache_flush_MVA(RSA_N_ADDR, RSA_N_ADDR + RSA_SIGNATURE_LENGTH);
 3001f64:	5298b001 	mov	w1, #0xc580                	// #50560
 3001f68:	72b30081 	movk	w1, #0x9804, lsl #16
 3001f6c:	52989000 	mov	w0, #0xc480                	// #50304
 3001f70:	72b30080 	movk	w0, #0x9804, lsl #16
 3001f74:	97fff836 	bl	300004c <sys_dcache_flush_MVA>
		sys_dcache_flush_MVA(RSA_E_ADDR, RSA_E_ADDR + RSA_SIGNATURE_LENGTH);
 3001f78:	5298e001 	mov	w1, #0xc700                	// #50944
 3001f7c:	72b30081 	movk	w1, #0x9804, lsl #16
 3001f80:	5298c000 	mov	w0, #0xc600                	// #50688
 3001f84:	72b30080 	movk	w0, #0x9804, lsl #16
 3001f88:	97fff831 	bl	300004c <sys_dcache_flush_MVA>
 3001f8c:	b9400260 	ldr	w0, [x19]
 3001f90:	17ffff94 	b	3001de0 <do_HW_RSA+0x80>
#ifdef RSA_DEBUG
	PrintInfo("RSA_CTRL4", value);
#endif

	if(tcnt < 0) {
		prints("RSA timeout\n");
 3001f94:	90000040 	adrp	x0, 3009000 <el3_vectors>
 3001f98:	913b2000 	add	x0, x0, #0xec8
 3001f9c:	9400104d 	bl	30060d0 <prints>
		return ERR_TIMEOUT;
 3001fa0:	52801220 	mov	w0, #0x91                  	// #145
 3001fa4:	17ffffca 	b	3001ecc <do_HW_RSA+0x16c>

0000000003001fa8 <do_mcp.constprop.0>:
	PrintInfo("\tword 12", dscpt->dst_addr);
	PrintInfo("\tword 13", dscpt->length);
}
#endif

static int do_mcp(t_mcp_descriptor *dscpt)
 3001fa8:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
{
	volatile UINT32 dscpt_addr=0;
	int res, count=0;
	volatile UINT32 status_reg=0;

	dscpt_addr = (uintptr_t)dscpt;
 3001fac:	b0000053 	adrp	x19, 300a000 <__FUNCTION__.3108+0x3d8>
 3001fb0:	9132c273 	add	x19, x19, #0xcb0
}
#endif

static int do_mcp(t_mcp_descriptor *dscpt)
{
	volatile UINT32 dscpt_addr=0;
 3001fb4:	b9002bff 	str	wzr, [sp,#40]
	int res, count=0;
	volatile UINT32 status_reg=0;
 3001fb8:	b9002fff 	str	wzr, [sp,#44]

	dscpt_addr = (uintptr_t)dscpt;
 3001fbc:	b9002bf3 	str	w19, [sp,#40]
	PrintInfo("\tword 12", dscpt->dst_addr);
	PrintInfo("\tword 13", dscpt->length);
}
#endif

static int do_mcp(t_mcp_descriptor *dscpt)
 3001fc0:	f9000bfe 	str	x30, [sp,#16]
	dscpt_addr = (uintptr_t)dscpt;
	if (dscpt == NULL)
		return ERR_INVALID_PARAM;

#ifdef ENABLE_MMU
	sys_dcache_flush_MVA(dscpt_addr, dscpt_addr + sizeof(t_mcp_descriptor)*2);
 3001fc4:	b9402be0 	ldr	w0, [sp,#40]
 3001fc8:	b9402be1 	ldr	w1, [sp,#40]
 3001fcc:	1101c021 	add	w1, w1, #0x70
 3001fd0:	97fff81f 	bl	300004c <sys_dcache_flush_MVA>
	PrintInfo("rd dscpt", dscpt_addr);
	PrintInfo("wr dscpt", dscpt_addr + sizeof(t_mcp_descriptor));
#endif

	// disable interrupt
	REG32(MCP_EN) = 0xfe;
 3001fd4:	d28a2103 	mov	x3, #0x5108                	// #20744
 3001fd8:	f2b30023 	movk	x3, #0x9801, lsl #16

	// disable go bit
	REG32(MCP_CTRL) = 0x2;
 3001fdc:	d28a2000 	mov	x0, #0x5100                	// #20736
 3001fe0:	f2b30020 	movk	x0, #0x9801, lsl #16

	// set ring buffer register
	REG32(MCP_BASE)  = (uintptr_t)dscpt;
 3001fe4:	d28a2182 	mov	x2, #0x510c                	// #20748
 3001fe8:	f2b30022 	movk	x2, #0x9801, lsl #16
	PrintInfo("rd dscpt", dscpt_addr);
	PrintInfo("wr dscpt", dscpt_addr + sizeof(t_mcp_descriptor));
#endif

	// disable interrupt
	REG32(MCP_EN) = 0xfe;
 3001fec:	52801fc4 	mov	w4, #0xfe                  	// #254
 3001ff0:	b9000064 	str	w4, [x3]

	// disable go bit
	REG32(MCP_CTRL) = 0x2;
 3001ff4:	52800041 	mov	w1, #0x2                   	// #2
 3001ff8:	b9000001 	str	w1, [x0]

	// set ring buffer register
	REG32(MCP_BASE)  = (uintptr_t)dscpt;
 3001ffc:	b9000053 	str	w19, [x2]
	REG32(MCP_LIMIT) = (uintptr_t)dscpt_addr + sizeof(t_mcp_descriptor)*2;
 3002000:	d28a2205 	mov	x5, #0x5110                	// #20752
 3002004:	f2b30025 	movk	x5, #0x9801, lsl #16
 3002008:	b9402be1 	ldr	w1, [sp,#40]
	REG32(MCP_RDPTR) = (uintptr_t)dscpt;
 300200c:	d28a2284 	mov	x4, #0x5114                	// #20756
 3002010:	f2b30024 	movk	x4, #0x9801, lsl #16
	// disable go bit
	REG32(MCP_CTRL) = 0x2;

	// set ring buffer register
	REG32(MCP_BASE)  = (uintptr_t)dscpt;
	REG32(MCP_LIMIT) = (uintptr_t)dscpt_addr + sizeof(t_mcp_descriptor)*2;
 3002014:	1101c021 	add	w1, w1, #0x70
 3002018:	b90000a1 	str	w1, [x5]
	REG32(MCP_RDPTR) = (uintptr_t)dscpt;
	REG32(MCP_WRPTR) = (uintptr_t)dscpt_addr + sizeof(t_mcp_descriptor);	// writer pointer cannot be equal to limit

	//mcp descriptor in sram
	if ((REG32(MCP_BASE) >= SRAM_BASE_PHY) && (REG32(MCP_BASE) <= SRAM_LAST_ADDR)) {
 300201c:	d03e7fe0 	adrp	x0, 80000000 <_sram>
 3002020:	91000000 	add	x0, x0, #0x0
	REG32(MCP_CTRL) = 0x2;

	// set ring buffer register
	REG32(MCP_BASE)  = (uintptr_t)dscpt;
	REG32(MCP_LIMIT) = (uintptr_t)dscpt_addr + sizeof(t_mcp_descriptor)*2;
	REG32(MCP_RDPTR) = (uintptr_t)dscpt;
 3002024:	b9000093 	str	w19, [x4]
	REG32(MCP_WRPTR) = (uintptr_t)dscpt_addr + sizeof(t_mcp_descriptor);	// writer pointer cannot be equal to limit
 3002028:	b9402be1 	ldr	w1, [sp,#40]
 300202c:	1100e021 	add	w1, w1, #0x38
 3002030:	b9001061 	str	w1, [x3,#16]

	//mcp descriptor in sram
	if ((REG32(MCP_BASE) >= SRAM_BASE_PHY) && (REG32(MCP_BASE) <= SRAM_LAST_ADDR)) {
 3002034:	b9400041 	ldr	w1, [x2]
 3002038:	eb21401f 	cmp	x0, w1, uxtw
 300203c:	540000c8 	b.hi	3002054 <do_mcp.constprop.0+0xac>
 3002040:	b9400041 	ldr	w1, [x2]
 3002044:	91407c00 	add	x0, x0, #0x1f, lsl #12
 3002048:	913ffc00 	add	x0, x0, #0xfff
 300204c:	eb21401f 	cmp	x0, w1, uxtw
 3002050:	540006e2 	b.cs	300212c <do_mcp.constprop.0+0x184>
		REG32(MCP_DES_COUNT) = 0x80000000;
	}
	else {
		REG32(MCP_DES_COUNT) &= ~0x80000000;
 3002054:	d28a2681 	mov	x1, #0x5134                	// #20788
 3002058:	f2b30021 	movk	x1, #0x9801, lsl #16
 300205c:	b9400020 	ldr	w0, [x1]
 3002060:	12007800 	and	w0, w0, #0x7fffffff
 3002064:	b9000020 	str	w0, [x1]
	PrintInfo("\tMCP_RD PTR", REG32(MCP_RDPTR));
	PrintInfo("\tMCP_WR PTR", REG32(MCP_WRPTR));
	PrintInfo("\tMCP_DES_COUNT", REG32(MCP_DES_COUNT));
#endif

	loopsTrap(); //random delay to avoid timing attack
 3002068:	940015d6 	bl	30077c0 <loopsTrap>
	sync();
 300206c:	97fff8a8 	bl	300030c <sync>
    CP15ISB;
 3002070:	d5033fdf 	isb

	// go
	REG32(MCP_CTRL) = 0x3;
 3002074:	d28a2001 	mov	x1, #0x5100                	// #20736
 3002078:	f2b30021 	movk	x1, #0x9801, lsl #16
    	count = 0;
	while ((REG32(MCP_STATUS) & 0x6) == 0){
 300207c:	d28a2080 	mov	x0, #0x5104                	// #20740
 3002080:	f2b30020 	movk	x0, #0x9801, lsl #16
	loopsTrap(); //random delay to avoid timing attack
	sync();
    CP15ISB;

	// go
	REG32(MCP_CTRL) = 0x3;
 3002084:	52800062 	mov	w2, #0x3                   	// #3
    	count = 0;
	while ((REG32(MCP_STATUS) & 0x6) == 0){
 3002088:	aa0003f4 	mov	x20, x0
	loopsTrap(); //random delay to avoid timing attack
	sync();
    CP15ISB;

	// go
	REG32(MCP_CTRL) = 0x3;
 300208c:	b9000022 	str	w2, [x1]
    	count = 0;
	while ((REG32(MCP_STATUS) & 0x6) == 0){
 3002090:	52807d33 	mov	w19, #0x3e9                 	// #1001
 3002094:	b9400000 	ldr	w0, [x0]
 3002098:	721f041f 	tst	w0, #0x6
 300209c:	54000080 	b.eq	30020ac <do_mcp.constprop.0+0x104>
 30020a0:	1400000b 	b	30020cc <do_mcp.constprop.0+0x124>
        if (count > 1000){
 30020a4:	71000673 	subs	w19, w19, #0x1
 30020a8:	540004c0 	b.eq	3002140 <do_mcp.constprop.0+0x198>
            REG32(MCP_CTRL) = 0x2;
	        REG32(MCP_STATUS) = 0x6;
            return ERR_MCP_ERROR;
        }

        mdelay(0, 1);
 30020ac:	52800021 	mov	w1, #0x1                   	// #1
 30020b0:	52800000 	mov	w0, #0x0                   	// #0
 30020b4:	94000e6c 	bl	3005a64 <mdelay>
    CP15ISB;

	// go
	REG32(MCP_CTRL) = 0x3;
    	count = 0;
	while ((REG32(MCP_STATUS) & 0x6) == 0){
 30020b8:	b9400280 	ldr	w0, [x20]
 30020bc:	d28a2081 	mov	x1, #0x5104                	// #20740
 30020c0:	f2b30021 	movk	x1, #0x9801, lsl #16
 30020c4:	721f041f 	tst	w0, #0x6
 30020c8:	54fffee0 	b.eq	30020a4 <do_mcp.constprop.0+0xfc>

        mdelay(0, 1);
        count++;
    };

	sync();
 30020cc:	97fff890 	bl	300030c <sync>

	// check result
	status_reg = REG32(MCP_STATUS);
 30020d0:	d28a2081 	mov	x1, #0x5104                	// #20740
 30020d4:	f2b30021 	movk	x1, #0x9801, lsl #16
	if (status_reg & 0x4)
		res = ERR_MCP_ERROR;	// error happened
 30020d8:	52800600 	mov	w0, #0x30                  	// #48
    };

	sync();

	// check result
	status_reg = REG32(MCP_STATUS);
 30020dc:	b9400021 	ldr	w1, [x1]
 30020e0:	b9002fe1 	str	w1, [sp,#44]
	if (status_reg & 0x4)
 30020e4:	b9402fe1 	ldr	w1, [sp,#44]
 30020e8:	371000c1 	tbnz	w1, #2, 3002100 <do_mcp.constprop.0+0x158>
		res = ERR_MCP_ERROR;	// error happened
	else if (status_reg & 0x2)
 30020ec:	b9402fe1 	ldr	w1, [sp,#44]
		res = OK;	// MCP completed without error
	else
		res = ERR_UNKNOWN_TYPE;	// ???
 30020f0:	52801240 	mov	w0, #0x92                  	// #146

	// check result
	status_reg = REG32(MCP_STATUS);
	if (status_reg & 0x4)
		res = ERR_MCP_ERROR;	// error happened
	else if (status_reg & 0x2)
 30020f4:	121f0021 	and	w1, w1, #0x2
		res = OK;	// MCP completed without error
	else
		res = ERR_UNKNOWN_TYPE;	// ???
 30020f8:	6b1f003f 	cmp	w1, wzr
 30020fc:	1a8013e0 	csel	w0, wzr, w0, ne
	print_hex(status_reg);
	prints("\n");
#endif

	// clear MCP register
	REG32(MCP_CTRL) = 0x2;
 3002100:	d28a2003 	mov	x3, #0x5100                	// #20736
 3002104:	f2b30023 	movk	x3, #0x9801, lsl #16
	REG32(MCP_STATUS) = 0x6;
 3002108:	d28a2081 	mov	x1, #0x5104                	// #20740
 300210c:	f2b30021 	movk	x1, #0x9801, lsl #16
	print_hex(status_reg);
	prints("\n");
#endif

	// clear MCP register
	REG32(MCP_CTRL) = 0x2;
 3002110:	52800044 	mov	w4, #0x2                   	// #2
	REG32(MCP_STATUS) = 0x6;
 3002114:	528000c2 	mov	w2, #0x6                   	// #6
	print_hex(status_reg);
	prints("\n");
#endif

	// clear MCP register
	REG32(MCP_CTRL) = 0x2;
 3002118:	b9000064 	str	w4, [x3]
	REG32(MCP_STATUS) = 0x6;
 300211c:	b9000022 	str	w2, [x1]
	return res;
}
 3002120:	f9400bfe 	ldr	x30, [sp,#16]
 3002124:	a8c353f3 	ldp	x19, x20, [sp],#48
 3002128:	d65f03c0 	ret
	REG32(MCP_RDPTR) = (uintptr_t)dscpt;
	REG32(MCP_WRPTR) = (uintptr_t)dscpt_addr + sizeof(t_mcp_descriptor);	// writer pointer cannot be equal to limit

	//mcp descriptor in sram
	if ((REG32(MCP_BASE) >= SRAM_BASE_PHY) && (REG32(MCP_BASE) <= SRAM_LAST_ADDR)) {
		REG32(MCP_DES_COUNT) = 0x80000000;
 300212c:	d28a2680 	mov	x0, #0x5134                	// #20788
 3002130:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002134:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
 3002138:	b9000001 	str	w1, [x0]
 300213c:	17ffffcb 	b	3002068 <do_mcp.constprop.0+0xc0>
	// go
	REG32(MCP_CTRL) = 0x3;
    	count = 0;
	while ((REG32(MCP_STATUS) & 0x6) == 0){
        if (count > 1000){
            REG32(MCP_CTRL) = 0x2;
 3002140:	d28a2003 	mov	x3, #0x5100                	// #20736
 3002144:	f2b30023 	movk	x3, #0x9801, lsl #16
 3002148:	52800044 	mov	w4, #0x2                   	// #2
	        REG32(MCP_STATUS) = 0x6;
 300214c:	528000c2 	mov	w2, #0x6                   	// #6
            return ERR_MCP_ERROR;
 3002150:	52800600 	mov	w0, #0x30                  	// #48
	// go
	REG32(MCP_CTRL) = 0x3;
    	count = 0;
	while ((REG32(MCP_STATUS) & 0x6) == 0){
        if (count > 1000){
            REG32(MCP_CTRL) = 0x2;
 3002154:	b9000064 	str	w4, [x3]
	        REG32(MCP_STATUS) = 0x6;
 3002158:	b9000022 	str	w2, [x1]
 300215c:	17fffff1 	b	3002120 <do_mcp.constprop.0+0x178>

0000000003002160 <AES_ECB_decrypt>:

/************************************************************************
 *  Implementation : Public functions
 ************************************************************************/
int AES_ECB_decrypt(UINT8 *src_addr, UINT32 length, UINT8 *dst_addr, UINT32 key[8], UINT32 padding, UINT32 key_cw_idx)
{
 3002160:	a9bb53f3 	stp	x19, x20, [sp,#-80]!
 3002164:	2a0103f3 	mov	w19, w1
 3002168:	aa0203f4 	mov	x20, x2
 300216c:	a9015bf5 	stp	x21, x22, [sp,#16]
 3002170:	a90263f7 	stp	x23, x24, [sp,#32]
 3002174:	f9001bfe 	str	x30, [sp,#48]
 3002178:	aa0003f5 	mov	x21, x0
 300217c:	aa0303f6 	mov	x22, x3
 3002180:	2a0503f8 	mov	w24, w5
	extern aesmode_t sys_aes_mode;

	if (length == 0)
 3002184:	350000e1 	cbnz	w1, 30021a0 <AES_ECB_decrypt+0x40>
	//dst address in sram
	if ((mcp_dscpt.dst_addr >= SRAM_BASE_PHY) && (mcp_dscpt.dst_addr <= SRAM_LAST_ADDR))
		mcp_dscpt.length =mcp_dscpt.length | 0x40000000;

	return do_mcp(&mcp_dscpt);
}
 3002188:	a9415bf5 	ldp	x21, x22, [sp,#16]
 300218c:	a94263f7 	ldp	x23, x24, [sp,#32]
 3002190:	f9401bfe 	ldr	x30, [sp,#48]
 3002194:	52801260 	mov	w0, #0x93                  	// #147
 3002198:	a8c553f3 	ldp	x19, x20, [sp],#80
 300219c:	d65f03c0 	ret

	if (length == 0)
		return ERR_INVALID_PARAM;

#ifdef ROM_DEBUG
	prints(__FUNCTION__);
 30021a0:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 30021a4:	912c2000 	add	x0, x0, #0xb08
 30021a8:	b9004fe4 	str	w4, [sp,#76]
	prints("(");
	print_hex((UINT32)(uintptr_t)src_addr);
	prints(", ");
 30021ac:	f0000037 	adrp	x23, 3009000 <el3_vectors>
 30021b0:	913b82f7 	add	x23, x23, #0xee0

	if (length == 0)
		return ERR_INVALID_PARAM;

#ifdef ROM_DEBUG
	prints(__FUNCTION__);
 30021b4:	94000fc7 	bl	30060d0 <prints>
	prints("(");
 30021b8:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 30021bc:	913b6000 	add	x0, x0, #0xed8
 30021c0:	94000fc4 	bl	30060d0 <prints>
	print_hex((UINT32)(uintptr_t)src_addr);
 30021c4:	2a1503e0 	mov	w0, w21
 30021c8:	94000ff4 	bl	3006198 <print_hex>
	prints(", ");
 30021cc:	aa1703e0 	mov	x0, x23
 30021d0:	94000fc0 	bl	30060d0 <prints>
	print_hex(length);
 30021d4:	2a1303e0 	mov	w0, w19
 30021d8:	94000ff0 	bl	3006198 <print_hex>
	prints(", ");
 30021dc:	aa1703e0 	mov	x0, x23
 30021e0:	94000fbc 	bl	30060d0 <prints>
	print_hex((UINT32)(uintptr_t)dst_addr);
 30021e4:	2a1403e0 	mov	w0, w20
 30021e8:	94000fec 	bl	3006198 <print_hex>
	prints(", ");
 30021ec:	aa1703e0 	mov	x0, x23
 30021f0:	94000fb8 	bl	30060d0 <prints>
	print_hex((UINT32)(uintptr_t)key);
 30021f4:	2a1603e0 	mov	w0, w22
 30021f8:	94000fe8 	bl	3006198 <print_hex>
	prints(", ");
 30021fc:	aa1703e0 	mov	x0, x23
 3002200:	94000fb4 	bl	30060d0 <prints>
	print_hex(padding);
 3002204:	b9404fe4 	ldr	w4, [sp,#76]
 3002208:	2a0403e0 	mov	w0, w4
 300220c:	94000fe3 	bl	3006198 <print_hex>
	prints(", ");
 3002210:	aa1703e0 	mov	x0, x23
 3002214:	94000faf 	bl	30060d0 <prints>
	print_hex(key_cw_idx);
 3002218:	2a1803e0 	mov	w0, w24
 300221c:	94000fdf 	bl	3006198 <print_hex>
	prints(")\n");
 3002220:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 3002224:	91352000 	add	x0, x0, #0xd48
 3002228:	94000faa 	bl	30060d0 <prints>
	if (key != NULL) {
 300222c:	b4000896 	cbz	x22, 300233c <AES_ECB_decrypt+0x1dc>
		hexdump("AES key", (char *)key, 0x10);
 3002230:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 3002234:	52800202 	mov	w2, #0x10                  	// #16
 3002238:	aa1603e1 	mov	x1, x22
 300223c:	913ba000 	add	x0, x0, #0xee8
 3002240:	94001517 	bl	300769c <hexdump>
	}
#endif

#ifdef ENABLE_MMU
	sys_dcache_flush_MVA((uintptr_t)src_addr, (uintptr_t)src_addr + length);
 3002244:	0b150261 	add	w1, w19, w21
 3002248:	2a1503e0 	mov	w0, w21
 300224c:	97fff780 	bl	300004c <sys_dcache_flush_MVA>
	if (dst_addr != src_addr) {
 3002250:	eb15029f 	cmp	x20, x21
 3002254:	54000c40 	b.eq	30023dc <AES_ECB_decrypt+0x27c>
		sys_dcache_flush_MVA((uintptr_t)dst_addr, (uintptr_t)dst_addr + length);
 3002258:	0b140261 	add	w1, w19, w20
 300225c:	2a1403e0 	mov	w0, w20
	}
#endif

	loopsTrap();
	set_memory(&mcp_dscpt, 0, sizeof(t_mcp_descriptor));
 3002260:	90000057 	adrp	x23, 300a000 <__FUNCTION__.3108+0x3d8>
#endif

#ifdef ENABLE_MMU
	sys_dcache_flush_MVA((uintptr_t)src_addr, (uintptr_t)src_addr + length);
	if (dst_addr != src_addr) {
		sys_dcache_flush_MVA((uintptr_t)dst_addr, (uintptr_t)dst_addr + length);
 3002264:	97fff77a 	bl	300004c <sys_dcache_flush_MVA>
	}
#endif

	loopsTrap();
 3002268:	94001556 	bl	30077c0 <loopsTrap>
	set_memory(&mcp_dscpt, 0, sizeof(t_mcp_descriptor));
 300226c:	52800702 	mov	w2, #0x38                  	// #56
 3002270:	52800001 	mov	w1, #0x0                   	// #0
 3002274:	9132c2e0 	add	x0, x23, #0xcb0
 3002278:	940013e1 	bl	30071fc <set_memory>
		//aes128
		mcp_dscpt.mode = (2 << 12) | (5 << 0);     // key from CW, aes128
		mcp_dscpt.key[0] = (key_cw_idx << 8);
	}
	//only aes128 can put everything at secure ram. other modes must put key at otp or cw or ddr
	else if (sys_aes_mode == AES_MODE_192)
 300227c:	90000040 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3002280:	b9479000 	ldr	w0, [x0,#1936]
 3002284:	7100041f 	cmp	w0, #0x1
 3002288:	54000960 	b.eq	30023b4 <AES_ECB_decrypt+0x254>
        #else //key in ddr
		mcp_dscpt.mode = 0x301d;					// key at DDR , aes192
		mcp_dscpt.key[0] = (UINT32)key[0];
        #endif
	}
	else if ((sys_aes_mode == AES_MODE_256)||(sys_aes_mode == AES_MODE_256_1))
 300228c:	51000800 	sub	w0, w0, #0x2
 3002290:	7100041f 	cmp	w0, #0x1
		mcp_dscpt.mode = 0x2015;					// key from CW , aes256
		if (writeSRAM(0,key,4) == FALSE)		// write key from cw offset 0x00
			return ERR_WRITE_SRAM_FAIL;
		mcp_dscpt.key[0] = 0x00;
        #else
		mcp_dscpt.mode = 0x3015;					// key at ddr , aes256
 3002294:	9132c2e0 	add	x0, x23, #0xcb0
        #else //key in ddr
		mcp_dscpt.mode = 0x301d;					// key at DDR , aes192
		mcp_dscpt.key[0] = (UINT32)key[0];
        #endif
	}
	else if ((sys_aes_mode == AES_MODE_256)||(sys_aes_mode == AES_MODE_256_1))
 3002298:	540009a9 	b.ls	30023cc <AES_ECB_decrypt+0x26c>
	}
	else //aes 128
	{
		if (key == NULL)
			faultDetect();
		mcp_dscpt.mode = 0x5;						// key addr at descriptor word1-6, aes128
 300229c:	528000a1 	mov	w1, #0x5                   	// #5
 30022a0:	b90cb2e1 	str	w1, [x23,#3248]
		mcp_dscpt.key[0] = key[0];
 30022a4:	b94002c1 	ldr	w1, [x22]
 30022a8:	b9000401 	str	w1, [x0,#4]
		mcp_dscpt.key[1] = key[1];
 30022ac:	b94006c1 	ldr	w1, [x22,#4]
 30022b0:	b9000801 	str	w1, [x0,#8]
		mcp_dscpt.key[2] = key[2];
 30022b4:	b9400ac1 	ldr	w1, [x22,#8]
 30022b8:	b9000c01 	str	w1, [x0,#12]
		mcp_dscpt.key[3] = key[3];
 30022bc:	b9400ec1 	ldr	w1, [x22,#12]
 30022c0:	b9001001 	str	w1, [x0,#16]
	}
	mcp_dscpt.src_addr = (UINT32)(uintptr_t)src_addr;
 30022c4:	9132c2e1 	add	x1, x23, #0xcb0
 30022c8:	92407ea2 	and	x2, x21, #0xffffffff
	mcp_dscpt.dst_addr = (UINT32)(uintptr_t)dst_addr;
	mcp_dscpt.length = length;

	//src address in sram
	if ((mcp_dscpt.src_addr >= SRAM_BASE_PHY) && (mcp_dscpt.src_addr <= SRAM_LAST_ADDR))
 30022cc:	d03e7fe0 	adrp	x0, 80000000 <_sram>
 30022d0:	91000000 	add	x0, x0, #0x0
 30022d4:	eb00005f 	cmp	x2, x0
		mcp_dscpt.key[0] = key[0];
		mcp_dscpt.key[1] = key[1];
		mcp_dscpt.key[2] = key[2];
		mcp_dscpt.key[3] = key[3];
	}
	mcp_dscpt.src_addr = (UINT32)(uintptr_t)src_addr;
 30022d8:	b9002c35 	str	w21, [x1,#44]
	mcp_dscpt.dst_addr = (UINT32)(uintptr_t)dst_addr;
 30022dc:	b9003034 	str	w20, [x1,#48]
	mcp_dscpt.length = length;

	//src address in sram
	if ((mcp_dscpt.src_addr >= SRAM_BASE_PHY) && (mcp_dscpt.src_addr <= SRAM_LAST_ADDR))
 30022e0:	540000a3 	b.cc	30022f4 <AES_ECB_decrypt+0x194>
 30022e4:	91407c03 	add	x3, x0, #0x1f, lsl #12
 30022e8:	913ffc63 	add	x3, x3, #0xfff
 30022ec:	eb03005f 	cmp	x2, x3
 30022f0:	540004e9 	b.ls	300238c <AES_ECB_decrypt+0x22c>
		mcp_dscpt.key[2] = key[2];
		mcp_dscpt.key[3] = key[3];
	}
	mcp_dscpt.src_addr = (UINT32)(uintptr_t)src_addr;
	mcp_dscpt.dst_addr = (UINT32)(uintptr_t)dst_addr;
	mcp_dscpt.length = length;
 30022f4:	9132c2e1 	add	x1, x23, #0xcb0
 30022f8:	b9003433 	str	w19, [x1,#52]
 30022fc:	92407e94 	and	x20, x20, #0xffffffff

	//src address in sram
	if ((mcp_dscpt.src_addr >= SRAM_BASE_PHY) && (mcp_dscpt.src_addr <= SRAM_LAST_ADDR))
		mcp_dscpt.length = mcp_dscpt.length | 0x80000000;
	//dst address in sram
	if ((mcp_dscpt.dst_addr >= SRAM_BASE_PHY) && (mcp_dscpt.dst_addr <= SRAM_LAST_ADDR))
 3002300:	eb14001f 	cmp	x0, x20
 3002304:	54000128 	b.hi	3002328 <AES_ECB_decrypt+0x1c8>
 3002308:	91407c00 	add	x0, x0, #0x1f, lsl #12
 300230c:	913ffc00 	add	x0, x0, #0xfff
 3002310:	eb00029f 	cmp	x20, x0
 3002314:	540000a8 	b.hi	3002328 <AES_ECB_decrypt+0x1c8>
		mcp_dscpt.length =mcp_dscpt.length | 0x40000000;
 3002318:	9132c2f7 	add	x23, x23, #0xcb0
 300231c:	b94036e0 	ldr	w0, [x23,#52]
 3002320:	32020000 	orr	w0, w0, #0x40000000
 3002324:	b90036e0 	str	w0, [x23,#52]

	return do_mcp(&mcp_dscpt);
}
 3002328:	a9415bf5 	ldp	x21, x22, [sp,#16]
 300232c:	a94263f7 	ldp	x23, x24, [sp,#32]
 3002330:	f9401bfe 	ldr	x30, [sp,#48]
 3002334:	a8c553f3 	ldp	x19, x20, [sp],#80
		mcp_dscpt.length = mcp_dscpt.length | 0x80000000;
	//dst address in sram
	if ((mcp_dscpt.dst_addr >= SRAM_BASE_PHY) && (mcp_dscpt.dst_addr <= SRAM_LAST_ADDR))
		mcp_dscpt.length =mcp_dscpt.length | 0x40000000;

	return do_mcp(&mcp_dscpt);
 3002338:	17ffff1c 	b	3001fa8 <do_mcp.constprop.0>
		hexdump("AES key", (char *)key, 0x10);
	}
#endif

#ifdef ENABLE_MMU
	sys_dcache_flush_MVA((uintptr_t)src_addr, (uintptr_t)src_addr + length);
 300233c:	0b150261 	add	w1, w19, w21
 3002340:	2a1503e0 	mov	w0, w21
 3002344:	97fff742 	bl	300004c <sys_dcache_flush_MVA>
	if (dst_addr != src_addr) {
 3002348:	eb15029f 	cmp	x20, x21
 300234c:	54000260 	b.eq	3002398 <AES_ECB_decrypt+0x238>
		sys_dcache_flush_MVA((uintptr_t)dst_addr, (uintptr_t)dst_addr + length);
 3002350:	0b140261 	add	w1, w19, w20
 3002354:	2a1403e0 	mov	w0, w20
	}
#endif

	loopsTrap();
	set_memory(&mcp_dscpt, 0, sizeof(t_mcp_descriptor));
 3002358:	90000057 	adrp	x23, 300a000 <__FUNCTION__.3108+0x3d8>
#endif

#ifdef ENABLE_MMU
	sys_dcache_flush_MVA((uintptr_t)src_addr, (uintptr_t)src_addr + length);
	if (dst_addr != src_addr) {
		sys_dcache_flush_MVA((uintptr_t)dst_addr, (uintptr_t)dst_addr + length);
 300235c:	97fff73c 	bl	300004c <sys_dcache_flush_MVA>
	}
#endif

	loopsTrap();
 3002360:	94001518 	bl	30077c0 <loopsTrap>
	set_memory(&mcp_dscpt, 0, sizeof(t_mcp_descriptor));
 3002364:	52800702 	mov	w2, #0x38                  	// #56
 3002368:	52800001 	mov	w1, #0x0                   	// #0
 300236c:	9132c2e0 	add	x0, x23, #0xcb0
 3002370:	940013a3 	bl	30071fc <set_memory>

	if (key == NULL) {
		//aes128
		mcp_dscpt.mode = (2 << 12) | (5 << 0);     // key from CW, aes128
 3002374:	9132c2e0 	add	x0, x23, #0xcb0
		mcp_dscpt.key[0] = (key_cw_idx << 8);
 3002378:	53185f18 	lsl	w24, w24, #8
	loopsTrap();
	set_memory(&mcp_dscpt, 0, sizeof(t_mcp_descriptor));

	if (key == NULL) {
		//aes128
		mcp_dscpt.mode = (2 << 12) | (5 << 0);     // key from CW, aes128
 300237c:	528400a1 	mov	w1, #0x2005                	// #8197
 3002380:	b90cb2e1 	str	w1, [x23,#3248]
		mcp_dscpt.key[0] = (key_cw_idx << 8);
 3002384:	b9000418 	str	w24, [x0,#4]
 3002388:	17ffffcf 	b	30022c4 <AES_ECB_decrypt+0x164>
	mcp_dscpt.dst_addr = (UINT32)(uintptr_t)dst_addr;
	mcp_dscpt.length = length;

	//src address in sram
	if ((mcp_dscpt.src_addr >= SRAM_BASE_PHY) && (mcp_dscpt.src_addr <= SRAM_LAST_ADDR))
		mcp_dscpt.length = mcp_dscpt.length | 0x80000000;
 300238c:	32010273 	orr	w19, w19, #0x80000000
 3002390:	b9003433 	str	w19, [x1,#52]
 3002394:	17ffffda 	b	30022fc <AES_ECB_decrypt+0x19c>
	if (dst_addr != src_addr) {
		sys_dcache_flush_MVA((uintptr_t)dst_addr, (uintptr_t)dst_addr + length);
	}
#endif

	loopsTrap();
 3002398:	9400150a 	bl	30077c0 <loopsTrap>
	set_memory(&mcp_dscpt, 0, sizeof(t_mcp_descriptor));
 300239c:	90000057 	adrp	x23, 300a000 <__FUNCTION__.3108+0x3d8>
 30023a0:	52800702 	mov	w2, #0x38                  	// #56
 30023a4:	52800001 	mov	w1, #0x0                   	// #0
 30023a8:	9132c2e0 	add	x0, x23, #0xcb0
 30023ac:	94001394 	bl	30071fc <set_memory>
 30023b0:	17fffff1 	b	3002374 <AES_ECB_decrypt+0x214>
		mcp_dscpt.mode = 0x201d;					// key from CW , aes192
		if (writeSRAM(0,key,3) == FALSE)		// write key from cw offset 0x00
			return ERR_WRITE_SRAM_FAIL;
		mcp_dscpt.key[0] = 0x00;
        #else //key in ddr
		mcp_dscpt.mode = 0x301d;					// key at DDR , aes192
 30023b4:	528603a1 	mov	w1, #0x301d                	// #12317
 30023b8:	9132c2e0 	add	x0, x23, #0xcb0
 30023bc:	b90cb2e1 	str	w1, [x23,#3248]
		mcp_dscpt.key[0] = (UINT32)key[0];
 30023c0:	b94002c1 	ldr	w1, [x22]
 30023c4:	b9000401 	str	w1, [x0,#4]
 30023c8:	17ffffbf 	b	30022c4 <AES_ECB_decrypt+0x164>
		mcp_dscpt.mode = 0x2015;					// key from CW , aes256
		if (writeSRAM(0,key,4) == FALSE)		// write key from cw offset 0x00
			return ERR_WRITE_SRAM_FAIL;
		mcp_dscpt.key[0] = 0x00;
        #else
		mcp_dscpt.mode = 0x3015;					// key at ddr , aes256
 30023cc:	528602a1 	mov	w1, #0x3015                	// #12309
		mcp_dscpt.key[0] = (uintptr_t)key;
 30023d0:	b9000416 	str	w22, [x0,#4]
		mcp_dscpt.mode = 0x2015;					// key from CW , aes256
		if (writeSRAM(0,key,4) == FALSE)		// write key from cw offset 0x00
			return ERR_WRITE_SRAM_FAIL;
		mcp_dscpt.key[0] = 0x00;
        #else
		mcp_dscpt.mode = 0x3015;					// key at ddr , aes256
 30023d4:	b90cb2e1 	str	w1, [x23,#3248]
 30023d8:	17ffffbb 	b	30022c4 <AES_ECB_decrypt+0x164>
	if (dst_addr != src_addr) {
		sys_dcache_flush_MVA((uintptr_t)dst_addr, (uintptr_t)dst_addr + length);
	}
#endif

	loopsTrap();
 30023dc:	940014f9 	bl	30077c0 <loopsTrap>
	set_memory(&mcp_dscpt, 0, sizeof(t_mcp_descriptor));
 30023e0:	90000057 	adrp	x23, 300a000 <__FUNCTION__.3108+0x3d8>
 30023e4:	52800702 	mov	w2, #0x38                  	// #56
 30023e8:	52800001 	mov	w1, #0x0                   	// #0
 30023ec:	9132c2e0 	add	x0, x23, #0xcb0
 30023f0:	94001383 	bl	30071fc <set_memory>
 30023f4:	17ffffa2 	b	300227c <AES_ECB_decrypt+0x11c>

00000000030023f8 <SHA256_hash>:
	return do_mcp(&mcp_dscpt);
}


int SHA256_hash(UINT8 *src_addr, INT32 length, UINT8 *dst_addr, UINT32 iv[8], UINT8 hw_padding)
{
 30023f8:	a9bb53f3 	stp	x19, x20, [sp,#-80]!

	if ((src_addr == NULL) || (dst_addr == NULL) || (length <= 0))
 30023fc:	eb1f005f 	cmp	x2, xzr
	return do_mcp(&mcp_dscpt);
}


int SHA256_hash(UINT8 *src_addr, INT32 length, UINT8 *dst_addr, UINT32 iv[8], UINT8 hw_padding)
{
 3002400:	2a0103f4 	mov	w20, w1

	if ((src_addr == NULL) || (dst_addr == NULL) || (length <= 0))
 3002404:	1a9f17e1 	cset	w1, eq
 3002408:	6b1f029f 	cmp	w20, wzr
	return do_mcp(&mcp_dscpt);
}


int SHA256_hash(UINT8 *src_addr, INT32 length, UINT8 *dst_addr, UINT32 iv[8], UINT8 hw_padding)
{
 300240c:	a9015bf5 	stp	x21, x22, [sp,#16]
 3002410:	aa0003f5 	mov	x21, x0

	if ((src_addr == NULL) || (dst_addr == NULL) || (length <= 0))
 3002414:	1a9fc7e0 	cset	w0, le
	return do_mcp(&mcp_dscpt);
}


int SHA256_hash(UINT8 *src_addr, INT32 length, UINT8 *dst_addr, UINT32 iv[8], UINT8 hw_padding)
{
 3002418:	a90263f7 	stp	x23, x24, [sp,#32]
 300241c:	a9036bf9 	stp	x25, x26, [sp,#48]
 3002420:	f90023fe 	str	x30, [sp,#64]

	if ((src_addr == NULL) || (dst_addr == NULL) || (length <= 0))
 3002424:	2a000020 	orr	w0, w1, w0
	return do_mcp(&mcp_dscpt);
}


int SHA256_hash(UINT8 *src_addr, INT32 length, UINT8 *dst_addr, UINT32 iv[8], UINT8 hw_padding)
{
 3002428:	aa0203f3 	mov	x19, x2
 300242c:	aa0303f6 	mov	x22, x3
 3002430:	53001c97 	uxtb	w23, w4

	if ((src_addr == NULL) || (dst_addr == NULL) || (length <= 0))
 3002434:	35000c60 	cbnz	w0, 30025c0 <SHA256_hash+0x1c8>
 3002438:	b4000c55 	cbz	x21, 30025c0 <SHA256_hash+0x1c8>
		return ERR_INVALID_PARAM;


#ifdef ROM_DEBUG
	prints(__FUNCTION__);
 300243c:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 3002440:	912c2000 	add	x0, x0, #0xb08
 3002444:	91004000 	add	x0, x0, #0x10
	prints("(");
	print_hex((UINT32)(uintptr_t)src_addr);
	prints(", ");
 3002448:	f0000039 	adrp	x25, 3009000 <el3_vectors>
 300244c:	913b8339 	add	x25, x25, #0xee0
	if ((src_addr == NULL) || (dst_addr == NULL) || (length <= 0))
		return ERR_INVALID_PARAM;


#ifdef ROM_DEBUG
	prints(__FUNCTION__);
 3002450:	94000f20 	bl	30060d0 <prints>
	prints(", ");
	print_hex((UINT32) hw_padding);
	prints(")\n");
#endif

	set_memory(&mcp_dscpt, 0, sizeof(t_mcp_descriptor));
 3002454:	9000005a 	adrp	x26, 300a000 <__FUNCTION__.3108+0x3d8>
 3002458:	9132c358 	add	x24, x26, #0xcb0
		return ERR_INVALID_PARAM;


#ifdef ROM_DEBUG
	prints(__FUNCTION__);
	prints("(");
 300245c:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 3002460:	913b6000 	add	x0, x0, #0xed8
 3002464:	94000f1b 	bl	30060d0 <prints>
	print_hex((UINT32)(uintptr_t)src_addr);
 3002468:	2a1503e0 	mov	w0, w21
 300246c:	94000f4b 	bl	3006198 <print_hex>
	prints(", ");
 3002470:	aa1903e0 	mov	x0, x25
 3002474:	94000f17 	bl	30060d0 <prints>
	print_hex(length);
 3002478:	2a1403e0 	mov	w0, w20
 300247c:	94000f47 	bl	3006198 <print_hex>
	prints(", ");
 3002480:	aa1903e0 	mov	x0, x25
 3002484:	94000f13 	bl	30060d0 <prints>
	print_hex((UINT32)(uintptr_t)dst_addr);
 3002488:	2a1303e0 	mov	w0, w19
 300248c:	94000f43 	bl	3006198 <print_hex>
	prints(", ");
 3002490:	aa1903e0 	mov	x0, x25
 3002494:	94000f0f 	bl	30060d0 <prints>
	print_hex((UINT32)(uintptr_t)iv);
 3002498:	2a1603e0 	mov	w0, w22
 300249c:	94000f3f 	bl	3006198 <print_hex>
	prints(", ");
 30024a0:	aa1903e0 	mov	x0, x25
 30024a4:	94000f0b 	bl	30060d0 <prints>
	print_hex((UINT32) hw_padding);
 30024a8:	2a1703e0 	mov	w0, w23
 30024ac:	94000f3b 	bl	3006198 <print_hex>
	prints(")\n");
 30024b0:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 30024b4:	91352000 	add	x0, x0, #0xd48
 30024b8:	94000f06 	bl	30060d0 <prints>
#endif

	set_memory(&mcp_dscpt, 0, sizeof(t_mcp_descriptor));
 30024bc:	aa1803e0 	mov	x0, x24
 30024c0:	52800702 	mov	w2, #0x38                  	// #56
 30024c4:	52800001 	mov	w1, #0x0                   	// #0
 30024c8:	9400134d 	bl	30071fc <set_memory>
	mcp_dscpt.mode = 0xb;
 30024cc:	52800160 	mov	w0, #0xb                   	// #11
 30024d0:	b90cb340 	str	w0, [x26,#3248]

	if (iv == NULL) {
 30024d4:	b40009b6 	cbz	x22, 3002608 <SHA256_hash+0x210>
		mcp_dscpt.key[5] = SHA256_H5;
		mcp_dscpt.ini_key[0] = SHA256_H6;
		mcp_dscpt.ini_key[1] = SHA256_H7;
	}
	else {
		mcp_dscpt.key[0] = iv[0];
 30024d8:	b94002c0 	ldr	w0, [x22]
 30024dc:	b9000700 	str	w0, [x24,#4]
		mcp_dscpt.key[1] = iv[1];
 30024e0:	b94006c0 	ldr	w0, [x22,#4]
 30024e4:	b9000b00 	str	w0, [x24,#8]
		mcp_dscpt.key[2] = iv[2];
 30024e8:	b9400ac0 	ldr	w0, [x22,#8]
 30024ec:	b9000f00 	str	w0, [x24,#12]
		mcp_dscpt.key[3] = iv[3];
 30024f0:	b9400ec0 	ldr	w0, [x22,#12]
 30024f4:	b9001300 	str	w0, [x24,#16]
		mcp_dscpt.key[4] = iv[4];
 30024f8:	b94012c0 	ldr	w0, [x22,#16]
 30024fc:	b9001700 	str	w0, [x24,#20]
		mcp_dscpt.key[5] = iv[5];
 3002500:	b94016c0 	ldr	w0, [x22,#20]
 3002504:	b9001b00 	str	w0, [x24,#24]
		mcp_dscpt.ini_key[0] = iv[6];
 3002508:	b9401ac0 	ldr	w0, [x22,#24]
 300250c:	b9001f00 	str	w0, [x24,#28]
		mcp_dscpt.ini_key[1] = iv[7];
 3002510:	b9401ec0 	ldr	w0, [x22,#28]
 3002514:	b9002300 	str	w0, [x24,#32]
	}

	mcp_dscpt.src_addr = (UINT32)(uintptr_t)src_addr;
 3002518:	9132c341 	add	x1, x26, #0xcb0
 300251c:	92407ea2 	and	x2, x21, #0xffffffff
	mcp_dscpt.dst_addr = (UINT32)(uintptr_t)dst_addr;
	mcp_dscpt.length = length;

	//src address in sram
	if ((mcp_dscpt.src_addr >= SRAM_BASE_PHY) && (mcp_dscpt.src_addr <= SRAM_LAST_ADDR))
 3002520:	d03e7fe0 	adrp	x0, 80000000 <_sram>
 3002524:	91000000 	add	x0, x0, #0x0
 3002528:	eb00005f 	cmp	x2, x0
		mcp_dscpt.key[5] = iv[5];
		mcp_dscpt.ini_key[0] = iv[6];
		mcp_dscpt.ini_key[1] = iv[7];
	}

	mcp_dscpt.src_addr = (UINT32)(uintptr_t)src_addr;
 300252c:	b9002c35 	str	w21, [x1,#44]
	mcp_dscpt.dst_addr = (UINT32)(uintptr_t)dst_addr;
 3002530:	b9003033 	str	w19, [x1,#48]
	mcp_dscpt.length = length;

	//src address in sram
	if ((mcp_dscpt.src_addr >= SRAM_BASE_PHY) && (mcp_dscpt.src_addr <= SRAM_LAST_ADDR))
 3002534:	540000a3 	b.cc	3002548 <SHA256_hash+0x150>
 3002538:	91407c03 	add	x3, x0, #0x1f, lsl #12
 300253c:	913ffc63 	add	x3, x3, #0xfff
 3002540:	eb03005f 	cmp	x2, x3
 3002544:	540005c9 	b.ls	30025fc <SHA256_hash+0x204>
		mcp_dscpt.ini_key[1] = iv[7];
	}

	mcp_dscpt.src_addr = (UINT32)(uintptr_t)src_addr;
	mcp_dscpt.dst_addr = (UINT32)(uintptr_t)dst_addr;
	mcp_dscpt.length = length;
 3002548:	9132c341 	add	x1, x26, #0xcb0
 300254c:	b9003434 	str	w20, [x1,#52]
 3002550:	92407e61 	and	x1, x19, #0xffffffff

	//src address in sram
	if ((mcp_dscpt.src_addr >= SRAM_BASE_PHY) && (mcp_dscpt.src_addr <= SRAM_LAST_ADDR))
		mcp_dscpt.length = mcp_dscpt.length | 0x80000000;
	//dst address in sram
	if ((mcp_dscpt.dst_addr >= SRAM_BASE_PHY) && (mcp_dscpt.dst_addr <= SRAM_LAST_ADDR))
 3002554:	eb01001f 	cmp	x0, x1
 3002558:	540000a8 	b.hi	300256c <SHA256_hash+0x174>
 300255c:	91407c00 	add	x0, x0, #0x1f, lsl #12
 3002560:	913ffc00 	add	x0, x0, #0xfff
 3002564:	eb00003f 	cmp	x1, x0
 3002568:	54000409 	b.ls	30025e8 <SHA256_hash+0x1f0>
		mcp_dscpt.length = mcp_dscpt.length | 0x40000000;

#ifdef ENABLE_MMU
	sys_dcache_flush_MVA((UINT32)(uintptr_t)src_addr, (UINT32)(uintptr_t)src_addr + length);
 300256c:	0b150281 	add	w1, w20, w21
 3002570:	2a1503e0 	mov	w0, w21
 3002574:	97fff6b6 	bl	300004c <sys_dcache_flush_MVA>
	sys_dcache_flush_MVA((UINT32)(uintptr_t)dst_addr, (UINT32)(uintptr_t)dst_addr + length);
 3002578:	0b130281 	add	w1, w20, w19
 300257c:	2a1303e0 	mov	w0, w19
 3002580:	97fff6b3 	bl	300004c <sys_dcache_flush_MVA>
	sys_dcache_flush_MVA((UINT32)(uintptr_t)iv, (UINT32)(uintptr_t)iv + sizeof(UINT32)*8);
 3002584:	110082c1 	add	w1, w22, #0x20
 3002588:	2a1603e0 	mov	w0, w22
 300258c:	97fff6b0 	bl	300004c <sys_dcache_flush_MVA>
#endif

	if (hw_padding) {
		REG32(MCP_CTRL1) &= (UINT32)~0x800;
 3002590:	d28a3301 	mov	x1, #0x5198                	// #20888
 3002594:	f2b30021 	movk	x1, #0x9801, lsl #16
 3002598:	b9400020 	ldr	w0, [x1]
	sys_dcache_flush_MVA((UINT32)(uintptr_t)src_addr, (UINT32)(uintptr_t)src_addr + length);
	sys_dcache_flush_MVA((UINT32)(uintptr_t)dst_addr, (UINT32)(uintptr_t)dst_addr + length);
	sys_dcache_flush_MVA((UINT32)(uintptr_t)iv, (UINT32)(uintptr_t)iv + sizeof(UINT32)*8);
#endif

	if (hw_padding) {
 300259c:	34000217 	cbz	w23, 30025dc <SHA256_hash+0x1e4>
		REG32(MCP_CTRL1) &= (UINT32)~0x800;
 30025a0:	12147800 	and	w0, w0, #0xfffff7ff
 30025a4:	b9000020 	str	w0, [x1]
	else {
		REG32(MCP_CTRL1) |= (UINT32)0x800;
	}

	return do_mcp(&mcp_dscpt);
}
 30025a8:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30025ac:	a94263f7 	ldp	x23, x24, [sp,#32]
 30025b0:	a9436bf9 	ldp	x25, x26, [sp,#48]
 30025b4:	f94023fe 	ldr	x30, [sp,#64]
 30025b8:	a8c553f3 	ldp	x19, x20, [sp],#80
	}
	else {
		REG32(MCP_CTRL1) |= (UINT32)0x800;
	}

	return do_mcp(&mcp_dscpt);
 30025bc:	17fffe7b 	b	3001fa8 <do_mcp.constprop.0>
}
 30025c0:	52801260 	mov	w0, #0x93                  	// #147
 30025c4:	f94023fe 	ldr	x30, [sp,#64]
 30025c8:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30025cc:	a94263f7 	ldp	x23, x24, [sp,#32]
 30025d0:	a9436bf9 	ldp	x25, x26, [sp,#48]
 30025d4:	a8c553f3 	ldp	x19, x20, [sp],#80
 30025d8:	d65f03c0 	ret

	if (hw_padding) {
		REG32(MCP_CTRL1) &= (UINT32)~0x800;
	}
	else {
		REG32(MCP_CTRL1) |= (UINT32)0x800;
 30025dc:	32150000 	orr	w0, w0, #0x800
 30025e0:	b9000020 	str	w0, [x1]
 30025e4:	17fffff1 	b	30025a8 <SHA256_hash+0x1b0>
	//src address in sram
	if ((mcp_dscpt.src_addr >= SRAM_BASE_PHY) && (mcp_dscpt.src_addr <= SRAM_LAST_ADDR))
		mcp_dscpt.length = mcp_dscpt.length | 0x80000000;
	//dst address in sram
	if ((mcp_dscpt.dst_addr >= SRAM_BASE_PHY) && (mcp_dscpt.dst_addr <= SRAM_LAST_ADDR))
		mcp_dscpt.length = mcp_dscpt.length | 0x40000000;
 30025e8:	9132c35a 	add	x26, x26, #0xcb0
 30025ec:	b9403740 	ldr	w0, [x26,#52]
 30025f0:	32020000 	orr	w0, w0, #0x40000000
 30025f4:	b9003740 	str	w0, [x26,#52]
 30025f8:	17ffffdd 	b	300256c <SHA256_hash+0x174>
	mcp_dscpt.dst_addr = (UINT32)(uintptr_t)dst_addr;
	mcp_dscpt.length = length;

	//src address in sram
	if ((mcp_dscpt.src_addr >= SRAM_BASE_PHY) && (mcp_dscpt.src_addr <= SRAM_LAST_ADDR))
		mcp_dscpt.length = mcp_dscpt.length | 0x80000000;
 30025fc:	32010282 	orr	w2, w20, #0x80000000
 3002600:	b9003422 	str	w2, [x1,#52]
 3002604:	17ffffd3 	b	3002550 <SHA256_hash+0x158>
	set_memory(&mcp_dscpt, 0, sizeof(t_mcp_descriptor));
	mcp_dscpt.mode = 0xb;

	if (iv == NULL) {
		mcp_dscpt.key[0] = SHA256_H0;
		mcp_dscpt.key[1] = SHA256_H1;
 3002608:	5295d0a0 	mov	w0, #0xae85                	// #44677
 300260c:	72b76ce0 	movk	w0, #0xbb67, lsl #16
 3002610:	b9000b00 	str	w0, [x24,#8]
		mcp_dscpt.key[2] = SHA256_H2;
		mcp_dscpt.key[3] = SHA256_H3;
 3002614:	529ea740 	mov	w0, #0xf53a                	// #62778
 3002618:	72b4a9e0 	movk	w0, #0xa54f, lsl #16
 300261c:	b9001300 	str	w0, [x24,#16]

	set_memory(&mcp_dscpt, 0, sizeof(t_mcp_descriptor));
	mcp_dscpt.mode = 0xb;

	if (iv == NULL) {
		mcp_dscpt.key[0] = SHA256_H0;
 3002620:	529ccce2 	mov	w2, #0xe667                	// #58983
 3002624:	72ad4122 	movk	w2, #0x6a09, lsl #16
		mcp_dscpt.key[1] = SHA256_H1;
		mcp_dscpt.key[2] = SHA256_H2;
 3002628:	529e6e41 	mov	w1, #0xf372                	// #62322
 300262c:	72a78dc1 	movk	w1, #0x3c6e, lsl #16
		mcp_dscpt.key[3] = SHA256_H3;
		mcp_dscpt.key[4] = SHA256_H4;
		mcp_dscpt.key[5] = SHA256_H5;
 3002630:	528d1180 	mov	w0, #0x688c                	// #26764
 3002634:	72b360a0 	movk	w0, #0x9b05, lsl #16

	set_memory(&mcp_dscpt, 0, sizeof(t_mcp_descriptor));
	mcp_dscpt.mode = 0xb;

	if (iv == NULL) {
		mcp_dscpt.key[0] = SHA256_H0;
 3002638:	b9000702 	str	w2, [x24,#4]
		mcp_dscpt.key[1] = SHA256_H1;
		mcp_dscpt.key[2] = SHA256_H2;
		mcp_dscpt.key[3] = SHA256_H3;
		mcp_dscpt.key[4] = SHA256_H4;
 300263c:	528a4fe2 	mov	w2, #0x527f                	// #21119
 3002640:	72aa21c2 	movk	w2, #0x510e, lsl #16
 3002644:	b9001702 	str	w2, [x24,#20]
	mcp_dscpt.mode = 0xb;

	if (iv == NULL) {
		mcp_dscpt.key[0] = SHA256_H0;
		mcp_dscpt.key[1] = SHA256_H1;
		mcp_dscpt.key[2] = SHA256_H2;
 3002648:	b9000f01 	str	w1, [x24,#12]
		mcp_dscpt.key[3] = SHA256_H3;
		mcp_dscpt.key[4] = SHA256_H4;
		mcp_dscpt.key[5] = SHA256_H5;
		mcp_dscpt.ini_key[0] = SHA256_H6;
 300264c:	529b3561 	mov	w1, #0xd9ab                	// #55723
 3002650:	72a3f061 	movk	w1, #0x1f83, lsl #16
 3002654:	b9001f01 	str	w1, [x24,#28]
		mcp_dscpt.key[0] = SHA256_H0;
		mcp_dscpt.key[1] = SHA256_H1;
		mcp_dscpt.key[2] = SHA256_H2;
		mcp_dscpt.key[3] = SHA256_H3;
		mcp_dscpt.key[4] = SHA256_H4;
		mcp_dscpt.key[5] = SHA256_H5;
 3002658:	b9001b00 	str	w0, [x24,#24]
		mcp_dscpt.ini_key[0] = SHA256_H6;
		mcp_dscpt.ini_key[1] = SHA256_H7;
 300265c:	5299a320 	mov	w0, #0xcd19                	// #52505
 3002660:	72ab7c00 	movk	w0, #0x5be0, lsl #16
 3002664:	b9002300 	str	w0, [x24,#32]
 3002668:	17ffffac 	b	3002518 <SHA256_hash+0x120>

000000000300266c <nf_is_6bit_ecc>:
	}
}

static unsigned int nf_is_6bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
 300266c:	d2802500 	mov	x0, #0x128                 	// #296
 3002670:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002674:	b9400000 	ldr	w0, [x0]
 3002678:	12000c00 	and	w0, w0, #0xf
 300267c:	6b1f001f 	cmp	w0, wzr
}
 3002680:	1a9f17e0 	cset	w0, eq
 3002684:	d65f03c0 	ret

0000000003002688 <nf_is_12bit_ecc>:

static unsigned int nf_is_12bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 1);
 3002688:	d2802500 	mov	x0, #0x128                 	// #296
 300268c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002690:	b9400000 	ldr	w0, [x0]
 3002694:	12000c00 	and	w0, w0, #0xf
 3002698:	7100041f 	cmp	w0, #0x1
}
 300269c:	1a9f17e0 	cset	w0, eq
 30026a0:	d65f03c0 	ret

00000000030026a4 <addr_secure_ram>:
}

static int addr_secure_ram(unsigned int addr)
{
	return (addr & 0x80000000);
}
 30026a4:	12010000 	and	w0, w0, #0x80000000
 30026a8:	d65f03c0 	ret

00000000030026ac <wait_done>:
	return 0;
}

static void wait_done(unsigned int addr, unsigned int mask, unsigned int value)
{
	while ((REG32(addr)& mask) != value) {
 30026ac:	2a0003e0 	mov	w0, w0
 30026b0:	b9400003 	ldr	w3, [x0]
 30026b4:	0a010063 	and	w3, w3, w1
 30026b8:	6b02007f 	cmp	w3, w2
 30026bc:	540000c0 	b.eq	30026d4 <wait_done+0x28>
		asm("nop");
 30026c0:	d503201f 	nop
	return 0;
}

static void wait_done(unsigned int addr, unsigned int mask, unsigned int value)
{
	while ((REG32(addr)& mask) != value) {
 30026c4:	b9400003 	ldr	w3, [x0]
 30026c8:	0a010063 	and	w3, w3, w1
 30026cc:	6b02007f 	cmp	w3, w2
 30026d0:	54ffff81 	b.ne	30026c0 <wait_done+0x14>
		asm("nop");
	}
}
 30026d4:	d65f03c0 	ret

00000000030026d8 <nf_reset>:
/*
 * issue RESET command to nand flash
 */
static int nf_reset(void)
{
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;
 30026d8:	d2802602 	mov	x2, #0x130                 	// #304
 30026dc:	f2b30022 	movk	x2, #0x9801, lsl #16

	#ifdef NF_DEBUG
	rom_debug_val("NAND_CHIP_SELECT", NAND_CHIP_SELECT);
	#endif

	REG32(NF_T3) = 0x2;
 30026e0:	d2804681 	mov	x1, #0x234                 	// #564
 30026e4:	f2b30021 	movk	x1, #0x9801, lsl #16

/*
 * issue RESET command to nand flash
 */
static int nf_reset(void)
{
 30026e8:	f81f0ffe 	str	x30, [sp,#-16]!
	#ifdef NF_DEBUG
	rom_debug_val("NAND_CHIP_SELECT", NAND_CHIP_SELECT);
	#endif

	REG32(NF_T3) = 0x2;
	REG32(NF_T2) = 0x5;
 30026ec:	d2804704 	mov	x4, #0x238                 	// #568
 30026f0:	f2b30024 	movk	x4, #0x9801, lsl #16
/*
 * issue RESET command to nand flash
 */
static int nf_reset(void)
{
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;
 30026f4:	528003c5 	mov	w5, #0x1e                  	// #30
	rom_debug_val("NAND_CHIP_SELECT", NAND_CHIP_SELECT);
	#endif

	REG32(NF_T3) = 0x2;
	REG32(NF_T2) = 0x5;
	REG32(NF_T1) = 0x2;
 30026f8:	d2804783 	mov	x3, #0x23c                 	// #572
 30026fc:	f2b30023 	movk	x3, #0x9801, lsl #16
/*
 * issue RESET command to nand flash
 */
static int nf_reset(void)
{
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;
 3002700:	b9000045 	str	w5, [x2]

	#ifdef NF_DEBUG
	rom_debug_val("NAND_CHIP_SELECT", NAND_CHIP_SELECT);
	#endif

	REG32(NF_T3) = 0x2;
 3002704:	52800040 	mov	w0, #0x2                   	// #2
 3002708:	b9000020 	str	w0, [x1]
	REG32(NF_T2) = 0x5;
 300270c:	528000a5 	mov	w5, #0x5                   	// #5
	REG32(NF_T1) = 0x2;

	//REG32(NF_MULTI_CH_MODE) = 0x20;
	REG32(NF_MULTI_CH_MODE) = 0x0;
	REG32(NF_PP_RDY) = 0x0;
 3002710:	d2804501 	mov	x1, #0x228                 	// #552
 3002714:	f2b30021 	movk	x1, #0x9801, lsl #16
	#ifdef NF_DEBUG
	rom_debug_val("NAND_CHIP_SELECT", NAND_CHIP_SELECT);
	#endif

	REG32(NF_T3) = 0x2;
	REG32(NF_T2) = 0x5;
 3002718:	b9000085 	str	w5, [x4]
	REG32(NF_T1) = 0x2;
 300271c:	b9000060 	str	w0, [x3]
	//REG32(NF_MULTI_CH_MODE) = 0x20;
	REG32(NF_MULTI_CH_MODE) = 0x0;
	REG32(NF_PP_RDY) = 0x0;

	// set 'reset' command
	REG32(NF_CMD1) = 0xff;
 3002720:	d2800200 	mov	x0, #0x10                  	// #16
 3002724:	f2b30020 	movk	x0, #0x9801, lsl #16
	REG32(NF_T3) = 0x2;
	REG32(NF_T2) = 0x5;
	REG32(NF_T1) = 0x2;

	//REG32(NF_MULTI_CH_MODE) = 0x20;
	REG32(NF_MULTI_CH_MODE) = 0x0;
 3002728:	b9014c5f 	str	wzr, [x2,#332]

	// set 'reset' command
	REG32(NF_CMD1) = 0xff;

	// issue command
	REG32(NF_ND_CTL) = 0x80;
 300272c:	d2800302 	mov	x2, #0x18                  	// #24
 3002730:	f2b30022 	movk	x2, #0x9801, lsl #16
	REG32(NF_T2) = 0x5;
	REG32(NF_T1) = 0x2;

	//REG32(NF_MULTI_CH_MODE) = 0x20;
	REG32(NF_MULTI_CH_MODE) = 0x0;
	REG32(NF_PP_RDY) = 0x0;
 3002734:	b900003f 	str	wzr, [x1]

	// set 'reset' command
	REG32(NF_CMD1) = 0xff;
 3002738:	52801fe3 	mov	w3, #0xff                  	// #255
 300273c:	b9000003 	str	w3, [x0]

	// issue command
	REG32(NF_ND_CTL) = 0x80;
 3002740:	52801001 	mov	w1, #0x80                  	// #128

	// polling go bit to until go bit de-assert (command completed)
	if (polling_timeout(NF_ND_CTL, 0x80, 0, 0x10000)) {
 3002744:	52800300 	mov	w0, #0x18                  	// #24
 3002748:	72b30020 	movk	w0, #0x9801, lsl #16

	// set 'reset' command
	REG32(NF_CMD1) = 0xff;

	// issue command
	REG32(NF_ND_CTL) = 0x80;
 300274c:	b9000041 	str	w1, [x2]

	// polling go bit to until go bit de-assert (command completed)
	if (polling_timeout(NF_ND_CTL, 0x80, 0, 0x10000)) {
 3002750:	52a00023 	mov	w3, #0x10000               	// #65536
 3002754:	52800002 	mov	w2, #0x0                   	// #0
 3002758:	94000f27 	bl	30063f4 <polling_timeout>
 300275c:	34000080 	cbz	w0, 300276c <nf_reset+0x94>
		#ifdef NF_DEBUG
		prints("nf_reset timeout\n");
		#endif
		return ERR_NF_RESET_FAIL;	// time-out
 3002760:	52800800 	mov	w0, #0x40                  	// #64
		#endif
		return ERR_NF_RESET_FAIL;	// time-out
	}

	return 0;
}
 3002764:	f84107fe 	ldr	x30, [sp],#16
 3002768:	d65f03c0 	ret
		#endif
		return ERR_NF_RESET_FAIL;	// time-out
	}

	// check ready/busy pin of NAND flash
	if (polling_timeout(NF_ND_CTL, 0x40, 0x40, 0x10000)) {
 300276c:	52800802 	mov	w2, #0x40                  	// #64
 3002770:	52800300 	mov	w0, #0x18                  	// #24
 3002774:	72b30020 	movk	w0, #0x9801, lsl #16
 3002778:	52a00023 	mov	w3, #0x10000               	// #65536
 300277c:	2a0203e1 	mov	w1, w2
 3002780:	94000f1d 	bl	30063f4 <polling_timeout>
 3002784:	35fffee0 	cbnz	w0, 3002760 <nf_reset+0x88>
 3002788:	17fffff7 	b	3002764 <nf_reset+0x8c>

000000000300278c <nf_read_page_c_dma_2K>:
 * return:
 *	0 means success, others means failed
 */
   __attribute__((optimize("O0")))
unsigned int nf_read_page_c_dma_2K(unsigned int page_no, unsigned int dest_addr)
{
 300278c:	f81d0ffe 	str	x30, [sp,#-48]!
 3002790:	b9001fe0 	str	w0, [sp,#28]
 3002794:	b9001be1 	str	w1, [sp,#24]
	unsigned int unit_len;
	int retry_allone = 0;
 3002798:	b9002fff 	str	wzr, [sp,#44]
	int isMLC = 0;
 300279c:	b9002bff 	str	wzr, [sp,#40]
	print_hex(dest_addr);
	prints(")\n");
#endif

retry:
	if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
 30027a0:	97ffffb3 	bl	300266c <nf_is_6bit_ecc>
 30027a4:	6b1f001f 	cmp	w0, wzr
 30027a8:	54000081 	b.ne	30027b8 <nf_read_page_c_dma_2K+0x2c>
 30027ac:	97ffffb7 	bl	3002688 <nf_is_12bit_ecc>
 30027b0:	6b1f001f 	cmp	w0, wzr
 30027b4:	54000c60 	b.eq	3002940 <nf_read_page_c_dma_2K+0x1b4>
		unit_len = 512;
 30027b8:	52804000 	mov	w0, #0x200                 	// #512
 30027bc:	b90027e0 	str	w0, [sp,#36]
		//enable random access
		REG32(NF_RND_RW_EN) = 1;
 30027c0:	d2804380 	mov	x0, #0x21c                 	// #540
 30027c4:	f2b30020 	movk	x0, #0x9801, lsl #16
 30027c8:	52800021 	mov	w1, #0x1                   	// #1
 30027cc:	b9000001 	str	w1, [x0]
#else
		return ERR_NF_MLC_NOT_SUPPORT;
#endif
	}

	REG32(NF_DATA_TL0) = unit_len & 0xff;
 30027d0:	d2802000 	mov	x0, #0x100                 	// #256
 30027d4:	f2b30020 	movk	x0, #0x9801, lsl #16
 30027d8:	b94027e1 	ldr	w1, [sp,#36]
 30027dc:	12001c21 	and	w1, w1, #0xff
 30027e0:	b9000001 	str	w1, [x0]
	REG32(NF_DATA_TL1) = (unit_len >> 8) | 0x80;	// set length1, access_mode = 1
 30027e4:	d2802080 	mov	x0, #0x104                 	// #260
 30027e8:	f2b30020 	movk	x0, #0x9801, lsl #16
 30027ec:	b94027e1 	ldr	w1, [sp,#36]
 30027f0:	53087c21 	lsr	w1, w1, #8
 30027f4:	32190021 	orr	w1, w1, #0x80
 30027f8:	b9000001 	str	w1, [x0]

	// set page_len (in unit)
	REG32(NF_PAGE_LEN) = 0x800 / unit_len;
 30027fc:	d2804e00 	mov	x0, #0x270                 	// #624
 3002800:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002804:	52810002 	mov	w2, #0x800                 	// #2048
 3002808:	b94027e1 	ldr	w1, [sp,#36]
 300280c:	1ac10841 	udiv	w1, w2, w1
 3002810:	b9000001 	str	w1, [x0]

	// set PP
	REG32(NF_PP_RDY) = 0x80;	//NAND --> PP --> DRAM
 3002814:	d2804500 	mov	x0, #0x228                 	// #552
 3002818:	f2b30020 	movk	x0, #0x9801, lsl #16
 300281c:	52801001 	mov	w1, #0x80                  	// #128
 3002820:	b9000001 	str	w1, [x0]
	REG32(NF_PP_CTL0) = 0;
 3002824:	d2802200 	mov	x0, #0x110                 	// #272
 3002828:	f2b30020 	movk	x0, #0x9801, lsl #16
 300282c:	b900001f 	str	wzr, [x0]
	REG32(NF_PP_CTL1) = 0;
 3002830:	d2802580 	mov	x0, #0x12c                 	// #300
 3002834:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002838:	b900001f 	str	wzr, [x0]

	// enable blank check
	REG32(NF_BLANK_CHK) = 0x1;
 300283c:	d2800680 	mov	x0, #0x34                  	// #52
 3002840:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002844:	52800021 	mov	w1, #0x1                   	// #1
 3002848:	b9000001 	str	w1, [x0]

	// set command
	REG32(NF_CMD1) = 0x00;
 300284c:	d2800200 	mov	x0, #0x10                  	// #16
 3002850:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002854:	b900001f 	str	wzr, [x0]
	REG32(NF_CMD2) = 0x30;
 3002858:	d2804e80 	mov	x0, #0x274                 	// #628
 300285c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002860:	52800601 	mov	w1, #0x30                  	// #48
 3002864:	b9000001 	str	w1, [x0]
	REG32(NF_CMD3) = 0x70;
 3002868:	d2800500 	mov	x0, #0x28                  	// #40
 300286c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002870:	52800e01 	mov	w1, #0x70                  	// #112
 3002874:	b9000001 	str	w1, [x0]

	REG32(NF_RND_CMD1) = 0x5;
 3002878:	d2804100 	mov	x0, #0x208                 	// #520
 300287c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002880:	528000a1 	mov	w1, #0x5                   	// #5
 3002884:	b9000001 	str	w1, [x0]
	REG32(NF_RND_CMD2) = 0xe0;
 3002888:	d2804180 	mov	x0, #0x20c                 	// #524
 300288c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002890:	52801c01 	mov	w1, #0xe0                  	// #224
 3002894:	b9000001 	str	w1, [x0]

	// set address
	REG32(NF_PAGE_ADR0) =  (page_no & 0xff);
 3002898:	d2b30020 	mov	x0, #0x98010000            	// #2550202368
 300289c:	b9401fe1 	ldr	w1, [sp,#28]
 30028a0:	12001c21 	and	w1, w1, #0xff
 30028a4:	b9000001 	str	w1, [x0]
	REG32(NF_PAGE_ADR1) =  (page_no >> 8 ) & 0xff;
 30028a8:	d2800080 	mov	x0, #0x4                   	// #4
 30028ac:	f2b30020 	movk	x0, #0x9801, lsl #16
 30028b0:	b9401fe1 	ldr	w1, [sp,#28]
 30028b4:	53087c21 	lsr	w1, w1, #8
 30028b8:	12001c21 	and	w1, w1, #0xff
 30028bc:	b9000001 	str	w1, [x0]
	REG32(NF_PAGE_ADR2) = ((page_no >> 16) & 0x1f) | (0x1 << 5);	// addr_mode = 001
 30028c0:	d2800100 	mov	x0, #0x8                   	// #8
 30028c4:	f2b30020 	movk	x0, #0x9801, lsl #16
 30028c8:	b9401fe1 	ldr	w1, [sp,#28]
 30028cc:	53107c21 	lsr	w1, w1, #16
 30028d0:	12001021 	and	w1, w1, #0x1f
 30028d4:	321b0021 	orr	w1, w1, #0x20
 30028d8:	b9000001 	str	w1, [x0]
	REG32(NF_PAGE_ADR3) = ((page_no >> 21) & 0x7) << 5;
 30028dc:	d2800580 	mov	x0, #0x2c                  	// #44
 30028e0:	f2b30020 	movk	x0, #0x9801, lsl #16
 30028e4:	b9401fe1 	ldr	w1, [sp,#28]
 30028e8:	53157c21 	lsr	w1, w1, #21
 30028ec:	531b6821 	lsl	w1, w1, #5
 30028f0:	12001c21 	and	w1, w1, #0xff
 30028f4:	b9000001 	str	w1, [x0]
	REG32(NF_COL_ADR0)  = 0;
 30028f8:	d2800180 	mov	x0, #0xc                   	// #12
 30028fc:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002900:	b900001f 	str	wzr, [x0]
	REG32(NF_COL_ADR1)  = 0;
 3002904:	d2800780 	mov	x0, #0x3c                  	// #60
 3002908:	f2b30020 	movk	x0, #0x9801, lsl #16
 300290c:	b900001f 	str	wzr, [x0]
	//REG32(NF_RND_SPR_STR_COL_H)=32;				//Set spare address[15:8]

	// set ECC
#ifndef ENV_SIMULATION
	//REG32(NF_MULTI_CH_MODE) = 0x20;
	REG32(NF_MULTI_CH_MODE) = 0x0;
 3002910:	d2804f80 	mov	x0, #0x27c                 	// #636
 3002914:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002918:	b900001f 	str	wzr, [x0]
#endif
	REG32(NF_ECC_STOP) = 0x80;	// set ecc_n_stop
 300291c:	d2804c80 	mov	x0, #0x264                 	// #612
 3002920:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002924:	52801001 	mov	w1, #0x80                  	// #128
 3002928:	b9000001 	str	w1, [x0]
	if (addr_secure_ram(dest_addr)) {
 300292c:	b9401be0 	ldr	w0, [sp,#24]
 3002930:	97ffff5d 	bl	30026a4 <addr_secure_ram>
 3002934:	6b1f001f 	cmp	w0, wzr
 3002938:	54000081 	b.ne	3002948 <nf_read_page_c_dma_2K+0x1bc>
 300293c:	1400000b 	b	3002968 <nf_read_page_c_dma_2K+0x1dc>
			REG32(REG_RMZ_SEED_CTRL) = 0x10;
			REG32(REG_RMZ_CTRL) = 1;
			//REG32(NF_RND_RW_EN) = 0;
		}
#else
		return ERR_NF_MLC_NOT_SUPPORT;
 3002940:	528008a0 	mov	w0, #0x45                  	// #69
 3002944:	1400004f 	b	3002a80 <nf_read_page_c_dma_2K+0x2f4>
	REG32(NF_MULTI_CH_MODE) = 0x0;
#endif
	REG32(NF_ECC_STOP) = 0x80;	// set ecc_n_stop
	if (addr_secure_ram(dest_addr)) {
		//prints("2K SRAM spare\n");
		REG32(NF_SPR_DDR_CTL) = 0x40000000 | ((UINT32)(uintptr_t)nand_spare_dma >> 3);
 3002948:	d2806900 	mov	x0, #0x348                 	// #840
 300294c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002950:	90000041 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 3002954:	9133a021 	add	x1, x1, #0xce8
 3002958:	53037c21 	lsr	w1, w1, #3
 300295c:	32020021 	orr	w1, w1, #0x40000000
 3002960:	b9000001 	str	w1, [x0]
 3002964:	14000006 	b	300297c <nf_read_page_c_dma_2K+0x1f0>
	}
	else {
		//prints("2K DDR spare\n");
		REG32(NF_SPR_DDR_CTL) = 0x40000000 | (SPARE_DMA_ADDR >> 3);
 3002968:	d2806900 	mov	x0, #0x348                 	// #840
 300296c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002970:	529ffc01 	mov	w1, #0xffe0                	// #65504
 3002974:	72a805a1 	movk	w1, #0x402d, lsl #16
 3002978:	b9000001 	str	w1, [x0]
	}
	sync();
 300297c:	97fff664 	bl	300030c <sync>

	// set DMA
	//REG32(NF_DMA_ADR) = PHYS(dest_addr) >> 3;	// 8 bytes unit
	REG32(NF_DMA_ADR) = dest_addr >> 3;	// 8 bytes unit
 3002980:	d2806080 	mov	x0, #0x304                 	// #772
 3002984:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002988:	b9401be1 	ldr	w1, [sp,#24]
 300298c:	53037c21 	lsr	w1, w1, #3
 3002990:	b9000001 	str	w1, [x0]
	REG32(NF_DMA_LEN) = 0x800 / 0x200;	// 512B unit
 3002994:	d2806100 	mov	x0, #0x308                 	// #776
 3002998:	f2b30020 	movk	x0, #0x9801, lsl #16
 300299c:	52800081 	mov	w1, #0x4                   	// #4
 30029a0:	b9000001 	str	w1, [x0]
		REG32(NF_DMA_CTL5) =0x10;
		REG32(NF_DMA_CTL6) =0x01;
		#endif
	}
	#else
        REG32(NF_DMA_CONF) = 0x3;
 30029a4:	d2806180 	mov	x0, #0x30c                 	// #780
 30029a8:	f2b30020 	movk	x0, #0x9801, lsl #16
 30029ac:	52800061 	mov	w1, #0x3                   	// #3
 30029b0:	b9000001 	str	w1, [x0]
	#endif // NF_SWC

#ifdef ENABLE_MMU
	sys_dcache_flush_all();
 30029b4:	97fff5a1 	bl	3000038 <sys_dcache_flush_all>
#endif
	sync();
 30029b8:	97fff655 	bl	300030c <sync>

	//prints("2K auto trig \n");
	// enable Auto mode
	REG32(NF_AUTO_TRIG) = 0x82;	// read in 2K page size
 30029bc:	d2804000 	mov	x0, #0x200                 	// #512
 30029c0:	f2b30020 	movk	x0, #0x9801, lsl #16
 30029c4:	52801041 	mov	w1, #0x82                  	// #130
 30029c8:	b9000001 	str	w1, [x0]

	wait_done(NF_AUTO_TRIG, 0x80, 0x00); //Wait auto mode done
 30029cc:	52800002 	mov	w2, #0x0                   	// #0
 30029d0:	52801001 	mov	w1, #0x80                  	// #128
 30029d4:	52804000 	mov	w0, #0x200                 	// #512
 30029d8:	72b30020 	movk	w0, #0x9801, lsl #16
 30029dc:	97ffff34 	bl	30026ac <wait_done>
	//while( REG32(NF_AUTO_TRIG) & 0x80 )
		//;
	//prints("2K dma conf\n");
#ifdef ENABLE_MMU
	sys_dcache_flush_all();
 30029e0:	97fff596 	bl	3000038 <sys_dcache_flush_all>
#endif
	sync();
 30029e4:	97fff64a 	bl	300030c <sync>
	// wait DMA done
	#if 0
	wait_done(NF_DMA_CONF, 0x01, 0x00); //Wait auto mode done
	#else
	wait_done(NF_DMA_CONF, 0x01, 0x01);
 30029e8:	52800022 	mov	w2, #0x1                   	// #1
 30029ec:	52800021 	mov	w1, #0x1                   	// #1
 30029f0:	52806180 	mov	w0, #0x30c                 	// #780
 30029f4:	72b30020 	movk	w0, #0x9801, lsl #16
 30029f8:	97ffff2d 	bl	30026ac <wait_done>
	#endif
	//while( REG32(NF_DMA_CONF) & 0x1 )
		//;

	// return OK if all data bit is 1 (page is not written yet)
	if ((REG32(NF_BLANK_CHK) & 0x8)==0){
 30029fc:	d2800680 	mov	x0, #0x34                  	// #52
 3002a00:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002a04:	b9400000 	ldr	w0, [x0]
 3002a08:	121d0000 	and	w0, w0, #0x8
 3002a0c:	6b1f001f 	cmp	w0, wzr
 3002a10:	540000c1 	b.ne	3002a28 <nf_read_page_c_dma_2K+0x29c>
		#ifdef ROM_DEBUG
		prints("==>all one\n");
 3002a14:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 3002a18:	912ca000 	add	x0, x0, #0xb28
 3002a1c:	94000dad 	bl	30060d0 <prints>
		#endif
		return 0;
 3002a20:	52800000 	mov	w0, #0x0                   	// #0
 3002a24:	14000017 	b	3002a80 <nf_read_page_c_dma_2K+0x2f4>
	}
	else if (REG32(NF_ECC_STATE) & 0x8) {
 3002a28:	d2800700 	mov	x0, #0x38                  	// #56
 3002a2c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002a30:	b9400000 	ldr	w0, [x0]
 3002a34:	121d0000 	and	w0, w0, #0x8
 3002a38:	6b1f001f 	cmp	w0, wzr
 3002a3c:	54000200 	b.eq	3002a7c <nf_read_page_c_dma_2K+0x2f0>
		#ifdef ROM_DEBUG
		prints("2K HW ecc error \n");
 3002a40:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 3002a44:	912ce000 	add	x0, x0, #0xb38
 3002a48:	94000da2 	bl	30060d0 <prints>
		#endif
		if ((isMLC) && (retry_allone == 0)) {
 3002a4c:	b9402be0 	ldr	w0, [sp,#40]
 3002a50:	6b1f001f 	cmp	w0, wzr
 3002a54:	54000100 	b.eq	3002a74 <nf_read_page_c_dma_2K+0x2e8>
 3002a58:	b9402fe0 	ldr	w0, [sp,#44]
 3002a5c:	6b1f001f 	cmp	w0, wzr
 3002a60:	540000a1 	b.ne	3002a74 <nf_read_page_c_dma_2K+0x2e8>
			retry_allone++;
 3002a64:	b9402fe0 	ldr	w0, [sp,#44]
 3002a68:	11000400 	add	w0, w0, #0x1
 3002a6c:	b9002fe0 	str	w0, [sp,#44]
			goto retry;
 3002a70:	17ffff4c 	b	30027a0 <nf_read_page_c_dma_2K+0x14>
		}
		return ERR_NF_READ_ECC_FAIL;	// ECC not correctable
 3002a74:	52800860 	mov	w0, #0x43                  	// #67
 3002a78:	14000002 	b	3002a80 <nf_read_page_c_dma_2K+0x2f4>
	}
	else
		return 0;
 3002a7c:	52800000 	mov	w0, #0x0                   	// #0
}
 3002a80:	f84307fe 	ldr	x30, [sp],#48
 3002a84:	d65f03c0 	ret

0000000003002a88 <nf_get_flash_profile_c.constprop.3>:
 *	page_increment: page increment within loop
 * return:
 *	0 means success, others means failed
 *
 */
static int nf_get_flash_profile_c(unsigned int profile_page_no_limit, unsigned int page_increment)
 3002a88:	d12043ff 	sub	sp, sp, #0x810
	unsigned int checksum1, checksum2;
#ifdef NF_DEBUG
	unsigned int value;
#endif
	t_nand_profile *profile;
	unsigned char magic[8] = {0x52, 0x45, 0x41, 0x4c, 0x54, 0x45, 0x4b, 0x2e};
 3002a8c:	528008a1 	mov	w1, #0x45                  	// #69
 3002a90:	52800a47 	mov	w7, #0x52                  	// #82
 3002a94:	52800826 	mov	w6, #0x41                  	// #65
 3002a98:	52800985 	mov	w5, #0x4c                  	// #76
 3002a9c:	52800a84 	mov	w4, #0x54                  	// #84
 *	page_increment: page increment within loop
 * return:
 *	0 means success, others means failed
 *
 */
static int nf_get_flash_profile_c(unsigned int profile_page_no_limit, unsigned int page_increment)
 3002aa0:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
	unsigned int checksum1, checksum2;
#ifdef NF_DEBUG
	unsigned int value;
#endif
	t_nand_profile *profile;
	unsigned char magic[8] = {0x52, 0x45, 0x41, 0x4c, 0x54, 0x45, 0x4b, 0x2e};
 3002aa4:	52800963 	mov	w3, #0x4b                  	// #75
 3002aa8:	528005c2 	mov	w2, #0x2e                  	// #46
 *	page_increment: page increment within loop
 * return:
 *	0 means success, others means failed
 *
 */
static int nf_get_flash_profile_c(unsigned int profile_page_no_limit, unsigned int page_increment)
 3002aac:	a9015bf5 	stp	x21, x22, [sp,#16]
#endif
	t_nand_profile *profile;
	unsigned char magic[8] = {0x52, 0x45, 0x41, 0x4c, 0x54, 0x45, 0x4b, 0x2e};
	__attribute__((aligned (8))) unsigned char tmp_buf[2048];

	g_PageSize = g_BlockSize = g_PagePerBlock = g_BlockPerFlash = 0;
 3002ab0:	90000056 	adrp	x22, 300a000 <__FUNCTION__.3108+0x3d8>
 3002ab4:	9134a2c0 	add	x0, x22, #0xd28
 *	page_increment: page increment within loop
 * return:
 *	0 means success, others means failed
 *
 */
static int nf_get_flash_profile_c(unsigned int profile_page_no_limit, unsigned int page_increment)
 3002ab8:	a90263f7 	stp	x23, x24, [sp,#32]
 3002abc:	f9001bfe 	str	x30, [sp,#48]
 3002ac0:	910143f5 	add	x21, sp, #0x50
	unsigned int checksum1, checksum2;
#ifdef NF_DEBUG
	unsigned int value;
#endif
	t_nand_profile *profile;
	unsigned char magic[8] = {0x52, 0x45, 0x41, 0x4c, 0x54, 0x45, 0x4b, 0x2e};
 3002ac4:	390123e7 	strb	w7, [sp,#72]
 3002ac8:	2a1503f4 	mov	w20, w21
 3002acc:	390127e1 	strb	w1, [sp,#73]
	__attribute__((aligned (8))) unsigned char tmp_buf[2048];

	g_PageSize = g_BlockSize = g_PagePerBlock = g_BlockPerFlash = 0;

	for (page_no = 0; page_no < profile_page_no_limit; page_no += page_increment) {
 3002ad0:	52800013 	mov	w19, #0x0                   	// #0
	unsigned int checksum1, checksum2;
#ifdef NF_DEBUG
	unsigned int value;
#endif
	t_nand_profile *profile;
	unsigned char magic[8] = {0x52, 0x45, 0x41, 0x4c, 0x54, 0x45, 0x4b, 0x2e};
 3002ad4:	39012be6 	strb	w6, [sp,#74]

			profile = (t_nand_profile *)tmp_buf;

			// calculate byte checksum
			checksum1 = calculate_image_checksum((UINT32)(uintptr_t)tmp_buf, offsetof(t_nand_profile, checksum));
			copy_memory(&checksum2, profile->checksum, sizeof(checksum2));
 3002ad8:	910202b7 	add	x23, x21, #0x80
	unsigned int checksum1, checksum2;
#ifdef NF_DEBUG
	unsigned int value;
#endif
	t_nand_profile *profile;
	unsigned char magic[8] = {0x52, 0x45, 0x41, 0x4c, 0x54, 0x45, 0x4b, 0x2e};
 3002adc:	39012fe5 	strb	w5, [sp,#75]
 3002ae0:	390133e4 	strb	w4, [sp,#76]
 3002ae4:	390137e1 	strb	w1, [sp,#77]
 3002ae8:	39013be3 	strb	w3, [sp,#78]
 3002aec:	39013fe2 	strb	w2, [sp,#79]
	__attribute__((aligned (8))) unsigned char tmp_buf[2048];

	g_PageSize = g_BlockSize = g_PagePerBlock = g_BlockPerFlash = 0;
 3002af0:	b90d2adf 	str	wzr, [x22,#3368]
 3002af4:	b900041f 	str	wzr, [x0,#4]
 3002af8:	b900081f 	str	wzr, [x0,#8]
 3002afc:	b9000c1f 	str	wzr, [x0,#12]
 3002b00:	14000004 	b	3002b10 <nf_get_flash_profile_c.constprop.3+0x88>

	for (page_no = 0; page_no < profile_page_no_limit; page_no += page_increment) {
 3002b04:	11030273 	add	w19, w19, #0xc0
 3002b08:	7106027f 	cmp	w19, #0x180
 3002b0c:	54000780 	b.eq	3002bfc <nf_get_flash_profile_c.constprop.3+0x174>
		#ifdef NF_DEBUG
        	rom_debug_val("page no", page_no);
		#endif

		if (nf_read_page_c_dma_2K(page_no, (UINT32)(uintptr_t)tmp_buf)) {
 3002b10:	2a1403e1 	mov	w1, w20
 3002b14:	2a1303e0 	mov	w0, w19
 3002b18:	97ffff1d 	bl	300278c <nf_read_page_c_dma_2K>
 3002b1c:	35ffff40 	cbnz	w0, 3002b04 <nf_get_flash_profile_c.constprop.3+0x7c>
		copy_memory(&value, tmp_buf, sizeof(value));
		rom_debug_val("profile->identifier", value);
		#endif

		// check profile identifier: "REALTEK." in little-endian
		if (compare_memory(magic, tmp_buf, sizeof(magic)) == sizeof(magic)) {
 3002b20:	52800102 	mov	w2, #0x8                   	// #8
 3002b24:	aa1503e1 	mov	x1, x21
 3002b28:	910123e0 	add	x0, sp, #0x48
 3002b2c:	94001207 	bl	3007348 <compare_memory>
 3002b30:	7100201f 	cmp	w0, #0x8
 3002b34:	54fffe81 	b.ne	3002b04 <nf_get_flash_profile_c.constprop.3+0x7c>
			#endif

			profile = (t_nand_profile *)tmp_buf;

			// calculate byte checksum
			checksum1 = calculate_image_checksum((UINT32)(uintptr_t)tmp_buf, offsetof(t_nand_profile, checksum));
 3002b38:	52801001 	mov	w1, #0x80                  	// #128
 3002b3c:	2a1403e0 	mov	w0, w20
 3002b40:	940012ca 	bl	3007668 <calculate_image_checksum>
 3002b44:	2a0003f8 	mov	w24, w0
			copy_memory(&checksum2, profile->checksum, sizeof(checksum2));
 3002b48:	52800082 	mov	w2, #0x4                   	// #4
 3002b4c:	aa1703e1 	mov	x1, x23
 3002b50:	910113e0 	add	x0, sp, #0x44
 3002b54:	94001230 	bl	3007414 <copy_memory>
			rom_debug_val("calculate_image_checksum", checksum1);
			rom_debug_val("profile->checksum", checksum2);
			#endif

			// verify
			if (checksum1 == checksum2) {
 3002b58:	b94047e0 	ldr	w0, [sp,#68]
 3002b5c:	6b00031f 	cmp	w24, w0
 3002b60:	54fffd21 	b.ne	3002b04 <nf_get_flash_profile_c.constprop.3+0x7c>
				// get NAND flash info
				g_PageSize = profile->data_per_page;
 3002b64:	9134a2d4 	add	x20, x22, #0xd28
 3002b68:	b940abe1 	ldr	w1, [sp,#168]
 3002b6c:	90000053 	adrp	x19, 300a000 <__FUNCTION__.3108+0x3d8>
     				if (g_PageSize > Page_Size_Max)     faultDetect();
 3002b70:	7140043f 	cmp	w1, #0x1, lsl #12
			#endif

			// verify
			if (checksum1 == checksum2) {
				// get NAND flash info
				g_PageSize = profile->data_per_page;
 3002b74:	b9000e81 	str	w1, [x20,#12]
     				if (g_PageSize > Page_Size_Max)     faultDetect();
 3002b78:	54000908 	b.hi	3002c98 <nf_get_flash_profile_c.constprop.3+0x210>
				g_PagePerBlock = profile->page_per_block;
 3002b7c:	b940b3e0 	ldr	w0, [sp,#176]
 3002b80:	b9000680 	str	w0, [x20,#4]
				if (g_PagePerBlock > Page_per_block_Size_Max)  faultDetect();
 3002b84:	7104001f 	cmp	w0, #0x100
 3002b88:	54000888 	b.hi	3002c98 <nf_get_flash_profile_c.constprop.3+0x210>
				g_BlockSize = g_PagePerBlock * g_PageSize;
				if (g_BlockSize > Block_Size_Max)   faultDetect();
				g_BlockPerFlash = profile->block_per_die;
 3002b8c:	b940b7e2 	ldr	w2, [sp,#180]
				// get NAND flash info
				g_PageSize = profile->data_per_page;
     				if (g_PageSize > Page_Size_Max)     faultDetect();
				g_PagePerBlock = profile->page_per_block;
				if (g_PagePerBlock > Page_per_block_Size_Max)  faultDetect();
				g_BlockSize = g_PagePerBlock * g_PageSize;
 3002b90:	1b017c00 	mul	w0, w0, w1
 3002b94:	b9000a80 	str	w0, [x20,#8]
				if (g_BlockSize > Block_Size_Max)   faultDetect();
				g_BlockPerFlash = profile->block_per_die;
				if (g_BlockPerFlash > Block_PerFlash_Max)   faultDetect();
 3002b98:	7140045f 	cmp	w2, #0x1, lsl #12
     				if (g_PageSize > Page_Size_Max)     faultDetect();
				g_PagePerBlock = profile->page_per_block;
				if (g_PagePerBlock > Page_per_block_Size_Max)  faultDetect();
				g_BlockSize = g_PagePerBlock * g_PageSize;
				if (g_BlockSize > Block_Size_Max)   faultDetect();
				g_BlockPerFlash = profile->block_per_die;
 3002b9c:	b90d2a62 	str	w2, [x19,#3368]
				if (g_BlockPerFlash > Block_PerFlash_Max)   faultDetect();
 3002ba0:	540007c8 	b.hi	3002c98 <nf_get_flash_profile_c.constprop.3+0x210>
				value = nf_get_spare();
				rom_debug_val("spare", value);
				#endif

				#ifdef ROM_DEBUG
				rom_debug_val("g_BlockPerFlash", g_BlockPerFlash);
 3002ba4:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 3002ba8:	913bc000 	add	x0, x0, #0xef0
 3002bac:	f0000035 	adrp	x21, 3009000 <el3_vectors>
 3002bb0:	913c02b5 	add	x21, x21, #0xf00
 3002bb4:	94000d47 	bl	30060d0 <prints>
 3002bb8:	aa1503e0 	mov	x0, x21
 3002bbc:	94000d45 	bl	30060d0 <prints>
 3002bc0:	b94d2a60 	ldr	w0, [x19,#3368]
 3002bc4:	f0000033 	adrp	x19, 3009000 <el3_vectors>
 3002bc8:	91396273 	add	x19, x19, #0xe58
 3002bcc:	94000d73 	bl	3006198 <print_hex>
 3002bd0:	aa1303e0 	mov	x0, x19
 3002bd4:	94000d3f 	bl	30060d0 <prints>
				rom_debug_val("g_BlockSize", g_BlockSize);
 3002bd8:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 3002bdc:	913c2000 	add	x0, x0, #0xf08
 3002be0:	94000d3c 	bl	30060d0 <prints>
 3002be4:	aa1503e0 	mov	x0, x21
 3002be8:	94000d3a 	bl	30060d0 <prints>
 3002bec:	b9400a80 	ldr	w0, [x20,#8]
 3002bf0:	94000d6a 	bl	3006198 <print_hex>
 3002bf4:	aa1303e0 	mov	x0, x19
 3002bf8:	94000d36 	bl	30060d0 <prints>
			}
		}
	}

	loopsTrap();
	if ( (g_PageSize == 0) || (g_BlockSize == 0) || (g_PagePerBlock == 0) || (g_BlockPerFlash == 0) ) {
 3002bfc:	9134a2d6 	add	x22, x22, #0xd28
				break;
			}
		}
	}

	loopsTrap();
 3002c00:	940012f0 	bl	30077c0 <loopsTrap>
	if ( (g_PageSize == 0) || (g_BlockSize == 0) || (g_PagePerBlock == 0) || (g_BlockPerFlash == 0) ) {
 3002c04:	90000042 	adrp	x2, 300a000 <__FUNCTION__.3108+0x3d8>
 3002c08:	b9400ec0 	ldr	w0, [x22,#12]
 3002c0c:	34000320 	cbz	w0, 3002c70 <nf_get_flash_profile_c.constprop.3+0x1e8>
 3002c10:	b9400ac1 	ldr	w1, [x22,#8]
 3002c14:	340002e1 	cbz	w1, 3002c70 <nf_get_flash_profile_c.constprop.3+0x1e8>
 3002c18:	b94006c3 	ldr	w3, [x22,#4]
 3002c1c:	340002a3 	cbz	w3, 3002c70 <nf_get_flash_profile_c.constprop.3+0x1e8>
 3002c20:	b94d2844 	ldr	w4, [x2,#3368]
 3002c24:	34000264 	cbz	w4, 3002c70 <nf_get_flash_profile_c.constprop.3+0x1e8>
		#ifdef ROM_DEBUG
		prints("\nno profile\n");
		#endif
		return -1;
	}
	else if ((g_PageSize >Page_Size_Max)||(g_PagePerBlock >Page_per_block_Size_Max)||(g_BlockSize >Block_Size_Max)||(g_BlockPerFlash >Block_PerFlash_Max)) {
 3002c28:	7140041f 	cmp	w0, #0x1, lsl #12
		return -1;
	}
	else {
		return 0;
	}
}
 3002c2c:	f9401bfe 	ldr	x30, [sp,#48]
		#ifdef ROM_DEBUG
		prints("\nno profile\n");
		#endif
		return -1;
	}
	else if ((g_PageSize >Page_Size_Max)||(g_PagePerBlock >Page_per_block_Size_Max)||(g_BlockSize >Block_Size_Max)||(g_BlockPerFlash >Block_PerFlash_Max)) {
 3002c30:	1a9f97e5 	cset	w5, hi
 3002c34:	7104007f 	cmp	w3, #0x100
 3002c38:	1a9f97e2 	cset	w2, hi
 3002c3c:	7140049f 	cmp	w4, #0x1, lsl #12
 3002c40:	1a9f97e0 	cset	w0, hi
 3002c44:	7144003f 	cmp	w1, #0x100, lsl #12
 3002c48:	1a9f97e1 	cset	w1, hi
 3002c4c:	2a0200a2 	orr	w2, w5, w2
		return -1;
	}
	else {
		return 0;
	}
}
 3002c50:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3002c54:	a94263f7 	ldp	x23, x24, [sp,#32]
 3002c58:	2a010000 	orr	w0, w0, w1
 3002c5c:	a8c453f3 	ldp	x19, x20, [sp],#64
		#ifdef ROM_DEBUG
		prints("\nno profile\n");
		#endif
		return -1;
	}
	else if ((g_PageSize >Page_Size_Max)||(g_PagePerBlock >Page_per_block_Size_Max)||(g_BlockSize >Block_Size_Max)||(g_BlockPerFlash >Block_PerFlash_Max)) {
 3002c60:	2a000040 	orr	w0, w2, w0
 3002c64:	4b0003e0 	neg	w0, w0
		return -1;
	}
	else {
		return 0;
	}
}
 3002c68:	912043ff 	add	sp, sp, #0x810
 3002c6c:	d65f03c0 	ret
	}

	loopsTrap();
	if ( (g_PageSize == 0) || (g_BlockSize == 0) || (g_PagePerBlock == 0) || (g_BlockPerFlash == 0) ) {
		#ifdef ROM_DEBUG
		prints("\nno profile\n");
 3002c70:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 3002c74:	913c6000 	add	x0, x0, #0xf18
 3002c78:	94000d16 	bl	30060d0 <prints>
		return -1;
	}
	else {
		return 0;
	}
}
 3002c7c:	f9401bfe 	ldr	x30, [sp,#48]
	loopsTrap();
	if ( (g_PageSize == 0) || (g_BlockSize == 0) || (g_PagePerBlock == 0) || (g_BlockPerFlash == 0) ) {
		#ifdef ROM_DEBUG
		prints("\nno profile\n");
		#endif
		return -1;
 3002c80:	12800000 	mov	w0, #0xffffffff            	// #-1
		return -1;
	}
	else {
		return 0;
	}
}
 3002c84:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3002c88:	a94263f7 	ldp	x23, x24, [sp,#32]
 3002c8c:	a8c453f3 	ldp	x19, x20, [sp],#64
 3002c90:	912043ff 	add	sp, sp, #0x810
 3002c94:	d65f03c0 	ret

			// verify
			if (checksum1 == checksum2) {
				// get NAND flash info
				g_PageSize = profile->data_per_page;
     				if (g_PageSize > Page_Size_Max)     faultDetect();
 3002c98:	9400118d 	bl	30072cc <faultDetect>

0000000003002c9c <nf_identify.constprop.0>:
	}

	return 0;
}

static int nf_identify(unsigned int retry_page_size)
 3002c9c:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
	return 0;
#endif

	//Set data transfer count, data transfer count must be 0x200 at auto mode
	//Set SRAM path and access mode
	REG32(NF_DATA_TL0) = 8;
 3002ca0:	d2802001 	mov	x1, #0x100                 	// #256
 3002ca4:	f2b30021 	movk	x1, #0x9801, lsl #16
	REG32(NF_DATA_TL1) = 0x80;	// transfer mode
 3002ca8:	d2802080 	mov	x0, #0x104                 	// #260
 3002cac:	f2b30020 	movk	x0, #0x9801, lsl #16
	}

	return 0;
}

static int nf_identify(unsigned int retry_page_size)
 3002cb0:	a9015bf5 	stp	x21, x22, [sp,#16]
 3002cb4:	f90013fe 	str	x30, [sp,#32]
	//Set SRAM path and access mode
	REG32(NF_DATA_TL0) = 8;
	REG32(NF_DATA_TL1) = 0x80;	// transfer mode

	//Set PP
	REG32(NF_PP_RDY) = 0;		// NOt through PP
 3002cb8:	d2804502 	mov	x2, #0x228                 	// #552
 3002cbc:	f2b30022 	movk	x2, #0x9801, lsl #16
	return 0;
#endif

	//Set data transfer count, data transfer count must be 0x200 at auto mode
	//Set SRAM path and access mode
	REG32(NF_DATA_TL0) = 8;
 3002cc0:	52800103 	mov	w3, #0x8                   	// #8
	REG32(NF_DATA_TL1) = 0x80;	// transfer mode

	//Set PP
	REG32(NF_PP_RDY) = 0;		// NOt through PP
	REG32(NF_PP_CTL0) = 0x01;
 3002cc4:	d2802215 	mov	x21, #0x110                 	// #272
 3002cc8:	f2b30035 	movk	x21, #0x9801, lsl #16
	return 0;
#endif

	//Set data transfer count, data transfer count must be 0x200 at auto mode
	//Set SRAM path and access mode
	REG32(NF_DATA_TL0) = 8;
 3002ccc:	b9000023 	str	w3, [x1]
	REG32(NF_DATA_TL1) = 0x80;	// transfer mode
 3002cd0:	52801013 	mov	w19, #0x80                  	// #128
 3002cd4:	b9000013 	str	w19, [x0]
	REG32(NF_PP_RDY) = 0;		// NOt through PP
	REG32(NF_PP_CTL0) = 0x01;
	REG32(NF_PP_CTL1) = 0;

	//Set command
	REG32(NF_CMD1) = 0x90;
 3002cd8:	d2800200 	mov	x0, #0x10                  	// #16
 3002cdc:	f2b30020 	movk	x0, #0x9801, lsl #16
	//Set SRAM path and access mode
	REG32(NF_DATA_TL0) = 8;
	REG32(NF_DATA_TL1) = 0x80;	// transfer mode

	//Set PP
	REG32(NF_PP_RDY) = 0;		// NOt through PP
 3002ce0:	b900005f 	str	wzr, [x2]
	REG32(NF_PP_CTL0) = 0x01;
	REG32(NF_PP_CTL1) = 0;

	//Set command
	REG32(NF_CMD1) = 0x90;
	REG32(NF_ND_CTL) = 0x80;
 3002ce4:	d2800314 	mov	x20, #0x18                  	// #24
 3002ce8:	f2b30034 	movk	x20, #0x9801, lsl #16
	REG32(NF_DATA_TL0) = 8;
	REG32(NF_DATA_TL1) = 0x80;	// transfer mode

	//Set PP
	REG32(NF_PP_RDY) = 0;		// NOt through PP
	REG32(NF_PP_CTL0) = 0x01;
 3002cec:	52800022 	mov	w2, #0x1                   	// #1
 3002cf0:	b90002a2 	str	w2, [x21]
	REG32(NF_PP_CTL1) = 0;
 3002cf4:	b9002c3f 	str	wzr, [x1,#44]

	//Set command
	REG32(NF_CMD1) = 0x90;
 3002cf8:	52801201 	mov	w1, #0x90                  	// #144
 3002cfc:	b9000001 	str	w1, [x0]
	REG32(NF_ND_CTL) = 0x80;
	if (polling_timeout(NF_ND_CTL, 0x80, 0, 0x10000)) {
 3002d00:	52a00023 	mov	w3, #0x10000               	// #65536
 3002d04:	52800300 	mov	w0, #0x18                  	// #24
 3002d08:	72b30020 	movk	w0, #0x9801, lsl #16
	REG32(NF_PP_CTL0) = 0x01;
	REG32(NF_PP_CTL1) = 0;

	//Set command
	REG32(NF_CMD1) = 0x90;
	REG32(NF_ND_CTL) = 0x80;
 3002d0c:	b9000293 	str	w19, [x20]
	if (polling_timeout(NF_ND_CTL, 0x80, 0, 0x10000)) {
 3002d10:	52800002 	mov	w2, #0x0                   	// #0
 3002d14:	2a1303e1 	mov	w1, w19
 3002d18:	94000db7 	bl	30063f4 <polling_timeout>
 3002d1c:	340000c0 	cbz	w0, 3002d34 <nf_identify.constprop.0+0x98>
	}

	return 0;
}

static int nf_identify(unsigned int retry_page_size)
 3002d20:	52800820 	mov	w0, #0x41                  	// #65

	if ( (g_PageSize == 0) || (g_BlockSize == 0) || (g_PagePerBlock == 0) )
		return ERR_NF_IDENTIFY_FAIL;
	else
		return 0;
}
 3002d24:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3002d28:	f94013fe 	ldr	x30, [sp,#32]
 3002d2c:	a8c353f3 	ldp	x19, x20, [sp],#48
 3002d30:	d65f03c0 	ret
		#endif
		return ERR_NF_READ_ID_FAIL;
	}

	//Set address
	REG32(NF_PAGE_ADR0) = 0;
 3002d34:	d2b30036 	mov	x22, #0x98010000            	// #2550202368
	REG32(NF_PAGE_ADR2) = 0x7<<5;
 3002d38:	d2800102 	mov	x2, #0x8                   	// #8
 3002d3c:	f2b30022 	movk	x2, #0x9801, lsl #16
	REG32(NF_ND_CTL) = 0x81;
 3002d40:	52801021 	mov	w1, #0x81                  	// #129
		return ERR_NF_READ_ID_FAIL;
	}

	//Set address
	REG32(NF_PAGE_ADR0) = 0;
	REG32(NF_PAGE_ADR2) = 0x7<<5;
 3002d44:	52801c04 	mov	w4, #0xe0                  	// #224
		#endif
		return ERR_NF_READ_ID_FAIL;
	}

	//Set address
	REG32(NF_PAGE_ADR0) = 0;
 3002d48:	b90002df 	str	wzr, [x22]
	REG32(NF_PAGE_ADR2) = 0x7<<5;
	REG32(NF_ND_CTL) = 0x81;
	if (polling_timeout(NF_ND_CTL, 0x80, 0, 0x10000)) {
 3002d4c:	52800300 	mov	w0, #0x18                  	// #24
 3002d50:	72b30020 	movk	w0, #0x9801, lsl #16
		return ERR_NF_READ_ID_FAIL;
	}

	//Set address
	REG32(NF_PAGE_ADR0) = 0;
	REG32(NF_PAGE_ADR2) = 0x7<<5;
 3002d54:	b9000044 	str	w4, [x2]
	REG32(NF_ND_CTL) = 0x81;
	if (polling_timeout(NF_ND_CTL, 0x80, 0, 0x10000)) {
 3002d58:	52a00023 	mov	w3, #0x10000               	// #65536
	}

	//Set address
	REG32(NF_PAGE_ADR0) = 0;
	REG32(NF_PAGE_ADR2) = 0x7<<5;
	REG32(NF_ND_CTL) = 0x81;
 3002d5c:	b9000281 	str	w1, [x20]
	if (polling_timeout(NF_ND_CTL, 0x80, 0, 0x10000)) {
 3002d60:	52800002 	mov	w2, #0x0                   	// #0
 3002d64:	2a1303e1 	mov	w1, w19
 3002d68:	94000da3 	bl	30063f4 <polling_timeout>
 3002d6c:	35fffda0 	cbnz	w0, 3002d20 <nf_identify.constprop.0+0x84>
		#endif
		return ERR_NF_READ_ID_FAIL;
	}

	//Enable MultiByteRead XFER mode
	REG32(NF_ND_CTL) = 0x84;
 3002d70:	52801081 	mov	w1, #0x84                  	// #132
	if (polling_timeout(NF_ND_CTL, 0x80, 0, 0x10000)) {
 3002d74:	52800300 	mov	w0, #0x18                  	// #24
 3002d78:	72b30020 	movk	w0, #0x9801, lsl #16
		#endif
		return ERR_NF_READ_ID_FAIL;
	}

	//Enable MultiByteRead XFER mode
	REG32(NF_ND_CTL) = 0x84;
 3002d7c:	b9000281 	str	w1, [x20]
	if (polling_timeout(NF_ND_CTL, 0x80, 0, 0x10000)) {
 3002d80:	52a00023 	mov	w3, #0x10000               	// #65536
 3002d84:	52800002 	mov	w2, #0x0                   	// #0
 3002d88:	2a1303e1 	mov	w1, w19
 3002d8c:	94000d9a 	bl	30063f4 <polling_timeout>
 3002d90:	35fffc80 	cbnz	w0, 3002d20 <nf_identify.constprop.0+0x84>

	//Reset PP
	REG32(NF_PP_CTL0) = 0x2;

	//Move data to DRAM from SRAM
	REG32(NF_SRAM_CTL) = 0x30; //set 0x30 to enable bit[5] ()map_sel, due to out nand list table are implemented for little endian
 3002d94:	d2806000 	mov	x0, #0x300                 	// #768
 3002d98:	f2b30020 	movk	x0, #0x9801, lsl #16
		#endif
		return ERR_NF_READ_ID_FAIL;
	}

	//Reset PP
	REG32(NF_PP_CTL0) = 0x2;
 3002d9c:	52800041 	mov	w1, #0x2                   	// #2
 3002da0:	b90002a1 	str	w1, [x21]

	//Move data to DRAM from SRAM
	REG32(NF_SRAM_CTL) = 0x30; //set 0x30 to enable bit[5] ()map_sel, due to out nand list table are implemented for little endian
 3002da4:	52800601 	mov	w1, #0x30                  	// #48
 3002da8:	b9000001 	str	w1, [x0]
	data = REG32(NF_PAGE_ADR0);
 3002dac:	b94002d4 	ldr	w20, [x22]
	REG32(NF_SRAM_CTL) = 0x00;	//# no omitted
 3002db0:	b900001f 	str	wzr, [x0]
	/* read id */
	if ((res = nf_read_id(&flash_id)) != 0)
		return res;

	// search flash profile
	if ((res = nf_get_flash_profile_c(retry_page_size*2, retry_page_size)) != 0) {
 3002db4:	97ffff35 	bl	3002a88 <nf_get_flash_profile_c.constprop.3>
 3002db8:	35fffb60 	cbnz	w0, 3002d24 <nf_identify.constprop.0+0x88>
		return res;
	}

	if (g_PageSize >Page_Size_Max)  faultDetect();
 3002dbc:	90000056 	adrp	x22, 300a000 <__FUNCTION__.3108+0x3d8>
 3002dc0:	9134a2d3 	add	x19, x22, #0xd28
 3002dc4:	b9400e60 	ldr	w0, [x19,#12]
 3002dc8:	7140041f 	cmp	w0, #0x1, lsl #12
 3002dcc:	54000788 	b.hi	3002ebc <nf_identify.constprop.0+0x220>
	if (g_BlockSize >Block_Size_Max)   faultDetect();
 3002dd0:	b9400a60 	ldr	w0, [x19,#8]
 3002dd4:	7144001f 	cmp	w0, #0x100, lsl #12
 3002dd8:	54000728 	b.hi	3002ebc <nf_identify.constprop.0+0x220>
	if (g_PagePerBlock >Page_per_block_Size_Max)    faultDetect();
 3002ddc:	b9400660 	ldr	w0, [x19,#4]
 3002de0:	7104001f 	cmp	w0, #0x100
 3002de4:	540006c8 	b.hi	3002ebc <nf_identify.constprop.0+0x220>
	if (g_BlockPerFlash >Block_PerFlash_Max)    faultDetect();
 3002de8:	b94d2ac0 	ldr	w0, [x22,#3368]
 3002dec:	7140041f 	cmp	w0, #0x1, lsl #12
 3002df0:	54000668 	b.hi	3002ebc <nf_identify.constprop.0+0x220>

#ifdef ROM_DEBUG
	rom_debug_val("flash id", flash_id);
 3002df4:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 3002df8:	913ca000 	add	x0, x0, #0xf28
 3002dfc:	f0000035 	adrp	x21, 3009000 <el3_vectors>
 3002e00:	913c02b5 	add	x21, x21, #0xf00
 3002e04:	94000cb3 	bl	30060d0 <prints>
 3002e08:	aa1503e0 	mov	x0, x21
 3002e0c:	94000cb1 	bl	30060d0 <prints>
 3002e10:	2a1403e0 	mov	w0, w20
 3002e14:	f0000034 	adrp	x20, 3009000 <el3_vectors>
 3002e18:	91396294 	add	x20, x20, #0xe58
 3002e1c:	94000cdf 	bl	3006198 <print_hex>
 3002e20:	aa1403e0 	mov	x0, x20
 3002e24:	94000cab 	bl	30060d0 <prints>
	rom_debug_val("page size", g_PageSize);
 3002e28:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 3002e2c:	913ce000 	add	x0, x0, #0xf38
 3002e30:	94000ca8 	bl	30060d0 <prints>
 3002e34:	aa1503e0 	mov	x0, x21
 3002e38:	94000ca6 	bl	30060d0 <prints>
 3002e3c:	b9400e60 	ldr	w0, [x19,#12]
 3002e40:	94000cd6 	bl	3006198 <print_hex>
 3002e44:	aa1403e0 	mov	x0, x20
 3002e48:	94000ca2 	bl	30060d0 <prints>
	rom_debug_val("block size", g_BlockSize);
 3002e4c:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 3002e50:	913d2000 	add	x0, x0, #0xf48
 3002e54:	94000c9f 	bl	30060d0 <prints>
 3002e58:	aa1503e0 	mov	x0, x21
 3002e5c:	94000c9d 	bl	30060d0 <prints>
 3002e60:	b9400a60 	ldr	w0, [x19,#8]
 3002e64:	94000ccd 	bl	3006198 <print_hex>
 3002e68:	aa1403e0 	mov	x0, x20
 3002e6c:	94000c99 	bl	30060d0 <prints>
	rom_debug_val("page per block", g_PagePerBlock);
 3002e70:	f0000020 	adrp	x0, 3009000 <el3_vectors>
 3002e74:	913d6000 	add	x0, x0, #0xf58
 3002e78:	94000c96 	bl	30060d0 <prints>
 3002e7c:	aa1503e0 	mov	x0, x21
 3002e80:	94000c94 	bl	30060d0 <prints>
 3002e84:	b9400660 	ldr	w0, [x19,#4]
 3002e88:	94000cc4 	bl	3006198 <print_hex>
 3002e8c:	aa1403e0 	mov	x0, x20
 3002e90:	94000c90 	bl	30060d0 <prints>
	sim_debug_print(g_BlockSize);
	sim_debug_print(g_PagePerBlock);
	sim_debug_print(0xbeefffff);
#endif

	if ( (g_PageSize == 0) || (g_BlockSize == 0) || (g_PagePerBlock == 0) )
 3002e94:	b9400e61 	ldr	w1, [x19,#12]
		return ERR_NF_IDENTIFY_FAIL;
 3002e98:	52800840 	mov	w0, #0x42                  	// #66
	sim_debug_print(g_BlockSize);
	sim_debug_print(g_PagePerBlock);
	sim_debug_print(0xbeefffff);
#endif

	if ( (g_PageSize == 0) || (g_BlockSize == 0) || (g_PagePerBlock == 0) )
 3002e9c:	34fff441 	cbz	w1, 3002d24 <nf_identify.constprop.0+0x88>
 3002ea0:	b9400a61 	ldr	w1, [x19,#8]
 3002ea4:	34fff401 	cbz	w1, 3002d24 <nf_identify.constprop.0+0x88>
 3002ea8:	9134a2d6 	add	x22, x22, #0xd28
 3002eac:	b94006c1 	ldr	w1, [x22,#4]
		return ERR_NF_IDENTIFY_FAIL;
 3002eb0:	6b1f003f 	cmp	w1, wzr
 3002eb4:	1a8013e0 	csel	w0, wzr, w0, ne
 3002eb8:	17ffff9b 	b	3002d24 <nf_identify.constprop.0+0x88>
	// search flash profile
	if ((res = nf_get_flash_profile_c(retry_page_size*2, retry_page_size)) != 0) {
		return res;
	}

	if (g_PageSize >Page_Size_Max)  faultDetect();
 3002ebc:	94001104 	bl	30072cc <faultDetect>

0000000003002ec0 <nf_read_page_c_dma>:
 * return:
 *	0 means success, others means failed
 */
   __attribute__((optimize("O0")))
unsigned int nf_read_page_c_dma(unsigned int page_no, unsigned int dest_addr)
{
 3002ec0:	f81d0ffe 	str	x30, [sp,#-48]!
 3002ec4:	b9001fe0 	str	w0, [sp,#28]
 3002ec8:	b9001be1 	str	w1, [sp,#24]
	unsigned int unit_len;
	int retry_allone = 0;
 3002ecc:	b9002fff 	str	wzr, [sp,#44]
	int isMLC = 0;
 3002ed0:	b9002bff 	str	wzr, [sp,#40]
	print_hex(dest_addr);
	prints(")\n");
#endif

retry:
	if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
 3002ed4:	97fffde6 	bl	300266c <nf_is_6bit_ecc>
 3002ed8:	6b1f001f 	cmp	w0, wzr
 3002edc:	54000081 	b.ne	3002eec <nf_read_page_c_dma+0x2c>
 3002ee0:	97fffdea 	bl	3002688 <nf_is_12bit_ecc>
 3002ee4:	6b1f001f 	cmp	w0, wzr
 3002ee8:	54000300 	b.eq	3002f48 <nf_read_page_c_dma+0x88>
		unit_len = 512;
 3002eec:	52804000 	mov	w0, #0x200                 	// #512
 3002ef0:	b90027e0 	str	w0, [sp,#36]
		//enable random access
		REG32(NF_RND_RW_EN) = 1;
 3002ef4:	d2804380 	mov	x0, #0x21c                 	// #540
 3002ef8:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002efc:	52800021 	mov	w1, #0x1                   	// #1
 3002f00:	b9000001 	str	w1, [x0]
#else
		return ERR_NF_MLC_NOT_SUPPORT;
#endif
	}

	REG32(NF_DATA_TL0) = unit_len & 0xff;
 3002f04:	d2802000 	mov	x0, #0x100                 	// #256
 3002f08:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002f0c:	b94027e1 	ldr	w1, [sp,#36]
 3002f10:	12001c21 	and	w1, w1, #0xff
 3002f14:	b9000001 	str	w1, [x0]
	REG32(NF_DATA_TL1) = (unit_len >> 8) | 0x80;	// set length1, access_mode = 1
 3002f18:	d2802080 	mov	x0, #0x104                 	// #260
 3002f1c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002f20:	b94027e1 	ldr	w1, [sp,#36]
 3002f24:	53087c21 	lsr	w1, w1, #8
 3002f28:	32190021 	orr	w1, w1, #0x80
 3002f2c:	b9000001 	str	w1, [x0]

	if (g_PageSize >Page_Size_Max)
 3002f30:	90000040 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3002f34:	9134d000 	add	x0, x0, #0xd34
 3002f38:	b9400000 	ldr	w0, [x0]
 3002f3c:	7140041f 	cmp	w0, #0x1, lsl #12
 3002f40:	54000088 	b.hi	3002f50 <nf_read_page_c_dma+0x90>
 3002f44:	14000004 	b	3002f54 <nf_read_page_c_dma+0x94>

			REG32(REG_RMZ_SEED_CTRL) = 0x10;
			REG32(REG_RMZ_CTRL) = 1;
		}
#else
		return ERR_NF_MLC_NOT_SUPPORT;
 3002f48:	528008a0 	mov	w0, #0x45                  	// #69
 3002f4c:	140000aa 	b	30031f4 <nf_read_page_c_dma+0x334>

	REG32(NF_DATA_TL0) = unit_len & 0xff;
	REG32(NF_DATA_TL1) = (unit_len >> 8) | 0x80;	// set length1, access_mode = 1

	if (g_PageSize >Page_Size_Max)
		faultDetect();
 3002f50:	940010df 	bl	30072cc <faultDetect>
	// set page_len (in unit)
	REG32(NF_PAGE_LEN) = g_PageSize / unit_len;
 3002f54:	d2804e00 	mov	x0, #0x270                 	// #624
 3002f58:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002f5c:	90000041 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 3002f60:	9134d021 	add	x1, x1, #0xd34
 3002f64:	b9400022 	ldr	w2, [x1]
 3002f68:	b94027e1 	ldr	w1, [sp,#36]
 3002f6c:	1ac10841 	udiv	w1, w2, w1
 3002f70:	b9000001 	str	w1, [x0]

	// set PP
	REG32(NF_PP_RDY) = 0x80;	//NAND --> PP --> DRAM
 3002f74:	d2804500 	mov	x0, #0x228                 	// #552
 3002f78:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002f7c:	52801001 	mov	w1, #0x80                  	// #128
 3002f80:	b9000001 	str	w1, [x0]
	REG32(NF_PP_CTL0) = 0;
 3002f84:	d2802200 	mov	x0, #0x110                 	// #272
 3002f88:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002f8c:	b900001f 	str	wzr, [x0]
	REG32(NF_PP_CTL1) = 0;
 3002f90:	d2802580 	mov	x0, #0x12c                 	// #300
 3002f94:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002f98:	b900001f 	str	wzr, [x0]

	// enable blank check
	REG32(NF_BLANK_CHK) = 0x1;
 3002f9c:	d2800680 	mov	x0, #0x34                  	// #52
 3002fa0:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002fa4:	52800021 	mov	w1, #0x1                   	// #1
 3002fa8:	b9000001 	str	w1, [x0]

	// set command
	REG32(NF_CMD1) = 0x00;
 3002fac:	d2800200 	mov	x0, #0x10                  	// #16
 3002fb0:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002fb4:	b900001f 	str	wzr, [x0]
	REG32(NF_CMD2) = 0x30;
 3002fb8:	d2804e80 	mov	x0, #0x274                 	// #628
 3002fbc:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002fc0:	52800601 	mov	w1, #0x30                  	// #48
 3002fc4:	b9000001 	str	w1, [x0]
	REG32(NF_CMD3) = 0x70;
 3002fc8:	d2800500 	mov	x0, #0x28                  	// #40
 3002fcc:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002fd0:	52800e01 	mov	w1, #0x70                  	// #112
 3002fd4:	b9000001 	str	w1, [x0]

	REG32(NF_RND_CMD1) = 0x5;
 3002fd8:	d2804100 	mov	x0, #0x208                 	// #520
 3002fdc:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002fe0:	528000a1 	mov	w1, #0x5                   	// #5
 3002fe4:	b9000001 	str	w1, [x0]
	REG32(NF_RND_CMD2) = 0xe0;
 3002fe8:	d2804180 	mov	x0, #0x20c                 	// #524
 3002fec:	f2b30020 	movk	x0, #0x9801, lsl #16
 3002ff0:	52801c01 	mov	w1, #0xe0                  	// #224
 3002ff4:	b9000001 	str	w1, [x0]

	// set address
	REG32(NF_PAGE_ADR0) =  (page_no & 0xff);
 3002ff8:	d2b30020 	mov	x0, #0x98010000            	// #2550202368
 3002ffc:	b9401fe1 	ldr	w1, [sp,#28]
 3003000:	12001c21 	and	w1, w1, #0xff
 3003004:	b9000001 	str	w1, [x0]
	REG32(NF_PAGE_ADR1) =  (page_no >> 8 ) & 0xff;
 3003008:	d2800080 	mov	x0, #0x4                   	// #4
 300300c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003010:	b9401fe1 	ldr	w1, [sp,#28]
 3003014:	53087c21 	lsr	w1, w1, #8
 3003018:	12001c21 	and	w1, w1, #0xff
 300301c:	b9000001 	str	w1, [x0]
	REG32(NF_PAGE_ADR2) = ((page_no >> 16) & 0x1f) | (0x1 << 5);	// addr_mode = 001
 3003020:	d2800100 	mov	x0, #0x8                   	// #8
 3003024:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003028:	b9401fe1 	ldr	w1, [sp,#28]
 300302c:	53107c21 	lsr	w1, w1, #16
 3003030:	12001021 	and	w1, w1, #0x1f
 3003034:	321b0021 	orr	w1, w1, #0x20
 3003038:	b9000001 	str	w1, [x0]
	REG32(NF_PAGE_ADR3) = ((page_no >> 21) & 0x7) << 5;
 300303c:	d2800580 	mov	x0, #0x2c                  	// #44
 3003040:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003044:	b9401fe1 	ldr	w1, [sp,#28]
 3003048:	53157c21 	lsr	w1, w1, #21
 300304c:	531b6821 	lsl	w1, w1, #5
 3003050:	12001c21 	and	w1, w1, #0xff
 3003054:	b9000001 	str	w1, [x0]
	REG32(NF_COL_ADR0)  = 0;
 3003058:	d2800180 	mov	x0, #0xc                   	// #12
 300305c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003060:	b900001f 	str	wzr, [x0]
	REG32(NF_COL_ADR1)  = 0;
 3003064:	d2800780 	mov	x0, #0x3c                  	// #60
 3003068:	f2b30020 	movk	x0, #0x9801, lsl #16
 300306c:	b900001f 	str	wzr, [x0]
	//WRITE_REG_INT32U(NF_RND_SPR_STR_COL_H_reg, pagesize*sector_size);				//Set spare address[15:8]

	// set ECC
#ifndef ENV_SIMULATION
	//REG32(NF_MULTI_CH_MODE) = 0x20;
	REG32(NF_MULTI_CH_MODE) = 0x0;
 3003070:	d2804f80 	mov	x0, #0x27c                 	// #636
 3003074:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003078:	b900001f 	str	wzr, [x0]
#endif
	REG32(NF_ECC_STOP) = 0x80;	// set ecc_n_stop
 300307c:	d2804c80 	mov	x0, #0x264                 	// #612
 3003080:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003084:	52801001 	mov	w1, #0x80                  	// #128
 3003088:	b9000001 	str	w1, [x0]
	if (addr_secure_ram(dest_addr)) {
 300308c:	b9401be0 	ldr	w0, [sp,#24]
 3003090:	97fffd85 	bl	30026a4 <addr_secure_ram>
 3003094:	6b1f001f 	cmp	w0, wzr
 3003098:	54000120 	b.eq	30030bc <nf_read_page_c_dma+0x1fc>
		//prints("SRAM spare\n");
		REG32(NF_SPR_DDR_CTL) = 0x40000000 | ((UINT32)(uintptr_t)nand_spare_dma >> 3);
 300309c:	d2806900 	mov	x0, #0x348                 	// #840
 30030a0:	f2b30020 	movk	x0, #0x9801, lsl #16
 30030a4:	f0000021 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 30030a8:	9133a021 	add	x1, x1, #0xce8
 30030ac:	53037c21 	lsr	w1, w1, #3
 30030b0:	32020021 	orr	w1, w1, #0x40000000
 30030b4:	b9000001 	str	w1, [x0]
 30030b8:	14000006 	b	30030d0 <nf_read_page_c_dma+0x210>
	}
	else {
		//prints("DDR spare\n");
		REG32(NF_SPR_DDR_CTL) = 0x40000000 | (SPARE_DMA_ADDR >> 3);
 30030bc:	d2806900 	mov	x0, #0x348                 	// #840
 30030c0:	f2b30020 	movk	x0, #0x9801, lsl #16
 30030c4:	529ffc01 	mov	w1, #0xffe0                	// #65504
 30030c8:	72a805a1 	movk	w1, #0x402d, lsl #16
 30030cc:	b9000001 	str	w1, [x0]
	}

	// set DMA
	//REG32(NF_DMA_ADR) = PHYS(dest_addr) >> 3;	// 8 bytes unit
	REG32(NF_DMA_ADR) = dest_addr >> 3;	// 8 bytes unit
 30030d0:	d2806080 	mov	x0, #0x304                 	// #772
 30030d4:	f2b30020 	movk	x0, #0x9801, lsl #16
 30030d8:	b9401be1 	ldr	w1, [sp,#24]
 30030dc:	53037c21 	lsr	w1, w1, #3
 30030e0:	b9000001 	str	w1, [x0]
	if (g_PageSize > Page_Size_Max)
 30030e4:	f0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 30030e8:	9134d000 	add	x0, x0, #0xd34
 30030ec:	b9400000 	ldr	w0, [x0]
 30030f0:	7140041f 	cmp	w0, #0x1, lsl #12
 30030f4:	54000049 	b.ls	30030fc <nf_read_page_c_dma+0x23c>
		faultDetect();
 30030f8:	94001075 	bl	30072cc <faultDetect>
	REG32(NF_DMA_LEN) = g_PageSize / 0x200;	// 512B unit
 30030fc:	d2806100 	mov	x0, #0x308                 	// #776
 3003100:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003104:	f0000021 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 3003108:	9134d021 	add	x1, x1, #0xd34
 300310c:	b9400021 	ldr	w1, [x1]
 3003110:	53097c21 	lsr	w1, w1, #9
 3003114:	b9000001 	str	w1, [x0]
		REG32(NF_DMA_CTL5) =0x10;
		REG32(NF_DMA_CTL6) =0x01;
		#endif
	}
	#else
	REG32(NF_DMA_CONF) = 0x3;
 3003118:	d2806180 	mov	x0, #0x30c                 	// #780
 300311c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003120:	52800061 	mov	w1, #0x3                   	// #3
 3003124:	b9000001 	str	w1, [x0]
	#endif // NF_SWC

#ifdef ENABLE_MMU
	sys_dcache_flush_all();
 3003128:	97fff3c4 	bl	3000038 <sys_dcache_flush_all>
#endif
	sync();
 300312c:	97fff478 	bl	300030c <sync>

	// enable Auto mode
	REG32(NF_AUTO_TRIG) = 0x82;	// read in 2K page size
 3003130:	d2804000 	mov	x0, #0x200                 	// #512
 3003134:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003138:	52801041 	mov	w1, #0x82                  	// #130
 300313c:	b9000001 	str	w1, [x0]
	wait_done(NF_AUTO_TRIG, 0x80, 0x00); //Wait auto mode done
 3003140:	52800002 	mov	w2, #0x0                   	// #0
 3003144:	52801001 	mov	w1, #0x80                  	// #128
 3003148:	52804000 	mov	w0, #0x200                 	// #512
 300314c:	72b30020 	movk	w0, #0x9801, lsl #16
 3003150:	97fffd57 	bl	30026ac <wait_done>
	//while(REG32(NF_AUTO_TRIG) & 0x80)
	//	;
#ifdef ENABLE_MMU
	sys_dcache_flush_all();
 3003154:	97fff3b9 	bl	3000038 <sys_dcache_flush_all>
#endif
	sync();
 3003158:	97fff46d 	bl	300030c <sync>
	#if 0
	wait_done(NF_DMA_CONF, 0x01, 0x00); //Wait auto mode done
	//while( REG32(NF_DMA_CONF) & 0x1 )
	//	;
	#else
	wait_done(NF_DMA_CONF, 0x01, 0x01);
 300315c:	52800022 	mov	w2, #0x1                   	// #1
 3003160:	52800021 	mov	w1, #0x1                   	// #1
 3003164:	52806180 	mov	w0, #0x30c                 	// #780
 3003168:	72b30020 	movk	w0, #0x9801, lsl #16
 300316c:	97fffd50 	bl	30026ac <wait_done>
	//while((REG32(NF_DMA_CONF) & 0x1) == 0x0)
	//	;
	#endif

	// return OK if all data bit is 1 (page is not written yet)
	if ((REG32(NF_BLANK_CHK) & 0x8)==0){
 3003170:	d2800680 	mov	x0, #0x34                  	// #52
 3003174:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003178:	b9400000 	ldr	w0, [x0]
 300317c:	121d0000 	and	w0, w0, #0x8
 3003180:	6b1f001f 	cmp	w0, wzr
 3003184:	540000c1 	b.ne	300319c <nf_read_page_c_dma+0x2dc>
		#ifdef ROM_DEBUG
		prints("==>all one\n");
 3003188:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 300318c:	912ca000 	add	x0, x0, #0xb28
 3003190:	94000bd0 	bl	30060d0 <prints>
		#endif
		return 0;
 3003194:	52800000 	mov	w0, #0x0                   	// #0
 3003198:	14000017 	b	30031f4 <nf_read_page_c_dma+0x334>
	}
	else if (REG32(NF_ECC_STATE) & 0x8) {
 300319c:	d2800700 	mov	x0, #0x38                  	// #56
 30031a0:	f2b30020 	movk	x0, #0x9801, lsl #16
 30031a4:	b9400000 	ldr	w0, [x0]
 30031a8:	121d0000 	and	w0, w0, #0x8
 30031ac:	6b1f001f 	cmp	w0, wzr
 30031b0:	54000200 	b.eq	30031f0 <nf_read_page_c_dma+0x330>
		#ifdef ROM_DEBUG
		prints("HW ecc error \n");
 30031b4:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 30031b8:	912d4000 	add	x0, x0, #0xb50
 30031bc:	94000bc5 	bl	30060d0 <prints>
		#endif
		if ((isMLC) && (retry_allone == 0)){
 30031c0:	b9402be0 	ldr	w0, [sp,#40]
 30031c4:	6b1f001f 	cmp	w0, wzr
 30031c8:	54000100 	b.eq	30031e8 <nf_read_page_c_dma+0x328>
 30031cc:	b9402fe0 	ldr	w0, [sp,#44]
 30031d0:	6b1f001f 	cmp	w0, wzr
 30031d4:	540000a1 	b.ne	30031e8 <nf_read_page_c_dma+0x328>
			retry_allone++;
 30031d8:	b9402fe0 	ldr	w0, [sp,#44]
 30031dc:	11000400 	add	w0, w0, #0x1
 30031e0:	b9002fe0 	str	w0, [sp,#44]
			goto retry;
 30031e4:	17ffff3c 	b	3002ed4 <nf_read_page_c_dma+0x14>
		}
		return ERR_NF_READ_ECC_FAIL;	// ECC not correctable
 30031e8:	52800860 	mov	w0, #0x43                  	// #67
 30031ec:	14000002 	b	30031f4 <nf_read_page_c_dma+0x334>
	}
	else
		return 0;
 30031f0:	52800000 	mov	w0, #0x0                   	// #0
}
 30031f4:	f84307fe 	ldr	x30, [sp],#48
 30031f8:	d65f03c0 	ret

00000000030031fc <nand_initial>:
	return nand_initial();
}
#endif

int nand_initial(void)
{
 30031fc:	a9ba53f3 	stp	x19, x20, [sp,#-96]!
static int retry_ecc_bit(nandecctype_t *nand_ecc_bit)
{
	int i = 0;
	int res = 0;
	unsigned int retry_page_size;
	nandecctype_t nand_retry_ecc[NAND_ECC_TOTAL_TYPE] = {NAND_ECC_TYPE_6BIT, NAND_ECC_TYPE_12BIT};
 3003200:	52800020 	mov	w0, #0x1                   	// #1
 3003204:	d2800014 	mov	x20, #0x0                   	// #0
	return nand_initial();
}
#endif

int nand_initial(void)
{
 3003208:	a9015bf5 	stp	x21, x22, [sp,#16]
 300320c:	a90263f7 	stp	x23, x24, [sp,#32]
 3003210:	a9036bf9 	stp	x25, x26, [sp,#48]
 3003214:	a9047bfb 	stp	x27, x30, [sp,#64]
		prints("\n=== retry ecc 0x");
		print_hex(nand_retry_ecc[i]);
		prints(" ===\n");

		// set ECC.
		REG32(NF_ECC_SEL) = nand_retry_ecc[i];
 3003218:	d2802515 	mov	x21, #0x128                 	// #296
 300321c:	f2b30035 	movk	x21, #0x9801, lsl #16
		//set random access mode
		if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
			REG32(NF_RND_RW_EN) = 1;
 3003220:	d2804397 	mov	x23, #0x21c                 	// #540
 3003224:	f2b30037 	movk	x23, #0x9801, lsl #16
{
	//REG32(NF_T1) = 0x2;
	//REG32(NF_T2) = 0x2;
	//REG32(NF_T3) = 0x2;
	//REG32(NF_DELAY_CNT) = 0x9;
	REG32(NF_SPR_DDR_CTL) &= ~0x40000000;	// disable spare to DDR
 3003228:	d2806916 	mov	x22, #0x348                 	// #840
 300322c:	f2b30036 	movk	x22, #0x9801, lsl #16
	if (nf_is_random_mode()) {
		#ifdef NF_DEBUG
		prints("random access mode\n");
		#endif

		REG32(NF_RND_CMD1) = 0x5;
 3003230:	d280411b 	mov	x27, #0x208                 	// #520
 3003234:	f2b3003b 	movk	x27, #0x9801, lsl #16
		REG32(NF_RND_CMD2) = 0xe0;
 3003238:	d280419a 	mov	x26, #0x20c                 	// #524
 300323c:	f2b3003a 	movk	x26, #0x9801, lsl #16
static int retry_ecc_bit(nandecctype_t *nand_ecc_bit)
{
	int i = 0;
	int res = 0;
	unsigned int retry_page_size;
	nandecctype_t nand_retry_ecc[NAND_ECC_TOTAL_TYPE] = {NAND_ECC_TYPE_6BIT, NAND_ECC_TYPE_12BIT};
 3003240:	b9005bff 	str	wzr, [sp,#88]
 3003244:	52800013 	mov	w19, #0x0                   	// #0
 3003248:	b9005fe0 	str	w0, [sp,#92]
 300324c:	d0000039 	adrp	x25, 3009000 <el3_vectors>
 3003250:	d0000038 	adrp	x24, 3009000 <el3_vectors>

	for(i = 0; i < NAND_ECC_TOTAL_TYPE; i++) {
		prints("\n=== retry ecc 0x");
 3003254:	913da320 	add	x0, x25, #0xf68
 3003258:	94000b9e 	bl	30060d0 <prints>
		print_hex(nand_retry_ecc[i]);
 300325c:	2a1303e0 	mov	w0, w19
 3003260:	94000bce 	bl	3006198 <print_hex>
		prints(" ===\n");
 3003264:	913e0300 	add	x0, x24, #0xf80
 3003268:	94000b9a 	bl	30060d0 <prints>

		// set ECC.
		REG32(NF_ECC_SEL) = nand_retry_ecc[i];
 300326c:	b90002b3 	str	w19, [x21]
	prints(", ");
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
 3003270:	d2804205 	mov	x5, #0x210                 	// #528
 3003274:	f2b30025 	movk	x5, #0x9801, lsl #16
	}
}

static unsigned int nf_is_6bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
 3003278:	b94002a0 	ldr	w0, [x21]
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
 300327c:	d2804283 	mov	x3, #0x214                 	// #532
 3003280:	f2b30023 	movk	x3, #0x9801, lsl #16
	}
}

static unsigned int nf_is_6bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
 3003284:	12000c00 	and	w0, w0, #0xf
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
	REG32(NF_RND_SPR_STR_COL_L) = spare_col & 0xff;
 3003288:	d2804302 	mov	x2, #0x218                 	// #536
 300328c:	f2b30022 	movk	x2, #0x9801, lsl #16

		// set ECC.
		REG32(NF_ECC_SEL) = nand_retry_ecc[i];
		//set random access mode
		if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
			REG32(NF_RND_RW_EN) = 1;
 3003290:	52800021 	mov	w1, #0x1                   	// #1
	if (nf_is_random_mode()) {
		#ifdef NF_DEBUG
		prints("random access mode\n");
		#endif

		REG32(NF_RND_CMD1) = 0x5;
 3003294:	528000a7 	mov	w7, #0x5                   	// #5
		REG32(NF_RND_CMD2) = 0xe0;
 3003298:	52801c06 	mov	w6, #0xe0                  	// #224
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
 300329c:	52800104 	mov	w4, #0x8                   	// #8
		prints(" ===\n");

		// set ECC.
		REG32(NF_ECC_SEL) = nand_retry_ecc[i];
		//set random access mode
		if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
 30032a0:	340000a0 	cbz	w0, 30032b4 <nand_initial+0xb8>
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
}

static unsigned int nf_is_12bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 1);
 30032a4:	b94002a0 	ldr	w0, [x21]
 30032a8:	12000c00 	and	w0, w0, #0xf
		prints(" ===\n");

		// set ECC.
		REG32(NF_ECC_SEL) = nand_retry_ecc[i];
		//set random access mode
		if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
 30032ac:	6b01001f 	cmp	w0, w1
 30032b0:	54000dc1 	b.ne	3003468 <nand_initial+0x26c>
			REG32(NF_RND_RW_EN) = 1;
 30032b4:	b90002e1 	str	w1, [x23]
{
	//REG32(NF_T1) = 0x2;
	//REG32(NF_T2) = 0x2;
	//REG32(NF_T3) = 0x2;
	//REG32(NF_DELAY_CNT) = 0x9;
	REG32(NF_SPR_DDR_CTL) &= ~0x40000000;	// disable spare to DDR
 30032b8:	b94002c0 	ldr	w0, [x22]
 30032bc:	12017800 	and	w0, w0, #0xbfffffff
 30032c0:	b90002c0 	str	w0, [x22]
	return 0;
}

static char nf_is_random_mode(void)
{
	return REG32(NF_RND_RW_EN) & 0x1;
 30032c4:	b94002e0 	ldr	w0, [x23]
	//REG32(NF_T3) = 0x2;
	//REG32(NF_DELAY_CNT) = 0x9;
	REG32(NF_SPR_DDR_CTL) &= ~0x40000000;	// disable spare to DDR

	/* set random access mode registers if enabled */
	if (nf_is_random_mode()) {
 30032c8:	360000c0 	tbz	w0, #0, 30032e0 <nand_initial+0xe4>
		#ifdef NF_DEBUG
		prints("random access mode\n");
		#endif

		REG32(NF_RND_CMD1) = 0x5;
 30032cc:	b9000367 	str	w7, [x27]
		REG32(NF_RND_CMD2) = 0xe0;
 30032d0:	b9000346 	str	w6, [x26]
	prints(", ");
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
 30032d4:	b90000bf 	str	wzr, [x5]
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
 30032d8:	b9000064 	str	w4, [x3]
	REG32(NF_RND_SPR_STR_COL_L) = spare_col & 0xff;
 30032dc:	b900005f 	str	wzr, [x2]
			#endif
		}

		/* reset & init flash */
		nf_init();
		if ((res = nf_reset()) != 0) {
 30032e0:	97fffcfe 	bl	30026d8 <nf_reset>
 30032e4:	34000260 	cbz	w0, 3003330 <nand_initial+0x134>
			#ifdef ROM_DEBUG
			prints("nf_reset(0, ");
 30032e8:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 30032ec:	913e2000 	add	x0, x0, #0xf88

		/* identify flash */
		if ((res = nf_identify(retry_page_size)) != 0) {
			// identify fail, current ecc type is wrong
			#ifdef ROM_DEBUG
			prints("nf_identify(0, ");
 30032f0:	94000b78 	bl	30060d0 <prints>
 30032f4:	91001294 	add	x20, x20, #0x4
			print_hex(nand_retry_ecc[i]);
 30032f8:	2a1303e0 	mov	w0, w19
 30032fc:	94000ba7 	bl	3006198 <print_hex>
			prints(") ECC error\n");
 3003300:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 3003304:	913e6000 	add	x0, x0, #0xf98
 3003308:	94000b72 	bl	30060d0 <prints>
	int i = 0;
	int res = 0;
	unsigned int retry_page_size;
	nandecctype_t nand_retry_ecc[NAND_ECC_TOTAL_TYPE] = {NAND_ECC_TYPE_6BIT, NAND_ECC_TYPE_12BIT};

	for(i = 0; i < NAND_ECC_TOTAL_TYPE; i++) {
 300330c:	f100229f 	cmp	x20, #0x8
 3003310:	54000a61 	b.ne	300345c <nand_initial+0x260>
			*nand_ecc_bit = nand_retry_ecc[i];
			return 0;
		}
	}

	return ERR_NF_ECC_IDENTIFY_FAIL;
 3003314:	52800880 	mov	w0, #0x44                  	// #68
		return res;

	/* set col address according to page size */
	nf_set_random_col_addr(0, g_PageSize);
	return 0;
}
 3003318:	a9415bf5 	ldp	x21, x22, [sp,#16]
 300331c:	a94263f7 	ldp	x23, x24, [sp,#32]
 3003320:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3003324:	a9447bfb 	ldp	x27, x30, [sp,#64]
 3003328:	a8c653f3 	ldp	x19, x20, [sp],#96
 300332c:	d65f03c0 	ret
			//return res;
			continue;
		}

		/* identify flash */
		if ((res = nf_identify(retry_page_size)) != 0) {
 3003330:	97fffe5b 	bl	3002c9c <nf_identify.constprop.0>
 3003334:	34000080 	cbz	w0, 3003344 <nand_initial+0x148>
			// identify fail, current ecc type is wrong
			#ifdef ROM_DEBUG
			prints("nf_identify(0, ");
 3003338:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 300333c:	913ea000 	add	x0, x0, #0xfa8
 3003340:	17ffffec 	b	30032f0 <nand_initial+0xf4>
			continue;
		}
		else {
			// identify success with correct ecc type
			#ifdef ROM_DEBUG
			prints("nf_identify(0, ");
 3003344:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 3003348:	913ea000 	add	x0, x0, #0xfa8
 300334c:	94000b61 	bl	30060d0 <prints>
			print_hex(nand_retry_ecc[i]);
 3003350:	2a1303e0 	mov	w0, w19
 3003354:	94000b91 	bl	3006198 <print_hex>
			prints(") get ECC!!!\n");
 3003358:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 300335c:	913ee000 	add	x0, x0, #0xfb8
 3003360:	94000b5c 	bl	30060d0 <prints>

	if ((res = retry_ecc_bit(&nand_ecc_bit)) != 0)
		return res;

	// set ECC.
	REG32(NF_ECC_SEL) = nand_ecc_bit;
 3003364:	d2802500 	mov	x0, #0x128                 	// #296
 3003368:	f2b30020 	movk	x0, #0x9801, lsl #16
 300336c:	b9000013 	str	w19, [x0]
	}
}

static unsigned int nf_is_6bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
 3003370:	b9400001 	ldr	w1, [x0]
 3003374:	12000c21 	and	w1, w1, #0xf

	// set ECC.
	REG32(NF_ECC_SEL) = nand_ecc_bit;

	//set random access mode
	if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
 3003378:	350005c1 	cbnz	w1, 3003430 <nand_initial+0x234>
		REG32(NF_RND_RW_EN) = 1;
 300337c:	d2804381 	mov	x1, #0x21c                 	// #540
 3003380:	f2b30021 	movk	x1, #0x9801, lsl #16
{
	//REG32(NF_T1) = 0x2;
	//REG32(NF_T2) = 0x2;
	//REG32(NF_T3) = 0x2;
	//REG32(NF_DELAY_CNT) = 0x9;
	REG32(NF_SPR_DDR_CTL) &= ~0x40000000;	// disable spare to DDR
 3003384:	d2806902 	mov	x2, #0x348                 	// #840
 3003388:	f2b30022 	movk	x2, #0x9801, lsl #16
	// set ECC.
	REG32(NF_ECC_SEL) = nand_ecc_bit;

	//set random access mode
	if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
		REG32(NF_RND_RW_EN) = 1;
 300338c:	52800020 	mov	w0, #0x1                   	// #1
 3003390:	b9000020 	str	w0, [x1]
{
	//REG32(NF_T1) = 0x2;
	//REG32(NF_T2) = 0x2;
	//REG32(NF_T3) = 0x2;
	//REG32(NF_DELAY_CNT) = 0x9;
	REG32(NF_SPR_DDR_CTL) &= ~0x40000000;	// disable spare to DDR
 3003394:	b9400040 	ldr	w0, [x2]
 3003398:	12017800 	and	w0, w0, #0xbfffffff
 300339c:	b9000040 	str	w0, [x2]
	return 0;
}

static char nf_is_random_mode(void)
{
	return REG32(NF_RND_RW_EN) & 0x1;
 30033a0:	b9400020 	ldr	w0, [x1]
	//REG32(NF_T3) = 0x2;
	//REG32(NF_DELAY_CNT) = 0x9;
	REG32(NF_SPR_DDR_CTL) &= ~0x40000000;	// disable spare to DDR

	/* set random access mode registers if enabled */
	if (nf_is_random_mode()) {
 30033a4:	36000220 	tbz	w0, #0, 30033e8 <nand_initial+0x1ec>
		#ifdef NF_DEBUG
		prints("random access mode\n");
		#endif

		REG32(NF_RND_CMD1) = 0x5;
 30033a8:	d2804100 	mov	x0, #0x208                 	// #520
 30033ac:	f2b30020 	movk	x0, #0x9801, lsl #16
		REG32(NF_RND_CMD2) = 0xe0;
 30033b0:	d2804182 	mov	x2, #0x20c                 	// #524
 30033b4:	f2b30022 	movk	x2, #0x9801, lsl #16
	prints(", ");
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
 30033b8:	d2804203 	mov	x3, #0x210                 	// #528
 30033bc:	f2b30023 	movk	x3, #0x9801, lsl #16
	if (nf_is_random_mode()) {
		#ifdef NF_DEBUG
		prints("random access mode\n");
		#endif

		REG32(NF_RND_CMD1) = 0x5;
 30033c0:	528000a5 	mov	w5, #0x5                   	// #5
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
 30033c4:	d2804281 	mov	x1, #0x214                 	// #532
 30033c8:	f2b30021 	movk	x1, #0x9801, lsl #16
	if (nf_is_random_mode()) {
		#ifdef NF_DEBUG
		prints("random access mode\n");
		#endif

		REG32(NF_RND_CMD1) = 0x5;
 30033cc:	b9000005 	str	w5, [x0]
		REG32(NF_RND_CMD2) = 0xe0;
 30033d0:	52801c04 	mov	w4, #0xe0                  	// #224
 30033d4:	b9000044 	str	w4, [x2]
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
 30033d8:	52800102 	mov	w2, #0x8                   	// #8
	prints(", ");
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
 30033dc:	b900007f 	str	wzr, [x3]
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
 30033e0:	b9000022 	str	w2, [x1]
	REG32(NF_RND_SPR_STR_COL_L) = spare_col & 0xff;
 30033e4:	b900101f 	str	wzr, [x0,#16]
#endif
	}

	/* reset & init flash */
	nf_init();
	if ((res = nf_reset()) != 0)
 30033e8:	97fffcbc 	bl	30026d8 <nf_reset>
 30033ec:	35fff960 	cbnz	w0, 3003318 <nand_initial+0x11c>
		return res;

	/* identify flash */
	if ((res = nf_identify(retry_page_size)) != 0)
 30033f0:	97fffe2b 	bl	3002c9c <nf_identify.constprop.0>
 30033f4:	35fff920 	cbnz	w0, 3003318 <nand_initial+0x11c>
	prints(", ");
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
 30033f8:	d2804205 	mov	x5, #0x210                 	// #528
 30033fc:	f2b30025 	movk	x5, #0x9801, lsl #16
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
 3003400:	d2804284 	mov	x4, #0x214                 	// #532
 3003404:	f2b30024 	movk	x4, #0x9801, lsl #16
	/* identify flash */
	if ((res = nf_identify(retry_page_size)) != 0)
		return res;

	/* set col address according to page size */
	nf_set_random_col_addr(0, g_PageSize);
 3003408:	f0000021 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 300340c:	b94d3421 	ldr	w1, [x1,#3380]
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
	REG32(NF_RND_SPR_STR_COL_L) = spare_col & 0xff;
 3003410:	d2804302 	mov	x2, #0x218                 	// #536
 3003414:	f2b30022 	movk	x2, #0x9801, lsl #16
	prints(", ");
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
 3003418:	b90000bf 	str	wzr, [x5]
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
	REG32(NF_RND_SPR_STR_COL_L) = spare_col & 0xff;
 300341c:	12001c23 	and	w3, w1, #0xff
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
 3003420:	53087c21 	lsr	w1, w1, #8
 3003424:	b9000081 	str	w1, [x4]
	REG32(NF_RND_SPR_STR_COL_L) = spare_col & 0xff;
 3003428:	b9000043 	str	w3, [x2]
	if ((res = nf_identify(retry_page_size)) != 0)
		return res;

	/* set col address according to page size */
	nf_set_random_col_addr(0, g_PageSize);
	return 0;
 300342c:	17ffffbb 	b	3003318 <nand_initial+0x11c>
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
}

static unsigned int nf_is_12bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 1);
 3003430:	b9400001 	ldr	w1, [x0]
	else {
#if MLC_MODE
		REG32(NF_RND_RW_EN) = 0;
		retry_page_size = 256 * 3;   //MLC, 256 pages per block, 3th block
#else
		return  ERR_NF_MLC_NOT_SUPPORT;
 3003434:	528008a0 	mov	w0, #0x45                  	// #69
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
}

static unsigned int nf_is_12bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 1);
 3003438:	12000c21 	and	w1, w1, #0xf

	// set ECC.
	REG32(NF_ECC_SEL) = nand_ecc_bit;

	//set random access mode
	if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
 300343c:	7100043f 	cmp	w1, #0x1
 3003440:	54fff9e0 	b.eq	300337c <nand_initial+0x180>
		return res;

	/* set col address according to page size */
	nf_set_random_col_addr(0, g_PageSize);
	return 0;
}
 3003444:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3003448:	a94263f7 	ldp	x23, x24, [sp,#32]
 300344c:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3003450:	a9447bfb 	ldp	x27, x30, [sp,#64]
 3003454:	a8c653f3 	ldp	x19, x20, [sp],#96
 3003458:	d65f03c0 	ret
 300345c:	910163e0 	add	x0, sp, #0x58
 3003460:	b8606a93 	ldr	w19, [x20,x0]
 3003464:	17ffff7c 	b	3003254 <nand_initial+0x58>
		else {
			#if MLC_MODE
			REG32(NF_RND_RW_EN) = 0;
	                retry_page_size = 256 * 3;   //MLC, 256 pages per block, 3th block
			#else
			return  ERR_NF_MLC_NOT_SUPPORT;
 3003468:	528008a0 	mov	w0, #0x45                  	// #69
 300346c:	17ffffab 	b	3003318 <nand_initial+0x11c>

0000000003003470 <nf_read>:
	return res;
}
#endif // 0

int nf_read(UINT32 start_page, UINT8 *buf, UINT32 size, UINT32 *spare)
{
 3003470:	a9ba53f3 	stp	x19, x20, [sp,#-96]!
 3003474:	2a0003f3 	mov	w19, w0
 3003478:	aa0303f4 	mov	x20, x3
 300347c:	a90473fb 	stp	x27, x28, [sp,#64]
 3003480:	a9015bf5 	stp	x21, x22, [sp,#16]
 3003484:	a90263f7 	stp	x23, x24, [sp,#32]
 3003488:	a9036bf9 	stp	x25, x26, [sp,#48]
 300348c:	f9002bfe 	str	x30, [sp,#80]
 3003490:	aa0103fc 	mov	x28, x1
	print_hex((uintptr_t)spare);
	prints(")\n");
#endif

	// validate arguments (size should be aligned to page size boundary)
	if ( (buf == NULL)
 3003494:	b4000721 	cbz	x1, 3003578 <nf_read+0x108>
		|| (start_page > g_PagePerBlock * g_BlockPerFlash)
 3003498:	f0000037 	adrp	x23, 300a000 <__FUNCTION__.3108+0x3d8>
 300349c:	9134a2e1 	add	x1, x23, #0xd28
 30034a0:	b94d2ae0 	ldr	w0, [x23,#3368]
 30034a4:	b9400423 	ldr	w3, [x1,#4]
 30034a8:	1b037c00 	mul	w0, w0, w3
		//|| (size & (g_PageSize - 1))
		|| (size == 0) )
 30034ac:	6b13001f 	cmp	w0, w19
 30034b0:	54000643 	b.cc	3003578 <nf_read+0x108>
 30034b4:	34000622 	cbz	w2, 3003578 <nf_read+0x108>
		return (-1);

	// do not allow write past end of flash
	stop_page = start_page + size / g_PageSize;
 30034b8:	b9400c23 	ldr	w3, [x1,#12]
 30034bc:	1ac30841 	udiv	w1, w2, w3
 30034c0:	0b130035 	add	w21, w1, w19
	if (size % g_PageSize)
 30034c4:	1b038821 	msub	w1, w1, w3, w2
		stop_page++;
 30034c8:	6b1f003f 	cmp	w1, wzr
 30034cc:	1a9506b5 	cinc	w21, w21, ne

	if (stop_page > g_PagePerBlock * g_BlockPerFlash)
 30034d0:	6b0002bf 	cmp	w21, w0
 30034d4:	54000528 	b.hi	3003578 <nf_read+0x108>
		return (-1);

	while (start_page < stop_page) {
 30034d8:	6b1302bf 	cmp	w21, w19
 30034dc:	54000349 	b.ls	3003544 <nf_read+0xd4>
}
#endif

static int nf_spare_ddr_enabled(void)
{
	return ((REG32(NF_SPR_DDR_CTL) >> 30) & 0x1);
 30034e0:	d2806916 	mov	x22, #0x348                 	// #840
 30034e4:	f2b30036 	movk	x22, #0x9801, lsl #16
		data = (REG32(NF_SPR_DDR_CTL) & 0x1fffffff) << 3;	// physical address
		data = REG32(data + offset);
	}
	else {
		// configure spare area data in PP (16 byte: 6 byte for user-defined, 10 byte for ECC)
		REG32(NF_PP_RDY) = 0; // disable read_by_pp
 30034e8:	d280451b 	mov	x27, #0x228                 	// #552
 30034ec:	f2b3003b 	movk	x27, #0x9801, lsl #16
		REG32(NF_SRAM_CTL) = 0x30 | mapping; // enable direct access to PP
 30034f0:	d2806018 	mov	x24, #0x300                 	// #768
 30034f4:	f2b30038 	movk	x24, #0x9801, lsl #16
 30034f8:	5280069a 	mov	w26, #0x34                  	// #52

		data = REG32(NF_PAGE_ADR0 + offset);
 30034fc:	d2b30039 	mov	x25, #0x98010000            	// #2550202368

	if (stop_page > g_PagePerBlock * g_BlockPerFlash)
		return (-1);

	while (start_page < stop_page) {
		res = nf_read_page_c_dma(start_page, (UINT32)(uintptr_t)buf);
 3003500:	2a1c03e1 	mov	w1, w28
 3003504:	2a1303e0 	mov	w0, w19
 3003508:	97fffe6e 	bl	3002ec0 <nf_read_page_c_dma>
		if (res) {
 300350c:	35000360 	cbnz	w0, 3003578 <nf_read+0x108>
			#ifdef NF_DEBUG
			rom_debug_val("nf_read_page_c_dma result", res);
			#endif
			return (-1);
		}
		if (spare) {
 3003510:	b40000f4 	cbz	x20, 300352c <nf_read+0xbc>
}
#endif

static int nf_spare_ddr_enabled(void)
{
	return ((REG32(NF_SPR_DDR_CTL) >> 30) & 0x1);
 3003514:	b94002c0 	ldr	w0, [x22]
 */
static unsigned int nf_get_sram(const int mapping, const unsigned int offset)
{
	unsigned int data;

	if (nf_spare_ddr_enabled()) {
 3003518:	36f00260 	tbz	w0, #30, 3003564 <nf_read+0xf4>
		data = (REG32(NF_SPR_DDR_CTL) & 0x1fffffff) << 3;	// physical address
 300351c:	b94002c0 	ldr	w0, [x22]
		data = REG32(data + offset);
 3003520:	d37d7000 	ubfiz	x0, x0, #3, #29
 3003524:	b9400000 	ldr	w0, [x0]
			rom_debug_val("nf_read_page_c_dma result", res);
			#endif
			return (-1);
		}
		if (spare) {
			*spare = nf_get_spare();
 3003528:	b9000280 	str	w0, [x20]
		}

		buf += g_PageSize;
 300352c:	9134a2e0 	add	x0, x23, #0xd28
		start_page++;
 3003530:	11000673 	add	w19, w19, #0x1
		stop_page++;

	if (stop_page > g_PagePerBlock * g_BlockPerFlash)
		return (-1);

	while (start_page < stop_page) {
 3003534:	6b1302bf 	cmp	w21, w19
		}
		if (spare) {
			*spare = nf_get_spare();
		}

		buf += g_PageSize;
 3003538:	b9400c00 	ldr	w0, [x0,#12]
 300353c:	8b00039c 	add	x28, x28, x0
		stop_page++;

	if (stop_page > g_PagePerBlock * g_BlockPerFlash)
		return (-1);

	while (start_page < stop_page) {
 3003540:	54fffe08 	b.hi	3003500 <nf_read+0x90>
	if (start_page < stop_page) // loop no completed
	{
		faultDetect();
	}

	return 0;
 3003544:	52800000 	mov	w0, #0x0                   	// #0
}
 3003548:	f9402bfe 	ldr	x30, [sp,#80]
 300354c:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3003550:	a94263f7 	ldp	x23, x24, [sp,#32]
 3003554:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3003558:	a94473fb 	ldp	x27, x28, [sp,#64]
 300355c:	a8c653f3 	ldp	x19, x20, [sp],#96
 3003560:	d65f03c0 	ret
		data = (REG32(NF_SPR_DDR_CTL) & 0x1fffffff) << 3;	// physical address
		data = REG32(data + offset);
	}
	else {
		// configure spare area data in PP (16 byte: 6 byte for user-defined, 10 byte for ECC)
		REG32(NF_PP_RDY) = 0; // disable read_by_pp
 3003564:	b900037f 	str	wzr, [x27]
		REG32(NF_SRAM_CTL) = 0x30 | mapping; // enable direct access to PP
 3003568:	b900031a 	str	w26, [x24]

		data = REG32(NF_PAGE_ADR0 + offset);
 300356c:	b9400320 	ldr	w0, [x25]

		REG32(NF_SRAM_CTL) = 0x0; // disable direct access
 3003570:	b900031f 	str	wzr, [x24]
 3003574:	17ffffed 	b	3003528 <nf_read+0xb8>
	// validate arguments (size should be aligned to page size boundary)
	if ( (buf == NULL)
		|| (start_page > g_PagePerBlock * g_BlockPerFlash)
		//|| (size & (g_PageSize - 1))
		|| (size == 0) )
		return (-1);
 3003578:	12800000 	mov	w0, #0xffffffff            	// #-1
	{
		faultDetect();
	}

	return 0;
}
 300357c:	f9402bfe 	ldr	x30, [sp,#80]
 3003580:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3003584:	a94263f7 	ldp	x23, x24, [sp,#32]
 3003588:	a9436bf9 	ldp	x25, x26, [sp,#48]
 300358c:	a94473fb 	ldp	x27, x28, [sp,#64]
 3003590:	a8c653f3 	ldp	x19, x20, [sp],#96
 3003594:	d65f03c0 	ret

0000000003003598 <nf_write>:

int nf_write(UINT32 start_page, UINT8 *buf, UINT32 size, UINT32 spare, UINT8 doWriteSkip)
{
 3003598:	a9b953f3 	stp	x19, x20, [sp,#-112]!
 300359c:	a90473fb 	stp	x27, x28, [sp,#64]
 30035a0:	a9015bf5 	stp	x21, x22, [sp,#16]
 30035a4:	a90263f7 	stp	x23, x24, [sp,#32]
 30035a8:	a9036bf9 	stp	x25, x26, [sp,#48]
 30035ac:	f9002bfe 	str	x30, [sp,#80]
 30035b0:	aa0103fb 	mov	x27, x1
 30035b4:	2a0003fc 	mov	w28, w0
 30035b8:	2a0303f8 	mov	w24, w3
 30035bc:	53001c95 	uxtb	w21, w4
	print_hex(doWriteSkip);
	prints(")\n");
#endif

	// validate arguments (size should be aligned to page size boundary)
	if ( (buf == NULL)
 30035c0:	b4002381 	cbz	x1, 3003a30 <nf_write+0x498>
		|| (start_page > g_PagePerBlock * g_BlockPerFlash)
 30035c4:	f0000039 	adrp	x25, 300a000 <__FUNCTION__.3108+0x3d8>
 30035c8:	9134a321 	add	x1, x25, #0xd28
 30035cc:	b94d2b20 	ldr	w0, [x25,#3368]
 30035d0:	b9400423 	ldr	w3, [x1,#4]
 30035d4:	1b037c00 	mul	w0, w0, w3
		//|| (size & (g_PageSize - 1))
		|| (size == 0) )
 30035d8:	6b1c001f 	cmp	w0, w28
 30035dc:	540022a3 	b.cc	3003a30 <nf_write+0x498>
 30035e0:	34002282 	cbz	w2, 3003a30 <nf_write+0x498>
		return (-1);

	// do not allow write past end of flash
	stop_page = start_page + size / g_PageSize;
 30035e4:	b9400c23 	ldr	w3, [x1,#12]
 30035e8:	1ac30841 	udiv	w1, w2, w3
 30035ec:	0b1c0033 	add	w19, w1, w28
	if (size % g_PageSize)
 30035f0:	1b038821 	msub	w1, w1, w3, w2
		stop_page++;
 30035f4:	6b1f003f 	cmp	w1, wzr
 30035f8:	1a930673 	cinc	w19, w19, ne

	if (stop_page > g_PagePerBlock * g_BlockPerFlash)
 30035fc:	6b00027f 	cmp	w19, w0
 3003600:	54002188 	b.hi	3003a30 <nf_write+0x498>
		return (-1);

	while (start_page < stop_page) {
 3003604:	6b1c027f 	cmp	w19, w28
 3003608:	54000449 	b.ls	3003690 <nf_write+0xf8>
{
	UINT8 i, count, increment;
	unsigned int unit_len;

	// we always use dma for writing.
	REG32(NF_SPR_DDR_CTL) = 0x40000000 | (((UINT32)(uintptr_t)nand_spare_dma+offset) >> 3);
 300360c:	f0000021 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 3003610:	9133a021 	add	x1, x1, #0xce8
 3003614:	b9006fe1 	str	w1, [sp,#108]
 3003618:	53037c21 	lsr	w1, w1, #3
 300361c:	d2806917 	mov	x23, #0x348                 	// #840
 3003620:	f2b30037 	movk	x23, #0x9801, lsl #16
	}
}

static unsigned int nf_is_6bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
 3003624:	d2802514 	mov	x20, #0x128                 	// #296
 3003628:	f2b30034 	movk	x20, #0x9801, lsl #16
	return 0;
}

static char nf_is_random_mode(void)
{
	return REG32(NF_RND_RW_EN) & 0x1;
 300362c:	d280439a 	mov	x26, #0x21c                 	// #540
 3003630:	f2b3003a 	movk	x26, #0x9801, lsl #16
{
	UINT8 i, count, increment;
	unsigned int unit_len;

	// we always use dma for writing.
	REG32(NF_SPR_DDR_CTL) = 0x40000000 | (((UINT32)(uintptr_t)nand_spare_dma+offset) >> 3);
 3003634:	52800020 	mov	w0, #0x1                   	// #1
 3003638:	32020036 	orr	w22, w1, #0x40000000
	while (start_page < stop_page) {
		//prints("nf_write: start_page=0x");
		//print_hex(*start_page);
		//prints("\n");

		if (doWriteSkip) {
 300363c:	340003b5 	cbz	w21, 30036b0 <nf_write+0x118>
			//if there are all 0xff in a whole page, skip this page
			for(i = 0; i < g_PageSize; i++) {
 3003640:	9134a320 	add	x0, x25, #0xd28
 3003644:	b9400c03 	ldr	w3, [x0,#12]
 3003648:	340001a3 	cbz	w3, 300367c <nf_write+0xe4>
				if(buf[i] != 0xff){
 300364c:	39400360 	ldrb	w0, [x27]
 3003650:	7103fc1f 	cmp	w0, #0xff
 3003654:	540003a1 	b.ne	30036c8 <nf_write+0x130>
 3003658:	91000761 	add	x1, x27, #0x1
 300365c:	52800000 	mov	w0, #0x0                   	// #0
 3003660:	14000004 	b	3003670 <nf_write+0xd8>
 3003664:	38401422 	ldrb	w2, [x1],#1
 3003668:	7103fc5f 	cmp	w2, #0xff
 300366c:	540002a1 	b.ne	30036c0 <nf_write+0x128>
		//print_hex(*start_page);
		//prints("\n");

		if (doWriteSkip) {
			//if there are all 0xff in a whole page, skip this page
			for(i = 0; i < g_PageSize; i++) {
 3003670:	11000400 	add	w0, w0, #0x1
 3003674:	6b03001f 	cmp	w0, w3
 3003678:	54ffff61 	b.ne	3003664 <nf_write+0xcc>
				if(buf[i] != 0xff){
					isNeedWrite = 1;
					break;
				}
			}
			if (i == g_PageSize) {
 300367c:	52800000 	mov	w0, #0x0                   	// #0
			res = nf_write_phys_page(start_page, (UINT32)(uintptr_t)buf);
			if (res)
				return (-1);
		}
		buf += g_PageSize;
		start_page = start_page + 1;
 3003680:	1100079c 	add	w28, w28, #0x1
			nf_set_spare(spare, 0);
			res = nf_write_phys_page(start_page, (UINT32)(uintptr_t)buf);
			if (res)
				return (-1);
		}
		buf += g_PageSize;
 3003684:	8b23437b 	add	x27, x27, w3, uxtw
		stop_page++;

	if (stop_page > g_PagePerBlock * g_BlockPerFlash)
		return (-1);

	while (start_page < stop_page) {
 3003688:	6b1c027f 	cmp	w19, w28
 300368c:	54fffd88 	b.hi	300363c <nf_write+0xa4>
	{
		faultDetect();
	}

	return 0;
}
 3003690:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3003694:	a94263f7 	ldp	x23, x24, [sp,#32]
 3003698:	a9436bf9 	ldp	x25, x26, [sp,#48]
 300369c:	a94473fb 	ldp	x27, x28, [sp,#64]
 30036a0:	f9402bfe 	ldr	x30, [sp,#80]
	if (start_page < stop_page) // loop no completed
	{
		faultDetect();
	}

	return 0;
 30036a4:	52800000 	mov	w0, #0x0                   	// #0
}
 30036a8:	a8c753f3 	ldp	x19, x20, [sp],#112
 30036ac:	d65f03c0 	ret
				//prints("s\n");
				isNeedWrite = 0;
			}
		}

		if (isNeedWrite) {
 30036b0:	350000c0 	cbnz	w0, 30036c8 <nf_write+0x130>
 30036b4:	9134a321 	add	x1, x25, #0xd28
 30036b8:	b9400c23 	ldr	w3, [x1,#12]
 30036bc:	17fffff1 	b	3003680 <nf_write+0xe8>
				if(buf[i] != 0xff){
					isNeedWrite = 1;
					break;
				}
			}
			if (i == g_PageSize) {
 30036c0:	6b00007f 	cmp	w3, w0
 30036c4:	54fffdc0 	b.eq	300367c <nf_write+0xe4>
{
	UINT8 i, count, increment;
	unsigned int unit_len;

	// we always use dma for writing.
	REG32(NF_SPR_DDR_CTL) = 0x40000000 | (((UINT32)(uintptr_t)nand_spare_dma+offset) >> 3);
 30036c8:	b90002f6 	str	w22, [x23]
	}
}

static unsigned int nf_is_6bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
 30036cc:	b9400280 	ldr	w0, [x20]
 30036d0:	12000c00 	and	w0, w0, #0xf
	unsigned int unit_len;

	// we always use dma for writing.
	REG32(NF_SPR_DDR_CTL) = 0x40000000 | (((UINT32)(uintptr_t)nand_spare_dma+offset) >> 3);

	if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
 30036d4:	34000040 	cbz	w0, 30036dc <nf_write+0x144>
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
}

static unsigned int nf_is_12bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 1);
 30036d8:	b9400280 	ldr	w0, [x20]
}
#endif

static int nf_spare_ddr_enabled(void)
{
	return ((REG32(NF_SPR_DDR_CTL) >> 30) & 0x1);
 30036dc:	b94002e0 	ldr	w0, [x23]
	else {
		unit_len = 1024;
	}
	#endif

	if (nf_spare_ddr_enabled()) {
 30036e0:	36f01540 	tbz	w0, #30, 3003988 <nf_write+0x3f0>
	}
}

static unsigned int nf_is_6bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
 30036e4:	b9400280 	ldr	w0, [x20]
 30036e8:	12000c00 	and	w0, w0, #0xf

		//REG32(NF_SPR_DDR_CTL) = 0x40000000 | (PHYS(SPARE_DMA_ADDR+offset) >> 3);
		//rtd_outl(SPARE_DMA_ADDR + offset, spare);
		//rtd_outl(SPARE_DMA_ADDR, spare);

		if (nf_is_6bit_ecc() || nf_is_12bit_ecc())
 30036ec:	34000040 	cbz	w0, 30036f4 <nf_write+0x15c>
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
}

static unsigned int nf_is_12bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 1);
 30036f0:	b9400280 	ldr	w0, [x20]
			#if MLC_MODE
			increment = 4;	// 4B for software
			#endif
		}
		// spare/data: 6B/512B based
		count = g_PageSize / unit_len;
 30036f4:	9134a320 	add	x0, x25, #0xd28
 30036f8:	b9400c00 	ldr	w0, [x0,#12]
 30036fc:	d3494000 	ubfx	x0, x0, #9, #8
		for (i = 0; i < count; i++) {
 3003700:	34000140 	cbz	w0, 3003728 <nf_write+0x190>
 3003704:	51000401 	sub	w1, w0, #0x1
 3003708:	b9406fe0 	ldr	w0, [sp,#108]
 300370c:	11002002 	add	w2, w0, #0x8
 3003710:	0b210c42 	add	w2, w2, w1, uxtb #3
			// (only 6 byte is for software)
			REG32((UINT32)(uintptr_t)nand_spare_dma + i*increment) = spare;
 3003714:	2a0003e1 	mov	w1, w0
 3003718:	11002000 	add	w0, w0, #0x8
			increment = 4;	// 4B for software
			#endif
		}
		// spare/data: 6B/512B based
		count = g_PageSize / unit_len;
		for (i = 0; i < count; i++) {
 300371c:	6b02001f 	cmp	w0, w2
			// (only 6 byte is for software)
			REG32((UINT32)(uintptr_t)nand_spare_dma + i*increment) = spare;
 3003720:	b9000038 	str	w24, [x1]
			increment = 4;	// 4B for software
			#endif
		}
		// spare/data: 6B/512B based
		count = g_PageSize / unit_len;
		for (i = 0; i < count; i++) {
 3003724:	54ffff81 	b.ne	3003714 <nf_write+0x17c>
	}
}

static unsigned int nf_is_6bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
 3003728:	b9400280 	ldr	w0, [x20]
		}

		if (isNeedWrite) {
			//prints("w\n");
			nf_set_spare(spare, 0);
			res = nf_write_phys_page(start_page, (UINT32)(uintptr_t)buf);
 300372c:	2a1b03e1 	mov	w1, w27
	}
}

static unsigned int nf_is_6bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
 3003730:	12000c00 	and	w0, w0, #0xf
{
	UINT32 temp;
	UINT32 data_unit;

	// determine read unit size
	if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
 3003734:	340000a0 	cbz	w0, 3003748 <nf_write+0x1b0>
    return ((REG32(NF_ECC_SEL) & 0xF) == 0);
}

static unsigned int nf_is_12bit_ecc(void)
{
    return ((REG32(NF_ECC_SEL) & 0xF) == 1);
 3003738:	b9400280 	ldr	w0, [x20]
 300373c:	12000c00 	and	w0, w0, #0xf
{
	UINT32 temp;
	UINT32 data_unit;

	// determine read unit size
	if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
 3003740:	7100041f 	cmp	w0, #0x1
 3003744:	54001761 	b.ne	3003a30 <nf_write+0x498>
	return 0;
}

static char nf_is_random_mode(void)
{
	return REG32(NF_RND_RW_EN) & 0x1;
 3003748:	b9400340 	ldr	w0, [x26]

	// determine read unit size
	if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
		data_unit = 512;
        //prints("nf_is_SLC\n");
		if (nf_is_random_mode()) {
 300374c:	360001e0 	tbz	w0, #0, 3003788 <nf_write+0x1f0>
			if (force_2k == 1) {
 3003750:	9134a320 	add	x0, x25, #0xd28
 3003754:	b9401002 	ldr	w2, [x0,#16]
 3003758:	7100045f 	cmp	w2, #0x1
 300375c:	54001400 	b.eq	30039dc <nf_write+0x444>
				REG32(NF_RND_CMD1) = 0x85;
				nf_set_random_col_addr(0, 0x800);
			}
			else {
				REG32(NF_RND_CMD1) = 0x85;
 3003760:	d2804102 	mov	x2, #0x208                 	// #520
 3003764:	f2b30022 	movk	x2, #0x9801, lsl #16
				nf_set_random_col_addr(0, g_PageSize);
 3003768:	b9400c00 	ldr	w0, [x0,#12]
			if (force_2k == 1) {
				REG32(NF_RND_CMD1) = 0x85;
				nf_set_random_col_addr(0, 0x800);
			}
			else {
				REG32(NF_RND_CMD1) = 0x85;
 300376c:	528010a3 	mov	w3, #0x85                  	// #133
 3003770:	b9000043 	str	w3, [x2]
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
 3003774:	53087c03 	lsr	w3, w0, #8
	prints(", ");
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
 3003778:	b900085f 	str	wzr, [x2,#8]
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
	REG32(NF_RND_SPR_STR_COL_L) = spare_col & 0xff;
 300377c:	12001c00 	and	w0, w0, #0xff
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
 3003780:	b9000c43 	str	w3, [x2,#12]
	REG32(NF_RND_SPR_STR_COL_L) = spare_col & 0xff;
 3003784:	b9001040 	str	w0, [x2,#16]
			else {
				REG32(NF_RND_CMD1) = 0x85;
				nf_set_random_col_addr(0, g_PageSize);
			}
		}
		REG32(NF_BLANK_CHK) = 0x1;		// enable blank check
 3003788:	d2800684 	mov	x4, #0x34                  	// #52
 300378c:	f2b30024 	movk	x4, #0x9801, lsl #16
	//Set SRAM path and access mode
	REG32(NF_DATA_TL0) = data_unit & 0xff;
	REG32(NF_DATA_TL1) = (data_unit >> 8) & 0x3f;	// transfer mode

	//Set page length at auto mode
	if (force_2k == 1) {
 3003790:	9134a320 	add	x0, x25, #0xd28
			else {
				REG32(NF_RND_CMD1) = 0x85;
				nf_set_random_col_addr(0, g_PageSize);
			}
		}
		REG32(NF_BLANK_CHK) = 0x1;		// enable blank check
 3003794:	52800027 	mov	w7, #0x1                   	// #1
	// Set chip select
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;

	//Set data transfer count, data transfer count must be 0x200 at auto mode
	//Set SRAM path and access mode
	REG32(NF_DATA_TL0) = data_unit & 0xff;
 3003798:	d2802003 	mov	x3, #0x100                 	// #256
 300379c:	f2b30023 	movk	x3, #0x9801, lsl #16
			else {
				REG32(NF_RND_CMD1) = 0x85;
				nf_set_random_col_addr(0, g_PageSize);
			}
		}
		REG32(NF_BLANK_CHK) = 0x1;		// enable blank check
 30037a0:	b9000087 	str	w7, [x4]
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;

	//Set data transfer count, data transfer count must be 0x200 at auto mode
	//Set SRAM path and access mode
	REG32(NF_DATA_TL0) = data_unit & 0xff;
	REG32(NF_DATA_TL1) = (data_unit >> 8) & 0x3f;	// transfer mode
 30037a4:	d2802082 	mov	x2, #0x104                 	// #260
 30037a8:	f2b30022 	movk	x2, #0x9801, lsl #16

	//Set page length at auto mode
	if (force_2k == 1) {
 30037ac:	b9401007 	ldr	w7, [x0,#16]
		return  -1;
#endif
	}

	// Set chip select
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;
 30037b0:	528003c8 	mov	w8, #0x1e                  	// #30
 30037b4:	b900fc88 	str	w8, [x4,#252]

	//Set data transfer count, data transfer count must be 0x200 at auto mode
	//Set SRAM path and access mode
	REG32(NF_DATA_TL0) = data_unit & 0xff;
 30037b8:	b900007f 	str	wzr, [x3]
	REG32(NF_DATA_TL1) = (data_unit >> 8) & 0x3f;	// transfer mode

	//Set page length at auto mode
	if (force_2k == 1) {
 30037bc:	710004ff 	cmp	w7, #0x1
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;

	//Set data transfer count, data transfer count must be 0x200 at auto mode
	//Set SRAM path and access mode
	REG32(NF_DATA_TL0) = data_unit & 0xff;
	REG32(NF_DATA_TL1) = (data_unit >> 8) & 0x3f;	// transfer mode
 30037c0:	52800043 	mov	w3, #0x2                   	// #2
 30037c4:	b9000043 	str	w3, [x2]

	//Set page length at auto mode
	if (force_2k == 1) {
 30037c8:	54001000 	b.eq	30039c8 <nf_write+0x430>
		REG32(NF_PAGE_LEN) = 0x800 / data_unit;	//Set page length (in unit)
	}
	else {
		REG32(NF_PAGE_LEN) = g_PageSize / data_unit;	//Set page length (in unit)
 30037cc:	d2804e02 	mov	x2, #0x270                 	// #624
 30037d0:	f2b30022 	movk	x2, #0x9801, lsl #16
 30037d4:	b9400c00 	ldr	w0, [x0,#12]
 30037d8:	53097c00 	lsr	w0, w0, #9
 30037dc:	b9000040 	str	w0, [x2]
	}

	//Set PP
	REG32(NF_PP_RDY) = 0x0;	//NAND --> PP --> DRAM
 30037e0:	d2804500 	mov	x0, #0x228                 	// #552
 30037e4:	f2b30020 	movk	x0, #0x9801, lsl #16
	REG32(NF_PP_CTL0) = 0x0;
 30037e8:	d2802207 	mov	x7, #0x110                 	// #272
 30037ec:	f2b30027 	movk	x7, #0x9801, lsl #16
	REG32(NF_PP_CTL1) = 0;
 30037f0:	d2802589 	mov	x9, #0x12c                 	// #300
 30037f4:	f2b30029 	movk	x9, #0x9801, lsl #16
	else {
		REG32(NF_PAGE_LEN) = g_PageSize / data_unit;	//Set page length (in unit)
	}

	//Set PP
	REG32(NF_PP_RDY) = 0x0;	//NAND --> PP --> DRAM
 30037f8:	b900001f 	str	wzr, [x0]
	REG32(NF_PP_CTL0) = 0x0;
	REG32(NF_PP_CTL1) = 0;

	//Set table sram
	REG32(NF_LOW_PWR) = 0;
 30037fc:	d2802783 	mov	x3, #0x13c                 	// #316
 3003800:	f2b30023 	movk	x3, #0x9801, lsl #16
		REG32(NF_PAGE_LEN) = g_PageSize / data_unit;	//Set page length (in unit)
	}

	//Set PP
	REG32(NF_PP_RDY) = 0x0;	//NAND --> PP --> DRAM
	REG32(NF_PP_CTL0) = 0x0;
 3003804:	b90000ff 	str	wzr, [x7]

	//Set table sram
	REG32(NF_LOW_PWR) = 0;

	//Set command
	REG32(NF_CMD1) = 0x80;
 3003808:	d2800208 	mov	x8, #0x10                  	// #16
 300380c:	f2b30028 	movk	x8, #0x9801, lsl #16
	}

	//Set PP
	REG32(NF_PP_RDY) = 0x0;	//NAND --> PP --> DRAM
	REG32(NF_PP_CTL0) = 0x0;
	REG32(NF_PP_CTL1) = 0;
 3003810:	b900013f 	str	wzr, [x9]
	//Set table sram
	REG32(NF_LOW_PWR) = 0;

	//Set command
	REG32(NF_CMD1) = 0x80;
	REG32(NF_CMD2) = 0x10;
 3003814:	d2804e82 	mov	x2, #0x274                 	// #628
 3003818:	f2b30022 	movk	x2, #0x9801, lsl #16
	REG32(NF_PP_RDY) = 0x0;	//NAND --> PP --> DRAM
	REG32(NF_PP_CTL0) = 0x0;
	REG32(NF_PP_CTL1) = 0;

	//Set table sram
	REG32(NF_LOW_PWR) = 0;
 300381c:	b900007f 	str	wzr, [x3]

	//Set command
	REG32(NF_CMD1) = 0x80;
	REG32(NF_CMD2) = 0x10;
	REG32(NF_CMD3) = 0x70;
 3003820:	d2800500 	mov	x0, #0x28                  	// #40
 3003824:	f2b30020 	movk	x0, #0x9801, lsl #16

	//Set table sram
	REG32(NF_LOW_PWR) = 0;

	//Set command
	REG32(NF_CMD1) = 0x80;
 3003828:	52801007 	mov	w7, #0x80                  	// #128
	REG32(NF_CMD2) = 0x10;
	REG32(NF_CMD3) = 0x70;

	//Set address
	REG32(NF_PAGE_ADR0) =  page_no & 0xff;
 300382c:	d2b30029 	mov	x9, #0x98010000            	// #2550202368

	//Set table sram
	REG32(NF_LOW_PWR) = 0;

	//Set command
	REG32(NF_CMD1) = 0x80;
 3003830:	b9000107 	str	w7, [x8]
	REG32(NF_CMD2) = 0x10;
 3003834:	5280020a 	mov	w10, #0x10                  	// #16
	REG32(NF_CMD3) = 0x70;

	//Set address
	REG32(NF_PAGE_ADR0) =  page_no & 0xff;
	REG32(NF_PAGE_ADR1) =  page_no >> 8 ;
 3003838:	d2800088 	mov	x8, #0x4                   	// #4
 300383c:	f2b30028 	movk	x8, #0x9801, lsl #16
	//Set table sram
	REG32(NF_LOW_PWR) = 0;

	//Set command
	REG32(NF_CMD1) = 0x80;
	REG32(NF_CMD2) = 0x10;
 3003840:	b900004a 	str	w10, [x2]
	REG32(NF_CMD3) = 0x70;

	//Set address
	REG32(NF_PAGE_ADR0) =  page_no & 0xff;
	REG32(NF_PAGE_ADR1) =  page_no >> 8 ;
	REG32(NF_PAGE_ADR2) = ((page_no >>16 ) & 0x1f) | (0x1 << 5);
 3003844:	d280010b 	mov	x11, #0x8                   	// #8
 3003848:	f2b3002b 	movk	x11, #0x9801, lsl #16
	REG32(NF_LOW_PWR) = 0;

	//Set command
	REG32(NF_CMD1) = 0x80;
	REG32(NF_CMD2) = 0x10;
	REG32(NF_CMD3) = 0x70;
 300384c:	52800e02 	mov	w2, #0x70                  	// #112
 3003850:	b9000002 	str	w2, [x0]

	//Set address
	REG32(NF_PAGE_ADR0) =  page_no & 0xff;
	REG32(NF_PAGE_ADR1) =  page_no >> 8 ;
	REG32(NF_PAGE_ADR2) = ((page_no >>16 ) & 0x1f) | (0x1 << 5);
	REG32(NF_PAGE_ADR3) = ((page_no >> 21) & 0x7) << 5;
 3003854:	d280058a 	mov	x10, #0x2c                  	// #44
 3003858:	f2b3002a 	movk	x10, #0x9801, lsl #16
	REG32(NF_CMD1) = 0x80;
	REG32(NF_CMD2) = 0x10;
	REG32(NF_CMD3) = 0x70;

	//Set address
	REG32(NF_PAGE_ADR0) =  page_no & 0xff;
 300385c:	12001f82 	and	w2, w28, #0xff
 3003860:	b9000122 	str	w2, [x9]
	REG32(NF_PAGE_ADR1) =  page_no >> 8 ;
 3003864:	53087f83 	lsr	w3, w28, #8
	REG32(NF_PAGE_ADR2) = ((page_no >>16 ) & 0x1f) | (0x1 << 5);
 3003868:	d3505382 	ubfx	x2, x28, #16, #5
	REG32(NF_CMD2) = 0x10;
	REG32(NF_CMD3) = 0x70;

	//Set address
	REG32(NF_PAGE_ADR0) =  page_no & 0xff;
	REG32(NF_PAGE_ADR1) =  page_no >> 8 ;
 300386c:	b9000103 	str	w3, [x8]
	REG32(NF_PAGE_ADR2) = ((page_no >>16 ) & 0x1f) | (0x1 << 5);
 3003870:	321b0042 	orr	w2, w2, #0x20
	REG32(NF_PAGE_ADR3) = ((page_no >> 21) & 0x7) << 5;
 3003874:	53157f80 	lsr	w0, w28, #21
	REG32(NF_CMD3) = 0x70;

	//Set address
	REG32(NF_PAGE_ADR0) =  page_no & 0xff;
	REG32(NF_PAGE_ADR1) =  page_no >> 8 ;
	REG32(NF_PAGE_ADR2) = ((page_no >>16 ) & 0x1f) | (0x1 << 5);
 3003878:	b9000162 	str	w2, [x11]
	REG32(NF_PAGE_ADR3) = ((page_no >> 21) & 0x7) << 5;
 300387c:	531b0800 	ubfiz	w0, w0, #5, #3
	REG32(NF_COL_ADR1)  = 0;

	//Set ECC
	//cloud test
	//REG32(NF_MULTI_CH_MODE) = 0x20;
	REG32(NF_MULTI_CH_MODE) = 0x0;
 3003880:	d2804f83 	mov	x3, #0x27c                 	// #636
 3003884:	f2b30023 	movk	x3, #0x9801, lsl #16

	//Set address
	REG32(NF_PAGE_ADR0) =  page_no & 0xff;
	REG32(NF_PAGE_ADR1) =  page_no >> 8 ;
	REG32(NF_PAGE_ADR2) = ((page_no >>16 ) & 0x1f) | (0x1 << 5);
	REG32(NF_PAGE_ADR3) = ((page_no >> 21) & 0x7) << 5;
 3003888:	b9000140 	str	w0, [x10]

	//Set ECC
	//cloud test
	//REG32(NF_MULTI_CH_MODE) = 0x20;
	REG32(NF_MULTI_CH_MODE) = 0x0;
	REG32(NF_ECC_STOP) = 0x80;
 300388c:	d2804c82 	mov	x2, #0x264                 	// #612
 3003890:	f2b30022 	movk	x2, #0x9801, lsl #16
	//Set address
	REG32(NF_PAGE_ADR0) =  page_no & 0xff;
	REG32(NF_PAGE_ADR1) =  page_no >> 8 ;
	REG32(NF_PAGE_ADR2) = ((page_no >>16 ) & 0x1f) | (0x1 << 5);
	REG32(NF_PAGE_ADR3) = ((page_no >> 21) & 0x7) << 5;
	REG32(NF_COL_ADR0)  = 0;
 3003894:	b9000d3f 	str	wzr, [x9,#12]
	//}
	//REG32(NF_SPR_DDR_CTL) = 0x40000000 | ((SPARE_DMA_ADDR) >> 3);

	//Set DMA
	REG32(NF_DMA_ADR) = PHYS(src_addr) >> 3;	// 8 bytes unit
	if (force_2k == 1) {
 3003898:	9134a320 	add	x0, x25, #0xd28
	REG32(NF_PAGE_ADR0) =  page_no & 0xff;
	REG32(NF_PAGE_ADR1) =  page_no >> 8 ;
	REG32(NF_PAGE_ADR2) = ((page_no >>16 ) & 0x1f) | (0x1 << 5);
	REG32(NF_PAGE_ADR3) = ((page_no >> 21) & 0x7) << 5;
	REG32(NF_COL_ADR0)  = 0;
	REG32(NF_COL_ADR1)  = 0;
 300389c:	b900391f 	str	wzr, [x8,#56]
	//	REG32(NF_SPR_DDR_CTL) = 0x40000000 | (SPARE_DMA_ADDR >> 3);
	//}
	//REG32(NF_SPR_DDR_CTL) = 0x40000000 | ((SPARE_DMA_ADDR) >> 3);

	//Set DMA
	REG32(NF_DMA_ADR) = PHYS(src_addr) >> 3;	// 8 bytes unit
 30038a0:	53037c21 	lsr	w1, w1, #3
	REG32(NF_COL_ADR1)  = 0;

	//Set ECC
	//cloud test
	//REG32(NF_MULTI_CH_MODE) = 0x20;
	REG32(NF_MULTI_CH_MODE) = 0x0;
 30038a4:	b900007f 	str	wzr, [x3]
	REG32(NF_ECC_STOP) = 0x80;
 30038a8:	b9000047 	str	w7, [x2]
	//}
	//REG32(NF_SPR_DDR_CTL) = 0x40000000 | ((SPARE_DMA_ADDR) >> 3);

	//Set DMA
	REG32(NF_DMA_ADR) = PHYS(src_addr) >> 3;	// 8 bytes unit
	if (force_2k == 1) {
 30038ac:	b9401002 	ldr	w2, [x0,#16]
	REG32(NF_MULTI_CH_MODE) = 0x0;
	REG32(NF_ECC_STOP) = 0x80;

	//if (addr_secure_ram(src_addr)) {
		//prints("SRAM spare\n");
		REG32(NF_SPR_DDR_CTL) = 0x40000000 | ((UINT32)(uintptr_t)nand_spare_dma >> 3);
 30038b0:	b90002f6 	str	w22, [x23]
	//	REG32(NF_SPR_DDR_CTL) = 0x40000000 | (SPARE_DMA_ADDR >> 3);
	//}
	//REG32(NF_SPR_DDR_CTL) = 0x40000000 | ((SPARE_DMA_ADDR) >> 3);

	//Set DMA
	REG32(NF_DMA_ADR) = PHYS(src_addr) >> 3;	// 8 bytes unit
 30038b4:	b9008861 	str	w1, [x3,#136]
	if (force_2k == 1) {
 30038b8:	7100045f 	cmp	w2, #0x1
 30038bc:	540007c0 	b.eq	30039b4 <nf_write+0x41c>
		REG32(NF_DMA_LEN) = 0x800 / 0x200;	// DMA transfer unit is 512 bytes
	}
	else {
		REG32(NF_DMA_LEN) = g_PageSize / 0x200;	// DMA transfer unit is 512 bytes
 30038c0:	d2806101 	mov	x1, #0x308                 	// #776
 30038c4:	f2b30021 	movk	x1, #0x9801, lsl #16
 30038c8:	b9400c00 	ldr	w0, [x0,#12]
 30038cc:	53097c00 	lsr	w0, w0, #9
 30038d0:	b9000020 	str	w0, [x1]
		REG32(NF_DMA_CTL4) =0x01;
		REG32(NF_DMA_CTL5) =0x10;
		REG32(NF_DMA_CTL6) =0x01;
	}
	#else
	REG32(NF_DMA_CONF) = 0x01;
 30038d4:	d2806180 	mov	x0, #0x30c                 	// #780
 30038d8:	f2b30020 	movk	x0, #0x9801, lsl #16
 30038dc:	52800021 	mov	w1, #0x1                   	// #1
 30038e0:	b9000001 	str	w1, [x0]
	#endif // NF_SWC

	sync();
 30038e4:	97fff28a 	bl	300030c <sync>

	//Enable Auto mode
	REG32(NF_AUTO_TRIG) = 0x80|(g_PageSize == 512 ? 0x0 : 0x1);	//0x1: write in 2K page size
 30038e8:	9134a322 	add	x2, x25, #0xd28
 30038ec:	d2804003 	mov	x3, #0x200                 	// #512
 30038f0:	f2b30023 	movk	x3, #0x9801, lsl #16
 30038f4:	52801020 	mov	w0, #0x81                  	// #129
 30038f8:	52801007 	mov	w7, #0x80                  	// #128
 30038fc:	b9400c42 	ldr	w2, [x2,#12]
	while( REG32(NF_AUTO_TRIG) & 0x80 )
 3003900:	aa0303e1 	mov	x1, x3
	#endif // NF_SWC

	sync();

	//Enable Auto mode
	REG32(NF_AUTO_TRIG) = 0x80|(g_PageSize == 512 ? 0x0 : 0x1);	//0x1: write in 2K page size
 3003904:	7108005f 	cmp	w2, #0x200
 3003908:	1a871000 	csel	w0, w0, w7, ne
 300390c:	b9000060 	str	w0, [x3]
	while( REG32(NF_AUTO_TRIG) & 0x80 )
 3003910:	b9400020 	ldr	w0, [x1]
 3003914:	373fffe0 	tbnz	w0, #7, 3003910 <nf_write+0x378>

	#if 0
	//Wait DMA done
	while( REG32(NF_DMA_CONF) & 0x1 );
	#else
	while(( REG32(NF_DMA_CONF) & 0x1)==0x0 )
 3003918:	d2806181 	mov	x1, #0x30c                 	// #780
 300391c:	f2b30021 	movk	x1, #0x9801, lsl #16
 3003920:	b9400020 	ldr	w0, [x1]
 3003924:	3607ffe0 	tbz	w0, #0, 3003920 <nf_write+0x388>
		;
	#endif

	// wait ready.
	polling_timeout(NF_ND_CTL, 0x40, 0x40, 0);
 3003928:	52800802 	mov	w2, #0x40                  	// #64
 300392c:	52800003 	mov	w3, #0x0                   	// #0
 3003930:	2a0203e1 	mov	w1, w2
 3003934:	52800300 	mov	w0, #0x18                  	// #24
 3003938:	72b30020 	movk	w0, #0x9801, lsl #16
 300393c:	94000aae 	bl	30063f4 <polling_timeout>

	// execute command3 register and wait for executed completion
	REG32(NF_POLL_STATUS) = (0x6<<1) | 0x1;
 3003940:	d2800600 	mov	x0, #0x30                  	// #48
 3003944:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003948:	528001a2 	mov	w2, #0xd                   	// #13
	while ( REG32(NF_POLL_STATUS) & 0x1)
 300394c:	aa0003e1 	mov	x1, x0

	// wait ready.
	polling_timeout(NF_ND_CTL, 0x40, 0x40, 0);

	// execute command3 register and wait for executed completion
	REG32(NF_POLL_STATUS) = (0x6<<1) | 0x1;
 3003950:	b9000002 	str	w2, [x0]
	while ( REG32(NF_POLL_STATUS) & 0x1)
 3003954:	b9400020 	ldr	w0, [x1]
 3003958:	3707ffe0 	tbnz	w0, #0, 3003954 <nf_write+0x3bc>
		;

	temp = REG32(NF_DATA) & 0x1;
 300395c:	d2800280 	mov	x0, #0x14                  	// #20
 3003960:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003964:	b9400000 	ldr	w0, [x0]

	if (temp == 0) {
 3003968:	37000540 	tbnz	w0, #0, 3003a10 <nf_write+0x478>
		/* show '.' in console */
		prints(".");
 300396c:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 3003970:	913f2000 	add	x0, x0, #0xfc8
 3003974:	940009d7 	bl	30060d0 <prints>
 3003978:	9134a321 	add	x1, x25, #0xd28
 300397c:	52800020 	mov	w0, #0x1                   	// #1
 3003980:	b9400c23 	ldr	w3, [x1,#12]
 3003984:	17ffff3f 	b	3003680 <nf_write+0xe8>
			faultDetect();
		}

	}
	else {
		REG32(NF_PP_RDY) = 0; // disable read_by_pp
 3003988:	d2804503 	mov	x3, #0x228                 	// #552
 300398c:	f2b30023 	movk	x3, #0x9801, lsl #16
		REG32(NF_SRAM_CTL) = 0x30 | 0x4; // enable direct access to PP
 3003990:	d2806000 	mov	x0, #0x300                 	// #768
 3003994:	f2b30020 	movk	x0, #0x9801, lsl #16

		REG32(NF_PAGE_ADR0 + offset) = spare;
 3003998:	d2b30021 	mov	x1, #0x98010000            	// #2550202368
		}

	}
	else {
		REG32(NF_PP_RDY) = 0; // disable read_by_pp
		REG32(NF_SRAM_CTL) = 0x30 | 0x4; // enable direct access to PP
 300399c:	52800682 	mov	w2, #0x34                  	// #52
			faultDetect();
		}

	}
	else {
		REG32(NF_PP_RDY) = 0; // disable read_by_pp
 30039a0:	b900007f 	str	wzr, [x3]
		REG32(NF_SRAM_CTL) = 0x30 | 0x4; // enable direct access to PP
 30039a4:	b9000002 	str	w2, [x0]

		REG32(NF_PAGE_ADR0 + offset) = spare;
 30039a8:	b9000038 	str	w24, [x1]

		REG32(NF_SRAM_CTL) = 0x0; // disable direct access
 30039ac:	b900001f 	str	wzr, [x0]
 30039b0:	17ffff5e 	b	3003728 <nf_write+0x190>
	//REG32(NF_SPR_DDR_CTL) = 0x40000000 | ((SPARE_DMA_ADDR) >> 3);

	//Set DMA
	REG32(NF_DMA_ADR) = PHYS(src_addr) >> 3;	// 8 bytes unit
	if (force_2k == 1) {
		REG32(NF_DMA_LEN) = 0x800 / 0x200;	// DMA transfer unit is 512 bytes
 30039b4:	d2806100 	mov	x0, #0x308                 	// #776
 30039b8:	f2b30020 	movk	x0, #0x9801, lsl #16
 30039bc:	52800081 	mov	w1, #0x4                   	// #4
 30039c0:	b9000001 	str	w1, [x0]
 30039c4:	17ffffc4 	b	30038d4 <nf_write+0x33c>
	REG32(NF_DATA_TL0) = data_unit & 0xff;
	REG32(NF_DATA_TL1) = (data_unit >> 8) & 0x3f;	// transfer mode

	//Set page length at auto mode
	if (force_2k == 1) {
		REG32(NF_PAGE_LEN) = 0x800 / data_unit;	//Set page length (in unit)
 30039c8:	d2804e00 	mov	x0, #0x270                 	// #624
 30039cc:	f2b30020 	movk	x0, #0x9801, lsl #16
 30039d0:	52800082 	mov	w2, #0x4                   	// #4
 30039d4:	b9000002 	str	w2, [x0]
 30039d8:	17ffff82 	b	30037e0 <nf_write+0x248>
	if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
		data_unit = 512;
        //prints("nf_is_SLC\n");
		if (nf_is_random_mode()) {
			if (force_2k == 1) {
				REG32(NF_RND_CMD1) = 0x85;
 30039dc:	d2804103 	mov	x3, #0x208                 	// #520
 30039e0:	f2b30023 	movk	x3, #0x9801, lsl #16
	prints(", ");
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
 30039e4:	d2804200 	mov	x0, #0x210                 	// #528
 30039e8:	f2b30020 	movk	x0, #0x9801, lsl #16
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
 30039ec:	d2804282 	mov	x2, #0x214                 	// #532
 30039f0:	f2b30022 	movk	x2, #0x9801, lsl #16
	if (nf_is_6bit_ecc() || nf_is_12bit_ecc()) {
		data_unit = 512;
        //prints("nf_is_SLC\n");
		if (nf_is_random_mode()) {
			if (force_2k == 1) {
				REG32(NF_RND_CMD1) = 0x85;
 30039f4:	528010a7 	mov	w7, #0x85                  	// #133
 30039f8:	b9000067 	str	w7, [x3]
	prints(", ");
	print_hex(spare_col);
	prints(")\n");
#endif

	REG32(NF_RND_DATASTR_COL_H) = data_col >> 8;
 30039fc:	b900001f 	str	wzr, [x0]
	REG32(NF_RND_SPR_STR_COL_H) = spare_col >> 8;
 3003a00:	52800103 	mov	w3, #0x8                   	// #8
 3003a04:	b9000043 	str	w3, [x2]
	REG32(NF_RND_SPR_STR_COL_L) = spare_col & 0xff;
 3003a08:	b900081f 	str	wzr, [x0,#8]
 3003a0c:	17ffff5f 	b	3003788 <nf_write+0x1f0>
		/* show '.' in console */
		prints(".");
		return 0;
	}
	/* show '!' in console */
	prints("!(");
 3003a10:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 3003a14:	913f4000 	add	x0, x0, #0xfd0
 3003a18:	940009ae 	bl	30060d0 <prints>
    print_hex(page_no);
 3003a1c:	2a1c03e0 	mov	w0, w28
 3003a20:	940009de 	bl	3006198 <print_hex>
	prints(")");
 3003a24:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 3003a28:	913f6000 	add	x0, x0, #0xfd8
 3003a2c:	940009a9 	bl	30060d0 <prints>
	{
		faultDetect();
	}

	return 0;
}
 3003a30:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3003a34:	a94263f7 	ldp	x23, x24, [sp,#32]
 3003a38:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3003a3c:	a94473fb 	ldp	x27, x28, [sp,#64]
 3003a40:	f9402bfe 	ldr	x30, [sp,#80]
		if (isNeedWrite) {
			//prints("w\n");
			nf_set_spare(spare, 0);
			res = nf_write_phys_page(start_page, (UINT32)(uintptr_t)buf);
			if (res)
				return (-1);
 3003a44:	12800000 	mov	w0, #0xffffffff            	// #-1
	{
		faultDetect();
	}

	return 0;
}
 3003a48:	a8c753f3 	ldp	x19, x20, [sp],#112
 3003a4c:	d65f03c0 	ret

0000000003003a50 <nf_erase_phys_block>:
int nf_erase_phys_block(UINT32 page_addr)
{
	UINT32 temp;

	// Set chip select
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;
 3003a50:	d2802601 	mov	x1, #0x130                 	// #304
 3003a54:	f2b30021 	movk	x1, #0x9801, lsl #16

	//Set command
	REG32(NF_CMD1) = 0x60;		//Set CMD1
 3003a58:	d2800202 	mov	x2, #0x10                  	// #16
 3003a5c:	f2b30022 	movk	x2, #0x9801, lsl #16

	return 0;
}

int nf_erase_phys_block(UINT32 page_addr)
{
 3003a60:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
	// Set chip select
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;

	//Set command
	REG32(NF_CMD1) = 0x60;		//Set CMD1
	REG32(NF_CMD2) = 0xd0;		//Set CMD2
 3003a64:	d2804e84 	mov	x4, #0x274                 	// #628
 3003a68:	f2b30024 	movk	x4, #0x9801, lsl #16

	return 0;
}

int nf_erase_phys_block(UINT32 page_addr)
{
 3003a6c:	2a0003f3 	mov	w19, w0
	UINT32 temp;

	// Set chip select
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;
 3003a70:	528003c3 	mov	w3, #0x1e                  	// #30

	//Set command
	REG32(NF_CMD1) = 0x60;		//Set CMD1
	REG32(NF_CMD2) = 0xd0;		//Set CMD2
	REG32(NF_CMD3) = 0x70;		//Set CMD3
 3003a74:	d2800500 	mov	x0, #0x28                  	// #40
 3003a78:	f2b30020 	movk	x0, #0x9801, lsl #16
int nf_erase_phys_block(UINT32 page_addr)
{
	UINT32 temp;

	// Set chip select
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;
 3003a7c:	b9000023 	str	w3, [x1]

	//Set command
	REG32(NF_CMD1) = 0x60;		//Set CMD1
 3003a80:	52800c03 	mov	w3, #0x60                  	// #96
	REG32(NF_CMD2) = 0xd0;		//Set CMD2
	REG32(NF_CMD3) = 0x70;		//Set CMD3

	//Set address
	//note. page_addr[5:0] is ignored to be truncated as block
	REG32(NF_PAGE_ADR0) =  page_addr & 0xff;
 3003a84:	d2b30021 	mov	x1, #0x98010000            	// #2550202368

	// Set chip select
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;

	//Set command
	REG32(NF_CMD1) = 0x60;		//Set CMD1
 3003a88:	b9000043 	str	w3, [x2]
	REG32(NF_CMD2) = 0xd0;		//Set CMD2
 3003a8c:	52801a05 	mov	w5, #0xd0                  	// #208
	REG32(NF_CMD3) = 0x70;		//Set CMD3

	//Set address
	//note. page_addr[5:0] is ignored to be truncated as block
	REG32(NF_PAGE_ADR0) =  page_addr & 0xff;
	REG32(NF_PAGE_ADR1) =  page_addr >> 8;
 3003a90:	d2800082 	mov	x2, #0x4                   	// #4
 3003a94:	f2b30022 	movk	x2, #0x9801, lsl #16
	// Set chip select
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;

	//Set command
	REG32(NF_CMD1) = 0x60;		//Set CMD1
	REG32(NF_CMD2) = 0xd0;		//Set CMD2
 3003a98:	b9000085 	str	w5, [x4]
	REG32(NF_CMD3) = 0x70;		//Set CMD3
 3003a9c:	52800e04 	mov	w4, #0x70                  	// #112

	//Set address
	//note. page_addr[5:0] is ignored to be truncated as block
	REG32(NF_PAGE_ADR0) =  page_addr & 0xff;
	REG32(NF_PAGE_ADR1) =  page_addr >> 8;
	REG32(NF_PAGE_ADR2) = ((page_addr >>16 ) & 0x1f) | (4 << 5);
 3003aa0:	d2800105 	mov	x5, #0x8                   	// #8
 3003aa4:	f2b30025 	movk	x5, #0x9801, lsl #16
	REG32(NF_CHIP_EN) = NAND_CHIP_SELECT;

	//Set command
	REG32(NF_CMD1) = 0x60;		//Set CMD1
	REG32(NF_CMD2) = 0xd0;		//Set CMD2
	REG32(NF_CMD3) = 0x70;		//Set CMD3
 3003aa8:	b9000004 	str	w4, [x0]

	//Set address
	//note. page_addr[5:0] is ignored to be truncated as block
	REG32(NF_PAGE_ADR0) =  page_addr & 0xff;
	REG32(NF_PAGE_ADR1) =  page_addr >> 8;
 3003aac:	53087e63 	lsr	w3, w19, #8
	REG32(NF_CMD2) = 0xd0;		//Set CMD2
	REG32(NF_CMD3) = 0x70;		//Set CMD3

	//Set address
	//note. page_addr[5:0] is ignored to be truncated as block
	REG32(NF_PAGE_ADR0) =  page_addr & 0xff;
 3003ab0:	12001e66 	and	w6, w19, #0xff
	REG32(NF_PAGE_ADR1) =  page_addr >> 8;
	REG32(NF_PAGE_ADR2) = ((page_addr >>16 ) & 0x1f) | (4 << 5);
	REG32(NF_PAGE_ADR3) = ((page_addr >> 21) & 0x7) << 5;
 3003ab4:	d2800584 	mov	x4, #0x2c                  	// #44
 3003ab8:	f2b30024 	movk	x4, #0x9801, lsl #16
	REG32(NF_CMD2) = 0xd0;		//Set CMD2
	REG32(NF_CMD3) = 0x70;		//Set CMD3

	//Set address
	//note. page_addr[5:0] is ignored to be truncated as block
	REG32(NF_PAGE_ADR0) =  page_addr & 0xff;
 3003abc:	b9000026 	str	w6, [x1]
	REG32(NF_PAGE_ADR1) =  page_addr >> 8;
	REG32(NF_PAGE_ADR2) = ((page_addr >>16 ) & 0x1f) | (4 << 5);
 3003ac0:	d3505261 	ubfx	x1, x19, #16, #5
	REG32(NF_CMD3) = 0x70;		//Set CMD3

	//Set address
	//note. page_addr[5:0] is ignored to be truncated as block
	REG32(NF_PAGE_ADR0) =  page_addr & 0xff;
	REG32(NF_PAGE_ADR1) =  page_addr >> 8;
 3003ac4:	b9000043 	str	w3, [x2]
	REG32(NF_PAGE_ADR2) = ((page_addr >>16 ) & 0x1f) | (4 << 5);
	REG32(NF_PAGE_ADR3) = ((page_addr >> 21) & 0x7) << 5;
	REG32(NF_COL_ADR0)  = 0;
 3003ac8:	d2800183 	mov	x3, #0xc                   	// #12
 3003acc:	f2b30023 	movk	x3, #0x9801, lsl #16

	//Set address
	//note. page_addr[5:0] is ignored to be truncated as block
	REG32(NF_PAGE_ADR0) =  page_addr & 0xff;
	REG32(NF_PAGE_ADR1) =  page_addr >> 8;
	REG32(NF_PAGE_ADR2) = ((page_addr >>16 ) & 0x1f) | (4 << 5);
 3003ad0:	32190021 	orr	w1, w1, #0x80
	REG32(NF_PAGE_ADR3) = ((page_addr >> 21) & 0x7) << 5;
 3003ad4:	53157e60 	lsr	w0, w19, #21

	//Set address
	//note. page_addr[5:0] is ignored to be truncated as block
	REG32(NF_PAGE_ADR0) =  page_addr & 0xff;
	REG32(NF_PAGE_ADR1) =  page_addr >> 8;
	REG32(NF_PAGE_ADR2) = ((page_addr >>16 ) & 0x1f) | (4 << 5);
 3003ad8:	b90000a1 	str	w1, [x5]
	REG32(NF_PAGE_ADR3) = ((page_addr >> 21) & 0x7) << 5;
 3003adc:	531b0800 	ubfiz	w0, w0, #5, #3
	REG32(NF_COL_ADR1)  = 0;


	//Set ECC: Set HW no check ECC, no_wait_busy & edo.
#ifndef ENV_SIMULATION
	REG32(NF_MULTI_CH_MODE) = 0x3 << 4;
 3003ae0:	d2804f81 	mov	x1, #0x27c                 	// #636
 3003ae4:	f2b30021 	movk	x1, #0x9801, lsl #16
	//Set address
	//note. page_addr[5:0] is ignored to be truncated as block
	REG32(NF_PAGE_ADR0) =  page_addr & 0xff;
	REG32(NF_PAGE_ADR1) =  page_addr >> 8;
	REG32(NF_PAGE_ADR2) = ((page_addr >>16 ) & 0x1f) | (4 << 5);
	REG32(NF_PAGE_ADR3) = ((page_addr >> 21) & 0x7) << 5;
 3003ae8:	b9000080 	str	w0, [x4]
	REG32(NF_MULTI_CH_MODE) = 0x1 << 4;
#endif

	//Enable Auto mode: Set and enable auto mode
	// and wait until auto mode done
	REG32(NF_AUTO_TRIG) = 0x8a;
 3003aec:	d2804000 	mov	x0, #0x200                 	// #512
 3003af0:	f2b30020 	movk	x0, #0x9801, lsl #16
	//note. page_addr[5:0] is ignored to be truncated as block
	REG32(NF_PAGE_ADR0) =  page_addr & 0xff;
	REG32(NF_PAGE_ADR1) =  page_addr >> 8;
	REG32(NF_PAGE_ADR2) = ((page_addr >>16 ) & 0x1f) | (4 << 5);
	REG32(NF_PAGE_ADR3) = ((page_addr >> 21) & 0x7) << 5;
	REG32(NF_COL_ADR0)  = 0;
 3003af4:	b900007f 	str	wzr, [x3]
	REG32(NF_COL_ADR1)  = 0;
 3003af8:	b900385f 	str	wzr, [x2,#56]


	//Set ECC: Set HW no check ECC, no_wait_busy & edo.
#ifndef ENV_SIMULATION
	REG32(NF_MULTI_CH_MODE) = 0x3 << 4;
 3003afc:	52800602 	mov	w2, #0x30                  	// #48
 3003b00:	b9000022 	str	w2, [x1]
	REG32(NF_MULTI_CH_MODE) = 0x1 << 4;
#endif

	//Enable Auto mode: Set and enable auto mode
	// and wait until auto mode done
	REG32(NF_AUTO_TRIG) = 0x8a;
 3003b04:	52801142 	mov	w2, #0x8a                  	// #138
	while ( REG32(NF_AUTO_TRIG) & 0x80)
 3003b08:	aa0003e1 	mov	x1, x0
	REG32(NF_MULTI_CH_MODE) = 0x1 << 4;
#endif

	//Enable Auto mode: Set and enable auto mode
	// and wait until auto mode done
	REG32(NF_AUTO_TRIG) = 0x8a;
 3003b0c:	b9000002 	str	w2, [x0]
	while ( REG32(NF_AUTO_TRIG) & 0x80)
 3003b10:	b9400020 	ldr	w0, [x1]
 3003b14:	373fffe0 	tbnz	w0, #7, 3003b10 <nf_erase_phys_block+0xc0>
		;

	// wait ready.
	polling_timeout(NF_ND_CTL, 0x40, 0x40, 0);
 3003b18:	52800802 	mov	w2, #0x40                  	// #64
 3003b1c:	52800003 	mov	w3, #0x0                   	// #0
 3003b20:	2a0203e1 	mov	w1, w2
 3003b24:	52800300 	mov	w0, #0x18                  	// #24
 3003b28:	72b30020 	movk	w0, #0x9801, lsl #16
 3003b2c:	94000a32 	bl	30063f4 <polling_timeout>

	// execute command3 register and wait for executed completion
	REG32(NF_POLL_STATUS) = (0x6<<1) | 0x1;
 3003b30:	d2800600 	mov	x0, #0x30                  	// #48
 3003b34:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003b38:	528001a2 	mov	w2, #0xd                   	// #13
	while ( REG32(NF_POLL_STATUS) & 0x1)
 3003b3c:	aa0003e1 	mov	x1, x0

	// wait ready.
	polling_timeout(NF_ND_CTL, 0x40, 0x40, 0);

	// execute command3 register and wait for executed completion
	REG32(NF_POLL_STATUS) = (0x6<<1) | 0x1;
 3003b40:	b9000002 	str	w2, [x0]
	while ( REG32(NF_POLL_STATUS) & 0x1)
 3003b44:	b9400020 	ldr	w0, [x1]
 3003b48:	3707ffe0 	tbnz	w0, #0, 3003b44 <nf_erase_phys_block+0xf4>
		;

	temp = REG32(NF_DATA) & 0x1;
 3003b4c:	d2800280 	mov	x0, #0x14                  	// #20
 3003b50:	f2b30020 	movk	x0, #0x9801, lsl #16
 3003b54:	b9400000 	ldr	w0, [x0]

	if (temp == 0) {
 3003b58:	370001c0 	tbnz	w0, #0, 3003b90 <nf_erase_phys_block+0x140>
		/* show '/' in console */
		prints("/(");
 3003b5c:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 3003b60:	913f8000 	add	x0, x0, #0xfe0
 3003b64:	9400095b 	bl	30060d0 <prints>
        print_hex(page_addr/g_PagePerBlock);
 3003b68:	f0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3003b6c:	b94d2c00 	ldr	w0, [x0,#3372]
 3003b70:	1ac00a60 	udiv	w0, w19, w0
 3003b74:	94000989 	bl	3006198 <print_hex>
        prints(")");
 3003b78:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 3003b7c:	913f6000 	add	x0, x0, #0xfd8
 3003b80:	94000954 	bl	30060d0 <prints>
		return 0;
 3003b84:	52800000 	mov	w0, #0x0                   	// #0
	/* show 'X' in console */
	prints("X(");
    print_hex(page_addr);
    prints(")");
	return -1;
}
 3003b88:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3003b8c:	d65f03c0 	ret
        print_hex(page_addr/g_PagePerBlock);
        prints(")");
		return 0;
	}
	/* show 'X' in console */
	prints("X(");
 3003b90:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 3003b94:	913fa000 	add	x0, x0, #0xfe8
 3003b98:	9400094e 	bl	30060d0 <prints>
    print_hex(page_addr);
 3003b9c:	2a1303e0 	mov	w0, w19
 3003ba0:	9400097e 	bl	3006198 <print_hex>
    prints(")");
 3003ba4:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 3003ba8:	913f6000 	add	x0, x0, #0xfd8
 3003bac:	94000949 	bl	30060d0 <prints>
	return -1;
 3003bb0:	12800000 	mov	w0, #0xffffffff            	// #-1
 3003bb4:	17fffff5 	b	3003b88 <nf_erase_phys_block+0x138>

0000000003003bb8 <get_boot_flash_type>:
 *  Function body
 ************************************************************************/


int get_boot_flash_type(void)
{
 3003bb8:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
    return NAND_FLASH_BOOT;
#elif FORCE_SPI_BOOT
    return SPI_FLASH_BOOT;
#endif

	bit48 = getFWFeature(ISO_COLD_RST9, BOOT_OPTION_GPIO_48);
 3003bbc:	528003a1 	mov	w1, #0x1d                  	// #29
 3003bc0:	528ecf00 	mov	w0, #0x7678                	// #30328
 3003bc4:	72b30000 	movk	w0, #0x9800, lsl #16
 3003bc8:	94000f9e 	bl	3007a40 <getFWFeature>
 3003bcc:	2a0003f3 	mov	w19, w0
	bit49 = getFWFeature(ISO_COLD_RST9, BOOT_OPTION_GPIO_49);
 3003bd0:	528003c1 	mov	w1, #0x1e                  	// #30
 3003bd4:	528ecf00 	mov	w0, #0x7678                	// #30328
 3003bd8:	72b30000 	movk	w0, #0x9800, lsl #16
 3003bdc:	94000f99 	bl	3007a40 <getFWFeature>

	if (bit48 && bit49){
 3003be0:	6b1f027f 	cmp	w19, wzr
 3003be4:	1a9f07e2 	cset	w2, ne
 3003be8:	6b1f001f 	cmp	w0, wzr
 3003bec:	1a9f07e1 	cset	w1, ne
 3003bf0:	34000041 	cbz	w1, 3003bf8 <get_boot_flash_type+0x40>
 3003bf4:	350001a2 	cbnz	w2, 3003c28 <get_boot_flash_type+0x70>
		sim_debug_print(0xecfa1111);
#endif

		return EMMC_BOOT;
	}
	else if ((bit48)&&(!bit49)){
 3003bf8:	350000c0 	cbnz	w0, 3003c10 <get_boot_flash_type+0x58>
 3003bfc:	340000a2 	cbz	w2, 3003c10 <get_boot_flash_type+0x58>

#ifdef ENV_SIMULATION
		sim_debug_print(0xecfa3333);
#endif

		return USB_BOOT;
 3003c00:	52848480 	mov	w0, #0x2424                	// #9252
 3003c04:	72a48480 	movk	w0, #0x2424, lsl #16
		sim_debug_print(0xecfa2222);
#endif

		return NAND_FLASH_BOOT;
	}
}
 3003c08:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3003c0c:	d65f03c0 	ret
#endif

		return USB_BOOT;
	}

	else if ((!bit48)&&(bit49)){
 3003c10:	350002f3 	cbnz	w19, 3003c6c <get_boot_flash_type+0xb4>
 3003c14:	340002c1 	cbz	w1, 3003c6c <get_boot_flash_type+0xb4>

#ifdef ENV_SIMULATION
		sim_debug_print(0xecfa0000);
#endif

		return SPI_FLASH_BOOT;
 3003c18:	52846460 	mov	w0, #0x2323                	// #8995
 3003c1c:	72a46460 	movk	w0, #0x2323, lsl #16
		sim_debug_print(0xecfa2222);
#endif

		return NAND_FLASH_BOOT;
	}
}
 3003c20:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3003c24:	d65f03c0 	ret
	bit48 = getFWFeature(ISO_COLD_RST9, BOOT_OPTION_GPIO_48);
	bit49 = getFWFeature(ISO_COLD_RST9, BOOT_OPTION_GPIO_49);

	if (bit48 && bit49){
#ifdef EMMC_1_8V
	    sync();
 3003c28:	97fff1b9 	bl	300030c <sync>
	    REG32(SYS_PLL_EMMC1)   = 0x03;   //default phase
 3003c2c:	d2803e03 	mov	x3, #0x1f0                 	// #496
 3003c30:	f2b30003 	movk	x3, #0x9800, lsl #16
	    REG32(CR_EMMC_PAD_CTL) = 0;      //PAD to 1.8V
 3003c34:	d2848e82 	mov	x2, #0x2474                	// #9332
 3003c38:	f2b30022 	movk	x2, #0x9801, lsl #16
	bit49 = getFWFeature(ISO_COLD_RST9, BOOT_OPTION_GPIO_49);

	if (bit48 && bit49){
#ifdef EMMC_1_8V
	    sync();
	    REG32(SYS_PLL_EMMC1)   = 0x03;   //default phase
 3003c3c:	52800064 	mov	w4, #0x3                   	// #3
	    REG32(CR_EMMC_PAD_CTL) = 0;      //PAD to 1.8V
	    mdelay(0,10);
 3003c40:	52800141 	mov	w1, #0xa                   	// #10
	bit49 = getFWFeature(ISO_COLD_RST9, BOOT_OPTION_GPIO_49);

	if (bit48 && bit49){
#ifdef EMMC_1_8V
	    sync();
	    REG32(SYS_PLL_EMMC1)   = 0x03;   //default phase
 3003c44:	b9000064 	str	w4, [x3]
	    REG32(CR_EMMC_PAD_CTL) = 0;      //PAD to 1.8V
	    mdelay(0,10);
 3003c48:	52800000 	mov	w0, #0x0                   	// #0

	if (bit48 && bit49){
#ifdef EMMC_1_8V
	    sync();
	    REG32(SYS_PLL_EMMC1)   = 0x03;   //default phase
	    REG32(CR_EMMC_PAD_CTL) = 0;      //PAD to 1.8V
 3003c4c:	b900005f 	str	wzr, [x2]
	    mdelay(0,10);
 3003c50:	94000785 	bl	3005a64 <mdelay>
	    CP15ISB;
 3003c54:	d5033fdf 	isb
	    sync();
 3003c58:	97fff1ad 	bl	300030c <sync>

#ifdef ENV_SIMULATION
		sim_debug_print(0xecfa1111);
#endif

		return EMMC_BOOT;
 3003c5c:	52828280 	mov	w0, #0x1414                	// #5140
 3003c60:	72a28280 	movk	w0, #0x1414, lsl #16
		sim_debug_print(0xecfa2222);
#endif

		return NAND_FLASH_BOOT;
	}
}
 3003c64:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3003c68:	d65f03c0 	ret

#ifdef ENV_SIMULATION
		sim_debug_print(0xecfa2222);
#endif

		return NAND_FLASH_BOOT;
 3003c6c:	52826260 	mov	w0, #0x1313                	// #4883
 3003c70:	72a26260 	movk	w0, #0x1313, lsl #16
	}
}
 3003c74:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3003c78:	d65f03c0 	ret

0000000003003c7c <OTP_Program_End>:

	return OK;
}

int OTP_Program_End(void)
{
 3003c7c:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
	//kilopass OTP
	if ((REG32(OTP_EF_TM_ST) & 0x1FF) == 0x100 ){
 3003c80:	d28f0293 	mov	x19, #0x7814                	// #30740
 3003c84:	f2b30033 	movk	x19, #0x9801, lsl #16
		return OK;
 3003c88:	52800000 	mov	w0, #0x0                   	// #0
}

int OTP_Program_End(void)
{
	//kilopass OTP
	if ((REG32(OTP_EF_TM_ST) & 0x1FF) == 0x100 ){
 3003c8c:	b9400261 	ldr	w1, [x19]
 3003c90:	12002021 	and	w1, w1, #0x1ff
 3003c94:	7104003f 	cmp	w1, #0x100
 3003c98:	54000140 	b.eq	3003cc0 <OTP_Program_End+0x44>
		return OK;
	}
	else{
		prints("OTP Program Error, OTP_EF_TM_ST = 0x");
 3003c9c:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 3003ca0:	913fc000 	add	x0, x0, #0xff0
 3003ca4:	9400090b 	bl	30060d0 <prints>
		print_hex(REG32(OTP_EF_TM_ST));
 3003ca8:	b9400260 	ldr	w0, [x19]
 3003cac:	9400093b 	bl	3006198 <print_hex>
		prints("\n");
 3003cb0:	d0000020 	adrp	x0, 3009000 <el3_vectors>
 3003cb4:	91396000 	add	x0, x0, #0xe58
 3003cb8:	94000906 	bl	30060d0 <prints>
		return NOK;
 3003cbc:	52800020 	mov	w0, #0x1                   	// #1
	}
}
 3003cc0:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3003cc4:	d65f03c0 	ret

0000000003003cc8 <OTP_Get_Byte>:
	return value;
}

//offset should be 8-bit aligned bit offset from OTP_REG_BASE
UINT32 OTP_Get_Byte(UINT32 offset, UINT8 *ptr, UINT32 cnt)
{
 3003cc8:	d10043ff 	sub	sp, sp, #0x10
	UINT32 i=0;
	volatile UINT32 div_n=0;
	volatile UINT32 align_n=0, align_rem_n=0;
	volatile UINT32 real_ofset=0;

	real_ofset = offset & ~0x7;  //8 bit aligned bit offset
 3003ccc:	121d7000 	and	w0, w0, #0xfffffff8

//offset should be 8-bit aligned bit offset from OTP_REG_BASE
UINT32 OTP_Get_Byte(UINT32 offset, UINT8 *ptr, UINT32 cnt)
{
	UINT32 i=0;
	volatile UINT32 div_n=0;
 3003cd0:	b90003ff 	str	wzr, [sp]
	volatile UINT32 align_n=0, align_rem_n=0;
 3003cd4:	b90007ff 	str	wzr, [sp,#4]
 3003cd8:	b9000bff 	str	wzr, [sp,#8]
	volatile UINT32 real_ofset=0;
 3003cdc:	b9000fff 	str	wzr, [sp,#12]

	real_ofset = offset & ~0x7;  //8 bit aligned bit offset
 3003ce0:	b9000fe0 	str	w0, [sp,#12]
	for(i = 0; i < cnt; i++) {
 3003ce4:	34000362 	cbz	w2, 3003d50 <OTP_Get_Byte+0x88>
 3003ce8:	51000444 	sub	w4, w2, #0x1
		div_n = (real_ofset + i * 8) / 8;
		align_n = div_n & ~0x3;
		align_rem_n = div_n & 0x3;
		*(ptr + i) = (UINT8)((REG32(OTP_REG_BASE + align_n)>>(align_rem_n * 8)) & 0xff);
 3003cec:	528e0005 	mov	w5, #0x7000                	// #28672
 3003cf0:	72b30025 	movk	w5, #0x9801, lsl #16
 3003cf4:	91000484 	add	x4, x4, #0x1
	volatile UINT32 div_n=0;
	volatile UINT32 align_n=0, align_rem_n=0;
	volatile UINT32 real_ofset=0;

	real_ofset = offset & ~0x7;  //8 bit aligned bit offset
	for(i = 0; i < cnt; i++) {
 3003cf8:	52800003 	mov	w3, #0x0                   	// #0
 3003cfc:	8b040024 	add	x4, x1, x4
		div_n = (real_ofset + i * 8) / 8;
 3003d00:	b9400fe0 	ldr	w0, [sp,#12]
 3003d04:	0b030000 	add	w0, w0, w3
 3003d08:	11002063 	add	w3, w3, #0x8
 3003d0c:	53037c00 	lsr	w0, w0, #3
 3003d10:	b90003e0 	str	w0, [sp]
		align_n = div_n & ~0x3;
 3003d14:	b94003e0 	ldr	w0, [sp]
 3003d18:	121e7400 	and	w0, w0, #0xfffffffc
 3003d1c:	b90007e0 	str	w0, [sp,#4]
		align_rem_n = div_n & 0x3;
 3003d20:	b94003e0 	ldr	w0, [sp]
 3003d24:	12000400 	and	w0, w0, #0x3
 3003d28:	b9000be0 	str	w0, [sp,#8]
		*(ptr + i) = (UINT8)((REG32(OTP_REG_BASE + align_n)>>(align_rem_n * 8)) & 0xff);
 3003d2c:	b94007e0 	ldr	w0, [sp,#4]
 3003d30:	0b050000 	add	w0, w0, w5
 3003d34:	b9400002 	ldr	w2, [x0]
 3003d38:	b9400be0 	ldr	w0, [sp,#8]
 3003d3c:	531d7000 	lsl	w0, w0, #3
 3003d40:	1ac02440 	lsr	w0, w2, w0
 3003d44:	38001420 	strb	w0, [x1],#1
	volatile UINT32 div_n=0;
	volatile UINT32 align_n=0, align_rem_n=0;
	volatile UINT32 real_ofset=0;

	real_ofset = offset & ~0x7;  //8 bit aligned bit offset
	for(i = 0; i < cnt; i++) {
 3003d48:	eb04003f 	cmp	x1, x4
 3003d4c:	54fffda1 	b.ne	3003d00 <OTP_Get_Byte+0x38>
	if (i != cnt) { // loop no completed
		faultDetect();
	}

	return GENERAL_SUCCESS;
}
 3003d50:	529aa620 	mov	w0, #0xd531                	// #54577
 3003d54:	72a26ae0 	movk	w0, #0x1357, lsl #16
 3003d58:	910043ff 	add	sp, sp, #0x10
 3003d5c:	d65f03c0 	ret

0000000003003d60 <OTP_Program_Start>:



// 1 bit per time
int OTP_Program_Start(int bits)
{
 3003d60:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
 3003d64:	2a0003e3 	mov	w3, w0
	addr = (bits >> 3) & 0x3ff;  //10bits
	offset = bits & 0x7;		 //3bits

 	//kilopass OTP
	//2.1 need get the current OTP byte first
	OTP_Get_Byte(addr<<3, &cur_byte, 1);
 3003d68:	52800022 	mov	w2, #0x1                   	// #1

// 1 bit per time
int OTP_Program_Start(int bits)
{
	int addr, offset;
	UINT8 cur_byte = 0;
 3003d6c:	9100c3e1 	add	x1, sp, #0x30



// 1 bit per time
int OTP_Program_Start(int bits)
{
 3003d70:	f9000bfe 	str	x30, [sp,#16]
	int addr, offset;
	UINT8 cur_byte = 0;
	//1. get the parameter
	addr = (bits >> 3) & 0x3ff;  //10bits
 3003d74:	d3433073 	ubfx	x19, x3, #3, #10
	offset = bits & 0x7;		 //3bits
 3003d78:	12000874 	and	w20, w3, #0x7

 	//kilopass OTP
	//2.1 need get the current OTP byte first
	OTP_Get_Byte(addr<<3, &cur_byte, 1);
 3003d7c:	531d7260 	lsl	w0, w19, #3

// 1 bit per time
int OTP_Program_Start(int bits)
{
	int addr, offset;
	UINT8 cur_byte = 0;
 3003d80:	381ffc3f 	strb	wzr, [x1,#-1]!
	addr = (bits >> 3) & 0x3ff;  //10bits
	offset = bits & 0x7;		 //3bits

 	//kilopass OTP
	//2.1 need get the current OTP byte first
	OTP_Get_Byte(addr<<3, &cur_byte, 1);
 3003d84:	97ffffd1 	bl	3003cc8 <OTP_Get_Byte>

	//2.2 polling busy bit (0x9801_7404 bit[16]) = 0
	while ((REG32(OTP_EF_CTRL_ST)&(OTP_EF_CTRL_ST_BUSY)));
 3003d88:	d28f0082 	mov	x2, #0x7804                	// #30724
 3003d8c:	f2b30022 	movk	x2, #0x9801, lsl #16
 3003d90:	b9400041 	ldr	w1, [x2]
 3003d94:	3787ffe1 	tbnz	w1, #16, 3003d90 <OTP_Program_Start+0x30>

	//2.3  start program
	REG32(OTP_EF_CTRL) = (0x3 << 28) | (0x1 << 24) | (cur_byte << 16 | (1 << (offset + 16))) |
 3003d98:	3940bfe0 	ldrb	w0, [sp,#47]
 3003d9c:	11004283 	add	w3, w20, #0x10
 3003da0:	d28f0002 	mov	x2, #0x7800                	// #30720
 3003da4:	f2b30022 	movk	x2, #0x9801, lsl #16
 3003da8:	52800034 	mov	w20, #0x1                   	// #1
 3003dac:	52810004 	mov	w4, #0x800                 	// #2048
 3003db0:	72a62004 	movk	w4, #0x3100, lsl #16
 3003db4:	1ac32283 	lsl	w3, w20, w3
 3003db8:	2a004080 	orr	w0, w4, w0, lsl #16
 3003dbc:	2a130073 	orr	w19, w3, w19
						(0x1 << 11) | addr;

	//2.3 polling busy bit (0x9801_7404 bit[16]) = 0
	while ((REG32(OTP_EF_CTRL_ST)&(OTP_EF_CTRL_ST_BUSY)));
 3003dc0:	d28f0081 	mov	x1, #0x7804                	// #30724
 3003dc4:	f2b30021 	movk	x1, #0x9801, lsl #16
	//2.2 polling busy bit (0x9801_7404 bit[16]) = 0
	while ((REG32(OTP_EF_CTRL_ST)&(OTP_EF_CTRL_ST_BUSY)));

	//2.3  start program
	REG32(OTP_EF_CTRL) = (0x3 << 28) | (0x1 << 24) | (cur_byte << 16 | (1 << (offset + 16))) |
						(0x1 << 11) | addr;
 3003dc8:	2a130013 	orr	w19, w0, w19

	//2.2 polling busy bit (0x9801_7404 bit[16]) = 0
	while ((REG32(OTP_EF_CTRL_ST)&(OTP_EF_CTRL_ST_BUSY)));

	//2.3  start program
	REG32(OTP_EF_CTRL) = (0x3 << 28) | (0x1 << 24) | (cur_byte << 16 | (1 << (offset + 16))) |
 3003dcc:	b9000053 	str	w19, [x2]
						(0x1 << 11) | addr;

	//2.3 polling busy bit (0x9801_7404 bit[16]) = 0
	while ((REG32(OTP_EF_CTRL_ST)&(OTP_EF_CTRL_ST_BUSY)));
 3003dd0:	b9400020 	ldr	w0, [x1]
 3003dd4:	3787ffe0 	tbnz	w0, #16, 3003dd0 <OTP_Program_Start+0x70>

    udelay(0, 5);
 3003dd8:	528000a1 	mov	w1, #0x5                   	// #5
 3003ddc:	52800000 	mov	w0, #0x0                   	// #0
 3003de0:	94000735 	bl	3005ab4 <udelay>

	return OK;
}
 3003de4:	f9400bfe 	ldr	x30, [sp,#16]
 3003de8:	52800000 	mov	w0, #0x0                   	// #0
 3003dec:	a8c353f3 	ldp	x19, x20, [sp],#48
 3003df0:	d65f03c0 	ret

0000000003003df4 <get_ca_type>:
		return NOK;
	}
}

int get_ca_type(void)
{
 3003df4:	a9be7bf3 	stp	x19, x30, [sp,#-32]!
	#else
		faultDetect();
	#endif
#endif // FORCE_CA_TYPE

	UINT8 value = 0;
 3003df8:	910083f3 	add	x19, sp, #0x20
 3003dfc:	381ffe7f 	strb	wzr, [x19,#-1]!

	loopsTrap(); //random delay to avoid timing attack
 3003e00:	94000e70 	bl	30077c0 <loopsTrap>
	//read ca_type 8bits(8039:8032)
	if (OTP_Get_Byte(CA_TYPE, &value, 1) != GENERAL_SUCCESS) {
 3003e04:	52800022 	mov	w2, #0x1                   	// #1
 3003e08:	5283ec00 	mov	w0, #0x1f60                	// #8032
 3003e0c:	aa1303e1 	mov	x1, x19
 3003e10:	97ffffae 	bl	3003cc8 <OTP_Get_Byte>
 3003e14:	529aa621 	mov	w1, #0xd531                	// #54577
 3003e18:	72a26ae1 	movk	w1, #0x1357, lsl #16
 3003e1c:	6b01001f 	cmp	w0, w1
 3003e20:	54000201 	b.ne	3003e60 <get_ca_type+0x6c>
	}

#ifdef ENV_SIMULATION
	sim_debug_print(0x161aca00 | value);
#endif
	switch (value) {
 3003e24:	39407fe1 	ldrb	w1, [sp,#31]
 3003e28:	7100243f 	cmp	w1, #0x9
 3003e2c:	54000120 	b.eq	3003e50 <get_ca_type+0x5c>
			return CA_TYPE_VMX;
		case 0xa:
			return CA_TYPE_NAGRA;
		case 0:
		default:
			return CA_TYPE_RTK;
 3003e30:	7100283f 	cmp	w1, #0xa
 3003e34:	529577c0 	mov	w0, #0xabbe                	// #43966
 3003e38:	72b577c0 	movk	w0, #0xabbe, lsl #16
 3003e3c:	529bde02 	mov	w2, #0xdef0                	// #57072
 3003e40:	72bbde02 	movk	w2, #0xdef0, lsl #16
 3003e44:	1a820000 	csel	w0, w0, w2, eq
	}
}
 3003e48:	a8c27bf3 	ldp	x19, x30, [sp],#32
 3003e4c:	d65f03c0 	ret
#ifdef ENV_SIMULATION
	sim_debug_print(0x161aca00 | value);
#endif
	switch (value) {
		case 0x9: //value TBD
			return CA_TYPE_VMX;
 3003e50:	5285ffc0 	mov	w0, #0x2ffe                	// #12286
 3003e54:	72a5ffc0 	movk	w0, #0x2ffe, lsl #16
			return CA_TYPE_NAGRA;
		case 0:
		default:
			return CA_TYPE_RTK;
	}
}
 3003e58:	a8c27bf3 	ldp	x19, x30, [sp],#32
 3003e5c:	d65f03c0 	ret
	UINT8 value = 0;

	loopsTrap(); //random delay to avoid timing attack
	//read ca_type 8bits(8039:8032)
	if (OTP_Get_Byte(CA_TYPE, &value, 1) != GENERAL_SUCCESS) {
		faultDetect();
 3003e60:	94000d1b 	bl	30072cc <faultDetect>

0000000003003e64 <is_scs_activated>:
			return CA_TYPE_RTK;
	}
}

int is_scs_activated(void)
{
 3003e64:	f81e0ffe 	str	x30, [sp,#-32]!
	return FALSE;
	#endif
#else // FPGA
	unsigned char value = 0;

	OTP_Get_Byte(NAGRA_SCS_ACTIVATION, &value, 1);
 3003e68:	52800022 	mov	w2, #0x1                   	// #1
 3003e6c:	52844e20 	mov	w0, #0x2271                	// #8817
	return TRUE;
	#else
	return FALSE;
	#endif
#else // FPGA
	unsigned char value = 0;
 3003e70:	910083e1 	add	x1, sp, #0x20
 3003e74:	381ffc3f 	strb	wzr, [x1,#-1]!

	OTP_Get_Byte(NAGRA_SCS_ACTIVATION, &value, 1);
 3003e78:	97ffff94 	bl	3003cc8 <OTP_Get_Byte>
	value = (value >> 1) & 0x7; // 3-bit: [8819:8817]
 3003e7c:	39407fe0 	ldrb	w0, [sp,#31]
		return FALSE; // SCS not active
	}

	return TRUE; // SCS active
#endif // FPGA
}
 3003e80:	f84207fe 	ldr	x30, [sp],#32
	OTP_Get_Byte(NAGRA_SCS_ACTIVATION, &value, 1);
	value = (value >> 1) & 0x7; // 3-bit: [8819:8817]
#ifdef ENV_SIMULATION
	sim_debug_print(value);
#endif
	if ((value == 0) || (value == 0x1)) {
 3003e84:	d3410c00 	ubfx	x0, x0, #1, #3
 3003e88:	7100041f 	cmp	w0, #0x1
		return FALSE; // SCS not active
	}

	return TRUE; // SCS active
#endif // FPGA
}
 3003e8c:	1a9f97e0 	cset	w0, hi
 3003e90:	d65f03c0 	ret

0000000003003e94 <is_rtk_secure_boot>:

int is_rtk_secure_boot(void)
{
 3003e94:	a9be7bf3 	stp	x19, x30, [sp,#-32]!
	return TRUE;
	#else
	return FALSE;
	#endif
#else // FPGA
	unsigned char value = 0xff;
 3003e98:	12800000 	mov	w0, #0xffffffff            	// #-1
 3003e9c:	910083f3 	add	x19, sp, #0x20
 3003ea0:	381ffe60 	strb	w0, [x19,#-1]!

	loopsTrap(); //random delay to avoid timing attack
 3003ea4:	94000e47 	bl	30077c0 <loopsTrap>
	//read secure_boot_sw 8bits(6247:6240)
	if (OTP_Get_Byte(SECURE_BOOT_SW, (UINT8 *)&value, 1) != GENERAL_SUCCESS) {
 3003ea8:	52800022 	mov	w2, #0x1                   	// #1
 3003eac:	52830c00 	mov	w0, #0x1860                	// #6240
 3003eb0:	aa1303e1 	mov	x1, x19
 3003eb4:	97ffff85 	bl	3003cc8 <OTP_Get_Byte>
 3003eb8:	529aa621 	mov	w1, #0xd531                	// #54577
 3003ebc:	72a26ae1 	movk	w1, #0x1357, lsl #16
 3003ec0:	6b01001f 	cmp	w0, w1
 3003ec4:	540000e1 	b.ne	3003ee0 <is_rtk_secure_boot+0x4c>
		faultDetect();
	}

	value &= 0x7; // 3-bit: [6242:6240]
 3003ec8:	39407fe0 	ldrb	w0, [sp,#31]
		return FALSE; // non-secure boot
	}

	return TRUE; // secure boot
#endif // FPGA
}
 3003ecc:	a8c27bf3 	ldp	x19, x30, [sp],#32

	value &= 0x7; // 3-bit: [6242:6240]
#ifdef ENV_SIMULATION
	sim_debug_print(value);
#endif
	if ((value == 0) || (value == 0x1)) {
 3003ed0:	12000800 	and	w0, w0, #0x7
 3003ed4:	7100041f 	cmp	w0, #0x1
		return FALSE; // non-secure boot
	}

	return TRUE; // secure boot
#endif // FPGA
}
 3003ed8:	1a9f97e0 	cset	w0, hi
 3003edc:	d65f03c0 	ret
	unsigned char value = 0xff;

	loopsTrap(); //random delay to avoid timing attack
	//read secure_boot_sw 8bits(6247:6240)
	if (OTP_Get_Byte(SECURE_BOOT_SW, (UINT8 *)&value, 1) != GENERAL_SUCCESS) {
		faultDetect();
 3003ee0:	94000cfb 	bl	30072cc <faultDetect>

0000000003003ee4 <get_secure_boot_sw>:
#endif // FPGA
}


int get_secure_boot_sw(void)
{
 3003ee4:	a9be7bf3 	stp	x19, x30, [sp,#-32]!
	int value = 0;
 3003ee8:	910083f3 	add	x19, sp, #0x20
 3003eec:	b81fce7f 	str	wzr, [x19,#-4]!

	loopsTrap(); //random delay to avoid timing attack
 3003ef0:	94000e34 	bl	30077c0 <loopsTrap>
	//read secure_boot_sw 16bits(6255:6240)
	if (OTP_Get_Byte(SECURE_BOOT_SW, (UINT8 *)&value, 2) != GENERAL_SUCCESS) {
 3003ef4:	52800042 	mov	w2, #0x2                   	// #2
 3003ef8:	52830c00 	mov	w0, #0x1860                	// #6240
 3003efc:	aa1303e1 	mov	x1, x19
 3003f00:	97ffff72 	bl	3003cc8 <OTP_Get_Byte>
 3003f04:	529aa621 	mov	w1, #0xd531                	// #54577
 3003f08:	72a26ae1 	movk	w1, #0x1357, lsl #16
 3003f0c:	6b01001f 	cmp	w0, w1
 3003f10:	54000081 	b.ne	3003f20 <get_secure_boot_sw+0x3c>
#ifdef ENV_SIMULATION
	sim_debug_print(0x161ab00b);
	sim_debug_print(value);
#endif
	return value;
}
 3003f14:	79403be0 	ldrh	w0, [sp,#28]
 3003f18:	a8c27bf3 	ldp	x19, x30, [sp],#32
 3003f1c:	d65f03c0 	ret
	int value = 0;

	loopsTrap(); //random delay to avoid timing attack
	//read secure_boot_sw 16bits(6255:6240)
	if (OTP_Get_Byte(SECURE_BOOT_SW, (UINT8 *)&value, 2) != GENERAL_SUCCESS) {
		faultDetect();
 3003f20:	94000ceb 	bl	30072cc <faultDetect>

0000000003003f24 <OTP_Get_Word>:
}

//offset should 4-byte aligned byte offset from OTP_REG_BASE
//cnt is the word count
UINT32 OTP_Get_Word(UINT32 offset, UINT32 *ptr, UINT32 cnt)
{
 3003f24:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
	UINT32 i=0;
	UINT32 word_offset = (offset / 32) * 4;
 3003f28:	53057c00 	lsr	w0, w0, #5
}

//offset should 4-byte aligned byte offset from OTP_REG_BASE
//cnt is the word count
UINT32 OTP_Get_Word(UINT32 offset, UINT32 *ptr, UINT32 cnt)
{
 3003f2c:	aa0103f3 	mov	x19, x1
 3003f30:	a9015bf5 	stp	x21, x22, [sp,#16]
	UINT32 i=0;
	UINT32 word_offset = (offset / 32) * 4;
 3003f34:	531e7414 	lsl	w20, w0, #2
}

//offset should 4-byte aligned byte offset from OTP_REG_BASE
//cnt is the word count
UINT32 OTP_Get_Word(UINT32 offset, UINT32 *ptr, UINT32 cnt)
{
 3003f38:	2a0203f5 	mov	w21, w2
 3003f3c:	f90013fe 	str	x30, [sp,#32]
	UINT32 i=0;
	UINT32 word_offset = (offset / 32) * 4;
	UINT32 start_addr = OTP_REG_BASE + word_offset;

	loopsTrap();
 3003f40:	94000e20 	bl	30077c0 <loopsTrap>
	if (cnt > 64) {
 3003f44:	710102bf 	cmp	w21, #0x40
//cnt is the word count
UINT32 OTP_Get_Word(UINT32 offset, UINT32 *ptr, UINT32 cnt)
{
	UINT32 i=0;
	UINT32 word_offset = (offset / 32) * 4;
	UINT32 start_addr = OTP_REG_BASE + word_offset;
 3003f48:	528e0016 	mov	w22, #0x7000                	// #28672
 3003f4c:	72b30036 	movk	w22, #0x9801, lsl #16
 3003f50:	0b160280 	add	w0, w20, w22

	loopsTrap();
	if (cnt > 64) {
 3003f54:	54000228 	b.hi	3003f98 <OTP_Get_Word+0x74>
		faultDetect(); //impossble more than 256B
	}

	for(i=0; i<cnt; i++) {
 3003f58:	34000155 	cbz	w21, 3003f80 <OTP_Get_Word+0x5c>
 3003f5c:	0b150ac3 	add	w3, w22, w21, lsl #2
 3003f60:	aa1303e1 	mov	x1, x19
 3003f64:	0b140063 	add	w3, w3, w20
		*(ptr + i) = REG32( start_addr + 4 * i );
 3003f68:	2a0003e2 	mov	w2, w0
 3003f6c:	11001000 	add	w0, w0, #0x4
	loopsTrap();
	if (cnt > 64) {
		faultDetect(); //impossble more than 256B
	}

	for(i=0; i<cnt; i++) {
 3003f70:	6b03001f 	cmp	w0, w3
		*(ptr + i) = REG32( start_addr + 4 * i );
 3003f74:	b9400042 	ldr	w2, [x2]
 3003f78:	b8004422 	str	w2, [x1],#4
	loopsTrap();
	if (cnt > 64) {
		faultDetect(); //impossble more than 256B
	}

	for(i=0; i<cnt; i++) {
 3003f7c:	54ffff61 	b.ne	3003f68 <OTP_Get_Word+0x44>
	if (i != cnt) { // loop no completed
		faultDetect();
	}

	return GENERAL_SUCCESS;
}
 3003f80:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3003f84:	f94013fe 	ldr	x30, [sp,#32]
 3003f88:	529aa620 	mov	w0, #0xd531                	// #54577
 3003f8c:	72a26ae0 	movk	w0, #0x1357, lsl #16
 3003f90:	a8c353f3 	ldp	x19, x20, [sp],#48
 3003f94:	d65f03c0 	ret
	UINT32 word_offset = (offset / 32) * 4;
	UINT32 start_addr = OTP_REG_BASE + word_offset;

	loopsTrap();
	if (cnt > 64) {
		faultDetect(); //impossble more than 256B
 3003f98:	94000ccd 	bl	30072cc <faultDetect>

0000000003003f9c <OTP_JUDGE_BIT>:
UINT32 OTP_JUDGE_BIT(UINT32 offset)
{
    UINT32 div_n=0, rem_n=0;
    UINT32 align_n=0, align_rem_n=0, real_n=0;

    rem_n = offset%8;
 3003f9c:	12000802 	and	w2, w0, #0x7
    div_n = offset/8;
 3003fa0:	53037c00 	lsr	w0, w0, #3

    align_n = div_n & ~0x3;
 3003fa4:	121e7403 	and	w3, w0, #0xfffffffc
    align_rem_n = div_n & 0x3;

    real_n = REG32(OTP_REG_BASE + align_n);
 3003fa8:	528e0001 	mov	w1, #0x7000                	// #28672
 3003fac:	72b30021 	movk	w1, #0x9801, lsl #16
 3003fb0:	0b010061 	add	w1, w3, w1
    return(((real_n >>(align_rem_n*8)) >> rem_n)&1);
 3003fb4:	531d0400 	ubfiz	w0, w0, #3, #2
    div_n = offset/8;

    align_n = div_n & ~0x3;
    align_rem_n = div_n & 0x3;

    real_n = REG32(OTP_REG_BASE + align_n);
 3003fb8:	2a0103e1 	mov	w1, w1
 3003fbc:	b9400021 	ldr	w1, [x1]
    return(((real_n >>(align_rem_n*8)) >> rem_n)&1);
 3003fc0:	1ac02420 	lsr	w0, w1, w0
 3003fc4:	1ac22400 	lsr	w0, w0, w2
}
 3003fc8:	12000000 	and	w0, w0, #0x1
 3003fcc:	d65f03c0 	ret

0000000003003fd0 <OTP_Write>:

UINT32 OTP_Write(UINT32 startbit, UINT32 totalbytes, UINT8 * src_array)
{
 3003fd0:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
 3003fd4:	a9015bf5 	stp	x21, x22, [sp,#16]
 3003fd8:	f90013fe 	str	x30, [sp,#32]
    printf("start program : start\n");
    printf("startbit = %d, totalbytes = %d\n",startbit,totalbytes);
    #endif


    for(i=0,j=0 ; i<totalbytes*8 ; i++,j=i/8)
 3003fdc:	531d7035 	lsl	w21, w1, #3
 3003fe0:	340002b5 	cbz	w21, 3004034 <OTP_Write+0x64>
 3003fe4:	aa0203f4 	mov	x20, x2
 3003fe8:	2a0003f6 	mov	w22, w0
 3003fec:	52800003 	mov	w3, #0x0                   	// #0
 3003ff0:	52800013 	mov	w19, #0x0                   	// #0
 3003ff4:	14000005 	b	3004008 <OTP_Write+0x38>
 3003ff8:	11000673 	add	w19, w19, #0x1
 3003ffc:	6b15027f 	cmp	w19, w21
 3004000:	53037e63 	lsr	w3, w19, #3
 3004004:	54000180 	b.eq	3004034 <OTP_Write+0x64>
        #ifdef EFUSE_DBG
        if ((i % 8) == 0)
            printf("\nByte[%d]: ",j);
        #endif
        rem_val = i%8;
        real_bit = (*(src_array+j) >> rem_val) & 0x1;
 3004008:	2a0303e3 	mov	w3, w3
    {
        #ifdef EFUSE_DBG
        if ((i % 8) == 0)
            printf("\nByte[%d]: ",j);
        #endif
        rem_val = i%8;
 300400c:	12000a65 	and	w5, w19, #0x7
        real_bit = (*(src_array+j) >> rem_val) & 0x1;
 3004010:	38636a84 	ldrb	w4, [x20,x3]
 3004014:	1ac52883 	asr	w3, w4, w5
        if (real_bit == 0x1)
 3004018:	3607ff03 	tbz	w3, #0, 3003ff8 <OTP_Write+0x28>
        {
            OTP_Program_Start(startbit+i);
 300401c:	0b160260 	add	w0, w19, w22
    printf("start program : start\n");
    printf("startbit = %d, totalbytes = %d\n",startbit,totalbytes);
    #endif


    for(i=0,j=0 ; i<totalbytes*8 ; i++,j=i/8)
 3004020:	11000673 	add	w19, w19, #0x1
        #endif
        rem_val = i%8;
        real_bit = (*(src_array+j) >> rem_val) & 0x1;
        if (real_bit == 0x1)
        {
            OTP_Program_Start(startbit+i);
 3004024:	97ffff4f 	bl	3003d60 <OTP_Program_Start>
    printf("start program : start\n");
    printf("startbit = %d, totalbytes = %d\n",startbit,totalbytes);
    #endif


    for(i=0,j=0 ; i<totalbytes*8 ; i++,j=i/8)
 3004028:	6b15027f 	cmp	w19, w21
 300402c:	53037e63 	lsr	w3, w19, #3
 3004030:	54fffec1 	b.ne	3004008 <OTP_Write+0x38>

    OTP_Program_End();
    #ifdef EFUSE_DBG
    printf("\nstart program : end\n");
    #endif
}
 3004034:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3004038:	f94013fe 	ldr	x30, [sp,#32]
 300403c:	a8c353f3 	ldp	x19, x20, [sp],#48
	if (i != (totalbytes*8)) // loop no completed
	{
		faultDetect();
	}

    OTP_Program_End();
 3004040:	17ffff0f 	b	3003c7c <OTP_Program_End>

0000000003004044 <get_rsa_key>:
    printf("\nstart program : end\n");
    #endif
}

int get_rsa_key(unsigned int key_sel, unsigned char *key_buf)
{
 3004044:	f81f0ffe 	str	x30, [sp,#-16]!
	unsigned int offset;

	if (key_buf == NULL) {
 3004048:	b4000161 	cbz	x1, 3004074 <get_rsa_key+0x30>
		return ERR_INVALID_PARAM;
	}

	switch (key_sel) {
 300404c:	7100041f 	cmp	w0, #0x1
 3004050:	54000180 	b.eq	3004080 <get_rsa_key+0x3c>
 3004054:	7100081f 	cmp	w0, #0x2
 3004058:	540000e1 	b.ne	3004074 <get_rsa_key+0x30>
		case 1:
			offset = KRSA1;
			break;
		case 2:
			offset = KRSA2;
 300405c:	52810000 	mov	w0, #0x800                 	// #2048
			break;
		default:
			return ERR_INVALID_PARAM;
	}

	OTP_Get_Word(offset, key_buf, 64);
 3004060:	52800802 	mov	w2, #0x40                  	// #64
 3004064:	97ffffb0 	bl	3003f24 <OTP_Get_Word>
	return OK;
 3004068:	52800000 	mov	w0, #0x0                   	// #0
}
 300406c:	f84107fe 	ldr	x30, [sp],#16
 3004070:	d65f03c0 	ret
			break;
		case 2:
			offset = KRSA2;
			break;
		default:
			return ERR_INVALID_PARAM;
 3004074:	52801260 	mov	w0, #0x93                  	// #147
	}

	OTP_Get_Word(offset, key_buf, 64);
	return OK;
}
 3004078:	f84107fe 	ldr	x30, [sp],#16
 300407c:	d65f03c0 	ret
		return ERR_INVALID_PARAM;
	}

	switch (key_sel) {
		case 1:
			offset = KRSA1;
 3004080:	52800000 	mov	w0, #0x0                   	// #0
 3004084:	17fffff7 	b	3004060 <get_rsa_key+0x1c>

0000000003004088 <get_RTK_chip_id>:
	OTP_Get_Word(offset, key_buf, 64);
	return OK;
}

int get_RTK_chip_id(unsigned int buf[4])
{
 3004088:	aa0003e1 	mov	x1, x0
 300408c:	f81f0ffe 	str	x30, [sp,#-16]!
	if (buf == NULL) {
		return ERR_INVALID_PARAM;
 3004090:	52801260 	mov	w0, #0x93                  	// #147
	return OK;
}

int get_RTK_chip_id(unsigned int buf[4])
{
	if (buf == NULL) {
 3004094:	b40000a1 	cbz	x1, 30040a8 <get_RTK_chip_id+0x20>
		return ERR_INVALID_PARAM;
	}

	OTP_Get_Word(RTK_CHIP_ID, buf, 4);
 3004098:	52800082 	mov	w2, #0x4                   	// #4
 300409c:	5283cc00 	mov	w0, #0x1e60                	// #7776
 30040a0:	97ffffa1 	bl	3003f24 <OTP_Get_Word>
	return OK;
 30040a4:	52800000 	mov	w0, #0x0                   	// #0
}
 30040a8:	f84107fe 	ldr	x30, [sp],#16
 30040ac:	d65f03c0 	ret

00000000030040b0 <RCP_flash_key_operation>:
    p_tp_key_info[0] = 0;
    p_tp_key_info[1] = 0;
}

static int RCP_flash_key_operation(unsigned int option, unsigned int p_input[4], unsigned int p_output[4])
{
 30040b0:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
 30040b4:	a9015bf5 	stp	x21, x22, [sp,#16]
 30040b8:	a90263f7 	stp	x23, x24, [sp,#32]
 30040bc:	a9037bf9 	stp	x25, x30, [sp,#48]
	int i = 0;
	unsigned int tmp = 0;
	unsigned int is_enc = option & FLASH_KEY_OPTION_ENCRYPT;
	unsigned int need_swap_endian = option & FLASH_KEY_OPTION_SWAP_ENDIAN;

	if ((p_input == NULL) || (p_output == NULL)) {
 30040c0:	b4000041 	cbz	x1, 30040c8 <RCP_flash_key_operation+0x18>
 30040c4:	b50000e2 	cbnz	x2, 30040e0 <RCP_flash_key_operation+0x30>
		return ERR_INVALID_PARAM;
 30040c8:	52801260 	mov	w0, #0x93                  	// #147
		}
		p_output[i] = tmp;
	}

	return OK;
}
 30040cc:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30040d0:	a94263f7 	ldp	x23, x24, [sp,#32]
 30040d4:	a9437bf9 	ldp	x25, x30, [sp,#48]
 30040d8:	a8c453f3 	ldp	x19, x20, [sp],#64
 30040dc:	d65f03c0 	ret
		return ERR_INVALID_PARAM;
	}

	// check root_key_ready bit
	while (count > 0) {
		if (REG32(CP_FLASH_KEY_CTRL) & 0x4) {
 30040e0:	d28b1205 	mov	x5, #0x5890                	// #22672
 30040e4:	f2b30025 	movk	x5, #0x9801, lsl #16
 30040e8:	52820003 	mov	w3, #0x1000                	// #4096
 30040ec:	14000002 	b	30040f4 <RCP_flash_key_operation+0x44>
	if ((p_input == NULL) || (p_output == NULL)) {
		return ERR_INVALID_PARAM;
	}

	// check root_key_ready bit
	while (count > 0) {
 30040f0:	54000740 	b.eq	30041d8 <RCP_flash_key_operation+0x128>
		if (REG32(CP_FLASH_KEY_CTRL) & 0x4) {
 30040f4:	b94000a4 	ldr	w4, [x5]
	if ((p_input == NULL) || (p_output == NULL)) {
		return ERR_INVALID_PARAM;
	}

	// check root_key_ready bit
	while (count > 0) {
 30040f8:	71000463 	subs	w3, w3, #0x1
		if (REG32(CP_FLASH_KEY_CTRL) & 0x4) {
 30040fc:	3617ffa4 	tbz	w4, #2, 30040f0 <RCP_flash_key_operation+0x40>
 3004100:	92b30039 	mov	x25, #0xffffffff67feffff    	// #-2550202369
{
	int count = FLASH_KEY_CTRL_TIMEOUT;
	int i = 0;
	unsigned int tmp = 0;
	unsigned int is_enc = option & FLASH_KEY_OPTION_ENCRYPT;
	unsigned int need_swap_endian = option & FLASH_KEY_OPTION_SWAP_ENDIAN;
 3004104:	d28b1293 	mov	x19, #0x5894                	// #22676
 3004108:	f2b30033 	movk	x19, #0x9801, lsl #16
	if (count <= 0) {
		return ERR_TIMEOUT;
	}

	// fill input key
	for (i = 0; i < 4; i++) {
 300410c:	d28b1498 	mov	x24, #0x58a4                	// #22692
 3004110:	f2b30038 	movk	x24, #0x9801, lsl #16
 3004114:	aa0203f5 	mov	x21, x2
 3004118:	2a0003f6 	mov	w22, w0
 300411c:	aa0103f4 	mov	x20, x1
{
	int count = FLASH_KEY_CTRL_TIMEOUT;
	int i = 0;
	unsigned int tmp = 0;
	unsigned int is_enc = option & FLASH_KEY_OPTION_ENCRYPT;
	unsigned int need_swap_endian = option & FLASH_KEY_OPTION_SWAP_ENDIAN;
 3004120:	121f0017 	and	w23, w0, #0x2
 3004124:	f294ed99 	movk	x25, #0xa76c
 3004128:	8b190260 	add	x0, x19, x25
		return ERR_TIMEOUT;
	}

	// fill input key
	for (i = 0; i < 4; i++) {
		tmp = p_input[i];
 300412c:	b8606a80 	ldr	w0, [x20,x0]
		if(need_swap_endian) {
 3004130:	350004d7 	cbnz	w23, 30041c8 <RCP_flash_key_operation+0x118>
			tmp = swap_endian(tmp);
		}
		REG32(CP_FLASH_ENC_KEY + i * 4) = tmp;
 3004134:	b8004660 	str	w0, [x19],#4
	if (count <= 0) {
		return ERR_TIMEOUT;
	}

	// fill input key
	for (i = 0; i < 4; i++) {
 3004138:	eb18027f 	cmp	x19, x24
 300413c:	54ffff61 	b.ne	3004128 <RCP_flash_key_operation+0x78>
		}
		REG32(CP_FLASH_ENC_KEY + i * 4) = tmp;
	}

	// set encrypt/decrypt flag and trigger go bit
	tmp = REG32(CP_FLASH_KEY_CTRL);
 3004140:	d28b1202 	mov	x2, #0x5890                	// #22672
 3004144:	f2b30022 	movk	x2, #0x9801, lsl #16
static int RCP_flash_key_operation(unsigned int option, unsigned int p_input[4], unsigned int p_output[4])
{
	int count = FLASH_KEY_CTRL_TIMEOUT;
	int i = 0;
	unsigned int tmp = 0;
	unsigned int is_enc = option & FLASH_KEY_OPTION_ENCRYPT;
 3004148:	120002c0 	and	w0, w22, #0x1
	REG32(CP_FLASH_KEY_CTRL) = (tmp | 0x1);

	// polling done
	count = FLASH_KEY_CTRL_TIMEOUT;
	while (count > 0) {
		if (REG32(CP_FLASH_KEY_CTRL) & 0x1) {
 300414c:	aa0203e3 	mov	x3, x2
	}

	// set encrypt/decrypt flag and trigger go bit
	tmp = REG32(CP_FLASH_KEY_CTRL);
	if (is_enc) {
		tmp |= 0x2;
 3004150:	6b1f001f 	cmp	w0, wzr
	}
	else {
		tmp &= ~0x2;
	}
	REG32(CP_FLASH_KEY_CTRL) = (tmp | 0x1);
 3004154:	52820000 	mov	w0, #0x1000                	// #4096
		}
		REG32(CP_FLASH_ENC_KEY + i * 4) = tmp;
	}

	// set encrypt/decrypt flag and trigger go bit
	tmp = REG32(CP_FLASH_KEY_CTRL);
 3004158:	b9400041 	ldr	w1, [x2]
	if (is_enc) {
		tmp |= 0x2;
 300415c:	321f0024 	orr	w4, w1, #0x2
 3004160:	121e7821 	and	w1, w1, #0xfffffffd
 3004164:	1a840021 	csel	w1, w1, w4, eq
	}
	else {
		tmp &= ~0x2;
	}
	REG32(CP_FLASH_KEY_CTRL) = (tmp | 0x1);
 3004168:	32000021 	orr	w1, w1, #0x1
 300416c:	b9000041 	str	w1, [x2]
 3004170:	14000002 	b	3004178 <RCP_flash_key_operation+0xc8>

	// polling done
	count = FLASH_KEY_CTRL_TIMEOUT;
	while (count > 0) {
 3004174:	54000320 	b.eq	30041d8 <RCP_flash_key_operation+0x128>
		if (REG32(CP_FLASH_KEY_CTRL) & 0x1) {
 3004178:	b9400061 	ldr	w1, [x3]
	}
	REG32(CP_FLASH_KEY_CTRL) = (tmp | 0x1);

	// polling done
	count = FLASH_KEY_CTRL_TIMEOUT;
	while (count > 0) {
 300417c:	71000400 	subs	w0, w0, #0x1
		if (REG32(CP_FLASH_KEY_CTRL) & 0x1) {
 3004180:	3607ffa1 	tbz	w1, #0, 3004174 <RCP_flash_key_operation+0xc4>
 3004184:	92b30036 	mov	x22, #0xffffffff67feffff    	// #-2550202369
	if (count <= 0) {
		return ERR_TIMEOUT;
	}

	// get output
	for (i = 0; i < 4; i++) {
 3004188:	d28b1694 	mov	x20, #0x58b4                	// #22708
 300418c:	f2b30034 	movk	x20, #0x9801, lsl #16
 3004190:	f294eb96 	movk	x22, #0xa75c
		tmp = REG32(CP_FLASH_KEY + i * 4);
 3004194:	b9400260 	ldr	w0, [x19]
		if(need_swap_endian) {
 3004198:	350001d7 	cbnz	w23, 30041d0 <RCP_flash_key_operation+0x120>
 300419c:	8b160261 	add	x1, x19, x22
 30041a0:	91001273 	add	x19, x19, #0x4
	if (count <= 0) {
		return ERR_TIMEOUT;
	}

	// get output
	for (i = 0; i < 4; i++) {
 30041a4:	eb14027f 	cmp	x19, x20
		tmp = REG32(CP_FLASH_KEY + i * 4);
		if(need_swap_endian) {
			tmp = swap_endian(tmp);
		}
		p_output[i] = tmp;
 30041a8:	b8216aa0 	str	w0, [x21,x1]
	if (count <= 0) {
		return ERR_TIMEOUT;
	}

	// get output
	for (i = 0; i < 4; i++) {
 30041ac:	54ffff41 	b.ne	3004194 <RCP_flash_key_operation+0xe4>
			tmp = swap_endian(tmp);
		}
		p_output[i] = tmp;
	}

	return OK;
 30041b0:	52800000 	mov	w0, #0x0                   	// #0
}
 30041b4:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30041b8:	a94263f7 	ldp	x23, x24, [sp,#32]
 30041bc:	a9437bf9 	ldp	x25, x30, [sp,#48]
 30041c0:	a8c453f3 	ldp	x19, x20, [sp],#64
 30041c4:	d65f03c0 	ret

	// fill input key
	for (i = 0; i < 4; i++) {
		tmp = p_input[i];
		if(need_swap_endian) {
			tmp = swap_endian(tmp);
 30041c8:	94000c31 	bl	300728c <swap_endian>
 30041cc:	17ffffda 	b	3004134 <RCP_flash_key_operation+0x84>

	// get output
	for (i = 0; i < 4; i++) {
		tmp = REG32(CP_FLASH_KEY + i * 4);
		if(need_swap_endian) {
			tmp = swap_endian(tmp);
 30041d0:	94000c2f 	bl	300728c <swap_endian>
 30041d4:	17fffff2 	b	300419c <RCP_flash_key_operation+0xec>
			break;
		}
		count--;
	}
	if (count <= 0) {
		return ERR_TIMEOUT;
 30041d8:	52801220 	mov	w0, #0x91                  	// #145
 30041dc:	17ffffbc 	b	30040cc <RCP_flash_key_operation+0x1c>

00000000030041e0 <RCP_AES128_ECB_CW_CW_CW>:
    unsigned char input[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 
                               0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
    unsigned char key[16];
    unsigned char output[16];

    if ((pKey != NULL) || (pDataIn != NULL) || (pDataOut != NULL))
 30041e0:	eb1f00bf 	cmp	x5, xzr
    unsigned char*          pKey,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
 30041e4:	53001c00 	uxtb	w0, w0
 30041e8:	a9b953f3 	stp	x19, x20, [sp,#-112]!
    unsigned char input[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 
                               0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
    unsigned char key[16];
    unsigned char output[16];

    if ((pKey != NULL) || (pDataIn != NULL) || (pDataOut != NULL))
 30041ec:	1a9f07e8 	cset	w8, ne
 30041f0:	eb1f00df 	cmp	x6, xzr
 30041f4:	1a9f07e5 	cset	w5, ne
    unsigned char*          pKey,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
 30041f8:	f9002bfe 	str	x30, [sp,#80]
 30041fc:	a9015bf5 	stp	x21, x22, [sp,#16]
 3004200:	a90263f7 	stp	x23, x24, [sp,#32]
 3004204:	a9036bf9 	stp	x25, x26, [sp,#48]
 3004208:	a90473fb 	stp	x27, x28, [sp,#64]
    unsigned char input[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 
                               0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
    unsigned char key[16];
    unsigned char output[16];

    if ((pKey != NULL) || (pDataIn != NULL) || (pDataOut != NULL))
 300420c:	2a050105 	orr	w5, w8, w5
 3004210:	35000905 	cbnz	w5, 3004330 <RCP_AES128_ECB_CW_CW_CW+0x150>
 3004214:	b50008e4 	cbnz	x4, 3004330 <RCP_AES128_ECB_CW_CW_CW+0x150>
        return -1;


    // data input: CW#1_0,, key: CW#1_0, output: CW#1_0 or CW#1_1
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 3004218:	d28b0e93 	mov	x19, #0x5874                	// #22644
 300421c:	f2b30033 	movk	x19, #0x9801, lsl #16
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_CW | REG_SET1_KEY_MODE_CW;
 3004220:	d28b0f06 	mov	x6, #0x5878                	// #22648
 3004224:	f2b30026 	movk	x6, #0x9801, lsl #16
 3004228:	b9006fe7 	str	w7, [sp,#108]
    if ((pKey != NULL) || (pDataIn != NULL) || (pDataOut != NULL))
        return -1;


    // data input: CW#1_0,, key: CW#1_0, output: CW#1_0 or CW#1_1
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 300422c:	6b1f001f 	cmp	w0, wzr
 3004230:	528005c4 	mov	w4, #0x2e                  	// #46
 3004234:	72a00044 	movk	w4, #0x2, lsl #16
 3004238:	528005e0 	mov	w0, #0x2f                  	// #47
 300423c:	72a00040 	movk	w0, #0x2, lsl #16
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_CW | REG_SET1_KEY_MODE_CW;
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx) | REG_SET2_INPUT_ENTRY(InputCwIdx) | REG_SET2_KEY_ENTRY(KeyCwIdx);
 3004240:	d28b0f85 	mov	x5, #0x587c                	// #22652
 3004244:	f2b30025 	movk	x5, #0x9801, lsl #16
    if ((pKey != NULL) || (pDataIn != NULL) || (pDataOut != NULL))
        return -1;


    // data input: CW#1_0,, key: CW#1_0, output: CW#1_0 or CW#1_1
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 3004248:	1a841004 	csel	w4, w0, w4, ne
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_CW | REG_SET1_KEY_MODE_CW;
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx) | REG_SET2_INPUT_ENTRY(InputCwIdx) | REG_SET2_KEY_ENTRY(KeyCwIdx);
 300424c:	53181821 	ubfiz	w1, w1, #8, #7
    if ((pKey != NULL) || (pDataIn != NULL) || (pDataOut != NULL))
        return -1;


    // data input: CW#1_0,, key: CW#1_0, output: CW#1_0 or CW#1_1
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 3004250:	b9000264 	str	w4, [x19]
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_CW | REG_SET1_KEY_MODE_CW;
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx) | REG_SET2_INPUT_ENTRY(InputCwIdx) | REG_SET2_KEY_ENTRY(KeyCwIdx);
 3004254:	53101840 	ubfiz	w0, w2, #16, #7
 3004258:	53081863 	ubfiz	w3, w3, #24, #7
 300425c:	2a010000 	orr	w0, w0, w1
        return -1;


    // data input: CW#1_0,, key: CW#1_0, output: CW#1_0 or CW#1_1
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_CW | REG_SET1_KEY_MODE_CW;
 3004260:	528008a1 	mov	w1, #0x45                  	// #69
 3004264:	b90000c1 	str	w1, [x6]
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx) | REG_SET2_INPUT_ENTRY(InputCwIdx) | REG_SET2_KEY_ENTRY(KeyCwIdx);
 3004268:	2a030000 	orr	w0, w0, w3
 300426c:	b90000a0 	str	w0, [x5]
 3004270:	2a0703f4 	mov	w20, w7
    sync();
 3004274:	97fff026 	bl	300030c <sync>

	loopsTrap(); //random delay to avoid timing attack
 3004278:	94000d52 	bl	30077c0 <loopsTrap>

    while(DataLen >= 16)
 300427c:	71003e9f 	cmp	w20, #0xf
 3004280:	54000689 	b.ls	3004350 <RCP_AES128_ECB_CW_CW_CW+0x170>
 3004284:	2a1403fc 	mov	w28, w20
    {
        B16TL4(p_reg_data_in, input);
 3004288:	d28b089b 	mov	x27, #0x5844                	// #22596
 300428c:	f2b3003b 	movk	x27, #0x9801, lsl #16
 3004290:	5284467a 	mov	w26, #0x2233                	// #8755
 3004294:	72a0023a 	movk	w26, #0x11, lsl #16
 3004298:	d28b0919 	mov	x25, #0x5848                	// #22600
 300429c:	f2b30039 	movk	x25, #0x9801, lsl #16
 30042a0:	528ccef8 	mov	w24, #0x6677                	// #26231
 30042a4:	72a88ab8 	movk	w24, #0x4455, lsl #16
 30042a8:	d28b0997 	mov	x23, #0x584c                	// #22604
 30042ac:	f2b30037 	movk	x23, #0x9801, lsl #16
 30042b0:	52955776 	mov	w22, #0xaabb                	// #43707
 30042b4:	72b11336 	movk	w22, #0x8899, lsl #16
 30042b8:	d28b0a15 	mov	x21, #0x5850                	// #22608
 30042bc:	f2b30035 	movk	x21, #0x9801, lsl #16
 30042c0:	529ddff4 	mov	w20, #0xeeff                	// #61183
 30042c4:	72b99bb4 	movk	w20, #0xccdd, lsl #16
 30042c8:	b900037a 	str	w26, [x27]
        sync();        

        L4TB16(output, p_reg_data_out);
        sync();

        DataLen -= 16;
 30042cc:	5100439c 	sub	w28, w28, #0x10

	loopsTrap(); //random delay to avoid timing attack

    while(DataLen >= 16)
    {
        B16TL4(p_reg_data_in, input);
 30042d0:	b9000338 	str	w24, [x25]
 30042d4:	b90002f6 	str	w22, [x23]
 30042d8:	b90002b4 	str	w20, [x21]
        sync();        
 30042dc:	97fff00c 	bl	300030c <sync>

        L4TB16(output, p_reg_data_out);
        sync();
 30042e0:	97fff00b 	bl	300030c <sync>

        DataLen -= 16;
        out_len += 16;

        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
 30042e4:	b9400260 	ldr	w0, [x19]
 30042e8:	121d7800 	and	w0, w0, #0xfffffffb
 30042ec:	b9000260 	str	w0, [x19]
        sync();
 30042f0:	97fff007 	bl	300030c <sync>
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx) | REG_SET2_INPUT_ENTRY(InputCwIdx) | REG_SET2_KEY_ENTRY(KeyCwIdx);
    sync();

	loopsTrap(); //random delay to avoid timing attack

    while(DataLen >= 16)
 30042f4:	71003f9f 	cmp	w28, #0xf
 30042f8:	54fffe88 	b.hi	30042c8 <RCP_AES128_ECB_CW_CW_CW+0xe8>
 30042fc:	b9406fe1 	ldr	w1, [sp,#108]
 3004300:	51004020 	sub	w0, w1, #0x10
 3004304:	12000c3c 	and	w28, w1, #0xf
 3004308:	121c6c00 	and	w0, w0, #0xfffffff0
 300430c:	11004000 	add	w0, w0, #0x10
        out_len += 16;

        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
        sync();
    }
	if (DataLen > 0) // loop no completed
 3004310:	3500027c 	cbnz	w28, 300435c <RCP_AES128_ECB_CW_CW_CW+0x17c>
	{
		faultDetect();
	} 
    return out_len;  
}
 3004314:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3004318:	a94263f7 	ldp	x23, x24, [sp,#32]
 300431c:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3004320:	a94473fb 	ldp	x27, x28, [sp,#64]
 3004324:	f9402bfe 	ldr	x30, [sp,#80]
 3004328:	a8c753f3 	ldp	x19, x20, [sp],#112
 300432c:	d65f03c0 	ret
 3004330:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3004334:	a94263f7 	ldp	x23, x24, [sp,#32]
 3004338:	a9436bf9 	ldp	x25, x26, [sp,#48]
 300433c:	a94473fb 	ldp	x27, x28, [sp,#64]
 3004340:	f9402bfe 	ldr	x30, [sp,#80]
                               0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
    unsigned char key[16];
    unsigned char output[16];

    if ((pKey != NULL) || (pDataIn != NULL) || (pDataOut != NULL))
        return -1;
 3004344:	12800000 	mov	w0, #0xffffffff            	// #-1
	if (DataLen > 0) // loop no completed
	{
		faultDetect();
	} 
    return out_len;  
}
 3004348:	a8c753f3 	ldp	x19, x20, [sp],#112
 300434c:	d65f03c0 	ret
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx) | REG_SET2_INPUT_ENTRY(InputCwIdx) | REG_SET2_KEY_ENTRY(KeyCwIdx);
    sync();

	loopsTrap(); //random delay to avoid timing attack

    while(DataLen >= 16)
 3004350:	b9406ffc 	ldr	w28, [sp,#108]
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
    int out_len = 0;
 3004354:	52800000 	mov	w0, #0x0                   	// #0
 3004358:	17ffffee 	b	3004310 <RCP_AES128_ECB_CW_CW_CW+0x130>
        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
        sync();
    }
	if (DataLen > 0) // loop no completed
	{
		faultDetect();
 300435c:	94000bdc 	bl	30072cc <faultDetect>

0000000003004360 <RCP_AES128_ECB_CONST_OTP_CW>:
    unsigned char input[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 
                               0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
    unsigned char key[16];
    unsigned char output[16];

    if ((pKey != NULL) || (pDataIn != NULL) || (pDataOut != NULL))
 3004360:	eb1f00bf 	cmp	x5, xzr
    unsigned char*          pKey,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
 3004364:	53001c00 	uxtb	w0, w0
 3004368:	a9b953f3 	stp	x19, x20, [sp,#-112]!
    unsigned char input[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 
                               0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
    unsigned char key[16];
    unsigned char output[16];

    if ((pKey != NULL) || (pDataIn != NULL) || (pDataOut != NULL))
 300436c:	1a9f07e2 	cset	w2, ne
 3004370:	eb1f00df 	cmp	x6, xzr
 3004374:	1a9f07e1 	cset	w1, ne
    unsigned char*          pKey,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
 3004378:	f9002bfe 	str	x30, [sp,#80]
 300437c:	a9015bf5 	stp	x21, x22, [sp,#16]
 3004380:	a90263f7 	stp	x23, x24, [sp,#32]
 3004384:	a9036bf9 	stp	x25, x26, [sp,#48]
 3004388:	a90473fb 	stp	x27, x28, [sp,#64]
    unsigned char input[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 
                               0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
    unsigned char key[16];
    unsigned char output[16];

    if ((pKey != NULL) || (pDataIn != NULL) || (pDataOut != NULL))
 300438c:	2a010041 	orr	w1, w2, w1
 3004390:	35000881 	cbnz	w1, 30044a0 <RCP_AES128_ECB_CONST_OTP_CW+0x140>
 3004394:	b5000864 	cbnz	x4, 30044a0 <RCP_AES128_ECB_CONST_OTP_CW+0x140>
        return -1;

    // data input: OTP, key: constant, output: CW#1_0 or CW#1_1
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 3004398:	d28b0e93 	mov	x19, #0x5874                	// #22644
 300439c:	f2b30033 	movk	x19, #0x9801, lsl #16
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_OTP | REG_SET1_KEY_MODE_CONST;
 30043a0:	d28b0f02 	mov	x2, #0x5878                	// #22648
 30043a4:	f2b30022 	movk	x2, #0x9801, lsl #16
 30043a8:	b9006fe7 	str	w7, [sp,#108]

    if ((pKey != NULL) || (pDataIn != NULL) || (pDataOut != NULL))
        return -1;

    // data input: OTP, key: constant, output: CW#1_0 or CW#1_1
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 30043ac:	6b1f001f 	cmp	w0, wzr
 30043b0:	528005c4 	mov	w4, #0x2e                  	// #46
 30043b4:	72a00044 	movk	w4, #0x2, lsl #16
 30043b8:	528005e0 	mov	w0, #0x2f                  	// #47
 30043bc:	72a00040 	movk	w0, #0x2, lsl #16
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_OTP | REG_SET1_KEY_MODE_CONST;
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx);
 30043c0:	d28b0f81 	mov	x1, #0x587c                	// #22652
 30043c4:	f2b30021 	movk	x1, #0x9801, lsl #16

    if ((pKey != NULL) || (pDataIn != NULL) || (pDataOut != NULL))
        return -1;

    // data input: OTP, key: constant, output: CW#1_0 or CW#1_1
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 30043c8:	1a841000 	csel	w0, w0, w4, ne
 30043cc:	b9000260 	str	w0, [x19]
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_OTP | REG_SET1_KEY_MODE_CONST;
 30043d0:	52800120 	mov	w0, #0x9                   	// #9
 30043d4:	b9000040 	str	w0, [x2]
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx);
 30043d8:	53081863 	ubfiz	w3, w3, #24, #7
 30043dc:	b9000023 	str	w3, [x1]
 30043e0:	2a0703f4 	mov	w20, w7
    sync();
 30043e4:	97ffefca 	bl	300030c <sync>

	loopsTrap(); //random delay to avoid timing attack
 30043e8:	94000cf6 	bl	30077c0 <loopsTrap>

    while(DataLen >= 16)
 30043ec:	71003e9f 	cmp	w20, #0xf
 30043f0:	54000689 	b.ls	30044c0 <RCP_AES128_ECB_CONST_OTP_CW+0x160>
 30043f4:	2a1403fc 	mov	w28, w20
    {
        B16TL4(p_reg_data_in, input);
 30043f8:	d28b089b 	mov	x27, #0x5844                	// #22596
 30043fc:	f2b3003b 	movk	x27, #0x9801, lsl #16
 3004400:	5284467a 	mov	w26, #0x2233                	// #8755
 3004404:	72a0023a 	movk	w26, #0x11, lsl #16
 3004408:	d28b0919 	mov	x25, #0x5848                	// #22600
 300440c:	f2b30039 	movk	x25, #0x9801, lsl #16
 3004410:	528ccef8 	mov	w24, #0x6677                	// #26231
 3004414:	72a88ab8 	movk	w24, #0x4455, lsl #16
 3004418:	d28b0997 	mov	x23, #0x584c                	// #22604
 300441c:	f2b30037 	movk	x23, #0x9801, lsl #16
 3004420:	52955776 	mov	w22, #0xaabb                	// #43707
 3004424:	72b11336 	movk	w22, #0x8899, lsl #16
 3004428:	d28b0a15 	mov	x21, #0x5850                	// #22608
 300442c:	f2b30035 	movk	x21, #0x9801, lsl #16
 3004430:	529ddff4 	mov	w20, #0xeeff                	// #61183
 3004434:	72b99bb4 	movk	w20, #0xccdd, lsl #16
 3004438:	b900037a 	str	w26, [x27]
        sync();

        L4TB16(output, p_reg_data_out);
        sync();
  
        DataLen -= 16;
 300443c:	5100439c 	sub	w28, w28, #0x10

	loopsTrap(); //random delay to avoid timing attack

    while(DataLen >= 16)
    {
        B16TL4(p_reg_data_in, input);
 3004440:	b9000338 	str	w24, [x25]
 3004444:	b90002f6 	str	w22, [x23]
 3004448:	b90002b4 	str	w20, [x21]
        sync();
 300444c:	97ffefb0 	bl	300030c <sync>

        L4TB16(output, p_reg_data_out);
        sync();
 3004450:	97ffefaf 	bl	300030c <sync>
  
        DataLen -= 16;
        out_len += 16;

        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
 3004454:	b9400260 	ldr	w0, [x19]
 3004458:	121d7800 	and	w0, w0, #0xfffffffb
 300445c:	b9000260 	str	w0, [x19]
        sync();
 3004460:	97ffefab 	bl	300030c <sync>
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx);
    sync();

	loopsTrap(); //random delay to avoid timing attack

    while(DataLen >= 16)
 3004464:	71003f9f 	cmp	w28, #0xf
 3004468:	54fffe88 	b.hi	3004438 <RCP_AES128_ECB_CONST_OTP_CW+0xd8>
 300446c:	b9406fe1 	ldr	w1, [sp,#108]
 3004470:	51004020 	sub	w0, w1, #0x10
 3004474:	12000c3c 	and	w28, w1, #0xf
 3004478:	121c6c00 	and	w0, w0, #0xfffffff0
 300447c:	11004000 	add	w0, w0, #0x10
        out_len += 16;

        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
        sync();
    }
	if (DataLen > 0) // loop no completed
 3004480:	3500027c 	cbnz	w28, 30044cc <RCP_AES128_ECB_CONST_OTP_CW+0x16c>
	{
		faultDetect();
	}
    return out_len;  
}
 3004484:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3004488:	a94263f7 	ldp	x23, x24, [sp,#32]
 300448c:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3004490:	a94473fb 	ldp	x27, x28, [sp,#64]
 3004494:	f9402bfe 	ldr	x30, [sp,#80]
 3004498:	a8c753f3 	ldp	x19, x20, [sp],#112
 300449c:	d65f03c0 	ret
 30044a0:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30044a4:	a94263f7 	ldp	x23, x24, [sp,#32]
 30044a8:	a9436bf9 	ldp	x25, x26, [sp,#48]
 30044ac:	a94473fb 	ldp	x27, x28, [sp,#64]
 30044b0:	f9402bfe 	ldr	x30, [sp,#80]
                               0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
    unsigned char key[16];
    unsigned char output[16];

    if ((pKey != NULL) || (pDataIn != NULL) || (pDataOut != NULL))
        return -1;
 30044b4:	12800000 	mov	w0, #0xffffffff            	// #-1
	if (DataLen > 0) // loop no completed
	{
		faultDetect();
	}
    return out_len;  
}
 30044b8:	a8c753f3 	ldp	x19, x20, [sp],#112
 30044bc:	d65f03c0 	ret
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx);
    sync();

	loopsTrap(); //random delay to avoid timing attack

    while(DataLen >= 16)
 30044c0:	b9406ffc 	ldr	w28, [sp,#108]
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
    int out_len = 0;
 30044c4:	52800000 	mov	w0, #0x0                   	// #0
 30044c8:	17ffffee 	b	3004480 <RCP_AES128_ECB_CONST_OTP_CW+0x120>
        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
        sync();
    }
	if (DataLen > 0) // loop no completed
	{
		faultDetect();
 30044cc:	94000b80 	bl	30072cc <faultDetect>

00000000030044d0 <RCP_AES128_ECB_CW_REG_CW>:
    unsigned char*          pKey,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
 30044d0:	a9bb53f3 	stp	x19, x20, [sp,#-80]!
 30044d4:	53001c00 	uxtb	w0, w0
 30044d8:	a9015bf5 	stp	x21, x22, [sp,#16]
 30044dc:	a9047bfb 	stp	x27, x30, [sp,#64]
 30044e0:	a90263f7 	stp	x23, x24, [sp,#32]
 30044e4:	a9036bf9 	stp	x25, x26, [sp,#48]
 30044e8:	aa0503f5 	mov	x21, x5
 30044ec:	2a0703fb 	mov	w27, w7
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    unsigned char key[16];
    unsigned char output[16];

    if ((pKey != NULL) || (pDataOut != NULL))
 30044f0:	b5000c04 	cbnz	x4, 3004670 <RCP_AES128_ECB_CW_REG_CW+0x1a0>
 30044f4:	b5000be6 	cbnz	x6, 3004670 <RCP_AES128_ECB_CW_REG_CW+0x1a0>
        return -1;

    // data input: reg, key: CW#1_0, output: CW#1_0 or CW#1_1
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 30044f8:	d28b0e94 	mov	x20, #0x5874                	// #22644
 30044fc:	f2b30034 	movk	x20, #0x9801, lsl #16
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_CW;
 3004500:	d28b0f04 	mov	x4, #0x5878                	// #22648
 3004504:	f2b30024 	movk	x4, #0x9801, lsl #16

    if ((pKey != NULL) || (pDataOut != NULL))
        return -1;

    // data input: reg, key: CW#1_0, output: CW#1_0 or CW#1_1
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 3004508:	6b1f001f 	cmp	w0, wzr
 300450c:	528005c5 	mov	w5, #0x2e                  	// #46
 3004510:	72a00045 	movk	w5, #0x2, lsl #16
 3004514:	528005e0 	mov	w0, #0x2f                  	// #47
 3004518:	72a00040 	movk	w0, #0x2, lsl #16
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_CW;
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx) | REG_SET2_KEY_ENTRY(KeyCwIdx);
 300451c:	d28b0f82 	mov	x2, #0x587c                	// #22652
 3004520:	f2b30022 	movk	x2, #0x9801, lsl #16

    if ((pKey != NULL) || (pDataOut != NULL))
        return -1;

    // data input: reg, key: CW#1_0, output: CW#1_0 or CW#1_1
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 3004524:	1a851000 	csel	w0, w0, w5, ne
 3004528:	b9000280 	str	w0, [x20]
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_CW;
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx) | REG_SET2_KEY_ENTRY(KeyCwIdx);
 300452c:	53081863 	ubfiz	w3, w3, #24, #7
    if ((pKey != NULL) || (pDataOut != NULL))
        return -1;

    // data input: reg, key: CW#1_0, output: CW#1_0 or CW#1_1
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_CW;
 3004530:	52800820 	mov	w0, #0x41                  	// #65
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx) | REG_SET2_KEY_ENTRY(KeyCwIdx);
 3004534:	53181821 	ubfiz	w1, w1, #8, #7
    if ((pKey != NULL) || (pDataOut != NULL))
        return -1;

    // data input: reg, key: CW#1_0, output: CW#1_0 or CW#1_1
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_CW;
 3004538:	b9000080 	str	w0, [x4]
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx) | REG_SET2_KEY_ENTRY(KeyCwIdx);
 300453c:	2a010061 	orr	w1, w3, w1
 3004540:	b9000041 	str	w1, [x2]
    sync();
 3004544:	97ffef72 	bl	300030c <sync>

	loopsTrap(); //random delay to avoid timing attack
 3004548:	94000c9e 	bl	30077c0 <loopsTrap>

    while(DataLen >= 16)
 300454c:	71003f7f 	cmp	w27, #0xf
 3004550:	540008c9 	b.ls	3004668 <RCP_AES128_ECB_CW_REG_CW+0x198>
 3004554:	51004376 	sub	w22, w27, #0x10
 3004558:	d2800220 	mov	x0, #0x11                  	// #17
 300455c:	53047ed6 	lsr	w22, w22, #4
 3004560:	910006b3 	add	x19, x21, #0x1
    {
        B16TL4(p_reg_data_in, pDataIn);
 3004564:	d28b089a 	mov	x26, #0x5844                	// #22596
 3004568:	f2b3003a 	movk	x26, #0x9801, lsl #16
 300456c:	8b365000 	add	x0, x0, w22, uxtw #4
 3004570:	d28b0919 	mov	x25, #0x5848                	// #22600
 3004574:	f2b30039 	movk	x25, #0x9801, lsl #16
 3004578:	d28b0998 	mov	x24, #0x584c                	// #22604
 300457c:	f2b30038 	movk	x24, #0x9801, lsl #16
 3004580:	d28b0a17 	mov	x23, #0x5850                	// #22608
 3004584:	f2b30037 	movk	x23, #0x9801, lsl #16
 3004588:	8b0002b5 	add	x21, x21, x0
 300458c:	39400260 	ldrb	w0, [x19]
 3004590:	91004273 	add	x19, x19, #0x10
 3004594:	385ef263 	ldurb	w3, [x19,#-17]
 3004598:	385f1262 	ldurb	w2, [x19,#-15]
 300459c:	53103c00 	lsl	w0, w0, #16
 30045a0:	385f2261 	ldurb	w1, [x19,#-14]
 30045a4:	0b036000 	add	w0, w0, w3, lsl #24
 30045a8:	0b022000 	add	w0, w0, w2, lsl #8
 30045ac:	0b010000 	add	w0, w0, w1
 30045b0:	b9000340 	str	w0, [x26]
 30045b4:	385f3263 	ldurb	w3, [x19,#-13]
 30045b8:	385f4260 	ldurb	w0, [x19,#-12]
 30045bc:	385f5262 	ldurb	w2, [x19,#-11]
 30045c0:	53103c00 	lsl	w0, w0, #16
 30045c4:	385f6261 	ldurb	w1, [x19,#-10]
 30045c8:	0b036000 	add	w0, w0, w3, lsl #24
 30045cc:	0b022000 	add	w0, w0, w2, lsl #8
 30045d0:	0b010000 	add	w0, w0, w1
 30045d4:	b9000320 	str	w0, [x25]
 30045d8:	385f7263 	ldurb	w3, [x19,#-9]
 30045dc:	385f8260 	ldurb	w0, [x19,#-8]
 30045e0:	385f9262 	ldurb	w2, [x19,#-7]
 30045e4:	53103c00 	lsl	w0, w0, #16
 30045e8:	385fa261 	ldurb	w1, [x19,#-6]
 30045ec:	0b036000 	add	w0, w0, w3, lsl #24
 30045f0:	0b022000 	add	w0, w0, w2, lsl #8
 30045f4:	0b010000 	add	w0, w0, w1
 30045f8:	b9000300 	str	w0, [x24]
 30045fc:	385fb263 	ldurb	w3, [x19,#-5]
 3004600:	385fc260 	ldurb	w0, [x19,#-4]
 3004604:	385fd262 	ldurb	w2, [x19,#-3]
 3004608:	53103c00 	lsl	w0, w0, #16
 300460c:	385fe261 	ldurb	w1, [x19,#-2]
 3004610:	0b036000 	add	w0, w0, w3, lsl #24
 3004614:	0b022000 	add	w0, w0, w2, lsl #8
 3004618:	0b010000 	add	w0, w0, w1
 300461c:	b90002e0 	str	w0, [x23]
        sync();
 3004620:	97ffef3b 	bl	300030c <sync>

        L4TB16(output, p_reg_data_out);
        sync();
 3004624:	97ffef3a 	bl	300030c <sync>

        pDataIn += 16;
        DataLen -= 16;
        out_len += 16;

        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
 3004628:	b9400280 	ldr	w0, [x20]
 300462c:	121d7800 	and	w0, w0, #0xfffffffb
 3004630:	b9000280 	str	w0, [x20]
        sync();
 3004634:	97ffef36 	bl	300030c <sync>
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx) | REG_SET2_KEY_ENTRY(KeyCwIdx);
    sync();

	loopsTrap(); //random delay to avoid timing attack

    while(DataLen >= 16)
 3004638:	eb15027f 	cmp	x19, x21
 300463c:	54fffa81 	b.ne	300458c <RCP_AES128_ECB_CW_REG_CW+0xbc>
 3004640:	110006c0 	add	w0, w22, #0x1
 3004644:	12000f7b 	and	w27, w27, #0xf
 3004648:	531c6c00 	lsl	w0, w0, #4
        out_len += 16;

        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
        sync();
    }    
	if (DataLen > 0) // loop no completed
 300464c:	3500017b 	cbnz	w27, 3004678 <RCP_AES128_ECB_CW_REG_CW+0x1a8>
	{
		faultDetect();
	}

    return out_len;  
}
 3004650:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3004654:	a94263f7 	ldp	x23, x24, [sp,#32]
 3004658:	a9436bf9 	ldp	x25, x26, [sp,#48]
 300465c:	a9447bfb 	ldp	x27, x30, [sp,#64]
 3004660:	a8c553f3 	ldp	x19, x20, [sp],#80
 3004664:	d65f03c0 	ret
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
    int out_len = 0;
 3004668:	52800000 	mov	w0, #0x0                   	// #0
 300466c:	17fffff8 	b	300464c <RCP_AES128_ECB_CW_REG_CW+0x17c>

    unsigned char key[16];
    unsigned char output[16];

    if ((pKey != NULL) || (pDataOut != NULL))
        return -1;
 3004670:	12800000 	mov	w0, #0xffffffff            	// #-1
 3004674:	17fffff7 	b	3004650 <RCP_AES128_ECB_CW_REG_CW+0x180>
        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
        sync();
    }    
	if (DataLen > 0) // loop no completed
	{
		faultDetect();
 3004678:	94000b15 	bl	30072cc <faultDetect>

000000000300467c <RCP_AES128_ECB_REG_REG_REG>:
    unsigned char*          pKey,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
 300467c:	53001c00 	uxtb	w0, w0
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 3004680:	39400481 	ldrb	w1, [x4,#1]

    // data input: reg, key: reg, output: reg
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 3004684:	6b1f001f 	cmp	w0, wzr
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 3004688:	39400080 	ldrb	w0, [x4]
 300468c:	53103c21 	lsl	w1, w1, #16
 3004690:	d28b0689 	mov	x9, #0x5834                	// #22580
 3004694:	f2b30029 	movk	x9, #0x9801, lsl #16
 3004698:	0b006021 	add	w1, w1, w0, lsl #24
 300469c:	39400880 	ldrb	w0, [x4,#2]
    unsigned char*          pKey,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
 30046a0:	a9ba53f3 	stp	x19, x20, [sp,#-96]!
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 30046a4:	d28b0708 	mov	x8, #0x5838                	// #22584
 30046a8:	f2b30028 	movk	x8, #0x9801, lsl #16
 30046ac:	0b002021 	add	w1, w1, w0, lsl #8
 30046b0:	39400c80 	ldrb	w0, [x4,#3]
    unsigned char*          pKey,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
 30046b4:	f9002bfe 	str	x30, [sp,#80]
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 30046b8:	d28b0782 	mov	x2, #0x583c                	// #22588
 30046bc:	f2b30022 	movk	x2, #0x9801, lsl #16
    unsigned char*          pKey,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
 30046c0:	a90473fb 	stp	x27, x28, [sp,#64]
 30046c4:	a9015bf5 	stp	x21, x22, [sp,#16]
 30046c8:	a90263f7 	stp	x23, x24, [sp,#32]
 30046cc:	a9036bf9 	stp	x25, x26, [sp,#48]
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 30046d0:	0b000020 	add	w0, w1, w0
 30046d4:	b9000120 	str	w0, [x9]

    // data input: reg, key: reg, output: reg
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 30046d8:	d28b0e83 	mov	x3, #0x5874                	// #22644
 30046dc:	f2b30023 	movk	x3, #0x9801, lsl #16
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 30046e0:	39401080 	ldrb	w0, [x4,#4]
    unsigned char*          pKey,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
 30046e4:	aa0603f4 	mov	x20, x6
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 30046e8:	39401481 	ldrb	w1, [x4,#5]

    // data input: reg, key: reg, output: reg
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_REG | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_REGISTER;
 30046ec:	d28b0f06 	mov	x6, #0x5878                	// #22648
 30046f0:	f2b30026 	movk	x6, #0x9801, lsl #16
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 30046f4:	53103c21 	lsl	w1, w1, #16
    unsigned char*          pKey,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
 30046f8:	2a0703fb 	mov	w27, w7
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 30046fc:	0b006021 	add	w1, w1, w0, lsl #24
 3004700:	39401880 	ldrb	w0, [x4,#6]
    unsigned char*          pKey,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
 3004704:	aa0503f3 	mov	x19, x5
    B16TL4(p_reg_key, pKey);

    // data input: reg, key: reg, output: reg
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_REG | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_REGISTER;
    REG32(K_CP_REG_SET2) = 0;
 3004708:	d28b0f87 	mov	x7, #0x587c                	// #22652
 300470c:	f2b30027 	movk	x7, #0x9801, lsl #16
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 3004710:	0b002021 	add	w1, w1, w0, lsl #8
 3004714:	39401c80 	ldrb	w0, [x4,#7]
 3004718:	d28b0805 	mov	x5, #0x5840                	// #22592
 300471c:	f2b30025 	movk	x5, #0x9801, lsl #16
 3004720:	0b000020 	add	w0, w1, w0
 3004724:	b9000100 	str	w0, [x8]
 3004728:	39402080 	ldrb	w0, [x4,#8]
 300472c:	39402481 	ldrb	w1, [x4,#9]
 3004730:	53103c21 	lsl	w1, w1, #16
 3004734:	0b006021 	add	w1, w1, w0, lsl #24
 3004738:	39402880 	ldrb	w0, [x4,#10]
 300473c:	0b002021 	add	w1, w1, w0, lsl #8
 3004740:	39402c80 	ldrb	w0, [x4,#11]
 3004744:	0b000020 	add	w0, w1, w0
 3004748:	b9000040 	str	w0, [x2]

    // data input: reg, key: reg, output: reg
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 300474c:	528005e0 	mov	w0, #0x2f                  	// #47
 3004750:	72a00040 	movk	w0, #0x2, lsl #16
 3004754:	528005c2 	mov	w2, #0x2e                  	// #46
 3004758:	72a00042 	movk	w2, #0x2, lsl #16
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 300475c:	39403481 	ldrb	w1, [x4,#13]

    // data input: reg, key: reg, output: reg
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 3004760:	1a821002 	csel	w2, w0, w2, ne
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 3004764:	39403080 	ldrb	w0, [x4,#12]
 3004768:	53103c21 	lsl	w1, w1, #16
 300476c:	0b006021 	add	w1, w1, w0, lsl #24
 3004770:	39403880 	ldrb	w0, [x4,#14]
 3004774:	0b002021 	add	w1, w1, w0, lsl #8
 3004778:	39403c80 	ldrb	w0, [x4,#15]

    // data input: reg, key: reg, output: reg
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 300477c:	b9000062 	str	w2, [x3]
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_REG | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_REGISTER;
 3004780:	b90000df 	str	wzr, [x6]
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 3004784:	0b000020 	add	w0, w1, w0

    // data input: reg, key: reg, output: reg
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_REG | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_REGISTER;
    REG32(K_CP_REG_SET2) = 0;
 3004788:	b90000ff 	str	wzr, [x7]
    int out_len = 0;
    unsigned int *p_reg_data_in = (unsigned int*)K_CP_REG_DATAIN;
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    B16TL4(p_reg_key, pKey);
 300478c:	b90000a0 	str	w0, [x5]

    // data input: reg, key: reg, output: reg
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_REG | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_REGISTER;
    REG32(K_CP_REG_SET2) = 0;
    sync();
 3004790:	97ffeedf 	bl	300030c <sync>

	loopsTrap(); //random delay to avoid timing attack
 3004794:	94000c0b 	bl	30077c0 <loopsTrap>

    while(DataLen >= 16)
 3004798:	71003f7f 	cmp	w27, #0xf
 300479c:	54000ea9 	b.ls	3004970 <RCP_AES128_ECB_REG_REG_REG+0x2f4>
 30047a0:	5100437a 	sub	w26, w27, #0x10
    {
        B16TL4(p_reg_data_in, pDataIn);
 30047a4:	d28b0899 	mov	x25, #0x5844                	// #22596
 30047a8:	f2b30039 	movk	x25, #0x9801, lsl #16
 30047ac:	53047f5a 	lsr	w26, w26, #4
 30047b0:	d28b0918 	mov	x24, #0x5848                	// #22600
 30047b4:	f2b30038 	movk	x24, #0x9801, lsl #16
 30047b8:	2a1a03f5 	mov	w21, w26
 30047bc:	d28b0997 	mov	x23, #0x584c                	// #22604
 30047c0:	f2b30037 	movk	x23, #0x9801, lsl #16
 30047c4:	910006b5 	add	x21, x21, #0x1
 30047c8:	d28b0a16 	mov	x22, #0x5850                	// #22608
 30047cc:	f2b30036 	movk	x22, #0x9801, lsl #16
        sync();

        L4TB16(pDataOut, p_reg_data_out);
 30047d0:	d28b0a9c 	mov	x28, #0x5854                	// #22612
 30047d4:	f2b3003c 	movk	x28, #0x9801, lsl #16
 30047d8:	8b151275 	add	x21, x19, x21, lsl #4

	loopsTrap(); //random delay to avoid timing attack

    while(DataLen >= 16)
    {
        B16TL4(p_reg_data_in, pDataIn);
 30047dc:	39400660 	ldrb	w0, [x19,#1]
        sync();

        L4TB16(pDataOut, p_reg_data_out);
        sync();

        pDataIn += 16;
 30047e0:	91004273 	add	x19, x19, #0x10

	loopsTrap(); //random delay to avoid timing attack

    while(DataLen >= 16)
    {
        B16TL4(p_reg_data_in, pDataIn);
 30047e4:	385f0263 	ldurb	w3, [x19,#-16]

        L4TB16(pDataOut, p_reg_data_out);
        sync();

        pDataIn += 16;
        pDataOut+= 16;
 30047e8:	91004294 	add	x20, x20, #0x10

	loopsTrap(); //random delay to avoid timing attack

    while(DataLen >= 16)
    {
        B16TL4(p_reg_data_in, pDataIn);
 30047ec:	385f2262 	ldurb	w2, [x19,#-14]
 30047f0:	53103c00 	lsl	w0, w0, #16
 30047f4:	385f3261 	ldurb	w1, [x19,#-13]
 30047f8:	0b036000 	add	w0, w0, w3, lsl #24
 30047fc:	0b022000 	add	w0, w0, w2, lsl #8
 3004800:	0b010000 	add	w0, w0, w1
 3004804:	b9000320 	str	w0, [x25]
 3004808:	385f4263 	ldurb	w3, [x19,#-12]
 300480c:	385f5260 	ldurb	w0, [x19,#-11]
 3004810:	385f6262 	ldurb	w2, [x19,#-10]
 3004814:	53103c00 	lsl	w0, w0, #16
 3004818:	385f7261 	ldurb	w1, [x19,#-9]
 300481c:	0b036000 	add	w0, w0, w3, lsl #24
 3004820:	0b022000 	add	w0, w0, w2, lsl #8
 3004824:	0b010000 	add	w0, w0, w1
 3004828:	b9000300 	str	w0, [x24]
 300482c:	385f8263 	ldurb	w3, [x19,#-8]
 3004830:	385f9260 	ldurb	w0, [x19,#-7]
 3004834:	385fa262 	ldurb	w2, [x19,#-6]
 3004838:	53103c00 	lsl	w0, w0, #16
 300483c:	385fb261 	ldurb	w1, [x19,#-5]
 3004840:	0b036000 	add	w0, w0, w3, lsl #24
 3004844:	0b022000 	add	w0, w0, w2, lsl #8
 3004848:	0b010000 	add	w0, w0, w1
 300484c:	b90002e0 	str	w0, [x23]
 3004850:	385fc263 	ldurb	w3, [x19,#-4]
 3004854:	385fd260 	ldurb	w0, [x19,#-3]
 3004858:	385fe262 	ldurb	w2, [x19,#-2]
 300485c:	53103c00 	lsl	w0, w0, #16
 3004860:	385ff261 	ldurb	w1, [x19,#-1]
 3004864:	0b036000 	add	w0, w0, w3, lsl #24
 3004868:	0b022000 	add	w0, w0, w2, lsl #8
 300486c:	0b010000 	add	w0, w0, w1
 3004870:	b90002c0 	str	w0, [x22]
        sync();
 3004874:	97ffeea6 	bl	300030c <sync>

        L4TB16(pDataOut, p_reg_data_out);
 3004878:	39400f80 	ldrb	w0, [x28,#3]
 300487c:	d28b0b02 	mov	x2, #0x5858                	// #22616
 3004880:	f2b30022 	movk	x2, #0x9801, lsl #16
 3004884:	381f0280 	sturb	w0, [x20,#-16]
 3004888:	d28b0b81 	mov	x1, #0x585c                	// #22620
 300488c:	f2b30021 	movk	x1, #0x9801, lsl #16
 3004890:	79400783 	ldrh	w3, [x28,#2]
 3004894:	d28b0c00 	mov	x0, #0x5860                	// #22624
 3004898:	f2b30020 	movk	x0, #0x9801, lsl #16
 300489c:	381f1283 	sturb	w3, [x20,#-15]
 30048a0:	b9400383 	ldr	w3, [x28]
 30048a4:	53087c63 	lsr	w3, w3, #8
 30048a8:	381f2283 	sturb	w3, [x20,#-14]
 30048ac:	b9400383 	ldr	w3, [x28]
 30048b0:	381f3283 	sturb	w3, [x20,#-13]
 30048b4:	39400c43 	ldrb	w3, [x2,#3]
 30048b8:	381f4283 	sturb	w3, [x20,#-12]
 30048bc:	79400443 	ldrh	w3, [x2,#2]
 30048c0:	381f5283 	sturb	w3, [x20,#-11]
 30048c4:	b9400043 	ldr	w3, [x2]
 30048c8:	53087c63 	lsr	w3, w3, #8
 30048cc:	381f6283 	sturb	w3, [x20,#-10]
 30048d0:	b9400042 	ldr	w2, [x2]
 30048d4:	381f7282 	sturb	w2, [x20,#-9]
 30048d8:	39400c22 	ldrb	w2, [x1,#3]
 30048dc:	381f8282 	sturb	w2, [x20,#-8]
 30048e0:	79400422 	ldrh	w2, [x1,#2]
 30048e4:	381f9282 	sturb	w2, [x20,#-7]
 30048e8:	b9400022 	ldr	w2, [x1]
 30048ec:	53087c42 	lsr	w2, w2, #8
 30048f0:	381fa282 	sturb	w2, [x20,#-6]
 30048f4:	b9400021 	ldr	w1, [x1]
 30048f8:	381fb281 	sturb	w1, [x20,#-5]
 30048fc:	39400c01 	ldrb	w1, [x0,#3]
 3004900:	381fc281 	sturb	w1, [x20,#-4]
 3004904:	79400401 	ldrh	w1, [x0,#2]
 3004908:	381fd281 	sturb	w1, [x20,#-3]
 300490c:	b9400001 	ldr	w1, [x0]
 3004910:	53087c21 	lsr	w1, w1, #8
 3004914:	381fe281 	sturb	w1, [x20,#-2]
 3004918:	b9400000 	ldr	w0, [x0]
 300491c:	381ff280 	sturb	w0, [x20,#-1]
        sync();
 3004920:	97ffee7b 	bl	300030c <sync>
        pDataIn += 16;
        pDataOut+= 16;
        DataLen -= 16;
        out_len += 16;

        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
 3004924:	d28b0e81 	mov	x1, #0x5874                	// #22644
 3004928:	f2b30021 	movk	x1, #0x9801, lsl #16
 300492c:	b9400020 	ldr	w0, [x1]
 3004930:	121d7800 	and	w0, w0, #0xfffffffb
 3004934:	b9000020 	str	w0, [x1]
        sync();
 3004938:	97ffee75 	bl	300030c <sync>
    REG32(K_CP_REG_SET2) = 0;
    sync();

	loopsTrap(); //random delay to avoid timing attack

    while(DataLen >= 16)
 300493c:	eb15027f 	cmp	x19, x21
 3004940:	54fff4e1 	b.ne	30047dc <RCP_AES128_ECB_REG_REG_REG+0x160>
 3004944:	11000740 	add	w0, w26, #0x1
 3004948:	12000f7b 	and	w27, w27, #0xf
 300494c:	531c6c00 	lsl	w0, w0, #4
        out_len += 16;

        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
        sync();
    }
	if (DataLen > 0) // loop no completed
 3004950:	3500015b 	cbnz	w27, 3004978 <RCP_AES128_ECB_REG_REG_REG+0x2fc>
	{
		faultDetect();
	}

    return out_len;  
}
 3004954:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3004958:	a94263f7 	ldp	x23, x24, [sp,#32]
 300495c:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3004960:	a94473fb 	ldp	x27, x28, [sp,#64]
 3004964:	f9402bfe 	ldr	x30, [sp,#80]
 3004968:	a8c653f3 	ldp	x19, x20, [sp],#96
 300496c:	d65f03c0 	ret
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
    int out_len = 0;
 3004970:	52800000 	mov	w0, #0x0                   	// #0
 3004974:	17fffff7 	b	3004950 <RCP_AES128_ECB_REG_REG_REG+0x2d4>
        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
        sync();
    }
	if (DataLen > 0) // loop no completed
	{
		faultDetect();
 3004978:	94000a55 	bl	30072cc <faultDetect>

000000000300497c <RCP_AES128_ECB_REG_REG_CW>:
    unsigned char*          pKey,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
 300497c:	a9bb53f3 	stp	x19, x20, [sp,#-80]!
 3004980:	53001c08 	uxtb	w8, w0
 3004984:	a9015bf5 	stp	x21, x22, [sp,#16]
 3004988:	a9047bfb 	stp	x27, x30, [sp,#64]
 300498c:	a90263f7 	stp	x23, x24, [sp,#32]
 3004990:	a9036bf9 	stp	x25, x26, [sp,#48]
 3004994:	aa0503f5 	mov	x21, x5
 3004998:	2a0703fb 	mov	w27, w7
    unsigned int *p_reg_data_out = (unsigned int*)K_CP_REG_DATAOUT;
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    unsigned char output[16];

    if (pDataOut != NULL)
 300499c:	b50010a6 	cbnz	x6, 3004bb0 <RCP_AES128_ECB_REG_REG_CW+0x234>
        return -1;

    B16TL4(p_reg_key, pKey);
 30049a0:	39400085 	ldrb	w5, [x4]
 30049a4:	d28b0686 	mov	x6, #0x5834                	// #22580
 30049a8:	f2b30026 	movk	x6, #0x9801, lsl #16
 30049ac:	39400480 	ldrb	w0, [x4,#1]
 30049b0:	d28b0709 	mov	x9, #0x5838                	// #22584
 30049b4:	f2b30029 	movk	x9, #0x9801, lsl #16
 30049b8:	39400882 	ldrb	w2, [x4,#2]
 30049bc:	53103c00 	lsl	w0, w0, #16
 30049c0:	39400c81 	ldrb	w1, [x4,#3]
 30049c4:	0b056000 	add	w0, w0, w5, lsl #24

    // data input: reg, key: reg, output: cw
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 30049c8:	6b1f011f 	cmp	w8, wzr
    unsigned char output[16];

    if (pDataOut != NULL)
        return -1;

    B16TL4(p_reg_key, pKey);
 30049cc:	d28b0788 	mov	x8, #0x583c                	// #22588
 30049d0:	f2b30028 	movk	x8, #0x9801, lsl #16
 30049d4:	0b022000 	add	w0, w0, w2, lsl #8

    // data input: reg, key: reg, output: cw
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 30049d8:	d28b0e94 	mov	x20, #0x5874                	// #22644
 30049dc:	f2b30034 	movk	x20, #0x9801, lsl #16
    unsigned char output[16];

    if (pDataOut != NULL)
        return -1;

    B16TL4(p_reg_key, pKey);
 30049e0:	0b010000 	add	w0, w0, w1
 30049e4:	b90000c0 	str	w0, [x6]

    // data input: reg, key: reg, output: cw
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_REGISTER;
 30049e8:	d28b0f07 	mov	x7, #0x5878                	// #22648
 30049ec:	f2b30027 	movk	x7, #0x9801, lsl #16
    unsigned char output[16];

    if (pDataOut != NULL)
        return -1;

    B16TL4(p_reg_key, pKey);
 30049f0:	39401085 	ldrb	w5, [x4,#4]

    // data input: reg, key: reg, output: cw
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_REGISTER;
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx);
 30049f4:	53081863 	ubfiz	w3, w3, #24, #7
    unsigned char output[16];

    if (pDataOut != NULL)
        return -1;

    B16TL4(p_reg_key, pKey);
 30049f8:	39401480 	ldrb	w0, [x4,#5]
 30049fc:	39401882 	ldrb	w2, [x4,#6]
 3004a00:	53103c00 	lsl	w0, w0, #16
 3004a04:	0b056000 	add	w0, w0, w5, lsl #24

    // data input: reg, key: reg, output: cw
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_REGISTER;
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx);
 3004a08:	d28b0f85 	mov	x5, #0x587c                	// #22652
 3004a0c:	f2b30025 	movk	x5, #0x9801, lsl #16
    unsigned char output[16];

    if (pDataOut != NULL)
        return -1;

    B16TL4(p_reg_key, pKey);
 3004a10:	0b022001 	add	w1, w0, w2, lsl #8
 3004a14:	39401c80 	ldrb	w0, [x4,#7]

    // data input: reg, key: reg, output: cw
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 3004a18:	528005c2 	mov	w2, #0x2e                  	// #46
 3004a1c:	72a00042 	movk	w2, #0x2, lsl #16
    unsigned char output[16];

    if (pDataOut != NULL)
        return -1;

    B16TL4(p_reg_key, pKey);
 3004a20:	0b000020 	add	w0, w1, w0
 3004a24:	b9000120 	str	w0, [x9]
 3004a28:	39402080 	ldrb	w0, [x4,#8]
 3004a2c:	39402481 	ldrb	w1, [x4,#9]
 3004a30:	53103c21 	lsl	w1, w1, #16
 3004a34:	0b006021 	add	w1, w1, w0, lsl #24
 3004a38:	39402880 	ldrb	w0, [x4,#10]
 3004a3c:	0b002021 	add	w1, w1, w0, lsl #8
 3004a40:	39402c80 	ldrb	w0, [x4,#11]
 3004a44:	0b000020 	add	w0, w1, w0
 3004a48:	b9000100 	str	w0, [x8]

    // data input: reg, key: reg, output: cw
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 3004a4c:	528005e0 	mov	w0, #0x2f                  	// #47
 3004a50:	72a00040 	movk	w0, #0x2, lsl #16
    unsigned char output[16];

    if (pDataOut != NULL)
        return -1;

    B16TL4(p_reg_key, pKey);
 3004a54:	39403481 	ldrb	w1, [x4,#13]

    // data input: reg, key: reg, output: cw
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 3004a58:	1a821002 	csel	w2, w0, w2, ne
    unsigned char output[16];

    if (pDataOut != NULL)
        return -1;

    B16TL4(p_reg_key, pKey);
 3004a5c:	39403080 	ldrb	w0, [x4,#12]

    // data input: reg, key: reg, output: cw
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_REGISTER;
 3004a60:	52800028 	mov	w8, #0x1                   	// #1
    unsigned char output[16];

    if (pDataOut != NULL)
        return -1;

    B16TL4(p_reg_key, pKey);
 3004a64:	53103c21 	lsl	w1, w1, #16
 3004a68:	0b006021 	add	w1, w1, w0, lsl #24
 3004a6c:	39403880 	ldrb	w0, [x4,#14]
 3004a70:	0b002021 	add	w1, w1, w0, lsl #8
 3004a74:	39403c80 	ldrb	w0, [x4,#15]

    // data input: reg, key: reg, output: cw
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
 3004a78:	b9000282 	str	w2, [x20]
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_REGISTER;
 3004a7c:	b90000e8 	str	w8, [x7]
    unsigned char output[16];

    if (pDataOut != NULL)
        return -1;

    B16TL4(p_reg_key, pKey);
 3004a80:	0b000020 	add	w0, w1, w0
 3004a84:	b9000cc0 	str	w0, [x6,#12]

    // data input: reg, key: reg, output: cw
    REG32(K_CP_REG_SET) = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
    REG32(K_CP_REG_SET1) = REG_SET1_OUTPUT_MODE_CW | REG_SET1_INPUT_MODE_REG | REG_SET1_KEY_MODE_REGISTER;
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx);
 3004a88:	b90000a3 	str	w3, [x5]
    sync();
 3004a8c:	97ffee20 	bl	300030c <sync>

	loopsTrap(); //random delay to avoid timing attack
 3004a90:	94000b4c 	bl	30077c0 <loopsTrap>

    while(DataLen >= 16)
 3004a94:	71003f7f 	cmp	w27, #0xf
 3004a98:	540009a9 	b.ls	3004bcc <RCP_AES128_ECB_REG_REG_CW+0x250>
 3004a9c:	51004376 	sub	w22, w27, #0x10
 3004aa0:	d2800225 	mov	x5, #0x11                  	// #17
 3004aa4:	53047ed6 	lsr	w22, w22, #4
 3004aa8:	910006b3 	add	x19, x21, #0x1
    {
        B16TL4(p_reg_data_in, pDataIn);
 3004aac:	d28b089a 	mov	x26, #0x5844                	// #22596
 3004ab0:	f2b3003a 	movk	x26, #0x9801, lsl #16
 3004ab4:	8b3650a5 	add	x5, x5, w22, uxtw #4
 3004ab8:	d28b0919 	mov	x25, #0x5848                	// #22600
 3004abc:	f2b30039 	movk	x25, #0x9801, lsl #16
 3004ac0:	d28b0998 	mov	x24, #0x584c                	// #22604
 3004ac4:	f2b30038 	movk	x24, #0x9801, lsl #16
 3004ac8:	d28b0a17 	mov	x23, #0x5850                	// #22608
 3004acc:	f2b30037 	movk	x23, #0x9801, lsl #16
 3004ad0:	8b0502b5 	add	x21, x21, x5
 3004ad4:	39400260 	ldrb	w0, [x19]
 3004ad8:	91004273 	add	x19, x19, #0x10
 3004adc:	385ef263 	ldurb	w3, [x19,#-17]
 3004ae0:	385f1262 	ldurb	w2, [x19,#-15]
 3004ae4:	53103c00 	lsl	w0, w0, #16
 3004ae8:	385f2261 	ldurb	w1, [x19,#-14]
 3004aec:	0b036000 	add	w0, w0, w3, lsl #24
 3004af0:	0b022000 	add	w0, w0, w2, lsl #8
 3004af4:	0b010000 	add	w0, w0, w1
 3004af8:	b9000340 	str	w0, [x26]
 3004afc:	385f3263 	ldurb	w3, [x19,#-13]
 3004b00:	385f4260 	ldurb	w0, [x19,#-12]
 3004b04:	385f5262 	ldurb	w2, [x19,#-11]
 3004b08:	53103c00 	lsl	w0, w0, #16
 3004b0c:	385f6261 	ldurb	w1, [x19,#-10]
 3004b10:	0b036000 	add	w0, w0, w3, lsl #24
 3004b14:	0b022000 	add	w0, w0, w2, lsl #8
 3004b18:	0b010000 	add	w0, w0, w1
 3004b1c:	b9000320 	str	w0, [x25]
 3004b20:	385f7263 	ldurb	w3, [x19,#-9]
 3004b24:	385f8260 	ldurb	w0, [x19,#-8]
 3004b28:	385f9262 	ldurb	w2, [x19,#-7]
 3004b2c:	53103c00 	lsl	w0, w0, #16
 3004b30:	385fa261 	ldurb	w1, [x19,#-6]
 3004b34:	0b036000 	add	w0, w0, w3, lsl #24
 3004b38:	0b022000 	add	w0, w0, w2, lsl #8
 3004b3c:	0b010000 	add	w0, w0, w1
 3004b40:	b9000300 	str	w0, [x24]
 3004b44:	385fb263 	ldurb	w3, [x19,#-5]
 3004b48:	385fc260 	ldurb	w0, [x19,#-4]
 3004b4c:	385fd262 	ldurb	w2, [x19,#-3]
 3004b50:	53103c00 	lsl	w0, w0, #16
 3004b54:	385fe261 	ldurb	w1, [x19,#-2]
 3004b58:	0b036000 	add	w0, w0, w3, lsl #24
 3004b5c:	0b022000 	add	w0, w0, w2, lsl #8
 3004b60:	0b010000 	add	w0, w0, w1
 3004b64:	b90002e0 	str	w0, [x23]
        sync();
 3004b68:	97ffede9 	bl	300030c <sync>

        L4TB16(output, p_reg_data_out);
        sync();
 3004b6c:	97ffede8 	bl	300030c <sync>

        pDataIn += 16;
        DataLen -= 16;
        out_len += 16;

        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
 3004b70:	b9400280 	ldr	w0, [x20]
 3004b74:	121d7800 	and	w0, w0, #0xfffffffb
 3004b78:	b9000280 	str	w0, [x20]
        sync();
 3004b7c:	97ffede4 	bl	300030c <sync>
    REG32(K_CP_REG_SET2) = REG_SET2_OUTPUT_ENTRY(OutputCwIdx);
    sync();

	loopsTrap(); //random delay to avoid timing attack

    while(DataLen >= 16)
 3004b80:	eb15027f 	cmp	x19, x21
 3004b84:	54fffa81 	b.ne	3004ad4 <RCP_AES128_ECB_REG_REG_CW+0x158>
 3004b88:	110006c0 	add	w0, w22, #0x1
 3004b8c:	12000f7b 	and	w27, w27, #0xf
 3004b90:	531c6c00 	lsl	w0, w0, #4
        out_len += 16;

        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
        sync();
    }
	if (DataLen > 0) // loop no completed
 3004b94:	3500021b 	cbnz	w27, 3004bd4 <RCP_AES128_ECB_REG_REG_CW+0x258>
	{
		faultDetect();
	}
            
    return out_len;  
}
 3004b98:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3004b9c:	a94263f7 	ldp	x23, x24, [sp,#32]
 3004ba0:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3004ba4:	a9447bfb 	ldp	x27, x30, [sp,#64]
 3004ba8:	a8c553f3 	ldp	x19, x20, [sp],#80
 3004bac:	d65f03c0 	ret
    unsigned int *p_reg_key = (unsigned int*)K_CP_REG_KEY;

    unsigned char output[16];

    if (pDataOut != NULL)
        return -1;
 3004bb0:	12800000 	mov	w0, #0xffffffff            	// #-1
	{
		faultDetect();
	}
            
    return out_len;  
}
 3004bb4:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3004bb8:	a94263f7 	ldp	x23, x24, [sp,#32]
 3004bbc:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3004bc0:	a9447bfb 	ldp	x27, x30, [sp,#64]
 3004bc4:	a8c553f3 	ldp	x19, x20, [sp],#80
 3004bc8:	d65f03c0 	ret
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned int            DataLen
    )
{
    int out_len = 0;
 3004bcc:	52800000 	mov	w0, #0x0                   	// #0
 3004bd0:	17fffff1 	b	3004b94 <RCP_AES128_ECB_REG_REG_CW+0x218>
        REG32(K_CP_REG_SET) &= ~REG_SET_FIRST_128;
        sync();
    }
	if (DataLen > 0) // loop no completed
	{
		faultDetect();
 3004bd4:	940009be 	bl	30072cc <faultDetect>

0000000003004bd8 <RCP_WRITE_CW_SRAM>:
    return out_len;  
}


void RCP_WRITE_CW_SRAM(unsigned int id, unsigned char data[8])
{
 3004bd8:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
 3004bdc:	aa0103f3 	mov	x19, x1
 3004be0:	2a0003f4 	mov	w20, w0
 3004be4:	f90013fe 	str	x30, [sp,#32]
    
    p_tp_key_info[0] = B4TL(data[0], data[1], data[2], data[3]);
    p_tp_key_info[1] = B4TL(data[4], data[5], data[6], data[7]);
    sync();

    *p_tp_key_ctrl   = (id | 0x80);  // write 8 bytes  
 3004be8:	32190294 	orr	w20, w20, #0x80
    return out_len;  
}


void RCP_WRITE_CW_SRAM(unsigned int id, unsigned char data[8])
{
 3004bec:	a9015bf5 	stp	x21, x22, [sp,#16]
    unsigned int *p_tp_key_info  = (unsigned int*)TP_KEY_INFO_0;
    unsigned int *p_tp_key_ctrl  = (unsigned int*)TP_KEY_CTRL;
    
	loopsTrap(); //random delay to avoid timing attack
 3004bf0:	94000af4 	bl	30077c0 <loopsTrap>
    
    p_tp_key_info[0] = B4TL(data[0], data[1], data[2], data[3]);
 3004bf4:	d2880b16 	mov	x22, #0x4058                	// #16472
 3004bf8:	f2b30036 	movk	x22, #0x9801, lsl #16
 3004bfc:	39400263 	ldrb	w3, [x19]
    p_tp_key_info[1] = B4TL(data[4], data[5], data[6], data[7]);
 3004c00:	d2880b95 	mov	x21, #0x405c                	// #16476
 3004c04:	f2b30035 	movk	x21, #0x9801, lsl #16
    unsigned int *p_tp_key_info  = (unsigned int*)TP_KEY_INFO_0;
    unsigned int *p_tp_key_ctrl  = (unsigned int*)TP_KEY_CTRL;
    
	loopsTrap(); //random delay to avoid timing attack
    
    p_tp_key_info[0] = B4TL(data[0], data[1], data[2], data[3]);
 3004c08:	39400660 	ldrb	w0, [x19,#1]
 3004c0c:	39400a62 	ldrb	w2, [x19,#2]
 3004c10:	53103c00 	lsl	w0, w0, #16
 3004c14:	39400e61 	ldrb	w1, [x19,#3]
 3004c18:	0b036000 	add	w0, w0, w3, lsl #24
 3004c1c:	0b022000 	add	w0, w0, w2, lsl #8
 3004c20:	0b010000 	add	w0, w0, w1
 3004c24:	b90002c0 	str	w0, [x22]
    p_tp_key_info[1] = B4TL(data[4], data[5], data[6], data[7]);
 3004c28:	39401263 	ldrb	w3, [x19,#4]
 3004c2c:	39401660 	ldrb	w0, [x19,#5]
 3004c30:	39401a62 	ldrb	w2, [x19,#6]
 3004c34:	53103c00 	lsl	w0, w0, #16
 3004c38:	39401e61 	ldrb	w1, [x19,#7]
 3004c3c:	0b036000 	add	w0, w0, w3, lsl #24
 3004c40:	0b022000 	add	w0, w0, w2, lsl #8
 3004c44:	0b010000 	add	w0, w0, w1
 3004c48:	b90002a0 	str	w0, [x21]
    sync();
 3004c4c:	97ffedb0 	bl	300030c <sync>

    *p_tp_key_ctrl   = (id | 0x80);  // write 8 bytes  
 3004c50:	d2880c00 	mov	x0, #0x4060                	// #16480
 3004c54:	f2b30020 	movk	x0, #0x9801, lsl #16
 3004c58:	b9000014 	str	w20, [x0]
    sync();
 3004c5c:	97ffedac 	bl	300030c <sync>

    p_tp_key_info[0] = 0;
 3004c60:	b90002df 	str	wzr, [x22]
    p_tp_key_info[1] = 0;
 3004c64:	b90002bf 	str	wzr, [x21]
}
 3004c68:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3004c6c:	f94013fe 	ldr	x30, [sp,#32]
 3004c70:	a8c353f3 	ldp	x19, x20, [sp],#48
 3004c74:	d65f03c0 	ret

0000000003004c78 <RCP_READ_CW_SRAM>:

void RCP_READ_CW_SRAM(unsigned int id, unsigned char data[8])
{
 3004c78:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
 3004c7c:	aa0103f3 	mov	x19, x1

    *p_tp_key_ctrl = id;  // read 8 bytes    
    sync();
    
    LTB4(data[0], data[1], data[2], data[3], p_tp_key_info[0]);
    LTB4(data[4], data[5], data[6], data[7], p_tp_key_info[1]);
 3004c80:	d2880b94 	mov	x20, #0x405c                	// #16476
 3004c84:	f2b30034 	movk	x20, #0x9801, lsl #16
    p_tp_key_info[0] = 0;
    p_tp_key_info[1] = 0;
}

void RCP_READ_CW_SRAM(unsigned int id, unsigned char data[8])
{
 3004c88:	f90013fe 	str	x30, [sp,#32]
 3004c8c:	a9015bf5 	stp	x21, x22, [sp,#16]
 3004c90:	2a0003f6 	mov	w22, w0
    unsigned int *p_tp_key_info  = (unsigned int*)TP_KEY_INFO_0;
    unsigned int *p_tp_key_ctrl  = (unsigned int*)TP_KEY_CTRL;

	loopsTrap(); //random delay to avoid timing attack
 3004c94:	94000acb 	bl	30077c0 <loopsTrap>

    *p_tp_key_ctrl = id;  // read 8 bytes    
 3004c98:	d2880c01 	mov	x1, #0x4060                	// #16480
 3004c9c:	f2b30021 	movk	x1, #0x9801, lsl #16
    sync();
    
    LTB4(data[0], data[1], data[2], data[3], p_tp_key_info[0]);
 3004ca0:	d2880b15 	mov	x21, #0x4058                	// #16472
 3004ca4:	f2b30035 	movk	x21, #0x9801, lsl #16
    unsigned int *p_tp_key_info  = (unsigned int*)TP_KEY_INFO_0;
    unsigned int *p_tp_key_ctrl  = (unsigned int*)TP_KEY_CTRL;

	loopsTrap(); //random delay to avoid timing attack

    *p_tp_key_ctrl = id;  // read 8 bytes    
 3004ca8:	b9000036 	str	w22, [x1]
    sync();
 3004cac:	97ffed98 	bl	300030c <sync>
    
    LTB4(data[0], data[1], data[2], data[3], p_tp_key_info[0]);
 3004cb0:	39400ea0 	ldrb	w0, [x21,#3]
 3004cb4:	39000260 	strb	w0, [x19]
 3004cb8:	794006a0 	ldrh	w0, [x21,#2]
 3004cbc:	39000660 	strb	w0, [x19,#1]
 3004cc0:	b94002a0 	ldr	w0, [x21]
 3004cc4:	53087c00 	lsr	w0, w0, #8
 3004cc8:	39000a60 	strb	w0, [x19,#2]
 3004ccc:	b94002a0 	ldr	w0, [x21]
 3004cd0:	39000e60 	strb	w0, [x19,#3]
    LTB4(data[4], data[5], data[6], data[7], p_tp_key_info[1]);
 3004cd4:	39400e80 	ldrb	w0, [x20,#3]
 3004cd8:	39001260 	strb	w0, [x19,#4]
 3004cdc:	79400680 	ldrh	w0, [x20,#2]
 3004ce0:	39001660 	strb	w0, [x19,#5]
 3004ce4:	b9400280 	ldr	w0, [x20]
 3004ce8:	53087c00 	lsr	w0, w0, #8
 3004cec:	39001a60 	strb	w0, [x19,#6]
 3004cf0:	b9400280 	ldr	w0, [x20]
 3004cf4:	39001e60 	strb	w0, [x19,#7]
    sync();
 3004cf8:	97ffed85 	bl	300030c <sync>
    
    p_tp_key_info[0] = 0;
 3004cfc:	b90002bf 	str	wzr, [x21]
    p_tp_key_info[1] = 0;
 3004d00:	b900029f 	str	wzr, [x20]
}
 3004d04:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3004d08:	f94013fe 	ldr	x30, [sp,#32]
 3004d0c:	a8c353f3 	ldp	x19, x20, [sp],#48
 3004d10:	d65f03c0 	ret

0000000003004d14 <RCP_encrypt_flash_key>:
}

int RCP_encrypt_flash_key(unsigned int p_input[4], unsigned int p_output[4])
{
	unsigned int opt = FLASH_KEY_OPTION_ENCRYPT | FLASH_KEY_OPTION_SWAP_ENDIAN;
	return RCP_flash_key_operation(opt, p_input, p_output);
 3004d14:	aa0103e2 	mov	x2, x1
 3004d18:	aa0003e1 	mov	x1, x0
 3004d1c:	52800060 	mov	w0, #0x3                   	// #3
 3004d20:	17fffce4 	b	30040b0 <RCP_flash_key_operation>

0000000003004d24 <RCP_decrypt_flash_key>:
}

int RCP_decrypt_flash_key(unsigned int p_input[4], unsigned int p_output[4])
{
	unsigned int opt = FLASH_KEY_OPTION_DECRYPT | FLASH_KEY_OPTION_SWAP_ENDIAN;
	return RCP_flash_key_operation(opt, p_input, p_output);
 3004d24:	aa0103e2 	mov	x2, x1
 3004d28:	aa0003e1 	mov	x1, x0
 3004d2c:	52800040 	mov	w0, #0x2                   	// #2
 3004d30:	17fffce0 	b	30040b0 <RCP_flash_key_operation>

0000000003004d34 <TRNG_SW_CHECK>:
static UINT8 TRNG_SW_CHECK(UINT32 tmp_trng)
{
	UINT32 k = 0;
	UINT32 tmp_out = 0;
	
	for (k=0; k<=27; k++) {
 3004d34:	52800002 	mov	w2, #0x0                   	// #0
		tmp_out = (tmp_trng >> k) & 0x1F;
 3004d38:	1ac22401 	lsr	w1, w0, w2
		if ((tmp_out == 0x1F) || (tmp_out == 0x0)) {
 3004d3c:	11000442 	add	w2, w2, #0x1
 3004d40:	72001021 	ands	w1, w1, #0x1f
 3004d44:	540000e0 	b.eq	3004d60 <TRNG_SW_CHECK+0x2c>
 3004d48:	71007c3f 	cmp	w1, #0x1f
 3004d4c:	540000a0 	b.eq	3004d60 <TRNG_SW_CHECK+0x2c>
static UINT8 TRNG_SW_CHECK(UINT32 tmp_trng)
{
	UINT32 k = 0;
	UINT32 tmp_out = 0;
	
	for (k=0; k<=27; k++) {
 3004d50:	7100705f 	cmp	w2, #0x1c
 3004d54:	54ffff21 	b.ne	3004d38 <TRNG_SW_CHECK+0x4>
	}
	if (k != 28) // loop no completed
	{
		faultDetect();
	}      
	return 0;
 3004d58:	52800000 	mov	w0, #0x0                   	// #0
}
 3004d5c:	d65f03c0 	ret
		if ((tmp_out == 0x1F) || (tmp_out == 0x0)) {
#ifdef RNG_DEBUG
			prints("trng sw check fail: ");
			rom_debug_val("tmp_trng", tmp_trng);
#endif
			return 1;
 3004d60:	52800020 	mov	w0, #0x1                   	// #1
	if (k != 28) // loop no completed
	{
		faultDetect();
	}      
	return 0;
}
 3004d64:	d65f03c0 	ret

0000000003004d68 <TRNG_SETTING>:
{
#ifdef FPGA
	return;
#endif

	REG32(RNG_CTRL) =  0x00008000;
 3004d68:	d2820000 	mov	x0, #0x1000                	// #4096
 3004d6c:	f2b30000 	movk	x0, #0x9800, lsl #16
	REG32(RNG_CALI_CTRL) = 0x010c1041;
 3004d70:	d2820183 	mov	x3, #0x100c                	// #4108
 3004d74:	f2b30003 	movk	x3, #0x9800, lsl #16
	REG32(RNG_LOCK_CHK) = 0x300021c0;
 3004d78:	d2820282 	mov	x2, #0x1014                	// #4116
 3004d7c:	f2b30002 	movk	x2, #0x9800, lsl #16
{
#ifdef FPGA
	return;
#endif

	REG32(RNG_CTRL) =  0x00008000;
 3004d80:	52900005 	mov	w5, #0x8000                	// #32768
	REG32(RNG_CALI_CTRL) = 0x010c1041;
	REG32(RNG_LOCK_CHK) = 0x300021c0;
	REG32(RNG_CALI_CHK) = 0x24a524a4;
 3004d84:	d2820101 	mov	x1, #0x1008                	// #4104
 3004d88:	f2b30001 	movk	x1, #0x9800, lsl #16
{
#ifdef FPGA
	return;
#endif

	REG32(RNG_CTRL) =  0x00008000;
 3004d8c:	b9000005 	str	w5, [x0]
	REG32(RNG_CALI_CTRL) = 0x010c1041;
 3004d90:	52820824 	mov	w4, #0x1041                	// #4161
 3004d94:	72a02184 	movk	w4, #0x10c, lsl #16
 3004d98:	b9000064 	str	w4, [x3]
	REG32(RNG_LOCK_CHK) = 0x300021c0;
 3004d9c:	52843803 	mov	w3, #0x21c0                	// #8640
 3004da0:	72a60003 	movk	w3, #0x3000, lsl #16
 3004da4:	b9000043 	str	w3, [x2]
	REG32(RNG_CALI_CHK) = 0x24a524a4;
 3004da8:	52849482 	mov	w2, #0x24a4                	// #9380
 3004dac:	72a494a2 	movk	w2, #0x24a5, lsl #16
 3004db0:	b9000022 	str	w2, [x1]
	REG32(RNG_ANALOG) = 0x00008a91;
 3004db4:	52915221 	mov	w1, #0x8a91                	// #35473
 3004db8:	b9000401 	str	w1, [x0,#4]
	CP15ISB;
 3004dbc:	d5033fdf 	isb
	sync();
 3004dc0:	17ffed53 	b	300030c <sync>

0000000003004dc4 <genTRNG>:
	return 0;
}


__attribute__ ((optimize("O0"))) UINT32 genTRNG(UINT32 *val)
{
 3004dc4:	f81d0ffe 	str	x30, [sp,#-48]!
 3004dc8:	f9000fe0 	str	x0, [sp,#24]
	UINT32 tocnt=0;
 3004dcc:	b9002fff 	str	wzr, [sp,#44]
	UINT32 tmp_trng = 0;
 3004dd0:	b90027ff 	str	wzr, [sp,#36]
	int reGen_count = REGEN_MAX;
 3004dd4:	52800c80 	mov	w0, #0x64                  	// #100
 3004dd8:	b9002be0 	str	w0, [sp,#40]
	return TRNG_SUCCESS_MAGIC;
#endif
	
reGen:

	if (reGen_count == 0)
 3004ddc:	b9402be0 	ldr	w0, [sp,#40]
 3004de0:	6b1f001f 	cmp	w0, wzr
 3004de4:	54000061 	b.ne	3004df0 <genTRNG+0x2c>
		return 0;
 3004de8:	52800000 	mov	w0, #0x0                   	// #0
 3004dec:	14000020 	b	3004e6c <genTRNG+0xa8>
	
	tocnt = 0; 
 3004df0:	b9002fff 	str	wzr, [sp,#44]

	//5. polling ready bit, timeout 30ms
	while (!(REG32(RNG_RETURN0) & 0x1))
 3004df4:	1400000e 	b	3004e2c <genTRNG+0x68>
	{	
		if (tocnt++ > MAX_10MS_TO_CNT)			
 3004df8:	b9402fe0 	ldr	w0, [sp,#44]
 3004dfc:	11000401 	add	w1, w0, #0x1
 3004e00:	b9002fe1 	str	w1, [sp,#44]
 3004e04:	5284e201 	mov	w1, #0x2710                	// #10000
 3004e08:	6b01001f 	cmp	w0, w1
 3004e0c:	540000a9 	b.ls	3004e20 <genTRNG+0x5c>
		{
			reGen_count--;
 3004e10:	b9402be0 	ldr	w0, [sp,#40]
 3004e14:	51000400 	sub	w0, w0, #0x1
 3004e18:	b9002be0 	str	w0, [sp,#40]
			goto reGen;
 3004e1c:	17fffff0 	b	3004ddc <genTRNG+0x18>
		}
		udelay(0,1);
 3004e20:	52800021 	mov	w1, #0x1                   	// #1
 3004e24:	52800000 	mov	w0, #0x0                   	// #0
 3004e28:	94000323 	bl	3005ab4 <udelay>
		return 0;
	
	tocnt = 0; 

	//5. polling ready bit, timeout 30ms
	while (!(REG32(RNG_RETURN0) & 0x1))
 3004e2c:	d2820380 	mov	x0, #0x101c                	// #4124
 3004e30:	f2b30000 	movk	x0, #0x9800, lsl #16
 3004e34:	b9400000 	ldr	w0, [x0]
 3004e38:	12000000 	and	w0, w0, #0x1
 3004e3c:	6b1f001f 	cmp	w0, wzr
 3004e40:	54fffdc0 	b.eq	3004df8 <genTRNG+0x34>
		}
		udelay(0,1);
	}
	
	//6. get data
	tmp_trng = REG32(RNG_RESULTR);
 3004e44:	d2820500 	mov	x0, #0x1028                	// #4136
 3004e48:	f2b30000 	movk	x0, #0x9800, lsl #16
 3004e4c:	b9400000 	ldr	w0, [x0]
 3004e50:	b90027e0 	str	w0, [sp,#36]
	
	if (TRNG_SW_CHECK(tmp_trng) == 1){
 3004e54:	b94027e0 	ldr	w0, [sp,#36]
 3004e58:	97ffffb7 	bl	3004d34 <TRNG_SW_CHECK>
		reGen_count--;
		goto reGen;
#endif			
	}

	*val = tmp_trng;
 3004e5c:	f9400fe0 	ldr	x0, [sp,#24]
 3004e60:	b94027e1 	ldr	w1, [sp,#36]
 3004e64:	b9000001 	str	w1, [x0]
	return TRNG_SUCCESS_MAGIC;
 3004e68:	5294ab40 	mov	w0, #0xa55a                	// #42330
}
 3004e6c:	f84307fe 	ldr	x30, [sp],#48
 3004e70:	d65f03c0 	ret

0000000003004e74 <print_fw_entry>:
	return NULL;
}

void print_fw_entry(const char *str, const BootArray_FW_Entry_T *p_entry)
{
	if (p_entry == NULL) {
 3004e74:	b40002e1 	cbz	x1, 3004ed0 <print_fw_entry+0x5c>
		printf("%s: NULL\n", str);
		return;
	}

	if (sys_boot_flash_type == EMMC_BOOT) {
 3004e78:	d0000023 	adrp	x3, 300a000 <__FUNCTION__.3108+0x3d8>
 3004e7c:	52828282 	mov	w2, #0x1414                	// #5140
 3004e80:	72a28282 	movk	w2, #0x1414, lsl #16
 3004e84:	b9436863 	ldr	w3, [x3,#872]
 3004e88:	6b02007f 	cmp	w3, w2
 3004e8c:	54000100 	b.eq	3004eac <print_fw_entry+0x38>
		printf("%s: type: %d, flash_addr: 0x%x, length: 0x%x, emmc_partition: %d\n", str, p_entry->type, p_entry->flash_addr, p_entry->length, p_entry->emmc_partition);
	}
	else {
		printf("%s: type: 0x%x, flash_addr: 0x%x, length: 0x%x\n", str, p_entry->type, p_entry->flash_addr, p_entry->length);
 3004e90:	d0000025 	adrp	x5, 300a000 <__FUNCTION__.3108+0x3d8>
 3004e94:	b9400824 	ldr	w4, [x1,#8]
 3004e98:	b9400423 	ldr	w3, [x1,#4]
 3004e9c:	b9400022 	ldr	w2, [x1]
 3004ea0:	aa0003e1 	mov	x1, x0
 3004ea4:	9101c0a0 	add	x0, x5, #0x70
 3004ea8:	17fff027 	b	3000f44 <printf>
		printf("%s: NULL\n", str);
		return;
	}

	if (sys_boot_flash_type == EMMC_BOOT) {
		printf("%s: type: %d, flash_addr: 0x%x, length: 0x%x, emmc_partition: %d\n", str, p_entry->type, p_entry->flash_addr, p_entry->length, p_entry->emmc_partition);
 3004eac:	39403025 	ldrb	w5, [x1,#12]
 3004eb0:	d0000026 	adrp	x6, 300a000 <__FUNCTION__.3108+0x3d8>
 3004eb4:	b9400824 	ldr	w4, [x1,#8]
 3004eb8:	b9400423 	ldr	w3, [x1,#4]
 3004ebc:	120000a5 	and	w5, w5, #0x1
 3004ec0:	b9400022 	ldr	w2, [x1]
 3004ec4:	aa0003e1 	mov	x1, x0
 3004ec8:	9100a0c0 	add	x0, x6, #0x28
 3004ecc:	17fff01e 	b	3000f44 <printf>
}

void print_fw_entry(const char *str, const BootArray_FW_Entry_T *p_entry)
{
	if (p_entry == NULL) {
		printf("%s: NULL\n", str);
 3004ed0:	d0000022 	adrp	x2, 300a000 <__FUNCTION__.3108+0x3d8>
 3004ed4:	aa0003e1 	mov	x1, x0
 3004ed8:	91006040 	add	x0, x2, #0x18
 3004edc:	17fff01a 	b	3000f44 <printf>

0000000003004ee0 <save_bootarray_fw_entries>:
}

void save_bootarray_fw_entries(void)
{
	int i;
	BootArray_FW_Table_T *p_table = p_BootArray_FW_Table;
 3004ee0:	f0000024 	adrp	x4, 300b000 <g_nand_data_dma+0x2c0>
 3004ee4:	91350080 	add	x0, x4, #0xd40
	}
#endif
}

void save_bootarray_fw_entries(void)
{
 3004ee8:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
	int i;
	BootArray_FW_Table_T *p_table = p_BootArray_FW_Table;
	BootArray_FW_Entry_T *p_entry;

	if (p_table->magic != BootArray_FW_Table_Magic) {
 3004eec:	5282c2a1 	mov	w1, #0x1615                	// #5653
}

void save_bootarray_fw_entries(void)
{
	int i;
	BootArray_FW_Table_T *p_table = p_BootArray_FW_Table;
 3004ef0:	f946a082 	ldr	x2, [x4,#3392]
	BootArray_FW_Entry_T *p_entry;

	if (p_table->magic != BootArray_FW_Table_Magic) {
 3004ef4:	b9400043 	ldr	w3, [x2]
 3004ef8:	6b01007f 	cmp	w3, w1
 3004efc:	54000641 	b.ne	3004fc4 <save_bootarray_fw_entries+0xe4>
 3004f00:	f9400406 	ldr	x6, [x0,#8]
 3004f04:	f9400803 	ldr	x3, [x0,#16]
 3004f08:	f9400c05 	ldr	x5, [x0,#24]
 3004f0c:	91004040 	add	x0, x2, #0x10
 3004f10:	910c0042 	add	x2, x2, #0x300
 3004f14:	14000008 	b	3004f34 <save_bootarray_fw_entries+0x54>
	for (i = 0; i < BootArray_FW_Entry_Count; i++) {
		p_entry = &(p_table->fw_entry[i]);
		if (p_entry->type == (BootArray_FW_Type_T)INVALID)
			break; // reach end of FW entry

		switch (p_entry->type) {
 3004f18:	7100503f 	cmp	w1, #0x14
 3004f1c:	54000460 	b.eq	3004fa8 <save_bootarray_fw_entries+0xc8>
			case DTE_BOOTCODE_RTK:
				p_FW_Entry_DTE_BOOTCODE_RTK = p_entry;
				break;
			case DTE_FW_CERTIFICATE:
				p_FW_Entry_DTE_FW_Certificate = p_entry;
				break;
 3004f20:	7100283f 	cmp	w1, #0xa
 3004f24:	9a801063 	csel	x3, x3, x0, ne
 3004f28:	91004000 	add	x0, x0, #0x10
		hexdump("invalid fw_table", p_table, 0x80);
		#endif
		faultDetect();
	}

	for (i = 0; i < BootArray_FW_Entry_Count; i++) {
 3004f2c:	eb02001f 	cmp	x0, x2
 3004f30:	54000120 	b.eq	3004f54 <save_bootarray_fw_entries+0x74>
		p_entry = &(p_table->fw_entry[i]);
		if (p_entry->type == (BootArray_FW_Type_T)INVALID)
 3004f34:	b9400001 	ldr	w1, [x0]
 3004f38:	340000e1 	cbz	w1, 3004f54 <save_bootarray_fw_entries+0x74>
			break; // reach end of FW entry

		switch (p_entry->type) {
 3004f3c:	7100403f 	cmp	w1, #0x10
 3004f40:	54fffec1 	b.ne	3004f18 <save_bootarray_fw_entries+0x38>
 3004f44:	aa0003e6 	mov	x6, x0
 3004f48:	91004000 	add	x0, x0, #0x10
		hexdump("invalid fw_table", p_table, 0x80);
		#endif
		faultDetect();
	}

	for (i = 0; i < BootArray_FW_Entry_Count; i++) {
 3004f4c:	eb02001f 	cmp	x0, x2
 3004f50:	54ffff21 	b.ne	3004f34 <save_bootarray_fw_entries+0x54>
 3004f54:	91350080 	add	x0, x4, #0xd40
				break;
		}
	}

	#ifdef ROM_DEBUG // for debug only
	print_fw_entry("p_FW_Entry_DTE_BOOTCODE_RTK", p_FW_Entry_DTE_BOOTCODE_RTK);
 3004f58:	91350093 	add	x19, x4, #0xd40
 3004f5c:	f9000406 	str	x6, [x0,#8]
 3004f60:	f9000803 	str	x3, [x0,#16]
 3004f64:	f9400661 	ldr	x1, [x19,#8]
 3004f68:	f9000c05 	str	x5, [x0,#24]
 3004f6c:	d0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3004f70:	91028000 	add	x0, x0, #0xa0
 3004f74:	97ffffc0 	bl	3004e74 <print_fw_entry>
	print_fw_entry("p_FW_Entry_DTE_FW_Certificate", p_FW_Entry_DTE_FW_Certificate);
 3004f78:	f9400a61 	ldr	x1, [x19,#16]
 3004f7c:	d0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3004f80:	91030000 	add	x0, x0, #0xc0
 3004f84:	97ffffbc 	bl	3004e74 <print_fw_entry>
	if (sys_boot_flash_type == NAND_FLASH_BOOT) {
 3004f88:	d0000021 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 3004f8c:	52826260 	mov	w0, #0x1313                	// #4883
 3004f90:	72a26260 	movk	w0, #0x1313, lsl #16
 3004f94:	b9436821 	ldr	w1, [x1,#872]
 3004f98:	6b00003f 	cmp	w1, w0
 3004f9c:	540000a0 	b.eq	3004fb0 <save_bootarray_fw_entries+0xd0>
		print_fw_entry("p_FW_Entry_Certificate_Area", p_FW_Entry_Certificate_Area);
	}
	#endif
}
 3004fa0:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3004fa4:	d65f03c0 	ret
			case DTE_FW_CERTIFICATE:
				p_FW_Entry_DTE_FW_Certificate = p_entry;
				break;
			case Certificate_Area: // for nand boot
				p_FW_Entry_Certificate_Area = p_entry;
				break;
 3004fa8:	aa0003e5 	mov	x5, x0
 3004fac:	17ffffdf 	b	3004f28 <save_bootarray_fw_entries+0x48>

	#ifdef ROM_DEBUG // for debug only
	print_fw_entry("p_FW_Entry_DTE_BOOTCODE_RTK", p_FW_Entry_DTE_BOOTCODE_RTK);
	print_fw_entry("p_FW_Entry_DTE_FW_Certificate", p_FW_Entry_DTE_FW_Certificate);
	if (sys_boot_flash_type == NAND_FLASH_BOOT) {
		print_fw_entry("p_FW_Entry_Certificate_Area", p_FW_Entry_Certificate_Area);
 3004fb0:	f9400e61 	ldr	x1, [x19,#24]
 3004fb4:	d0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
	}
	#endif
}
 3004fb8:	a8c17bf3 	ldp	x19, x30, [sp],#16

	#ifdef ROM_DEBUG // for debug only
	print_fw_entry("p_FW_Entry_DTE_BOOTCODE_RTK", p_FW_Entry_DTE_BOOTCODE_RTK);
	print_fw_entry("p_FW_Entry_DTE_FW_Certificate", p_FW_Entry_DTE_FW_Certificate);
	if (sys_boot_flash_type == NAND_FLASH_BOOT) {
		print_fw_entry("p_FW_Entry_Certificate_Area", p_FW_Entry_Certificate_Area);
 3004fbc:	91038000 	add	x0, x0, #0xe0
 3004fc0:	17ffffad 	b	3004e74 <print_fw_entry>

	if (p_table->magic != BootArray_FW_Table_Magic) {
		#ifdef FLOW_DEBUG
		hexdump("invalid fw_table", p_table, 0x80);
		#endif
		faultDetect();
 3004fc4:	940008c2 	bl	30072cc <faultDetect>

0000000003004fc8 <find_fw_entry>:
	}
	#endif
}

BootArray_FW_Entry_T *find_fw_entry(BootArray_FW_Table_T *p_table, BootArray_FW_Type_T fw_type)
{
 3004fc8:	a9be53f3 	stp	x19, x20, [sp,#-32]!
 3004fcc:	f9000bfe 	str	x30, [sp,#16]
	int i;
	BootArray_FW_Entry_T *p_entry;

	if (p_table == NULL) {
 3004fd0:	b40004e0 	cbz	x0, 300506c <find_fw_entry+0xa4>
 3004fd4:	2a0103f4 	mov	w20, w1
 3004fd8:	aa0003f3 	mov	x19, x0
 3004fdc:	91004003 	add	x3, x0, #0x10
 3004fe0:	52800002 	mov	w2, #0x0                   	// #0
 3004fe4:	14000004 	b	3004ff4 <find_fw_entry+0x2c>
		return NULL;
	}

	for (i = 0; i < BootArray_FW_Entry_Count; i++) {
 3004fe8:	11000442 	add	w2, w2, #0x1
 3004fec:	7100bc5f 	cmp	w2, #0x2f
 3004ff0:	54000200 	b.eq	3005030 <find_fw_entry+0x68>
		p_entry = &(p_table->fw_entry[i]);
		if (p_entry->type == fw_type) {
 3004ff4:	b9400064 	ldr	w4, [x3]
 3004ff8:	91004063 	add	x3, x3, #0x10
 3004ffc:	6b14009f 	cmp	w4, w20
 3005000:	54ffff41 	b.ne	3004fe8 <find_fw_entry+0x20>
	if (p_table == NULL) {
		return NULL;
	}

	for (i = 0; i < BootArray_FW_Entry_Count; i++) {
		p_entry = &(p_table->fw_entry[i]);
 3005004:	93407c42 	sxtw	x2, w2
		if (p_entry->type == fw_type) {
			#ifdef ROM_DEBUG
			print_fw_entry(__FUNCTION__, p_entry);
 3005008:	90000020 	adrp	x0, 3009000 <el3_vectors>
	if (p_table == NULL) {
		return NULL;
	}

	for (i = 0; i < BootArray_FW_Entry_Count; i++) {
		p_entry = &(p_table->fw_entry[i]);
 300500c:	91000442 	add	x2, x2, #0x1
		if (p_entry->type == fw_type) {
			#ifdef ROM_DEBUG
			print_fw_entry(__FUNCTION__, p_entry);
 3005010:	912d8000 	add	x0, x0, #0xb60
	if (p_table == NULL) {
		return NULL;
	}

	for (i = 0; i < BootArray_FW_Entry_Count; i++) {
		p_entry = &(p_table->fw_entry[i]);
 3005014:	8b021273 	add	x19, x19, x2, lsl #4
		if (p_entry->type == fw_type) {
			#ifdef ROM_DEBUG
			print_fw_entry(__FUNCTION__, p_entry);
 3005018:	aa1303e1 	mov	x1, x19
 300501c:	97ffff96 	bl	3004e74 <print_fw_entry>
			#endif
			return p_entry;
 3005020:	aa1303e0 	mov	x0, x19

	#ifdef ROM_DEBUG
	rom_debug_val("scs_find_fw_entry fail", fw_type);
	#endif
	return NULL;
}
 3005024:	f9400bfe 	ldr	x30, [sp,#16]
 3005028:	a8c253f3 	ldp	x19, x20, [sp],#32
 300502c:	d65f03c0 	ret
			return p_entry;
		}
	}

	#ifdef ROM_DEBUG
	rom_debug_val("scs_find_fw_entry fail", fw_type);
 3005030:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3005034:	91040000 	add	x0, x0, #0x100
 3005038:	94000426 	bl	30060d0 <prints>
 300503c:	90000020 	adrp	x0, 3009000 <el3_vectors>
 3005040:	913c0000 	add	x0, x0, #0xf00
 3005044:	94000423 	bl	30060d0 <prints>
 3005048:	2a1403e0 	mov	w0, w20
 300504c:	94000453 	bl	3006198 <print_hex>
 3005050:	90000020 	adrp	x0, 3009000 <el3_vectors>
 3005054:	91396000 	add	x0, x0, #0xe58
 3005058:	9400041e 	bl	30060d0 <prints>
	#endif
	return NULL;
 300505c:	d2800000 	mov	x0, #0x0                   	// #0
}
 3005060:	f9400bfe 	ldr	x30, [sp,#16]
 3005064:	a8c253f3 	ldp	x19, x20, [sp],#32
 3005068:	d65f03c0 	ret
{
	int i;
	BootArray_FW_Entry_T *p_entry;

	if (p_table == NULL) {
		return NULL;
 300506c:	d2800000 	mov	x0, #0x0                   	// #0
 3005070:	17ffffed 	b	3005024 <find_fw_entry+0x5c>

0000000003005074 <verify_ctrl_data>:

	return ret;
}

static int verify_ctrl_data(const Ctrl_Data_T *ptr)
{
 3005074:	a9bd53f3 	stp	x19, x20, [sp,#-48]!

#ifdef FPGA
	return OK;
#endif
	if (ptr == NULL) {
		return ERR_INVALID_PARAM;
 3005078:	52801262 	mov	w2, #0x93                  	// #147

	return ret;
}

static int verify_ctrl_data(const Ctrl_Data_T *ptr)
{
 300507c:	f9000bfe 	str	x30, [sp,#16]
	unsigned int ext_value = 0;

#ifdef FPGA
	return OK;
#endif
	if (ptr == NULL) {
 3005080:	b4000260 	cbz	x0, 30050cc <verify_ctrl_data+0x58>
	return OK;
}

static int get_market_segment_id(unsigned int *msid)
{
	unsigned int value[2] = {0};
 3005084:	9100c3f4 	add	x20, sp, #0x30
 3005088:	aa0003f3 	mov	x19, x0

	OTP_Get_Word(MSID_REF, value, 2);
 300508c:	52800042 	mov	w2, #0x2                   	// #2
 3005090:	52844ee0 	mov	w0, #0x2277                	// #8823
	return OK;
}

static int get_market_segment_id(unsigned int *msid)
{
	unsigned int value[2] = {0};
 3005094:	f81f8e9f 	str	xzr, [x20,#-8]!

	OTP_Get_Word(MSID_REF, value, 2);
 3005098:	aa1403e1 	mov	x1, x20
 300509c:	97fffba2 	bl	3003f24 <OTP_Get_Word>
	*msid = (value[0] >> 23) & 0x1ff; // lower 9-bit: [8831:8823]
	*msid = *msid | ((value[1] & 0x7fffff) << 9); // upper 23-bit: [8854:8832]
 30050a0:	b9402fe3 	ldr	w3, [sp,#44]
	// Compare MarketSegmentID_REF active value And MarketSegmentID_EXT active value
	get_market_segment_id(&ref_value);
	ref_value &= ptr->Mask_MSID;
	ext_value = (ptr->Mask_MSID & ptr->Market_SegmentID_EXT);
	if (ref_value != ext_value) {
		return ERR_MARKET_SEG_NOT_MATCH;
 30050a4:	52800682 	mov	w2, #0x34                  	// #52
static int get_market_segment_id(unsigned int *msid)
{
	unsigned int value[2] = {0};

	OTP_Get_Word(MSID_REF, value, 2);
	*msid = (value[0] >> 23) & 0x1ff; // lower 9-bit: [8831:8823]
 30050a8:	b9402be4 	ldr	w4, [sp,#40]
		return ERR_INVALID_PARAM;
	}

	// Compare MarketSegmentID_REF active value And MarketSegmentID_EXT active value
	get_market_segment_id(&ref_value);
	ref_value &= ptr->Mask_MSID;
 30050ac:	b9400661 	ldr	w1, [x19,#4]
{
	unsigned int value[2] = {0};

	OTP_Get_Word(MSID_REF, value, 2);
	*msid = (value[0] >> 23) & 0x1ff; // lower 9-bit: [8831:8823]
	*msid = *msid | ((value[1] & 0x7fffff) << 9); // upper 23-bit: [8854:8832]
 30050b0:	53175863 	lsl	w3, w3, #9
	}

	// Compare MarketSegmentID_REF active value And MarketSegmentID_EXT active value
	get_market_segment_id(&ref_value);
	ref_value &= ptr->Mask_MSID;
	ext_value = (ptr->Mask_MSID & ptr->Market_SegmentID_EXT);
 30050b4:	b9400260 	ldr	w0, [x19]
{
	unsigned int value[2] = {0};

	OTP_Get_Word(MSID_REF, value, 2);
	*msid = (value[0] >> 23) & 0x1ff; // lower 9-bit: [8831:8823]
	*msid = *msid | ((value[1] & 0x7fffff) << 9); // upper 23-bit: [8854:8832]
 30050b8:	2a445c63 	orr	w3, w3, w4, lsr #23
	}

	// Compare MarketSegmentID_REF active value And MarketSegmentID_EXT active value
	get_market_segment_id(&ref_value);
	ref_value &= ptr->Mask_MSID;
	ext_value = (ptr->Mask_MSID & ptr->Market_SegmentID_EXT);
 30050bc:	0a000020 	and	w0, w1, w0
		return ERR_INVALID_PARAM;
	}

	// Compare MarketSegmentID_REF active value And MarketSegmentID_EXT active value
	get_market_segment_id(&ref_value);
	ref_value &= ptr->Mask_MSID;
 30050c0:	0a010061 	and	w1, w3, w1
	ext_value = (ptr->Mask_MSID & ptr->Market_SegmentID_EXT);
	if (ref_value != ext_value) {
 30050c4:	6b00003f 	cmp	w1, w0
 30050c8:	540000a0 	b.eq	30050dc <verify_ctrl_data+0x68>
	if (ref_value > ext_value) {
		return ERR_WRONG_VERSIONING;
	}

	return OK;
}
 30050cc:	f9400bfe 	ldr	x30, [sp,#16]
 30050d0:	2a0203e0 	mov	w0, w2
 30050d4:	a8c353f3 	ldp	x19, x20, [sp],#48
 30050d8:	d65f03c0 	ret

static int get_versioning(unsigned int *version)
{
	unsigned int value[2] = {0};

	OTP_Get_Word(VERSION_REF, value, 2);
 30050dc:	52800042 	mov	w2, #0x2                   	// #2
 30050e0:	aa1403e1 	mov	x1, x20
 30050e4:	528452e0 	mov	w0, #0x2297                	// #8855
	return OK;
}

static int get_versioning(unsigned int *version)
{
	unsigned int value[2] = {0};
 30050e8:	f90017ff 	str	xzr, [sp,#40]

	OTP_Get_Word(VERSION_REF, value, 2);
 30050ec:	97fffb8e 	bl	3003f24 <OTP_Get_Word>
	*version = (value[0] >> 23) & 0x1ff; // lower 9-bit: [8863:8855]
	*version = *version | ((value[1] & 0x7fffff) << 9); // upper 23-bit: [8886:8864]
 30050f0:	b9402fe3 	ldr	w3, [sp,#44]
	ext_value = (ptr->Mask_Vers & ptr->Versioning_EXT);
	if (ref_value > ext_value) {
		return ERR_WRONG_VERSIONING;
	}

	return OK;
 30050f4:	528006a2 	mov	w2, #0x35                  	// #53
static int get_versioning(unsigned int *version)
{
	unsigned int value[2] = {0};

	OTP_Get_Word(VERSION_REF, value, 2);
	*version = (value[0] >> 23) & 0x1ff; // lower 9-bit: [8863:8855]
 30050f8:	b9402be4 	ldr	w4, [sp,#40]
		return ERR_MARKET_SEG_NOT_MATCH;
	}

	// Compare Versioning_REF active value And Versioning_EXT active value
	get_versioning(&ref_value);
	ref_value &= ptr->Mask_Vers;
 30050fc:	b9400e60 	ldr	w0, [x19,#12]
{
	unsigned int value[2] = {0};

	OTP_Get_Word(VERSION_REF, value, 2);
	*version = (value[0] >> 23) & 0x1ff; // lower 9-bit: [8863:8855]
	*version = *version | ((value[1] & 0x7fffff) << 9); // upper 23-bit: [8886:8864]
 3005100:	53175863 	lsl	w3, w3, #9
	}

	// Compare Versioning_REF active value And Versioning_EXT active value
	get_versioning(&ref_value);
	ref_value &= ptr->Mask_Vers;
	ext_value = (ptr->Mask_Vers & ptr->Versioning_EXT);
 3005104:	b9400a61 	ldr	w1, [x19,#8]
{
	unsigned int value[2] = {0};

	OTP_Get_Word(VERSION_REF, value, 2);
	*version = (value[0] >> 23) & 0x1ff; // lower 9-bit: [8863:8855]
	*version = *version | ((value[1] & 0x7fffff) << 9); // upper 23-bit: [8886:8864]
 3005108:	2a445c63 	orr	w3, w3, w4, lsr #23
	}

	// Compare Versioning_REF active value And Versioning_EXT active value
	get_versioning(&ref_value);
	ref_value &= ptr->Mask_Vers;
	ext_value = (ptr->Mask_Vers & ptr->Versioning_EXT);
 300510c:	0a010001 	and	w1, w0, w1
		return ERR_MARKET_SEG_NOT_MATCH;
	}

	// Compare Versioning_REF active value And Versioning_EXT active value
	get_versioning(&ref_value);
	ref_value &= ptr->Mask_Vers;
 3005110:	0a000060 	and	w0, w3, w0
	ext_value = (ptr->Mask_Vers & ptr->Versioning_EXT);
	if (ref_value > ext_value) {
		return ERR_WRONG_VERSIONING;
	}

	return OK;
 3005114:	6b01001f 	cmp	w0, w1
 3005118:	1a9f8042 	csel	w2, w2, wzr, hi
 300511c:	17ffffec 	b	30050cc <verify_ctrl_data+0x58>

0000000003005120 <process_dte_fw_certificate>:
/************************************************************************
 *  Function body
 ************************************************************************/

int process_dte_fw_certificate(void)
{
 3005120:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
#if defined(FPGA)
	rsa_key.type = NORMAL_KEY;
	rsa_key.key = rsa_pub_key2;
#else
	// get OTP Krsa2
	if (get_rsa_key(2, sys_rsa_addr) != OK) {
 3005124:	52800040 	mov	w0, #0x2                   	// #2
/************************************************************************
 *  Function body
 ************************************************************************/

int process_dte_fw_certificate(void)
{
 3005128:	a9017bf5 	stp	x21, x30, [sp,#16]
#if defined(FPGA)
	rsa_key.type = NORMAL_KEY;
	rsa_key.key = rsa_pub_key2;
#else
	// get OTP Krsa2
	if (get_rsa_key(2, sys_rsa_addr) != OK) {
 300512c:	f0000035 	adrp	x21, 300c000 <g_backup_BootArray_FW_Table+0x2a0>
 3005130:	910582b4 	add	x20, x21, #0x160
 3005134:	aa1403e1 	mov	x1, x20
 3005138:	97fffbc3 	bl	3004044 <get_rsa_key>
 300513c:	2a0003f3 	mov	w19, w0
 3005140:	340000c0 	cbz	w0, 3005158 <process_dte_fw_certificate+0x38>
		return ret;
 3005144:	52801ff3 	mov	w19, #0xff                  	// #255
			return ERR_KEY_RIGHT_NOT_MATCH;
		}
	}

	return ret;
}
 3005148:	2a1303e0 	mov	w0, w19
 300514c:	a9417bf5 	ldp	x21, x30, [sp,#16]
 3005150:	a8c353f3 	ldp	x19, x20, [sp],#48
 3005154:	d65f03c0 	ret
	rsa_key.type = NORMAL_KEY;
	rsa_key.key = sys_rsa_addr;
#endif

	// copy NOCS certificate from flash to sram
	switch (sys_boot_flash_type) {
 3005158:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 300515c:	b9436800 	ldr	w0, [x0,#872]
 3005160:	52828281 	mov	w1, #0x1414                	// #5140
 3005164:	72a28281 	movk	w1, #0x1414, lsl #16
#else
	// get OTP Krsa2
	if (get_rsa_key(2, sys_rsa_addr) != OK) {
		return ret;
	}
	rsa_key.type = NORMAL_KEY;
 3005168:	b90023ff 	str	wzr, [sp,#32]
	rsa_key.key = sys_rsa_addr;
#endif

	// copy NOCS certificate from flash to sram
	switch (sys_boot_flash_type) {
 300516c:	6b01001f 	cmp	w0, w1
	// get OTP Krsa2
	if (get_rsa_key(2, sys_rsa_addr) != OK) {
		return ret;
	}
	rsa_key.type = NORMAL_KEY;
	rsa_key.key = sys_rsa_addr;
 3005170:	f90017f4 	str	x20, [sp,#40]
#endif

	// copy NOCS certificate from flash to sram
	switch (sys_boot_flash_type) {
 3005174:	540004a0 	b.eq	3005208 <process_dte_fw_certificate+0xe8>
 3005178:	52846461 	mov	w1, #0x2323                	// #8995
 300517c:	72a46461 	movk	w1, #0x2323, lsl #16
 3005180:	6b01001f 	cmp	w0, w1
 3005184:	540000e0 	b.eq	30051a0 <process_dte_fw_certificate+0x80>
 3005188:	52826261 	mov	w1, #0x1313                	// #4883
 300518c:	72a26261 	movk	w1, #0x1313, lsl #16
 3005190:	6b01001f 	cmp	w0, w1
 3005194:	540003e0 	b.eq	3005210 <process_dte_fw_certificate+0xf0>
			break;
		case EMMC_BOOT:
			ret = get_dte_fw_certificate_emmc();
			break;
		default:
			return ERR_UNKNOWN_TYPE;
 3005198:	52801253 	mov	w19, #0x92                  	// #146
 300519c:	17ffffeb 	b	3005148 <process_dte_fw_certificate+0x28>
#endif

	// copy NOCS certificate from flash to sram
	switch (sys_boot_flash_type) {
		case SPI_FLASH_BOOT:
			ret = get_dte_fw_certificate_spi();
 30051a0:	940001d4 	bl	30058f0 <get_dte_fw_certificate_spi>
			ret = get_dte_fw_certificate_emmc();
			break;
		default:
			return ERR_UNKNOWN_TYPE;
	}
	if (ret != OK) {
 30051a4:	350002e0 	cbnz	w0, 3005200 <process_dte_fw_certificate+0xe0>
		return ret;
	}

	if (sys_is_scs_activated == TRUE) {
 30051a8:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 30051ac:	b9437404 	ldr	w4, [x0,#884]
 30051b0:	7100049f 	cmp	w4, #0x1
 30051b4:	54fffca1 	b.ne	3005148 <process_dte_fw_certificate+0x28>
		ret = verify_img_signature(p_data, size, p_data + size, &rsa_key, TRUE);
 30051b8:	910582b5 	add	x21, x21, #0x160
 30051bc:	910083e3 	add	x3, sp, #0x20
 30051c0:	910402b4 	add	x20, x21, #0x100
 30051c4:	911002a2 	add	x2, x21, #0x400
 30051c8:	52806001 	mov	w1, #0x300                 	// #768
 30051cc:	aa1403e0 	mov	x0, x20
 30051d0:	94000a65 	bl	3007b64 <verify_img_signature>
 30051d4:	2a0003f3 	mov	w19, w0
		if (ret != OK) {
 30051d8:	35fffb80 	cbnz	w0, 3005148 <process_dte_fw_certificate+0x28>
			return ret;
		}

		// verify controlling data & key right
		ret = verify_ctrl_data(&g_DTE_FW_Certificate.Ctrl_Data);
 30051dc:	910fc2a0 	add	x0, x21, #0x3f0
 30051e0:	97ffffa5 	bl	3005074 <verify_ctrl_data>
 30051e4:	2a0003f3 	mov	w19, w0
		if (ret != OK) {
 30051e8:	35fffb00 	cbnz	w0, 3005148 <process_dte_fw_certificate+0x28>
			return ret;
		}

		if (g_DTE_FW_Certificate.Key_Rights != KEY_RIGHT_DTE_FW) {
 30051ec:	b94202a0 	ldr	w0, [x21,#512]
			return ERR_KEY_RIGHT_NOT_MATCH;
 30051f0:	52800673 	mov	w19, #0x33                  	// #51
 30051f4:	7100101f 	cmp	w0, #0x4
 30051f8:	1a9303f3 	csel	w19, wzr, w19, eq
 30051fc:	17ffffd3 	b	3005148 <process_dte_fw_certificate+0x28>
 3005200:	2a0003f3 	mov	w19, w0
 3005204:	17ffffd1 	b	3005148 <process_dte_fw_certificate+0x28>
			break;
		case NAND_FLASH_BOOT:
			ret = get_dte_fw_certificate_nand();
			break;
		case EMMC_BOOT:
			ret = get_dte_fw_certificate_emmc();
 3005208:	940000a3 	bl	3005494 <get_dte_fw_certificate_emmc>
			break;
 300520c:	17ffffe6 	b	30051a4 <process_dte_fw_certificate+0x84>
	switch (sys_boot_flash_type) {
		case SPI_FLASH_BOOT:
			ret = get_dte_fw_certificate_spi();
			break;
		case NAND_FLASH_BOOT:
			ret = get_dte_fw_certificate_nand();
 3005210:	94000177 	bl	30057ec <get_dte_fw_certificate_nand>
			break;
 3005214:	17ffffe4 	b	30051a4 <process_dte_fw_certificate+0x84>

0000000003005218 <process_dte_bootcode_rtk>:
 *            +--------------------+          |            |                -+-
 *            |     Signature      |          |            |
 *            +--------------------+         -+-          -+-
 */
int process_dte_bootcode_rtk(void)
{
 3005218:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
	rsa_key_t rsa_key;
	Trusted_FW_Tail_T *p_tail;
	int i = 0;

	// copy DTE_Bootcode_RTK from flash to ddr
	switch (sys_boot_flash_type) {
 300521c:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3005220:	b9436800 	ldr	w0, [x0,#872]
 3005224:	52828281 	mov	w1, #0x1414                	// #5140
 3005228:	72a28281 	movk	w1, #0x1414, lsl #16
 *            +--------------------+          |            |                -+-
 *            |     Signature      |          |            |
 *            +--------------------+         -+-          -+-
 */
int process_dte_bootcode_rtk(void)
{
 300522c:	a9017bf5 	stp	x21, x30, [sp,#16]
	int ret = ERR_DEFAULT;
	RTK_Params_T *p_RTK_Params = (RTK_Params_T *)g_RTK_Params;
	unsigned char *p_aes_key = p_RTK_Params->DTE_Protection_Key;

	unsigned int size = 0; // DTE_Bootcode_RTK area size
 3005230:	b9002fff 	str	wzr, [sp,#44]
	rsa_key_t rsa_key;
	Trusted_FW_Tail_T *p_tail;
	int i = 0;

	// copy DTE_Bootcode_RTK from flash to ddr
	switch (sys_boot_flash_type) {
 3005234:	6b01001f 	cmp	w0, w1
 3005238:	54000900 	b.eq	3005358 <process_dte_bootcode_rtk+0x140>
 300523c:	52846461 	mov	w1, #0x2323                	// #8995
 3005240:	72a46461 	movk	w1, #0x2323, lsl #16
 3005244:	6b01001f 	cmp	w0, w1
 3005248:	54000820 	b.eq	300534c <process_dte_bootcode_rtk+0x134>
 300524c:	52826261 	mov	w1, #0x1313                	// #4883
 3005250:	72a26261 	movk	w1, #0x1313, lsl #16
 3005254:	6b01001f 	cmp	w0, w1
 3005258:	540000a0 	b.eq	300526c <process_dte_bootcode_rtk+0x54>
			break;
		case EMMC_BOOT:
			ret = get_dte_bootcode_rtk_emmc(&size);
			break;
		default:
			return ERR_UNKNOWN_TYPE;
 300525c:	52801240 	mov	w0, #0x92                  	// #146
			return ERR_KEY_RIGHT_NOT_MATCH;
		}
	}

	return ret;
}
 3005260:	a9417bf5 	ldp	x21, x30, [sp,#16]
 3005264:	a8c453f3 	ldp	x19, x20, [sp],#64
 3005268:	d65f03c0 	ret
	switch (sys_boot_flash_type) {
		case SPI_FLASH_BOOT:
			ret = get_dte_bootcode_rtk_spi(&size);
			break;
		case NAND_FLASH_BOOT:
			ret = get_dte_bootcode_rtk_nand(&size);
 300526c:	9100b3e0 	add	x0, sp, #0x2c
 3005270:	94000188 	bl	3005890 <get_dte_bootcode_rtk_nand>
			ret = get_dte_bootcode_rtk_emmc(&size);
			break;
		default:
			return ERR_UNKNOWN_TYPE;
	}
	if (ret != OK) {
 3005274:	35ffff60 	cbnz	w0, 3005260 <process_dte_bootcode_rtk+0x48>
		return ret;
	}


	if (sys_is_scs_activated == TRUE) {
 3005278:	b0000021 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 300527c:	b9437434 	ldr	w20, [x1,#884]
 3005280:	7100069f 	cmp	w20, #0x1
 3005284:	54fffee1 	b.ne	3005260 <process_dte_bootcode_rtk+0x48>
		// decrypt DTE_Bootcode_RTK
		#ifdef ROM_DEBUG // for debug only
		hexdump("DTE_Bootcode_RTK before decrypt", p_data, 0x40);
 3005288:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 300528c:	52800802 	mov	w2, #0x40                  	// #64
 3005290:	d2a00061 	mov	x1, #0x30000               	// #196608
 3005294:	91046000 	add	x0, x0, #0x118
 3005298:	94000901 	bl	300769c <hexdump>
		#endif

		#ifdef ENABLE_MMU
		sys_dcache_flush_MVA((uintptr_t)p_data, (uintptr_t)p_data + size);
 300529c:	b9402fe1 	ldr	w1, [sp,#44]
 30052a0:	d2a00060 	mov	x0, #0x30000               	// #196608
 30052a4:	8b000021 	add	x1, x1, x0
 30052a8:	97ffeb69 	bl	300004c <sys_dcache_flush_MVA>
		#endif

		decrypt_size = size - sizeof(Trusted_FW_Tail_T);
 30052ac:	b9402ff5 	ldr	w21, [sp,#44]
		ret = smc_AES_ECB_decrypt_MEM((uintptr_t)p_data, decrypt_size, (uintptr_t)p_data, (uintptr_t)p_aes_key);
 30052b0:	52a00062 	mov	w2, #0x30000               	// #196608
 30052b4:	529aab03 	mov	w3, #0xd558                	// #54616
 30052b8:	72b00023 	movk	w3, #0x8001, lsl #16

		#ifdef ENABLE_MMU
		sys_dcache_flush_MVA((uintptr_t)p_data, (uintptr_t)p_data + size);
		#endif

		decrypt_size = size - sizeof(Trusted_FW_Tail_T);
 30052bc:	510452b5 	sub	w21, w21, #0x114
		ret = smc_AES_ECB_decrypt_MEM((uintptr_t)p_data, decrypt_size, (uintptr_t)p_data, (uintptr_t)p_aes_key);
 30052c0:	2a0203e0 	mov	w0, w2
 30052c4:	2a1503e1 	mov	w1, w21
 30052c8:	940011c3 	bl	30099d4 <smc_AES_ECB_decrypt_MEM>
 30052cc:	2a0003f3 	mov	w19, w0

		if (ret != OK) {
 30052d0:	350004a0 	cbnz	w0, 3005364 <process_dte_bootcode_rtk+0x14c>
			#endif
			return ret;
		}

		#ifdef ROM_DEBUG // for debug only
		hexdump("DTE_Bootcode_RTK after decrypt", p_data, 0x40);
 30052d4:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 30052d8:	52800802 	mov	w2, #0x40                  	// #64
 30052dc:	d2a00061 	mov	x1, #0x30000               	// #196608
 30052e0:	91056000 	add	x0, x0, #0x158
 30052e4:	940008ee 	bl	300769c <hexdump>
		#endif

        	// verify DTE_Bootcode_RTK area
		verify_size = size - 256;
		rsa_key.type = NORMAL_KEY;
 30052e8:	b90033ff 	str	wzr, [sp,#48]
		#ifdef ROM_DEBUG // for debug only
		hexdump("DTE_Bootcode_RTK after decrypt", p_data, 0x40);
		#endif

        	// verify DTE_Bootcode_RTK area
		verify_size = size - 256;
 30052ec:	b9402fe2 	ldr	w2, [sp,#44]
		rsa_key.type = NORMAL_KEY;
		rsa_key.key = g_DTE_FW_Certificate.Ext_Public_RSA_Key;
        	ret = verify_img_signature(p_data, verify_size, p_data + verify_size, &rsa_key, TRUE);
 30052f0:	d2a00060 	mov	x0, #0x30000               	// #196608
		#endif

        	// verify DTE_Bootcode_RTK area
		verify_size = size - 256;
		rsa_key.type = NORMAL_KEY;
		rsa_key.key = g_DTE_FW_Certificate.Ext_Public_RSA_Key;
 30052f4:	f0000025 	adrp	x5, 300c000 <g_backup_BootArray_FW_Table+0x2a0>
 30052f8:	910580a5 	add	x5, x5, #0x160
		#ifdef ROM_DEBUG // for debug only
		hexdump("DTE_Bootcode_RTK after decrypt", p_data, 0x40);
		#endif

        	// verify DTE_Bootcode_RTK area
		verify_size = size - 256;
 30052fc:	51040042 	sub	w2, w2, #0x100
		rsa_key.type = NORMAL_KEY;
		rsa_key.key = g_DTE_FW_Certificate.Ext_Public_RSA_Key;
 3005300:	910400a5 	add	x5, x5, #0x100
        	ret = verify_img_signature(p_data, verify_size, p_data + verify_size, &rsa_key, TRUE);
 3005304:	2a0203e1 	mov	w1, w2
 3005308:	2a1403e4 	mov	w4, w20
 300530c:	2a0203e2 	mov	w2, w2
 3005310:	9100c3e3 	add	x3, sp, #0x30
 3005314:	8b000042 	add	x2, x2, x0
		#endif

        	// verify DTE_Bootcode_RTK area
		verify_size = size - 256;
		rsa_key.type = NORMAL_KEY;
		rsa_key.key = g_DTE_FW_Certificate.Ext_Public_RSA_Key;
 3005318:	f9001fe5 	str	x5, [sp,#56]
        	ret = verify_img_signature(p_data, verify_size, p_data + verify_size, &rsa_key, TRUE);
 300531c:	94000a12 	bl	3007b64 <verify_img_signature>
		if (ret != OK) {
 3005320:	35fffa00 	cbnz	w0, 3005260 <process_dte_bootcode_rtk+0x48>
			return ret;
		}

		// verify controlling data & key right
		p_tail = (Trusted_FW_Tail_T*)(p_data + decrypt_size);
 3005324:	2a1503f3 	mov	w19, w21
 3005328:	9140c273 	add	x19, x19, #0x30, lsl #12
		ret = verify_ctrl_data(&p_tail->Ctrl_Data);
 300532c:	91001260 	add	x0, x19, #0x4
 3005330:	97ffff51 	bl	3005074 <verify_ctrl_data>
		if (ret != OK) {
 3005334:	35fff960 	cbnz	w0, 3005260 <process_dte_bootcode_rtk+0x48>
			return ret;
		}

		if (p_tail->Key_Rights_CheckID != KEY_RIGHT_DTE_FW) {
 3005338:	b9400261 	ldr	w1, [x19]
 300533c:	52800660 	mov	w0, #0x33                  	// #51
 3005340:	7100103f 	cmp	w1, #0x4
 3005344:	1a9f1000 	csel	w0, w0, wzr, ne
 3005348:	17ffffc6 	b	3005260 <process_dte_bootcode_rtk+0x48>
	int i = 0;

	// copy DTE_Bootcode_RTK from flash to ddr
	switch (sys_boot_flash_type) {
		case SPI_FLASH_BOOT:
			ret = get_dte_bootcode_rtk_spi(&size);
 300534c:	9100b3e0 	add	x0, sp, #0x2c
 3005350:	9400017a 	bl	3005938 <get_dte_bootcode_rtk_spi>
			break;
 3005354:	17ffffc8 	b	3005274 <process_dte_bootcode_rtk+0x5c>
		case NAND_FLASH_BOOT:
			ret = get_dte_bootcode_rtk_nand(&size);
			break;
		case EMMC_BOOT:
			ret = get_dte_bootcode_rtk_emmc(&size);
 3005358:	9100b3e0 	add	x0, sp, #0x2c
 300535c:	94000095 	bl	30055b0 <get_dte_bootcode_rtk_emmc>
			break;
 3005360:	17ffffc5 	b	3005274 <process_dte_bootcode_rtk+0x5c>
		decrypt_size = size - sizeof(Trusted_FW_Tail_T);
		ret = smc_AES_ECB_decrypt_MEM((uintptr_t)p_data, decrypt_size, (uintptr_t)p_data, (uintptr_t)p_aes_key);

		if (ret != OK) {
			#ifdef ROM_DEBUG // for debug only
			printf("smc call (AES decrypt) fail!\n");
 3005364:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3005368:	9104e000 	add	x0, x0, #0x138
 300536c:	97ffecdb 	bl	30006d8 <puts>
			#endif
			return ret;
 3005370:	2a1303e0 	mov	w0, w19
 3005374:	17ffffbb 	b	3005260 <process_dte_bootcode_rtk+0x48>

0000000003005378 <copy_image_from_emmc>:
*/
	return ret;
}

static int copy_image_from_emmc(emmc_partition_t part, unsigned int blk_no, unsigned int len, unsigned char *dst)
{
 3005378:	d10803ff 	sub	sp, sp, #0x200
 300537c:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
 3005380:	2a0203f4 	mov	w20, w2
	__align__ unsigned char tmp_buf[EMMC_BLOCK_SIZE];

#ifdef ROM_DEBUG
	prints("copy_img_from_emmc(");
	print_hex(part);
	prints(", ");
 3005384:	90000033 	adrp	x19, 3009000 <el3_vectors>
 3005388:	913b8273 	add	x19, x19, #0xee0
*/
	return ret;
}

static int copy_image_from_emmc(emmc_partition_t part, unsigned int blk_no, unsigned int len, unsigned char *dst)
{
 300538c:	a9015bf5 	stp	x21, x22, [sp,#16]
 3005390:	2a0003f6 	mov	w22, w0
	unsigned int blk_cnt = len / EMMC_BLOCK_SIZE; // number of full blocks
	unsigned int remain_len = len % EMMC_BLOCK_SIZE; // bytes remained in tail block
	__align__ unsigned char tmp_buf[EMMC_BLOCK_SIZE];

#ifdef ROM_DEBUG
	prints("copy_img_from_emmc(");
 3005394:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3005398:	9105e000 	add	x0, x0, #0x178
*/
	return ret;
}

static int copy_image_from_emmc(emmc_partition_t part, unsigned int blk_no, unsigned int len, unsigned char *dst)
{
 300539c:	a9027bf7 	stp	x23, x30, [sp,#32]
 30053a0:	aa0303f5 	mov	x21, x3
 30053a4:	2a0103f7 	mov	w23, w1
	unsigned int blk_cnt = len / EMMC_BLOCK_SIZE; // number of full blocks
	unsigned int remain_len = len % EMMC_BLOCK_SIZE; // bytes remained in tail block
	__align__ unsigned char tmp_buf[EMMC_BLOCK_SIZE];

#ifdef ROM_DEBUG
	prints("copy_img_from_emmc(");
 30053a8:	9400034a 	bl	30060d0 <prints>
	print_hex(part);
 30053ac:	2a1603e0 	mov	w0, w22
 30053b0:	9400037a 	bl	3006198 <print_hex>
	prints(", ");
 30053b4:	aa1303e0 	mov	x0, x19
 30053b8:	94000346 	bl	30060d0 <prints>
	print_hex(blk_no);
 30053bc:	2a1703e0 	mov	w0, w23
 30053c0:	94000376 	bl	3006198 <print_hex>
	prints(", ");
 30053c4:	aa1303e0 	mov	x0, x19
 30053c8:	94000342 	bl	30060d0 <prints>
	print_hex(len);
 30053cc:	2a1403e0 	mov	w0, w20
 30053d0:	94000372 	bl	3006198 <print_hex>
	prints(", ");
 30053d4:	aa1303e0 	mov	x0, x19
 30053d8:	9400033e 	bl	30060d0 <prints>
	print_hex((uintptr_t)dst);
 30053dc:	2a1503e0 	mov	w0, w21
 30053e0:	9400036e 	bl	3006198 <print_hex>
	prints(")\n");
 30053e4:	90000020 	adrp	x0, 3009000 <el3_vectors>
 30053e8:	91352000 	add	x0, x0, #0xd48
 30053ec:	94000339 	bl	30060d0 <prints>
#endif

	if ((dst == NULL) || (len == 0)) {
 30053f0:	34000054 	cbz	w20, 30053f8 <copy_image_from_emmc+0x80>
 30053f4:	b50000f5 	cbnz	x21, 3005410 <copy_image_from_emmc+0x98>
		return ERR_INVALID_PARAM;
 30053f8:	52801260 	mov	w0, #0x93                  	// #147
			return ERR_UNEXPECTED_SIZE;
		}
	}

	return ret;
}
 30053fc:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3005400:	a9427bf7 	ldp	x23, x30, [sp,#32]
 3005404:	a8c353f3 	ldp	x19, x20, [sp],#48
 3005408:	910803ff 	add	sp, sp, #0x200
 300540c:	d65f03c0 	ret

	if ((dst == NULL) || (len == 0)) {
		return ERR_INVALID_PARAM;
	}

	switch_partition(part);
 3005410:	2a1603e0 	mov	w0, w22
}

static int copy_image_from_emmc(emmc_partition_t part, unsigned int blk_no, unsigned int len, unsigned char *dst)
{
	int ret = ERR_DEFAULT;
	unsigned int blk_cnt = len / EMMC_BLOCK_SIZE; // number of full blocks
 3005414:	53097e93 	lsr	w19, w20, #9

	if ((dst == NULL) || (len == 0)) {
		return ERR_INVALID_PARAM;
	}

	switch_partition(part);
 3005418:	97fff1ec 	bl	3001bc8 <switch_partition>
	return ret;
}

static int copy_image_from_emmc(emmc_partition_t part, unsigned int blk_no, unsigned int len, unsigned char *dst)
{
	int ret = ERR_DEFAULT;
 300541c:	52801fe1 	mov	w1, #0xff                  	// #255
	}

	switch_partition(part);

	// handle full blocks: all data in the blocks
	if (blk_cnt > 0) {
 3005420:	350002b3 	cbnz	w19, 3005474 <copy_image_from_emmc+0xfc>
			return ret;
		}
	}

	// handle tail block: only part of data in the block
	if (remain_len != 0) {
 3005424:	72002296 	ands	w22, w20, #0x1ff
 3005428:	2a0103e0 	mov	w0, w1
 300542c:	54fffe80 	b.eq	30053fc <copy_image_from_emmc+0x84>
		// read tail block to temp buffer
		ret = romcr_blk_ops(0, blk_no + blk_cnt, 1, tmp_buf);
 3005430:	52800022 	mov	w2, #0x1                   	// #1
 3005434:	9100c3e3 	add	x3, sp, #0x30
 3005438:	0b170261 	add	w1, w19, w23
 300543c:	52800000 	mov	w0, #0x0                   	// #0
 3005440:	97fff124 	bl	30018d0 <romcr_blk_ops>
		if (ret != OK) {
 3005444:	35fffdc0 	cbnz	w0, 30053fc <copy_image_from_emmc+0x84>
			return ret;
		}
		// copy part of the data in temp buffer to destination
		if (copy_memory(dst + len - remain_len, tmp_buf, remain_len) != remain_len) {
 3005448:	2a1403f4 	mov	w20, w20
 300544c:	2a1603e0 	mov	w0, w22
 3005450:	cb000280 	sub	x0, x20, x0
 3005454:	9100c3e1 	add	x1, sp, #0x30
 3005458:	2a1603e2 	mov	w2, w22
 300545c:	8b0002a0 	add	x0, x21, x0
 3005460:	940007ed 	bl	3007414 <copy_memory>
 3005464:	6b16001f 	cmp	w0, w22
 3005468:	52801301 	mov	w1, #0x98                  	// #152
 300546c:	1a9f1020 	csel	w0, w1, wzr, ne
 3005470:	17ffffe3 	b	30053fc <copy_image_from_emmc+0x84>
	switch_partition(part);

	// handle full blocks: all data in the blocks
	if (blk_cnt > 0) {
		// read full blocks to destination directly
		ret = romcr_blk_ops(0, blk_no, blk_cnt, dst);
 3005474:	2a1703e1 	mov	w1, w23
 3005478:	aa1503e3 	mov	x3, x21
 300547c:	2a1303e2 	mov	w2, w19
 3005480:	52800000 	mov	w0, #0x0                   	// #0
 3005484:	97fff113 	bl	30018d0 <romcr_blk_ops>
 3005488:	2a0003e1 	mov	w1, w0
		if (ret != OK) {
 300548c:	34fffcc1 	cbz	w1, 3005424 <copy_image_from_emmc+0xac>
 3005490:	17ffffdb 	b	30053fc <copy_image_from_emmc+0x84>

0000000003005494 <get_dte_fw_certificate_emmc>:

	return copy_image_from_emmc(part, blk_no, ptr->length, (UINT8 *)&g_DTE_FW_Certificate);
}

int get_dte_fw_certificate_emmc(void)
{
 3005494:	a9bd53f3 	stp	x19, x20, [sp,#-48]!

static int get_dte_fw_certificate(image_type_t type)
{
	emmc_partition_t part = PART_BOOT1;
	unsigned int blk_no;
	BootArray_FW_Entry_T *ptr = p_FW_Entry_DTE_FW_Certificate;
 3005498:	d0000020 	adrp	x0, 300b000 <g_nand_data_dma+0x2c0>
 300549c:	f946a813 	ldr	x19, [x0,#3408]

	return copy_image_from_emmc(part, blk_no, ptr->length, (UINT8 *)&g_DTE_FW_Certificate);
}

int get_dte_fw_certificate_emmc(void)
{
 30054a0:	a9015bf5 	stp	x21, x22, [sp,#16]
 30054a4:	a9027bf7 	stp	x23, x30, [sp,#32]
	return ret;
}

static int determine_part_and_blk_no(image_type_t type, BootArray_FW_Entry_T *ptr, emmc_partition_t *part, unsigned int *blk_no)
{
	if ((ptr == NULL) || (part == NULL) || (blk_no == NULL)) {
 30054a8:	b50000d3 	cbnz	x19, 30054c0 <get_dte_fw_certificate_emmc+0x2c>
	if (ret != OK) {
		return ERR_DTE_FW_CERTIFICATE_NOT_FOUND;
	}
*/
	return ret;
}
 30054ac:	52801260 	mov	w0, #0x93                  	// #147
 30054b0:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30054b4:	a9427bf7 	ldp	x23, x30, [sp,#32]
 30054b8:	a8c353f3 	ldp	x19, x20, [sp],#48
 30054bc:	d65f03c0 	ret
{
	if ((ptr == NULL) || (part == NULL) || (blk_no == NULL)) {
		return ERR_INVALID_PARAM;
	}

	if (ptr->emmc_partition == 0) { // image in UDA partition
 30054c0:	39403260 	ldrb	w0, [x19,#12]
		*part = PART_UDA;
		*blk_no = ptr->flash_addr / EMMC_BLOCK_SIZE;
 30054c4:	b9400676 	ldr	w22, [x19,#4]
{
	if ((ptr == NULL) || (part == NULL) || (blk_no == NULL)) {
		return ERR_INVALID_PARAM;
	}

	if (ptr->emmc_partition == 0) { // image in UDA partition
 30054c8:	360006e0 	tbz	w0, #0, 30055a4 <get_dte_fw_certificate_emmc+0x110>
	else { // image in boot partition
		if (type == BACKUP) {
			*part = PART_BOOT2; // backup image in boot2 partition
		}
		else {
			*part = PART_BOOT1; // main image in boo1 partition
 30054cc:	52800037 	mov	w23, #0x1                   	// #1
		}
		*blk_no = ptr->flash_addr / EMMC_BLOCK_SIZE;
 30054d0:	53097ed6 	lsr	w22, w22, #9
	if (determine_part_and_blk_no(type, ptr, &part, &blk_no) != OK) {
		return ERR_INVALID_PARAM;
	}

#ifdef ROM_DEBUG
	rom_debug_val(__FUNCTION__, type);
 30054d4:	90000020 	adrp	x0, 3009000 <el3_vectors>
 30054d8:	912dc000 	add	x0, x0, #0xb70
 30054dc:	90000035 	adrp	x21, 3009000 <el3_vectors>
 30054e0:	913c02b5 	add	x21, x21, #0xf00
 30054e4:	940002fb 	bl	30060d0 <prints>
 30054e8:	90000034 	adrp	x20, 3009000 <el3_vectors>
 30054ec:	91396294 	add	x20, x20, #0xe58
 30054f0:	aa1503e0 	mov	x0, x21
 30054f4:	940002f7 	bl	30060d0 <prints>
 30054f8:	52800000 	mov	w0, #0x0                   	// #0
 30054fc:	94000327 	bl	3006198 <print_hex>
 3005500:	aa1403e0 	mov	x0, x20
 3005504:	940002f3 	bl	30060d0 <prints>
	prints("fw entry:\n");
 3005508:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 300550c:	91064000 	add	x0, x0, #0x190
 3005510:	940002f0 	bl	30060d0 <prints>
	rom_debug_val("\ttype", ptr->type);
 3005514:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3005518:	91068000 	add	x0, x0, #0x1a0
 300551c:	940002ed 	bl	30060d0 <prints>
 3005520:	aa1503e0 	mov	x0, x21
 3005524:	940002eb 	bl	30060d0 <prints>
 3005528:	b9400260 	ldr	w0, [x19]
 300552c:	9400031b 	bl	3006198 <print_hex>
 3005530:	aa1403e0 	mov	x0, x20
 3005534:	940002e7 	bl	30060d0 <prints>
	rom_debug_val("\tflash_addr", ptr->flash_addr);
 3005538:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 300553c:	9106a000 	add	x0, x0, #0x1a8
 3005540:	940002e4 	bl	30060d0 <prints>
 3005544:	aa1503e0 	mov	x0, x21
 3005548:	940002e2 	bl	30060d0 <prints>
 300554c:	b9400660 	ldr	w0, [x19,#4]
 3005550:	94000312 	bl	3006198 <print_hex>
 3005554:	aa1403e0 	mov	x0, x20
 3005558:	940002de 	bl	30060d0 <prints>
	rom_debug_val("\tlength", ptr->length);
 300555c:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3005560:	9106e000 	add	x0, x0, #0x1b8
 3005564:	940002db 	bl	30060d0 <prints>
 3005568:	aa1503e0 	mov	x0, x21
 300556c:	940002d9 	bl	30060d0 <prints>
 3005570:	b9400a60 	ldr	w0, [x19,#8]
 3005574:	94000309 	bl	3006198 <print_hex>
 3005578:	aa1403e0 	mov	x0, x20
 300557c:	940002d5 	bl	30060d0 <prints>
#endif

	return copy_image_from_emmc(part, blk_no, ptr->length, (UINT8 *)&g_DTE_FW_Certificate);
 3005580:	b9400a62 	ldr	w2, [x19,#8]
 3005584:	2a1603e1 	mov	w1, w22
 3005588:	2a1703e0 	mov	w0, w23
 300558c:	f0000023 	adrp	x3, 300c000 <g_backup_BootArray_FW_Table+0x2a0>
 3005590:	91098063 	add	x3, x3, #0x260
	if (ret != OK) {
		return ERR_DTE_FW_CERTIFICATE_NOT_FOUND;
	}
*/
	return ret;
}
 3005594:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3005598:	a9427bf7 	ldp	x23, x30, [sp,#32]
 300559c:	a8c353f3 	ldp	x19, x20, [sp],#48
	rom_debug_val("\ttype", ptr->type);
	rom_debug_val("\tflash_addr", ptr->flash_addr);
	rom_debug_val("\tlength", ptr->length);
#endif

	return copy_image_from_emmc(part, blk_no, ptr->length, (UINT8 *)&g_DTE_FW_Certificate);
 30055a0:	17ffff76 	b	3005378 <copy_image_from_emmc>
	if ((ptr == NULL) || (part == NULL) || (blk_no == NULL)) {
		return ERR_INVALID_PARAM;
	}

	if (ptr->emmc_partition == 0) { // image in UDA partition
		*part = PART_UDA;
 30055a4:	52800017 	mov	w23, #0x0                   	// #0
		*blk_no = ptr->flash_addr / EMMC_BLOCK_SIZE;
 30055a8:	53097ed6 	lsr	w22, w22, #9
 30055ac:	17ffffca 	b	30054d4 <get_dte_fw_certificate_emmc+0x40>

00000000030055b0 <get_dte_bootcode_rtk_emmc>:
	*size = ptr->length;
	return copy_image_from_emmc(part, blk_no, ptr->length, (UINT8 *)DTE_BOOTCODE_RTK_TARGET_ADDR);
}

int get_dte_bootcode_rtk_emmc(unsigned int *dte_bootcode_area_size)
{
 30055b0:	a9bc53f3 	stp	x19, x20, [sp,#-64]!

static int get_dte_bootcode_rtk(image_type_t type, unsigned int *size)
{
	emmc_partition_t part = PART_BOOT1;
	unsigned int blk_no;
	BootArray_FW_Entry_T *ptr = p_FW_Entry_DTE_BOOTCODE_RTK;
 30055b4:	d0000021 	adrp	x1, 300b000 <g_nand_data_dma+0x2c0>
 30055b8:	f946a433 	ldr	x19, [x1,#3400]
	*size = ptr->length;
	return copy_image_from_emmc(part, blk_no, ptr->length, (UINT8 *)DTE_BOOTCODE_RTK_TARGET_ADDR);
}

int get_dte_bootcode_rtk_emmc(unsigned int *dte_bootcode_area_size)
{
 30055bc:	a9015bf5 	stp	x21, x22, [sp,#16]
 30055c0:	a90263f7 	stp	x23, x24, [sp,#32]
 30055c4:	f9001bfe 	str	x30, [sp,#48]
	return ret;
}

static int determine_part_and_blk_no(image_type_t type, BootArray_FW_Entry_T *ptr, emmc_partition_t *part, unsigned int *blk_no)
{
	if ((ptr == NULL) || (part == NULL) || (blk_no == NULL)) {
 30055c8:	b50000f3 	cbnz	x19, 30055e4 <get_dte_bootcode_rtk_emmc+0x34>
	if (ret != OK) {
		return ERR_DTE_BOOTCODE_RTK_NOT_FOUND;
	}
*/
	return ret;
}
 30055cc:	52801260 	mov	w0, #0x93                  	// #147
 30055d0:	f9401bfe 	ldr	x30, [sp,#48]
 30055d4:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30055d8:	a94263f7 	ldp	x23, x24, [sp,#32]
 30055dc:	a8c453f3 	ldp	x19, x20, [sp],#64
 30055e0:	d65f03c0 	ret
{
	if ((ptr == NULL) || (part == NULL) || (blk_no == NULL)) {
		return ERR_INVALID_PARAM;
	}

	if (ptr->emmc_partition == 0) { // image in UDA partition
 30055e4:	39403261 	ldrb	w1, [x19,#12]
		*part = PART_UDA;
		*blk_no = ptr->flash_addr / EMMC_BLOCK_SIZE;
 30055e8:	b9400677 	ldr	w23, [x19,#4]
{
	if ((ptr == NULL) || (part == NULL) || (blk_no == NULL)) {
		return ERR_INVALID_PARAM;
	}

	if (ptr->emmc_partition == 0) { // image in UDA partition
 30055ec:	36000761 	tbz	w1, #0, 30056d8 <get_dte_bootcode_rtk_emmc+0x128>
	else { // image in boot partition
		if (type == BACKUP) {
			*part = PART_BOOT2; // backup image in boot2 partition
		}
		else {
			*part = PART_BOOT1; // main image in boo1 partition
 30055f0:	52800038 	mov	w24, #0x1                   	// #1
		}
		*blk_no = ptr->flash_addr / EMMC_BLOCK_SIZE;
 30055f4:	53097ef7 	lsr	w23, w23, #9
 30055f8:	aa0003f6 	mov	x22, x0
	if (determine_part_and_blk_no(type, ptr, &part, &blk_no) != OK) {
		return ERR_INVALID_PARAM;
	}

#ifdef ROM_DEBUG
	rom_debug_val(__FUNCTION__, type);
 30055fc:	90000020 	adrp	x0, 3009000 <el3_vectors>
 3005600:	912dc000 	add	x0, x0, #0xb70
 3005604:	91006000 	add	x0, x0, #0x18
 3005608:	90000035 	adrp	x21, 3009000 <el3_vectors>
 300560c:	913c02b5 	add	x21, x21, #0xf00
 3005610:	940002b0 	bl	30060d0 <prints>
 3005614:	90000034 	adrp	x20, 3009000 <el3_vectors>
 3005618:	91396294 	add	x20, x20, #0xe58
 300561c:	aa1503e0 	mov	x0, x21
 3005620:	940002ac 	bl	30060d0 <prints>
 3005624:	52800000 	mov	w0, #0x0                   	// #0
 3005628:	940002dc 	bl	3006198 <print_hex>
 300562c:	aa1403e0 	mov	x0, x20
 3005630:	940002a8 	bl	30060d0 <prints>
	prints("fw entry:\n");
 3005634:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3005638:	91064000 	add	x0, x0, #0x190
 300563c:	940002a5 	bl	30060d0 <prints>
	rom_debug_val("\ttype", ptr->type);
 3005640:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3005644:	91068000 	add	x0, x0, #0x1a0
 3005648:	940002a2 	bl	30060d0 <prints>
 300564c:	aa1503e0 	mov	x0, x21
 3005650:	940002a0 	bl	30060d0 <prints>
 3005654:	b9400260 	ldr	w0, [x19]
 3005658:	940002d0 	bl	3006198 <print_hex>
 300565c:	aa1403e0 	mov	x0, x20
 3005660:	9400029c 	bl	30060d0 <prints>
	rom_debug_val("\tflash_addr", ptr->flash_addr);
 3005664:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3005668:	9106a000 	add	x0, x0, #0x1a8
 300566c:	94000299 	bl	30060d0 <prints>
 3005670:	aa1503e0 	mov	x0, x21
 3005674:	94000297 	bl	30060d0 <prints>
 3005678:	b9400660 	ldr	w0, [x19,#4]
 300567c:	940002c7 	bl	3006198 <print_hex>
 3005680:	aa1403e0 	mov	x0, x20
 3005684:	94000293 	bl	30060d0 <prints>
	rom_debug_val("\tlength", ptr->length);
 3005688:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 300568c:	9106e000 	add	x0, x0, #0x1b8
 3005690:	94000290 	bl	30060d0 <prints>
 3005694:	aa1503e0 	mov	x0, x21
 3005698:	9400028e 	bl	30060d0 <prints>
 300569c:	b9400a60 	ldr	w0, [x19,#8]
 30056a0:	940002be 	bl	3006198 <print_hex>
 30056a4:	aa1403e0 	mov	x0, x20
 30056a8:	9400028a 	bl	30060d0 <prints>
#endif

	*size = ptr->length;
 30056ac:	b9400a60 	ldr	w0, [x19,#8]
	return copy_image_from_emmc(part, blk_no, ptr->length, (UINT8 *)DTE_BOOTCODE_RTK_TARGET_ADDR);
 30056b0:	2a1703e1 	mov	w1, w23
	rom_debug_val("\ttype", ptr->type);
	rom_debug_val("\tflash_addr", ptr->flash_addr);
	rom_debug_val("\tlength", ptr->length);
#endif

	*size = ptr->length;
 30056b4:	b90002c0 	str	w0, [x22]
	return copy_image_from_emmc(part, blk_no, ptr->length, (UINT8 *)DTE_BOOTCODE_RTK_TARGET_ADDR);
 30056b8:	2a1803e0 	mov	w0, w24
 30056bc:	d2a00063 	mov	x3, #0x30000               	// #196608
 30056c0:	b9400a62 	ldr	w2, [x19,#8]
	if (ret != OK) {
		return ERR_DTE_BOOTCODE_RTK_NOT_FOUND;
	}
*/
	return ret;
}
 30056c4:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30056c8:	a94263f7 	ldp	x23, x24, [sp,#32]
 30056cc:	f9401bfe 	ldr	x30, [sp,#48]
 30056d0:	a8c453f3 	ldp	x19, x20, [sp],#64
	rom_debug_val("\tflash_addr", ptr->flash_addr);
	rom_debug_val("\tlength", ptr->length);
#endif

	*size = ptr->length;
	return copy_image_from_emmc(part, blk_no, ptr->length, (UINT8 *)DTE_BOOTCODE_RTK_TARGET_ADDR);
 30056d4:	17ffff29 	b	3005378 <copy_image_from_emmc>
	if ((ptr == NULL) || (part == NULL) || (blk_no == NULL)) {
		return ERR_INVALID_PARAM;
	}

	if (ptr->emmc_partition == 0) { // image in UDA partition
		*part = PART_UDA;
 30056d8:	52800018 	mov	w24, #0x0                   	// #0
		*blk_no = ptr->flash_addr / EMMC_BLOCK_SIZE;
 30056dc:	53097ef7 	lsr	w23, w23, #9
 30056e0:	17ffffc6 	b	30055f8 <get_dte_bootcode_rtk_emmc+0x48>

00000000030056e4 <copy_image_from_nand>:
	return ERR_BL31_NOT_FOUND;
}


static int copy_image_from_nand(unsigned int page_addr, unsigned int len, char *dst)
{
 30056e4:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
 30056e8:	2a0103f3 	mov	w19, w1
 30056ec:	aa0203f4 	mov	x20, x2
 30056f0:	a9015bf5 	stp	x21, x22, [sp,#16]
 30056f4:	a90263f7 	stp	x23, x24, [sp,#32]
 30056f8:	f9001bfe 	str	x30, [sp,#48]
 30056fc:	2a0003f5 	mov	w21, w0
 3005700:	b0000037 	adrp	x23, 300a000 <__FUNCTION__.3108+0x3d8>
	int ret = ERR_DEFAULT;
	unsigned int copy_size = 0;
	unsigned int remain_size = len;
	char *ptr = dst;

	while (remain_size != 0) {
 3005704:	340005c1 	cbz	w1, 30057bc <copy_image_from_nand+0xd8>
 *  Function body
 ************************************************************************/

static int read_one_page(unsigned int page_addr, void *dst)
{
	if (nf_read(page_addr, (unsigned char *)dst, g_PageSize, NULL) == 0)
 3005708:	b0000038 	adrp	x24, 300a000 <__FUNCTION__.3108+0x3d8>
 300570c:	91350318 	add	x24, x24, #0xd40
	unsigned int remain_size = len;
	char *ptr = dst;

	while (remain_size != 0) {
		// note: dma requires 8-byte aligned address
		if ((remain_size < g_PageSize) || ((uintptr_t)ptr & 0x7)) {
 3005710:	9134d2f7 	add	x23, x23, #0xd34
 3005714:	1400000e 	b	300574c <copy_image_from_nand+0x68>
			ret = read_one_page(page_addr, g_nand_data_dma);
			if (ret != OK) {
				return ret;
			}

			copy_size = (remain_size < g_PageSize ? remain_size : g_PageSize);
 3005718:	b94002f6 	ldr	w22, [x23]
			ret = copy_memory(ptr, g_nand_data_dma, copy_size);
 300571c:	aa1403e0 	mov	x0, x20
 3005720:	aa1803e1 	mov	x1, x24
			ret = read_one_page(page_addr, g_nand_data_dma);
			if (ret != OK) {
				return ret;
			}

			copy_size = (remain_size < g_PageSize ? remain_size : g_PageSize);
 3005724:	6b16027f 	cmp	w19, w22
 3005728:	1a969276 	csel	w22, w19, w22, ls
			ret = copy_memory(ptr, g_nand_data_dma, copy_size);
 300572c:	2a1603e2 	mov	w2, w22
 3005730:	94000739 	bl	3007414 <copy_memory>
			if (ret != copy_size) {
 3005734:	6b0002df 	cmp	w22, w0
 3005738:	540004e1 	b.ne	30057d4 <copy_image_from_nand+0xf0>
	int ret = ERR_DEFAULT;
	unsigned int copy_size = 0;
	unsigned int remain_size = len;
	char *ptr = dst;

	while (remain_size != 0) {
 300573c:	6b000273 	subs	w19, w19, w0
			if (ret != OK) {
				return ret;
			}
			copy_size = g_PageSize;
		}
		ptr += copy_size;
 3005740:	8b204294 	add	x20, x20, w0, uxtw
		remain_size -= copy_size;
		page_addr++;
 3005744:	110006b5 	add	w21, w21, #0x1
	int ret = ERR_DEFAULT;
	unsigned int copy_size = 0;
	unsigned int remain_size = len;
	char *ptr = dst;

	while (remain_size != 0) {
 3005748:	540003a0 	b.eq	30057bc <copy_image_from_nand+0xd8>
		// note: dma requires 8-byte aligned address
		if ((remain_size < g_PageSize) || ((uintptr_t)ptr & 0x7)) {
 300574c:	b94002e4 	ldr	w4, [x23]
 *  Function body
 ************************************************************************/

static int read_one_page(unsigned int page_addr, void *dst)
{
	if (nf_read(page_addr, (unsigned char *)dst, g_PageSize, NULL) == 0)
 3005750:	d2800003 	mov	x3, #0x0                   	// #0
 3005754:	aa1803e1 	mov	x1, x24
 3005758:	2a1503e0 	mov	w0, w21
	unsigned int remain_size = len;
	char *ptr = dst;

	while (remain_size != 0) {
		// note: dma requires 8-byte aligned address
		if ((remain_size < g_PageSize) || ((uintptr_t)ptr & 0x7)) {
 300575c:	6b13009f 	cmp	w4, w19
 *  Function body
 ************************************************************************/

static int read_one_page(unsigned int page_addr, void *dst)
{
	if (nf_read(page_addr, (unsigned char *)dst, g_PageSize, NULL) == 0)
 3005760:	2a0403e2 	mov	w2, w4
	unsigned int remain_size = len;
	char *ptr = dst;

	while (remain_size != 0) {
		// note: dma requires 8-byte aligned address
		if ((remain_size < g_PageSize) || ((uintptr_t)ptr & 0x7)) {
 3005764:	92400a85 	and	x5, x20, #0x7
 3005768:	54000048 	b.hi	3005770 <copy_image_from_nand+0x8c>
 300576c:	b4000125 	cbz	x5, 3005790 <copy_image_from_nand+0xac>
 *  Function body
 ************************************************************************/

static int read_one_page(unsigned int page_addr, void *dst)
{
	if (nf_read(page_addr, (unsigned char *)dst, g_PageSize, NULL) == 0)
 3005770:	97fff740 	bl	3003470 <nf_read>
 3005774:	34fffd20 	cbz	w0, 3005718 <copy_image_from_nand+0x34>
		// note: dma requires 8-byte aligned address
		if ((remain_size < g_PageSize) || ((uintptr_t)ptr & 0x7)) {
			// read flash to temp buffer
			ret = read_one_page(page_addr, g_nand_data_dma);
			if (ret != OK) {
				return ret;
 3005778:	52801fe0 	mov	w0, #0xff                  	// #255
		remain_size -= copy_size;
		page_addr++;
	}

	return (remain_size == 0 ? OK : ERR_UNEXPECTED_SIZE);
}
 300577c:	f9401bfe 	ldr	x30, [sp,#48]
 3005780:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3005784:	a94263f7 	ldp	x23, x24, [sp,#32]
 3005788:	a8c453f3 	ldp	x19, x20, [sp],#64
 300578c:	d65f03c0 	ret
 *  Function body
 ************************************************************************/

static int read_one_page(unsigned int page_addr, void *dst)
{
	if (nf_read(page_addr, (unsigned char *)dst, g_PageSize, NULL) == 0)
 3005790:	d2800003 	mov	x3, #0x0                   	// #0
 3005794:	2a0403e2 	mov	w2, w4
 3005798:	aa1403e1 	mov	x1, x20
 300579c:	2a1503e0 	mov	w0, w21
 30057a0:	97fff734 	bl	3003470 <nf_read>
 30057a4:	35fffea0 	cbnz	w0, 3005778 <copy_image_from_nand+0x94>
			// read page to destination directly
			ret = read_one_page(page_addr, ptr);
			if (ret != OK) {
				return ret;
			}
			copy_size = g_PageSize;
 30057a8:	b94002e0 	ldr	w0, [x23]
		}
		ptr += copy_size;
		remain_size -= copy_size;
		page_addr++;
 30057ac:	110006b5 	add	w21, w21, #0x1
	int ret = ERR_DEFAULT;
	unsigned int copy_size = 0;
	unsigned int remain_size = len;
	char *ptr = dst;

	while (remain_size != 0) {
 30057b0:	6b000273 	subs	w19, w19, w0
			if (ret != OK) {
				return ret;
			}
			copy_size = g_PageSize;
		}
		ptr += copy_size;
 30057b4:	8b204294 	add	x20, x20, w0, uxtw
	int ret = ERR_DEFAULT;
	unsigned int copy_size = 0;
	unsigned int remain_size = len;
	char *ptr = dst;

	while (remain_size != 0) {
 30057b8:	54fffca1 	b.ne	300574c <copy_image_from_nand+0x68>
		ptr += copy_size;
		remain_size -= copy_size;
		page_addr++;
	}

	return (remain_size == 0 ? OK : ERR_UNEXPECTED_SIZE);
 30057bc:	52800000 	mov	w0, #0x0                   	// #0
}
 30057c0:	f9401bfe 	ldr	x30, [sp,#48]
 30057c4:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30057c8:	a94263f7 	ldp	x23, x24, [sp,#32]
 30057cc:	a8c453f3 	ldp	x19, x20, [sp],#64
 30057d0:	d65f03c0 	ret
			}

			copy_size = (remain_size < g_PageSize ? remain_size : g_PageSize);
			ret = copy_memory(ptr, g_nand_data_dma, copy_size);
			if (ret != copy_size) {
				return ERR_COPY_MEMORY;
 30057d4:	52801340 	mov	w0, #0x9a                  	// #154
		remain_size -= copy_size;
		page_addr++;
	}

	return (remain_size == 0 ? OK : ERR_UNEXPECTED_SIZE);
}
 30057d8:	f9401bfe 	ldr	x30, [sp,#48]
 30057dc:	a9415bf5 	ldp	x21, x22, [sp,#16]
 30057e0:	a94263f7 	ldp	x23, x24, [sp,#32]
 30057e4:	a8c453f3 	ldp	x19, x20, [sp],#64
 30057e8:	d65f03c0 	ret

00000000030057ec <get_dte_fw_certificate_nand>:

	return OK;
}

int get_dte_fw_certificate_nand(void)
{
 30057ec:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
}

static int get_dte_fw_certificate(unsigned int ith_backup)
{
	BootArray_FW_Entry_T *p_entry = p_FW_Entry_Certificate_Area;
	unsigned int blk_no = p_entry->flash_addr + ith_backup * NF_BOOTCODE_BLOCK_AMOUNT;
 30057f0:	d0000020 	adrp	x0, 300b000 <g_nand_data_dma+0x2c0>
 30057f4:	f946ac03 	ldr	x3, [x0,#3416]
	char *ptr = (char *)&g_DTE_FW_Certificate;
	unsigned int page_no = blk_no * g_PagePerBlock;
 30057f8:	b0000022 	adrp	x2, 300a000 <__FUNCTION__.3108+0x3d8>

	return OK;
}

int get_dte_fw_certificate_nand(void)
{
 30057fc:	f90013fe 	str	x30, [sp,#32]
 3005800:	a9015bf5 	stp	x21, x22, [sp,#16]
	unsigned int page_no = blk_no * g_PagePerBlock;
	unsigned offset = 0;
	int ret = ERR_DEFAULT;

	#ifdef ROM_DEBUG
	PrintInfo(__FUNCTION__, ith_backup);
 3005804:	90000020 	adrp	x0, 3009000 <el3_vectors>
 3005808:	52800001 	mov	w1, #0x0                   	// #0
static int get_dte_fw_certificate(unsigned int ith_backup)
{
	BootArray_FW_Entry_T *p_entry = p_FW_Entry_Certificate_Area;
	unsigned int blk_no = p_entry->flash_addr + ith_backup * NF_BOOTCODE_BLOCK_AMOUNT;
	char *ptr = (char *)&g_DTE_FW_Certificate;
	unsigned int page_no = blk_no * g_PagePerBlock;
 300580c:	b94d2c42 	ldr	w2, [x2,#3372]
	unsigned offset = 0;
	int ret = ERR_DEFAULT;

	#ifdef ROM_DEBUG
	PrintInfo(__FUNCTION__, ith_backup);
 3005810:	912e8000 	add	x0, x0, #0xba0
static int get_dte_fw_certificate(unsigned int ith_backup)
{
	BootArray_FW_Entry_T *p_entry = p_FW_Entry_Certificate_Area;
	unsigned int blk_no = p_entry->flash_addr + ith_backup * NF_BOOTCODE_BLOCK_AMOUNT;
	char *ptr = (char *)&g_DTE_FW_Certificate;
	unsigned int page_no = blk_no * g_PagePerBlock;
 3005814:	b9400474 	ldr	w20, [x3,#4]
		return ERR_INVALID_PARAM;
	}

	// read the page which contains DTE FW certificate (4th KB of Certificate Area)
	offset = IDX_DTE_FW_Certificate * sizeof(g_DTE_FW_Certificate); // byte offset
	page_no = page_no + offset / g_PageSize;
 3005818:	52818015 	mov	w21, #0xc00                 	// #3072
	ret = copy_image_from_nand(page_no, g_PageSize, (char *)g_nand_data_dma);
 300581c:	b0000033 	adrp	x19, 300a000 <__FUNCTION__.3108+0x3d8>
 3005820:	91350273 	add	x19, x19, #0xd40
static int get_dte_fw_certificate(unsigned int ith_backup)
{
	BootArray_FW_Entry_T *p_entry = p_FW_Entry_Certificate_Area;
	unsigned int blk_no = p_entry->flash_addr + ith_backup * NF_BOOTCODE_BLOCK_AMOUNT;
	char *ptr = (char *)&g_DTE_FW_Certificate;
	unsigned int page_no = blk_no * g_PagePerBlock;
 3005824:	1b147c54 	mul	w20, w2, w20
	unsigned offset = 0;
	int ret = ERR_DEFAULT;

	#ifdef ROM_DEBUG
	PrintInfo(__FUNCTION__, ith_backup);
 3005828:	9400025e 	bl	30061a0 <PrintInfo>
		return ERR_INVALID_PARAM;
	}

	// read the page which contains DTE FW certificate (4th KB of Certificate Area)
	offset = IDX_DTE_FW_Certificate * sizeof(g_DTE_FW_Certificate); // byte offset
	page_no = page_no + offset / g_PageSize;
 300582c:	b0000036 	adrp	x22, 300a000 <__FUNCTION__.3108+0x3d8>
 3005830:	b94d36c0 	ldr	w0, [x22,#3380]
	ret = copy_image_from_nand(page_no, g_PageSize, (char *)g_nand_data_dma);
 3005834:	aa1303e2 	mov	x2, x19
 3005838:	2a0003e1 	mov	w1, w0
		return ERR_INVALID_PARAM;
	}

	// read the page which contains DTE FW certificate (4th KB of Certificate Area)
	offset = IDX_DTE_FW_Certificate * sizeof(g_DTE_FW_Certificate); // byte offset
	page_no = page_no + offset / g_PageSize;
 300583c:	1ac00aa0 	udiv	w0, w21, w0
	ret = copy_image_from_nand(page_no, g_PageSize, (char *)g_nand_data_dma);
 3005840:	0b140000 	add	w0, w0, w20
 3005844:	97ffffa8 	bl	30056e4 <copy_image_from_nand>
	if (ret != OK) {
 3005848:	340000c0 	cbz	w0, 3005860 <get_dte_fw_certificate_nand+0x74>
		if (ret == OK) {
			return ret;
		}
	}
*/
	return ERR_DTE_FW_CERTIFICATE_NOT_FOUND;
 300584c:	52800120 	mov	w0, #0x9                   	// #9
}
 3005850:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3005854:	f94013fe 	ldr	x30, [sp,#32]
 3005858:	a8c353f3 	ldp	x19, x20, [sp],#48
 300585c:	d65f03c0 	ret
	if (ret != OK) {
		return ret;
	}

	// copy DTE FW certificate from temp buffer to destination
	offset = offset % g_PageSize; // offset within page
 3005860:	b94d36c3 	ldr	w3, [x22,#3380]
	if (copy_memory(ptr, g_nand_data_dma + offset, sizeof(g_DTE_FW_Certificate)) != sizeof(g_DTE_FW_Certificate)) {
 3005864:	f0000020 	adrp	x0, 300c000 <g_backup_BootArray_FW_Table+0x2a0>
 3005868:	52808002 	mov	w2, #0x400                 	// #1024
 300586c:	91098000 	add	x0, x0, #0x260
	if (ret != OK) {
		return ret;
	}

	// copy DTE FW certificate from temp buffer to destination
	offset = offset % g_PageSize; // offset within page
 3005870:	1ac30aa1 	udiv	w1, w21, w3
	if (copy_memory(ptr, g_nand_data_dma + offset, sizeof(g_DTE_FW_Certificate)) != sizeof(g_DTE_FW_Certificate)) {
 3005874:	1b03d421 	msub	w1, w1, w3, w21
 3005878:	8b010261 	add	x1, x19, x1
 300587c:	940006e6 	bl	3007414 <copy_memory>
 3005880:	7110001f 	cmp	w0, #0x400
 3005884:	54fffe41 	b.ne	300584c <get_dte_fw_certificate_nand+0x60>
 3005888:	52800000 	mov	w0, #0x0                   	// #0
 300588c:	17fffff1 	b	3005850 <get_dte_fw_certificate_nand+0x64>

0000000003005890 <get_dte_bootcode_rtk_nand>:
	*size = p_entry->length;
	return copy_image_from_nand(blk_no * g_PagePerBlock, *size, ptr);
}

int get_dte_bootcode_rtk_nand(unsigned int *dte_bootcode_rtk_area_size)
{
 3005890:	a9be53f3 	stp	x19, x20, [sp,#-32]!
	BootArray_FW_Entry_T *p_entry = p_FW_Entry_DTE_BOOTCODE_RTK;
	unsigned int blk_no = p_entry->flash_addr + ith_backup * NF_BOOTCODE_BLOCK_AMOUNT;
	char *ptr = (char *)DTE_BOOTCODE_RTK_TARGET_ADDR;

#ifdef ROM_DEBUG
	PrintInfo(__FUNCTION__, ith_backup);
 3005894:	90000022 	adrp	x2, 3009000 <el3_vectors>
 3005898:	912e8042 	add	x2, x2, #0xba0
	return ERR_DTE_FW_CERTIFICATE_NOT_FOUND;
}

static int get_dte_bootcode_rtk(unsigned int ith_backup, unsigned int *size)
{
	BootArray_FW_Entry_T *p_entry = p_FW_Entry_DTE_BOOTCODE_RTK;
 300589c:	d0000021 	adrp	x1, 300b000 <g_nand_data_dma+0x2c0>
 30058a0:	f946a433 	ldr	x19, [x1,#3400]
	*size = p_entry->length;
	return copy_image_from_nand(blk_no * g_PagePerBlock, *size, ptr);
}

int get_dte_bootcode_rtk_nand(unsigned int *dte_bootcode_rtk_area_size)
{
 30058a4:	a9017bf5 	stp	x21, x30, [sp,#16]
	BootArray_FW_Entry_T *p_entry = p_FW_Entry_DTE_BOOTCODE_RTK;
	unsigned int blk_no = p_entry->flash_addr + ith_backup * NF_BOOTCODE_BLOCK_AMOUNT;
	char *ptr = (char *)DTE_BOOTCODE_RTK_TARGET_ADDR;

#ifdef ROM_DEBUG
	PrintInfo(__FUNCTION__, ith_backup);
 30058a8:	52800001 	mov	w1, #0x0                   	// #0
	*size = p_entry->length;
	return copy_image_from_nand(blk_no * g_PagePerBlock, *size, ptr);
}

int get_dte_bootcode_rtk_nand(unsigned int *dte_bootcode_rtk_area_size)
{
 30058ac:	aa0003f5 	mov	x21, x0
	BootArray_FW_Entry_T *p_entry = p_FW_Entry_DTE_BOOTCODE_RTK;
	unsigned int blk_no = p_entry->flash_addr + ith_backup * NF_BOOTCODE_BLOCK_AMOUNT;
	char *ptr = (char *)DTE_BOOTCODE_RTK_TARGET_ADDR;

#ifdef ROM_DEBUG
	PrintInfo(__FUNCTION__, ith_backup);
 30058b0:	91006040 	add	x0, x2, #0x18
}

static int get_dte_bootcode_rtk(unsigned int ith_backup, unsigned int *size)
{
	BootArray_FW_Entry_T *p_entry = p_FW_Entry_DTE_BOOTCODE_RTK;
	unsigned int blk_no = p_entry->flash_addr + ith_backup * NF_BOOTCODE_BLOCK_AMOUNT;
 30058b4:	b9400674 	ldr	w20, [x19,#4]
	char *ptr = (char *)DTE_BOOTCODE_RTK_TARGET_ADDR;

#ifdef ROM_DEBUG
	PrintInfo(__FUNCTION__, ith_backup);
 30058b8:	9400023a 	bl	30061a0 <PrintInfo>

	if (ith_backup >= NF_BOOTCODE_QUANTITY) {
		return ERR_INVALID_PARAM;
	}

	*size = p_entry->length;
 30058bc:	b9400a61 	ldr	w1, [x19,#8]
	return copy_image_from_nand(blk_no * g_PagePerBlock, *size, ptr);
 30058c0:	d2a00062 	mov	x2, #0x30000               	// #196608

	if (ith_backup >= NF_BOOTCODE_QUANTITY) {
		return ERR_INVALID_PARAM;
	}

	*size = p_entry->length;
 30058c4:	b90002a1 	str	w1, [x21]
	return copy_image_from_nand(blk_no * g_PagePerBlock, *size, ptr);
 30058c8:	b0000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 30058cc:	b94d2c00 	ldr	w0, [x0,#3372]
 30058d0:	1b007e80 	mul	w0, w20, w0
 30058d4:	97ffff84 	bl	30056e4 <copy_image_from_nand>
		if (ret == OK) {
			return ret;
		}
	}
*/
	return ERR_BL31_NOT_FOUND;
 30058d8:	6b1f001f 	cmp	w0, wzr
 30058dc:	52800101 	mov	w1, #0x8                   	// #8
}
 30058e0:	1a810000 	csel	w0, w0, w1, eq
 30058e4:	a9417bf5 	ldp	x21, x30, [sp,#16]
 30058e8:	a8c253f3 	ldp	x19, x20, [sp],#32
 30058ec:	d65f03c0 	ret

00000000030058f0 <get_dte_fw_certificate_spi>:
	return ERR_UNEXPECTED_SIZE;
}

int get_dte_fw_certificate_spi(void)
{
	BootArray_FW_Entry_T *ptr = p_FW_Entry_DTE_FW_Certificate;
 30058f0:	d0000020 	adrp	x0, 300b000 <g_nand_data_dma+0x2c0>
 30058f4:	f946a802 	ldr	x2, [x0,#3408]

	return ERR_UNEXPECTED_SIZE;
}

int get_dte_fw_certificate_spi(void)
{
 30058f8:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
 ************************************************************************/

static int copy_and_check_size(void *dst, void *src, unsigned int size)
{
	if ((dst == NULL) || (src == NULL)) {
		return ERR_INVALID_PARAM;
 30058fc:	52801260 	mov	w0, #0x93                  	// #147

int get_dte_fw_certificate_spi(void)
{
	BootArray_FW_Entry_T *ptr = p_FW_Entry_DTE_FW_Certificate;

	return copy_and_check_size(&g_DTE_FW_Certificate, (void *)(uintptr_t)(ptr->flash_addr), ptr->length);
 3005900:	b9400441 	ldr	w1, [x2,#4]
 3005904:	b9400853 	ldr	w19, [x2,#8]
 *  Function body
 ************************************************************************/

static int copy_and_check_size(void *dst, void *src, unsigned int size)
{
	if ((dst == NULL) || (src == NULL)) {
 3005908:	b5000061 	cbnz	x1, 3005914 <get_dte_fw_certificate_spi+0x24>
int get_dte_fw_certificate_spi(void)
{
	BootArray_FW_Entry_T *ptr = p_FW_Entry_DTE_FW_Certificate;

	return copy_and_check_size(&g_DTE_FW_Certificate, (void *)(uintptr_t)(ptr->flash_addr), ptr->length);
}
 300590c:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3005910:	d65f03c0 	ret
{
	if ((dst == NULL) || (src == NULL)) {
		return ERR_INVALID_PARAM;
	}

	if (copy_memory(dst, src, size) == size) {
 3005914:	f0000020 	adrp	x0, 300c000 <g_backup_BootArray_FW_Table+0x2a0>
 3005918:	2a1303e2 	mov	w2, w19
 300591c:	91098000 	add	x0, x0, #0x260
 3005920:	940006bd 	bl	3007414 <copy_memory>
		return OK;
	}

	return ERR_UNEXPECTED_SIZE;
 3005924:	6b00027f 	cmp	w19, w0
 3005928:	52801301 	mov	w1, #0x98                  	// #152
 300592c:	1a8103e0 	csel	w0, wzr, w1, eq
int get_dte_fw_certificate_spi(void)
{
	BootArray_FW_Entry_T *ptr = p_FW_Entry_DTE_FW_Certificate;

	return copy_and_check_size(&g_DTE_FW_Certificate, (void *)(uintptr_t)(ptr->flash_addr), ptr->length);
}
 3005930:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3005934:	d65f03c0 	ret

0000000003005938 <get_dte_bootcode_rtk_spi>:

int get_dte_bootcode_rtk_spi(unsigned int *dte_bootcode_area_size)
{
	BootArray_FW_Entry_T *ptr = p_FW_Entry_DTE_BOOTCODE_RTK;
 3005938:	d0000021 	adrp	x1, 300b000 <g_nand_data_dma+0x2c0>
 300593c:	f946a421 	ldr	x1, [x1,#3400]

	return copy_and_check_size(&g_DTE_FW_Certificate, (void *)(uintptr_t)(ptr->flash_addr), ptr->length);
}

int get_dte_bootcode_rtk_spi(unsigned int *dte_bootcode_area_size)
{
 3005940:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
 ************************************************************************/

static int copy_and_check_size(void *dst, void *src, unsigned int size)
{
	if ((dst == NULL) || (src == NULL)) {
		return ERR_INVALID_PARAM;
 3005944:	52801262 	mov	w2, #0x93                  	// #147

int get_dte_bootcode_rtk_spi(unsigned int *dte_bootcode_area_size)
{
	BootArray_FW_Entry_T *ptr = p_FW_Entry_DTE_BOOTCODE_RTK;

	*dte_bootcode_area_size = ptr->length;
 3005948:	b9400833 	ldr	w19, [x1,#8]
 300594c:	b9000013 	str	w19, [x0]
	return copy_and_check_size((void *)DTE_BOOTCODE_RTK_TARGET_ADDR, (void *)(uintptr_t)(ptr->flash_addr), *dte_bootcode_area_size);
 3005950:	b9400421 	ldr	w1, [x1,#4]
 *  Function body
 ************************************************************************/

static int copy_and_check_size(void *dst, void *src, unsigned int size)
{
	if ((dst == NULL) || (src == NULL)) {
 3005954:	b5000081 	cbnz	x1, 3005964 <get_dte_bootcode_rtk_spi+0x2c>
{
	BootArray_FW_Entry_T *ptr = p_FW_Entry_DTE_BOOTCODE_RTK;

	*dte_bootcode_area_size = ptr->length;
	return copy_and_check_size((void *)DTE_BOOTCODE_RTK_TARGET_ADDR, (void *)(uintptr_t)(ptr->flash_addr), *dte_bootcode_area_size);
}
 3005958:	2a0203e0 	mov	w0, w2
 300595c:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3005960:	d65f03c0 	ret
{
	if ((dst == NULL) || (src == NULL)) {
		return ERR_INVALID_PARAM;
	}

	if (copy_memory(dst, src, size) == size) {
 3005964:	2a1303e2 	mov	w2, w19
 3005968:	d2a00060 	mov	x0, #0x30000               	// #196608
 300596c:	940006aa 	bl	3007414 <copy_memory>
		return OK;
	}

	return ERR_UNEXPECTED_SIZE;
 3005970:	6b00027f 	cmp	w19, w0
 3005974:	52801302 	mov	w2, #0x98                  	// #152
 3005978:	1a8203e2 	csel	w2, wzr, w2, eq
{
	BootArray_FW_Entry_T *ptr = p_FW_Entry_DTE_BOOTCODE_RTK;

	*dte_bootcode_area_size = ptr->length;
	return copy_and_check_size((void *)DTE_BOOTCODE_RTK_TARGET_ADDR, (void *)(uintptr_t)(ptr->flash_addr), *dte_bootcode_area_size);
}
 300597c:	2a0203e0 	mov	w0, w2
 3005980:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3005984:	d65f03c0 	ret

0000000003005988 <power_on_from_suspend>:
{
    // check register edit by acpu, 1 means wake from "suspend to ram"
	// ace2 : self refresh mode
	// ace4 : no self refresh mode
	// 0 : normal boot
	if (REG32(SYS_PWDN_CTRL2) == val)
 3005988:	d2806481 	mov	x1, #0x324                 	// #804
 300598c:	f2b30001 	movk	x1, #0x9800, lsl #16
 3005990:	b9400021 	ldr	w1, [x1]
 3005994:	6b00003f 	cmp	w1, w0
		return 1;
	return 0;
}
 3005998:	1a9f17e0 	cset	w0, eq
 300599c:	d65f03c0 	ret

00000000030059a0 <InitTimer.part.0>:
#ifdef ENV_SIMULATION
	delayTime = 1*TIMERINFO_USEC;
	REG32(MIS_TC0TVR+timerID*4) = delayTime;
#else
	//Set The Initial Value
	REG32(MIS_TC0TVR+timerID*4) = dwInit;
 30059a0:	528da802 	mov	w2, #0x6d40                	// #27968
 30059a4:	72a4c002 	movk	w2, #0x2600, lsl #16
 30059a8:	0b020002 	add	w2, w0, w2
    #ifdef TIMER_COUNTER_MODE
		//Enable Timer 
		REG32(MIS_TC0CR+timerID*4) = TIMERINFO_INTERRUPT_ENABLE;
    #else
		// Clear Interrupt Pending (must after enable)
		REG32(MIS_UMSK_ISR) = ((timerID+1)<<6);
 30059ac:	d2960106 	mov	x6, #0xb008                	// #45064
 30059b0:	f2b30026 	movk	x6, #0x9801, lsl #16
#ifdef ENV_SIMULATION
	delayTime = 1*TIMERINFO_USEC;
	REG32(MIS_TC0TVR+timerID*4) = delayTime;
#else
	//Set The Initial Value
	REG32(MIS_TC0TVR+timerID*4) = dwInit;
 30059b4:	531e7447 	lsl	w7, w2, #2
    #ifdef TIMER_COUNTER_MODE
		//Enable Timer 
		REG32(MIS_TC0CR+timerID*4) = TIMERINFO_INTERRUPT_ENABLE;
    #else
		// Clear Interrupt Pending (must after enable)
		REG32(MIS_UMSK_ISR) = ((timerID+1)<<6);
 30059b8:	11000400 	add	w0, w0, #0x1
#else
	//Set The Initial Value
	REG32(MIS_TC0TVR+timerID*4) = dwInit;
#endif
	//Disable Interrupt
	REG32(MIS_TC0ICR+timerID*4) = TIMERINFO_INTERRUPT_DISABLE;
 30059bc:	110090e4 	add	w4, w7, #0x24
	
	//Disable Timer
	REG32(MIS_TC0CR+timerID*4) = TIMERINFO_TIMER_DISABLE;
 30059c0:	110060e2 	add	w2, w7, #0x18
    #ifdef TIMER_COUNTER_MODE
		//Enable Timer 
		REG32(MIS_TC0CR+timerID*4) = TIMERINFO_INTERRUPT_ENABLE;
    #else
		// Clear Interrupt Pending (must after enable)
		REG32(MIS_UMSK_ISR) = ((timerID+1)<<6);
 30059c4:	531a6403 	lsl	w3, w0, #6
		//Enable Timer Mode
		REG32(MIS_TC0CR+timerID*4) = TIMERINFO_TIMER_ENABLE;
 30059c8:	52b80005 	mov	w5, #0xc0000000            	// #-1073741824
#ifdef ENV_SIMULATION
	delayTime = 1*TIMERINFO_USEC;
	REG32(MIS_TC0TVR+timerID*4) = delayTime;
#else
	//Set The Initial Value
	REG32(MIS_TC0TVR+timerID*4) = dwInit;
 30059cc:	b90000e1 	str	w1, [x7]
		REG32(MIS_UMSK_ISR) = ((timerID+1)<<6);
		//Enable Timer Mode
		REG32(MIS_TC0CR+timerID*4) = TIMERINFO_TIMER_ENABLE;
    #endif
    return 1;
}
 30059d0:	52800020 	mov	w0, #0x1                   	// #1
#else
	//Set The Initial Value
	REG32(MIS_TC0TVR+timerID*4) = dwInit;
#endif
	//Disable Interrupt
	REG32(MIS_TC0ICR+timerID*4) = TIMERINFO_INTERRUPT_DISABLE;
 30059d4:	b900009f 	str	wzr, [x4]
	
	//Disable Timer
	REG32(MIS_TC0CR+timerID*4) = TIMERINFO_TIMER_DISABLE;
 30059d8:	b900005f 	str	wzr, [x2]
    #ifdef TIMER_COUNTER_MODE
		//Enable Timer 
		REG32(MIS_TC0CR+timerID*4) = TIMERINFO_INTERRUPT_ENABLE;
    #else
		// Clear Interrupt Pending (must after enable)
		REG32(MIS_UMSK_ISR) = ((timerID+1)<<6);
 30059dc:	b90000c3 	str	w3, [x6]
		//Enable Timer Mode
		REG32(MIS_TC0CR+timerID*4) = TIMERINFO_TIMER_ENABLE;
 30059e0:	b9000045 	str	w5, [x2]
    #endif
    return 1;
}
 30059e4:	d65f03c0 	ret

00000000030059e8 <InitTimer>:
UINT32 InitTimer(unsigned int timerID, unsigned int dwInit)
{
	UINT32 delayTime=0;

    //TimerID for timer 0 / 1 only since timer 2 is SWC timer
    if (timerID >= 2)
 30059e8:	7100041f 	cmp	w0, #0x1
 30059ec:	54000069 	b.ls	30059f8 <InitTimer+0x10>
		REG32(MIS_UMSK_ISR) = ((timerID+1)<<6);
		//Enable Timer Mode
		REG32(MIS_TC0CR+timerID*4) = TIMERINFO_TIMER_ENABLE;
    #endif
    return 1;
}
 30059f0:	12800000 	mov	w0, #0xffffffff            	// #-1
 30059f4:	d65f03c0 	ret
 30059f8:	17ffffea 	b	30059a0 <InitTimer.part.0>

00000000030059fc <DisableTimer>:

UINT32 DisableTimer(UINT32 timerID)
{
    //TimerID for timer 0 / 1 only since timer 2 is SWC timer
    if (timerID >= 2) return -1;
 30059fc:	7100041f 	cmp	w0, #0x1
 3005a00:	12800001 	mov	w1, #0xffffffff            	// #-1
 3005a04:	54000069 	b.ls	3005a10 <DisableTimer+0x14>
	
	//Disable Timer
	REG32(MIS_TC0CR+timerID*4) = TIMERINFO_TIMER_DISABLE;   
    
    return 1;
}
 3005a08:	2a0103e0 	mov	w0, w1
 3005a0c:	d65f03c0 	ret
    //TimerID for timer 0 / 1 only since timer 2 is SWC timer
    if (timerID >= 2) return -1;

    //timer0
	//Disable Interrupt
	REG32(MIS_TC0ICR+timerID*4) = TIMERINFO_INTERRUPT_DISABLE;
 3005a10:	528da922 	mov	w2, #0x6d49                	// #27977
 3005a14:	72a4c002 	movk	w2, #0x2600, lsl #16
 3005a18:	0b020000 	add	w0, w0, w2
	
	//Disable Timer
	REG32(MIS_TC0CR+timerID*4) = TIMERINFO_TIMER_DISABLE;   
    
    return 1;
 3005a1c:	52800021 	mov	w1, #0x1                   	// #1
    //TimerID for timer 0 / 1 only since timer 2 is SWC timer
    if (timerID >= 2) return -1;

    //timer0
	//Disable Interrupt
	REG32(MIS_TC0ICR+timerID*4) = TIMERINFO_INTERRUPT_DISABLE;
 3005a20:	531e7400 	lsl	w0, w0, #2
	
	//Disable Timer
	REG32(MIS_TC0CR+timerID*4) = TIMERINFO_TIMER_DISABLE;   
 3005a24:	51003002 	sub	w2, w0, #0xc
    //TimerID for timer 0 / 1 only since timer 2 is SWC timer
    if (timerID >= 2) return -1;

    //timer0
	//Disable Interrupt
	REG32(MIS_TC0ICR+timerID*4) = TIMERINFO_INTERRUPT_DISABLE;
 3005a28:	b900001f 	str	wzr, [x0]
	
	//Disable Timer
	REG32(MIS_TC0CR+timerID*4) = TIMERINFO_TIMER_DISABLE;   
    
    return 1;
}
 3005a2c:	2a0103e0 	mov	w0, w1
    //timer0
	//Disable Interrupt
	REG32(MIS_TC0ICR+timerID*4) = TIMERINFO_INTERRUPT_DISABLE;
	
	//Disable Timer
	REG32(MIS_TC0CR+timerID*4) = TIMERINFO_TIMER_DISABLE;   
 3005a30:	b900005f 	str	wzr, [x2]
    
    return 1;
}
 3005a34:	d65f03c0 	ret

0000000003005a38 <SystemTimeout>:
bool SystemTimeout(UINT32 timerID, UINT32 limit)
{
	bool	bIoStatus = FALSE;

    //TimerID for timer 0 / 1 only since timer 2 is SWC timer
    if (timerID >= 2) return FALSE;
 3005a38:	7100041f 	cmp	w0, #0x1
 3005a3c:	52800001 	mov	w1, #0x0                   	// #0
 3005a40:	540000e8 	b.hi	3005a5c <SystemTimeout+0x24>
        return bIoStatus = TRUE;
    else
        return FALSE;
    
    #else
	if(REG32(MIS_UMSK_ISR) & ((timerID+1)<<6))
 3005a44:	d2960101 	mov	x1, #0xb008                	// #45064
 3005a48:	f2b30021 	movk	x1, #0x9801, lsl #16
 3005a4c:	11000400 	add	w0, w0, #0x1
 3005a50:	b9400021 	ldr	w1, [x1]
 3005a54:	6a00183f 	tst	w1, w0, lsl #6
bool SystemTimeout(UINT32 timerID, UINT32 limit)
{
	bool	bIoStatus = FALSE;

    //TimerID for timer 0 / 1 only since timer 2 is SWC timer
    if (timerID >= 2) return FALSE;
 3005a58:	1a9f07e1 	cset	w1, ne
		bIoStatus = TRUE;
	}
    #endif

	return bIoStatus;
}
 3005a5c:	2a0103e0 	mov	w0, w1
 3005a60:	d65f03c0 	ret

0000000003005a64 <mdelay>:
//	- (UINT32) dwMicroSecond: Delay Time (Unit: 1 us)
//
// Output: None
//=================================================================================================
void mdelay(UINT32 timerID, unsigned int dwMiniSecond)
{
 3005a64:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
UINT32 InitTimer(unsigned int timerID, unsigned int dwInit)
{
	UINT32 delayTime=0;

    //TimerID for timer 0 / 1 only since timer 2 is SWC timer
    if (timerID >= 2)
 3005a68:	7100041f 	cmp	w0, #0x1
//	- (UINT32) dwMicroSecond: Delay Time (Unit: 1 us)
//
// Output: None
//=================================================================================================
void mdelay(UINT32 timerID, unsigned int dwMiniSecond)
{
 3005a6c:	2a0003f3 	mov	w19, w0
UINT32 InitTimer(unsigned int timerID, unsigned int dwInit)
{
	UINT32 delayTime=0;

    //TimerID for timer 0 / 1 only since timer 2 is SWC timer
    if (timerID >= 2)
 3005a70:	540001a9 	b.ls	3005aa4 <mdelay+0x40>
        return bIoStatus = TRUE;
    else
        return FALSE;
    
    #else
	if(REG32(MIS_UMSK_ISR) & ((timerID+1)<<6))
 3005a74:	11000660 	add	w0, w19, #0x1
 3005a78:	d2960102 	mov	x2, #0xb008                	// #45064
 3005a7c:	f2b30022 	movk	x2, #0x9801, lsl #16
 3005a80:	531a6400 	lsl	w0, w0, #6
bool SystemTimeout(UINT32 timerID, UINT32 limit)
{
	bool	bIoStatus = FALSE;

    //TimerID for timer 0 / 1 only since timer 2 is SWC timer
    if (timerID >= 2) return FALSE;
 3005a84:	7100067f 	cmp	w19, #0x1
 3005a88:	54000049 	b.ls	3005a90 <mdelay+0x2c>
 3005a8c:	14000000 	b	3005a8c <mdelay+0x28>
        return bIoStatus = TRUE;
    else
        return FALSE;
    
    #else
	if(REG32(MIS_UMSK_ISR) & ((timerID+1)<<6))
 3005a90:	b9400041 	ldr	w1, [x2]
 3005a94:	6a01001f 	tst	w0, w1
 3005a98:	54ffff60 	b.eq	3005a84 <mdelay+0x20>
	delayTime = dwMiniSecond*TIMERINFO_MSEC;
	InitTimer(timerID, delayTime);
#endif
	//Wait for Interrupt Pending Status
	while(SystemTimeout(timerID, delayTime) == FALSE);
}
 3005a9c:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3005aa0:	d65f03c0 	ret
	//Initial Timer 7
	delayTime = 1*TIMERINFO_USEC;
	InitTimer(timerID, delayTime);
#else
	//Initial Timer 7
	delayTime = dwMiniSecond*TIMERINFO_MSEC;
 3005aa4:	528d3262 	mov	w2, #0x6993                	// #27027
 3005aa8:	1b027c21 	mul	w1, w1, w2
 3005aac:	97ffffbd 	bl	30059a0 <InitTimer.part.0>
 3005ab0:	17fffff1 	b	3005a74 <mdelay+0x10>

0000000003005ab4 <udelay>:
#endif
	//Wait for Interrupt Pending Status
	while(SystemTimeout(timerID, delayTime) == FALSE);
}
void udelay(UINT32 timerID, unsigned int dwMicroSecond)
{
 3005ab4:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
UINT32 InitTimer(unsigned int timerID, unsigned int dwInit)
{
	UINT32 delayTime=0;

    //TimerID for timer 0 / 1 only since timer 2 is SWC timer
    if (timerID >= 2)
 3005ab8:	7100041f 	cmp	w0, #0x1
#endif
	//Wait for Interrupt Pending Status
	while(SystemTimeout(timerID, delayTime) == FALSE);
}
void udelay(UINT32 timerID, unsigned int dwMicroSecond)
{
 3005abc:	2a0003f3 	mov	w19, w0
UINT32 InitTimer(unsigned int timerID, unsigned int dwInit)
{
	UINT32 delayTime=0;

    //TimerID for timer 0 / 1 only since timer 2 is SWC timer
    if (timerID >= 2)
 3005ac0:	540001a9 	b.ls	3005af4 <udelay+0x40>
        return bIoStatus = TRUE;
    else
        return FALSE;
    
    #else
	if(REG32(MIS_UMSK_ISR) & ((timerID+1)<<6))
 3005ac4:	11000660 	add	w0, w19, #0x1
 3005ac8:	d2960102 	mov	x2, #0xb008                	// #45064
 3005acc:	f2b30022 	movk	x2, #0x9801, lsl #16
 3005ad0:	531a6400 	lsl	w0, w0, #6
bool SystemTimeout(UINT32 timerID, UINT32 limit)
{
	bool	bIoStatus = FALSE;

    //TimerID for timer 0 / 1 only since timer 2 is SWC timer
    if (timerID >= 2) return FALSE;
 3005ad4:	7100067f 	cmp	w19, #0x1
 3005ad8:	54000049 	b.ls	3005ae0 <udelay+0x2c>
 3005adc:	14000000 	b	3005adc <udelay+0x28>
        return bIoStatus = TRUE;
    else
        return FALSE;
    
    #else
	if(REG32(MIS_UMSK_ISR) & ((timerID+1)<<6))
 3005ae0:	b9400041 	ldr	w1, [x2]
 3005ae4:	6a01001f 	tst	w0, w1
 3005ae8:	54ffff60 	b.eq	3005ad4 <udelay+0x20>
    delayTime = dwMicroSecond*TIMERINFO_USEC;
	InitTimer(timerID, delayTime);
#endif
    //Wait for Interrupt Pending Status
    while(SystemTimeout(timerID, delayTime) == FALSE);	
}
 3005aec:	a8c17bf3 	ldp	x19, x30, [sp],#16
 3005af0:	d65f03c0 	ret
    UINT32 delayTime=0;
#ifdef ENV_SIMULATION
    delayTime = 1*TIMERINFO_USEC;
	InitTimer(timerID, delayTime);
#else
    delayTime = dwMicroSecond*TIMERINFO_USEC;
 3005af4:	531d7022 	lsl	w2, w1, #3
 3005af8:	4b010042 	sub	w2, w2, w1
 3005afc:	531e7442 	lsl	w2, w2, #2
 3005b00:	4b010041 	sub	w1, w2, w1
 3005b04:	97ffffa7 	bl	30059a0 <InitTimer.part.0>
 3005b08:	17ffffef 	b	3005ac4 <udelay+0x10>

0000000003005b0c <init_uart>:
 ************************************************************************/
void init_uart(void)
{
	unsigned int reg_val;

	reg_val = REG32(U0SRR);
 3005b0c:	d28f1102 	mov	x2, #0x7888                	// #30856
 3005b10:	f2b30002 	movk	x2, #0x9800, lsl #16

/************************************************************************
 *  Function body
 ************************************************************************/
void init_uart(void)
{
 3005b14:	f81f0ffe 	str	x30, [sp,#-16]!
	unsigned int reg_val;

	reg_val = REG32(U0SRR);
    reg_val |= 0x7;
    REG32(U0SRR) = reg_val;
    wait_loop(100);
 3005b18:	52800c80 	mov	w0, #0x64                  	// #100
 ************************************************************************/
void init_uart(void)
{
	unsigned int reg_val;

	reg_val = REG32(U0SRR);
 3005b1c:	b9400041 	ldr	w1, [x2]
    reg_val |= 0x7;
 3005b20:	32000821 	orr	w1, w1, #0x7
    REG32(U0SRR) = reg_val;
 3005b24:	b9000041 	str	w1, [x2]
    wait_loop(100);
 3005b28:	94000250 	bl	3006468 <wait_loop>

	//1395, iso_muxpad5 default mux to ur0

#ifdef ENABLE_UART_FUNC
	// init uart0
	REG32(U0LCR) = 0x90;
 3005b2c:	d28f0181 	mov	x1, #0x780c                	// #30732
 3005b30:	f2b30001 	movk	x1, #0x9800, lsl #16
	REG32(U0RBR_THR_DLL) = 0xd7;	// 9600 baud (for FPGA 33MHz) 33*1000*1000/9600/16
#else
    REG32(U0RBR_THR_DLL) = 0x12;	// 115200 baud (for FPGA 33MHz)( 33*1000*1000 + (115200 /8) )/115200/16
#endif
#else
	REG32(U0RBR_THR_DLL) = 0xf;		// 115200 baud (for ASIC 27MHz)
 3005b34:	d28f0003 	mov	x3, #0x7800                	// #30720
 3005b38:	f2b30003 	movk	x3, #0x9800, lsl #16
#endif
	REG32(U0IER_DLH) = 0;
 3005b3c:	d28f0080 	mov	x0, #0x7804                	// #30724
 3005b40:	f2b30000 	movk	x0, #0x9800, lsl #16

	//1395, iso_muxpad5 default mux to ur0

#ifdef ENABLE_UART_FUNC
	// init uart0
	REG32(U0LCR) = 0x90;
 3005b44:	52801202 	mov	w2, #0x90                  	// #144
 3005b48:	b9000022 	str	w2, [x1]
	REG32(U0RBR_THR_DLL) = 0xd7;	// 9600 baud (for FPGA 33MHz) 33*1000*1000/9600/16
#else
    REG32(U0RBR_THR_DLL) = 0x12;	// 115200 baud (for FPGA 33MHz)( 33*1000*1000 + (115200 /8) )/115200/16
#endif
#else
	REG32(U0RBR_THR_DLL) = 0xf;		// 115200 baud (for ASIC 27MHz)
 3005b4c:	528001e4 	mov	w4, #0xf                   	// #15
#endif
	REG32(U0IER_DLH) = 0;
	REG32(U0LCR) = 0x3;				// 8-N-1
	REG32(U0IIR_FCR) = 0xC7;
 3005b50:	d28f0102 	mov	x2, #0x7808                	// #30728
 3005b54:	f2b30002 	movk	x2, #0x9800, lsl #16
	REG32(U0RBR_THR_DLL) = 0xd7;	// 9600 baud (for FPGA 33MHz) 33*1000*1000/9600/16
#else
    REG32(U0RBR_THR_DLL) = 0x12;	// 115200 baud (for FPGA 33MHz)( 33*1000*1000 + (115200 /8) )/115200/16
#endif
#else
	REG32(U0RBR_THR_DLL) = 0xf;		// 115200 baud (for ASIC 27MHz)
 3005b58:	b9000064 	str	w4, [x3]
#endif
	REG32(U0IER_DLH) = 0;
	REG32(U0LCR) = 0x3;				// 8-N-1
 3005b5c:	52800064 	mov	w4, #0x3                   	// #3
    REG32(U0RBR_THR_DLL) = 0x12;	// 115200 baud (for FPGA 33MHz)( 33*1000*1000 + (115200 /8) )/115200/16
#endif
#else
	REG32(U0RBR_THR_DLL) = 0xf;		// 115200 baud (for ASIC 27MHz)
#endif
	REG32(U0IER_DLH) = 0;
 3005b60:	b900001f 	str	wzr, [x0]
	REG32(U0LCR) = 0x3;				// 8-N-1
	REG32(U0IIR_FCR) = 0xC7;
 3005b64:	528018e3 	mov	w3, #0xc7                  	// #199
#endif
#else
	REG32(U0RBR_THR_DLL) = 0xf;		// 115200 baud (for ASIC 27MHz)
#endif
	REG32(U0IER_DLH) = 0;
	REG32(U0LCR) = 0x3;				// 8-N-1
 3005b68:	b9000024 	str	w4, [x1]
	REG32(U0IIR_FCR) = 0xC7;
	REG32(U0IER_DLH) = 1;
 3005b6c:	52800021 	mov	w1, #0x1                   	// #1
#else
	REG32(U0RBR_THR_DLL) = 0xf;		// 115200 baud (for ASIC 27MHz)
#endif
	REG32(U0IER_DLH) = 0;
	REG32(U0LCR) = 0x3;				// 8-N-1
	REG32(U0IIR_FCR) = 0xC7;
 3005b70:	b9000043 	str	w3, [x2]
	REG32(U0IER_DLH) = 1;
 3005b74:	b9000001 	str	w1, [x0]
	REG32(U1IIR_FCR) = 0xC7;
	REG32(U1IER_DLH) = 1;
#endif
#endif

}
 3005b78:	f84107fe 	ldr	x30, [sp],#16
 3005b7c:	d65f03c0 	ret

0000000003005b80 <uart_init_port>:

void uart_init_port(int port, UINT32 baud)
{
	unsigned int baud_divisor = (uart[port].clk_freq + (baud * (16 / 2))) / (16 * baud);
 3005b80:	93407c00 	sxtw	x0, w0
 3005b84:	90000027 	adrp	x7, 3009000 <el3_vectors>
 3005b88:	912f40e7 	add	x7, x7, #0xbd0
 3005b8c:	d37ef404 	lsl	x4, x0, #2
 ************************************************************************/
static int serial_poll(void);

static inline void write_uart_reg(int port, UINT32 reg, unsigned char data)
{
	*(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift)) = data;
 3005b90:	52800066 	mov	w6, #0x3                   	// #3

}

void uart_init_port(int port, UINT32 baud)
{
	unsigned int baud_divisor = (uart[port].clk_freq + (baud * (16 / 2))) / (16 * baud);
 3005b94:	cb000080 	sub	x0, x4, x0
 ************************************************************************/
static int serial_poll(void);

static inline void write_uart_reg(int port, UINT32 reg, unsigned char data)
{
	*(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift)) = data;
 3005b98:	52800023 	mov	w3, #0x1                   	// #1

}

void uart_init_port(int port, UINT32 baud)
{
	unsigned int baud_divisor = (uart[port].clk_freq + (baud * (16 / 2))) / (16 * baud);
 3005b9c:	d37ef400 	lsl	x0, x0, #2
 ************************************************************************/
static int serial_poll(void);

static inline void write_uart_reg(int port, UINT32 reg, unsigned char data)
{
	*(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift)) = data;
 3005ba0:	52800085 	mov	w5, #0x4                   	// #4

}

void uart_init_port(int port, UINT32 baud)
{
	unsigned int baud_divisor = (uart[port].clk_freq + (baud * (16 / 2))) / (16 * baud);
 3005ba4:	8b0000ea 	add	x10, x7, x0
 ************************************************************************/
static int serial_poll(void);

static inline void write_uart_reg(int port, UINT32 reg, unsigned char data)
{
	*(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift)) = data;
 3005ba8:	52801069 	mov	w9, #0x83                  	// #131
 3005bac:	52800048 	mov	w8, #0x2                   	// #2
 3005bb0:	b86068e2 	ldr	w2, [x7,x0]

}

void uart_init_port(int port, UINT32 baud)
{
	unsigned int baud_divisor = (uart[port].clk_freq + (baud * (16 / 2))) / (16 * baud);
 3005bb4:	b9400540 	ldr	w0, [x10,#4]
 ************************************************************************/
static int serial_poll(void);

static inline void write_uart_reg(int port, UINT32 reg, unsigned char data)
{
	*(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift)) = data;
 3005bb8:	b9400944 	ldr	w4, [x10,#8]

}

void uart_init_port(int port, UINT32 baud)
{
	unsigned int baud_divisor = (uart[port].clk_freq + (baud * (16 / 2))) / (16 * baud);
 3005bbc:	0b010c00 	add	w0, w0, w1, lsl #3
 3005bc0:	531c6c21 	lsl	w1, w1, #4
 ************************************************************************/
static int serial_poll(void);

static inline void write_uart_reg(int port, UINT32 reg, unsigned char data)
{
	*(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift)) = data;
 3005bc4:	2a0203e7 	mov	w7, w2
 3005bc8:	1ac42063 	lsl	w3, w3, w4

}

void uart_init_port(int port, UINT32 baud)
{
	unsigned int baud_divisor = (uart[port].clk_freq + (baud * (16 / 2))) / (16 * baud);
 3005bcc:	1ac10801 	udiv	w1, w0, w1
 ************************************************************************/
static int serial_poll(void);

static inline void write_uart_reg(int port, UINT32 reg, unsigned char data)
{
	*(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift)) = data;
 3005bd0:	1ac420c0 	lsl	w0, w6, w4
 3005bd4:	0b020000 	add	w0, w0, w2
 3005bd8:	0b020063 	add	w3, w3, w2
 3005bdc:	1ac420a5 	lsl	w5, w5, w4
 3005be0:	1ac42104 	lsl	w4, w8, w4
 3005be4:	0b0200a5 	add	w5, w5, w2
 3005be8:	0b020082 	add	w2, w4, w2
 3005bec:	b9000009 	str	w9, [x0]
 3005bf0:	528000e8 	mov	w8, #0x7                   	// #7
 3005bf4:	b90000ff 	str	wzr, [x7]
 3005bf8:	b900007f 	str	wzr, [x3]
 3005bfc:	b9000006 	str	w6, [x0]
 3005c00:	b90000a6 	str	w6, [x5]
 3005c04:	b9000048 	str	w8, [x2]
 3005c08:	12001c22 	and	w2, w1, #0xff
 3005c0c:	b9000009 	str	w9, [x0]
 3005c10:	d3483c21 	ubfx	x1, x1, #8, #8
 3005c14:	b90000e2 	str	w2, [x7]
 3005c18:	b9000061 	str	w1, [x3]
 3005c1c:	b9000006 	str	w6, [x0]
	write_uart_reg(port, UART_FCR, FCRVAL);
	write_uart_reg(port, UART_LCR, LCR_BKSE | LCRVAL);
	write_uart_reg(port, UART_DLL, baud_divisor & 0xff);
	write_uart_reg(port, UART_DLH, (baud_divisor >> 8) & 0xff);
	write_uart_reg(port, UART_LCR, LCRVAL);
}
 3005c20:	d65f03c0 	ret

0000000003005c24 <uart_putc>:

int uart_putc(int port, char c)
{
 3005c24:	93407c00 	sxtw	x0, w0
 3005c28:	90000024 	adrp	x4, 3009000 <el3_vectors>
 3005c2c:	912f4084 	add	x4, x4, #0xbd0
 3005c30:	d37ef403 	lsl	x3, x0, #2
 3005c34:	528000a2 	mov	w2, #0x5                   	// #5
 3005c38:	cb000060 	sub	x0, x3, x0
 3005c3c:	53001c21 	uxtb	w1, w1
 3005c40:	d37ef400 	lsl	x0, x0, #2
 3005c44:	8b000085 	add	x5, x4, x0
 3005c48:	b8606883 	ldr	w3, [x4,x0]
 3005c4c:	b94008a0 	ldr	w0, [x5,#8]
 3005c50:	1ac02042 	lsl	w2, w2, w0
 3005c54:	0b030042 	add	w2, w2, w3
	*(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift)) = data;
}

static inline unsigned char read_uart_reg(int port, UINT32 reg)
{
	return *(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift));
 3005c58:	b9400040 	ldr	w0, [x2]
	write_uart_reg(port, UART_LCR, LCRVAL);
}

int uart_putc(int port, char c)
{
	while (!(read_uart_reg(port, UART_LSR) & (LSR_THRE)))
 3005c5c:	362fffe0 	tbz	w0, #5, 3005c58 <uart_putc+0x34>
 ************************************************************************/
static int serial_poll(void);

static inline void write_uart_reg(int port, UINT32 reg, unsigned char data)
{
	*(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift)) = data;
 3005c60:	2a0303e3 	mov	w3, w3
{
	while (!(read_uart_reg(port, UART_LSR) & (LSR_THRE)))
		;
	write_uart_reg(port, UART_THR, c);
	return 0;
}
 3005c64:	52800000 	mov	w0, #0x0                   	// #0
 ************************************************************************/
static int serial_poll(void);

static inline void write_uart_reg(int port, UINT32 reg, unsigned char data)
{
	*(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift)) = data;
 3005c68:	b9000061 	str	w1, [x3]
{
	while (!(read_uart_reg(port, UART_LSR) & (LSR_THRE)))
		;
	write_uart_reg(port, UART_THR, c);
	return 0;
}
 3005c6c:	d65f03c0 	ret

0000000003005c70 <uart_getc>:

int uart_getc(int port, bool wait)
{
 3005c70:	53001c21 	uxtb	w1, w1
 3005c74:	93407c00 	sxtw	x0, w0
	if (wait) {
 3005c78:	34000241 	cbz	w1, 3005cc0 <uart_getc+0x50>
 3005c7c:	d37ef402 	lsl	x2, x0, #2
 3005c80:	90000023 	adrp	x3, 3009000 <el3_vectors>
 3005c84:	912f4063 	add	x3, x3, #0xbd0
 3005c88:	cb000040 	sub	x0, x2, x0
 3005c8c:	528000a1 	mov	w1, #0x5                   	// #5
 3005c90:	d37ef400 	lsl	x0, x0, #2
 3005c94:	8b000064 	add	x4, x3, x0
 3005c98:	b8606862 	ldr	w2, [x3,x0]
 3005c9c:	b9400880 	ldr	w0, [x4,#8]
 3005ca0:	1ac02021 	lsl	w1, w1, w0
 3005ca4:	0b020021 	add	w1, w1, w2
	*(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift)) = data;
}

static inline unsigned char read_uart_reg(int port, UINT32 reg)
{
	return *(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift));
 3005ca8:	b9400020 	ldr	w0, [x1]
}

int uart_getc(int port, bool wait)
{
	if (wait) {
		while (!(read_uart_reg(port, UART_LSR) & (LSR_DR)))
 3005cac:	3607ffe0 	tbz	w0, #0, 3005ca8 <uart_getc+0x38>
	*(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift)) = data;
}

static inline unsigned char read_uart_reg(int port, UINT32 reg)
{
	return *(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift));
 3005cb0:	2a0203e2 	mov	w2, w2
 3005cb4:	b9400040 	ldr	w0, [x2]
 3005cb8:	12001c00 	and	w0, w0, #0xff
	} else {
		if (!(read_uart_reg(port, UART_LSR) & (LSR_DR)))
			return -1;
	}
	return read_uart_reg(port, UART_RHR);
}
 3005cbc:	d65f03c0 	ret
	*(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift)) = data;
}

static inline unsigned char read_uart_reg(int port, UINT32 reg)
{
	return *(volatile unsigned int *)(uart[port].base + (reg << uart[port].shift));
 3005cc0:	d37ef401 	lsl	x1, x0, #2
 3005cc4:	90000022 	adrp	x2, 3009000 <el3_vectors>
 3005cc8:	912f4042 	add	x2, x2, #0xbd0
 3005ccc:	cb000020 	sub	x0, x1, x0
 3005cd0:	528000a3 	mov	w3, #0x5                   	// #5
 3005cd4:	d37ef400 	lsl	x0, x0, #2
 3005cd8:	8b000041 	add	x1, x2, x0
 3005cdc:	b8606842 	ldr	w2, [x2,x0]
 3005ce0:	b9400820 	ldr	w0, [x1,#8]
 3005ce4:	1ac02060 	lsl	w0, w3, w0
 3005ce8:	0b020000 	add	w0, w0, w2
 3005cec:	b9400000 	ldr	w0, [x0]
{
	if (wait) {
		while (!(read_uart_reg(port, UART_LSR) & (LSR_DR)))
			;
	} else {
		if (!(read_uart_reg(port, UART_LSR) & (LSR_DR)))
 3005cf0:	3707fe00 	tbnz	w0, #0, 3005cb0 <uart_getc+0x40>
			return -1;
 3005cf4:	12800000 	mov	w0, #0xffffffff            	// #-1
	}
	return read_uart_reg(port, UART_RHR);
}
 3005cf8:	d65f03c0 	ret

0000000003005cfc <set_recovery_uart>:

void set_recovery_uart(void)
{
	//TODO: should we do this ??
	REG32(U0IIR_FCR) = 0x1;
 3005cfc:	d28f0100 	mov	x0, #0x7808                	// #30728
 3005d00:	f2b30000 	movk	x0, #0x9800, lsl #16
 3005d04:	52800022 	mov	w2, #0x1                   	// #1
	REG32(U0IIR_FCR) = 0x7;	//set reciver tigger livel to 0
 3005d08:	528000e1 	mov	w1, #0x7                   	// #7
}

void set_recovery_uart(void)
{
	//TODO: should we do this ??
	REG32(U0IIR_FCR) = 0x1;
 3005d0c:	b9000002 	str	w2, [x0]
	REG32(U0IIR_FCR) = 0x7;	//set reciver tigger livel to 0
 3005d10:	b9000001 	str	w1, [x0]
#if 0 //remove uart1 setting
	REG32(U1IIR_FCR) = 0x1;
	REG32(U1IIR_FCR) = 0x7; //set reciver tigger livel to 0
#endif
}
 3005d14:	d65f03c0 	ret

0000000003005d18 <rollback_recovery_uart>:

void rollback_recovery_uart(void)
{
	REG32(U0IIR_FCR) = 0xb7;
 3005d18:	d28f0100 	mov	x0, #0x7808                	// #30728
 3005d1c:	f2b30000 	movk	x0, #0x9800, lsl #16
 3005d20:	528016e1 	mov	w1, #0xb7                  	// #183
 3005d24:	b9000001 	str	w1, [x0]
#if 0 //remove uart1 setting
	REG32(U1IIR_FCR) = 0xb7;
#endif
}
 3005d28:	d65f03c0 	ret

0000000003005d2c <set_focus_uart>:

void set_focus_uart(int currentUartPort)
{
	UartReg = (currentUartPort == 0) ? (UARTREG *)UART0_REG_BASE : (UARTREG *)UART1_REG_BASE;
 3005d2c:	b0000022 	adrp	x2, 300a000 <__FUNCTION__.3108+0x3d8>
 3005d30:	6b1f001f 	cmp	w0, wzr
 3005d34:	d28f0001 	mov	x1, #0x7800                	// #30720
 3005d38:	f2b30001 	movk	x1, #0x9800, lsl #16
 3005d3c:	d2964003 	mov	x3, #0xb200                	// #45568
 3005d40:	f2b30023 	movk	x3, #0x9801, lsl #16
 3005d44:	9a830021 	csel	x1, x1, x3, eq
 3005d48:	f901bc41 	str	x1, [x2,#888]
}
 3005d4c:	d65f03c0 	ret

0000000003005d50 <read_password>:
#endif
	return OK;
}
#endif
int read_password(int *word, int bEcho, UINT32* flow)
{
 3005d50:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
 3005d54:	aa0003f4 	mov	x20, x0

	int value, shift;
	unsigned char ch;

	*word = 0;
	shift = 28;
 3005d58:	52800393 	mov	w19, #0x1c                  	// #28
#endif
	return OK;
}
#endif
int read_password(int *word, int bEcho, UINT32* flow)
{
 3005d5c:	a9015bf5 	stp	x21, x22, [sp,#16]
 3005d60:	a9027bf7 	stp	x23, x30, [sp,#32]
 3005d64:	2a0103f5 	mov	w21, w1
 3005d68:	aa0203f7 	mov	x23, x2
		if (serial_read(&ch) != OK)
			continue;
		if (bEcho == 1)
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
 3005d6c:	b0000036 	adrp	x22, 300a000 <__FUNCTION__.3108+0x3d8>
#ifdef ENABLE_UART_FUNC

	int value, shift;
	unsigned char ch;

	*word = 0;
 3005d70:	b900001f 	str	wzr, [x0]
	shift = 28;
	while (1) {
		if (serial_read(&ch) != OK)
 3005d74:	9100ffe0 	add	x0, sp, #0x3f
 3005d78:	94000165 	bl	300630c <serial_read>
 3005d7c:	35ffffc0 	cbnz	w0, 3005d74 <read_password+0x24>
			continue;
		if (bEcho == 1)
 3005d80:	710006bf 	cmp	w21, #0x1
 3005d84:	540002a0 	b.eq	3005dd8 <read_password+0x88>
 3005d88:	3940ffe1 	ldrb	w1, [sp,#63]
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
		}
		/* exits if press ENTER */
		if ((ch == 0xd) || (ch == 0xa))
 3005d8c:	7100283f 	cmp	w1, #0xa
 3005d90:	540002e0 	b.eq	3005dec <read_password+0x9c>
 3005d94:	7100343f 	cmp	w1, #0xd
 3005d98:	540002a0 	b.eq	3005dec <read_password+0x9c>
			break;

		/* check if this is a ASCII representation of hex */
		if ((ch>= 97) && (ch <= 104))		// 'a' ~ 'f'
 3005d9c:	51018420 	sub	w0, w1, #0x61
 3005da0:	53001c00 	uxtb	w0, w0
 3005da4:	71001c1f 	cmp	w0, #0x7
 3005da8:	54000308 	b.hi	3005e08 <read_password+0xb8>
			value = ch - 87;
 3005dac:	51015c21 	sub	w1, w1, #0x57
			value = ch - 48;
		else
			return NOK;	// invlaid hex

		/* shift hex into word */
		*word |= (value << shift);
 3005db0:	b9400280 	ldr	w0, [x20]
 3005db4:	1ad32021 	lsl	w1, w1, w19
 3005db8:	51001273 	sub	w19, w19, #0x4
 3005dbc:	2a010001 	orr	w1, w0, w1
	unsigned char ch;

	*word = 0;
	shift = 28;
	while (1) {
		if (serial_read(&ch) != OK)
 3005dc0:	9100ffe0 	add	x0, sp, #0x3f
			value = ch - 48;
		else
			return NOK;	// invlaid hex

		/* shift hex into word */
		*word |= (value << shift);
 3005dc4:	b9000281 	str	w1, [x20]
	unsigned char ch;

	*word = 0;
	shift = 28;
	while (1) {
		if (serial_read(&ch) != OK)
 3005dc8:	94000151 	bl	300630c <serial_read>
 3005dcc:	35fffd40 	cbnz	w0, 3005d74 <read_password+0x24>
			continue;
		if (bEcho == 1)
 3005dd0:	710006bf 	cmp	w21, #0x1
 3005dd4:	54fffda1 	b.ne	3005d88 <read_password+0x38>
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
 3005dd8:	f941bec2 	ldr	x2, [x22,#888]
 3005ddc:	3940ffe1 	ldrb	w1, [sp,#63]
 3005de0:	b9000041 	str	w1, [x2]
		}
		/* exits if press ENTER */
		if ((ch == 0xd) || (ch == 0xa))
 3005de4:	7100283f 	cmp	w1, #0xa
 3005de8:	54fffd61 	b.ne	3005d94 <read_password+0x44>
#ifdef ENV_SIMULATION
	sim_debug_print(*word);
#endif

#endif
	*flow = *flow + PASSWORD_PHASE1;
 3005dec:	b94002e1 	ldr	w1, [x23]
 3005df0:	11003421 	add	w1, w1, #0xd
 3005df4:	b90002e1 	str	w1, [x23]
	return OK;
}
 3005df8:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3005dfc:	a9427bf7 	ldp	x23, x30, [sp,#32]
 3005e00:	a8c453f3 	ldp	x19, x20, [sp],#64
 3005e04:	d65f03c0 	ret
			break;

		/* check if this is a ASCII representation of hex */
		if ((ch>= 97) && (ch <= 104))		// 'a' ~ 'f'
			value = ch - 87;
		else if ((ch >= 65) && (ch <= 70))	// 'A' ~ 'F'
 3005e08:	51010420 	sub	w0, w1, #0x41
 3005e0c:	53001c00 	uxtb	w0, w0
 3005e10:	7100141f 	cmp	w0, #0x5
 3005e14:	54000068 	b.hi	3005e20 <read_password+0xd0>
			value = ch - 55;
 3005e18:	5100dc21 	sub	w1, w1, #0x37
 3005e1c:	17ffffe5 	b	3005db0 <read_password+0x60>
		else if((ch >= 48) && (ch <= 57))	// '0' ~ '9'
 3005e20:	5100c021 	sub	w1, w1, #0x30
 3005e24:	53001c20 	uxtb	w0, w1
 3005e28:	7100241f 	cmp	w0, #0x9
 3005e2c:	54fffc29 	b.ls	3005db0 <read_password+0x60>
#endif

#endif
	*flow = *flow + PASSWORD_PHASE1;
	return OK;
}
 3005e30:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3005e34:	a9427bf7 	ldp	x23, x30, [sp,#32]
		else if ((ch >= 65) && (ch <= 70))	// 'A' ~ 'F'
			value = ch - 55;
		else if((ch >= 48) && (ch <= 57))	// '0' ~ '9'
			value = ch - 48;
		else
			return NOK;	// invlaid hex
 3005e38:	52800020 	mov	w0, #0x1                   	// #1
#endif

#endif
	*flow = *flow + PASSWORD_PHASE1;
	return OK;
}
 3005e3c:	a8c453f3 	ldp	x19, x20, [sp],#64
 3005e40:	d65f03c0 	ret

0000000003005e44 <check_uart_key>:

unsigned char check_uart_key(void)
{
 3005e44:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
	volatile unsigned char u0received;
	unsigned int u0count = 0;

	InitTimer(0, READ_UART_TIMEOUT * TIMERINFO_MSEC);
 3005e48:	529b8441 	mov	w1, #0xdc22                	// #56354
 3005e4c:	72a007a1 	movk	w1, #0x3d, lsl #16
 3005e50:	52800000 	mov	w0, #0x0                   	// #0

	sync();

	do {
		if ((REG32(U0LSR) & 0x1) != 0) {
 3005e54:	d28f0294 	mov	x20, #0x7814                	// #30740
 3005e58:	f2b30014 	movk	x20, #0x9800, lsl #16
	*flow = *flow + PASSWORD_PHASE1;
	return OK;
}

unsigned char check_uart_key(void)
{
 3005e5c:	a9017bf5 	stp	x21, x30, [sp,#16]
	volatile unsigned char u0received;
	unsigned int u0count = 0;
 3005e60:	52800013 	mov	w19, #0x0                   	// #0
	sync();

	do {
		if ((REG32(U0LSR) & 0x1) != 0) {
			/* check input byte is special byte */
			u0received = REG32(U0RBR_THR_DLL) & 0xff;
 3005e64:	d28f0015 	mov	x21, #0x7800                	// #30720
 3005e68:	f2b30015 	movk	x21, #0x9800, lsl #16
unsigned char check_uart_key(void)
{
	volatile unsigned char u0received;
	unsigned int u0count = 0;

	InitTimer(0, READ_UART_TIMEOUT * TIMERINFO_MSEC);
 3005e6c:	97fffedf 	bl	30059e8 <InitTimer>

	sync();
 3005e70:	97ffe927 	bl	300030c <sync>

	do {
		if ((REG32(U0LSR) & 0x1) != 0) {
 3005e74:	b9400282 	ldr	w2, [x20]
				u0count++;
			} else {
				continue;
			}
		}
	} while (SystemTimeout(0, READ_UART_TIMEOUT * TIMERINFO_MSEC) == FALSE);
 3005e78:	529b8441 	mov	w1, #0xdc22                	// #56354
 3005e7c:	72a007a1 	movk	w1, #0x3d, lsl #16
 3005e80:	52800000 	mov	w0, #0x0                   	// #0
	InitTimer(0, READ_UART_TIMEOUT * TIMERINFO_MSEC);

	sync();

	do {
		if ((REG32(U0LSR) & 0x1) != 0) {
 3005e84:	36000102 	tbz	w2, #0, 3005ea4 <check_uart_key+0x60>
			/* check input byte is special byte */
			u0received = REG32(U0RBR_THR_DLL) & 0xff;
 3005e88:	b94002a2 	ldr	w2, [x21]
 3005e8c:	53001c42 	uxtb	w2, w2
 3005e90:	3900bfe2 	strb	w2, [sp,#47]

			// check if receive "F or f" (0x46 or 0x66)
			if (u0received == UART_KEY_ESC) {
 3005e94:	3940bfe2 	ldrb	w2, [sp,#47]
 3005e98:	53001c42 	uxtb	w2, w2
				u0count++;
 3005e9c:	71006c5f 	cmp	w2, #0x1b
 3005ea0:	1a931673 	cinc	w19, w19, eq
			} else {
				continue;
			}
		}
	} while (SystemTimeout(0, READ_UART_TIMEOUT * TIMERINFO_MSEC) == FALSE);
 3005ea4:	97fffee5 	bl	3005a38 <SystemTimeout>
 3005ea8:	53001c00 	uxtb	w0, w0
 3005eac:	34fffe40 	cbz	w0, 3005e74 <check_uart_key+0x30>

	if (u0count >= SPECIAL_KEY_THRESHOLD) {
 3005eb0:	71000a7f 	cmp	w19, #0x2
		return u0received;
	}

	return 0;
 3005eb4:	52800000 	mov	w0, #0x0                   	// #0
				continue;
			}
		}
	} while (SystemTimeout(0, READ_UART_TIMEOUT * TIMERINFO_MSEC) == FALSE);

	if (u0count >= SPECIAL_KEY_THRESHOLD) {
 3005eb8:	54000069 	b.ls	3005ec4 <check_uart_key+0x80>
		return u0received;
 3005ebc:	3940bfe0 	ldrb	w0, [sp,#47]
 3005ec0:	53001c00 	uxtb	w0, w0
	}

	return 0;
}
 3005ec4:	a9417bf5 	ldp	x21, x30, [sp,#16]
 3005ec8:	a8c353f3 	ldp	x19, x20, [sp],#48
 3005ecc:	d65f03c0 	ret

0000000003005ed0 <read_word>:

int read_word(int *word, int bEcho)
{
 3005ed0:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
 3005ed4:	aa0003f4 	mov	x20, x0

	int value, shift;
	unsigned char ch;

	*word = 0;
	shift = 28;
 3005ed8:	52800393 	mov	w19, #0x1c                  	// #28

	return 0;
}

int read_word(int *word, int bEcho)
{
 3005edc:	a9015bf5 	stp	x21, x22, [sp,#16]
 3005ee0:	f90013fe 	str	x30, [sp,#32]
 3005ee4:	2a0103f5 	mov	w21, w1
		if (serial_read(&ch) != OK)
			continue;
		if (bEcho == 1)
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
 3005ee8:	b0000036 	adrp	x22, 300a000 <__FUNCTION__.3108+0x3d8>
#ifdef ENABLE_UART_FUNC

	int value, shift;
	unsigned char ch;

	*word = 0;
 3005eec:	b900001f 	str	wzr, [x0]
	shift = 28;
	while (1) {
		if (serial_read(&ch) != OK)
 3005ef0:	9100ffe0 	add	x0, sp, #0x3f
 3005ef4:	94000106 	bl	300630c <serial_read>
 3005ef8:	35ffffc0 	cbnz	w0, 3005ef0 <read_word+0x20>
			continue;
		if (bEcho == 1)
 3005efc:	710006bf 	cmp	w21, #0x1
 3005f00:	540002a0 	b.eq	3005f54 <read_word+0x84>
 3005f04:	3940ffe1 	ldrb	w1, [sp,#63]
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
		}
		/* exits if press ENTER */
		if ((ch == 0xd) || (ch == 0xa))
 3005f08:	7100283f 	cmp	w1, #0xa
 3005f0c:	540002e0 	b.eq	3005f68 <read_word+0x98>
 3005f10:	7100343f 	cmp	w1, #0xd
 3005f14:	540002a0 	b.eq	3005f68 <read_word+0x98>
			break;

		/* check if this is a ASCII representation of hex */
		if ((ch>= 97) && (ch <= 104))		// 'a' ~ 'f'
 3005f18:	51018420 	sub	w0, w1, #0x61
 3005f1c:	53001c00 	uxtb	w0, w0
 3005f20:	71001c1f 	cmp	w0, #0x7
 3005f24:	540002a8 	b.hi	3005f78 <read_word+0xa8>
			value = ch - 87;
 3005f28:	51015c21 	sub	w1, w1, #0x57
			value = ch - 48;
		else
			return NOK;	// invlaid hex

		/* shift hex into word */
		*word |= (value << shift);
 3005f2c:	b9400280 	ldr	w0, [x20]
 3005f30:	1ad32021 	lsl	w1, w1, w19
 3005f34:	51001273 	sub	w19, w19, #0x4
 3005f38:	2a010001 	orr	w1, w0, w1
	unsigned char ch;

	*word = 0;
	shift = 28;
	while (1) {
		if (serial_read(&ch) != OK)
 3005f3c:	9100ffe0 	add	x0, sp, #0x3f
			value = ch - 48;
		else
			return NOK;	// invlaid hex

		/* shift hex into word */
		*word |= (value << shift);
 3005f40:	b9000281 	str	w1, [x20]
	unsigned char ch;

	*word = 0;
	shift = 28;
	while (1) {
		if (serial_read(&ch) != OK)
 3005f44:	940000f2 	bl	300630c <serial_read>
 3005f48:	35fffd40 	cbnz	w0, 3005ef0 <read_word+0x20>
			continue;
		if (bEcho == 1)
 3005f4c:	710006bf 	cmp	w21, #0x1
 3005f50:	54fffda1 	b.ne	3005f04 <read_word+0x34>
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
 3005f54:	f941bec2 	ldr	x2, [x22,#888]
 3005f58:	3940ffe1 	ldrb	w1, [sp,#63]
 3005f5c:	b9000041 	str	w1, [x2]
		}
		/* exits if press ENTER */
		if ((ch == 0xd) || (ch == 0xa))
 3005f60:	7100283f 	cmp	w1, #0xa
 3005f64:	54fffd61 	b.ne	3005f10 <read_word+0x40>
	sim_debug_print(*word);
#endif

#endif
	return OK;
}
 3005f68:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3005f6c:	f94013fe 	ldr	x30, [sp,#32]
 3005f70:	a8c453f3 	ldp	x19, x20, [sp],#64
 3005f74:	d65f03c0 	ret
			break;

		/* check if this is a ASCII representation of hex */
		if ((ch>= 97) && (ch <= 104))		// 'a' ~ 'f'
			value = ch - 87;
		else if ((ch >= 65) && (ch <= 70))	// 'A' ~ 'F'
 3005f78:	51010420 	sub	w0, w1, #0x41
 3005f7c:	53001c00 	uxtb	w0, w0
 3005f80:	7100141f 	cmp	w0, #0x5
 3005f84:	54000068 	b.hi	3005f90 <read_word+0xc0>
			value = ch - 55;
 3005f88:	5100dc21 	sub	w1, w1, #0x37
 3005f8c:	17ffffe8 	b	3005f2c <read_word+0x5c>
		else if((ch >= 48) && (ch <= 57))	// '0' ~ '9'
 3005f90:	5100c021 	sub	w1, w1, #0x30
 3005f94:	53001c20 	uxtb	w0, w1
 3005f98:	7100241f 	cmp	w0, #0x9
 3005f9c:	54fffc89 	b.ls	3005f2c <read_word+0x5c>
	sim_debug_print(*word);
#endif

#endif
	return OK;
}
 3005fa0:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3005fa4:	f94013fe 	ldr	x30, [sp,#32]
		else if ((ch >= 65) && (ch <= 70))	// 'A' ~ 'F'
			value = ch - 55;
		else if((ch >= 48) && (ch <= 57))	// '0' ~ '9'
			value = ch - 48;
		else
			return NOK;	// invlaid hex
 3005fa8:	52800020 	mov	w0, #0x1                   	// #1
	sim_debug_print(*word);
#endif

#endif
	return OK;
}
 3005fac:	a8c453f3 	ldp	x19, x20, [sp],#64
 3005fb0:	d65f03c0 	ret

0000000003005fb4 <read_word_s>:

int read_word_s(int *word, int bEcho)
{
 3005fb4:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
 3005fb8:	aa0003f4 	mov	x20, x0

	int value, shift;
	unsigned char ch;

	*word = 0;
	shift = 28;
 3005fbc:	52800393 	mov	w19, #0x1c                  	// #28
#endif
	return OK;
}

int read_word_s(int *word, int bEcho)
{
 3005fc0:	a9015bf5 	stp	x21, x22, [sp,#16]
 3005fc4:	f90013fe 	str	x30, [sp,#32]
 3005fc8:	2a0103f5 	mov	w21, w1
		if (serial_read(&ch) != OK)
			continue;
		if (bEcho == 1)
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
 3005fcc:	b0000036 	adrp	x22, 300a000 <__FUNCTION__.3108+0x3d8>
#ifdef ENABLE_UART_FUNC

	int value, shift;
	unsigned char ch;

	*word = 0;
 3005fd0:	b900001f 	str	wzr, [x0]
	shift = 28;
	while (1) {
		if (serial_read(&ch) != OK)
 3005fd4:	9100ffe0 	add	x0, sp, #0x3f
 3005fd8:	940000cd 	bl	300630c <serial_read>
 3005fdc:	35ffffc0 	cbnz	w0, 3005fd4 <read_word_s+0x20>
			continue;
		if (bEcho == 1)
 3005fe0:	710006bf 	cmp	w21, #0x1
 3005fe4:	540002a0 	b.eq	3006038 <read_word_s+0x84>
 3005fe8:	3940ffe1 	ldrb	w1, [sp,#63]
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
		}

		/* if ENTER just after s, then continue */
		if ((ch == 0xd || ch == 0xa) && shift == 28){
 3005fec:	7100283f 	cmp	w1, #0xa
 3005ff0:	540002e0 	b.eq	300604c <read_word_s+0x98>
 3005ff4:	7100343f 	cmp	w1, #0xd
 3005ff8:	540002a0 	b.eq	300604c <read_word_s+0x98>
		/* exits if press ENTER */
		if ((ch == 0xd) || (ch == 0xa))
			break;

		/* check if this is a ASCII representation of hex */
		if ((ch>= 97) && (ch <= 104))		// 'a' ~ 'f'
 3005ffc:	51018420 	sub	w0, w1, #0x61
 3006000:	53001c00 	uxtb	w0, w0
 3006004:	71001c1f 	cmp	w0, #0x7
 3006008:	540002e8 	b.hi	3006064 <read_word_s+0xb0>
			value = ch - 87;
 300600c:	51015c21 	sub	w1, w1, #0x57
			value = ch - 48;
		else
			return NOK;	// invlaid hex

		/* shift hex into word */
		*word |= (value << shift);
 3006010:	b9400280 	ldr	w0, [x20]
 3006014:	1ad32021 	lsl	w1, w1, w19
 3006018:	51001273 	sub	w19, w19, #0x4
 300601c:	2a010001 	orr	w1, w0, w1
	unsigned char ch;

	*word = 0;
	shift = 28;
	while (1) {
		if (serial_read(&ch) != OK)
 3006020:	9100ffe0 	add	x0, sp, #0x3f
			value = ch - 48;
		else
			return NOK;	// invlaid hex

		/* shift hex into word */
		*word |= (value << shift);
 3006024:	b9000281 	str	w1, [x20]
	unsigned char ch;

	*word = 0;
	shift = 28;
	while (1) {
		if (serial_read(&ch) != OK)
 3006028:	940000b9 	bl	300630c <serial_read>
 300602c:	35fffd40 	cbnz	w0, 3005fd4 <read_word_s+0x20>
			continue;
		if (bEcho == 1)
 3006030:	710006bf 	cmp	w21, #0x1
 3006034:	54fffda1 	b.ne	3005fe8 <read_word_s+0x34>
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
 3006038:	f941bec2 	ldr	x2, [x22,#888]
 300603c:	3940ffe1 	ldrb	w1, [sp,#63]
 3006040:	b9000041 	str	w1, [x2]
		}

		/* if ENTER just after s, then continue */
		if ((ch == 0xd || ch == 0xa) && shift == 28){
 3006044:	7100283f 	cmp	w1, #0xa
 3006048:	54fffd61 	b.ne	3005ff4 <read_word_s+0x40>
 300604c:	7100727f 	cmp	w19, #0x1c
 3006050:	54fffc20 	b.eq	3005fd4 <read_word_s+0x20>
	sim_debug_print(*word);
#endif

#endif
	return OK;
}
 3006054:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3006058:	f94013fe 	ldr	x30, [sp,#32]
 300605c:	a8c453f3 	ldp	x19, x20, [sp],#64
 3006060:	d65f03c0 	ret
			break;

		/* check if this is a ASCII representation of hex */
		if ((ch>= 97) && (ch <= 104))		// 'a' ~ 'f'
			value = ch - 87;
		else if ((ch >= 65) && (ch <= 70))	// 'A' ~ 'F'
 3006064:	51010420 	sub	w0, w1, #0x41
 3006068:	53001c00 	uxtb	w0, w0
 300606c:	7100141f 	cmp	w0, #0x5
 3006070:	54000068 	b.hi	300607c <read_word_s+0xc8>
			value = ch - 55;
 3006074:	5100dc21 	sub	w1, w1, #0x37
 3006078:	17ffffe6 	b	3006010 <read_word_s+0x5c>
		else if((ch >= 48) && (ch <= 57))	// '0' ~ '9'
 300607c:	5100c021 	sub	w1, w1, #0x30
 3006080:	53001c20 	uxtb	w0, w1
 3006084:	7100241f 	cmp	w0, #0x9
 3006088:	54fffc49 	b.ls	3006010 <read_word_s+0x5c>
	sim_debug_print(*word);
#endif

#endif
	return OK;
}
 300608c:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3006090:	f94013fe 	ldr	x30, [sp,#32]
		else if ((ch >= 65) && (ch <= 70))	// 'A' ~ 'F'
			value = ch - 55;
		else if((ch >= 48) && (ch <= 57))	// '0' ~ '9'
			value = ch - 48;
		else
			return NOK;	// invlaid hex
 3006094:	52800020 	mov	w0, #0x1                   	// #1
	sim_debug_print(*word);
#endif

#endif
	return OK;
}
 3006098:	a8c453f3 	ldp	x19, x20, [sp],#64
 300609c:	d65f03c0 	ret

00000000030060a0 <serial_write>:


void serial_write(unsigned char  *p_param)
{
 30060a0:	90000021 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 30060a4:	f941bc22 	ldr	x2, [x1,#888]
#ifdef ENV_SIMULATION
	func_nop(0,0,0,10);
	return;
#endif

	while((UartReg->UartLsr.Value & UARTINFO_TRANSMITTER_READY_MASK) != UARTINFO_TRANSMITTER_READY_MASK);
 30060a8:	b9401441 	ldr	w1, [x2,#20]
 30060ac:	121b0421 	and	w1, w1, #0x60
 30060b0:	7101803f 	cmp	w1, #0x60
 30060b4:	54ffffa1 	b.ne	30060a8 <serial_write+0x8>

    if(sys_blind_uwrite == 0)
 30060b8:	90000021 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 30060bc:	b9479421 	ldr	w1, [x1,#1940]
 30060c0:	35000061 	cbnz	w1, 30060cc <serial_write+0x2c>
	    UartReg->UartRbrTheDll.Value = *p_param;
 30060c4:	39400000 	ldrb	w0, [x0]
 30060c8:	b9000040 	str	w0, [x2]
}
 30060cc:	d65f03c0 	ret

00000000030060d0 <prints>:

void prints(const char *ch)
{
 30060d0:	90000021 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 30060d4:	f941bc22 	ldr	x2, [x1,#888]
 30060d8:	90000021 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 30060dc:	b9479424 	ldr	w4, [x1,#1940]
#endif

	while((UartReg->UartLsr.Value & UARTINFO_TRANSMITTER_READY_MASK) != UARTINFO_TRANSMITTER_READY_MASK);

    if(sys_blind_uwrite == 0)
	    UartReg->UartRbrTheDll.Value = *p_param;
 30060e0:	528001a5 	mov	w5, #0xd                   	// #13

#ifdef ENABLE_UART_FUNC

	unsigned char ch8;

	while (*ch != '\0') {
 30060e4:	39400003 	ldrb	w3, [x0]
 30060e8:	34000183 	cbz	w3, 3006118 <prints+0x48>
		ch8 = *ch;
		if (*ch++ == '\n') {
 30060ec:	7100287f 	cmp	w3, #0xa
 30060f0:	91000400 	add	x0, x0, #0x1
 30060f4:	54000140 	b.eq	300611c <prints+0x4c>
#ifdef ENV_SIMULATION
	func_nop(0,0,0,10);
	return;
#endif

	while((UartReg->UartLsr.Value & UARTINFO_TRANSMITTER_READY_MASK) != UARTINFO_TRANSMITTER_READY_MASK);
 30060f8:	b9401441 	ldr	w1, [x2,#20]
 30060fc:	121b0421 	and	w1, w1, #0x60
 3006100:	7101803f 	cmp	w1, #0x60
 3006104:	54ffffa1 	b.ne	30060f8 <prints+0x28>

    if(sys_blind_uwrite == 0)
 3006108:	35fffee4 	cbnz	w4, 30060e4 <prints+0x14>
	    UartReg->UartRbrTheDll.Value = *p_param;
 300610c:	b9000043 	str	w3, [x2]

#ifdef ENABLE_UART_FUNC

	unsigned char ch8;

	while (*ch != '\0') {
 3006110:	39400003 	ldrb	w3, [x0]
 3006114:	35fffec3 	cbnz	w3, 30060ec <prints+0x1c>
			ch8 = 0x0a;
		}
		serial_write((UINT8 *) &ch8);
	}
#endif
}
 3006118:	d65f03c0 	ret
#ifdef ENV_SIMULATION
	func_nop(0,0,0,10);
	return;
#endif

	while((UartReg->UartLsr.Value & UARTINFO_TRANSMITTER_READY_MASK) != UARTINFO_TRANSMITTER_READY_MASK);
 300611c:	b9401441 	ldr	w1, [x2,#20]
 3006120:	121b0421 	and	w1, w1, #0x60
 3006124:	7101803f 	cmp	w1, #0x60
 3006128:	54ffffa1 	b.ne	300611c <prints+0x4c>

    if(sys_blind_uwrite == 0)
 300612c:	35fffe64 	cbnz	w4, 30060f8 <prints+0x28>
	    UartReg->UartRbrTheDll.Value = *p_param;
 3006130:	b9000045 	str	w5, [x2]
 3006134:	17fffff1 	b	30060f8 <prints+0x28>

0000000003006138 <print_val>:
	}
#endif
}

void print_val(UINT32 val, UINT32 len)
{
 3006138:	90000022 	adrp	x2, 300a000 <__FUNCTION__.3108+0x3d8>
 300613c:	f941bc43 	ldr	x3, [x2,#888]
 3006140:	90000022 	adrp	x2, 300a000 <__FUNCTION__.3108+0x3d8>
 3006144:	b9479448 	ldr	w8, [x2,#1940]
#endif

#ifdef ENABLE_UART_FUNC
	unsigned char ch;

	len--;
 3006148:	51000421 	sub	w1, w1, #0x1
	do {
		ch = (val >> (len << 2)) & 0xf;
		ch += (ch < 0xa ? 0x30 : 0x57); // output '0'~'f
 300614c:	52800607 	mov	w7, #0x30                  	// #48
 3006150:	52800ae6 	mov	w6, #0x57                  	// #87
#ifdef ENABLE_UART_FUNC
	unsigned char ch;

	len--;
	do {
		ch = (val >> (len << 2)) & 0xf;
 3006154:	531e7424 	lsl	w4, w1, #2
 3006158:	1ac42404 	lsr	w4, w0, w4
 300615c:	12000c84 	and	w4, w4, #0xf
		ch += (ch < 0xa ? 0x30 : 0x57); // output '0'~'f
 3006160:	7100289f 	cmp	w4, #0xa
 3006164:	1a8630e5 	csel	w5, w7, w6, cc
#ifdef ENV_SIMULATION
	func_nop(0,0,0,10);
	return;
#endif

	while((UartReg->UartLsr.Value & UARTINFO_TRANSMITTER_READY_MASK) != UARTINFO_TRANSMITTER_READY_MASK);
 3006168:	b9401462 	ldr	w2, [x3,#20]
 300616c:	121b0442 	and	w2, w2, #0x60
 3006170:	7101805f 	cmp	w2, #0x60
 3006174:	54ffffa1 	b.ne	3006168 <print_val+0x30>

    if(sys_blind_uwrite == 0)
 3006178:	35000088 	cbnz	w8, 3006188 <print_val+0x50>
	unsigned char ch;

	len--;
	do {
		ch = (val >> (len << 2)) & 0xf;
		ch += (ch < 0xa ? 0x30 : 0x57); // output '0'~'f
 300617c:	0b0400a4 	add	w4, w5, w4
#endif

	while((UartReg->UartLsr.Value & UARTINFO_TRANSMITTER_READY_MASK) != UARTINFO_TRANSMITTER_READY_MASK);

    if(sys_blind_uwrite == 0)
	    UartReg->UartRbrTheDll.Value = *p_param;
 3006180:	53001c84 	uxtb	w4, w4
 3006184:	b9000064 	str	w4, [x3]
	len--;
	do {
		ch = (val >> (len << 2)) & 0xf;
		ch += (ch < 0xa ? 0x30 : 0x57); // output '0'~'f
		serial_write(&ch);
	} while(len--);
 3006188:	51000421 	sub	w1, w1, #0x1
 300618c:	3100043f 	cmn	w1, #0x1
 3006190:	54fffe21 	b.ne	3006154 <print_val+0x1c>
#endif
}
 3006194:	d65f03c0 	ret

0000000003006198 <print_hex>:
	func_nop(0,0,0,10);
	return;
#endif

#ifdef ENABLE_UART_FUNC
	print_val(value, 8);
 3006198:	52800101 	mov	w1, #0x8                   	// #8
 300619c:	17ffffe7 	b	3006138 <print_val>

00000000030061a0 <PrintInfo>:
#endif
}

void PrintInfo(const char* str, UINT32 value){
 30061a0:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
 30061a4:	2a0103f3 	mov	w19, w1
	prints(str);
 30061a8:	97ffffca 	bl	30060d0 <prints>
	prints(" = 0x");
 30061ac:	f0000000 	adrp	x0, 3009000 <el3_vectors>
 30061b0:	913c0000 	add	x0, x0, #0xf00
 30061b4:	97ffffc7 	bl	30060d0 <prints>
	func_nop(0,0,0,10);
	return;
#endif

#ifdef ENABLE_UART_FUNC
	print_val(value, 8);
 30061b8:	2a1303e0 	mov	w0, w19
 30061bc:	52800101 	mov	w1, #0x8                   	// #8
 30061c0:	97ffffde 	bl	3006138 <print_val>
void PrintInfo(const char* str, UINT32 value){
	prints(str);
	prints(" = 0x");
	print_hex(value);
	prints("\n");
}
 30061c4:	a8c17bf3 	ldp	x19, x30, [sp],#16

void PrintInfo(const char* str, UINT32 value){
	prints(str);
	prints(" = 0x");
	print_hex(value);
	prints("\n");
 30061c8:	f0000000 	adrp	x0, 3009000 <el3_vectors>
 30061cc:	91396000 	add	x0, x0, #0xe58
 30061d0:	17ffffc0 	b	30060d0 <prints>

00000000030061d4 <read_rma_pwd>:
 *  Function body
 ************************************************************************/
int read_rma_pwd(int bEcho, UINT32* flow)
{
	unsigned char ch;
	unsigned char pwd[10+1]="rma enable";
 30061d4:	90000022 	adrp	x2, 300a000 <__FUNCTION__.3108+0x3d8>
 30061d8:	91070042 	add	x2, x2, #0x1c0

/************************************************************************
 *  Function body
 ************************************************************************/
int read_rma_pwd(int bEcho, UINT32* flow)
{
 30061dc:	d10043ff 	sub	sp, sp, #0x10
 30061e0:	90000023 	adrp	x3, 300a000 <__FUNCTION__.3108+0x3d8>
 30061e4:	f941bc64 	ldr	x4, [x3,#888]
	unsigned char ch;
	unsigned char pwd[10+1]="rma enable";
 30061e8:	f9400045 	ldr	x5, [x2]
 30061ec:	b8407043 	ldur	w3, [x2,#7]
	int i=0;
 30061f0:	52800002 	mov	w2, #0x0                   	// #0
 *  Function body
 ************************************************************************/
int read_rma_pwd(int bEcho, UINT32* flow)
{
	unsigned char ch;
	unsigned char pwd[10+1]="rma enable";
 30061f4:	f90003e5 	str	x5, [sp]
 30061f8:	b80073e3 	stur	w3, [sp,#7]
		if (bEcho == 1)
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
		}
		if (ch != pwd[i])
 30061fc:	d13fc3e3 	sub	x3, sp, #0xff0
	#define PWD_LEN 	10
	//search for "rma enable"
	while (1) {
		if (serial_read(&ch) != OK)
			continue;
		if (bEcho == 1)
 3006200:	7100041f 	cmp	w0, #0x1
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
		}
		if (ch != pwd[i])
 3006204:	8b22c065 	add	x5, x3, w2, sxtw

int serial_read(unsigned char *ch)
{
#ifdef ENABLE_UART_FUNC
	
	if ((UartReg->UartLsr.Value & UARTINFO_DATA_READY_MASK) == 0)
 3006208:	b9401483 	ldr	w3, [x4,#20]
		}
		if (ch != pwd[i])
		{
			return NOK;
		}
		if (i++ >= PWD_LEN-1) break;
 300620c:	11000446 	add	w6, w2, #0x1

int serial_read(unsigned char *ch)
{
#ifdef ENABLE_UART_FUNC
	
	if ((UartReg->UartLsr.Value & UARTINFO_DATA_READY_MASK) == 0)
 3006210:	3607ff63 	tbz	w3, #0, 30061fc <read_rma_pwd+0x28>
		return NOK; // no received byte

	*ch = (UINT8) (UartReg->UartRbrTheDll.Value & 0xFF);
 3006214:	b9400083 	ldr	w3, [x4]
 3006218:	53001c67 	uxtb	w7, w3
	#define PWD_LEN 	10
	//search for "rma enable"
	while (1) {
		if (serial_read(&ch) != OK)
			continue;
		if (bEcho == 1)
 300621c:	540001a0 	b.eq	3006250 <read_rma_pwd+0x7c>
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
		}
		if (ch != pwd[i])
 3006220:	397fc0a3 	ldrb	w3, [x5,#4080]
 3006224:	6b07007f 	cmp	w3, w7
 3006228:	540001e1 	b.ne	3006264 <read_rma_pwd+0x90>
		{
			return NOK;
		}
		if (i++ >= PWD_LEN-1) break;
 300622c:	7100205f 	cmp	w2, #0x8
 3006230:	2a0603e2 	mov	w2, w6
 3006234:	54fffe4d 	b.le	30061fc <read_rma_pwd+0x28>
	}
	*flow = *flow - PASSWORD_PHASE2;
 3006238:	b9400022 	ldr	w2, [x1]
	return OK;
 300623c:	52800000 	mov	w0, #0x0                   	// #0
		{
			return NOK;
		}
		if (i++ >= PWD_LEN-1) break;
	}
	*flow = *flow - PASSWORD_PHASE2;
 3006240:	51004442 	sub	w2, w2, #0x11
 3006244:	b9000022 	str	w2, [x1]
	return OK;
}
 3006248:	910043ff 	add	sp, sp, #0x10
 300624c:	d65f03c0 	ret
		if (serial_read(&ch) != OK)
			continue;
		if (bEcho == 1)
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
 3006250:	12001c63 	and	w3, w3, #0xff
 3006254:	b9000083 	str	w3, [x4]
		}
		if (ch != pwd[i])
 3006258:	397fc0a3 	ldrb	w3, [x5,#4080]
 300625c:	6b07007f 	cmp	w3, w7
 3006260:	54fffe60 	b.eq	300622c <read_rma_pwd+0x58>
		{
			return NOK;
 3006264:	52800020 	mov	w0, #0x1                   	// #1
		}
		if (i++ >= PWD_LEN-1) break;
	}
	*flow = *flow - PASSWORD_PHASE2;
	return OK;
}
 3006268:	910043ff 	add	sp, sp, #0x10
 300626c:	d65f03c0 	ret

0000000003006270 <read_jtag_pwd>:

int read_jtag_pwd(int bEcho, UINT32* flow)
{
	unsigned char ch;
	unsigned char pwd[10+1]="jtag enable";
 3006270:	f0000002 	adrp	x2, 3009000 <el3_vectors>
 3006274:	912fa043 	add	x3, x2, #0xbe8
	*flow = *flow - PASSWORD_PHASE2;
	return OK;
}

int read_jtag_pwd(int bEcho, UINT32* flow)
{
 3006278:	d10043ff 	sub	sp, sp, #0x10
 300627c:	90000024 	adrp	x4, 300a000 <__FUNCTION__.3108+0x3d8>
 3006280:	f941bc84 	ldr	x4, [x4,#888]
	unsigned char ch;
	unsigned char pwd[10+1]="jtag enable";
 3006284:	f945f442 	ldr	x2, [x2,#3048]
 3006288:	f90003e2 	str	x2, [sp]
	int i=0;
 300628c:	52800002 	mov	w2, #0x0                   	// #0
}

int read_jtag_pwd(int bEcho, UINT32* flow)
{
	unsigned char ch;
	unsigned char pwd[10+1]="jtag enable";
 3006290:	b8407063 	ldur	w3, [x3,#7]
 3006294:	b80073e3 	stur	w3, [sp,#7]
		if (bEcho == 1)
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
		}
		if (ch != pwd[i])
 3006298:	d13fc3e3 	sub	x3, sp, #0xff0
	#define PWD_LEN 	11
	//search for "jtag enable"
	while (1) {
		if (serial_read(&ch) != OK)
			continue;
		if (bEcho == 1)
 300629c:	7100041f 	cmp	w0, #0x1
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
		}
		if (ch != pwd[i])
 30062a0:	8b22c065 	add	x5, x3, w2, sxtw

int serial_read(unsigned char *ch)
{
#ifdef ENABLE_UART_FUNC
	
	if ((UartReg->UartLsr.Value & UARTINFO_DATA_READY_MASK) == 0)
 30062a4:	b9401483 	ldr	w3, [x4,#20]
		}
		if (ch != pwd[i])
		{
			return NOK;
		}
		if (i++ >= PWD_LEN-1) break;
 30062a8:	11000446 	add	w6, w2, #0x1

int serial_read(unsigned char *ch)
{
#ifdef ENABLE_UART_FUNC
	
	if ((UartReg->UartLsr.Value & UARTINFO_DATA_READY_MASK) == 0)
 30062ac:	3607ff63 	tbz	w3, #0, 3006298 <read_jtag_pwd+0x28>
		return NOK; // no received byte

	*ch = (UINT8) (UartReg->UartRbrTheDll.Value & 0xFF);
 30062b0:	b9400083 	ldr	w3, [x4]
 30062b4:	53001c67 	uxtb	w7, w3
	#define PWD_LEN 	11
	//search for "jtag enable"
	while (1) {
		if (serial_read(&ch) != OK)
			continue;
		if (bEcho == 1)
 30062b8:	540001a0 	b.eq	30062ec <read_jtag_pwd+0x7c>
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
		}
		if (ch != pwd[i])
 30062bc:	397fc0a3 	ldrb	w3, [x5,#4080]
 30062c0:	6b07007f 	cmp	w3, w7
 30062c4:	540001e1 	b.ne	3006300 <read_jtag_pwd+0x90>
		{
			return NOK;
		}
		if (i++ >= PWD_LEN-1) break;
 30062c8:	7100245f 	cmp	w2, #0x9
 30062cc:	2a0603e2 	mov	w2, w6
 30062d0:	54fffe4d 	b.le	3006298 <read_jtag_pwd+0x28>
	}
	*flow = *flow - PASSWORD_PHASE2;
 30062d4:	b9400022 	ldr	w2, [x1]
	return OK;
 30062d8:	52800000 	mov	w0, #0x0                   	// #0
		{
			return NOK;
		}
		if (i++ >= PWD_LEN-1) break;
	}
	*flow = *flow - PASSWORD_PHASE2;
 30062dc:	51004442 	sub	w2, w2, #0x11
 30062e0:	b9000022 	str	w2, [x1]
	return OK;
}
 30062e4:	910043ff 	add	sp, sp, #0x10
 30062e8:	d65f03c0 	ret
		if (serial_read(&ch) != OK)
			continue;
		if (bEcho == 1)
		{
			//echo this character
			UartReg->UartRbrTheDll.Value = (UINT32) ch;
 30062ec:	12001c63 	and	w3, w3, #0xff
 30062f0:	b9000083 	str	w3, [x4]
		}
		if (ch != pwd[i])
 30062f4:	397fc0a3 	ldrb	w3, [x5,#4080]
 30062f8:	6b07007f 	cmp	w3, w7
 30062fc:	54fffe60 	b.eq	30062c8 <read_jtag_pwd+0x58>
		{
			return NOK;
 3006300:	52800020 	mov	w0, #0x1                   	// #1
		}
		if (i++ >= PWD_LEN-1) break;
	}
	*flow = *flow - PASSWORD_PHASE2;
	return OK;
}
 3006304:	910043ff 	add	sp, sp, #0x10
 3006308:	d65f03c0 	ret

000000000300630c <serial_read>:

int serial_read(unsigned char *ch)
{
#ifdef ENABLE_UART_FUNC
	
	if ((UartReg->UartLsr.Value & UARTINFO_DATA_READY_MASK) == 0)
 300630c:	90000021 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 3006310:	f941bc21 	ldr	x1, [x1,#888]
	return OK;
}


int serial_read(unsigned char *ch)
{
 3006314:	aa0003e3 	mov	x3, x0
#ifdef ENABLE_UART_FUNC
	
	if ((UartReg->UartLsr.Value & UARTINFO_DATA_READY_MASK) == 0)
		return NOK; // no received byte
 3006318:	52800020 	mov	w0, #0x1                   	// #1

int serial_read(unsigned char *ch)
{
#ifdef ENABLE_UART_FUNC
	
	if ((UartReg->UartLsr.Value & UARTINFO_DATA_READY_MASK) == 0)
 300631c:	b9401422 	ldr	w2, [x1,#20]
 3006320:	36000082 	tbz	w2, #0, 3006330 <serial_read+0x24>
		return NOK; // no received byte

	*ch = (UINT8) (UartReg->UartRbrTheDll.Value & 0xFF);
 3006324:	b9400021 	ldr	w1, [x1]
#endif
	return OK; 
 3006328:	52800000 	mov	w0, #0x0                   	// #0
#ifdef ENABLE_UART_FUNC
	
	if ((UartReg->UartLsr.Value & UARTINFO_DATA_READY_MASK) == 0)
		return NOK; // no received byte

	*ch = (UINT8) (UartReg->UartRbrTheDll.Value & 0xFF);
 300632c:	39000061 	strb	w1, [x3]
#endif
	return OK; 
}
 3006330:	d65f03c0 	ret

0000000003006334 <halt_for_HIF_connection>:

	return output;
}

static bool halt_for_HIF_connection(void)
{
 3006334:	a9be53f3 	stp	x19, x20, [sp,#-32]!
	// bypass detection when secure_boot_sw[5] is burned out
	if (sys_secure_boot_sw & 0x20) {
		return FALSE;
	}
#endif
	mdelay(0, 1); // wait 1ms
 3006338:	52800021 	mov	w1, #0x1                   	// #1
 300633c:	52800000 	mov	w0, #0x0                   	// #0

	#ifdef ROM_DEBUG
	printf("0x98000454: 0x%x, 0x98017c00: 0x%x\n", REG32(POR_DET), REG32(DP_STATE));
 3006340:	d2808a93 	mov	x19, #0x454                 	// #1108
 3006344:	f2b30013 	movk	x19, #0x9800, lsl #16
 3006348:	d28f8014 	mov	x20, #0x7c00                	// #31744
 300634c:	f2b30034 	movk	x20, #0x9801, lsl #16

	return output;
}

static bool halt_for_HIF_connection(void)
{
 3006350:	f9000bfe 	str	x30, [sp,#16]
	// bypass detection when secure_boot_sw[5] is burned out
	if (sys_secure_boot_sw & 0x20) {
		return FALSE;
	}
#endif
	mdelay(0, 1); // wait 1ms
 3006354:	97fffdc4 	bl	3005a64 <mdelay>

	#ifdef ROM_DEBUG
	printf("0x98000454: 0x%x, 0x98017c00: 0x%x\n", REG32(POR_DET), REG32(DP_STATE));
 3006358:	b9400261 	ldr	w1, [x19]
 300635c:	90000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3006360:	91074000 	add	x0, x0, #0x1d0
 3006364:	b9400282 	ldr	w2, [x20]
 3006368:	97ffeaf7 	bl	3000f44 <printf>
	#endif
	// bypass if HIF is not connected
	tmp = REG32(POR_DET) & 0x2;
 300636c:	b9400260 	ldr	w0, [x19]
	if (tmp == 0) {
 3006370:	36080280 	tbz	w0, #1, 30063c0 <halt_for_HIF_connection+0x8c>
		#endif
		return FALSE;
	}

	// check secure state (only allow S0/S1/Stnd)
	tmp = REG32(DP_STATE) & 0x1f;
 3006374:	b9400281 	ldr	w1, [x20]
 3006378:	12001021 	and	w1, w1, #0x1f
	switch (tmp) {
 300637c:	7100203f 	cmp	w1, #0x8
 3006380:	54000120 	b.eq	30063a4 <halt_for_HIF_connection+0x70>
 3006384:	7100783f 	cmp	w1, #0x1e
 3006388:	540000e0 	b.eq	30063a4 <halt_for_HIF_connection+0x70>
 300638c:	7100043f 	cmp	w1, #0x1
			return TRUE;
		default:
			break;
	}

	return FALSE;
 3006390:	52800000 	mov	w0, #0x0                   	// #0
		return FALSE;
	}

	// check secure state (only allow S0/S1/Stnd)
	tmp = REG32(DP_STATE) & 0x1f;
	switch (tmp) {
 3006394:	54000080 	b.eq	30063a4 <halt_for_HIF_connection+0x70>
		default:
			break;
	}

	return FALSE;
}
 3006398:	f9400bfe 	ldr	x30, [sp,#16]
 300639c:	a8c253f3 	ldp	x19, x20, [sp],#32
 30063a0:	d65f03c0 	ret
	switch (tmp) {
		case 0x1e: // S0
		case 0x1:  // S1
		case 0x8:  // Stnd
			#ifdef ROM_DEBUG
			printf("DP_STATE: 0x%x\n", tmp);
 30063a4:	90000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 30063a8:	91082000 	add	x0, x0, #0x208
 30063ac:	97ffeae6 	bl	3000f44 <printf>
			#endif
			return TRUE;
 30063b0:	52800020 	mov	w0, #0x1                   	// #1
		default:
			break;
	}

	return FALSE;
}
 30063b4:	f9400bfe 	ldr	x30, [sp,#16]
 30063b8:	a8c253f3 	ldp	x19, x20, [sp],#32
 30063bc:	d65f03c0 	ret
	#endif
	// bypass if HIF is not connected
	tmp = REG32(POR_DET) & 0x2;
	if (tmp == 0) {
		#ifdef ROM_DEBUG
		printf("HIF not connect\n");
 30063c0:	90000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 30063c4:	9107e000 	add	x0, x0, #0x1f8
 30063c8:	97ffe8c4 	bl	30006d8 <puts>
		#endif
		return FALSE;
 30063cc:	52800000 	mov	w0, #0x0                   	// #0
		default:
			break;
	}

	return FALSE;
}
 30063d0:	f9400bfe 	ldr	x30, [sp,#16]
 30063d4:	a8c253f3 	ldp	x19, x20, [sp],#32
 30063d8:	d65f03c0 	ret

00000000030063dc <polling_done>:
    ((void (*)(void))0x303100)();    // should never return
}
#endif

void polling_done(const unsigned int addr, const unsigned int mask, const unsigned int value)
{
 30063dc:	2a0003e0 	mov	w0, w0
	while ((REG32(addr) & mask) != value)
 30063e0:	b9400003 	ldr	w3, [x0]
 30063e4:	0a010063 	and	w3, w3, w1
 30063e8:	6b02007f 	cmp	w3, w2
 30063ec:	54ffffa1 	b.ne	30063e0 <polling_done+0x4>
			;
}
 30063f0:	d65f03c0 	ret

00000000030063f4 <polling_timeout>:

int polling_timeout(const unsigned int addr, const unsigned int mask,
	const unsigned int value, unsigned int timeout)
{
 30063f4:	2a0003e0 	mov	w0, w0
	if (timeout == 0) {	// no timeout, use polling_done instead
 30063f8:	340000e3 	cbz	w3, 3006414 <polling_timeout+0x20>
		polling_done(addr, mask, value);
		return 0;
	}

	while (((REG32(addr) & mask) != value) && timeout) {
 30063fc:	b9400004 	ldr	w4, [x0]
 3006400:	0a010084 	and	w4, w4, w1
 3006404:	6b02009f 	cmp	w4, w2
 3006408:	540001a1 	b.ne	300643c <polling_timeout+0x48>
		timeout--;
	}

	return (timeout == 0 ? ERR_TIMEOUT : 0);
 300640c:	52800000 	mov	w0, #0x0                   	// #0
}
 3006410:	d65f03c0 	ret
}
#endif

void polling_done(const unsigned int addr, const unsigned int mask, const unsigned int value)
{
	while ((REG32(addr) & mask) != value)
 3006414:	b9400003 	ldr	w3, [x0]
 3006418:	0a010063 	and	w3, w3, w1
 300641c:	6b03005f 	cmp	w2, w3
 3006420:	54ffff60 	b.eq	300640c <polling_timeout+0x18>
 3006424:	b9400003 	ldr	w3, [x0]
 3006428:	0a010063 	and	w3, w3, w1
 300642c:	6b03005f 	cmp	w2, w3
 3006430:	54ffff21 	b.ne	3006414 <polling_timeout+0x20>
 3006434:	17fffff6 	b	300640c <polling_timeout+0x18>
	if (timeout == 0) {	// no timeout, use polling_done instead
		polling_done(addr, mask, value);
		return 0;
	}

	while (((REG32(addr) & mask) != value) && timeout) {
 3006438:	34000143 	cbz	w3, 3006460 <polling_timeout+0x6c>
 300643c:	b9400004 	ldr	w4, [x0]
		timeout--;
 3006440:	51000463 	sub	w3, w3, #0x1
	if (timeout == 0) {	// no timeout, use polling_done instead
		polling_done(addr, mask, value);
		return 0;
	}

	while (((REG32(addr) & mask) != value) && timeout) {
 3006444:	0a010084 	and	w4, w4, w1
 3006448:	6b02009f 	cmp	w4, w2
 300644c:	54ffff61 	b.ne	3006438 <polling_timeout+0x44>
		timeout--;
	}

	return (timeout == 0 ? ERR_TIMEOUT : 0);
 3006450:	6b1f007f 	cmp	w3, wzr
 3006454:	52801220 	mov	w0, #0x91                  	// #145
 3006458:	1a9f0000 	csel	w0, w0, wzr, eq
}
 300645c:	d65f03c0 	ret

	while (((REG32(addr) & mask) != value) && timeout) {
		timeout--;
	}

	return (timeout == 0 ? ERR_TIMEOUT : 0);
 3006460:	52801220 	mov	w0, #0x91                  	// #145
}
 3006464:	d65f03c0 	ret

0000000003006468 <wait_loop>:

void __attribute__ ((optimize("O0"))) wait_loop(unsigned int count)
{
 3006468:	d10043ff 	sub	sp, sp, #0x10
 300646c:	b9000fe0 	str	w0, [sp,#12]
	while (count--)
 3006470:	d503201f 	nop
 3006474:	b9400fe0 	ldr	w0, [sp,#12]
 3006478:	51000401 	sub	w1, w0, #0x1
 300647c:	b9000fe1 	str	w1, [sp,#12]
 3006480:	6b1f001f 	cmp	w0, wzr
 3006484:	54000040 	b.eq	300648c <wait_loop+0x24>
 3006488:	17fffffb 	b	3006474 <wait_loop+0xc>
		;
}
 300648c:	910043ff 	add	sp, sp, #0x10
 3006490:	d65f03c0 	ret

0000000003006494 <bitwise_AND_OR>:

void bitwise_AND_OR(const unsigned int addr, const unsigned int AND_filter,
	const unsigned int OR_filter)
{
	REG32(addr) = (REG32(addr) & AND_filter) | OR_filter;
 3006494:	2a0003e0 	mov	w0, w0
 3006498:	b9400003 	ldr	w3, [x0]
 300649c:	0a010061 	and	w1, w3, w1
 30064a0:	2a020022 	orr	w2, w1, w2
 30064a4:	b9000002 	str	w2, [x0]
}
 30064a8:	d65f03c0 	ret

00000000030064ac <SwapEndian>:

UINT32 SwapEndian(volatile UINT32 val)
{
 30064ac:	d10043ff 	sub	sp, sp, #0x10
 30064b0:	b9000fe0 	str	w0, [sp,#12]
    val = ((UINT32)(val << 8) & (UINT32)0xFF00FF00 ) | ((UINT32)(val >> 8) & (UINT32)0xFF00FF );
 30064b4:	b9400fe1 	ldr	w1, [sp,#12]
 30064b8:	b9400fe0 	ldr	w0, [sp,#12]
 30064bc:	53185c21 	lsl	w1, w1, #8
 30064c0:	53087c00 	lsr	w0, w0, #8
 30064c4:	12089c21 	and	w1, w1, #0xff00ff00
 30064c8:	12009c00 	and	w0, w0, #0xff00ff
 30064cc:	2a010000 	orr	w0, w0, w1
 30064d0:	b9000fe0 	str	w0, [sp,#12]
    return ((UINT32)(val << 16) | (UINT32)(val >> 16));
 30064d4:	b9400fe0 	ldr	w0, [sp,#12]
 30064d8:	b9400fe1 	ldr	w1, [sp,#12]
 30064dc:	53103c00 	lsl	w0, w0, #16
}
 30064e0:	910043ff 	add	sp, sp, #0x10
 30064e4:	2a414000 	orr	w0, w0, w1, lsr #16
 30064e8:	d65f03c0 	ret

00000000030064ec <bisr_procedure>:
    }
}
#endif

void bisr_procedure()
{
 30064ec:	a9be53f3 	stp	x19, x20, [sp,#-32]!
    #ifdef NO_BISR
    return;
    #endif

     //Assert L2_DATA_PWR_RSTN
    REG32(SCWRAP_SC_COORDINATOR_CTRL) = 0x00001010;
 30064f0:	d29a6000 	mov	x0, #0xd300                	// #54016
 30064f4:	f2b30020 	movk	x0, #0x9801, lsl #16
    }
}
#endif

void bisr_procedure()
{
 30064f8:	f9000bfe 	str	x30, [sp,#16]
    #ifdef NO_BISR
    return;
    #endif

     //Assert L2_DATA_PWR_RSTN
    REG32(SCWRAP_SC_COORDINATOR_CTRL) = 0x00001010;
 30064fc:	52820202 	mov	w2, #0x1010                	// #4112
	//De-Assert L2_DATA_PWR_RSTN
    REG32(SCWRAP_SC_COORDINATOR_CTRL) = 0x00003010;
 3006500:	52860201 	mov	w1, #0x3010                	// #12304
	for(i=0;i<10000;i++)
#else
    for(i=0;i<50;i++)
#endif
    {
        if (REG32(BISTR_STATUS_1)&0x200)               //Waiting for L2_DATA_BISR_DONE
 3006504:	d29a6b14 	mov	x20, #0xd358                	// #54104
 3006508:	f2b30034 	movk	x20, #0x9801, lsl #16
    #ifdef NO_BISR
    return;
    #endif

     //Assert L2_DATA_PWR_RSTN
    REG32(SCWRAP_SC_COORDINATOR_CTRL) = 0x00001010;
 300650c:	b9000002 	str	w2, [x0]
	//De-Assert L2_DATA_PWR_RSTN
    REG32(SCWRAP_SC_COORDINATOR_CTRL) = 0x00003010;
 3006510:	52800653 	mov	w19, #0x32                  	// #50
 3006514:	b9000001 	str	w1, [x0]
 3006518:	14000004 	b	3006528 <bisr_procedure+0x3c>
	        delayTime = TIMERINFO_USEC;
	        InitTimer(0, delayTime);
	        //Wait for Interrupt Pending Status
	        while(SystemTimeout(0, delayTime) == FALSE);
        #else
        	mdelay(0, 2);
 300651c:	97fffd52 	bl	3005a64 <mdelay>
    REG32(SCWRAP_SC_COORDINATOR_CTRL) = 0x00003010;

#ifdef ENV_SIMULATION
	for(i=0;i<10000;i++)
#else
    for(i=0;i<50;i++)
 3006520:	71000673 	subs	w19, w19, #0x1
 3006524:	54000240 	b.eq	300656c <bisr_procedure+0x80>
#endif
    {
        if (REG32(BISTR_STATUS_1)&0x200)               //Waiting for L2_DATA_BISR_DONE
 3006528:	b9400282 	ldr	w2, [x20]
 300652c:	d29a6b03 	mov	x3, #0xd358                	// #54104
 3006530:	f2b30023 	movk	x3, #0x9801, lsl #16
	        delayTime = TIMERINFO_USEC;
	        InitTimer(0, delayTime);
	        //Wait for Interrupt Pending Status
	        while(SystemTimeout(0, delayTime) == FALSE);
        #else
        	mdelay(0, 2);
 3006534:	52800041 	mov	w1, #0x2                   	// #2
 3006538:	52800000 	mov	w0, #0x0                   	// #0
	for(i=0;i<10000;i++)
#else
    for(i=0;i<50;i++)
#endif
    {
        if (REG32(BISTR_STATUS_1)&0x200)               //Waiting for L2_DATA_BISR_DONE
 300653c:	364fff02 	tbz	w2, #9, 300651c <bisr_procedure+0x30>
	if (i>=50)
#endif
	return;


    if (!(REG32(BISTR_STATUS_1)&0x1FE))        //check Register of 1st SCPU L2 data BISR pass
 3006540:	b9400060 	ldr	w0, [x3]
	{
		bDone1=1;
	}

	//Assert HOLD_REMAP
    REG32(SCWRAP_HOLD_REMAP) = 0x00000100;
 3006544:	52802001 	mov	w1, #0x100                 	// #256
	if (i>=50)
#endif
	return;


    if (!(REG32(BISTR_STATUS_1)&0x1FE))        //check Register of 1st SCPU L2 data BISR pass
 3006548:	721f1c1f 	tst	w0, #0x1fe
	{
		bDone1=1;
	}

	//Assert HOLD_REMAP
    REG32(SCWRAP_HOLD_REMAP) = 0x00000100;
 300654c:	d29a6a00 	mov	x0, #0xd350                	// #54096
 3006550:	f2b30020 	movk	x0, #0x9801, lsl #16
 3006554:	b9000001 	str	w1, [x0]
	if (i>=50)
#endif
	return;


    if (!(REG32(BISTR_STATUS_1)&0x1FE))        //check Register of 1st SCPU L2 data BISR pass
 3006558:	540000a1 	b.ne	300656c <bisr_procedure+0x80>
    //TODO : enable L2$ & d$
    //4. enable d$ if we can
    if (bDone1)
    {
        #ifdef ENABLE_MMU
        enable_dcache();
 300655c:	97ffe6cc 	bl	300008c <enable_dcache>
        #endif
        #ifdef ENV_SIMULATION
        sim_debug_print(0xaaaaeeee);
        #endif
        sys_bisr_done = 1;
 3006560:	90000020 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3006564:	52800021 	mov	w1, #0x1                   	// #1
 3006568:	b9079801 	str	w1, [x0,#1944]
    }
}
 300656c:	f9400bfe 	ldr	x30, [sp,#16]
 3006570:	a8c253f3 	ldp	x19, x20, [sp],#32
 3006574:	d65f03c0 	ret

0000000003006578 <dcu_calibration_c>:
 *      end_pos: initial end position
 * return:
 *      start_pos & end_pos of calibration result
 */
void dcu_calibration_c(int *start_pos, int *end_pos, unsigned int two_dc)
{
 3006578:	a9b553f3 	stp	x19, x20, [sp,#-176]!
        volatile int org_endpos=0,org_startpos=0;
        volatile unsigned int con_val1=0, con_val2=0, con_val3=0, con_val4=0;
        volatile unsigned int con_val5=0, con_val6=0, con_val7=0, con_val8=0;
        volatile unsigned int dc0_addr_base=0;

        dc0_addr_base = REG32(ISO_MODE_REG(18));
 300657c:	d28fed05 	mov	x5, #0x7f68                	// #32616
 3006580:	f2b30005 	movk	x5, #0x9800, lsl #16
        #define DC_TEST_E3_ADDR       0x0a00001c

        volatile int i, tmp, dq01_val,dc_dpi_ctrl_val;
        volatile unsigned int start_result, end_result;
        volatile unsigned int pattern, pattern1, pattern2, pattern3;
        volatile int org_endpos=0,org_startpos=0;
 3006584:	b90087ff 	str	wzr, [sp,#132]
        volatile unsigned int con_val5=0, con_val6=0, con_val7=0, con_val8=0;
        volatile unsigned int dc0_addr_base=0;

        dc0_addr_base = REG32(ISO_MODE_REG(18));

        REG32(DC_READ_CTRL_1) |= (1 << 10);    // step 1, rd_dly_follow_dq0
 3006588:	d29c4a84 	mov	x4, #0xe254                	// #57940
 300658c:	f2b30004 	movk	x4, #0x9800, lsl #16
        #define DC_TEST_E3_ADDR       0x0a00001c

        volatile int i, tmp, dq01_val,dc_dpi_ctrl_val;
        volatile unsigned int start_result, end_result;
        volatile unsigned int pattern, pattern1, pattern2, pattern3;
        volatile int org_endpos=0,org_startpos=0;
 3006590:	b9008bff 	str	wzr, [sp,#136]
        volatile unsigned int dc0_addr_base=0;

        dc0_addr_base = REG32(ISO_MODE_REG(18));

        REG32(DC_READ_CTRL_1) |= (1 << 10);    // step 1, rd_dly_follow_dq0
        dc_dpi_ctrl_val = REG32(DC_DPI_CTRL_0);
 3006594:	d29c6303 	mov	x3, #0xe318                	// #58136
 3006598:	f2b30003 	movk	x3, #0x9800, lsl #16

        volatile int i, tmp, dq01_val,dc_dpi_ctrl_val;
        volatile unsigned int start_result, end_result;
        volatile unsigned int pattern, pattern1, pattern2, pattern3;
        volatile int org_endpos=0,org_startpos=0;
        volatile unsigned int con_val1=0, con_val2=0, con_val3=0, con_val4=0;
 300659c:	b9008fff 	str	wzr, [sp,#140]
 *      end_pos: initial end position
 * return:
 *      start_pos & end_pos of calibration result
 */
void dcu_calibration_c(int *start_pos, int *end_pos, unsigned int two_dc)
{
 30065a0:	2a0203f3 	mov	w19, w2

        volatile int i, tmp, dq01_val,dc_dpi_ctrl_val;
        volatile unsigned int start_result, end_result;
        volatile unsigned int pattern, pattern1, pattern2, pattern3;
        volatile int org_endpos=0,org_startpos=0;
        volatile unsigned int con_val1=0, con_val2=0, con_val3=0, con_val4=0;
 30065a4:	b90093ff 	str	wzr, [sp,#144]
 30065a8:	b90097ff 	str	wzr, [sp,#148]
 30065ac:	b9009bff 	str	wzr, [sp,#152]
        volatile unsigned int con_val5=0, con_val6=0, con_val7=0, con_val8=0;
 30065b0:	b9009fff 	str	wzr, [sp,#156]
 30065b4:	b900a3ff 	str	wzr, [sp,#160]
 30065b8:	b900a7ff 	str	wzr, [sp,#164]
 30065bc:	b900abff 	str	wzr, [sp,#168]
        volatile unsigned int dc0_addr_base=0;
 30065c0:	b900afff 	str	wzr, [sp,#172]
 *      end_pos: initial end position
 * return:
 *      start_pos & end_pos of calibration result
 */
void dcu_calibration_c(int *start_pos, int *end_pos, unsigned int two_dc)
{
 30065c4:	a9015bf5 	stp	x21, x22, [sp,#16]
 30065c8:	a90263f7 	stp	x23, x24, [sp,#32]
 30065cc:	f90023fe 	str	x30, [sp,#64]
 30065d0:	aa0003f7 	mov	x23, x0
 30065d4:	a9036bf9 	stp	x25, x26, [sp,#48]
 30065d8:	aa0103f6 	mov	x22, x1
        volatile int org_endpos=0,org_startpos=0;
        volatile unsigned int con_val1=0, con_val2=0, con_val3=0, con_val4=0;
        volatile unsigned int con_val5=0, con_val6=0, con_val7=0, con_val8=0;
        volatile unsigned int dc0_addr_base=0;

        dc0_addr_base = REG32(ISO_MODE_REG(18));
 30065dc:	b94000a0 	ldr	w0, [x5]
 30065e0:	b900afe0 	str	w0, [sp,#172]

        REG32(DC_READ_CTRL_1) |= (1 << 10);    // step 1, rd_dly_follow_dq0
 30065e4:	b9400080 	ldr	w0, [x4]
 30065e8:	32160000 	orr	w0, w0, #0x400
 30065ec:	b9000080 	str	w0, [x4]
        dc_dpi_ctrl_val = REG32(DC_DPI_CTRL_0);
 30065f0:	b9400060 	ldr	w0, [x3]
 30065f4:	b9006be0 	str	w0, [sp,#104]
        //step 2, fw_set_mode = 2
        tmp = REG32(DC_DPI_CTRL_0) & ~0x3;
 30065f8:	b9400060 	ldr	w0, [x3]
 30065fc:	121e7400 	and	w0, w0, #0xfffffffc
 3006600:	b90063e0 	str	w0, [sp,#96]
        tmp = tmp | 0x2;
 3006604:	b94063e0 	ldr	w0, [sp,#96]
 3006608:	321f0000 	orr	w0, w0, #0x2
 300660c:	b90063e0 	str	w0, [sp,#96]
        REG32(DC_DPI_CTRL_0) = tmp;
 3006610:	b94063e0 	ldr	w0, [sp,#96]
 3006614:	b9000060 	str	w0, [x3]
        //step 3, cal_set_mode = 3
        tmp = REG32(DC_DPI_CTRL_0) & ~0x30;
 3006618:	b9400060 	ldr	w0, [x3]
 300661c:	121a7400 	and	w0, w0, #0xffffffcf
 3006620:	b90063e0 	str	w0, [sp,#96]
        tmp = tmp | 0x30;
 3006624:	b94063e0 	ldr	w0, [sp,#96]
 3006628:	321c0400 	orr	w0, w0, #0x30
 300662c:	b90063e0 	str	w0, [sp,#96]
        REG32(DC_DPI_CTRL_0) = tmp;
 3006630:	b94063e0 	ldr	w0, [sp,#96]
 3006634:	b9000060 	str	w0, [x3]

        org_endpos = *end_pos;
 3006638:	b9400021 	ldr	w1, [x1]
        org_startpos = *start_pos;
 300663c:	b94002e0 	ldr	w0, [x23]
        //step 3, cal_set_mode = 3
        tmp = REG32(DC_DPI_CTRL_0) & ~0x30;
        tmp = tmp | 0x30;
        REG32(DC_DPI_CTRL_0) = tmp;

        org_endpos = *end_pos;
 3006640:	b90087e1 	str	w1, [sp,#132]
        org_startpos = *start_pos;
 3006644:	b9008be0 	str	w0, [sp,#136]
        //1195, REG32(DC_MISC) |= (1 << 24);    // tap_sel = 1
        //1195, REG32(DC_MISC) |= (1 << 27);    // tap_2group = 1
        sync();
 3006648:	97ffe731 	bl	300030c <sync>
        pattern = 0x5a5aa5a5;
 300664c:	5294b4a1 	mov	w1, #0xa5a5                	// #42405
 3006650:	72ab4b41 	movk	w1, #0x5a5a, lsl #16
 3006654:	b90077e1 	str	w1, [sp,#116]
        pattern1 = 0xa5a55a5a;
 3006658:	528b4b40 	mov	w0, #0x5a5a                	// #23130
 300665c:	72b4b4a0 	movk	w0, #0xa5a5, lsl #16
 3006660:	b9007be0 	str	w0, [sp,#120]
        pattern2 = 0x5a5aa5a5;
 3006664:	b9007fe1 	str	w1, [sp,#124]
        pattern3 = 0xa5a55a5a;

CAL_SEG:
        /* set data to DDR */

        if(two_dc==1){
 3006668:	7100067f 	cmp	w19, #0x1
        //1195, REG32(DC_MISC) |= (1 << 27);    // tap_2group = 1
        sync();
        pattern = 0x5a5aa5a5;
        pattern1 = 0xa5a55a5a;
        pattern2 = 0x5a5aa5a5;
        pattern3 = 0xa5a55a5a;
 300666c:	b90083e0 	str	w0, [sp,#128]

CAL_SEG:
        /* set data to DDR */

        if(two_dc==1){
 3006670:	54001d60 	b.eq	3006a1c <dcu_calibration_c+0x4a4>
            REG32(dc0_addr_base|0x8) = pattern2;
            REG32(dc0_addr_base|0x18) = pattern2;
            REG32(dc0_addr_base|0xc) = pattern3;
            REG32(dc0_addr_base|0x1c) = pattern3;
        }else{
            REG32(DC_TEST_S_ADDR) = pattern;
 3006674:	d2a14000 	mov	x0, #0xa000000             	// #167772160
 3006678:	b94077e1 	ldr	w1, [sp,#116]
            REG32(DC_TEST_E_ADDR) = pattern;
 300667c:	d2800206 	mov	x6, #0x10                  	// #16
 3006680:	f2a14006 	movk	x6, #0xa00, lsl #16
            REG32(DC_TEST_S1_ADDR) = pattern1;
 3006684:	d2800085 	mov	x5, #0x4                   	// #4
 3006688:	f2a14005 	movk	x5, #0xa00, lsl #16
            REG32(dc0_addr_base|0x8) = pattern2;
            REG32(dc0_addr_base|0x18) = pattern2;
            REG32(dc0_addr_base|0xc) = pattern3;
            REG32(dc0_addr_base|0x1c) = pattern3;
        }else{
            REG32(DC_TEST_S_ADDR) = pattern;
 300668c:	b9000001 	str	w1, [x0]
            REG32(DC_TEST_E_ADDR) = pattern;
            REG32(DC_TEST_S1_ADDR) = pattern1;
            REG32(DC_TEST_E1_ADDR) = pattern1;
 3006690:	d2800284 	mov	x4, #0x14                  	// #20
 3006694:	f2a14004 	movk	x4, #0xa00, lsl #16
            REG32(dc0_addr_base|0x18) = pattern2;
            REG32(dc0_addr_base|0xc) = pattern3;
            REG32(dc0_addr_base|0x1c) = pattern3;
        }else{
            REG32(DC_TEST_S_ADDR) = pattern;
            REG32(DC_TEST_E_ADDR) = pattern;
 3006698:	b94077e7 	ldr	w7, [sp,#116]
            REG32(DC_TEST_S1_ADDR) = pattern1;
            REG32(DC_TEST_E1_ADDR) = pattern1;
            REG32(DC_TEST_S2_ADDR) = pattern2;
 300669c:	d2800103 	mov	x3, #0x8                   	// #8
 30066a0:	f2a14003 	movk	x3, #0xa00, lsl #16
            REG32(dc0_addr_base|0x18) = pattern2;
            REG32(dc0_addr_base|0xc) = pattern3;
            REG32(dc0_addr_base|0x1c) = pattern3;
        }else{
            REG32(DC_TEST_S_ADDR) = pattern;
            REG32(DC_TEST_E_ADDR) = pattern;
 30066a4:	b90000c7 	str	w7, [x6]
            REG32(DC_TEST_S1_ADDR) = pattern1;
            REG32(DC_TEST_E1_ADDR) = pattern1;
            REG32(DC_TEST_S2_ADDR) = pattern2;
            REG32(DC_TEST_E2_ADDR) = pattern2;
 30066a8:	d2800302 	mov	x2, #0x18                  	// #24
 30066ac:	f2a14002 	movk	x2, #0xa00, lsl #16
            REG32(dc0_addr_base|0xc) = pattern3;
            REG32(dc0_addr_base|0x1c) = pattern3;
        }else{
            REG32(DC_TEST_S_ADDR) = pattern;
            REG32(DC_TEST_E_ADDR) = pattern;
            REG32(DC_TEST_S1_ADDR) = pattern1;
 30066b0:	b9407be6 	ldr	w6, [sp,#120]
            REG32(DC_TEST_E1_ADDR) = pattern1;
            REG32(DC_TEST_S2_ADDR) = pattern2;
            REG32(DC_TEST_E2_ADDR) = pattern2;
            REG32(DC_TEST_S3_ADDR) = pattern3;
 30066b4:	d2800181 	mov	x1, #0xc                   	// #12
 30066b8:	f2a14001 	movk	x1, #0xa00, lsl #16
            REG32(dc0_addr_base|0xc) = pattern3;
            REG32(dc0_addr_base|0x1c) = pattern3;
        }else{
            REG32(DC_TEST_S_ADDR) = pattern;
            REG32(DC_TEST_E_ADDR) = pattern;
            REG32(DC_TEST_S1_ADDR) = pattern1;
 30066bc:	b90000a6 	str	w6, [x5]
            REG32(DC_TEST_E1_ADDR) = pattern1;
 30066c0:	b9407be5 	ldr	w5, [sp,#120]
 30066c4:	b9000085 	str	w5, [x4]
            REG32(DC_TEST_S2_ADDR) = pattern2;
 30066c8:	b9407fe4 	ldr	w4, [sp,#124]
 30066cc:	b9000064 	str	w4, [x3]
            REG32(DC_TEST_E2_ADDR) = pattern2;
 30066d0:	b9407fe3 	ldr	w3, [sp,#124]
 30066d4:	b9000043 	str	w3, [x2]
            REG32(DC_TEST_S3_ADDR) = pattern3;
 30066d8:	b94083e2 	ldr	w2, [sp,#128]
 30066dc:	b9000022 	str	w2, [x1]
            REG32(DC_TEST_E3_ADDR) = pattern3;
 30066e0:	b94083e1 	ldr	w1, [sp,#128]
 30066e4:	b9001c01 	str	w1, [x0,#28]
        }
        start_result = end_result = 0;
 30066e8:	b90073ff 	str	wzr, [sp,#112]
 30066ec:	b9006fff 	str	wzr, [sp,#108]
        sync();
 30066f0:	97ffe707 	bl	300030c <sync>
        for (i = org_endpos; i >= org_startpos; i--) {
 30066f4:	b94087e0 	ldr	w0, [sp,#132]
 30066f8:	b9005fe0 	str	w0, [sp,#92]
 30066fc:	b9405fe0 	ldr	w0, [sp,#92]
 3006700:	b9408be1 	ldr	w1, [sp,#136]
 3006704:	6b00003f 	cmp	w1, w0
 3006708:	5400124c 	b.gt	3006950 <dcu_calibration_c+0x3d8>
            tmp = tmp | (i << 6) | i;
            REG32(DC_DQ16_17_DLYN) = tmp;
            REG32(DC_MISC) |= (1 << 25);    // fw_set = 1
            #else

            tmp = REG32(DC_DQS_IN_DLY_0) & ~0x1f;
 300670c:	d29c519a 	mov	x26, #0xe28c                	// #57996
 3006710:	f2b3001a 	movk	x26, #0x9800, lsl #16
            tmp = tmp | i;
            REG32(DC_DQS_IN_DLY_0) = tmp;
            tmp = REG32(DC_DQS_IN_DLY_2) & ~0x1f;
 3006714:	d29c5599 	mov	x25, #0xe2ac                	// #58028
 3006718:	f2b30019 	movk	x25, #0x9800, lsl #16
            tmp = tmp | i;
            REG32(DC_DQS_IN_DLY_2) = tmp;
            REG32(DC_DPI_CTRL_1) |= 0xc;    // set write_en_1 & fw_set_rd_dly
 300671c:	d29c6398 	mov	x24, #0xe31c                	// #58140
 3006720:	f2b30018 	movk	x24, #0x9800, lsl #16
                con_val6 = REG32(dc0_addr_base|0x14);
                con_val7 = REG32(dc0_addr_base|0x18);
                con_val8 = REG32(dc0_addr_base|0x1c);
            }else{
                con_val1 = REG32(DC_TEST_S_ADDR);
                con_val2 = REG32(DC_TEST_S1_ADDR);
 3006724:	d2800095 	mov	x21, #0x4                   	// #4
 3006728:	f2a14015 	movk	x21, #0xa00, lsl #16
                con_val3 = REG32(DC_TEST_S2_ADDR);
 300672c:	d2800114 	mov	x20, #0x8                   	// #8
 3006730:	f2a14014 	movk	x20, #0xa00, lsl #16
 3006734:	14000027 	b	30067d0 <dcu_calibration_c+0x258>
                con_val5 = REG32(dc0_addr_base|0x10);
                con_val6 = REG32(dc0_addr_base|0x14);
                con_val7 = REG32(dc0_addr_base|0x18);
                con_val8 = REG32(dc0_addr_base|0x1c);
            }else{
                con_val1 = REG32(DC_TEST_S_ADDR);
 3006738:	d2a14005 	mov	x5, #0xa000000             	// #167772160
                con_val2 = REG32(DC_TEST_S1_ADDR);
                con_val3 = REG32(DC_TEST_S2_ADDR);
                con_val4 = REG32(DC_TEST_S3_ADDR);
 300673c:	d2800184 	mov	x4, #0xc                   	// #12
 3006740:	f2a14004 	movk	x4, #0xa00, lsl #16
                con_val5 = REG32(DC_TEST_E_ADDR);
 3006744:	d2800203 	mov	x3, #0x10                  	// #16
 3006748:	f2a14003 	movk	x3, #0xa00, lsl #16
                con_val5 = REG32(dc0_addr_base|0x10);
                con_val6 = REG32(dc0_addr_base|0x14);
                con_val7 = REG32(dc0_addr_base|0x18);
                con_val8 = REG32(dc0_addr_base|0x1c);
            }else{
                con_val1 = REG32(DC_TEST_S_ADDR);
 300674c:	b94000a5 	ldr	w5, [x5]
                con_val2 = REG32(DC_TEST_S1_ADDR);
                con_val3 = REG32(DC_TEST_S2_ADDR);
                con_val4 = REG32(DC_TEST_S3_ADDR);
                con_val5 = REG32(DC_TEST_E_ADDR);
                con_val6 = REG32(DC_TEST_E1_ADDR);
 3006750:	d2800282 	mov	x2, #0x14                  	// #20
 3006754:	f2a14002 	movk	x2, #0xa00, lsl #16
                con_val5 = REG32(dc0_addr_base|0x10);
                con_val6 = REG32(dc0_addr_base|0x14);
                con_val7 = REG32(dc0_addr_base|0x18);
                con_val8 = REG32(dc0_addr_base|0x1c);
            }else{
                con_val1 = REG32(DC_TEST_S_ADDR);
 3006758:	b9008fe5 	str	w5, [sp,#140]
                con_val2 = REG32(DC_TEST_S1_ADDR);
                con_val3 = REG32(DC_TEST_S2_ADDR);
                con_val4 = REG32(DC_TEST_S3_ADDR);
                con_val5 = REG32(DC_TEST_E_ADDR);
                con_val6 = REG32(DC_TEST_E1_ADDR);
                con_val7 = REG32(DC_TEST_E2_ADDR);
 300675c:	d2800301 	mov	x1, #0x18                  	// #24
 3006760:	f2a14001 	movk	x1, #0xa00, lsl #16
                con_val6 = REG32(dc0_addr_base|0x14);
                con_val7 = REG32(dc0_addr_base|0x18);
                con_val8 = REG32(dc0_addr_base|0x1c);
            }else{
                con_val1 = REG32(DC_TEST_S_ADDR);
                con_val2 = REG32(DC_TEST_S1_ADDR);
 3006764:	b94002a5 	ldr	w5, [x21]
                con_val3 = REG32(DC_TEST_S2_ADDR);
                con_val4 = REG32(DC_TEST_S3_ADDR);
                con_val5 = REG32(DC_TEST_E_ADDR);
                con_val6 = REG32(DC_TEST_E1_ADDR);
                con_val7 = REG32(DC_TEST_E2_ADDR);
                con_val8 = REG32(DC_TEST_E3_ADDR);
 3006768:	d2800380 	mov	x0, #0x1c                  	// #28
 300676c:	f2a14000 	movk	x0, #0xa00, lsl #16
                con_val6 = REG32(dc0_addr_base|0x14);
                con_val7 = REG32(dc0_addr_base|0x18);
                con_val8 = REG32(dc0_addr_base|0x1c);
            }else{
                con_val1 = REG32(DC_TEST_S_ADDR);
                con_val2 = REG32(DC_TEST_S1_ADDR);
 3006770:	b90093e5 	str	w5, [sp,#144]
                con_val3 = REG32(DC_TEST_S2_ADDR);
 3006774:	b9400285 	ldr	w5, [x20]
 3006778:	b90097e5 	str	w5, [sp,#148]
                con_val4 = REG32(DC_TEST_S3_ADDR);
 300677c:	b9400084 	ldr	w4, [x4]
 3006780:	b9009be4 	str	w4, [sp,#152]
                con_val5 = REG32(DC_TEST_E_ADDR);
 3006784:	b9400063 	ldr	w3, [x3]
 3006788:	b9009fe3 	str	w3, [sp,#156]
                con_val6 = REG32(DC_TEST_E1_ADDR);
 300678c:	b9400042 	ldr	w2, [x2]
 3006790:	b900a3e2 	str	w2, [sp,#160]
                con_val7 = REG32(DC_TEST_E2_ADDR);
 3006794:	b9400021 	ldr	w1, [x1]
 3006798:	b900a7e1 	str	w1, [sp,#164]
                con_val8 = REG32(DC_TEST_E3_ADDR);
 300679c:	b9400000 	ldr	w0, [x0]
 30067a0:	b900abe0 	str	w0, [sp,#168]
            }

            // check read from DDR is correct
            if ((con_val1 == pattern) && (con_val2 == pattern1)&& (con_val3 == pattern2)&& (con_val4 == pattern3)&&(con_val5 == pattern) && (con_val6 == pattern1)&& (con_val7 == pattern2)&& (con_val8 == pattern3)){
 30067a4:	b9408fe1 	ldr	w1, [sp,#140]
 30067a8:	b94077e0 	ldr	w0, [sp,#116]
 30067ac:	6b00003f 	cmp	w1, w0
 30067b0:	540008a0 	b.eq	30068c4 <dcu_calibration_c+0x34c>
            REG32(DC_TEST_S3_ADDR) = pattern3;
            REG32(DC_TEST_E3_ADDR) = pattern3;
        }
        start_result = end_result = 0;
        sync();
        for (i = org_endpos; i >= org_startpos; i--) {
 30067b4:	b9405fe0 	ldr	w0, [sp,#92]
 30067b8:	51000400 	sub	w0, w0, #0x1
 30067bc:	b9005fe0 	str	w0, [sp,#92]
 30067c0:	b9405fe1 	ldr	w1, [sp,#92]
 30067c4:	b9408be0 	ldr	w0, [sp,#136]
 30067c8:	6b00003f 	cmp	w1, w0
 30067cc:	54000c2b 	b.lt	3006950 <dcu_calibration_c+0x3d8>
            tmp = tmp | (i << 6) | i;
            REG32(DC_DQ16_17_DLYN) = tmp;
            REG32(DC_MISC) |= (1 << 25);    // fw_set = 1
            #else

            tmp = REG32(DC_DQS_IN_DLY_0) & ~0x1f;
 30067d0:	b9400340 	ldr	w0, [x26]
 30067d4:	121b6800 	and	w0, w0, #0xffffffe0
 30067d8:	b90063e0 	str	w0, [sp,#96]
            tmp = tmp | i;
 30067dc:	b94063e0 	ldr	w0, [sp,#96]
 30067e0:	b9405fe1 	ldr	w1, [sp,#92]
 30067e4:	2a000020 	orr	w0, w1, w0
 30067e8:	b90063e0 	str	w0, [sp,#96]
            REG32(DC_DQS_IN_DLY_0) = tmp;
 30067ec:	b94063e0 	ldr	w0, [sp,#96]
 30067f0:	b9000340 	str	w0, [x26]
            tmp = REG32(DC_DQS_IN_DLY_2) & ~0x1f;
 30067f4:	b9400320 	ldr	w0, [x25]
 30067f8:	121b6800 	and	w0, w0, #0xffffffe0
 30067fc:	b90063e0 	str	w0, [sp,#96]
            tmp = tmp | i;
 3006800:	b94063e0 	ldr	w0, [sp,#96]
 3006804:	b9405fe1 	ldr	w1, [sp,#92]
 3006808:	2a000020 	orr	w0, w1, w0
 300680c:	b90063e0 	str	w0, [sp,#96]
            REG32(DC_DQS_IN_DLY_2) = tmp;
 3006810:	b94063e0 	ldr	w0, [sp,#96]
 3006814:	b9000320 	str	w0, [x25]
            REG32(DC_DPI_CTRL_1) |= 0xc;    // set write_en_1 & fw_set_rd_dly
 3006818:	b9400300 	ldr	w0, [x24]
 300681c:	321e0400 	orr	w0, w0, #0xc
 3006820:	b9000300 	str	w0, [x24]
            #endif
            sync();
 3006824:	97ffe6ba 	bl	300030c <sync>
#ifdef ENV_SIMULATION
    sim_debug_print(0xdcca0000 | i);
#endif

            if(two_dc==1){
 3006828:	7100067f 	cmp	w19, #0x1
 300682c:	54fff861 	b.ne	3006738 <dcu_calibration_c+0x1c0>
                con_val1 = REG32(dc0_addr_base);
 3006830:	b940afe1 	ldr	w1, [sp,#172]
                con_val2 = REG32(dc0_addr_base|0x4);
                con_val3 = REG32(dc0_addr_base|0x8);
                con_val4 = REG32(dc0_addr_base|0xc);
                con_val5 = REG32(dc0_addr_base|0x10);
                con_val6 = REG32(dc0_addr_base|0x14);
 3006834:	52800280 	mov	w0, #0x14                  	// #20
#ifdef ENV_SIMULATION
    sim_debug_print(0xdcca0000 | i);
#endif

            if(two_dc==1){
                con_val1 = REG32(dc0_addr_base);
 3006838:	2a0103e1 	mov	w1, w1
 300683c:	b9400021 	ldr	w1, [x1]
 3006840:	b9008fe1 	str	w1, [sp,#140]
                con_val2 = REG32(dc0_addr_base|0x4);
 3006844:	b940afe1 	ldr	w1, [sp,#172]
 3006848:	321e0021 	orr	w1, w1, #0x4
 300684c:	b9400021 	ldr	w1, [x1]
 3006850:	b90093e1 	str	w1, [sp,#144]
                con_val3 = REG32(dc0_addr_base|0x8);
 3006854:	b940afe1 	ldr	w1, [sp,#172]
 3006858:	321d0021 	orr	w1, w1, #0x8
 300685c:	b9400021 	ldr	w1, [x1]
 3006860:	b90097e1 	str	w1, [sp,#148]
                con_val4 = REG32(dc0_addr_base|0xc);
 3006864:	b940afe1 	ldr	w1, [sp,#172]
 3006868:	321e0421 	orr	w1, w1, #0xc
 300686c:	b9400021 	ldr	w1, [x1]
 3006870:	b9009be1 	str	w1, [sp,#152]
                con_val5 = REG32(dc0_addr_base|0x10);
 3006874:	b940afe1 	ldr	w1, [sp,#172]
 3006878:	321c0021 	orr	w1, w1, #0x10
 300687c:	b9400021 	ldr	w1, [x1]
 3006880:	b9009fe1 	str	w1, [sp,#156]
                con_val6 = REG32(dc0_addr_base|0x14);
 3006884:	b940afe1 	ldr	w1, [sp,#172]
 3006888:	2a000020 	orr	w0, w1, w0
 300688c:	b9400000 	ldr	w0, [x0]
 3006890:	b900a3e0 	str	w0, [sp,#160]
                con_val7 = REG32(dc0_addr_base|0x18);
 3006894:	b940afe0 	ldr	w0, [sp,#172]
 3006898:	321d0400 	orr	w0, w0, #0x18
 300689c:	b9400000 	ldr	w0, [x0]
 30068a0:	b900a7e0 	str	w0, [sp,#164]
                con_val8 = REG32(dc0_addr_base|0x1c);
 30068a4:	b940afe0 	ldr	w0, [sp,#172]
 30068a8:	321e0800 	orr	w0, w0, #0x1c
 30068ac:	b9400000 	ldr	w0, [x0]
 30068b0:	b900abe0 	str	w0, [sp,#168]
                con_val7 = REG32(DC_TEST_E2_ADDR);
                con_val8 = REG32(DC_TEST_E3_ADDR);
            }

            // check read from DDR is correct
            if ((con_val1 == pattern) && (con_val2 == pattern1)&& (con_val3 == pattern2)&& (con_val4 == pattern3)&&(con_val5 == pattern) && (con_val6 == pattern1)&& (con_val7 == pattern2)&& (con_val8 == pattern3)){
 30068b4:	b9408fe1 	ldr	w1, [sp,#140]
 30068b8:	b94077e0 	ldr	w0, [sp,#116]
 30068bc:	6b00003f 	cmp	w1, w0
 30068c0:	54fff7a1 	b.ne	30067b4 <dcu_calibration_c+0x23c>
 30068c4:	b94093e1 	ldr	w1, [sp,#144]
 30068c8:	b9407be0 	ldr	w0, [sp,#120]
 30068cc:	6b00003f 	cmp	w1, w0
 30068d0:	54fff721 	b.ne	30067b4 <dcu_calibration_c+0x23c>
 30068d4:	b94097e1 	ldr	w1, [sp,#148]
 30068d8:	b9407fe0 	ldr	w0, [sp,#124]
 30068dc:	6b00003f 	cmp	w1, w0
 30068e0:	54fff6a1 	b.ne	30067b4 <dcu_calibration_c+0x23c>
 30068e4:	b9409be1 	ldr	w1, [sp,#152]
 30068e8:	b94083e0 	ldr	w0, [sp,#128]
 30068ec:	6b00003f 	cmp	w1, w0
 30068f0:	54fff621 	b.ne	30067b4 <dcu_calibration_c+0x23c>
 30068f4:	b9409fe1 	ldr	w1, [sp,#156]
 30068f8:	b94077e0 	ldr	w0, [sp,#116]
 30068fc:	6b00003f 	cmp	w1, w0
 3006900:	54fff5a1 	b.ne	30067b4 <dcu_calibration_c+0x23c>
 3006904:	b940a3e1 	ldr	w1, [sp,#160]
 3006908:	b9407be0 	ldr	w0, [sp,#120]
 300690c:	6b00003f 	cmp	w1, w0
 3006910:	54fff521 	b.ne	30067b4 <dcu_calibration_c+0x23c>
 3006914:	b940a7e1 	ldr	w1, [sp,#164]
 3006918:	b9407fe0 	ldr	w0, [sp,#124]
 300691c:	6b00003f 	cmp	w1, w0
 3006920:	54fff4a1 	b.ne	30067b4 <dcu_calibration_c+0x23c>
 3006924:	b940abe1 	ldr	w1, [sp,#168]
 3006928:	b94083e0 	ldr	w0, [sp,#128]
 300692c:	6b00003f 	cmp	w1, w0
 3006930:	54fff421 	b.ne	30067b4 <dcu_calibration_c+0x23c>
                start_result = i;       // always update start_result
 3006934:	b9405fe0 	ldr	w0, [sp,#92]
 3006938:	b9006fe0 	str	w0, [sp,#108]
#ifdef ENV_SIMULATION
sim_debug_print(0xca110000 | start_result);
#endif
                if (end_result == 0)
 300693c:	b94073e0 	ldr	w0, [sp,#112]
 3006940:	35fff3a0 	cbnz	w0, 30067b4 <dcu_calibration_c+0x23c>
                {
                	end_result = i; // update end_result only once
 3006944:	b9405fe0 	ldr	w0, [sp,#92]
 3006948:	b90073e0 	str	w0, [sp,#112]
 300694c:	17ffff9a 	b	30067b4 <dcu_calibration_c+0x23c>
       		sim_debug_print(0xdccb0000 | i);
#endif
        }

        /* check calibration result */
        if ((start_result == 0) && (end_result == 0)) {
 3006950:	b9406fe0 	ldr	w0, [sp,#108]
 3006954:	35000060 	cbnz	w0, 3006960 <dcu_calibration_c+0x3e8>
 3006958:	b94073e0 	ldr	w0, [sp,#112]
 300695c:	34000a40 	cbz	w0, 3006aa4 <dcu_calibration_c+0x52c>
	        sim_debug_print(0xdd1c0000 | end_result);
#endif
        }
        else {
            // update calibration result
            *start_pos = start_result;
 3006960:	b9406fe1 	ldr	w1, [sp,#108]
 3006964:	b90002e1 	str	w1, [x23]
            *end_pos = end_result;
 3006968:	b94073e0 	ldr	w0, [sp,#112]
 300696c:	b90002c0 	str	w0, [x22]
#endif
        }

        /* set final position */

        dq01_val = (start_result + end_result) / 2;
 3006970:	b9406fe0 	ldr	w0, [sp,#108]
        tmp = 0;
        tmp = REG32(DC_DQS_IN_DLY_0) & ~0x1f;
 3006974:	d29c5183 	mov	x3, #0xe28c                	// #57996
 3006978:	f2b30003 	movk	x3, #0x9800, lsl #16
#endif
        }

        /* set final position */

        dq01_val = (start_result + end_result) / 2;
 300697c:	b94073e1 	ldr	w1, [sp,#112]
        tmp = 0;
        tmp = REG32(DC_DQS_IN_DLY_0) & ~0x1f;
        tmp = tmp | dq01_val;
        REG32(DC_DQS_IN_DLY_0) = tmp;
        tmp = REG32(DC_DQS_IN_DLY_2) & ~0x1f;
 3006980:	d29c5582 	mov	x2, #0xe2ac                	// #58028
 3006984:	f2b30002 	movk	x2, #0x9800, lsl #16
#endif
        }

        /* set final position */

        dq01_val = (start_result + end_result) / 2;
 3006988:	0b000020 	add	w0, w1, w0
        tmp = tmp | dq01_val;
        REG32(DC_DQS_IN_DLY_0) = tmp;
        tmp = REG32(DC_DQS_IN_DLY_2) & ~0x1f;
        tmp = tmp | dq01_val;
        REG32(DC_DQS_IN_DLY_2) = tmp;
        REG32(DC_DPI_CTRL_1) |= 0xc;    // set write_en_1 & fw_set_rd_dly
 300698c:	d29c6381 	mov	x1, #0xe31c                	// #58140
 3006990:	f2b30001 	movk	x1, #0x9800, lsl #16
#endif
        }

        /* set final position */

        dq01_val = (start_result + end_result) / 2;
 3006994:	53017c00 	lsr	w0, w0, #1
 3006998:	b90067e0 	str	w0, [sp,#100]
        tmp = 0;
 300699c:	b90063ff 	str	wzr, [sp,#96]
        REG32(DC_DPI_CTRL_1) |= 0xc;    // set write_en_1 & fw_set_rd_dly
#ifdef ENV_SIMULATION
        sim_debug_print(0xcc1d0000 | dq01_val);
#endif

        REG32(DC_DPI_CTRL_0) = dc_dpi_ctrl_val; //restore step 2,3
 30069a0:	d29c6304 	mov	x4, #0xe318                	// #58136
 30069a4:	f2b30004 	movk	x4, #0x9800, lsl #16

        /* set final position */

        dq01_val = (start_result + end_result) / 2;
        tmp = 0;
        tmp = REG32(DC_DQS_IN_DLY_0) & ~0x1f;
 30069a8:	b9400060 	ldr	w0, [x3]
 30069ac:	121b6800 	and	w0, w0, #0xffffffe0
 30069b0:	b90063e0 	str	w0, [sp,#96]
        tmp = tmp | dq01_val;
 30069b4:	b94063e0 	ldr	w0, [sp,#96]
 30069b8:	b94067e5 	ldr	w5, [sp,#100]
 30069bc:	2a0000a0 	orr	w0, w5, w0
 30069c0:	b90063e0 	str	w0, [sp,#96]
        REG32(DC_DQS_IN_DLY_0) = tmp;
 30069c4:	b94063e0 	ldr	w0, [sp,#96]
 30069c8:	b9000060 	str	w0, [x3]
        tmp = REG32(DC_DQS_IN_DLY_2) & ~0x1f;
 30069cc:	b9400040 	ldr	w0, [x2]
 30069d0:	121b6800 	and	w0, w0, #0xffffffe0
 30069d4:	b90063e0 	str	w0, [sp,#96]
        tmp = tmp | dq01_val;
 30069d8:	b94063e0 	ldr	w0, [sp,#96]
 30069dc:	b94067e3 	ldr	w3, [sp,#100]
 30069e0:	2a000060 	orr	w0, w3, w0
 30069e4:	b90063e0 	str	w0, [sp,#96]
        REG32(DC_DQS_IN_DLY_2) = tmp;
 30069e8:	b94063e0 	ldr	w0, [sp,#96]
 30069ec:	b9000040 	str	w0, [x2]
        REG32(DC_DPI_CTRL_1) |= 0xc;    // set write_en_1 & fw_set_rd_dly
 30069f0:	b9400020 	ldr	w0, [x1]
 30069f4:	321e0400 	orr	w0, w0, #0xc
 30069f8:	b9000020 	str	w0, [x1]
#ifdef ENV_SIMULATION
        sim_debug_print(0xcc1d0000 | dq01_val);
#endif

        REG32(DC_DPI_CTRL_0) = dc_dpi_ctrl_val; //restore step 2,3
 30069fc:	b9406be0 	ldr	w0, [sp,#104]
 3006a00:	b9000080 	str	w0, [x4]
}
 3006a04:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3006a08:	a94263f7 	ldp	x23, x24, [sp,#32]
 3006a0c:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3006a10:	f94023fe 	ldr	x30, [sp,#64]
 3006a14:	a8cb53f3 	ldp	x19, x20, [sp],#176
 3006a18:	d65f03c0 	ret

CAL_SEG:
        /* set data to DDR */

        if(two_dc==1){
            REG32(dc0_addr_base) = pattern;
 3006a1c:	b940afe1 	ldr	w1, [sp,#172]
            REG32(dc0_addr_base|0x10) = pattern;
            REG32(dc0_addr_base|0x4) = pattern1;
            REG32(dc0_addr_base|0x14) = pattern1;
 3006a20:	52800280 	mov	w0, #0x14                  	// #20

CAL_SEG:
        /* set data to DDR */

        if(two_dc==1){
            REG32(dc0_addr_base) = pattern;
 3006a24:	b94077e2 	ldr	w2, [sp,#116]
 3006a28:	2a0103e1 	mov	w1, w1
 3006a2c:	b9000022 	str	w2, [x1]
            REG32(dc0_addr_base|0x10) = pattern;
 3006a30:	b940afe1 	ldr	w1, [sp,#172]
 3006a34:	b94077e2 	ldr	w2, [sp,#116]
 3006a38:	321c0021 	orr	w1, w1, #0x10
 3006a3c:	b9000022 	str	w2, [x1]
            REG32(dc0_addr_base|0x4) = pattern1;
 3006a40:	b940afe1 	ldr	w1, [sp,#172]
 3006a44:	b9407be2 	ldr	w2, [sp,#120]
 3006a48:	321e0021 	orr	w1, w1, #0x4
 3006a4c:	b9000022 	str	w2, [x1]
            REG32(dc0_addr_base|0x14) = pattern1;
 3006a50:	b940afe2 	ldr	w2, [sp,#172]
 3006a54:	b9407be1 	ldr	w1, [sp,#120]
 3006a58:	2a000040 	orr	w0, w2, w0
 3006a5c:	b9000001 	str	w1, [x0]
            REG32(dc0_addr_base|0x8) = pattern2;
 3006a60:	b940afe0 	ldr	w0, [sp,#172]
 3006a64:	b9407fe1 	ldr	w1, [sp,#124]
 3006a68:	321d0000 	orr	w0, w0, #0x8
 3006a6c:	b9000001 	str	w1, [x0]
            REG32(dc0_addr_base|0x18) = pattern2;
 3006a70:	b940afe0 	ldr	w0, [sp,#172]
 3006a74:	b9407fe1 	ldr	w1, [sp,#124]
 3006a78:	321d0400 	orr	w0, w0, #0x18
 3006a7c:	b9000001 	str	w1, [x0]
            REG32(dc0_addr_base|0xc) = pattern3;
 3006a80:	b940afe0 	ldr	w0, [sp,#172]
 3006a84:	b94083e1 	ldr	w1, [sp,#128]
 3006a88:	321e0400 	orr	w0, w0, #0xc
 3006a8c:	b9000001 	str	w1, [x0]
            REG32(dc0_addr_base|0x1c) = pattern3;
 3006a90:	b940afe0 	ldr	w0, [sp,#172]
 3006a94:	b94083e1 	ldr	w1, [sp,#128]
 3006a98:	321e0800 	orr	w0, w0, #0x1c
 3006a9c:	b9000001 	str	w1, [x0]
 3006aa0:	17ffff12 	b	30066e8 <dcu_calibration_c+0x170>
        }

        /* check calibration result */
        if ((start_result == 0) && (end_result == 0)) {
            // all delay chain failed, use input param instead...(0x00~0x1F)
            start_result = org_startpos;
 3006aa4:	b9408be0 	ldr	w0, [sp,#136]
 3006aa8:	b9006fe0 	str	w0, [sp,#108]
            end_result = org_endpos;
			//all delay chain failed, set output parameter to 0
			*start_pos = 0;
 3006aac:	b90002ff 	str	wzr, [x23]

        /* check calibration result */
        if ((start_result == 0) && (end_result == 0)) {
            // all delay chain failed, use input param instead...(0x00~0x1F)
            start_result = org_startpos;
            end_result = org_endpos;
 3006ab0:	b94087e0 	ldr	w0, [sp,#132]
			//all delay chain failed, set output parameter to 0
			*start_pos = 0;
            *end_pos = 0;
 3006ab4:	b90002df 	str	wzr, [x22]

        /* check calibration result */
        if ((start_result == 0) && (end_result == 0)) {
            // all delay chain failed, use input param instead...(0x00~0x1F)
            start_result = org_startpos;
            end_result = org_endpos;
 3006ab8:	b90073e0 	str	w0, [sp,#112]
			//all delay chain failed, set output parameter to 0
			*start_pos = 0;
            *end_pos = 0;
 3006abc:	17ffffad 	b	3006970 <dcu_calibration_c+0x3f8>

0000000003006ac0 <dcu1_calibration_c>:
 *      end_pos1: initial end position
 * return:
 *      start_pos & end_pos of calibration result
 */
void dcu1_calibration_c(int *start_pos1, int *end_pos1, unsigned int two_dc)
{
 3006ac0:	a9b553f3 	stp	x19, x20, [sp,#-176]!
        volatile int org_endpos1=0,org_startpos1=0;
        volatile unsigned int con_val1=0, con_val2=0, con_val3=0, con_val4=0;
        volatile unsigned int con_val5=0, con_val6=0, con_val7=0, con_val8=0;
        volatile unsigned int dc1_addr_base=0;

        dc1_addr_base = REG32(ISO_MODE_REG(19));//ISO dummy
 3006ac4:	d28fed85 	mov	x5, #0x7f6c                	// #32620
 3006ac8:	f2b30005 	movk	x5, #0x9800, lsl #16
        #define DC1_TEST_E3_ADDR       0x0a00001c

        volatile int i, tmp, dq01_val,dc_dpi_ctrl_val;
        volatile unsigned int start_result, end_result;
        volatile unsigned int pattern, pattern1,pattern2, pattern3;
        volatile int org_endpos1=0,org_startpos1=0;
 3006acc:	b90087ff 	str	wzr, [sp,#132]
        volatile unsigned int con_val5=0, con_val6=0, con_val7=0, con_val8=0;
        volatile unsigned int dc1_addr_base=0;

        dc1_addr_base = REG32(ISO_MODE_REG(19));//ISO dummy

        REG32(DC1_READ_CTRL_1) |= (1 << 10);    // step 1, rd_dly_follow_dq0
 3006ad0:	d29e4a84 	mov	x4, #0xf254                	// #62036
 3006ad4:	f2b30004 	movk	x4, #0x9800, lsl #16
        #define DC1_TEST_E3_ADDR       0x0a00001c

        volatile int i, tmp, dq01_val,dc_dpi_ctrl_val;
        volatile unsigned int start_result, end_result;
        volatile unsigned int pattern, pattern1,pattern2, pattern3;
        volatile int org_endpos1=0,org_startpos1=0;
 3006ad8:	b9008bff 	str	wzr, [sp,#136]
        volatile unsigned int dc1_addr_base=0;

        dc1_addr_base = REG32(ISO_MODE_REG(19));//ISO dummy

        REG32(DC1_READ_CTRL_1) |= (1 << 10);    // step 1, rd_dly_follow_dq0
        dc_dpi_ctrl_val = REG32(DC1_DPI_CTRL_0);
 3006adc:	d29e6303 	mov	x3, #0xf318                	// #62232
 3006ae0:	f2b30003 	movk	x3, #0x9800, lsl #16

        volatile int i, tmp, dq01_val,dc_dpi_ctrl_val;
        volatile unsigned int start_result, end_result;
        volatile unsigned int pattern, pattern1,pattern2, pattern3;
        volatile int org_endpos1=0,org_startpos1=0;
        volatile unsigned int con_val1=0, con_val2=0, con_val3=0, con_val4=0;
 3006ae4:	b9008fff 	str	wzr, [sp,#140]
 *      end_pos1: initial end position
 * return:
 *      start_pos & end_pos of calibration result
 */
void dcu1_calibration_c(int *start_pos1, int *end_pos1, unsigned int two_dc)
{
 3006ae8:	2a0203f3 	mov	w19, w2

        volatile int i, tmp, dq01_val,dc_dpi_ctrl_val;
        volatile unsigned int start_result, end_result;
        volatile unsigned int pattern, pattern1,pattern2, pattern3;
        volatile int org_endpos1=0,org_startpos1=0;
        volatile unsigned int con_val1=0, con_val2=0, con_val3=0, con_val4=0;
 3006aec:	b90093ff 	str	wzr, [sp,#144]
 3006af0:	b90097ff 	str	wzr, [sp,#148]
 3006af4:	b9009bff 	str	wzr, [sp,#152]
        volatile unsigned int con_val5=0, con_val6=0, con_val7=0, con_val8=0;
 3006af8:	b9009fff 	str	wzr, [sp,#156]
 3006afc:	b900a3ff 	str	wzr, [sp,#160]
 3006b00:	b900a7ff 	str	wzr, [sp,#164]
 3006b04:	b900abff 	str	wzr, [sp,#168]
        volatile unsigned int dc1_addr_base=0;
 3006b08:	b900afff 	str	wzr, [sp,#172]
 *      end_pos1: initial end position
 * return:
 *      start_pos & end_pos of calibration result
 */
void dcu1_calibration_c(int *start_pos1, int *end_pos1, unsigned int two_dc)
{
 3006b0c:	a9015bf5 	stp	x21, x22, [sp,#16]
 3006b10:	a90263f7 	stp	x23, x24, [sp,#32]
 3006b14:	f90023fe 	str	x30, [sp,#64]
 3006b18:	aa0003f7 	mov	x23, x0
 3006b1c:	a9036bf9 	stp	x25, x26, [sp,#48]
 3006b20:	aa0103f6 	mov	x22, x1
        volatile int org_endpos1=0,org_startpos1=0;
        volatile unsigned int con_val1=0, con_val2=0, con_val3=0, con_val4=0;
        volatile unsigned int con_val5=0, con_val6=0, con_val7=0, con_val8=0;
        volatile unsigned int dc1_addr_base=0;

        dc1_addr_base = REG32(ISO_MODE_REG(19));//ISO dummy
 3006b24:	b94000a0 	ldr	w0, [x5]
 3006b28:	b900afe0 	str	w0, [sp,#172]

        REG32(DC1_READ_CTRL_1) |= (1 << 10);    // step 1, rd_dly_follow_dq0
 3006b2c:	b9400080 	ldr	w0, [x4]
 3006b30:	32160000 	orr	w0, w0, #0x400
 3006b34:	b9000080 	str	w0, [x4]
        dc_dpi_ctrl_val = REG32(DC1_DPI_CTRL_0);
 3006b38:	b9400060 	ldr	w0, [x3]
 3006b3c:	b9006be0 	str	w0, [sp,#104]
        //step 2, fw_set_mode = 2
        tmp = REG32(DC1_DPI_CTRL_0) & ~0x3;
 3006b40:	b9400060 	ldr	w0, [x3]
 3006b44:	121e7400 	and	w0, w0, #0xfffffffc
 3006b48:	b90063e0 	str	w0, [sp,#96]
        tmp = tmp | 0x2;
 3006b4c:	b94063e0 	ldr	w0, [sp,#96]
 3006b50:	321f0000 	orr	w0, w0, #0x2
 3006b54:	b90063e0 	str	w0, [sp,#96]
        REG32(DC1_DPI_CTRL_0) = tmp;
 3006b58:	b94063e0 	ldr	w0, [sp,#96]
 3006b5c:	b9000060 	str	w0, [x3]
        //step 3, cal_set_mode = 3
        tmp = REG32(DC1_DPI_CTRL_0) & ~0x30;
 3006b60:	b9400060 	ldr	w0, [x3]
 3006b64:	121a7400 	and	w0, w0, #0xffffffcf
 3006b68:	b90063e0 	str	w0, [sp,#96]
        tmp = tmp | 0x30;
 3006b6c:	b94063e0 	ldr	w0, [sp,#96]
 3006b70:	321c0400 	orr	w0, w0, #0x30
 3006b74:	b90063e0 	str	w0, [sp,#96]
        REG32(DC1_DPI_CTRL_0) = tmp;
 3006b78:	b94063e0 	ldr	w0, [sp,#96]
 3006b7c:	b9000060 	str	w0, [x3]

        org_endpos1 = *end_pos1;
 3006b80:	b9400021 	ldr	w1, [x1]
        org_startpos1 = *start_pos1;
 3006b84:	b94002e0 	ldr	w0, [x23]
        //step 3, cal_set_mode = 3
        tmp = REG32(DC1_DPI_CTRL_0) & ~0x30;
        tmp = tmp | 0x30;
        REG32(DC1_DPI_CTRL_0) = tmp;

        org_endpos1 = *end_pos1;
 3006b88:	b90087e1 	str	w1, [sp,#132]
        org_startpos1 = *start_pos1;
 3006b8c:	b9008be0 	str	w0, [sp,#136]
        //1195, REG32(DC_MISC) |= (1 << 24);    // tap_sel = 1
        //1195, REG32(DC_MISC) |= (1 << 27);    // tap_2group = 1
        sync();
 3006b90:	97ffe5df 	bl	300030c <sync>
        pattern = 0x5a5aa5a5;
 3006b94:	5294b4a1 	mov	w1, #0xa5a5                	// #42405
 3006b98:	72ab4b41 	movk	w1, #0x5a5a, lsl #16
 3006b9c:	b90077e1 	str	w1, [sp,#116]
        pattern1 = 0xa5a55a5a;
 3006ba0:	528b4b40 	mov	w0, #0x5a5a                	// #23130
 3006ba4:	72b4b4a0 	movk	w0, #0xa5a5, lsl #16
 3006ba8:	b9007be0 	str	w0, [sp,#120]
        pattern2 = 0x5a5aa5a5;
 3006bac:	b9007fe1 	str	w1, [sp,#124]
        pattern3 = 0xa5a55a5a;

CAL_SEG:
        /* set data to DDR */
        if(two_dc==1){
 3006bb0:	7100067f 	cmp	w19, #0x1
        //1195, REG32(DC_MISC) |= (1 << 27);    // tap_2group = 1
        sync();
        pattern = 0x5a5aa5a5;
        pattern1 = 0xa5a55a5a;
        pattern2 = 0x5a5aa5a5;
        pattern3 = 0xa5a55a5a;
 3006bb4:	b90083e0 	str	w0, [sp,#128]

CAL_SEG:
        /* set data to DDR */
        if(two_dc==1){
 3006bb8:	54001d60 	b.eq	3006f64 <dcu1_calibration_c+0x4a4>
            REG32(dc1_addr_base|0x8) = pattern2;
            REG32(dc1_addr_base|0x18) = pattern2;
            REG32(dc1_addr_base|0xc) = pattern3;
            REG32(dc1_addr_base|0x1c) = pattern3;
        }else{
            REG32(DC1_TEST_S_ADDR) = pattern;
 3006bbc:	d2a14000 	mov	x0, #0xa000000             	// #167772160
 3006bc0:	b94077e1 	ldr	w1, [sp,#116]
            REG32(DC1_TEST_E_ADDR) = pattern;
 3006bc4:	d2800206 	mov	x6, #0x10                  	// #16
 3006bc8:	f2a14006 	movk	x6, #0xa00, lsl #16
            REG32(DC1_TEST_S1_ADDR) = pattern1;
 3006bcc:	d2800085 	mov	x5, #0x4                   	// #4
 3006bd0:	f2a14005 	movk	x5, #0xa00, lsl #16
            REG32(dc1_addr_base|0x8) = pattern2;
            REG32(dc1_addr_base|0x18) = pattern2;
            REG32(dc1_addr_base|0xc) = pattern3;
            REG32(dc1_addr_base|0x1c) = pattern3;
        }else{
            REG32(DC1_TEST_S_ADDR) = pattern;
 3006bd4:	b9000001 	str	w1, [x0]
            REG32(DC1_TEST_E_ADDR) = pattern;
            REG32(DC1_TEST_S1_ADDR) = pattern1;
            REG32(DC1_TEST_E1_ADDR) = pattern1;
 3006bd8:	d2800284 	mov	x4, #0x14                  	// #20
 3006bdc:	f2a14004 	movk	x4, #0xa00, lsl #16
            REG32(dc1_addr_base|0x18) = pattern2;
            REG32(dc1_addr_base|0xc) = pattern3;
            REG32(dc1_addr_base|0x1c) = pattern3;
        }else{
            REG32(DC1_TEST_S_ADDR) = pattern;
            REG32(DC1_TEST_E_ADDR) = pattern;
 3006be0:	b94077e7 	ldr	w7, [sp,#116]
            REG32(DC1_TEST_S1_ADDR) = pattern1;
            REG32(DC1_TEST_E1_ADDR) = pattern1;
            REG32(DC1_TEST_S2_ADDR) = pattern2;
 3006be4:	d2800103 	mov	x3, #0x8                   	// #8
 3006be8:	f2a14003 	movk	x3, #0xa00, lsl #16
            REG32(dc1_addr_base|0x18) = pattern2;
            REG32(dc1_addr_base|0xc) = pattern3;
            REG32(dc1_addr_base|0x1c) = pattern3;
        }else{
            REG32(DC1_TEST_S_ADDR) = pattern;
            REG32(DC1_TEST_E_ADDR) = pattern;
 3006bec:	b90000c7 	str	w7, [x6]
            REG32(DC1_TEST_S1_ADDR) = pattern1;
            REG32(DC1_TEST_E1_ADDR) = pattern1;
            REG32(DC1_TEST_S2_ADDR) = pattern2;
            REG32(DC1_TEST_E2_ADDR) = pattern2;
 3006bf0:	d2800302 	mov	x2, #0x18                  	// #24
 3006bf4:	f2a14002 	movk	x2, #0xa00, lsl #16
            REG32(dc1_addr_base|0xc) = pattern3;
            REG32(dc1_addr_base|0x1c) = pattern3;
        }else{
            REG32(DC1_TEST_S_ADDR) = pattern;
            REG32(DC1_TEST_E_ADDR) = pattern;
            REG32(DC1_TEST_S1_ADDR) = pattern1;
 3006bf8:	b9407be6 	ldr	w6, [sp,#120]
            REG32(DC1_TEST_E1_ADDR) = pattern1;
            REG32(DC1_TEST_S2_ADDR) = pattern2;
            REG32(DC1_TEST_E2_ADDR) = pattern2;
            REG32(DC1_TEST_S3_ADDR) = pattern3;
 3006bfc:	d2800181 	mov	x1, #0xc                   	// #12
 3006c00:	f2a14001 	movk	x1, #0xa00, lsl #16
            REG32(dc1_addr_base|0xc) = pattern3;
            REG32(dc1_addr_base|0x1c) = pattern3;
        }else{
            REG32(DC1_TEST_S_ADDR) = pattern;
            REG32(DC1_TEST_E_ADDR) = pattern;
            REG32(DC1_TEST_S1_ADDR) = pattern1;
 3006c04:	b90000a6 	str	w6, [x5]
            REG32(DC1_TEST_E1_ADDR) = pattern1;
 3006c08:	b9407be5 	ldr	w5, [sp,#120]
 3006c0c:	b9000085 	str	w5, [x4]
            REG32(DC1_TEST_S2_ADDR) = pattern2;
 3006c10:	b9407fe4 	ldr	w4, [sp,#124]
 3006c14:	b9000064 	str	w4, [x3]
            REG32(DC1_TEST_E2_ADDR) = pattern2;
 3006c18:	b9407fe3 	ldr	w3, [sp,#124]
 3006c1c:	b9000043 	str	w3, [x2]
            REG32(DC1_TEST_S3_ADDR) = pattern3;
 3006c20:	b94083e2 	ldr	w2, [sp,#128]
 3006c24:	b9000022 	str	w2, [x1]
            REG32(DC1_TEST_E3_ADDR) = pattern3;
 3006c28:	b94083e1 	ldr	w1, [sp,#128]
 3006c2c:	b9001c01 	str	w1, [x0,#28]
        }
        start_result = end_result = 0;
 3006c30:	b90073ff 	str	wzr, [sp,#112]
 3006c34:	b9006fff 	str	wzr, [sp,#108]
        sync();
 3006c38:	97ffe5b5 	bl	300030c <sync>
        for (i = org_endpos1; i >= org_startpos1; i--) {
 3006c3c:	b94087e0 	ldr	w0, [sp,#132]
 3006c40:	b9005fe0 	str	w0, [sp,#92]
 3006c44:	b9405fe0 	ldr	w0, [sp,#92]
 3006c48:	b9408be1 	ldr	w1, [sp,#136]
 3006c4c:	6b00003f 	cmp	w1, w0
 3006c50:	5400124c 	b.gt	3006e98 <dcu1_calibration_c+0x3d8>
                tmp = tmp | (i << 6) | i;
                REG32(DC_DQ16_17_DLYN) = tmp;
                REG32(DC_MISC) |= (1 << 25);    // fw_set = 1
                #else

                tmp = REG32(DC1_DQS_IN_DLY_0) & ~0x1f;
 3006c54:	d29e519a 	mov	x26, #0xf28c                	// #62092
 3006c58:	f2b3001a 	movk	x26, #0x9800, lsl #16
                tmp = tmp | i;
                REG32(DC1_DQS_IN_DLY_0) = tmp;
                tmp = REG32(DC1_DQS_IN_DLY_2) & ~0x1f;
 3006c5c:	d29e5599 	mov	x25, #0xf2ac                	// #62124
 3006c60:	f2b30019 	movk	x25, #0x9800, lsl #16
                tmp = tmp | i;
                REG32(DC1_DQS_IN_DLY_2) = tmp;
                REG32(DC1_DPI_CTRL_1) |= 0xc;    // set write_en_1 & fw_set_rd_dly
 3006c64:	d29e6398 	mov	x24, #0xf31c                	// #62236
 3006c68:	f2b30018 	movk	x24, #0x9800, lsl #16
                    con_val6 = REG32(dc1_addr_base|0x14);
                    con_val7 = REG32(dc1_addr_base|0x18);
                    con_val8 = REG32(dc1_addr_base|0x1c);
                }else{
                    con_val1 = REG32(DC1_TEST_S_ADDR);
                    con_val2 = REG32(DC1_TEST_S1_ADDR);
 3006c6c:	d2800095 	mov	x21, #0x4                   	// #4
 3006c70:	f2a14015 	movk	x21, #0xa00, lsl #16
                    con_val3 = REG32(DC1_TEST_S2_ADDR);
 3006c74:	d2800114 	mov	x20, #0x8                   	// #8
 3006c78:	f2a14014 	movk	x20, #0xa00, lsl #16
 3006c7c:	14000027 	b	3006d18 <dcu1_calibration_c+0x258>
                    con_val5 = REG32(dc1_addr_base|0x10);
                    con_val6 = REG32(dc1_addr_base|0x14);
                    con_val7 = REG32(dc1_addr_base|0x18);
                    con_val8 = REG32(dc1_addr_base|0x1c);
                }else{
                    con_val1 = REG32(DC1_TEST_S_ADDR);
 3006c80:	d2a14005 	mov	x5, #0xa000000             	// #167772160
                    con_val2 = REG32(DC1_TEST_S1_ADDR);
                    con_val3 = REG32(DC1_TEST_S2_ADDR);
                    con_val4 = REG32(DC1_TEST_S3_ADDR);
 3006c84:	d2800184 	mov	x4, #0xc                   	// #12
 3006c88:	f2a14004 	movk	x4, #0xa00, lsl #16
                    con_val5 = REG32(DC1_TEST_E_ADDR);
 3006c8c:	d2800203 	mov	x3, #0x10                  	// #16
 3006c90:	f2a14003 	movk	x3, #0xa00, lsl #16
                    con_val5 = REG32(dc1_addr_base|0x10);
                    con_val6 = REG32(dc1_addr_base|0x14);
                    con_val7 = REG32(dc1_addr_base|0x18);
                    con_val8 = REG32(dc1_addr_base|0x1c);
                }else{
                    con_val1 = REG32(DC1_TEST_S_ADDR);
 3006c94:	b94000a5 	ldr	w5, [x5]
                    con_val2 = REG32(DC1_TEST_S1_ADDR);
                    con_val3 = REG32(DC1_TEST_S2_ADDR);
                    con_val4 = REG32(DC1_TEST_S3_ADDR);
                    con_val5 = REG32(DC1_TEST_E_ADDR);
                    con_val6 = REG32(DC1_TEST_E1_ADDR);
 3006c98:	d2800282 	mov	x2, #0x14                  	// #20
 3006c9c:	f2a14002 	movk	x2, #0xa00, lsl #16
                    con_val5 = REG32(dc1_addr_base|0x10);
                    con_val6 = REG32(dc1_addr_base|0x14);
                    con_val7 = REG32(dc1_addr_base|0x18);
                    con_val8 = REG32(dc1_addr_base|0x1c);
                }else{
                    con_val1 = REG32(DC1_TEST_S_ADDR);
 3006ca0:	b9008fe5 	str	w5, [sp,#140]
                    con_val2 = REG32(DC1_TEST_S1_ADDR);
                    con_val3 = REG32(DC1_TEST_S2_ADDR);
                    con_val4 = REG32(DC1_TEST_S3_ADDR);
                    con_val5 = REG32(DC1_TEST_E_ADDR);
                    con_val6 = REG32(DC1_TEST_E1_ADDR);
                    con_val7 = REG32(DC1_TEST_E2_ADDR);
 3006ca4:	d2800301 	mov	x1, #0x18                  	// #24
 3006ca8:	f2a14001 	movk	x1, #0xa00, lsl #16
                    con_val6 = REG32(dc1_addr_base|0x14);
                    con_val7 = REG32(dc1_addr_base|0x18);
                    con_val8 = REG32(dc1_addr_base|0x1c);
                }else{
                    con_val1 = REG32(DC1_TEST_S_ADDR);
                    con_val2 = REG32(DC1_TEST_S1_ADDR);
 3006cac:	b94002a5 	ldr	w5, [x21]
                    con_val3 = REG32(DC1_TEST_S2_ADDR);
                    con_val4 = REG32(DC1_TEST_S3_ADDR);
                    con_val5 = REG32(DC1_TEST_E_ADDR);
                    con_val6 = REG32(DC1_TEST_E1_ADDR);
                    con_val7 = REG32(DC1_TEST_E2_ADDR);
                    con_val8 = REG32(DC1_TEST_E3_ADDR);
 3006cb0:	d2800380 	mov	x0, #0x1c                  	// #28
 3006cb4:	f2a14000 	movk	x0, #0xa00, lsl #16
                    con_val6 = REG32(dc1_addr_base|0x14);
                    con_val7 = REG32(dc1_addr_base|0x18);
                    con_val8 = REG32(dc1_addr_base|0x1c);
                }else{
                    con_val1 = REG32(DC1_TEST_S_ADDR);
                    con_val2 = REG32(DC1_TEST_S1_ADDR);
 3006cb8:	b90093e5 	str	w5, [sp,#144]
                    con_val3 = REG32(DC1_TEST_S2_ADDR);
 3006cbc:	b9400285 	ldr	w5, [x20]
 3006cc0:	b90097e5 	str	w5, [sp,#148]
                    con_val4 = REG32(DC1_TEST_S3_ADDR);
 3006cc4:	b9400084 	ldr	w4, [x4]
 3006cc8:	b9009be4 	str	w4, [sp,#152]
                    con_val5 = REG32(DC1_TEST_E_ADDR);
 3006ccc:	b9400063 	ldr	w3, [x3]
 3006cd0:	b9009fe3 	str	w3, [sp,#156]
                    con_val6 = REG32(DC1_TEST_E1_ADDR);
 3006cd4:	b9400042 	ldr	w2, [x2]
 3006cd8:	b900a3e2 	str	w2, [sp,#160]
                    con_val7 = REG32(DC1_TEST_E2_ADDR);
 3006cdc:	b9400021 	ldr	w1, [x1]
 3006ce0:	b900a7e1 	str	w1, [sp,#164]
                    con_val8 = REG32(DC1_TEST_E3_ADDR);
 3006ce4:	b9400000 	ldr	w0, [x0]
 3006ce8:	b900abe0 	str	w0, [sp,#168]
                }

                // check read from DDR is correct

                if ((con_val1 == pattern) && (con_val2 == pattern1)&& (con_val3 == pattern2)&& (con_val4 == pattern3)&&(con_val5 == pattern) && (con_val6 == pattern1)&& (con_val7 == pattern2)&& (con_val8 == pattern3)){
 3006cec:	b9408fe1 	ldr	w1, [sp,#140]
 3006cf0:	b94077e0 	ldr	w0, [sp,#116]
 3006cf4:	6b00003f 	cmp	w1, w0
 3006cf8:	540008a0 	b.eq	3006e0c <dcu1_calibration_c+0x34c>
            REG32(DC1_TEST_S3_ADDR) = pattern3;
            REG32(DC1_TEST_E3_ADDR) = pattern3;
        }
        start_result = end_result = 0;
        sync();
        for (i = org_endpos1; i >= org_startpos1; i--) {
 3006cfc:	b9405fe0 	ldr	w0, [sp,#92]
 3006d00:	51000400 	sub	w0, w0, #0x1
 3006d04:	b9005fe0 	str	w0, [sp,#92]
 3006d08:	b9405fe1 	ldr	w1, [sp,#92]
 3006d0c:	b9408be0 	ldr	w0, [sp,#136]
 3006d10:	6b00003f 	cmp	w1, w0
 3006d14:	54000c2b 	b.lt	3006e98 <dcu1_calibration_c+0x3d8>
                tmp = tmp | (i << 6) | i;
                REG32(DC_DQ16_17_DLYN) = tmp;
                REG32(DC_MISC) |= (1 << 25);    // fw_set = 1
                #else

                tmp = REG32(DC1_DQS_IN_DLY_0) & ~0x1f;
 3006d18:	b9400340 	ldr	w0, [x26]
 3006d1c:	121b6800 	and	w0, w0, #0xffffffe0
 3006d20:	b90063e0 	str	w0, [sp,#96]
                tmp = tmp | i;
 3006d24:	b94063e0 	ldr	w0, [sp,#96]
 3006d28:	b9405fe1 	ldr	w1, [sp,#92]
 3006d2c:	2a000020 	orr	w0, w1, w0
 3006d30:	b90063e0 	str	w0, [sp,#96]
                REG32(DC1_DQS_IN_DLY_0) = tmp;
 3006d34:	b94063e0 	ldr	w0, [sp,#96]
 3006d38:	b9000340 	str	w0, [x26]
                tmp = REG32(DC1_DQS_IN_DLY_2) & ~0x1f;
 3006d3c:	b9400320 	ldr	w0, [x25]
 3006d40:	121b6800 	and	w0, w0, #0xffffffe0
 3006d44:	b90063e0 	str	w0, [sp,#96]
                tmp = tmp | i;
 3006d48:	b94063e0 	ldr	w0, [sp,#96]
 3006d4c:	b9405fe1 	ldr	w1, [sp,#92]
 3006d50:	2a000020 	orr	w0, w1, w0
 3006d54:	b90063e0 	str	w0, [sp,#96]
                REG32(DC1_DQS_IN_DLY_2) = tmp;
 3006d58:	b94063e0 	ldr	w0, [sp,#96]
 3006d5c:	b9000320 	str	w0, [x25]
                REG32(DC1_DPI_CTRL_1) |= 0xc;    // set write_en_1 & fw_set_rd_dly
 3006d60:	b9400300 	ldr	w0, [x24]
 3006d64:	321e0400 	orr	w0, w0, #0xc
 3006d68:	b9000300 	str	w0, [x24]
                #endif
                sync();
 3006d6c:	97ffe568 	bl	300030c <sync>
#ifdef ENV_SIMULATION
        sim_debug_print(0xdcca0000 | i);
#endif
                if(two_dc==1){
 3006d70:	7100067f 	cmp	w19, #0x1
 3006d74:	54fff861 	b.ne	3006c80 <dcu1_calibration_c+0x1c0>
                    con_val1 = REG32(dc1_addr_base);
 3006d78:	b940afe1 	ldr	w1, [sp,#172]
                    con_val2 = REG32(dc1_addr_base|0x4);
                    con_val3 = REG32(dc1_addr_base|0x8);
                    con_val4 = REG32(dc1_addr_base|0xc);
                    con_val5 = REG32(dc1_addr_base|0x10);
                    con_val6 = REG32(dc1_addr_base|0x14);
 3006d7c:	52800280 	mov	w0, #0x14                  	// #20
                sync();
#ifdef ENV_SIMULATION
        sim_debug_print(0xdcca0000 | i);
#endif
                if(two_dc==1){
                    con_val1 = REG32(dc1_addr_base);
 3006d80:	2a0103e1 	mov	w1, w1
 3006d84:	b9400021 	ldr	w1, [x1]
 3006d88:	b9008fe1 	str	w1, [sp,#140]
                    con_val2 = REG32(dc1_addr_base|0x4);
 3006d8c:	b940afe1 	ldr	w1, [sp,#172]
 3006d90:	321e0021 	orr	w1, w1, #0x4
 3006d94:	b9400021 	ldr	w1, [x1]
 3006d98:	b90093e1 	str	w1, [sp,#144]
                    con_val3 = REG32(dc1_addr_base|0x8);
 3006d9c:	b940afe1 	ldr	w1, [sp,#172]
 3006da0:	321d0021 	orr	w1, w1, #0x8
 3006da4:	b9400021 	ldr	w1, [x1]
 3006da8:	b90097e1 	str	w1, [sp,#148]
                    con_val4 = REG32(dc1_addr_base|0xc);
 3006dac:	b940afe1 	ldr	w1, [sp,#172]
 3006db0:	321e0421 	orr	w1, w1, #0xc
 3006db4:	b9400021 	ldr	w1, [x1]
 3006db8:	b9009be1 	str	w1, [sp,#152]
                    con_val5 = REG32(dc1_addr_base|0x10);
 3006dbc:	b940afe1 	ldr	w1, [sp,#172]
 3006dc0:	321c0021 	orr	w1, w1, #0x10
 3006dc4:	b9400021 	ldr	w1, [x1]
 3006dc8:	b9009fe1 	str	w1, [sp,#156]
                    con_val6 = REG32(dc1_addr_base|0x14);
 3006dcc:	b940afe1 	ldr	w1, [sp,#172]
 3006dd0:	2a000020 	orr	w0, w1, w0
 3006dd4:	b9400000 	ldr	w0, [x0]
 3006dd8:	b900a3e0 	str	w0, [sp,#160]
                    con_val7 = REG32(dc1_addr_base|0x18);
 3006ddc:	b940afe0 	ldr	w0, [sp,#172]
 3006de0:	321d0400 	orr	w0, w0, #0x18
 3006de4:	b9400000 	ldr	w0, [x0]
 3006de8:	b900a7e0 	str	w0, [sp,#164]
                    con_val8 = REG32(dc1_addr_base|0x1c);
 3006dec:	b940afe0 	ldr	w0, [sp,#172]
 3006df0:	321e0800 	orr	w0, w0, #0x1c
 3006df4:	b9400000 	ldr	w0, [x0]
 3006df8:	b900abe0 	str	w0, [sp,#168]
                    con_val8 = REG32(DC1_TEST_E3_ADDR);
                }

                // check read from DDR is correct

                if ((con_val1 == pattern) && (con_val2 == pattern1)&& (con_val3 == pattern2)&& (con_val4 == pattern3)&&(con_val5 == pattern) && (con_val6 == pattern1)&& (con_val7 == pattern2)&& (con_val8 == pattern3)){
 3006dfc:	b9408fe1 	ldr	w1, [sp,#140]
 3006e00:	b94077e0 	ldr	w0, [sp,#116]
 3006e04:	6b00003f 	cmp	w1, w0
 3006e08:	54fff7a1 	b.ne	3006cfc <dcu1_calibration_c+0x23c>
 3006e0c:	b94093e1 	ldr	w1, [sp,#144]
 3006e10:	b9407be0 	ldr	w0, [sp,#120]
 3006e14:	6b00003f 	cmp	w1, w0
 3006e18:	54fff721 	b.ne	3006cfc <dcu1_calibration_c+0x23c>
 3006e1c:	b94097e1 	ldr	w1, [sp,#148]
 3006e20:	b9407fe0 	ldr	w0, [sp,#124]
 3006e24:	6b00003f 	cmp	w1, w0
 3006e28:	54fff6a1 	b.ne	3006cfc <dcu1_calibration_c+0x23c>
 3006e2c:	b9409be1 	ldr	w1, [sp,#152]
 3006e30:	b94083e0 	ldr	w0, [sp,#128]
 3006e34:	6b00003f 	cmp	w1, w0
 3006e38:	54fff621 	b.ne	3006cfc <dcu1_calibration_c+0x23c>
 3006e3c:	b9409fe1 	ldr	w1, [sp,#156]
 3006e40:	b94077e0 	ldr	w0, [sp,#116]
 3006e44:	6b00003f 	cmp	w1, w0
 3006e48:	54fff5a1 	b.ne	3006cfc <dcu1_calibration_c+0x23c>
 3006e4c:	b940a3e1 	ldr	w1, [sp,#160]
 3006e50:	b9407be0 	ldr	w0, [sp,#120]
 3006e54:	6b00003f 	cmp	w1, w0
 3006e58:	54fff521 	b.ne	3006cfc <dcu1_calibration_c+0x23c>
 3006e5c:	b940a7e1 	ldr	w1, [sp,#164]
 3006e60:	b9407fe0 	ldr	w0, [sp,#124]
 3006e64:	6b00003f 	cmp	w1, w0
 3006e68:	54fff4a1 	b.ne	3006cfc <dcu1_calibration_c+0x23c>
 3006e6c:	b940abe1 	ldr	w1, [sp,#168]
 3006e70:	b94083e0 	ldr	w0, [sp,#128]
 3006e74:	6b00003f 	cmp	w1, w0
 3006e78:	54fff421 	b.ne	3006cfc <dcu1_calibration_c+0x23c>
                    start_result = i;       // always update start_result
 3006e7c:	b9405fe0 	ldr	w0, [sp,#92]
 3006e80:	b9006fe0 	str	w0, [sp,#108]
#ifdef ENV_SIMULATION
    				sim_debug_print(0xca110000 | start_result);
#endif
                    if (end_result == 0)
 3006e84:	b94073e0 	ldr	w0, [sp,#112]
 3006e88:	35fff3a0 	cbnz	w0, 3006cfc <dcu1_calibration_c+0x23c>
                    {
                    	end_result = i; // update end_result only once
 3006e8c:	b9405fe0 	ldr	w0, [sp,#92]
 3006e90:	b90073e0 	str	w0, [sp,#112]
 3006e94:	17ffff9a 	b	3006cfc <dcu1_calibration_c+0x23c>
        		sim_debug_print(0xdccb0000 | i);
#endif
        }

        /* check calibration result */
        if ((start_result == 0) && (end_result == 0)) {
 3006e98:	b9406fe0 	ldr	w0, [sp,#108]
 3006e9c:	35000060 	cbnz	w0, 3006ea8 <dcu1_calibration_c+0x3e8>
 3006ea0:	b94073e0 	ldr	w0, [sp,#112]
 3006ea4:	34000a40 	cbz	w0, 3006fec <dcu1_calibration_c+0x52c>
	        sim_debug_print(0xdd1c0000 | start_result);
	        sim_debug_print(0xdd1c0000 | end_result);
#endif
        }
        else {
            *start_pos1 = start_result;
 3006ea8:	b9406fe1 	ldr	w1, [sp,#108]
 3006eac:	b90002e1 	str	w1, [x23]
            *end_pos1 = end_result;
 3006eb0:	b94073e0 	ldr	w0, [sp,#112]
 3006eb4:	b90002c0 	str	w0, [x22]
#endif
        }

        /* set final position */

        dq01_val = (start_result + end_result) / 2;
 3006eb8:	b9406fe0 	ldr	w0, [sp,#108]

        tmp = 0;
        tmp = REG32(DC1_DQS_IN_DLY_0) & ~0x1f;
 3006ebc:	d29e5183 	mov	x3, #0xf28c                	// #62092
 3006ec0:	f2b30003 	movk	x3, #0x9800, lsl #16
#endif
        }

        /* set final position */

        dq01_val = (start_result + end_result) / 2;
 3006ec4:	b94073e1 	ldr	w1, [sp,#112]

        tmp = 0;
        tmp = REG32(DC1_DQS_IN_DLY_0) & ~0x1f;
        tmp = tmp | dq01_val;
        REG32(DC1_DQS_IN_DLY_0) = tmp;
        tmp = REG32(DC1_DQS_IN_DLY_2) & ~0x1f;
 3006ec8:	d29e5582 	mov	x2, #0xf2ac                	// #62124
 3006ecc:	f2b30002 	movk	x2, #0x9800, lsl #16
#endif
        }

        /* set final position */

        dq01_val = (start_result + end_result) / 2;
 3006ed0:	0b000020 	add	w0, w1, w0
        tmp = tmp | dq01_val;
        REG32(DC1_DQS_IN_DLY_0) = tmp;
        tmp = REG32(DC1_DQS_IN_DLY_2) & ~0x1f;
        tmp = tmp | dq01_val;
        REG32(DC1_DQS_IN_DLY_2) = tmp;
        REG32(DC1_DPI_CTRL_1) |= 0xc;    // set write_en_1 & fw_set_rd_dly
 3006ed4:	d29e6381 	mov	x1, #0xf31c                	// #62236
 3006ed8:	f2b30001 	movk	x1, #0x9800, lsl #16
#endif
        }

        /* set final position */

        dq01_val = (start_result + end_result) / 2;
 3006edc:	53017c00 	lsr	w0, w0, #1
 3006ee0:	b90067e0 	str	w0, [sp,#100]

        tmp = 0;
 3006ee4:	b90063ff 	str	wzr, [sp,#96]
        REG32(DC1_DPI_CTRL_1) |= 0xc;    // set write_en_1 & fw_set_rd_dly
#ifdef ENV_SIMULATION
		sim_debug_print(0xcc1d0000 | dq01_val);
#endif

        REG32(DC1_DPI_CTRL_0) = dc_dpi_ctrl_val; //restore step 2,3
 3006ee8:	d29e6304 	mov	x4, #0xf318                	// #62232
 3006eec:	f2b30004 	movk	x4, #0x9800, lsl #16
        /* set final position */

        dq01_val = (start_result + end_result) / 2;

        tmp = 0;
        tmp = REG32(DC1_DQS_IN_DLY_0) & ~0x1f;
 3006ef0:	b9400060 	ldr	w0, [x3]
 3006ef4:	121b6800 	and	w0, w0, #0xffffffe0
 3006ef8:	b90063e0 	str	w0, [sp,#96]
        tmp = tmp | dq01_val;
 3006efc:	b94063e0 	ldr	w0, [sp,#96]
 3006f00:	b94067e5 	ldr	w5, [sp,#100]
 3006f04:	2a0000a0 	orr	w0, w5, w0
 3006f08:	b90063e0 	str	w0, [sp,#96]
        REG32(DC1_DQS_IN_DLY_0) = tmp;
 3006f0c:	b94063e0 	ldr	w0, [sp,#96]
 3006f10:	b9000060 	str	w0, [x3]
        tmp = REG32(DC1_DQS_IN_DLY_2) & ~0x1f;
 3006f14:	b9400040 	ldr	w0, [x2]
 3006f18:	121b6800 	and	w0, w0, #0xffffffe0
 3006f1c:	b90063e0 	str	w0, [sp,#96]
        tmp = tmp | dq01_val;
 3006f20:	b94063e0 	ldr	w0, [sp,#96]
 3006f24:	b94067e3 	ldr	w3, [sp,#100]
 3006f28:	2a000060 	orr	w0, w3, w0
 3006f2c:	b90063e0 	str	w0, [sp,#96]
        REG32(DC1_DQS_IN_DLY_2) = tmp;
 3006f30:	b94063e0 	ldr	w0, [sp,#96]
 3006f34:	b9000040 	str	w0, [x2]
        REG32(DC1_DPI_CTRL_1) |= 0xc;    // set write_en_1 & fw_set_rd_dly
 3006f38:	b9400020 	ldr	w0, [x1]
 3006f3c:	321e0400 	orr	w0, w0, #0xc
 3006f40:	b9000020 	str	w0, [x1]
#ifdef ENV_SIMULATION
		sim_debug_print(0xcc1d0000 | dq01_val);
#endif

        REG32(DC1_DPI_CTRL_0) = dc_dpi_ctrl_val; //restore step 2,3
 3006f44:	b9406be0 	ldr	w0, [sp,#104]
 3006f48:	b9000080 	str	w0, [x4]
}
 3006f4c:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3006f50:	a94263f7 	ldp	x23, x24, [sp,#32]
 3006f54:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3006f58:	f94023fe 	ldr	x30, [sp,#64]
 3006f5c:	a8cb53f3 	ldp	x19, x20, [sp],#176
 3006f60:	d65f03c0 	ret
        pattern3 = 0xa5a55a5a;

CAL_SEG:
        /* set data to DDR */
        if(two_dc==1){
            REG32(dc1_addr_base) = pattern;
 3006f64:	b940afe1 	ldr	w1, [sp,#172]
            REG32(dc1_addr_base|0x10) = pattern;
            REG32(dc1_addr_base|0x4) = pattern1;
            REG32(dc1_addr_base|0x14) = pattern1;
 3006f68:	52800280 	mov	w0, #0x14                  	// #20
        pattern3 = 0xa5a55a5a;

CAL_SEG:
        /* set data to DDR */
        if(two_dc==1){
            REG32(dc1_addr_base) = pattern;
 3006f6c:	b94077e2 	ldr	w2, [sp,#116]
 3006f70:	2a0103e1 	mov	w1, w1
 3006f74:	b9000022 	str	w2, [x1]
            REG32(dc1_addr_base|0x10) = pattern;
 3006f78:	b940afe1 	ldr	w1, [sp,#172]
 3006f7c:	b94077e2 	ldr	w2, [sp,#116]
 3006f80:	321c0021 	orr	w1, w1, #0x10
 3006f84:	b9000022 	str	w2, [x1]
            REG32(dc1_addr_base|0x4) = pattern1;
 3006f88:	b940afe1 	ldr	w1, [sp,#172]
 3006f8c:	b9407be2 	ldr	w2, [sp,#120]
 3006f90:	321e0021 	orr	w1, w1, #0x4
 3006f94:	b9000022 	str	w2, [x1]
            REG32(dc1_addr_base|0x14) = pattern1;
 3006f98:	b940afe2 	ldr	w2, [sp,#172]
 3006f9c:	b9407be1 	ldr	w1, [sp,#120]
 3006fa0:	2a000040 	orr	w0, w2, w0
 3006fa4:	b9000001 	str	w1, [x0]
            REG32(dc1_addr_base|0x8) = pattern2;
 3006fa8:	b940afe0 	ldr	w0, [sp,#172]
 3006fac:	b9407fe1 	ldr	w1, [sp,#124]
 3006fb0:	321d0000 	orr	w0, w0, #0x8
 3006fb4:	b9000001 	str	w1, [x0]
            REG32(dc1_addr_base|0x18) = pattern2;
 3006fb8:	b940afe0 	ldr	w0, [sp,#172]
 3006fbc:	b9407fe1 	ldr	w1, [sp,#124]
 3006fc0:	321d0400 	orr	w0, w0, #0x18
 3006fc4:	b9000001 	str	w1, [x0]
            REG32(dc1_addr_base|0xc) = pattern3;
 3006fc8:	b940afe0 	ldr	w0, [sp,#172]
 3006fcc:	b94083e1 	ldr	w1, [sp,#128]
 3006fd0:	321e0400 	orr	w0, w0, #0xc
 3006fd4:	b9000001 	str	w1, [x0]
            REG32(dc1_addr_base|0x1c) = pattern3;
 3006fd8:	b940afe0 	ldr	w0, [sp,#172]
 3006fdc:	b94083e1 	ldr	w1, [sp,#128]
 3006fe0:	321e0800 	orr	w0, w0, #0x1c
 3006fe4:	b9000001 	str	w1, [x0]
 3006fe8:	17ffff12 	b	3006c30 <dcu1_calibration_c+0x170>
        }

        /* check calibration result */
        if ((start_result == 0) && (end_result == 0)) {
            // all delay chain failed, use input param instead... (0x00~0x1F)
            start_result = org_startpos1;
 3006fec:	b9408be0 	ldr	w0, [sp,#136]
 3006ff0:	b9006fe0 	str	w0, [sp,#108]
            end_result = org_endpos1;
			//all delay chain failed, set output parameter to 0
			*start_pos1 = 0;
 3006ff4:	b90002ff 	str	wzr, [x23]

        /* check calibration result */
        if ((start_result == 0) && (end_result == 0)) {
            // all delay chain failed, use input param instead... (0x00~0x1F)
            start_result = org_startpos1;
            end_result = org_endpos1;
 3006ff8:	b94087e0 	ldr	w0, [sp,#132]
			//all delay chain failed, set output parameter to 0
			*start_pos1 = 0;
            *end_pos1 = 0;
 3006ffc:	b90002df 	str	wzr, [x22]

        /* check calibration result */
        if ((start_result == 0) && (end_result == 0)) {
            // all delay chain failed, use input param instead... (0x00~0x1F)
            start_result = org_startpos1;
            end_result = org_endpos1;
 3007000:	b90073e0 	str	w0, [sp,#112]
			//all delay chain failed, set output parameter to 0
			*start_pos1 = 0;
            *end_pos1 = 0;
 3007004:	17ffffad 	b	3006eb8 <dcu1_calibration_c+0x3f8>

0000000003007008 <enable_acpu_clock>:

void enable_acpu_clock(UINT32 bSet)
{
    UINT32 ae_rst_val=0, misc_rst_val=0;

    ae_rst_val = (REG32(SYS_SOFT_RESET1) >> 28) & 0x1;
 3007008:	d2b30002 	mov	x2, #0x98000000            	// #2550136832
 300700c:	b9400043 	ldr	w3, [x2]
    misc_rst_val = REG32(SYS_SOFT_RESET1) & 0x1;
 3007010:	b9400041 	ldr	w1, [x2]
 3007014:	12000021 	and	w1, w1, #0x1

    if (!ae_rst_val)
 3007018:	37e001c3 	tbnz	w3, #28, 3007050 <enable_acpu_clock+0x48>
    {
    	//1. release modules reset states
    	REG32(SYS_SOFT_RESET5_SECURE) |= (1<<2);	//rst_acpu
 300701c:	d2800205 	mov	x5, #0x10                  	// #16
 3007020:	f2b30005 	movk	x5, #0x9800, lsl #16
    	REG32(SYS_SOFT_RESET1) |= (1<<28);			//rst_ae
        //2. turn on clock
        REG32(SYS_CLOCK_ENABLE2) |= 0x30; 	//clk_en_acpu/clk_en_ae
 3007024:	d2800a84 	mov	x4, #0x54                  	// #84
 3007028:	f2b30004 	movk	x4, #0x9800, lsl #16
    misc_rst_val = REG32(SYS_SOFT_RESET1) & 0x1;

    if (!ae_rst_val)
    {
    	//1. release modules reset states
    	REG32(SYS_SOFT_RESET5_SECURE) |= (1<<2);	//rst_acpu
 300702c:	b94000a3 	ldr	w3, [x5]
 3007030:	321e0063 	orr	w3, w3, #0x4
 3007034:	b90000a3 	str	w3, [x5]
    	REG32(SYS_SOFT_RESET1) |= (1<<28);			//rst_ae
 3007038:	b9400043 	ldr	w3, [x2]
 300703c:	32040063 	orr	w3, w3, #0x10000000
 3007040:	b9000043 	str	w3, [x2]
        //2. turn on clock
        REG32(SYS_CLOCK_ENABLE2) |= 0x30; 	//clk_en_acpu/clk_en_ae
 3007044:	b9400082 	ldr	w2, [x4]
 3007048:	321c0442 	orr	w2, w2, #0x30
 300704c:	b9000082 	str	w2, [x4]
    }
    if (!misc_rst_val)
 3007050:	34000121 	cbz	w1, 3007074 <enable_acpu_clock+0x6c>
        //4. turn on clock
    	REG32(SYS_CLOCK_ENABLE1) |= (1<<6);
    }

    //5. acpu
    if (bSet)
 3007054:	35000040 	cbnz	w0, 300705c <enable_acpu_clock+0x54>
    {
        REG32(SB2_REQ_MASK) |= 0x2;         //bit1 : mask
	    /* wait a while */
	    wait_loop(0x10);
    }
}
 3007058:	d65f03c0 	ret
    }

    //5. acpu
    if (bSet)
    {
        REG32(SB2_REQ_MASK) |= 0x2;         //bit1 : mask
 300705c:	d2942701 	mov	x1, #0xa138                	// #41272
 3007060:	f2b30021 	movk	x1, #0x9801, lsl #16
 3007064:	b9400020 	ldr	w0, [x1]
 3007068:	321f0000 	orr	w0, w0, #0x2
 300706c:	b9000020 	str	w0, [x1]
	    /* wait a while */
	    wait_loop(0x10);
    }
}
 3007070:	d65f03c0 	ret
        REG32(SYS_CLOCK_ENABLE2) |= 0x30; 	//clk_en_acpu/clk_en_ae
    }
    if (!misc_rst_val)
    {
    	//1. turn on clock
    	REG32(SYS_CLOCK_ENABLE1) |= (1<<6);
 3007074:	d2800a01 	mov	x1, #0x50                  	// #80
 3007078:	f2b30001 	movk	x1, #0x9800, lsl #16
    	//2. turn off clock
    	REG32(SYS_CLOCK_ENABLE1) &= ~(1<<6);
    	/* wait a while */
    	wait_loop(0x10);
    	//3. release modules reset states
    	REG32(SYS_SOFT_RESET1) |= 0x1;	   //rst_misc
 300707c:	d2b30003 	mov	x3, #0x98000000            	// #2550136832
        REG32(SYS_CLOCK_ENABLE2) |= 0x30; 	//clk_en_acpu/clk_en_ae
    }
    if (!misc_rst_val)
    {
    	//1. turn on clock
    	REG32(SYS_CLOCK_ENABLE1) |= (1<<6);
 3007080:	b9400022 	ldr	w2, [x1]
 3007084:	321a0042 	orr	w2, w2, #0x40
 3007088:	b9000022 	str	w2, [x1]
    	/* wait a while */
    	wait_loop(0x10);
    	//2. turn off clock
    	REG32(SYS_CLOCK_ENABLE1) &= ~(1<<6);
 300708c:	b9400022 	ldr	w2, [x1]
 3007090:	12197842 	and	w2, w2, #0xffffffbf
 3007094:	b9000022 	str	w2, [x1]
    	/* wait a while */
    	wait_loop(0x10);
    	//3. release modules reset states
    	REG32(SYS_SOFT_RESET1) |= 0x1;	   //rst_misc
 3007098:	b9400062 	ldr	w2, [x3]
 300709c:	32000042 	orr	w2, w2, #0x1
 30070a0:	b9000062 	str	w2, [x3]
        //4. turn on clock
    	REG32(SYS_CLOCK_ENABLE1) |= (1<<6);
 30070a4:	b9400022 	ldr	w2, [x1]
 30070a8:	321a0042 	orr	w2, w2, #0x40
 30070ac:	b9000022 	str	w2, [x1]
    }

    //5. acpu
    if (bSet)
 30070b0:	34fffd40 	cbz	w0, 3007058 <enable_acpu_clock+0x50>
 30070b4:	17ffffea 	b	300705c <enable_acpu_clock+0x54>

00000000030070b8 <enable_uartclk>:
	unsigned int en2_reg_val=0x10000000;
	//uart1
	unsigned int rst2_reg_val=0x10000000;

	//1. turn on clock
	REG32(ISO_CLOCK_ENABLE) |= iso_clk_en;
 30070b8:	d28e1181 	mov	x1, #0x708c                	// #28812
 30070bc:	f2b30001 	movk	x1, #0x9800, lsl #16
	REG32(SYS_CLOCK_ENABLE2) |= en2_reg_val;
 30070c0:	d2800a80 	mov	x0, #0x54                  	// #84
 30070c4:	f2b30000 	movk	x0, #0x9800, lsl #16

	/* wait a while */
	wait_loop(0x10);

	//3. release modules reset states
	REG32(ISO_SOFT_RESET) |= iso_soft_rst;
 30070c8:	d28e1104 	mov	x4, #0x7088                	// #28808
 30070cc:	f2b30004 	movk	x4, #0x9800, lsl #16
	unsigned int en2_reg_val=0x10000000;
	//uart1
	unsigned int rst2_reg_val=0x10000000;

	//1. turn on clock
	REG32(ISO_CLOCK_ENABLE) |= iso_clk_en;
 30070d0:	b9400022 	ldr	w2, [x1]
	/* wait a while */
	wait_loop(0x10);

	//3. release modules reset states
	REG32(ISO_SOFT_RESET) |= iso_soft_rst;
	REG32(SYS_SOFT_RESET2) |= rst2_reg_val;
 30070d4:	d2800083 	mov	x3, #0x4                   	// #4
 30070d8:	f2b30003 	movk	x3, #0x9800, lsl #16
	unsigned int en2_reg_val=0x10000000;
	//uart1
	unsigned int rst2_reg_val=0x10000000;

	//1. turn on clock
	REG32(ISO_CLOCK_ENABLE) |= iso_clk_en;
 30070dc:	32180042 	orr	w2, w2, #0x100
 30070e0:	b9000022 	str	w2, [x1]
	REG32(SYS_CLOCK_ENABLE2) |= en2_reg_val;
 30070e4:	b9400002 	ldr	w2, [x0]
 30070e8:	32040042 	orr	w2, w2, #0x10000000
 30070ec:	b9000002 	str	w2, [x0]

	/* wait a while */
	wait_loop(0x10);

	//2. turn off clock
	REG32(ISO_CLOCK_ENABLE) &= ~iso_clk_en;
 30070f0:	b9400022 	ldr	w2, [x1]
 30070f4:	12177842 	and	w2, w2, #0xfffffeff
 30070f8:	b9000022 	str	w2, [x1]
	REG32(SYS_CLOCK_ENABLE2) &= (~en2_reg_val);
 30070fc:	b9400002 	ldr	w2, [x0]
 3007100:	12037842 	and	w2, w2, #0xefffffff
 3007104:	b9000002 	str	w2, [x0]

	/* wait a while */
	wait_loop(0x10);

	//3. release modules reset states
	REG32(ISO_SOFT_RESET) |= iso_soft_rst;
 3007108:	b9400082 	ldr	w2, [x4]
 300710c:	32180042 	orr	w2, w2, #0x100
 3007110:	b9000082 	str	w2, [x4]
	REG32(SYS_SOFT_RESET2) |= rst2_reg_val;
 3007114:	b9400062 	ldr	w2, [x3]
 3007118:	32040042 	orr	w2, w2, #0x10000000
 300711c:	b9000062 	str	w2, [x3]

	/* wait a while */
	wait_loop(0x10);

	//4. turn on clock
	REG32(ISO_CLOCK_ENABLE) |= iso_clk_en;
 3007120:	b9400022 	ldr	w2, [x1]
 3007124:	32180042 	orr	w2, w2, #0x100
 3007128:	b9000022 	str	w2, [x1]
	REG32(SYS_CLOCK_ENABLE2) |= en2_reg_val;
 300712c:	b9400001 	ldr	w1, [x0]
 3007130:	32040021 	orr	w1, w1, #0x10000000
 3007134:	b9000001 	str	w1, [x0]

	/* wait a while */
	wait_loop(0x10);
}
 3007138:	d65f03c0 	ret

000000000300713c <adjust_device_speed>:
    unsigned int tmp_reg=0;
    #ifdef FPGA
    return;
    #endif
    //sd
    REG32(SD_PAD_CTL) = 0x0;         //1.8v
 300713c:	d2808e80 	mov	x0, #0x474                 	// #1140
 3007140:	f2b30020 	movk	x0, #0x9801, lsl #16
    tmp_reg = REG32(SD_CKGEN_CTL);
 3007144:	d2808f02 	mov	x2, #0x478                 	// #1144
 3007148:	f2b30022 	movk	x2, #0x9801, lsl #16
    tmp_reg &= ~0x3;
    tmp_reg |= 0x2;
    REG32(SD_CKGEN_CTL) = tmp_reg;    //set to 12.5Mhz

    //emmc
    REG32(CR_EMMC_PAD_CTL) = 0x0;         //1.8v
 300714c:	d2848e87 	mov	x7, #0x2474                	// #9332
 3007150:	f2b30027 	movk	x7, #0x9801, lsl #16
    unsigned int tmp_reg=0;
    #ifdef FPGA
    return;
    #endif
    //sd
    REG32(SD_PAD_CTL) = 0x0;         //1.8v
 3007154:	b900001f 	str	wzr, [x0]
    tmp_reg |= 0x2;
    REG32(SD_CKGEN_CTL) = tmp_reg;    //set to 12.5Mhz

    //emmc
    REG32(CR_EMMC_PAD_CTL) = 0x0;         //1.8v
    tmp_reg = REG32(CR_EMMC_CKGEN_CTL);
 3007158:	d2848f01 	mov	x1, #0x2478                	// #9336
 300715c:	f2b30021 	movk	x1, #0x9801, lsl #16
    #ifdef FPGA
    return;
    #endif
    //sd
    REG32(SD_PAD_CTL) = 0x0;         //1.8v
    tmp_reg = REG32(SD_CKGEN_CTL);
 3007160:	b9400040 	ldr	w0, [x2]
    //tmp_reg |= 0x2;
    tmp_reg |= 0x0;
    REG32(CR_EMMC_CKGEN_CTL) = tmp_reg;   //set to 12.5Mhz
    //nf
    //REG32(SYS_NF_CKSEL) = 0x3030305;        //set to 10.8Mhz
    tmp_reg = REG32(SYS_NF_CKSEL);
 3007164:	d2800704 	mov	x4, #0x38                  	// #56
 3007168:	f2b30004 	movk	x4, #0x9800, lsl #16
    return;
    #endif
    //sd
    REG32(SD_PAD_CTL) = 0x0;         //1.8v
    tmp_reg = REG32(SD_CKGEN_CTL);
    tmp_reg &= ~0x3;
 300716c:	121e7400 	and	w0, w0, #0xfffffffc
    tmp_reg = REG32(SYS_NF_CKSEL);
    tmp_reg &= ~0xf;
    tmp_reg |= 0x5;
    REG32(SYS_NF_CKSEL) = tmp_reg;   //set to 10.8Mhz
    //spi
   	REG32(SB2_SFC_CE) = 0x001A1307;
 3007170:	d2950185 	mov	x5, #0xa80c                	// #43020
 3007174:	f2b30025 	movk	x5, #0x9801, lsl #16
    #endif
    //sd
    REG32(SD_PAD_CTL) = 0x0;         //1.8v
    tmp_reg = REG32(SD_CKGEN_CTL);
    tmp_reg &= ~0x3;
    tmp_reg |= 0x2;
 3007178:	321f0000 	orr	w0, w0, #0x2
    REG32(SD_CKGEN_CTL) = tmp_reg;    //set to 12.5Mhz
 300717c:	b9000040 	str	w0, [x2]

    //emmc
    REG32(CR_EMMC_PAD_CTL) = 0x0;         //1.8v
 3007180:	b90000ff 	str	wzr, [x7]
    REG32(CR_EMMC_CKGEN_CTL) = tmp_reg;   //set to 12.5Mhz
    //nf
    //REG32(SYS_NF_CKSEL) = 0x3030305;        //set to 10.8Mhz
    tmp_reg = REG32(SYS_NF_CKSEL);
    tmp_reg &= ~0xf;
    tmp_reg |= 0x5;
 3007184:	528000a3 	mov	w3, #0x5                   	// #5
    REG32(SYS_NF_CKSEL) = tmp_reg;   //set to 10.8Mhz
    //spi
   	REG32(SB2_SFC_CE) = 0x001A1307;
 3007188:	528260e6 	mov	w6, #0x1307                	// #4871
 300718c:	72a00346 	movk	w6, #0x1a, lsl #16
    tmp_reg |= 0x2;
    REG32(SD_CKGEN_CTL) = tmp_reg;    //set to 12.5Mhz

    //emmc
    REG32(CR_EMMC_PAD_CTL) = 0x0;         //1.8v
    tmp_reg = REG32(CR_EMMC_CKGEN_CTL);
 3007190:	b9400020 	ldr	w0, [x1]
    tmp_reg &= ~0x3;
 3007194:	121e7400 	and	w0, w0, #0xfffffffc
    //tmp_reg |= 0x2;
    tmp_reg |= 0x0;
    REG32(CR_EMMC_CKGEN_CTL) = tmp_reg;   //set to 12.5Mhz
 3007198:	b9000020 	str	w0, [x1]
    //nf
    //REG32(SYS_NF_CKSEL) = 0x3030305;        //set to 10.8Mhz
    tmp_reg = REG32(SYS_NF_CKSEL);
 300719c:	b9400080 	ldr	w0, [x4]
    tmp_reg &= ~0xf;
 30071a0:	121c6c00 	and	w0, w0, #0xfffffff0
    tmp_reg |= 0x5;
 30071a4:	2a030000 	orr	w0, w0, w3
    REG32(SYS_NF_CKSEL) = tmp_reg;   //set to 10.8Mhz
 30071a8:	b9000080 	str	w0, [x4]
    //spi
   	REG32(SB2_SFC_CE) = 0x001A1307;
 30071ac:	b90000a6 	str	w6, [x5]
	/* wait a while */
	wait_loop(0x10);

    //turn clk source back (previous switch at reset.S)
    //sd
    tmp_reg = REG32(SD_CKGEN_CTL);
 30071b0:	b9400040 	ldr	w0, [x2]
    tmp_reg &= ~0x70000;
 30071b4:	120d7000 	and	w0, w0, #0xfff8ffff
    REG32(SD_CKGEN_CTL) = tmp_reg;
 30071b8:	b9000040 	str	w0, [x2]
    //emmc
    tmp_reg = REG32(CR_EMMC_CKGEN_CTL);
 30071bc:	b9400020 	ldr	w0, [x1]
    tmp_reg &= ~0x70000;
 30071c0:	120d7000 	and	w0, w0, #0xfff8ffff
    REG32(CR_EMMC_CKGEN_CTL) = tmp_reg;
 30071c4:	b9000020 	str	w0, [x1]

	/* wait a while */
	wait_loop(0x10);
}
 30071c8:	d65f03c0 	ret

00000000030071cc <not_valid_address>:
int not_valid_address(const unsigned int addr)
{
	// address should be word-aligned
	if (addr & 0x3)
 30071cc:	12000401 	and	w1, w0, #0x3
		return ERR_INVALID_ADDRESS;
 30071d0:	52801202 	mov	w2, #0x90                  	// #144
	wait_loop(0x10);
}
int not_valid_address(const unsigned int addr)
{
	// address should be word-aligned
	if (addr & 0x3)
 30071d4:	34000061 	cbz	w1, 30071e0 <not_valid_address+0x14>
	// address shoulde be in 512M ddr segment
	if ((addr < ASEG0BASE) || (addr > ASEG512MBBASE))
		return ERR_INVALID_ADDRESS;

	return 0;
}
 30071d8:	2a0203e0 	mov	w0, w2
 30071dc:	d65f03c0 	ret
	// address should be word-aligned
	if (addr & 0x3)
		return ERR_INVALID_ADDRESS;

	// address shoulde be in 512M ddr segment
	if ((addr < ASEG0BASE) || (addr > ASEG512MBBASE))
 30071e0:	51407c01 	sub	w1, w0, #0x1f, lsl #12
 30071e4:	52820000 	mov	w0, #0x1000                	// #4096
 30071e8:	72a3ffc0 	movk	w0, #0x1ffe, lsl #16
		return ERR_INVALID_ADDRESS;

	return 0;
 30071ec:	6b00003f 	cmp	w1, w0
 30071f0:	1a9f8042 	csel	w2, w2, wzr, hi
}
 30071f4:	2a0203e0 	mov	w0, w2
 30071f8:	d65f03c0 	ret

00000000030071fc <set_memory>:
void set_memory(void *dst, UINT32 value, UINT32 size)
{
	UINT32 i;

	// write faster if both start address and size are word-aligned
	if ( (((UINT32)dst & 0x3) == 0) && ((size & 0x3) == 0) ) {
 30071fc:	12000404 	and	w4, w0, #0x3
 3007200:	2a0003e3 	mov	w3, w0
 3007204:	35000164 	cbnz	w4, 3007230 <set_memory+0x34>
 3007208:	12000444 	and	w4, w2, #0x3
 300720c:	35000144 	cbnz	w4, 3007234 <set_memory+0x38>
		for (i=0; i<size; i+=4)
 3007210:	340000e2 	cbz	w2, 300722c <set_memory+0x30>
 3007214:	52800004 	mov	w4, #0x0                   	// #0
			REG32(((UINT32)dst) + i) = value;
 3007218:	0b040060 	add	w0, w3, w4
{
	UINT32 i;

	// write faster if both start address and size are word-aligned
	if ( (((UINT32)dst & 0x3) == 0) && ((size & 0x3) == 0) ) {
		for (i=0; i<size; i+=4)
 300721c:	11001084 	add	w4, w4, #0x4
 3007220:	6b04005f 	cmp	w2, w4
			REG32(((UINT32)dst) + i) = value;
 3007224:	b9000001 	str	w1, [x0]
{
	UINT32 i;

	// write faster if both start address and size are word-aligned
	if ( (((UINT32)dst & 0x3) == 0) && ((size & 0x3) == 0) ) {
		for (i=0; i<size; i+=4)
 3007228:	54ffff88 	b.hi	3007218 <set_memory+0x1c>
	}
	else {
		for (i=0; i<size; i++)
			REG8(((UINT32)dst) + i) = value;
	}
}
 300722c:	d65f03c0 	ret
	if ( (((UINT32)dst & 0x3) == 0) && ((size & 0x3) == 0) ) {
		for (i=0; i<size; i+=4)
			REG32(((UINT32)dst) + i) = value;
	}
	else {
		for (i=0; i<size; i++)
 3007230:	34ffffe2 	cbz	w2, 300722c <set_memory+0x30>
 3007234:	53001c21 	uxtb	w1, w1
 3007238:	0b000040 	add	w0, w2, w0
			REG8(((UINT32)dst) + i) = value;
 300723c:	2a0303e4 	mov	w4, w3
 3007240:	11000463 	add	w3, w3, #0x1
	if ( (((UINT32)dst & 0x3) == 0) && ((size & 0x3) == 0) ) {
		for (i=0; i<size; i+=4)
			REG32(((UINT32)dst) + i) = value;
	}
	else {
		for (i=0; i<size; i++)
 3007244:	6b00007f 	cmp	w3, w0
			REG8(((UINT32)dst) + i) = value;
 3007248:	39000081 	strb	w1, [x4]
	if ( (((UINT32)dst & 0x3) == 0) && ((size & 0x3) == 0) ) {
		for (i=0; i<size; i+=4)
			REG32(((UINT32)dst) + i) = value;
	}
	else {
		for (i=0; i<size; i++)
 300724c:	54ffff81 	b.ne	300723c <set_memory+0x40>
			REG8(((UINT32)dst) + i) = value;
	}
}
 3007250:	d65f03c0 	ret

0000000003007254 <watchdog_reset>:
	return 0;
}

void watchdog_reset(void)
{
	REG32(MIS_TCWCR) = 0xa5;	// disable watchdog
 3007254:	d296b600 	mov	x0, #0xb5b0                	// #46512
 3007258:	f2b30020 	movk	x0, #0x9801, lsl #16
	REG32(MIS_TCWTR) = 0x1;		// clear watchdog counter
 300725c:	d296b683 	mov	x3, #0xb5b4                	// #46516
 3007260:	f2b30023 	movk	x3, #0x9801, lsl #16

	// set overflow count
#ifdef ENV_SIMULATION
	REG32(MIS_TCWOV) = 0x29000;
#else
	REG32(MIS_TCWOV) = 0x800000;
 3007264:	d296b781 	mov	x1, #0xb5bc                	// #46524
 3007268:	f2b30021 	movk	x1, #0x9801, lsl #16
	return 0;
}

void watchdog_reset(void)
{
	REG32(MIS_TCWCR) = 0xa5;	// disable watchdog
 300726c:	528014a5 	mov	w5, #0xa5                  	// #165
 3007270:	b9000005 	str	w5, [x0]
	REG32(MIS_TCWTR) = 0x1;		// clear watchdog counter
 3007274:	52800024 	mov	w4, #0x1                   	// #1
 3007278:	b9000064 	str	w4, [x3]

	// set overflow count
#ifdef ENV_SIMULATION
	REG32(MIS_TCWOV) = 0x29000;
#else
	REG32(MIS_TCWOV) = 0x800000;
 300727c:	52a01002 	mov	w2, #0x800000              	// #8388608
 3007280:	b9000022 	str	w2, [x1]
#endif

	REG32(MIS_TCWCR) = 0;		// enable watchdog
 3007284:	b900001f 	str	wzr, [x0]
}
 3007288:	d65f03c0 	ret

000000000300728c <swap_endian>:
			 (input & 0x00ff0000)>>8|
			 (input & 0x0000ff00)<<8|
			 (input & 0x000000ff)<<24;

	return output;
}
 300728c:	5ac00800 	rev	w0, w0
 3007290:	d65f03c0 	ret

0000000003007294 <system_reset>:
	return 0;
}

void watchdog_reset(void)
{
	REG32(MIS_TCWCR) = 0xa5;	// disable watchdog
 3007294:	d296b600 	mov	x0, #0xb5b0                	// #46512
 3007298:	f2b30020 	movk	x0, #0x9801, lsl #16
	REG32(MIS_TCWTR) = 0x1;		// clear watchdog counter
 300729c:	d296b683 	mov	x3, #0xb5b4                	// #46516
 30072a0:	f2b30023 	movk	x3, #0x9801, lsl #16

	// set overflow count
#ifdef ENV_SIMULATION
	REG32(MIS_TCWOV) = 0x29000;
#else
	REG32(MIS_TCWOV) = 0x800000;
 30072a4:	d296b781 	mov	x1, #0xb5bc                	// #46524
 30072a8:	f2b30021 	movk	x1, #0x9801, lsl #16
	return 0;
}

void watchdog_reset(void)
{
	REG32(MIS_TCWCR) = 0xa5;	// disable watchdog
 30072ac:	528014a5 	mov	w5, #0xa5                  	// #165
 30072b0:	b9000005 	str	w5, [x0]
	REG32(MIS_TCWTR) = 0x1;		// clear watchdog counter
 30072b4:	52800024 	mov	w4, #0x1                   	// #1
 30072b8:	b9000064 	str	w4, [x3]

	// set overflow count
#ifdef ENV_SIMULATION
	REG32(MIS_TCWOV) = 0x29000;
#else
	REG32(MIS_TCWOV) = 0x800000;
 30072bc:	52a01002 	mov	w2, #0x800000              	// #8388608
 30072c0:	b9000022 	str	w2, [x1]
#endif

	REG32(MIS_TCWCR) = 0;		// enable watchdog
 30072c4:	b900001f 	str	wzr, [x0]
}

void system_reset(void)
{
	watchdog_reset();
}
 30072c8:	d65f03c0 	ret

00000000030072cc <faultDetect>:
	return FALSE;
}


__attribute__ ((noreturn)) __attribute__ ((optimize("O0"))) void faultDetect(void)
{
 30072cc:	f81f0ffe 	str	x30, [sp,#-16]!

#if defined(ENV_SIMULATION)
	simulation_result_fail();
#endif

	printf("faultDetect!(0x%x)\n", sys_errno);
 30072d0:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 30072d4:	910db000 	add	x0, x0, #0x36c
 30072d8:	b9400001 	ldr	w1, [x0]
 30072dc:	d0000000 	adrp	x0, 3009000 <el3_vectors>
 30072e0:	912fe000 	add	x0, x0, #0xbf8
 30072e4:	97ffe718 	bl	3000f44 <printf>
	REG32(SB2_DUMMY3) = 0x161a0000  | (sys_errno & 0xffff); // save errno with magic number
 30072e8:	d294c180 	mov	x0, #0xa60c                	// #42508
 30072ec:	f2b30020 	movk	x0, #0x9801, lsl #16
 30072f0:	f0000001 	adrp	x1, 300a000 <__FUNCTION__.3108+0x3d8>
 30072f4:	910db021 	add	x1, x1, #0x36c
 30072f8:	b9400021 	ldr	w1, [x1]
 30072fc:	12003c22 	and	w2, w1, #0xffff
 3007300:	52a2c341 	mov	w1, #0x161a0000            	// #370802688
 3007304:	2a010041 	orr	w1, w2, w1
 3007308:	b9000001 	str	w1, [x0]
	clear_memory((uintptr_t)&_fshare_data, (uintptr_t)&_eshare_data);
*/

#ifndef FPGA
	// check if need to halt for HIF connection
	if (halt_for_HIF_connection() == TRUE) {
 300730c:	97fffc0a 	bl	3006334 <halt_for_HIF_connection>
 3007310:	53001c00 	uxtb	w0, w0
 3007314:	7100041f 	cmp	w0, #0x1
 3007318:	54000141 	b.ne	3007340 <faultDetect+0x74>
		#ifdef ROM_DEBUG
		prints("wait for HIF...\n");
 300731c:	d0000000 	adrp	x0, 3009000 <el3_vectors>
 3007320:	91304000 	add	x0, x0, #0xc10
 3007324:	97fffb6b 	bl	30060d0 <prints>
		#endif
		REG32(SB2_DUMMY0) = HIF_DEBUG_MAGIC; // set dummy register
 3007328:	d294c000 	mov	x0, #0xa600                	// #42496
 300732c:	f2b30020 	movk	x0, #0x9801, lsl #16
 3007330:	529bd721 	mov	w1, #0xdeb9                	// #57017
 3007334:	72a2c341 	movk	w1, #0x161a, lsl #16
 3007338:	b9000001 	str	w1, [x0]
		while (1) ; // loop for HIF to debug
 300733c:	14000000 	b	300733c <faultDetect+0x70>
	}
#endif // FPGA

	system_reset();
 3007340:	97ffffd5 	bl	3007294 <system_reset>
	while(1);
 3007344:	14000000 	b	3007344 <faultDetect+0x78>

0000000003007348 <compare_memory>:

	return 0;
}

UINT32 compare_memory(void *s1, void *s2, UINT32 size)
{
 3007348:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
 300734c:	2a0203f3 	mov	w19, w2
 3007350:	a9015bf5 	stp	x21, x22, [sp,#16]
 3007354:	f90013fe 	str	x30, [sp,#32]
 3007358:	aa0003f5 	mov	x21, x0
 300735c:	aa0103f6 	mov	x22, x1
	char error = 0;
#ifdef ROM_DEBUG
	int fail_idx = -1;
#endif

	if (size == 0) {
 3007360:	34000582 	cbz	w2, 3007410 <compare_memory+0xc8>
		faultDetect();
	}

	CP15ISB;
 3007364:	d5033fdf 	isb
	sync();
 3007368:	97ffe3e9 	bl	300030c <sync>

#ifdef FORCE_COMPARE_RESULT_SUCCESS
        return size;
#endif

	if (genTRNG(&r) != TRNG_SUCCESS_MAGIC) {
 300736c:	9100f3e0 	add	x0, sp, #0x3c
 3007370:	97fff695 	bl	3004dc4 <genTRNG>
 3007374:	5294ab41 	mov	w1, #0xa55a                	// #42330
 3007378:	6b01001f 	cmp	w0, w1
 300737c:	540004a1 	b.ne	3007410 <compare_memory+0xc8>
		faultDetect();
	}

	r %= size;
 3007380:	b9403fe1 	ldr	w1, [sp,#60]
 3007384:	12800014 	mov	w20, #0xffffffff            	// #-1
 3007388:	52800005 	mov	w5, #0x0                   	// #0
 300738c:	52800000 	mov	w0, #0x0                   	// #0
 3007390:	1ad30823 	udiv	w3, w1, w19
 3007394:	1b138463 	msub	w3, w3, w19, w1
 3007398:	b9003fe3 	str	w3, [sp,#60]

	p1 = (char *)s1;
	p2 = (char *)s2;
	for (i = 0, j = r; i < size; i++, j = (j + 1) % size) {
		error |= p1[j] ^ p2[j];
 300739c:	2a0303e2 	mov	w2, w3
 30073a0:	38626aa4 	ldrb	w4, [x21,x2]
 30073a4:	38626ac2 	ldrb	w2, [x22,x2]
		#ifdef ROM_DEBUG
		if (p1[j] != p2[j]) {
			if (fail_idx == -1) {
 30073a8:	6b02009f 	cmp	w4, w2
	r %= size;

	p1 = (char *)s1;
	p2 = (char *)s2;
	for (i = 0, j = r; i < size; i++, j = (j + 1) % size) {
		error |= p1[j] ^ p2[j];
 30073ac:	4a040044 	eor	w4, w2, w4
 30073b0:	2a0400a5 	orr	w5, w5, w4
		#ifdef ROM_DEBUG
		if (p1[j] != p2[j]) {
			if (fail_idx == -1) {
 30073b4:	54000060 	b.eq	30073c0 <compare_memory+0x78>
				fail_idx = j;
 30073b8:	3100069f 	cmn	w20, #0x1
 30073bc:	1a831294 	csel	w20, w20, w3, ne

	r %= size;

	p1 = (char *)s1;
	p2 = (char *)s2;
	for (i = 0, j = r; i < size; i++, j = (j + 1) % size) {
 30073c0:	11000463 	add	w3, w3, #0x1
 30073c4:	11000400 	add	w0, w0, #0x1
 30073c8:	6b13001f 	cmp	w0, w19
 30073cc:	1ad30862 	udiv	w2, w3, w19
 30073d0:	1b138c43 	msub	w3, w2, w19, w3
 30073d4:	54fffe41 	b.ne	300739c <compare_memory+0x54>

	if (i != size) { // loop no completed
		faultDetect();
	}

	if (error) {
 30073d8:	34000145 	cbz	w5, 3007400 <compare_memory+0xb8>
		#ifdef ROM_DEBUG
		prints("cmp fail idx : ");
 30073dc:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 30073e0:	91086000 	add	x0, x0, #0x218
 30073e4:	97fffb3b 	bl	30060d0 <prints>
		print_hex(fail_idx);
 30073e8:	2a1403e0 	mov	w0, w20
 30073ec:	97fffb6b 	bl	3006198 <print_hex>
		prints("\n");
 30073f0:	d0000000 	adrp	x0, 3009000 <el3_vectors>
 30073f4:	91396000 	add	x0, x0, #0xe58
 30073f8:	97fffb36 	bl	30060d0 <prints>
		#endif
		return 0;
 30073fc:	52800000 	mov	w0, #0x0                   	// #0
	}

	return size;
}
 3007400:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3007404:	f94013fe 	ldr	x30, [sp,#32]
 3007408:	a8c453f3 	ldp	x19, x20, [sp],#64
 300740c:	d65f03c0 	ret
#ifdef ROM_DEBUG
	int fail_idx = -1;
#endif

	if (size == 0) {
		faultDetect();
 3007410:	97ffffaf 	bl	30072cc <faultDetect>

0000000003007414 <copy_memory>:

	return size;
}

UINT32 copy_memory(void *dst, void *src, UINT32 size)
{
 3007414:	a9bb53f3 	stp	x19, x20, [sp,#-80]!
 3007418:	2a0203f3 	mov	w19, w2
 300741c:	a9015bf5 	stp	x21, x22, [sp,#16]
 3007420:	a90263f7 	stp	x23, x24, [sp,#32]
 3007424:	f9001bfe 	str	x30, [sp,#48]
 3007428:	aa0003f7 	mov	x23, x0
 300742c:	aa0103f6 	mov	x22, x1
	volatile unsigned int i, j, r;

	if (size == 0)
 3007430:	340011a2 	cbz	w2, 3007664 <copy_memory+0x250>
		faultDetect();

	if ((UINT32)src < (UINT32)dst && ((UINT32)src + size) > (UINT32)dst){
 3007434:	6b00003f 	cmp	w1, w0
 3007438:	2a0103f4 	mov	w20, w1
 300743c:	2a0003f5 	mov	w21, w0
 3007440:	54000082 	b.cs	3007450 <copy_memory+0x3c>
 3007444:	0b010040 	add	w0, w2, w1
 3007448:	6b0002ff 	cmp	w23, w0
 300744c:	54000d83 	b.cc	30075fc <copy_memory+0x1e8>
		prints("size = 0x");
		print_hex(size);
		prints("\n");
		faultDetect();
	}
	else if ((UINT32)dst < (UINT32)src && ((UINT32)dst + size) > (UINT32)src){
 3007450:	6b1702df 	cmp	w22, w23
 3007454:	54000089 	b.ls	3007464 <copy_memory+0x50>
 3007458:	0b170260 	add	w0, w19, w23
 300745c:	6b0002df 	cmp	w22, w0
 3007460:	54000963 	b.cc	300758c <copy_memory+0x178>
		prints("\n");
#endif
		r = 0;
	}
	else{
		if (genTRNG(&r) != TRNG_SUCCESS_MAGIC){
 3007464:	910133e0 	add	x0, sp, #0x4c
 3007468:	97fff657 	bl	3004dc4 <genTRNG>
 300746c:	5294ab41 	mov	w1, #0xa55a                	// #42330
 3007470:	6b01001f 	cmp	w0, w1
 3007474:	54000f81 	b.ne	3007664 <copy_memory+0x250>
	        faultDetect();
		}
		r %= size;
 3007478:	b9404fe1 	ldr	w1, [sp,#76]
 300747c:	1ad30820 	udiv	w0, w1, w19
 3007480:	1b138400 	msub	w0, w0, w19, w1
 3007484:	b9004fe0 	str	w0, [sp,#76]
 3007488:	2a1602f6 	orr	w22, w23, w22
 300748c:	120006d6 	and	w22, w22, #0x3
	}

	// word copy if all arguments are word-aligned
	if ( (((UINT32)dst & 0x3) == 0) && (((UINT32)src & 0x3) == 0) && ((size & 0x3) == 0) ) {
 3007490:	350004d6 	cbnz	w22, 3007528 <copy_memory+0x114>
 3007494:	12000660 	and	w0, w19, #0x3
 3007498:	35000480 	cbnz	w0, 3007528 <copy_memory+0x114>
		r &= (~3); //make r 4byte alignment
 300749c:	b9404fe0 	ldr	w0, [sp,#76]
 30074a0:	121e7400 	and	w0, w0, #0xfffffffc
 30074a4:	b9004fe0 	str	w0, [sp,#76]
		for (i = 0, j = r; i < size; i += 4, j = (j+4)%size)
 30074a8:	b90047ff 	str	wzr, [sp,#68]
 30074ac:	b9404fe0 	ldr	w0, [sp,#76]
 30074b0:	b9004be0 	str	w0, [sp,#72]
 30074b4:	b94047e0 	ldr	w0, [sp,#68]
 30074b8:	6b00027f 	cmp	w19, w0
 30074bc:	54000249 	b.ls	3007504 <copy_memory+0xf0>
			REG32(((UINT32)dst) + j) = REG32(((UINT32)src) + j);
 30074c0:	b9404be0 	ldr	w0, [sp,#72]
 30074c4:	b9404be1 	ldr	w1, [sp,#72]
 30074c8:	0b0002a0 	add	w0, w21, w0
 30074cc:	0b010281 	add	w1, w20, w1
 30074d0:	b9400021 	ldr	w1, [x1]
 30074d4:	b9000001 	str	w1, [x0]
	}

	// word copy if all arguments are word-aligned
	if ( (((UINT32)dst & 0x3) == 0) && (((UINT32)src & 0x3) == 0) && ((size & 0x3) == 0) ) {
		r &= (~3); //make r 4byte alignment
		for (i = 0, j = r; i < size; i += 4, j = (j+4)%size)
 30074d8:	b94047e0 	ldr	w0, [sp,#68]
 30074dc:	11001000 	add	w0, w0, #0x4
 30074e0:	b90047e0 	str	w0, [sp,#68]
 30074e4:	b9404be0 	ldr	w0, [sp,#72]
 30074e8:	11001000 	add	w0, w0, #0x4
 30074ec:	1ad30801 	udiv	w1, w0, w19
 30074f0:	1b138020 	msub	w0, w1, w19, w0
 30074f4:	b9004be0 	str	w0, [sp,#72]
 30074f8:	b94047e0 	ldr	w0, [sp,#68]
 30074fc:	6b00027f 	cmp	w19, w0
 3007500:	54fffe08 	b.hi	30074c0 <copy_memory+0xac>
	}
	else {	// byte copy
		for (i = 0, j = r; i < size; i++, j  = (j+1)%size)
			REG8(((UINT32)dst) + j) = REG8(((UINT32)src) + j);

		if (i != size){ // loop no completed
 3007504:	b94047e0 	ldr	w0, [sp,#68]
 3007508:	6b13001f 	cmp	w0, w19
 300750c:	54000ac1 	b.ne	3007664 <copy_memory+0x250>
			faultDetect();
		}
	}
	return size;
}
 3007510:	2a1303e0 	mov	w0, w19
 3007514:	f9401bfe 	ldr	x30, [sp,#48]
 3007518:	a9415bf5 	ldp	x21, x22, [sp,#16]
 300751c:	a94263f7 	ldp	x23, x24, [sp,#32]
 3007520:	a8c553f3 	ldp	x19, x20, [sp],#80
 3007524:	d65f03c0 	ret
		if (i != size){ // loop no completed
			faultDetect();
		}
	}
	else {	// byte copy
		for (i = 0, j = r; i < size; i++, j  = (j+1)%size)
 3007528:	b90047ff 	str	wzr, [sp,#68]
 300752c:	b9404fe0 	ldr	w0, [sp,#76]
 3007530:	b9004be0 	str	w0, [sp,#72]
 3007534:	b94047e0 	ldr	w0, [sp,#68]
 3007538:	6b00027f 	cmp	w19, w0
 300753c:	54fffe49 	b.ls	3007504 <copy_memory+0xf0>
			REG8(((UINT32)dst) + j) = REG8(((UINT32)src) + j);
 3007540:	b9404be0 	ldr	w0, [sp,#72]
 3007544:	b9404be1 	ldr	w1, [sp,#72]
 3007548:	0b0002a0 	add	w0, w21, w0
 300754c:	0b010281 	add	w1, w20, w1
 3007550:	39400021 	ldrb	w1, [x1]
 3007554:	53001c21 	uxtb	w1, w1
 3007558:	39000001 	strb	w1, [x0]
		if (i != size){ // loop no completed
			faultDetect();
		}
	}
	else {	// byte copy
		for (i = 0, j = r; i < size; i++, j  = (j+1)%size)
 300755c:	b94047e0 	ldr	w0, [sp,#68]
 3007560:	11000400 	add	w0, w0, #0x1
 3007564:	b90047e0 	str	w0, [sp,#68]
 3007568:	b9404be0 	ldr	w0, [sp,#72]
 300756c:	11000400 	add	w0, w0, #0x1
 3007570:	1ad30801 	udiv	w1, w0, w19
 3007574:	1b138020 	msub	w0, w1, w19, w0
 3007578:	b9004be0 	str	w0, [sp,#72]
 300757c:	b94047e0 	ldr	w0, [sp,#68]
 3007580:	6b00027f 	cmp	w19, w0
 3007584:	54fffde8 	b.hi	3007540 <copy_memory+0x12c>
 3007588:	17ffffdf 	b	3007504 <copy_memory+0xf0>
		prints("\n");
		faultDetect();
	}
	else if ((UINT32)dst < (UINT32)src && ((UINT32)dst + size) > (UINT32)src){
#ifdef ROM_DEBUG
		prints("copy memory: dst + size > src\n");
 300758c:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007590:	9109e000 	add	x0, x0, #0x278
		prints("src = 0x");
		print_hex(src);
		prints("\n");
 3007594:	d0000018 	adrp	x24, 3009000 <el3_vectors>
 3007598:	91396318 	add	x24, x24, #0xe58
		prints("\n");
		faultDetect();
	}
	else if ((UINT32)dst < (UINT32)src && ((UINT32)dst + size) > (UINT32)src){
#ifdef ROM_DEBUG
		prints("copy memory: dst + size > src\n");
 300759c:	97fffacd 	bl	30060d0 <prints>
		prints("src = 0x");
 30075a0:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 30075a4:	91092000 	add	x0, x0, #0x248
 30075a8:	97fffaca 	bl	30060d0 <prints>
		print_hex(src);
 30075ac:	2a1603e0 	mov	w0, w22
 30075b0:	97fffafa 	bl	3006198 <print_hex>
		prints("\n");
 30075b4:	aa1803e0 	mov	x0, x24
 30075b8:	97fffac6 	bl	30060d0 <prints>
		prints("dst = 0x");
 30075bc:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 30075c0:	91096000 	add	x0, x0, #0x258
 30075c4:	97fffac3 	bl	30060d0 <prints>
		print_hex(dst);
 30075c8:	2a1703e0 	mov	w0, w23
 30075cc:	97fffaf3 	bl	3006198 <print_hex>
		prints("\n");
 30075d0:	aa1803e0 	mov	x0, x24
 30075d4:	97fffabf 	bl	30060d0 <prints>
		prints("size = 0x");
 30075d8:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 30075dc:	9109a000 	add	x0, x0, #0x268
 30075e0:	97fffabc 	bl	30060d0 <prints>
		print_hex(size);
 30075e4:	2a1303e0 	mov	w0, w19
 30075e8:	97fffaec 	bl	3006198 <print_hex>
		prints("\n");
 30075ec:	aa1803e0 	mov	x0, x24
 30075f0:	97fffab8 	bl	30060d0 <prints>
#endif
		r = 0;
 30075f4:	b9004fff 	str	wzr, [sp,#76]
 30075f8:	17ffffa4 	b	3007488 <copy_memory+0x74>

	if (size == 0)
		faultDetect();

	if ((UINT32)src < (UINT32)dst && ((UINT32)src + size) > (UINT32)dst){
		prints("copy memory: src + size > dst\n");
 30075fc:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007600:	9108a000 	add	x0, x0, #0x228
		prints("src = 0x");
		print_hex(src);
		prints("\n");
 3007604:	d0000014 	adrp	x20, 3009000 <el3_vectors>
 3007608:	91396294 	add	x20, x20, #0xe58

	if (size == 0)
		faultDetect();

	if ((UINT32)src < (UINT32)dst && ((UINT32)src + size) > (UINT32)dst){
		prints("copy memory: src + size > dst\n");
 300760c:	97fffab1 	bl	30060d0 <prints>
		prints("src = 0x");
 3007610:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007614:	91092000 	add	x0, x0, #0x248
 3007618:	97fffaae 	bl	30060d0 <prints>
		print_hex(src);
 300761c:	2a1603e0 	mov	w0, w22
 3007620:	97fffade 	bl	3006198 <print_hex>
		prints("\n");
 3007624:	aa1403e0 	mov	x0, x20
 3007628:	97fffaaa 	bl	30060d0 <prints>
		prints("dst = 0x");
 300762c:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007630:	91096000 	add	x0, x0, #0x258
 3007634:	97fffaa7 	bl	30060d0 <prints>
		print_hex(dst);
 3007638:	2a1703e0 	mov	w0, w23
 300763c:	97fffad7 	bl	3006198 <print_hex>
		prints("\n");
 3007640:	aa1403e0 	mov	x0, x20
 3007644:	97fffaa3 	bl	30060d0 <prints>
		prints("size = 0x");
 3007648:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 300764c:	9109a000 	add	x0, x0, #0x268
 3007650:	97fffaa0 	bl	30060d0 <prints>
		print_hex(size);
 3007654:	2a1303e0 	mov	w0, w19
 3007658:	97fffad0 	bl	3006198 <print_hex>
		prints("\n");
 300765c:	aa1403e0 	mov	x0, x20
 3007660:	97fffa9c 	bl	30060d0 <prints>
		faultDetect();
 3007664:	97ffff1a 	bl	30072cc <faultDetect>

0000000003007668 <calculate_image_checksum>:
unsigned int calculate_image_checksum(unsigned int start_addr, unsigned int len)
{
	int i;
	unsigned int checksum;

	for (checksum = 0, i = 0; i < len; i++)
 3007668:	34000161 	cbz	w1, 3007694 <calculate_image_checksum+0x2c>
 300766c:	0b000021 	add	w1, w1, w0
 3007670:	2a0003e2 	mov	w2, w0
 3007674:	52800000 	mov	w0, #0x0                   	// #0
		checksum += REG8(start_addr + i);
 3007678:	2a0203e3 	mov	w3, w2
 300767c:	11000442 	add	w2, w2, #0x1
unsigned int calculate_image_checksum(unsigned int start_addr, unsigned int len)
{
	int i;
	unsigned int checksum;

	for (checksum = 0, i = 0; i < len; i++)
 3007680:	6b01005f 	cmp	w2, w1
		checksum += REG8(start_addr + i);
 3007684:	39400063 	ldrb	w3, [x3]
 3007688:	0b230000 	add	w0, w0, w3, uxtb
unsigned int calculate_image_checksum(unsigned int start_addr, unsigned int len)
{
	int i;
	unsigned int checksum;

	for (checksum = 0, i = 0; i < len; i++)
 300768c:	54ffff61 	b.ne	3007678 <calculate_image_checksum+0x10>
	if (i != len) // loop no completed
	{
		faultDetect();
	}
	return checksum;
}
 3007690:	d65f03c0 	ret
unsigned int calculate_image_checksum(unsigned int start_addr, unsigned int len)
{
	int i;
	unsigned int checksum;

	for (checksum = 0, i = 0; i < len; i++)
 3007694:	52800000 	mov	w0, #0x0                   	// #0
	if (i != len) // loop no completed
	{
		faultDetect();
	}
	return checksum;
}
 3007698:	d65f03c0 	ret

000000000300769c <hexdump>:

//#if defined(ROM_DEBUG) || defined(CR_DEBUG)
#if 1
void hexdump(const char *str, const void *buf, unsigned int length)
{
 300769c:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
 30076a0:	a9015bf5 	stp	x21, x22, [sp,#16]
 30076a4:	a90263f7 	stp	x23, x24, [sp,#32]
 30076a8:	a9037bf9 	stp	x25, x30, [sp,#48]
 30076ac:	aa0103f5 	mov	x21, x1
 30076b0:	2a0203f6 	mov	w22, w2
	unsigned int i;
	char *ptr = (char *)buf;

	prints(str == NULL ? __FUNCTION__ : str);
 30076b4:	b4000800 	cbz	x0, 30077b4 <hexdump+0x118>
 30076b8:	97fffa86 	bl	30060d0 <prints>

	if ((buf == NULL) || (length == 0)) {
 30076bc:	b40006f5 	cbz	x21, 3007798 <hexdump+0xfc>
 30076c0:	340006d6 	cbz	w22, 3007798 <hexdump+0xfc>
		prints(": NULL\n");
		return;
	}

	prints(" (0x");
 30076c4:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 30076c8:	910ac000 	add	x0, x0, #0x2b0
		print_val((unsigned int)(ptr[i]), 2);

		if ((i & 0xf) == 0xf)
			prints("\n");
		else
			prints(" ");
 30076cc:	f0000017 	adrp	x23, 300a000 <__FUNCTION__.3108+0x3d8>
 30076d0:	910aa2f7 	add	x23, x23, #0x2a8
	if ((buf == NULL) || (length == 0)) {
		prints(": NULL\n");
		return;
	}

	prints(" (0x");
 30076d4:	97fffa7f 	bl	30060d0 <prints>
	print_hex((UINT32)buf);
	prints(")\n");

	for (i = 0; i < length; i++) {
		if ((i & 0xf) == 0) {
			prints("0x");
 30076d8:	d0000019 	adrp	x25, 3009000 <el3_vectors>
 30076dc:	913a8339 	add	x25, x25, #0xea0
		prints(": NULL\n");
		return;
	}

	prints(" (0x");
	print_hex((UINT32)buf);
 30076e0:	2a1503e0 	mov	w0, w21
 30076e4:	aa1503f4 	mov	x20, x21
	prints(")\n");
 30076e8:	52800013 	mov	w19, #0x0                   	// #0
 30076ec:	d0000018 	adrp	x24, 3009000 <el3_vectors>
		prints(": NULL\n");
		return;
	}

	prints(" (0x");
	print_hex((UINT32)buf);
 30076f0:	97fffaaa 	bl	3006198 <print_hex>
	prints(")\n");
 30076f4:	d0000000 	adrp	x0, 3009000 <el3_vectors>
 30076f8:	91352000 	add	x0, x0, #0xd48
 30076fc:	97fffa75 	bl	30060d0 <prints>
 3007700:	1400000b 	b	300772c <hexdump+0x90>
			prints("0x");
			print_val((uintptr_t)ptr + i, 8);
			prints(": ");
		}

		print_val((unsigned int)(ptr[i]), 2);
 3007704:	39400280 	ldrb	w0, [x20]
 3007708:	97fffa8c 	bl	3006138 <print_val>

		if ((i & 0xf) == 0xf)
 300770c:	71003ebf 	cmp	w21, #0xf
 3007710:	540002c0 	b.eq	3007768 <hexdump+0xcc>
			prints("\n");
		else
			prints(" ");
 3007714:	aa1703e0 	mov	x0, x23

	prints(" (0x");
	print_hex((UINT32)buf);
	prints(")\n");

	for (i = 0; i < length; i++) {
 3007718:	11000673 	add	w19, w19, #0x1
 300771c:	91000694 	add	x20, x20, #0x1
		print_val((unsigned int)(ptr[i]), 2);

		if ((i & 0xf) == 0xf)
			prints("\n");
		else
			prints(" ");
 3007720:	97fffa6c 	bl	30060d0 <prints>

	prints(" (0x");
	print_hex((UINT32)buf);
	prints(")\n");

	for (i = 0; i < length; i++) {
 3007724:	6b16027f 	cmp	w19, w22
 3007728:	540002c0 	b.eq	3007780 <hexdump+0xe4>
		if ((i & 0xf) == 0) {
 300772c:	72000e75 	ands	w21, w19, #0xf
			prints("0x");
			print_val((uintptr_t)ptr + i, 8);
			prints(": ");
		}

		print_val((unsigned int)(ptr[i]), 2);
 3007730:	52800041 	mov	w1, #0x2                   	// #2
	prints(" (0x");
	print_hex((UINT32)buf);
	prints(")\n");

	for (i = 0; i < length; i++) {
		if ((i & 0xf) == 0) {
 3007734:	54fffe81 	b.ne	3007704 <hexdump+0x68>
			prints("0x");
 3007738:	aa1903e0 	mov	x0, x25
 300773c:	97fffa65 	bl	30060d0 <prints>
			print_val((uintptr_t)ptr + i, 8);
 3007740:	52800101 	mov	w1, #0x8                   	// #8
 3007744:	2a1403e0 	mov	w0, w20
 3007748:	97fffa7c 	bl	3006138 <print_val>
			prints(": ");
 300774c:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007750:	910a8000 	add	x0, x0, #0x2a0
 3007754:	97fffa5f 	bl	30060d0 <prints>
		}

		print_val((unsigned int)(ptr[i]), 2);
 3007758:	39400280 	ldrb	w0, [x20]
 300775c:	52800041 	mov	w1, #0x2                   	// #2
 3007760:	97fffa76 	bl	3006138 <print_val>
 3007764:	17ffffec 	b	3007714 <hexdump+0x78>

		if ((i & 0xf) == 0xf)
			prints("\n");
 3007768:	91396300 	add	x0, x24, #0xe58

	prints(" (0x");
	print_hex((UINT32)buf);
	prints(")\n");

	for (i = 0; i < length; i++) {
 300776c:	11000673 	add	w19, w19, #0x1
 3007770:	91000694 	add	x20, x20, #0x1
		}

		print_val((unsigned int)(ptr[i]), 2);

		if ((i & 0xf) == 0xf)
			prints("\n");
 3007774:	97fffa57 	bl	30060d0 <prints>

	prints(" (0x");
	print_hex((UINT32)buf);
	prints(")\n");

	for (i = 0; i < length; i++) {
 3007778:	6b16027f 	cmp	w19, w22
 300777c:	54fffd81 	b.ne	300772c <hexdump+0x90>
	if (i != length) // loop no completed
	{
		faultDetect();
	}

	prints("\n");
 3007780:	91396300 	add	x0, x24, #0xe58
}
 3007784:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3007788:	a94263f7 	ldp	x23, x24, [sp,#32]
 300778c:	a9437bf9 	ldp	x25, x30, [sp,#48]
 3007790:	a8c453f3 	ldp	x19, x20, [sp],#64
	if (i != length) // loop no completed
	{
		faultDetect();
	}

	prints("\n");
 3007794:	17fffa4f 	b	30060d0 <prints>
}
 3007798:	a9415bf5 	ldp	x21, x22, [sp,#16]
 300779c:	a94263f7 	ldp	x23, x24, [sp,#32]
 30077a0:	a9437bf9 	ldp	x25, x30, [sp,#48]
 30077a4:	a8c453f3 	ldp	x19, x20, [sp],#64
	char *ptr = (char *)buf;

	prints(str == NULL ? __FUNCTION__ : str);

	if ((buf == NULL) || (length == 0)) {
		prints(": NULL\n");
 30077a8:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 30077ac:	910a6000 	add	x0, x0, #0x298
	if (i != length) // loop no completed
	{
		faultDetect();
	}

	prints("\n");
 30077b0:	17fffa48 	b	30060d0 <prints>
void hexdump(const char *str, const void *buf, unsigned int length)
{
	unsigned int i;
	char *ptr = (char *)buf;

	prints(str == NULL ? __FUNCTION__ : str);
 30077b4:	d0000000 	adrp	x0, 3009000 <el3_vectors>
 30077b8:	9130a000 	add	x0, x0, #0xc28
 30077bc:	17ffffbf 	b	30076b8 <hexdump+0x1c>

00000000030077c0 <loopsTrap>:
	prints("\n");
}
#endif

__attribute__((optimize("O0"))) void loopsTrap(void)
{
 30077c0:	f81e0ffe 	str	x30, [sp,#-32]!
	UINT32 rand = 0;
 30077c4:	b9001bff 	str	wzr, [sp,#24]

#if defined(ENV_SIMULATION) && !defined(FORCE_LOOPS_TRAP)
	return;
#endif

	if (genTRNG(&rand) != TRNG_SUCCESS_MAGIC)
 30077c8:	910063e0 	add	x0, sp, #0x18
 30077cc:	97fff57e 	bl	3004dc4 <genTRNG>
 30077d0:	2a0003e1 	mov	w1, w0
 30077d4:	5294ab40 	mov	w0, #0xa55a                	// #42330
 30077d8:	6b00003f 	cmp	w1, w0
 30077dc:	54000040 	b.eq	30077e4 <loopsTrap+0x24>
        faultDetect();
 30077e0:	97fffebb 	bl	30072cc <faultDetect>

	UINT32 loops = rand & 0x3FF; //10 bit entropy, 1024 possible values
 30077e4:	b9401be0 	ldr	w0, [sp,#24]
 30077e8:	12002400 	and	w0, w0, #0x3ff
 30077ec:	b9001fe0 	str	w0, [sp,#28]
	for (i = 0, j = loops; i < loops; i++, j--){
 30077f0:	b90017ff 	str	wzr, [sp,#20]
 30077f4:	b9401fe0 	ldr	w0, [sp,#28]
 30077f8:	b90013e0 	str	w0, [sp,#16]
 30077fc:	1400000e 	b	3007834 <loopsTrap+0x74>
		if ( (i + j) != loops ){
 3007800:	b94017e1 	ldr	w1, [sp,#20]
 3007804:	b94013e0 	ldr	w0, [sp,#16]
 3007808:	0b000021 	add	w1, w1, w0
 300780c:	b9401fe0 	ldr	w0, [sp,#28]
 3007810:	6b00003f 	cmp	w1, w0
 3007814:	54000040 	b.eq	300781c <loopsTrap+0x5c>
			faultDetect();
 3007818:	97fffead 	bl	30072cc <faultDetect>

	if (genTRNG(&rand) != TRNG_SUCCESS_MAGIC)
        faultDetect();

	UINT32 loops = rand & 0x3FF; //10 bit entropy, 1024 possible values
	for (i = 0, j = loops; i < loops; i++, j--){
 300781c:	b94017e0 	ldr	w0, [sp,#20]
 3007820:	11000400 	add	w0, w0, #0x1
 3007824:	b90017e0 	str	w0, [sp,#20]
 3007828:	b94013e0 	ldr	w0, [sp,#16]
 300782c:	51000400 	sub	w0, w0, #0x1
 3007830:	b90013e0 	str	w0, [sp,#16]
 3007834:	b94017e1 	ldr	w1, [sp,#20]
 3007838:	b9401fe0 	ldr	w0, [sp,#28]
 300783c:	6b00003f 	cmp	w1, w0
 3007840:	54fffe03 	b.cc	3007800 <loopsTrap+0x40>
		if ( (i + j) != loops ){
			faultDetect();
		}
	}
	if (i != loops) // loop no completed
 3007844:	b94017e1 	ldr	w1, [sp,#20]
 3007848:	b9401fe0 	ldr	w0, [sp,#28]
 300784c:	6b00003f 	cmp	w1, w0
 3007850:	54000040 	b.eq	3007858 <loopsTrap+0x98>
	{
		faultDetect();
 3007854:	97fffe9e 	bl	30072cc <faultDetect>
	}

}
 3007858:	f84207fe 	ldr	x30, [sp],#32
 300785c:	d65f03c0 	ret

0000000003007860 <getDDRSize>:
//returned unit is Gb
UINT32 getDDRSize(){
 3007860:	a9be53f3 	stp	x19, x20, [sp,#-32]!
	UINT32 two_dcsys_en,out_to_phy_sel;
	UINT32 dc0_dram_size, dc1_dram_size;

	loopsTrap();
	two_dcsys_en = (REG32(DC_SYS_MISC) & 0x00000001);
 3007864:	d2900093 	mov	x19, #0x8004                	// #32772
 3007868:	f2b30013 	movk	x19, #0x9800, lsl #16
		faultDetect();
	}

}
//returned unit is Gb
UINT32 getDDRSize(){
 300786c:	a9017bf5 	stp	x21, x30, [sp,#16]
	UINT32 two_dcsys_en,out_to_phy_sel;
	UINT32 dc0_dram_size, dc1_dram_size;

	loopsTrap();
 3007870:	97ffffd4 	bl	30077c0 <loopsTrap>
	two_dcsys_en = (REG32(DC_SYS_MISC) & 0x00000001);
 3007874:	b9400274 	ldr	w20, [x19]
	loopsTrap();
 3007878:	97ffffd2 	bl	30077c0 <loopsTrap>
	out_to_phy_sel = (REG32(DC_SYS_MISC) & 0x00200000);
 300787c:	b9400260 	ldr	w0, [x19]

	if (two_dcsys_en){ //two dc
 3007880:	36000274 	tbz	w20, #0, 30078cc <getDDRSize+0x6c>
		dc0_dram_size = (REG32(DC_DUMMY_REG0) >> 16) & 0x1F;
 3007884:	d2903e01 	mov	x1, #0x81f0                	// #33264
 3007888:	f2b30001 	movk	x1, #0x9800, lsl #16
		dc1_dram_size = (REG32(DC_DUMMY_REG1) >> 16) & 0x1F;
 300788c:	d2903e80 	mov	x0, #0x81f4                	// #33268
 3007890:	f2b30000 	movk	x0, #0x9800, lsl #16
	two_dcsys_en = (REG32(DC_SYS_MISC) & 0x00000001);
	loopsTrap();
	out_to_phy_sel = (REG32(DC_SYS_MISC) & 0x00200000);

	if (two_dcsys_en){ //two dc
		dc0_dram_size = (REG32(DC_DUMMY_REG0) >> 16) & 0x1F;
 3007894:	b9400035 	ldr	w21, [x1]
		dc1_dram_size = (REG32(DC_DUMMY_REG1) >> 16) & 0x1F;
 3007898:	b9400014 	ldr	w20, [x0]
	two_dcsys_en = (REG32(DC_SYS_MISC) & 0x00000001);
	loopsTrap();
	out_to_phy_sel = (REG32(DC_SYS_MISC) & 0x00200000);

	if (two_dcsys_en){ //two dc
		dc0_dram_size = (REG32(DC_DUMMY_REG0) >> 16) & 0x1F;
 300789c:	d35052b5 	ubfx	x21, x21, #16, #5
		dc1_dram_size = (REG32(DC_DUMMY_REG1) >> 16) & 0x1F;

		if (dc0_dram_size <= 0xF){
 30078a0:	71003ebf 	cmp	w21, #0xf
	loopsTrap();
	out_to_phy_sel = (REG32(DC_SYS_MISC) & 0x00200000);

	if (two_dcsys_en){ //two dc
		dc0_dram_size = (REG32(DC_DUMMY_REG0) >> 16) & 0x1F;
		dc1_dram_size = (REG32(DC_DUMMY_REG1) >> 16) & 0x1F;
 30078a4:	d3505294 	ubfx	x20, x20, #16, #5

		if (dc0_dram_size <= 0xF){
 30078a8:	540003a8 	b.hi	300791c <getDDRSize+0xbc>
			print_hex(dc0_dram_size);
			prints(")\n");
			dc0_dram_size = 0;
		}

		if (dc1_dram_size <= 0xF){
 30078ac:	71003e9f 	cmp	w20, #0xf
	if (two_dcsys_en){ //two dc
		dc0_dram_size = (REG32(DC_DUMMY_REG0) >> 16) & 0x1F;
		dc1_dram_size = (REG32(DC_DUMMY_REG1) >> 16) & 0x1F;

		if (dc0_dram_size <= 0xF){
			dc0_dram_size = dc0_dram_size + 1;
 30078b0:	110006b3 	add	w19, w21, #0x1
			print_hex(dc0_dram_size);
			prints(")\n");
			dc0_dram_size = 0;
		}

		if (dc1_dram_size <= 0xF){
 30078b4:	540004a8 	b.hi	3007948 <getDDRSize+0xe8>
			dc1_dram_size = dc1_dram_size + 1;
 30078b8:	11000680 	add	w0, w20, #0x1
			print_hex(dc1_dram_size);
			prints(")\n");
			dc1_dram_size = 0;
		}

		return 	(dc0_dram_size + dc1_dram_size);
 30078bc:	0b130000 	add	w0, w0, w19

			return 	(dc0_dram_size);
		}
	}
	return 0;
}
 30078c0:	a9417bf5 	ldp	x21, x30, [sp,#16]
 30078c4:	a8c253f3 	ldp	x19, x20, [sp],#32
 30078c8:	d65f03c0 	ret
		}

		return 	(dc0_dram_size + dc1_dram_size);
	}
	else{
		if (out_to_phy_sel){ //dc1 only
 30078cc:	36a80160 	tbz	w0, #21, 30078f8 <getDDRSize+0x98>
			dc1_dram_size = (REG32(DC_DUMMY_REG1) >> 16) & 0x1F;
 30078d0:	d2903e80 	mov	x0, #0x81f4                	// #33268
 30078d4:	f2b30000 	movk	x0, #0x9800, lsl #16
 30078d8:	b9400000 	ldr	w0, [x0]
 30078dc:	d3505013 	ubfx	x19, x0, #16, #5

			if (dc1_dram_size <= 0xF){
 30078e0:	71003e7f 	cmp	w19, #0xf
 30078e4:	54000468 	b.hi	3007970 <getDDRSize+0x110>
		}
		else{ //dc0 only
			dc0_dram_size = (REG32(DC_DUMMY_REG0) >> 16) & 0x1F;

			if (dc0_dram_size <= 0xF){
				dc0_dram_size = dc0_dram_size + 1;
 30078e8:	11000660 	add	w0, w19, #0x1

			return 	(dc0_dram_size);
		}
	}
	return 0;
}
 30078ec:	a9417bf5 	ldp	x21, x30, [sp,#16]
 30078f0:	a8c253f3 	ldp	x19, x20, [sp],#32
 30078f4:	d65f03c0 	ret
			}

			return 	(dc1_dram_size);
		}
		else{ //dc0 only
			dc0_dram_size = (REG32(DC_DUMMY_REG0) >> 16) & 0x1F;
 30078f8:	d2903e00 	mov	x0, #0x81f0                	// #33264
 30078fc:	f2b30000 	movk	x0, #0x9800, lsl #16
 3007900:	b9400000 	ldr	w0, [x0]
 3007904:	d3505013 	ubfx	x19, x0, #16, #5

			if (dc0_dram_size <= 0xF){
 3007908:	71003e7f 	cmp	w19, #0xf
 300790c:	54fffee9 	b.ls	30078e8 <getDDRSize+0x88>
				dc0_dram_size = dc0_dram_size + 1;
			}
			else{
				prints("dc0_dram_size error(0x");
 3007910:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007914:	910ae000 	add	x0, x0, #0x2b8
 3007918:	14000018 	b	3007978 <getDDRSize+0x118>

		if (dc0_dram_size <= 0xF){
			dc0_dram_size = dc0_dram_size + 1;
		}
		else{
			prints("dc0_dram_size error(0x");
 300791c:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007920:	910ae000 	add	x0, x0, #0x2b8
			print_hex(dc0_dram_size);
			prints(")\n");
			dc0_dram_size = 0;
 3007924:	52800013 	mov	w19, #0x0                   	// #0

		if (dc0_dram_size <= 0xF){
			dc0_dram_size = dc0_dram_size + 1;
		}
		else{
			prints("dc0_dram_size error(0x");
 3007928:	97fff9ea 	bl	30060d0 <prints>
			print_hex(dc0_dram_size);
 300792c:	2a1503e0 	mov	w0, w21
 3007930:	97fffa1a 	bl	3006198 <print_hex>
			prints(")\n");
 3007934:	d0000000 	adrp	x0, 3009000 <el3_vectors>
 3007938:	91352000 	add	x0, x0, #0xd48
 300793c:	97fff9e5 	bl	30060d0 <prints>
			dc0_dram_size = 0;
		}

		if (dc1_dram_size <= 0xF){
 3007940:	71003e9f 	cmp	w20, #0xf
 3007944:	54fffba9 	b.ls	30078b8 <getDDRSize+0x58>
			dc1_dram_size = dc1_dram_size + 1;
		}
		else{
			prints("dc1_dram_size error(0x");
 3007948:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 300794c:	910b4000 	add	x0, x0, #0x2d0
 3007950:	97fff9e0 	bl	30060d0 <prints>
			print_hex(dc1_dram_size);
 3007954:	2a1403e0 	mov	w0, w20
 3007958:	97fffa10 	bl	3006198 <print_hex>
			prints(")\n");
 300795c:	d0000000 	adrp	x0, 3009000 <el3_vectors>
 3007960:	91352000 	add	x0, x0, #0xd48
 3007964:	97fff9db 	bl	30060d0 <prints>
			dc1_dram_size = 0;
 3007968:	52800000 	mov	w0, #0x0                   	// #0
 300796c:	17ffffd4 	b	30078bc <getDDRSize+0x5c>

			if (dc1_dram_size <= 0xF){
				dc1_dram_size = dc1_dram_size + 1;
			}
			else{
				prints("dc1_dram_size error(0x");
 3007970:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007974:	910b4000 	add	x0, x0, #0x2d0

			if (dc0_dram_size <= 0xF){
				dc0_dram_size = dc0_dram_size + 1;
			}
			else{
				prints("dc0_dram_size error(0x");
 3007978:	97fff9d6 	bl	30060d0 <prints>
				print_hex(dc0_dram_size);
 300797c:	2a1303e0 	mov	w0, w19
 3007980:	97fffa06 	bl	3006198 <print_hex>
				prints(")\n");
 3007984:	d0000000 	adrp	x0, 3009000 <el3_vectors>
 3007988:	91352000 	add	x0, x0, #0xd48
 300798c:	97fff9d1 	bl	30060d0 <prints>
				dc0_dram_size = 0;
 3007990:	52800000 	mov	w0, #0x0                   	// #0

			return 	(dc0_dram_size);
		}
	}
	return 0;
}
 3007994:	a9417bf5 	ldp	x21, x30, [sp,#16]
 3007998:	a8c253f3 	ldp	x19, x20, [sp],#32
 300799c:	d65f03c0 	ret

00000000030079a0 <reverse_rsa_signature>:

	REG32(MIS_TCWCR) = 0;		// enable watchdog
}

int reverse_rsa_signature(unsigned int addr)
{
 30079a0:	d10043ff 	sub	sp, sp, #0x10
 30079a4:	d2800001 	mov	x1, #0x0                   	// #0
	unsigned int backup_val[4],i;

	for(i=0;i<4;i++)
		backup_val[i] = swap_endian(REG32(addr+(i*4)));
 30079a8:	0b010002 	add	w2, w0, w1
 30079ac:	b9400042 	ldr	w2, [x2]
 30079b0:	5ac00842 	rev	w2, w2
 30079b4:	b8216be2 	str	w2, [sp,x1]
 30079b8:	91001021 	add	x1, x1, #0x4

int reverse_rsa_signature(unsigned int addr)
{
	unsigned int backup_val[4],i;

	for(i=0;i<4;i++)
 30079bc:	f100403f 	cmp	x1, #0x10
 30079c0:	54ffff41 	b.ne	30079a8 <reverse_rsa_signature+0x8>
		backup_val[i] = swap_endian(REG32(addr+(i*4)));
	if (i != 4) // loop no completed
	{
		faultDetect();
	}
	REG32(addr) = swap_endian(REG32(addr+28));
 30079c4:	11007002 	add	w2, w0, #0x1c
 30079c8:	2a0003e7 	mov	w7, w0
	REG32(addr+4) = swap_endian(REG32(addr+24));
 30079cc:	11006003 	add	w3, w0, #0x18
 30079d0:	11001006 	add	w6, w0, #0x4
	REG32(addr+8) = swap_endian(REG32(addr+20));
 30079d4:	11005004 	add	w4, w0, #0x14
 30079d8:	11002009 	add	w9, w0, #0x8
		backup_val[i] = swap_endian(REG32(addr+(i*4)));
	if (i != 4) // loop no completed
	{
		faultDetect();
	}
	REG32(addr) = swap_endian(REG32(addr+28));
 30079dc:	b9400041 	ldr	w1, [x2]
	REG32(addr+4) = swap_endian(REG32(addr+24));
	REG32(addr+8) = swap_endian(REG32(addr+20));
	REG32(addr+12) = swap_endian(REG32(addr+16));
 30079e0:	11004005 	add	w5, w0, #0x10
 30079e4:	11003000 	add	w0, w0, #0xc
	REG32(addr+16) = backup_val[3];
 30079e8:	b9400fe8 	ldr	w8, [sp,#12]
 30079ec:	5ac00821 	rev	w1, w1
		backup_val[i] = swap_endian(REG32(addr+(i*4)));
	if (i != 4) // loop no completed
	{
		faultDetect();
	}
	REG32(addr) = swap_endian(REG32(addr+28));
 30079f0:	b90000e1 	str	w1, [x7]
	REG32(addr+4) = swap_endian(REG32(addr+24));
	REG32(addr+8) = swap_endian(REG32(addr+20));
	REG32(addr+12) = swap_endian(REG32(addr+16));
	REG32(addr+16) = backup_val[3];
	REG32(addr+20) = backup_val[2];
 30079f4:	b9400be7 	ldr	w7, [sp,#8]
	if (i != 4) // loop no completed
	{
		faultDetect();
	}
	REG32(addr) = swap_endian(REG32(addr+28));
	REG32(addr+4) = swap_endian(REG32(addr+24));
 30079f8:	b9400061 	ldr	w1, [x3]
 30079fc:	5ac00821 	rev	w1, w1
 3007a00:	b90000c1 	str	w1, [x6]
	REG32(addr+8) = swap_endian(REG32(addr+20));
	REG32(addr+12) = swap_endian(REG32(addr+16));
	REG32(addr+16) = backup_val[3];
	REG32(addr+20) = backup_val[2];
	REG32(addr+24) = backup_val[1];
 3007a04:	b94007e6 	ldr	w6, [sp,#4]
	{
		faultDetect();
	}
	REG32(addr) = swap_endian(REG32(addr+28));
	REG32(addr+4) = swap_endian(REG32(addr+24));
	REG32(addr+8) = swap_endian(REG32(addr+20));
 3007a08:	b9400081 	ldr	w1, [x4]
 3007a0c:	5ac00821 	rev	w1, w1
 3007a10:	b9000121 	str	w1, [x9]
	REG32(addr+12) = swap_endian(REG32(addr+16));
 3007a14:	b94000a1 	ldr	w1, [x5]
 3007a18:	5ac00821 	rev	w1, w1
 3007a1c:	b9000001 	str	w1, [x0]
	REG32(addr+16) = backup_val[3];
 3007a20:	b90000a8 	str	w8, [x5]
	REG32(addr+20) = backup_val[2];
	REG32(addr+24) = backup_val[1];
	REG32(addr+28) = backup_val[0];

	return 0;
}
 3007a24:	52800000 	mov	w0, #0x0                   	// #0
	REG32(addr) = swap_endian(REG32(addr+28));
	REG32(addr+4) = swap_endian(REG32(addr+24));
	REG32(addr+8) = swap_endian(REG32(addr+20));
	REG32(addr+12) = swap_endian(REG32(addr+16));
	REG32(addr+16) = backup_val[3];
	REG32(addr+20) = backup_val[2];
 3007a28:	b9000087 	str	w7, [x4]
	REG32(addr+24) = backup_val[1];
	REG32(addr+28) = backup_val[0];
 3007a2c:	b94003e1 	ldr	w1, [sp]
	REG32(addr+4) = swap_endian(REG32(addr+24));
	REG32(addr+8) = swap_endian(REG32(addr+20));
	REG32(addr+12) = swap_endian(REG32(addr+16));
	REG32(addr+16) = backup_val[3];
	REG32(addr+20) = backup_val[2];
	REG32(addr+24) = backup_val[1];
 3007a30:	b9000066 	str	w6, [x3]
	REG32(addr+28) = backup_val[0];
 3007a34:	b9000041 	str	w1, [x2]

	return 0;
}
 3007a38:	910043ff 	add	sp, sp, #0x10
 3007a3c:	d65f03c0 	ret

0000000003007a40 <getFWFeature>:
{
	watchdog_reset();
}

int getFWFeature(unsigned int addr, unsigned int fea)
{
 3007a40:	a9be53f3 	stp	x19, x20, [sp,#-32]!
 3007a44:	2a0103f4 	mov	w20, w1
 3007a48:	2a0003f3 	mov	w19, w0
 3007a4c:	f9000bfe 	str	x30, [sp,#16]
	loopsTrap();
 3007a50:	97ffff5c 	bl	30077c0 <loopsTrap>
	if (fea > 31)
 3007a54:	71007e9f 	cmp	w20, #0x1f
 3007a58:	54000108 	b.hi	3007a78 <getFWFeature+0x38>
		faultDetect();
	return ((REG32(addr) >> fea) & 0x1);
 3007a5c:	2a1303f3 	mov	w19, w19
}
 3007a60:	f9400bfe 	ldr	x30, [sp,#16]
int getFWFeature(unsigned int addr, unsigned int fea)
{
	loopsTrap();
	if (fea > 31)
		faultDetect();
	return ((REG32(addr) >> fea) & 0x1);
 3007a64:	b9400260 	ldr	w0, [x19]
 3007a68:	1ad42400 	lsr	w0, w0, w20
}
 3007a6c:	12000000 	and	w0, w0, #0x1
 3007a70:	a8c253f3 	ldp	x19, x20, [sp],#32
 3007a74:	d65f03c0 	ret

int getFWFeature(unsigned int addr, unsigned int fea)
{
	loopsTrap();
	if (fea > 31)
		faultDetect();
 3007a78:	97fffe15 	bl	30072cc <faultDetect>

0000000003007a7c <setFWFeature>:
	return ((REG32(addr) >> fea) & 0x1);
}

int setFWFeature(unsigned int addr, unsigned int fea)
{
 3007a7c:	a9be53f3 	stp	x19, x20, [sp,#-32]!
 3007a80:	2a0003f4 	mov	w20, w0
 3007a84:	2a0103f3 	mov	w19, w1
 3007a88:	f9000bfe 	str	x30, [sp,#16]
	loopsTrap();
 3007a8c:	97ffff4d 	bl	30077c0 <loopsTrap>
	if (addr != ISO_COLD_RST9)
 3007a90:	528ecf01 	mov	w1, #0x7678                	// #30328
 3007a94:	72b30001 	movk	w1, #0x9800, lsl #16
 3007a98:	6b01029f 	cmp	w20, w1
 3007a9c:	540001e1 	b.ne	3007ad8 <setFWFeature+0x5c>
		faultDetect();
	loopsTrap();
 3007aa0:	97ffff48 	bl	30077c0 <loopsTrap>
	if (fea > 31)
 3007aa4:	71007e7f 	cmp	w19, #0x1f
 3007aa8:	54000188 	b.hi	3007ad8 <setFWFeature+0x5c>
		faultDetect();
    REG32(addr) |= (1<<fea);
 3007aac:	d28ecf03 	mov	x3, #0x7678                	// #30328
 3007ab0:	f2b30003 	movk	x3, #0x9800, lsl #16
 3007ab4:	52800021 	mov	w1, #0x1                   	// #1
	return 1;
}
 3007ab8:	2a0103e0 	mov	w0, w1
	if (addr != ISO_COLD_RST9)
		faultDetect();
	loopsTrap();
	if (fea > 31)
		faultDetect();
    REG32(addr) |= (1<<fea);
 3007abc:	1ad32021 	lsl	w1, w1, w19
 3007ac0:	b9400062 	ldr	w2, [x3]
 3007ac4:	2a020021 	orr	w1, w1, w2
 3007ac8:	b9000061 	str	w1, [x3]
	return 1;
}
 3007acc:	f9400bfe 	ldr	x30, [sp,#16]
 3007ad0:	a8c253f3 	ldp	x19, x20, [sp],#32
 3007ad4:	d65f03c0 	ret

int setFWFeature(unsigned int addr, unsigned int fea)
{
	loopsTrap();
	if (addr != ISO_COLD_RST9)
		faultDetect();
 3007ad8:	97fffdfd 	bl	30072cc <faultDetect>

0000000003007adc <clrFWFeature>:
    REG32(addr) |= (1<<fea);
	return 1;
}

int clrFWFeature(unsigned int addr, unsigned int fea)
{
 3007adc:	a9be53f3 	stp	x19, x20, [sp,#-32]!
 3007ae0:	2a0003f4 	mov	w20, w0
 3007ae4:	2a0103f3 	mov	w19, w1
 3007ae8:	f9000bfe 	str	x30, [sp,#16]
	loopsTrap();
 3007aec:	97ffff35 	bl	30077c0 <loopsTrap>
	if (addr != ISO_COLD_RST9)
 3007af0:	528ecf01 	mov	w1, #0x7678                	// #30328
 3007af4:	72b30001 	movk	w1, #0x9800, lsl #16
 3007af8:	6b01029f 	cmp	w20, w1
 3007afc:	540001e1 	b.ne	3007b38 <clrFWFeature+0x5c>
		faultDetect();
	loopsTrap();
 3007b00:	97ffff30 	bl	30077c0 <loopsTrap>
	if (fea > 31)
 3007b04:	71007e7f 	cmp	w19, #0x1f
 3007b08:	54000188 	b.hi	3007b38 <clrFWFeature+0x5c>
		faultDetect();
    REG32(addr) &= ~(1<<fea);
 3007b0c:	d28ecf02 	mov	x2, #0x7678                	// #30328
 3007b10:	f2b30002 	movk	x2, #0x9800, lsl #16
 3007b14:	52800021 	mov	w1, #0x1                   	// #1
	return 1;
}
 3007b18:	2a0103e0 	mov	w0, w1
	if (addr != ISO_COLD_RST9)
		faultDetect();
	loopsTrap();
	if (fea > 31)
		faultDetect();
    REG32(addr) &= ~(1<<fea);
 3007b1c:	1ad32021 	lsl	w1, w1, w19
 3007b20:	b9400043 	ldr	w3, [x2]
 3007b24:	0a210061 	bic	w1, w3, w1
 3007b28:	b9000041 	str	w1, [x2]
	return 1;
}
 3007b2c:	f9400bfe 	ldr	x30, [sp,#16]
 3007b30:	a8c253f3 	ldp	x19, x20, [sp],#32
 3007b34:	d65f03c0 	ret

int clrFWFeature(unsigned int addr, unsigned int fea)
{
	loopsTrap();
	if (addr != ISO_COLD_RST9)
		faultDetect();
 3007b38:	97fffde5 	bl	30072cc <faultDetect>

0000000003007b3c <string_len>:
}

int string_len(const char *str)
{
	int count = 0;
	while (*str++ != '\0')
 3007b3c:	91000401 	add	x1, x0, #0x1
 3007b40:	39400000 	ldrb	w0, [x0]
 3007b44:	340000c0 	cbz	w0, 3007b5c <string_len+0x20>
 3007b48:	52800000 	mov	w0, #0x0                   	// #0
 3007b4c:	38401422 	ldrb	w2, [x1],#1
		count++;
 3007b50:	11000400 	add	w0, w0, #0x1
}

int string_len(const char *str)
{
	int count = 0;
	while (*str++ != '\0')
 3007b54:	35ffffc2 	cbnz	w2, 3007b4c <string_len+0x10>
		count++;

	return count;
}
 3007b58:	d65f03c0 	ret
	return 1;
}

int string_len(const char *str)
{
	int count = 0;
 3007b5c:	52800000 	mov	w0, #0x0                   	// #0
	while (*str++ != '\0')
		count++;

	return count;
}
 3007b60:	d65f03c0 	ret

0000000003007b64 <verify_img_signature>:
/************************************************************************
 *  Function body
 ************************************************************************/

int verify_img_signature(void *p_img, unsigned int img_size, void *p_signature, rsa_key_t *p_rsa_key, unsigned char sha_auto_padding)
{
 3007b64:	a9ba53f3 	stp	x19, x20, [sp,#-96]!
	int ret = ERR_DEFAULT;
	volatile unsigned int tmp = 0;
	unsigned char *hash1 = (unsigned char *)sha256_output;
	unsigned char *hash2 = (unsigned char *)rsa_output;

	if ((p_img == NULL) || (p_signature == NULL) || (p_rsa_key == NULL)) {
 3007b68:	eb1f005f 	cmp	x2, xzr
/************************************************************************
 *  Function body
 ************************************************************************/

int verify_img_signature(void *p_img, unsigned int img_size, void *p_signature, rsa_key_t *p_rsa_key, unsigned char sha_auto_padding)
{
 3007b6c:	aa0203f3 	mov	x19, x2
 3007b70:	a9015bf5 	stp	x21, x22, [sp,#16]
 3007b74:	aa0303f5 	mov	x21, x3
	int ret = ERR_DEFAULT;
	volatile unsigned int tmp = 0;
	unsigned char *hash1 = (unsigned char *)sha256_output;
	unsigned char *hash2 = (unsigned char *)rsa_output;

	if ((p_img == NULL) || (p_signature == NULL) || (p_rsa_key == NULL)) {
 3007b78:	1a9f17e3 	cset	w3, eq
 3007b7c:	eb1f02bf 	cmp	x21, xzr
/************************************************************************
 *  Function body
 ************************************************************************/

int verify_img_signature(void *p_img, unsigned int img_size, void *p_signature, rsa_key_t *p_rsa_key, unsigned char sha_auto_padding)
{
 3007b80:	f90023fe 	str	x30, [sp,#64]
	int ret = ERR_DEFAULT;
	volatile unsigned int tmp = 0;
	unsigned char *hash1 = (unsigned char *)sha256_output;
	unsigned char *hash2 = (unsigned char *)rsa_output;

	if ((p_img == NULL) || (p_signature == NULL) || (p_rsa_key == NULL)) {
 3007b84:	1a9f17e2 	cset	w2, eq
 ************************************************************************/

int verify_img_signature(void *p_img, unsigned int img_size, void *p_signature, rsa_key_t *p_rsa_key, unsigned char sha_auto_padding)
{
	int ret = ERR_DEFAULT;
	volatile unsigned int tmp = 0;
 3007b88:	b9005fff 	str	wzr, [sp,#92]
/************************************************************************
 *  Function body
 ************************************************************************/

int verify_img_signature(void *p_img, unsigned int img_size, void *p_signature, rsa_key_t *p_rsa_key, unsigned char sha_auto_padding)
{
 3007b8c:	a90263f7 	stp	x23, x24, [sp,#32]
 3007b90:	a9036bf9 	stp	x25, x26, [sp,#48]
	int ret = ERR_DEFAULT;
	volatile unsigned int tmp = 0;
	unsigned char *hash1 = (unsigned char *)sha256_output;
	unsigned char *hash2 = (unsigned char *)rsa_output;

	if ((p_img == NULL) || (p_signature == NULL) || (p_rsa_key == NULL)) {
 3007b94:	2a020062 	orr	w2, w3, w2
/************************************************************************
 *  Function body
 ************************************************************************/

int verify_img_signature(void *p_img, unsigned int img_size, void *p_signature, rsa_key_t *p_rsa_key, unsigned char sha_auto_padding)
{
 3007b98:	aa0003f4 	mov	x20, x0
 3007b9c:	2a0103f6 	mov	w22, w1
 3007ba0:	53001c97 	uxtb	w23, w4
	int ret = ERR_DEFAULT;
	volatile unsigned int tmp = 0;
	unsigned char *hash1 = (unsigned char *)sha256_output;
	unsigned char *hash2 = (unsigned char *)rsa_output;

	if ((p_img == NULL) || (p_signature == NULL) || (p_rsa_key == NULL)) {
 3007ba4:	35000522 	cbnz	w2, 3007c48 <verify_img_signature+0xe4>
 3007ba8:	b4000500 	cbz	x0, 3007c48 <verify_img_signature+0xe4>
	hexdump("p_rsa_key", p_rsa_key->key, RSA_SIGNATURE_LENGTH);
	hexdump("p_signature", p_signature, RSA_SIGNATURE_LENGTH);
	#endif

	// 0. reset buffer
	set_memory(rsa_output, 0xff, sizeof(rsa_output));
 3007bac:	b000003a 	adrp	x26, 300c000 <g_backup_BootArray_FW_Table+0x2a0>
 3007bb0:	91198358 	add	x24, x26, #0x660
 3007bb4:	52802002 	mov	w2, #0x100                 	// #256
 3007bb8:	52801fe1 	mov	w1, #0xff                  	// #255
 3007bbc:	aa1803e0 	mov	x0, x24
	set_memory(sha256_output, 0, sizeof(sha256_output));
 3007bc0:	91040319 	add	x25, x24, #0x100
	hexdump("p_rsa_key", p_rsa_key->key, RSA_SIGNATURE_LENGTH);
	hexdump("p_signature", p_signature, RSA_SIGNATURE_LENGTH);
	#endif

	// 0. reset buffer
	set_memory(rsa_output, 0xff, sizeof(rsa_output));
 3007bc4:	97fffd8e 	bl	30071fc <set_memory>
	set_memory(sha256_output, 0, sizeof(sha256_output));
 3007bc8:	52800402 	mov	w2, #0x20                  	// #32
 3007bcc:	52800001 	mov	w1, #0x0                   	// #0
 3007bd0:	aa1903e0 	mov	x0, x25
 3007bd4:	97fffd8a 	bl	30071fc <set_memory>

	#ifdef ENABLE_MMU
	sys_dcache_flush_MVA((uintptr_t)p_img, (uintptr_t)p_img + img_size);
 3007bd8:	0b1402c1 	add	w1, w22, w20
 3007bdc:	2a1403e0 	mov	w0, w20
 3007be0:	97ffe11b 	bl	300004c <sys_dcache_flush_MVA>
	sys_dcache_flush_MVA((uintptr_t)p_signature, (uintptr_t)p_signature + 256);
 3007be4:	11040261 	add	w1, w19, #0x100
 3007be8:	2a1303e0 	mov	w0, w19
 3007bec:	97ffe118 	bl	300004c <sys_dcache_flush_MVA>
	sys_dcache_flush_MVA((uintptr_t)rsa_output, (uintptr_t)rsa_output + sizeof(rsa_output));
 3007bf0:	11040301 	add	w1, w24, #0x100
 3007bf4:	2a1803e0 	mov	w0, w24
 3007bf8:	97ffe115 	bl	300004c <sys_dcache_flush_MVA>
	sys_dcache_flush_MVA((uintptr_t)sha256_output, (uintptr_t)sha256_output + sizeof(sha256_output));
 3007bfc:	11008321 	add	w1, w25, #0x20
 3007c00:	2a1903e0 	mov	w0, w25
 3007c04:	97ffe112 	bl	300004c <sys_dcache_flush_MVA>
	#endif

	// 1. calculate image hash value
	tmp = SHA256_hash((unsigned char *)p_img, img_size, hash1, NULL, sha_auto_padding);
 3007c08:	aa1403e0 	mov	x0, x20
 3007c0c:	2a1703e4 	mov	w4, w23
 3007c10:	d2800003 	mov	x3, #0x0                   	// #0
 3007c14:	aa1903e2 	mov	x2, x25
 3007c18:	2a1603e1 	mov	w1, w22
 3007c1c:	97ffe9f7 	bl	30023f8 <SHA256_hash>
 3007c20:	b9005fe0 	str	w0, [sp,#92]
	if (tmp != OK) {
		return ERR_SHA256_ERROR;
 3007c24:	52800620 	mov	w0, #0x31                  	// #49
	sys_dcache_flush_MVA((uintptr_t)sha256_output, (uintptr_t)sha256_output + sizeof(sha256_output));
	#endif

	// 1. calculate image hash value
	tmp = SHA256_hash((unsigned char *)p_img, img_size, hash1, NULL, sha_auto_padding);
	if (tmp != OK) {
 3007c28:	b9405ff4 	ldr	w20, [sp,#92]
 3007c2c:	340001d4 	cbz	w20, 3007c64 <verify_img_signature+0x100>
	prints("\n");
	#endif // ROM_DEBUG
#endif // SKIP_COMPARE_CHECKSUM

	return ret;
}
 3007c30:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3007c34:	a94263f7 	ldp	x23, x24, [sp,#32]
 3007c38:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3007c3c:	f94023fe 	ldr	x30, [sp,#64]
 3007c40:	a8c653f3 	ldp	x19, x20, [sp],#96
 3007c44:	d65f03c0 	ret
 3007c48:	a9415bf5 	ldp	x21, x22, [sp,#16]
 3007c4c:	a94263f7 	ldp	x23, x24, [sp,#32]
 3007c50:	a9436bf9 	ldp	x25, x26, [sp,#48]
 3007c54:	f94023fe 	ldr	x30, [sp,#64]
	volatile unsigned int tmp = 0;
	unsigned char *hash1 = (unsigned char *)sha256_output;
	unsigned char *hash2 = (unsigned char *)rsa_output;

	if ((p_img == NULL) || (p_signature == NULL) || (p_rsa_key == NULL)) {
		return ERR_INVALID_PARAM;
 3007c58:	52801260 	mov	w0, #0x93                  	// #147
	prints("\n");
	#endif // ROM_DEBUG
#endif // SKIP_COMPARE_CHECKSUM

	return ret;
}
 3007c5c:	a8c653f3 	ldp	x19, x20, [sp],#96
 3007c60:	d65f03c0 	ret
	tmp = SHA256_hash((unsigned char *)p_img, img_size, hash1, NULL, sha_auto_padding);
	if (tmp != OK) {
		return ERR_SHA256_ERROR;
	}
	#ifdef ROM_DEBUG
	hexdump("sha256 hash", hash1, SHA256_SIZE);
 3007c64:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007c68:	52800402 	mov	w2, #0x20                  	// #32
 3007c6c:	aa1903e1 	mov	x1, x25
 3007c70:	910ba000 	add	x0, x0, #0x2e8
 3007c74:	97fffe8a 	bl	300769c <hexdump>
	#endif

	// 2. recover hash value from RSA signature
	ret = smc_HW_RSA((uintptr_t)p_signature, p_rsa_key, (uintptr_t)hash2);
 3007c78:	2a1303e0 	mov	w0, w19
 3007c7c:	2a1803e2 	mov	w2, w24
 3007c80:	aa1503e1 	mov	x1, x21
 3007c84:	9400075d 	bl	30099f8 <smc_HW_RSA>
 3007c88:	2a0003f3 	mov	w19, w0
	if (ret != OK) {
 3007c8c:	350006c0 	cbnz	w0, 3007d64 <verify_img_signature+0x200>
		#endif
		return ret;
	}

	#ifdef ROM_DEBUG
	PrintInfo("return hash2", (uintptr_t)hash2);
 3007c90:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007c94:	2a1803e1 	mov	w1, w24
 3007c98:	910c8000 	add	x0, x0, #0x320
 3007c9c:	97fff941 	bl	30061a0 <PrintInfo>
	prints("skip compare checksum\n");
	#endif

#else // SKIP_COMPARE_CHECKSUM

	tmp = compare_memory(hash1, hash2, SHA256_SIZE);
 3007ca0:	52800402 	mov	w2, #0x20                  	// #32
 3007ca4:	aa1803e1 	mov	x1, x24
 3007ca8:	aa1903e0 	mov	x0, x25
 3007cac:	97fffda7 	bl	3007348 <compare_memory>
 3007cb0:	b9005fe0 	str	w0, [sp,#92]
	ret = (tmp == SHA256_SIZE ? OK : ERR_NOT_MATCH);
 3007cb4:	b9405fe0 	ldr	w0, [sp,#92]
 3007cb8:	7100801f 	cmp	w0, #0x20
 3007cbc:	54000060 	b.eq	3007cc8 <verify_img_signature+0x164>
 3007cc0:	528007f4 	mov	w20, #0x3f                  	// #63
 3007cc4:	2a1403f3 	mov	w19, w20
	#ifdef ROM_DEBUG
	hexdump("hash1 from CP", hash1, SHA256_SIZE);
 3007cc8:	9119835a 	add	x26, x26, #0x660
 3007ccc:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007cd0:	52800402 	mov	w2, #0x20                  	// #32
 3007cd4:	91040341 	add	x1, x26, #0x100
 3007cd8:	910cc000 	add	x0, x0, #0x330
	hexdump("hash2 from sig", hash2, SHA256_SIZE);
	prints("\n");
 3007cdc:	d0000015 	adrp	x21, 3009000 <el3_vectors>
 3007ce0:	913962b5 	add	x21, x21, #0xe58
#else // SKIP_COMPARE_CHECKSUM

	tmp = compare_memory(hash1, hash2, SHA256_SIZE);
	ret = (tmp == SHA256_SIZE ? OK : ERR_NOT_MATCH);
	#ifdef ROM_DEBUG
	hexdump("hash1 from CP", hash1, SHA256_SIZE);
 3007ce4:	97fffe6e 	bl	300769c <hexdump>
	hexdump("hash2 from sig", hash2, SHA256_SIZE);
	prints("\n");
	prints("compare_memory(");
	print_hex((uintptr_t)hash1);
	prints(", ");
 3007ce8:	d0000016 	adrp	x22, 3009000 <el3_vectors>
 3007cec:	913b82d6 	add	x22, x22, #0xee0

	tmp = compare_memory(hash1, hash2, SHA256_SIZE);
	ret = (tmp == SHA256_SIZE ? OK : ERR_NOT_MATCH);
	#ifdef ROM_DEBUG
	hexdump("hash1 from CP", hash1, SHA256_SIZE);
	hexdump("hash2 from sig", hash2, SHA256_SIZE);
 3007cf0:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007cf4:	52800402 	mov	w2, #0x20                  	// #32
 3007cf8:	aa1a03e1 	mov	x1, x26
 3007cfc:	910d0000 	add	x0, x0, #0x340
 3007d00:	97fffe67 	bl	300769c <hexdump>
	prints("\n");
 3007d04:	aa1503e0 	mov	x0, x21
 3007d08:	97fff8f2 	bl	30060d0 <prints>
	prints("compare_memory(");
 3007d0c:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007d10:	910d4000 	add	x0, x0, #0x350
 3007d14:	97fff8ef 	bl	30060d0 <prints>
	print_hex((uintptr_t)hash1);
 3007d18:	2a1903e0 	mov	w0, w25
 3007d1c:	97fff91f 	bl	3006198 <print_hex>
	prints(", ");
 3007d20:	aa1603e0 	mov	x0, x22
 3007d24:	97fff8eb 	bl	30060d0 <prints>
	print_hex((uintptr_t)hash2);
 3007d28:	2a1803e0 	mov	w0, w24
 3007d2c:	97fff91b 	bl	3006198 <print_hex>
	prints(", ");
 3007d30:	aa1603e0 	mov	x0, x22
 3007d34:	97fff8e7 	bl	30060d0 <prints>
	print_hex(SHA256_SIZE);
 3007d38:	52800400 	mov	w0, #0x20                  	// #32
 3007d3c:	97fff917 	bl	3006198 <print_hex>
	prints("): ");
 3007d40:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007d44:	910d8000 	add	x0, x0, #0x360
 3007d48:	97fff8e2 	bl	30060d0 <prints>
	print_hex(ret);
 3007d4c:	2a1403e0 	mov	w0, w20
 3007d50:	97fff912 	bl	3006198 <print_hex>
	prints("\n");
 3007d54:	aa1503e0 	mov	x0, x21
 3007d58:	97fff8de 	bl	30060d0 <prints>
	#endif // ROM_DEBUG
#endif // SKIP_COMPARE_CHECKSUM

	return ret;
 3007d5c:	2a1303e0 	mov	w0, w19
 3007d60:	17ffffb4 	b	3007c30 <verify_img_signature+0xcc>
	if (ret != OK) {
		#ifdef ENV_SIMULATION
		simulation_result_fail();
		#endif
		#ifdef ROM_DEBUG // for debug only
		printf("smc call (RSA) fail!\n");
 3007d64:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007d68:	910be000 	add	x0, x0, #0x2f8
 3007d6c:	97ffe25b 	bl	30006d8 <puts>
		hexdump("RSA output", hash2, 0x100);
 3007d70:	f0000000 	adrp	x0, 300a000 <__FUNCTION__.3108+0x3d8>
 3007d74:	52802002 	mov	w2, #0x100                 	// #256
 3007d78:	910c4000 	add	x0, x0, #0x310
 3007d7c:	aa1803e1 	mov	x1, x24
 3007d80:	97fffe47 	bl	300769c <hexdump>
		#endif
		return ret;
 3007d84:	2a1303e0 	mov	w0, w19
 3007d88:	17ffffaa 	b	3007c30 <verify_img_signature+0xcc>
	...

0000000003008000 <c0sync1>:

//
// Current EL with SP0
//
el1_vectors:
c0sync1: B c0sync1
 3008000:	14000000 	b	3008000 <c0sync1>
 3008004:	d503201f 	nop
 3008008:	d503201f 	nop
 300800c:	d503201f 	nop
 3008010:	d503201f 	nop
 3008014:	d503201f 	nop
 3008018:	d503201f 	nop
 300801c:	d503201f 	nop
	...

0000000003008080 <c0irq1>:

    .balign 0x80
c0irq1: B c0irq1
 3008080:	14000000 	b	3008080 <c0irq1>
 3008084:	d503201f 	nop
 3008088:	d503201f 	nop
 300808c:	d503201f 	nop
 3008090:	d503201f 	nop
 3008094:	d503201f 	nop
 3008098:	d503201f 	nop
 300809c:	d503201f 	nop
	...

0000000003008100 <c0fiq1>:

    .balign 0x80
c0fiq1: B c0fiq1
 3008100:	14000000 	b	3008100 <c0fiq1>
 3008104:	d503201f 	nop
 3008108:	d503201f 	nop
 300810c:	d503201f 	nop
 3008110:	d503201f 	nop
 3008114:	d503201f 	nop
 3008118:	d503201f 	nop
 300811c:	d503201f 	nop
	...

0000000003008180 <c0serr1>:

    .balign 0x80
c0serr1: B c0serr1
 3008180:	14000000 	b	3008180 <c0serr1>
 3008184:	d503201f 	nop
 3008188:	d503201f 	nop
 300818c:	d503201f 	nop
 3008190:	d503201f 	nop
 3008194:	d503201f 	nop
 3008198:	d503201f 	nop
 300819c:	d503201f 	nop
	...

0000000003008200 <cxsync1>:

//
// Current EL with SPx
//
    .balign 0x80
cxsync1: B cxsync1
 3008200:	14000000 	b	3008200 <cxsync1>
 3008204:	d503201f 	nop
 3008208:	d503201f 	nop
 300820c:	d503201f 	nop
 3008210:	d503201f 	nop
 3008214:	d503201f 	nop
 3008218:	d503201f 	nop
 300821c:	d503201f 	nop
	...

0000000003008280 <cxirq1>:

    .balign 0x80
cxirq1: B cxirq1
 3008280:	14000000 	b	3008280 <cxirq1>
 3008284:	d503201f 	nop
 3008288:	d503201f 	nop
 300828c:	d503201f 	nop
 3008290:	d503201f 	nop
 3008294:	d503201f 	nop
 3008298:	d503201f 	nop
 300829c:	d503201f 	nop
	...

0000000003008300 <cxfiq1>:

    .balign 0x80
cxfiq1: B cxfiq1
 3008300:	14000000 	b	3008300 <cxfiq1>
 3008304:	d503201f 	nop
 3008308:	d503201f 	nop
 300830c:	d503201f 	nop
 3008310:	d503201f 	nop
 3008314:	d503201f 	nop
 3008318:	d503201f 	nop
 300831c:	d503201f 	nop
	...

0000000003008380 <cxserr1>:

    .balign 0x80
cxserr1: B cxserr1
 3008380:	14000000 	b	3008380 <cxserr1>
 3008384:	d503201f 	nop
 3008388:	d503201f 	nop
 300838c:	d503201f 	nop
 3008390:	d503201f 	nop
 3008394:	d503201f 	nop
 3008398:	d503201f 	nop
 300839c:	d503201f 	nop
	...

0000000003008400 <l64sync1>:
//
// Lower EL using AArch64
//
    .balign 0x80
l64sync1:
    B   l64sync1
 3008400:	14000000 	b	3008400 <l64sync1>
 3008404:	d503201f 	nop
 3008408:	d503201f 	nop
 300840c:	d503201f 	nop
 3008410:	d503201f 	nop
 3008414:	d503201f 	nop
 3008418:	d503201f 	nop
 300841c:	d503201f 	nop
	...

0000000003008480 <l64irq1>:

    .balign 0x80
l64irq1:
    B   l64irq1
 3008480:	14000000 	b	3008480 <l64irq1>
 3008484:	d503201f 	nop
 3008488:	d503201f 	nop
 300848c:	d503201f 	nop
 3008490:	d503201f 	nop
 3008494:	d503201f 	nop
 3008498:	d503201f 	nop
 300849c:	d503201f 	nop
	...

0000000003008500 <l64fiq1>:

    .balign 0x80
l64fiq1:
    B   l64fiq1
 3008500:	14000000 	b	3008500 <l64fiq1>
 3008504:	d503201f 	nop
 3008508:	d503201f 	nop
 300850c:	d503201f 	nop
 3008510:	d503201f 	nop
 3008514:	d503201f 	nop
 3008518:	d503201f 	nop
 300851c:	d503201f 	nop
	...

0000000003008580 <l64serr1>:

    .balign 0x80
l64serr1:
    B   l64serr1
 3008580:	14000000 	b	3008580 <l64serr1>
 3008584:	d503201f 	nop
 3008588:	d503201f 	nop
 300858c:	d503201f 	nop
 3008590:	d503201f 	nop
 3008594:	d503201f 	nop
 3008598:	d503201f 	nop
 300859c:	d503201f 	nop
	...

0000000003008600 <l32sync1>:
//
// Lower EL using AArch32
//
    .balign 0x80
l32sync1:
    B   l32sync1
 3008600:	14000000 	b	3008600 <l32sync1>
 3008604:	d503201f 	nop
 3008608:	d503201f 	nop
 300860c:	d503201f 	nop
 3008610:	d503201f 	nop
 3008614:	d503201f 	nop
 3008618:	d503201f 	nop
 300861c:	d503201f 	nop
	...

0000000003008680 <l32irq1>:

    .balign 0x80
l32irq1:
    B   l32irq1
 3008680:	14000000 	b	3008680 <l32irq1>
 3008684:	d503201f 	nop
 3008688:	d503201f 	nop
 300868c:	d503201f 	nop
 3008690:	d503201f 	nop
 3008694:	d503201f 	nop
 3008698:	d503201f 	nop
 300869c:	d503201f 	nop
	...

0000000003008700 <l32fiq1>:

    .balign 0x80
l32fiq1:
    B   l32fiq1
 3008700:	14000000 	b	3008700 <l32fiq1>
 3008704:	d503201f 	nop
 3008708:	d503201f 	nop
 300870c:	d503201f 	nop
 3008710:	d503201f 	nop
 3008714:	d503201f 	nop
 3008718:	d503201f 	nop
 300871c:	d503201f 	nop
	...

0000000003008780 <l32serr1>:

    .balign 0x80
l32serr1:
    B   l32serr1
 3008780:	14000000 	b	3008780 <l32serr1>
 3008784:	d503201f 	nop
 3008788:	d503201f 	nop
 300878c:	d503201f 	nop
 3008790:	d503201f 	nop
 3008794:	d503201f 	nop
 3008798:	d503201f 	nop
 300879c:	d503201f 	nop
	...

0000000003008800 <el2_vectors>:

//
// Current EL with SP0
//
el2_vectors:
c0sync2: B c0sync2
 3008800:	14000000 	b	3008800 <el2_vectors>
 3008804:	d503201f 	nop
 3008808:	d503201f 	nop
 300880c:	d503201f 	nop
 3008810:	d503201f 	nop
 3008814:	d503201f 	nop
 3008818:	d503201f 	nop
 300881c:	d503201f 	nop
	...

0000000003008880 <c0irq2>:

    .balign 0x80
c0irq2: B c0irq2
 3008880:	14000000 	b	3008880 <c0irq2>
 3008884:	d503201f 	nop
 3008888:	d503201f 	nop
 300888c:	d503201f 	nop
 3008890:	d503201f 	nop
 3008894:	d503201f 	nop
 3008898:	d503201f 	nop
 300889c:	d503201f 	nop
	...

0000000003008900 <c0fiq2>:

    .balign 0x80
c0fiq2: B c0fiq2
 3008900:	14000000 	b	3008900 <c0fiq2>
 3008904:	d503201f 	nop
 3008908:	d503201f 	nop
 300890c:	d503201f 	nop
 3008910:	d503201f 	nop
 3008914:	d503201f 	nop
 3008918:	d503201f 	nop
 300891c:	d503201f 	nop
	...

0000000003008980 <c0serr2>:

    .balign 0x80
c0serr2: B c0serr2
 3008980:	14000000 	b	3008980 <c0serr2>
 3008984:	d503201f 	nop
 3008988:	d503201f 	nop
 300898c:	d503201f 	nop
 3008990:	d503201f 	nop
 3008994:	d503201f 	nop
 3008998:	d503201f 	nop
 300899c:	d503201f 	nop
	...

0000000003008a00 <cxsync2>:

//
// Current EL with SPx
//
    .balign 0x80
cxsync2: B cxsync2
 3008a00:	14000000 	b	3008a00 <cxsync2>
 3008a04:	d503201f 	nop
 3008a08:	d503201f 	nop
 3008a0c:	d503201f 	nop
 3008a10:	d503201f 	nop
 3008a14:	d503201f 	nop
 3008a18:	d503201f 	nop
 3008a1c:	d503201f 	nop
	...

0000000003008a80 <cxirq2>:

    .balign 0x80
cxirq2: B cxirq2
 3008a80:	14000000 	b	3008a80 <cxirq2>
 3008a84:	d503201f 	nop
 3008a88:	d503201f 	nop
 3008a8c:	d503201f 	nop
 3008a90:	d503201f 	nop
 3008a94:	d503201f 	nop
 3008a98:	d503201f 	nop
 3008a9c:	d503201f 	nop
	...

0000000003008b00 <cxfiq2>:

    .balign 0x80
cxfiq2: B cxfiq2
 3008b00:	14000000 	b	3008b00 <cxfiq2>
 3008b04:	d503201f 	nop
 3008b08:	d503201f 	nop
 3008b0c:	d503201f 	nop
 3008b10:	d503201f 	nop
 3008b14:	d503201f 	nop
 3008b18:	d503201f 	nop
 3008b1c:	d503201f 	nop
	...

0000000003008b80 <cxserr2>:

    .balign 0x80
cxserr2: B cxserr2
 3008b80:	14000000 	b	3008b80 <cxserr2>
 3008b84:	d503201f 	nop
 3008b88:	d503201f 	nop
 3008b8c:	d503201f 	nop
 3008b90:	d503201f 	nop
 3008b94:	d503201f 	nop
 3008b98:	d503201f 	nop
 3008b9c:	d503201f 	nop
	...

0000000003008c00 <l64sync2>:
//
// Lower EL using AArch64
//
    .balign 0x80
l64sync2:
    B   l64sync2
 3008c00:	14000000 	b	3008c00 <l64sync2>
 3008c04:	d503201f 	nop
 3008c08:	d503201f 	nop
 3008c0c:	d503201f 	nop
 3008c10:	d503201f 	nop
 3008c14:	d503201f 	nop
 3008c18:	d503201f 	nop
 3008c1c:	d503201f 	nop
	...

0000000003008c80 <l64irq2>:

    .balign 0x80
l64irq2:
    B   l64irq2
 3008c80:	14000000 	b	3008c80 <l64irq2>
 3008c84:	d503201f 	nop
 3008c88:	d503201f 	nop
 3008c8c:	d503201f 	nop
 3008c90:	d503201f 	nop
 3008c94:	d503201f 	nop
 3008c98:	d503201f 	nop
 3008c9c:	d503201f 	nop
	...

0000000003008d00 <l64fiq2>:

    .balign 0x80
l64fiq2:
    B   l64fiq2
 3008d00:	14000000 	b	3008d00 <l64fiq2>
 3008d04:	d503201f 	nop
 3008d08:	d503201f 	nop
 3008d0c:	d503201f 	nop
 3008d10:	d503201f 	nop
 3008d14:	d503201f 	nop
 3008d18:	d503201f 	nop
 3008d1c:	d503201f 	nop
	...

0000000003008d80 <l64serr2>:

    .balign 0x80
l64serr2:
    B   l64serr2
 3008d80:	14000000 	b	3008d80 <l64serr2>
 3008d84:	d503201f 	nop
 3008d88:	d503201f 	nop
 3008d8c:	d503201f 	nop
 3008d90:	d503201f 	nop
 3008d94:	d503201f 	nop
 3008d98:	d503201f 	nop
 3008d9c:	d503201f 	nop
	...

0000000003008e00 <l32sync2>:
//
// Lower EL using AArch32
//
    .balign 0x80
l32sync2:
    B   l32sync2
 3008e00:	14000000 	b	3008e00 <l32sync2>
 3008e04:	d503201f 	nop
 3008e08:	d503201f 	nop
 3008e0c:	d503201f 	nop
 3008e10:	d503201f 	nop
 3008e14:	d503201f 	nop
 3008e18:	d503201f 	nop
 3008e1c:	d503201f 	nop
	...

0000000003008e80 <l32irq2>:

    .balign 0x80
l32irq2:
    B   l32irq2
 3008e80:	14000000 	b	3008e80 <l32irq2>
 3008e84:	d503201f 	nop
 3008e88:	d503201f 	nop
 3008e8c:	d503201f 	nop
 3008e90:	d503201f 	nop
 3008e94:	d503201f 	nop
 3008e98:	d503201f 	nop
 3008e9c:	d503201f 	nop
	...

0000000003008f00 <l32fiq2>:

    .balign 0x80
l32fiq2:
    B   l32fiq2
 3008f00:	14000000 	b	3008f00 <l32fiq2>
 3008f04:	d503201f 	nop
 3008f08:	d503201f 	nop
 3008f0c:	d503201f 	nop
 3008f10:	d503201f 	nop
 3008f14:	d503201f 	nop
 3008f18:	d503201f 	nop
 3008f1c:	d503201f 	nop
	...

0000000003008f80 <l32serr2>:

    .balign 0x80
l32serr2:
    B   l32serr2
 3008f80:	14000000 	b	3008f80 <l32serr2>
 3008f84:	d503201f 	nop
 3008f88:	d503201f 	nop
 3008f8c:	d503201f 	nop
 3008f90:	d503201f 	nop
 3008f94:	d503201f 	nop
 3008f98:	d503201f 	nop
 3008f9c:	d503201f 	nop
	...

0000000003009000 <el3_vectors>:

//
// Current EL with SP0
//
el3_vectors:
c0sync3: B c0sync3
 3009000:	14000000 	b	3009000 <el3_vectors>
 3009004:	d503201f 	nop
 3009008:	d503201f 	nop
 300900c:	d503201f 	nop
 3009010:	d503201f 	nop
 3009014:	d503201f 	nop
 3009018:	d503201f 	nop
 300901c:	d503201f 	nop
	...

0000000003009080 <c0irq3>:

    .balign 0x80
c0irq3: B c0irq3
 3009080:	14000000 	b	3009080 <c0irq3>
 3009084:	d503201f 	nop
 3009088:	d503201f 	nop
 300908c:	d503201f 	nop
 3009090:	d503201f 	nop
 3009094:	d503201f 	nop
 3009098:	d503201f 	nop
 300909c:	d503201f 	nop
	...

0000000003009100 <c0fiq3>:

    .balign 0x80
c0fiq3: B c0fiq3
 3009100:	14000000 	b	3009100 <c0fiq3>
 3009104:	d503201f 	nop
 3009108:	d503201f 	nop
 300910c:	d503201f 	nop
 3009110:	d503201f 	nop
 3009114:	d503201f 	nop
 3009118:	d503201f 	nop
 300911c:	d503201f 	nop
	...

0000000003009180 <c0serr3>:

    .balign 0x80
c0serr3: B c0serr3
 3009180:	14000000 	b	3009180 <c0serr3>
 3009184:	d503201f 	nop
 3009188:	d503201f 	nop
 300918c:	d503201f 	nop
 3009190:	d503201f 	nop
 3009194:	d503201f 	nop
 3009198:	d503201f 	nop
 300919c:	d503201f 	nop
	...

0000000003009200 <cxsync3>:

//
// Current EL with SPx
//
    .balign 0x80
cxsync3: B cxsync3
 3009200:	14000000 	b	3009200 <cxsync3>
 3009204:	d503201f 	nop
 3009208:	d503201f 	nop
 300920c:	d503201f 	nop
 3009210:	d503201f 	nop
 3009214:	d503201f 	nop
 3009218:	d503201f 	nop
 300921c:	d503201f 	nop
	...

0000000003009280 <cxirq3>:

    .balign 0x80
cxirq3: B cxirq3
 3009280:	14000000 	b	3009280 <cxirq3>
 3009284:	d503201f 	nop
 3009288:	d503201f 	nop
 300928c:	d503201f 	nop
 3009290:	d503201f 	nop
 3009294:	d503201f 	nop
 3009298:	d503201f 	nop
 300929c:	d503201f 	nop
	...

0000000003009300 <cxfiq3>:

    .balign 0x80
cxfiq3: B cxfiq3
 3009300:	14000000 	b	3009300 <cxfiq3>
 3009304:	d503201f 	nop
 3009308:	d503201f 	nop
 300930c:	d503201f 	nop
 3009310:	d503201f 	nop
 3009314:	d503201f 	nop
 3009318:	d503201f 	nop
 300931c:	d503201f 	nop
	...

0000000003009380 <cxserr3>:

    .balign 0x80
cxserr3: B cxserr3
 3009380:	14000000 	b	3009380 <cxserr3>
 3009384:	d503201f 	nop
 3009388:	d503201f 	nop
 300938c:	d503201f 	nop
 3009390:	d503201f 	nop
 3009394:	d503201f 	nop
 3009398:	d503201f 	nop
 300939c:	d503201f 	nop
	...

0000000003009400 <l64sync3>:
//
// Lower EL using AArch64
//
    .balign 0x80
l64sync3:
    B   l64sync3
 3009400:	14000000 	b	3009400 <l64sync3>
 3009404:	d503201f 	nop
 3009408:	d503201f 	nop
 300940c:	d503201f 	nop
 3009410:	d503201f 	nop
 3009414:	d503201f 	nop
 3009418:	d503201f 	nop
 300941c:	d503201f 	nop
	...

0000000003009480 <l64irq3>:

    .balign 0x80
l64irq3:
    B   l64irq3
 3009480:	14000000 	b	3009480 <l64irq3>
 3009484:	d503201f 	nop
 3009488:	d503201f 	nop
 300948c:	d503201f 	nop
 3009490:	d503201f 	nop
 3009494:	d503201f 	nop
 3009498:	d503201f 	nop
 300949c:	d503201f 	nop
	...

0000000003009500 <l64fiq3>:

    .balign 0x80
l64fiq3:
    B   l64fiq3
 3009500:	14000000 	b	3009500 <l64fiq3>
 3009504:	d503201f 	nop
 3009508:	d503201f 	nop
 300950c:	d503201f 	nop
 3009510:	d503201f 	nop
 3009514:	d503201f 	nop
 3009518:	d503201f 	nop
 300951c:	d503201f 	nop
	...

0000000003009580 <l64serr3>:

    .balign 0x80
l64serr3:
    B   l64serr3
 3009580:	14000000 	b	3009580 <l64serr3>
 3009584:	d503201f 	nop
 3009588:	d503201f 	nop
 300958c:	d503201f 	nop
 3009590:	d503201f 	nop
 3009594:	d503201f 	nop
 3009598:	d503201f 	nop
 300959c:	d503201f 	nop
	...

0000000003009600 <l32sync3>:
//
// Lower EL using AArch32
//
    .balign 0x80
l32sync3:
    B   l32sync3
 3009600:	14000000 	b	3009600 <l32sync3>
 3009604:	d503201f 	nop
 3009608:	d503201f 	nop
 300960c:	d503201f 	nop
 3009610:	d503201f 	nop
 3009614:	d503201f 	nop
 3009618:	d503201f 	nop
 300961c:	d503201f 	nop
	...

0000000003009680 <l32irq3>:

    .balign 0x80
l32irq3:
    B   l32irq3
 3009680:	14000000 	b	3009680 <l32irq3>
 3009684:	d503201f 	nop
 3009688:	d503201f 	nop
 300968c:	d503201f 	nop
 3009690:	d503201f 	nop
 3009694:	d503201f 	nop
 3009698:	d503201f 	nop
 300969c:	d503201f 	nop
	...

0000000003009700 <l32fiq3>:

    .balign 0x80
l32fiq3:
    B   l32fiq3
 3009700:	14000000 	b	3009700 <l32fiq3>
 3009704:	d503201f 	nop
 3009708:	d503201f 	nop
 300970c:	d503201f 	nop
 3009710:	d503201f 	nop
 3009714:	d503201f 	nop
 3009718:	d503201f 	nop
 300971c:	d503201f 	nop
	...

0000000003009780 <l32serr3>:

    .balign 0x80
l32serr3:
    B   l32serr3
 3009780:	14000000 	b	3009780 <l32serr3>
 3009784:	d503201f 	nop
 3009788:	d503201f 	nop
 300978c:	d503201f 	nop
 3009790:	d503201f 	nop
 3009794:	d503201f 	nop
 3009798:	d503201f 	nop
 300979c:	d503201f 	nop
	...

0000000003009800 <__asm_flush_dcache_level>:
 * x1: 0 flush & invalidate, 1 invalidate only
 * x2~x9: clobbered
 */
.global __asm_flush_dcache_level
__asm_flush_dcache_level:
	lsl	x12, x0, #1
 3009800:	d37ff80c 	lsl	x12, x0, #1
	msr	csselr_el1, x12		/* select cache level */
 3009804:	d51a000c 	msr	csselr_el1, x12
	isb				/* sync change of cssidr_el1 */
 3009808:	d5033fdf 	isb
	mrs	x6, ccsidr_el1		/* read the new cssidr_el1 */
 300980c:	d5390006 	mrs	x6, ccsidr_el1
	and	x2, x6, #7		/* x2 <- log2(cache line size)-4 */
 3009810:	924008c2 	and	x2, x6, #0x7
	add	x2, x2, #4		/* x2 <- log2(cache line size) */
 3009814:	91001042 	add	x2, x2, #0x4
	mov	x3, #0x3ff
 3009818:	d2807fe3 	mov	x3, #0x3ff                 	// #1023
	and	x3, x3, x6, lsr #3	/* x3 <- max number of #ways */
 300981c:	8a460c63 	and	x3, x3, x6, lsr #3
	clz	w5, w3			/* bit position of #ways */
 3009820:	5ac01065 	clz	w5, w3
	mov	x4, #0x7fff
 3009824:	d28fffe4 	mov	x4, #0x7fff                	// #32767
	and	x4, x4, x6, lsr #13	/* x4 <- max number of #sets */
 3009828:	8a463484 	and	x4, x4, x6, lsr #13

000000000300982c <loop_set>:
	/* x3 <- number of cache ways - 1 */
	/* x4 <- number of cache sets - 1 */
	/* x5 <- bit position of #ways */

loop_set:
	mov	x6, x3			/* x6 <- working copy of #ways */
 300982c:	aa0303e6 	mov	x6, x3

0000000003009830 <loop_way>:
loop_way:
	lsl	x7, x6, x5
 3009830:	9ac520c7 	lsl	x7, x6, x5
	orr	x9, x12, x7		/* map way and level to cisw value */
 3009834:	aa070189 	orr	x9, x12, x7
	lsl	x7, x4, x2
 3009838:	9ac22087 	lsl	x7, x4, x2
	orr	x9, x9, x7		/* map set number to cisw value */
 300983c:	aa070129 	orr	x9, x9, x7
	tbz	w1, #0, 1f
 3009840:	36000061 	tbz	w1, #0, 300984c <loop_way+0x1c>
	dc	isw, x9
 3009844:	d5087649 	dc	isw, x9
	b	2f
 3009848:	14000002 	b	3009850 <loop_way+0x20>
1:	dc	cisw, x9		/* clean & invalidate by set/way */
 300984c:	d5087e49 	dc	cisw, x9
2:	subs	x6, x6, #1		/* decrement the way */
 3009850:	f10004c6 	subs	x6, x6, #0x1
	b.ge	loop_way
 3009854:	54fffeea 	b.ge	3009830 <loop_way>
	subs	x4, x4, #1		/* decrement the set */
 3009858:	f1000484 	subs	x4, x4, #0x1
	b.ge	loop_set
 300985c:	54fffe8a 	b.ge	300982c <loop_set>

	ret
 3009860:	d65f03c0 	ret

0000000003009864 <__asm_dcache_all>:
 *
 * clean and invalidate all data cache by SET/WAY.
 */
.global __asm_dcache_all
__asm_dcache_all:
	mov	x1, x0
 3009864:	aa0003e1 	mov	x1, x0
	dsb	sy
 3009868:	d5033f9f 	dsb	sy
	mrs	x10, clidr_el1		/* read clidr_el1 */
 300986c:	d539002a 	mrs	x10, clidr_el1
	lsr	x11, x10, #24
 3009870:	d358fd4b 	lsr	x11, x10, #24
	and	x11, x11, #0x7		/* x11 <- loc */
 3009874:	9240096b 	and	x11, x11, #0x7
	cbz	x11, finished		/* if loc is 0, exit */
 3009878:	b400024b 	cbz	x11, 30098c0 <finished>
	mov	x15, x30
 300987c:	aa1e03ef 	mov	x15, x30
	mov	x0, #0			/* start flush at cache level 0 */
 3009880:	d2800000 	mov	x0, #0x0                   	// #0

0000000003009884 <loop_level>:
	/* x10 <- clidr_el1 */
	/* x11 <- loc */
	/* x15 <- return address */

loop_level:
	lsl	x12, x0, #1
 3009884:	d37ff80c 	lsl	x12, x0, #1
	add	x12, x12, x0		/* x0 <- tripled cache level */
 3009888:	8b00018c 	add	x12, x12, x0
	lsr	x12, x10, x12
 300988c:	9acc254c 	lsr	x12, x10, x12
	and	x12, x12, #7		/* x12 <- cache type */
 3009890:	9240098c 	and	x12, x12, #0x7
	cmp	x12, #2
 3009894:	f100099f 	cmp	x12, #0x2
	b.lt	skip			/* skip if no cache or icache */
 3009898:	5400004b 	b.lt	30098a0 <skip>
	bl	__asm_flush_dcache_level	/* x1 = 0 flush, 1 invalidate */
 300989c:	97ffffd9 	bl	3009800 <__asm_flush_dcache_level>

00000000030098a0 <skip>:
skip:
	add	x0, x0, #1		/* increment cache level */
 30098a0:	91000400 	add	x0, x0, #0x1
	cmp	x11, x0
 30098a4:	eb00017f 	cmp	x11, x0
	b.gt	loop_level
 30098a8:	54fffeec 	b.gt	3009884 <loop_level>

	mov	x0, #0
 30098ac:	d2800000 	mov	x0, #0x0                   	// #0
	msr	csselr_el1, x0		/* restore csselr_el1 */
 30098b0:	d51a0000 	msr	csselr_el1, x0
	dsb	sy
 30098b4:	d5033f9f 	dsb	sy
	isb
 30098b8:	d5033fdf 	isb
	mov	x30, x15
 30098bc:	aa0f03fe 	mov	x30, x15

00000000030098c0 <finished>:

finished:
	ret
 30098c0:	d65f03c0 	ret

00000000030098c4 <__asm_flush_dcache_all>:


.global __asm_flush_dcache_all
__asm_flush_dcache_all:
	mov	x16, x30
 30098c4:	aa1e03f0 	mov	x16, x30
	mov	x0, #0
 30098c8:	d2800000 	mov	x0, #0x0                   	// #0
	bl	__asm_dcache_all
 30098cc:	97ffffe6 	bl	3009864 <__asm_dcache_all>
	mov	x30, x16
 30098d0:	aa1003fe 	mov	x30, x16
	ret
 30098d4:	d65f03c0 	ret

00000000030098d8 <__asm_invalidate_dcache_all>:

.global __asm_invalidate_dcache_all
__asm_invalidate_dcache_all:
	mov	x16, x30
 30098d8:	aa1e03f0 	mov	x16, x30
	mov	x0, #0xffff
 30098dc:	d29fffe0 	mov	x0, #0xffff                	// #65535
	bl	__asm_dcache_all
 30098e0:	97ffffe1 	bl	3009864 <__asm_dcache_all>
	mov	x30, x16
 30098e4:	aa1003fe 	mov	x30, x16
	ret
 30098e8:	d65f03c0 	ret

00000000030098ec <__asm_flush_dcache_range>:
 * x0: start address
 * x1: end address
 */
.global __asm_flush_dcache_range
__asm_flush_dcache_range:
	mrs	x3, ctr_el0
 30098ec:	d53b0023 	mrs	x3, ctr_el0
	lsr	x3, x3, #16
 30098f0:	d350fc63 	lsr	x3, x3, #16
	and	x3, x3, #0xf
 30098f4:	92400c63 	and	x3, x3, #0xf
	mov	x2, #4
 30098f8:	d2800082 	mov	x2, #0x4                   	// #4
	lsl	x2, x2, x3		/* cache line size */
 30098fc:	9ac32042 	lsl	x2, x2, x3

	/* x2 <- minimal cache line size in cache system */
	sub	x3, x2, #1
 3009900:	d1000443 	sub	x3, x2, #0x1
	bic	x0, x0, x3
 3009904:	8a230000 	bic	x0, x0, x3
1:	dc	civac, x0	/* clean & invalidate data or unified cache */
 3009908:	d50b7e20 	dc	civac, x0
	add	x0, x0, x2
 300990c:	8b020000 	add	x0, x0, x2
	cmp	x0, x1
 3009910:	eb01001f 	cmp	x0, x1
	b.lo	1b
 3009914:	54ffffa3 	b.cc	3009908 <__asm_flush_dcache_range+0x1c>
	dsb	sy
 3009918:	d5033f9f 	dsb	sy
	ret
 300991c:	d65f03c0 	ret

0000000003009920 <__asm_invalidate_icache_all>:
 *
 * invalidate all icache
 */
.global __asm_invalidate_icache_all
__asm_invalidate_icache_all: 
	ic  ialluis
 3009920:	d508711f 	ic	ialluis
	isb	sy
 3009924:	d5033fdf 	isb
	ret
 3009928:	d65f03c0 	ret

000000000300992c <__asm_invalidate_tlb_all>:
 *
 * invalidate all tlb entries.
 */
.global __asm_invalidate_tlb_all
__asm_invalidate_tlb_all:
    tlbi	alle3
 300992c:	d50e871f 	tlbi	alle3
	dsb	sy
 3009930:	d5033f9f 	dsb	sy
	isb
 3009934:	d5033fdf 	isb
	ret
 3009938:	d65f03c0 	ret

000000000300993c <clear_bss_section>:

//@ clear bss section to zero of auxcode
.global clear_bss_section
clear_bss_section:
    //backup x30 (lr)
    mov      x8, x30
 300993c:	aa1e03e8 	mov	x8, x30
	ldr      x0, =_fbss 
 3009940:	58000300 	ldr	x0, 30099a0 <_sram_start_position+0xc>
	ldr      x1, =_ebss
 3009944:	58000321 	ldr	x1, 30099a8 <_sram_start_position+0x14>
	bl	clear_memory
 3009948:	9400000a 	bl	3009970 <clear_memory>
	mov     x30,x8
 300994c:	aa0803fe 	mov	x30, x8
	ret
 3009950:	d65f03c0 	ret
	nop
 3009954:	d503201f 	nop

0000000003009958 <func_nop>:
 * return:
 *	none
 ************************************************************************/
.global func_nop
func_nop:
	cmp x3, #0
 3009958:	f100007f 	cmp	x3, #0x0
	beq epilog_func_nop
 300995c:	54000060 	b.eq	3009968 <epilog_func_nop>

0000000003009960 <loop_func_nop>:
loop_func_nop:
	subs	x3, x3, #1
 3009960:	f1000463 	subs	x3, x3, #0x1
	bne	loop_func_nop
 3009964:	54ffffe1 	b.ne	3009960 <loop_func_nop>

0000000003009968 <epilog_func_nop>:
	
epilog_func_nop:
	//modify by Aaron==>mov	pc, lr
	ret
 3009968:	d65f03c0 	ret
	nop
 300996c:	d503201f 	nop

0000000003009970 <clear_memory>:
//@ return:
//@	none
//@ ------------------------------------------------------------
.global clear_memory
clear_memory:
	cmp	x0, x1
 3009970:	eb01001f 	cmp	x0, x1
	beq	epilog_clear_memory
 3009974:	540000c0 	b.eq	300998c <epilog_clear_memory>
	mov 	x5, #0
 3009978:	d2800005 	mov	x5, #0x0                   	// #0
1:      
	str	w5, [x0],#4
 300997c:	b8004405 	str	w5, [x0],#4
	cmp 	x0, x1
 3009980:	eb01001f 	cmp	x0, x1
	beq	epilog_clear_memory
 3009984:	54000040 	b.eq	300998c <epilog_clear_memory>
	b 1b
 3009988:	17fffffd 	b	300997c <clear_memory+0xc>

000000000300998c <epilog_clear_memory>:

epilog_clear_memory:
	ret
 300998c:	d65f03c0 	ret
	nop
 3009990:	d503201f 	nop

0000000003009994 <_sram_start_position>:
 3009994:	80000000 	.word	0x80000000
	...
 30099a0:	0300a790 	.word	0x0300a790
 30099a4:	00000000 	.word	0x00000000
 30099a8:	0300c780 	.word	0x0300c780
 30099ac:	00000000 	.word	0x00000000

00000000030099b0 <smc_AES_ECB_decrypt_CW>:

.global smc_AES_ECB_decrypt_CW
.type smc_AES_ECB_decrypt_CW, @function
smc_AES_ECB_decrypt_CW:

	mov	x4, x3 // arg 4: CW index
 30099b0:	aa0303e4 	mov	x4, x3
	mov	x3, x2 // arg 3: dst_addr
 30099b4:	aa0203e3 	mov	x3, x2
	mov	x2, x1 // arg 2: length
 30099b8:	aa0103e2 	mov	x2, x1
	mov	x1, x0 // arg 1: scr_addr
 30099bc:	aa0003e1 	mov	x1, x0
	ldr	x0, =SMC_ID_AES_ECB_DECRYPT_CW // function id
 30099c0:	580002c0 	ldr	x0, 3009a18 <smc_HW_RSA+0x20>
	isb
 30099c4:	d5033fdf 	isb
	smc	#0
 30099c8:	d4000003 	smc	#0x0
	isb
 30099cc:	d5033fdf 	isb
	ret	// return value in x0 (0: success, -1: error)
 30099d0:	d65f03c0 	ret

00000000030099d4 <smc_AES_ECB_decrypt_MEM>:

.global smc_AES_ECB_decrypt_MEM
.type smc_AES_ECB_decrypt_MEM, @function
smc_AES_ECB_decrypt_MEM:

	mov	x4, x3 // arg 4: key addr
 30099d4:	aa0303e4 	mov	x4, x3
	mov	x3, x2 // arg 3: dst_addr
 30099d8:	aa0203e3 	mov	x3, x2
	mov	x2, x1 // arg 2: length
 30099dc:	aa0103e2 	mov	x2, x1
	mov	x1, x0 // arg 1: scr_addr
 30099e0:	aa0003e1 	mov	x1, x0
	ldr	x0, =SMC_ID_AES_ECB_DECRYPT_MEM // function id
 30099e4:	580001e0 	ldr	x0, 3009a20 <smc_HW_RSA+0x28>
	isb
 30099e8:	d5033fdf 	isb
	smc	#0
 30099ec:	d4000003 	smc	#0x0
	isb
 30099f0:	d5033fdf 	isb
	ret	// return value in x0 (0: success, -1: error)
 30099f4:	d65f03c0 	ret

00000000030099f8 <smc_HW_RSA>:

.global smc_HW_RSA
.type smc_HW_RSA, @function
smc_HW_RSA:

	mov	x3, x2 // arg 3: output address
 30099f8:	aa0203e3 	mov	x3, x2
	mov	x2, x1 // arg 2: rsa_key_t address
 30099fc:	aa0103e2 	mov	x2, x1
	mov	x1, x0 // arg 1: signature address
 3009a00:	aa0003e1 	mov	x1, x0
	ldr	x0, =SMC_ID_HW_RSA
 3009a04:	58000120 	ldr	x0, 3009a28 <smc_HW_RSA+0x30>
	isb
 3009a08:	d5033fdf 	isb
	smc	#0
 3009a0c:	d4000003 	smc	#0x0
	isb
 3009a10:	d5033fdf 	isb
	ret	// return value in x0 (0: success, others: error)
 3009a14:	d65f03c0 	ret
 3009a18:	8400ff05 	.word	0x8400ff05
 3009a1c:	00000000 	.word	0x00000000
 3009a20:	8400ff06 	.word	0x8400ff06
 3009a24:	00000000 	.word	0x00000000
 3009a28:	8400ff07 	.word	0x8400ff07
 3009a2c:	00000000 	.word	0x00000000

Disassembly of section .rodata:

0000000003009a30 <hextable_caps.2892-0xb0>:
 3009a30:	fff000e5 	.word	0xfff000e5
 3009a34:	fff000fb 	.word	0xfff000fb
 3009a38:	fff0fff0 	.word	0xfff0fff0
 3009a3c:	fff0fff0 	.word	0xfff0fff0
 3009a40:	fff000e7 	.word	0xfff000e7
 3009a44:	ffeb00e9 	.word	0xffeb00e9
 3009a48:	00ebfff0 	.word	0x00ebfff0
 3009a4c:	00eb00eb 	.word	0x00eb00eb
 3009a50:	00eb00eb 	.word	0x00eb00eb
 3009a54:	00eb00eb 	.word	0x00eb00eb
 3009a58:	00eb00eb 	.word	0x00eb00eb
 3009a5c:	fff000eb 	.word	0xfff000eb
 3009a60:	fff0fff0 	.word	0xfff0fff0
 3009a64:	fff0fff0 	.word	0xfff0fff0
 3009a68:	fff0fff0 	.word	0xfff0fff0
 3009a6c:	fff0fff0 	.word	0xfff0fff0
 3009a70:	0094fff0 	.word	0x0094fff0
 3009a74:	fff0fff0 	.word	0xfff0fff0
 3009a78:	fff0fff0 	.word	0xfff0fff0
 3009a7c:	fff0fff0 	.word	0xfff0fff0
 3009a80:	fff0fff0 	.word	0xfff0fff0
 3009a84:	fff0fff0 	.word	0xfff0fff0
 3009a88:	fff0fff0 	.word	0xfff0fff0
 3009a8c:	fff0fff0 	.word	0xfff0fff0
 3009a90:	fff0fff0 	.word	0xfff0fff0
 3009a94:	fff0005c 	.word	0xfff0005c
 3009a98:	0000fff0 	.word	0x0000fff0
 3009a9c:	fff0fff0 	.word	0xfff0fff0
 3009aa0:	fff0fff0 	.word	0xfff0fff0
 3009aa4:	fff0fff0 	.word	0xfff0fff0
 3009aa8:	fff0fff0 	.word	0xfff0fff0
 3009aac:	fff0fff0 	.word	0xfff0fff0
 3009ab0:	009500c4 	.word	0x009500c4
 3009ab4:	fff0fff0 	.word	0xfff0fff0
 3009ab8:	00dffff0 	.word	0x00dffff0
 3009abc:	fff00095 	.word	0xfff00095
 3009ac0:	00d1fff0 	.word	0x00d1fff0
 3009ac4:	00d5fff0 	.word	0x00d5fff0
 3009ac8:	00c0fff0 	.word	0x00c0fff0
 3009acc:	fff0fff0 	.word	0xfff0fff0
 3009ad0:	fff000f2 	.word	0xfff000f2
 3009ad4:	fff0005d 	.word	0xfff0005d
 3009ad8:	0001fff0 	.word	0x0001fff0
 3009adc:	00befff0 	.word	0x00befff0

0000000003009ae0 <hextable_caps.2892>:
 3009ae0:	33323130 	.word	0x33323130
 3009ae4:	37363534 	.word	0x37363534
 3009ae8:	42413938 	.word	0x42413938
 3009aec:	46454443 	.word	0x46454443

0000000003009af0 <hextable.2891>:
 3009af0:	33323130 	.word	0x33323130
 3009af4:	37363534 	.word	0x37363534
 3009af8:	62613938 	.word	0x62613938
 3009afc:	66656463 	.word	0x66656463
 3009b00:	f2f21920 	.word	0xf2f21920
 3009b04:	001109f2 	.word	0x001109f2

0000000003009b08 <__FUNCTION__.2908>:
 3009b08:	5f534541 	.word	0x5f534541
 3009b0c:	5f424345 	.word	0x5f424345
 3009b10:	72636564 	.word	0x72636564
 3009b14:	00747079 	.word	0x00747079

0000000003009b18 <__FUNCTION__.2917>:
 3009b18:	32414853 	.word	0x32414853
 3009b1c:	685f3635 	.word	0x685f3635
 3009b20:	00687361 	.word	0x00687361
 3009b24:	00000000 	.word	0x00000000
 3009b28:	613e3d3d 	.word	0x613e3d3d
 3009b2c:	6f206c6c 	.word	0x6f206c6c
 3009b30:	000a656e 	.word	0x000a656e
 3009b34:	00000000 	.word	0x00000000
 3009b38:	48204b32 	.word	0x48204b32
 3009b3c:	63652057 	.word	0x63652057
 3009b40:	72652063 	.word	0x72652063
 3009b44:	20726f72 	.word	0x20726f72
 3009b48:	0000000a 	.word	0x0000000a
 3009b4c:	00000000 	.word	0x00000000
 3009b50:	65205748 	.word	0x65205748
 3009b54:	65206363 	.word	0x65206363
 3009b58:	726f7272 	.word	0x726f7272
 3009b5c:	00000a20 	.word	0x00000a20

0000000003009b60 <__FUNCTION__.3218>:
 3009b60:	646e6966 	.word	0x646e6966
 3009b64:	5f77665f 	.word	0x5f77665f
 3009b68:	72746e65 	.word	0x72746e65
 3009b6c:	00000079 	.word	0x00000079

0000000003009b70 <__FUNCTION__.3078>:
 3009b70:	5f746567 	.word	0x5f746567
 3009b74:	5f657464 	.word	0x5f657464
 3009b78:	635f7766 	.word	0x635f7766
 3009b7c:	69747265 	.word	0x69747265
 3009b80:	61636966 	.word	0x61636966
 3009b84:	00006574 	.word	0x00006574

0000000003009b88 <__FUNCTION__.3090>:
 3009b88:	5f746567 	.word	0x5f746567
 3009b8c:	5f657464 	.word	0x5f657464
 3009b90:	746f6f62 	.word	0x746f6f62
 3009b94:	65646f63 	.word	0x65646f63
 3009b98:	6b74725f 	.word	0x6b74725f
 3009b9c:	00000000 	.word	0x00000000

0000000003009ba0 <__FUNCTION__.3097>:
 3009ba0:	5f746567 	.word	0x5f746567
 3009ba4:	5f657464 	.word	0x5f657464
 3009ba8:	635f7766 	.word	0x635f7766
 3009bac:	69747265 	.word	0x69747265
 3009bb0:	61636966 	.word	0x61636966
 3009bb4:	00006574 	.word	0x00006574

0000000003009bb8 <__FUNCTION__.3110>:
 3009bb8:	5f746567 	.word	0x5f746567
 3009bbc:	5f657464 	.word	0x5f657464
 3009bc0:	746f6f62 	.word	0x746f6f62
 3009bc4:	65646f63 	.word	0x65646f63
 3009bc8:	6b74725f 	.word	0x6b74725f
 3009bcc:	00000000 	.word	0x00000000

0000000003009bd0 <uart>:
 3009bd0:	98007800 	.word	0x98007800
 3009bd4:	019bfcc0 	.word	0x019bfcc0
 3009bd8:	00000002 	.word	0x00000002
 3009bdc:	9801b200 	.word	0x9801b200
 3009be0:	19bfcc00 	.word	0x19bfcc00
 3009be4:	00000002 	.word	0x00000002
 3009be8:	6761746a 	.word	0x6761746a
 3009bec:	616e6520 	.word	0x616e6520
 3009bf0:	00656c62 	.word	0x00656c62
 3009bf4:	00000000 	.word	0x00000000
 3009bf8:	6c756166 	.word	0x6c756166
 3009bfc:	74654474 	.word	0x74654474
 3009c00:	21746365 	.word	0x21746365
 3009c04:	25783028 	.word	0x25783028
 3009c08:	000a2978 	.word	0x000a2978
 3009c0c:	00000000 	.word	0x00000000
 3009c10:	74696177 	.word	0x74696177
 3009c14:	726f6620 	.word	0x726f6620
 3009c18:	46494820 	.word	0x46494820
 3009c1c:	0a2e2e2e 	.word	0x0a2e2e2e
	...

0000000003009c28 <__FUNCTION__.3108>:
 3009c28:	64786568 	.word	0x64786568
 3009c2c:	00706d75 	.word	0x00706d75
 3009c30:	343a3531 	.word	0x343a3531
 3009c34:	31353a38 	.word	0x31353a38
	...
 3009c40:	20766f4e 	.word	0x20766f4e
 3009c44:	32203820 	.word	0x32203820
 3009c48:	00383130 	.word	0x00383130
 3009c4c:	00000000 	.word	0x00000000
 3009c50:	5f455444 	.word	0x5f455444
 3009c54:	746f6f42 	.word	0x746f6f42
 3009c58:	65646f63 	.word	0x65646f63
 3009c5c:	7325203a 	.word	0x7325203a
 3009c60:	7325202c 	.word	0x7325202c
 3009c64:	0000000a 	.word	0x0000000a
 3009c68:	6e6b6e75 	.word	0x6e6b6e75
 3009c6c:	206e776f 	.word	0x206e776f
 3009c70:	73616c66 	.word	0x73616c66
 3009c74:	79742068 	.word	0x79742068
 3009c78:	203a6570 	.word	0x203a6570
 3009c7c:	78257830 	.word	0x78257830
 3009c80:	0000000a 	.word	0x0000000a
 3009c84:	00000000 	.word	0x00000000
 3009c88:	636f7270 	.word	0x636f7270
 3009c8c:	5f737365 	.word	0x5f737365
 3009c90:	5f657464 	.word	0x5f657464
 3009c94:	635f7766 	.word	0x635f7766
 3009c98:	69747265 	.word	0x69747265
 3009c9c:	61636966 	.word	0x61636966
 3009ca0:	203a6574 	.word	0x203a6574
 3009ca4:	78257830 	.word	0x78257830
 3009ca8:	0000000a 	.word	0x0000000a
 3009cac:	00000000 	.word	0x00000000
 3009cb0:	636f7270 	.word	0x636f7270
 3009cb4:	5f737365 	.word	0x5f737365
 3009cb8:	5f657464 	.word	0x5f657464
 3009cbc:	746f6f62 	.word	0x746f6f62
 3009cc0:	65646f63 	.word	0x65646f63
 3009cc4:	6b74725f 	.word	0x6b74725f
 3009cc8:	7830203a 	.word	0x7830203a
 3009ccc:	000a7825 	.word	0x000a7825
 3009cd0:	706d756a 	.word	0x706d756a
 3009cd4:	206f7420 	.word	0x206f7420
 3009cd8:	5f455444 	.word	0x5f455444
 3009cdc:	746f6f42 	.word	0x746f6f42
 3009ce0:	65646f63 	.word	0x65646f63
 3009ce4:	4b54525f 	.word	0x4b54525f
 3009ce8:	7830203a 	.word	0x7830203a
 3009cec:	000a7825 	.word	0x000a7825
 3009cf0:	706d756a 	.word	0x706d756a
 3009cf4:	206f7420 	.word	0x206f7420
 3009cf8:	5f657464 	.word	0x5f657464
 3009cfc:	746f6f62 	.word	0x746f6f62
 3009d00:	65646f63 	.word	0x65646f63
 3009d04:	6b74725f 	.word	0x6b74725f
 3009d08:	6464615f 	.word	0x6464615f
 3009d0c:	000a2072 	.word	0x000a2072
 3009d10:	6c756e3c 	.word	0x6c756e3c
 3009d14:	00003e6c 	.word	0x00003e6c
 3009d18:	636d6d65 	.word	0x636d6d65
 3009d1c:	6d697420 	.word	0x6d697420
 3009d20:	74756f65 	.word	0x74756f65
 3009d24:	64646128 	.word	0x64646128
 3009d28:	616d2c72 	.word	0x616d2c72
 3009d2c:	762c6b73 	.word	0x762c6b73
 3009d30:	65756c61 	.word	0x65756c61
 3009d34:	30283d29 	.word	0x30283d29
 3009d38:	00000078 	.word	0x00000078
 3009d3c:	00000000 	.word	0x00000000
 3009d40:	0078302c 	.word	0x0078302c
 3009d44:	00000000 	.word	0x00000000
 3009d48:	00000a29 	.word	0x00000a29
 3009d4c:	00000000 	.word	0x00000000
 3009d50:	20646e45 	.word	0x20646e45
 3009d54:	20746962 	.word	0x20746962
 3009d58:	6f727265 	.word	0x6f727265
 3009d5c:	000a2072 	.word	0x000a2072
 3009d60:	72617453 	.word	0x72617453
 3009d64:	69622074 	.word	0x69622074
 3009d68:	72652074 	.word	0x72652074
 3009d6c:	20726f72 	.word	0x20726f72
 3009d70:	0000000a 	.word	0x0000000a
 3009d74:	00000000 	.word	0x00000000
 3009d78:	64726148 	.word	0x64726148
 3009d7c:	65726177 	.word	0x65726177
 3009d80:	636f6c20 	.word	0x636f6c20
 3009d84:	2064656b 	.word	0x2064656b
 3009d88:	74697277 	.word	0x74697277
 3009d8c:	72652065 	.word	0x72652065
 3009d90:	20726f72 	.word	0x20726f72
 3009d94:	0000000a 	.word	0x0000000a
 3009d98:	4f464946 	.word	0x4f464946
 3009d9c:	646e7520 	.word	0x646e7520
 3009da0:	75727265 	.word	0x75727265
 3009da4:	766f2f6e 	.word	0x766f2f6e
 3009da8:	75727265 	.word	0x75727265
 3009dac:	7265206e 	.word	0x7265206e
 3009db0:	20726f72 	.word	0x20726f72
 3009db4:	0000000a 	.word	0x0000000a
 3009db8:	61746144 	.word	0x61746144
 3009dbc:	61747320 	.word	0x61747320
 3009dc0:	74617672 	.word	0x74617672
 3009dc4:	206e6f69 	.word	0x206e6f69
 3009dc8:	68207962 	.word	0x68207962
 3009dcc:	2074736f 	.word	0x2074736f
 3009dd0:	656d6974 	.word	0x656d6974
 3009dd4:	0a74756f 	.word	0x0a74756f
	...
 3009de0:	61746144 	.word	0x61746144
 3009de4:	61657220 	.word	0x61657220
 3009de8:	69742064 	.word	0x69742064
 3009dec:	756f656d 	.word	0x756f656d
 3009df0:	00000a74 	.word	0x00000a74
 3009df4:	00000000 	.word	0x00000000
 3009df8:	70736552 	.word	0x70736552
 3009dfc:	65736e6f 	.word	0x65736e6f
 3009e00:	6d697420 	.word	0x6d697420
 3009e04:	74756f65 	.word	0x74756f65
 3009e08:	0000000a 	.word	0x0000000a
 3009e0c:	00000000 	.word	0x00000000
 3009e10:	61746144 	.word	0x61746144
 3009e14:	43524320 	.word	0x43524320
 3009e18:	72726520 	.word	0x72726520
 3009e1c:	000a726f 	.word	0x000a726f
 3009e20:	70736552 	.word	0x70736552
 3009e24:	65736e6f 	.word	0x65736e6f
 3009e28:	43524320 	.word	0x43524320
 3009e2c:	72726520 	.word	0x72726520
 3009e30:	000a726f 	.word	0x000a726f
 3009e34:	00000000 	.word	0x00000000
 3009e38:	70736552 	.word	0x70736552
 3009e3c:	65736e6f 	.word	0x65736e6f
 3009e40:	72726520 	.word	0x72726520
 3009e44:	000a726f 	.word	0x000a726f
 3009e48:	656c6c49 	.word	0x656c6c49
 3009e4c:	206c6167 	.word	0x206c6167
 3009e50:	6d6d6f63 	.word	0x6d6d6f63
 3009e54:	20646e61 	.word	0x20646e61
 3009e58:	0000000a 	.word	0x0000000a
 3009e5c:	00000000 	.word	0x00000000
 3009e60:	0000002f 	.word	0x0000002f
 3009e64:	00000000 	.word	0x00000000
 3009e68:	74697773 	.word	0x74697773
 3009e6c:	62206863 	.word	0x62206863
 3009e70:	77207375 	.word	0x77207375
 3009e74:	68746469 	.word	0x68746469
 3009e78:	206f7420 	.word	0x206f7420
 3009e7c:	00007830 	.word	0x00007830
 3009e80:	74696220 	.word	0x74696220
 3009e84:	61662073 	.word	0x61662073
 3009e88:	000a6c69 	.word	0x000a6c69
 3009e8c:	00000000 	.word	0x00000000
 3009e90:	74697773 	.word	0x74697773
 3009e94:	73206863 	.word	0x73206863
 3009e98:	64656570 	.word	0x64656570
 3009e9c:	206f7420 	.word	0x206f7420
 3009ea0:	00007830 	.word	0x00007830
 3009ea4:	00000000 	.word	0x00000000
 3009ea8:	69616620 	.word	0x69616620
 3009eac:	00000a6c 	.word	0x00000a6c
 3009eb0:	74697773 	.word	0x74697773
 3009eb4:	70206863 	.word	0x70206863
 3009eb8:	69747261 	.word	0x69747261
 3009ebc:	6e6f6974 	.word	0x6e6f6974
 3009ec0:	206f7420 	.word	0x206f7420
 3009ec4:	00007830 	.word	0x00007830
 3009ec8:	20415352 	.word	0x20415352
 3009ecc:	656d6974 	.word	0x656d6974
 3009ed0:	0a74756f 	.word	0x0a74756f
 3009ed4:	00000000 	.word	0x00000000
 3009ed8:	00000028 	.word	0x00000028
 3009edc:	00000000 	.word	0x00000000
 3009ee0:	0000202c 	.word	0x0000202c
 3009ee4:	00000000 	.word	0x00000000
 3009ee8:	20534541 	.word	0x20534541
 3009eec:	0079656b 	.word	0x0079656b
 3009ef0:	6c425f67 	.word	0x6c425f67
 3009ef4:	506b636f 	.word	0x506b636f
 3009ef8:	6c467265 	.word	0x6c467265
 3009efc:	00687361 	.word	0x00687361
 3009f00:	30203d20 	.word	0x30203d20
 3009f04:	00000078 	.word	0x00000078
 3009f08:	6c425f67 	.word	0x6c425f67
 3009f0c:	536b636f 	.word	0x536b636f
 3009f10:	00657a69 	.word	0x00657a69
 3009f14:	00000000 	.word	0x00000000
 3009f18:	206f6e0a 	.word	0x206f6e0a
 3009f1c:	666f7270 	.word	0x666f7270
 3009f20:	0a656c69 	.word	0x0a656c69
 3009f24:	00000000 	.word	0x00000000
 3009f28:	73616c66 	.word	0x73616c66
 3009f2c:	64692068 	.word	0x64692068
	...
 3009f38:	65676170 	.word	0x65676170
 3009f3c:	7a697320 	.word	0x7a697320
 3009f40:	00000065 	.word	0x00000065
 3009f44:	00000000 	.word	0x00000000
 3009f48:	636f6c62 	.word	0x636f6c62
 3009f4c:	6973206b 	.word	0x6973206b
 3009f50:	0000657a 	.word	0x0000657a
 3009f54:	00000000 	.word	0x00000000
 3009f58:	65676170 	.word	0x65676170
 3009f5c:	72657020 	.word	0x72657020
 3009f60:	6f6c6220 	.word	0x6f6c6220
 3009f64:	00006b63 	.word	0x00006b63
 3009f68:	3d3d3d0a 	.word	0x3d3d3d0a
 3009f6c:	74657220 	.word	0x74657220
 3009f70:	65207972 	.word	0x65207972
 3009f74:	30206363 	.word	0x30206363
 3009f78:	00000078 	.word	0x00000078
 3009f7c:	00000000 	.word	0x00000000
 3009f80:	3d3d3d20 	.word	0x3d3d3d20
 3009f84:	0000000a 	.word	0x0000000a
 3009f88:	725f666e 	.word	0x725f666e
 3009f8c:	74657365 	.word	0x74657365
 3009f90:	202c3028 	.word	0x202c3028
 3009f94:	00000000 	.word	0x00000000
 3009f98:	43452029 	.word	0x43452029
 3009f9c:	72652043 	.word	0x72652043
 3009fa0:	0a726f72 	.word	0x0a726f72
 3009fa4:	00000000 	.word	0x00000000
 3009fa8:	695f666e 	.word	0x695f666e
 3009fac:	746e6564 	.word	0x746e6564
 3009fb0:	28796669 	.word	0x28796669
 3009fb4:	00202c30 	.word	0x00202c30
 3009fb8:	65672029 	.word	0x65672029
 3009fbc:	43452074 	.word	0x43452074
 3009fc0:	21212143 	.word	0x21212143
 3009fc4:	0000000a 	.word	0x0000000a
 3009fc8:	0000002e 	.word	0x0000002e
 3009fcc:	00000000 	.word	0x00000000
 3009fd0:	00002821 	.word	0x00002821
 3009fd4:	00000000 	.word	0x00000000
 3009fd8:	00000029 	.word	0x00000029
 3009fdc:	00000000 	.word	0x00000000
 3009fe0:	0000282f 	.word	0x0000282f
 3009fe4:	00000000 	.word	0x00000000
 3009fe8:	00002858 	.word	0x00002858
 3009fec:	00000000 	.word	0x00000000
 3009ff0:	2050544f 	.word	0x2050544f
 3009ff4:	676f7250 	.word	0x676f7250
 3009ff8:	206d6172 	.word	0x206d6172
 3009ffc:	6f727245 	.word	0x6f727245
 300a000:	4f202c72 	.word	0x4f202c72
 300a004:	455f5054 	.word	0x455f5054
 300a008:	4d545f46 	.word	0x4d545f46
 300a00c:	2054535f 	.word	0x2054535f
 300a010:	7830203d 	.word	0x7830203d
 300a014:	00000000 	.word	0x00000000
 300a018:	203a7325 	.word	0x203a7325
 300a01c:	4c4c554e 	.word	0x4c4c554e
 300a020:	0000000a 	.word	0x0000000a
 300a024:	00000000 	.word	0x00000000
 300a028:	203a7325 	.word	0x203a7325
 300a02c:	65707974 	.word	0x65707974
 300a030:	6425203a 	.word	0x6425203a
 300a034:	6c66202c 	.word	0x6c66202c
 300a038:	5f687361 	.word	0x5f687361
 300a03c:	72646461 	.word	0x72646461
 300a040:	7830203a 	.word	0x7830203a
 300a044:	202c7825 	.word	0x202c7825
 300a048:	676e656c 	.word	0x676e656c
 300a04c:	203a6874 	.word	0x203a6874
 300a050:	78257830 	.word	0x78257830
 300a054:	6d65202c 	.word	0x6d65202c
 300a058:	705f636d 	.word	0x705f636d
 300a05c:	69747261 	.word	0x69747261
 300a060:	6e6f6974 	.word	0x6e6f6974
 300a064:	6425203a 	.word	0x6425203a
 300a068:	0000000a 	.word	0x0000000a
 300a06c:	00000000 	.word	0x00000000
 300a070:	203a7325 	.word	0x203a7325
 300a074:	65707974 	.word	0x65707974
 300a078:	7830203a 	.word	0x7830203a
 300a07c:	202c7825 	.word	0x202c7825
 300a080:	73616c66 	.word	0x73616c66
 300a084:	64615f68 	.word	0x64615f68
 300a088:	203a7264 	.word	0x203a7264
 300a08c:	78257830 	.word	0x78257830
 300a090:	656c202c 	.word	0x656c202c
 300a094:	6874676e 	.word	0x6874676e
 300a098:	7830203a 	.word	0x7830203a
 300a09c:	000a7825 	.word	0x000a7825
 300a0a0:	57465f70 	.word	0x57465f70
 300a0a4:	746e455f 	.word	0x746e455f
 300a0a8:	445f7972 	.word	0x445f7972
 300a0ac:	425f4554 	.word	0x425f4554
 300a0b0:	43544f4f 	.word	0x43544f4f
 300a0b4:	5f45444f 	.word	0x5f45444f
 300a0b8:	004b5452 	.word	0x004b5452
 300a0bc:	00000000 	.word	0x00000000
 300a0c0:	57465f70 	.word	0x57465f70
 300a0c4:	746e455f 	.word	0x746e455f
 300a0c8:	445f7972 	.word	0x445f7972
 300a0cc:	465f4554 	.word	0x465f4554
 300a0d0:	65435f57 	.word	0x65435f57
 300a0d4:	66697472 	.word	0x66697472
 300a0d8:	74616369 	.word	0x74616369
 300a0dc:	00000065 	.word	0x00000065
 300a0e0:	57465f70 	.word	0x57465f70
 300a0e4:	746e455f 	.word	0x746e455f
 300a0e8:	435f7972 	.word	0x435f7972
 300a0ec:	69747265 	.word	0x69747265
 300a0f0:	61636966 	.word	0x61636966
 300a0f4:	415f6574 	.word	0x415f6574
 300a0f8:	00616572 	.word	0x00616572
 300a0fc:	00000000 	.word	0x00000000
 300a100:	5f736373 	.word	0x5f736373
 300a104:	646e6966 	.word	0x646e6966
 300a108:	5f77665f 	.word	0x5f77665f
 300a10c:	72746e65 	.word	0x72746e65
 300a110:	61662079 	.word	0x61662079
 300a114:	00006c69 	.word	0x00006c69
 300a118:	5f455444 	.word	0x5f455444
 300a11c:	746f6f42 	.word	0x746f6f42
 300a120:	65646f63 	.word	0x65646f63
 300a124:	4b54525f 	.word	0x4b54525f
 300a128:	66656220 	.word	0x66656220
 300a12c:	2065726f 	.word	0x2065726f
 300a130:	72636564 	.word	0x72636564
 300a134:	00747079 	.word	0x00747079
 300a138:	20636d73 	.word	0x20636d73
 300a13c:	6c6c6163 	.word	0x6c6c6163
 300a140:	45412820 	.word	0x45412820
 300a144:	65642053 	.word	0x65642053
 300a148:	70797263 	.word	0x70797263
 300a14c:	66202974 	.word	0x66202974
 300a150:	216c6961 	.word	0x216c6961
 300a154:	00000000 	.word	0x00000000
 300a158:	5f455444 	.word	0x5f455444
 300a15c:	746f6f42 	.word	0x746f6f42
 300a160:	65646f63 	.word	0x65646f63
 300a164:	4b54525f 	.word	0x4b54525f
 300a168:	74666120 	.word	0x74666120
 300a16c:	64207265 	.word	0x64207265
 300a170:	79726365 	.word	0x79726365
 300a174:	00007470 	.word	0x00007470
 300a178:	79706f63 	.word	0x79706f63
 300a17c:	676d695f 	.word	0x676d695f
 300a180:	6f72665f 	.word	0x6f72665f
 300a184:	6d655f6d 	.word	0x6d655f6d
 300a188:	0028636d 	.word	0x0028636d
 300a18c:	00000000 	.word	0x00000000
 300a190:	65207766 	.word	0x65207766
 300a194:	7972746e 	.word	0x7972746e
 300a198:	00000a3a 	.word	0x00000a3a
 300a19c:	00000000 	.word	0x00000000
 300a1a0:	70797409 	.word	0x70797409
 300a1a4:	00000065 	.word	0x00000065
 300a1a8:	616c6609 	.word	0x616c6609
 300a1ac:	615f6873 	.word	0x615f6873
 300a1b0:	00726464 	.word	0x00726464
 300a1b4:	00000000 	.word	0x00000000
 300a1b8:	6e656c09 	.word	0x6e656c09
 300a1bc:	00687467 	.word	0x00687467
 300a1c0:	20616d72 	.word	0x20616d72
 300a1c4:	62616e65 	.word	0x62616e65
 300a1c8:	0000656c 	.word	0x0000656c
 300a1cc:	00000000 	.word	0x00000000
 300a1d0:	38397830 	.word	0x38397830
 300a1d4:	34303030 	.word	0x34303030
 300a1d8:	203a3435 	.word	0x203a3435
 300a1dc:	78257830 	.word	0x78257830
 300a1e0:	7830202c 	.word	0x7830202c
 300a1e4:	31303839 	.word	0x31303839
 300a1e8:	30306337 	.word	0x30306337
 300a1ec:	7830203a 	.word	0x7830203a
 300a1f0:	000a7825 	.word	0x000a7825
 300a1f4:	00000000 	.word	0x00000000
 300a1f8:	20464948 	.word	0x20464948
 300a1fc:	20746f6e 	.word	0x20746f6e
 300a200:	6e6e6f63 	.word	0x6e6e6f63
 300a204:	00746365 	.word	0x00746365
 300a208:	535f5044 	.word	0x535f5044
 300a20c:	45544154 	.word	0x45544154
 300a210:	7830203a 	.word	0x7830203a
 300a214:	000a7825 	.word	0x000a7825
 300a218:	20706d63 	.word	0x20706d63
 300a21c:	6c696166 	.word	0x6c696166
 300a220:	78646920 	.word	0x78646920
 300a224:	00203a20 	.word	0x00203a20
 300a228:	79706f63 	.word	0x79706f63
 300a22c:	6d656d20 	.word	0x6d656d20
 300a230:	3a79726f 	.word	0x3a79726f
 300a234:	63727320 	.word	0x63727320
 300a238:	73202b20 	.word	0x73202b20
 300a23c:	20657a69 	.word	0x20657a69
 300a240:	7364203e 	.word	0x7364203e
 300a244:	00000a74 	.word	0x00000a74
 300a248:	20637273 	.word	0x20637273
 300a24c:	7830203d 	.word	0x7830203d
	...
 300a258:	20747364 	.word	0x20747364
 300a25c:	7830203d 	.word	0x7830203d
	...
 300a268:	657a6973 	.word	0x657a6973
 300a26c:	30203d20 	.word	0x30203d20
 300a270:	00000078 	.word	0x00000078
 300a274:	00000000 	.word	0x00000000
 300a278:	79706f63 	.word	0x79706f63
 300a27c:	6d656d20 	.word	0x6d656d20
 300a280:	3a79726f 	.word	0x3a79726f
 300a284:	74736420 	.word	0x74736420
 300a288:	73202b20 	.word	0x73202b20
 300a28c:	20657a69 	.word	0x20657a69
 300a290:	7273203e 	.word	0x7273203e
 300a294:	00000a63 	.word	0x00000a63
 300a298:	554e203a 	.word	0x554e203a
 300a29c:	000a4c4c 	.word	0x000a4c4c
 300a2a0:	0000203a 	.word	0x0000203a
 300a2a4:	00000000 	.word	0x00000000
 300a2a8:	00000020 	.word	0x00000020
 300a2ac:	00000000 	.word	0x00000000
 300a2b0:	78302820 	.word	0x78302820
 300a2b4:	00000000 	.word	0x00000000
 300a2b8:	5f306364 	.word	0x5f306364
 300a2bc:	6d617264 	.word	0x6d617264
 300a2c0:	7a69735f 	.word	0x7a69735f
 300a2c4:	72652065 	.word	0x72652065
 300a2c8:	28726f72 	.word	0x28726f72
 300a2cc:	00007830 	.word	0x00007830
 300a2d0:	5f316364 	.word	0x5f316364
 300a2d4:	6d617264 	.word	0x6d617264
 300a2d8:	7a69735f 	.word	0x7a69735f
 300a2dc:	72652065 	.word	0x72652065
 300a2e0:	28726f72 	.word	0x28726f72
 300a2e4:	00007830 	.word	0x00007830
 300a2e8:	32616873 	.word	0x32616873
 300a2ec:	68203635 	.word	0x68203635
 300a2f0:	00687361 	.word	0x00687361
 300a2f4:	00000000 	.word	0x00000000
 300a2f8:	20636d73 	.word	0x20636d73
 300a2fc:	6c6c6163 	.word	0x6c6c6163
 300a300:	53522820 	.word	0x53522820
 300a304:	66202941 	.word	0x66202941
 300a308:	216c6961 	.word	0x216c6961
 300a30c:	00000000 	.word	0x00000000
 300a310:	20415352 	.word	0x20415352
 300a314:	7074756f 	.word	0x7074756f
 300a318:	00007475 	.word	0x00007475
 300a31c:	00000000 	.word	0x00000000
 300a320:	75746572 	.word	0x75746572
 300a324:	68206e72 	.word	0x68206e72
 300a328:	32687361 	.word	0x32687361
 300a32c:	00000000 	.word	0x00000000
 300a330:	68736168 	.word	0x68736168
 300a334:	72662031 	.word	0x72662031
 300a338:	43206d6f 	.word	0x43206d6f
 300a33c:	00000050 	.word	0x00000050
 300a340:	68736168 	.word	0x68736168
 300a344:	72662032 	.word	0x72662032
 300a348:	73206d6f 	.word	0x73206d6f
 300a34c:	00006769 	.word	0x00006769
 300a350:	706d6f63 	.word	0x706d6f63
 300a354:	5f657261 	.word	0x5f657261
 300a358:	6f6d656d 	.word	0x6f6d656d
 300a35c:	00287972 	.word	0x00287972
 300a360:	00203a29 	.word	0x00203a29
 300a364:	00000000 	.word	0x00000000

Disassembly of section .data:

000000000300a368 <sys_boot_flash_type>:
 300a368:	deadbeef 	.word	0xdeadbeef

000000000300a36c <sys_errno>:
 300a36c:	000000ff 	.word	0x000000ff

000000000300a370 <sys_rsa_key_addr>:
 300a370:	a3958d03 	.word	0xa3958d03

000000000300a374 <sys_is_scs_activated>:
 300a374:	00000001 	.word	0x00000001

000000000300a378 <UartReg>:
 300a378:	98007800 	.word	0x98007800
 300a37c:	00000000 	.word	0x00000000

000000000300a380 <rsa_pub_key1>:
 300a380:	ec39e4af 	.word	0xec39e4af
 300a384:	0016e5dd 	.word	0x0016e5dd
 300a388:	8465bb72 	.word	0x8465bb72
 300a38c:	bd4fa5dd 	.word	0xbd4fa5dd
 300a390:	e32ee3df 	.word	0xe32ee3df
 300a394:	00db5c17 	.word	0x00db5c17
 300a398:	d2fe52ac 	.word	0xd2fe52ac
 300a39c:	ec2a71c3 	.word	0xec2a71c3
 300a3a0:	1d77452b 	.word	0x1d77452b
 300a3a4:	304c7f48 	.word	0x304c7f48
 300a3a8:	7c2c34c7 	.word	0x7c2c34c7
 300a3ac:	01e5958f 	.word	0x01e5958f
 300a3b0:	1f9473d8 	.word	0x1f9473d8
 300a3b4:	2710e662 	.word	0x2710e662
 300a3b8:	acf87a98 	.word	0xacf87a98
 300a3bc:	9f9b925a 	.word	0x9f9b925a
 300a3c0:	1719b66e 	.word	0x1719b66e
 300a3c4:	0c3d1971 	.word	0x0c3d1971
 300a3c8:	18f46303 	.word	0x18f46303
 300a3cc:	fcbfc6a4 	.word	0xfcbfc6a4
 300a3d0:	12ff9440 	.word	0x12ff9440
 300a3d4:	8ec0883f 	.word	0x8ec0883f
 300a3d8:	5481c382 	.word	0x5481c382
 300a3dc:	3dba11fa 	.word	0x3dba11fa
 300a3e0:	9ef62b74 	.word	0x9ef62b74
 300a3e4:	ffef1d46 	.word	0xffef1d46
 300a3e8:	894305d8 	.word	0x894305d8
 300a3ec:	76ed8476 	.word	0x76ed8476
 300a3f0:	ad9060f3 	.word	0xad9060f3
 300a3f4:	38c2ccfa 	.word	0x38c2ccfa
 300a3f8:	62c0ff88 	.word	0x62c0ff88
 300a3fc:	1579ec0a 	.word	0x1579ec0a
 300a400:	675e0048 	.word	0x675e0048
 300a404:	486be9a4 	.word	0x486be9a4
 300a408:	0cde44d9 	.word	0x0cde44d9
 300a40c:	56cf0ee8 	.word	0x56cf0ee8
 300a410:	2618c91b 	.word	0x2618c91b
 300a414:	8a24e311 	.word	0x8a24e311
 300a418:	642f509c 	.word	0x642f509c
 300a41c:	48d88a99 	.word	0x48d88a99
 300a420:	629dd425 	.word	0x629dd425
 300a424:	a8af95be 	.word	0xa8af95be
 300a428:	9d305a0e 	.word	0x9d305a0e
 300a42c:	6eeee264 	.word	0x6eeee264
 300a430:	25d2f066 	.word	0x25d2f066
 300a434:	db143839 	.word	0xdb143839
 300a438:	a86d03d4 	.word	0xa86d03d4
 300a43c:	fa80cb0f 	.word	0xfa80cb0f
 300a440:	def72263 	.word	0xdef72263
 300a444:	83944dbf 	.word	0x83944dbf
 300a448:	2ec53a81 	.word	0x2ec53a81
 300a44c:	a8c593d3 	.word	0xa8c593d3
 300a450:	9374b09c 	.word	0x9374b09c
 300a454:	11fd65c8 	.word	0x11fd65c8
 300a458:	2a5e7165 	.word	0x2a5e7165
 300a45c:	f148b0b7 	.word	0xf148b0b7
 300a460:	41054302 	.word	0x41054302
 300a464:	7a64a9a8 	.word	0x7a64a9a8
 300a468:	ab81b7ec 	.word	0xab81b7ec
 300a46c:	dad35f89 	.word	0xdad35f89
 300a470:	0db8b8c3 	.word	0x0db8b8c3
 300a474:	3f74dba1 	.word	0x3f74dba1
 300a478:	af3f83eb 	.word	0xaf3f83eb
 300a47c:	b9975438 	.word	0xb9975438

000000000300a480 <rsa_pub_key1_end>:
 300a480:	00000000 	.word	0x00000000

000000000300a484 <rsa_pub_key2>:
 300a484:	4ee1bb69 	.word	0x4ee1bb69
 300a488:	a8242ad8 	.word	0xa8242ad8
 300a48c:	f9dae6ed 	.word	0xf9dae6ed
 300a490:	4aa7dbb1 	.word	0x4aa7dbb1
 300a494:	d3f7b257 	.word	0xd3f7b257
 300a498:	4f2ab77a 	.word	0x4f2ab77a
 300a49c:	c707c98a 	.word	0xc707c98a
 300a4a0:	2e2f619b 	.word	0x2e2f619b
 300a4a4:	08a9a421 	.word	0x08a9a421
 300a4a8:	5865f922 	.word	0x5865f922
 300a4ac:	e0f2c072 	.word	0xe0f2c072
 300a4b0:	2fd0fe77 	.word	0x2fd0fe77
 300a4b4:	1ee29bb7 	.word	0x1ee29bb7
 300a4b8:	5f8e613a 	.word	0x5f8e613a
 300a4bc:	9e782ca4 	.word	0x9e782ca4
 300a4c0:	32d72f1a 	.word	0x32d72f1a
 300a4c4:	dd54e70b 	.word	0xdd54e70b
 300a4c8:	27c984b4 	.word	0x27c984b4
 300a4cc:	82a0ac0e 	.word	0x82a0ac0e
 300a4d0:	c98372f2 	.word	0xc98372f2
 300a4d4:	98b0dcda 	.word	0x98b0dcda
 300a4d8:	1fe8a3ae 	.word	0x1fe8a3ae
 300a4dc:	10c3452b 	.word	0x10c3452b
 300a4e0:	3b90cd2f 	.word	0x3b90cd2f
 300a4e4:	4c555041 	.word	0x4c555041
 300a4e8:	d8b9938a 	.word	0xd8b9938a
 300a4ec:	8cc83188 	.word	0x8cc83188
 300a4f0:	c1a95c15 	.word	0xc1a95c15
 300a4f4:	1601eb0b 	.word	0x1601eb0b
 300a4f8:	f247974d 	.word	0xf247974d
 300a4fc:	70687d21 	.word	0x70687d21
 300a500:	12802bfe 	.word	0x12802bfe
 300a504:	ba61e3be 	.word	0xba61e3be
 300a508:	9b6f28db 	.word	0x9b6f28db
 300a50c:	47b3676e 	.word	0x47b3676e
 300a510:	b0e2bdbd 	.word	0xb0e2bdbd
 300a514:	4a3e8019 	.word	0x4a3e8019
 300a518:	88d42293 	.word	0x88d42293
 300a51c:	00edbc71 	.word	0x00edbc71
 300a520:	4f95927e 	.word	0x4f95927e
 300a524:	38120622 	.word	0x38120622
 300a528:	97d21e59 	.word	0x97d21e59
 300a52c:	fe02b8ee 	.word	0xfe02b8ee
 300a530:	4965e146 	.word	0x4965e146
 300a534:	54a163c3 	.word	0x54a163c3
 300a538:	9a869157 	.word	0x9a869157
 300a53c:	d1716773 	.word	0xd1716773
 300a540:	cb090873 	.word	0xcb090873
 300a544:	5e0bcee6 	.word	0x5e0bcee6
 300a548:	07fedd41 	.word	0x07fedd41
 300a54c:	e550b372 	.word	0xe550b372
 300a550:	74af5857 	.word	0x74af5857
 300a554:	09e3ee47 	.word	0x09e3ee47
 300a558:	2ce3108a 	.word	0x2ce3108a
 300a55c:	a228c1d1 	.word	0xa228c1d1
 300a560:	14110c84 	.word	0x14110c84
 300a564:	3305eaad 	.word	0x3305eaad
 300a568:	761795f5 	.word	0x761795f5
 300a56c:	ee87c28b 	.word	0xee87c28b
 300a570:	d7c4e177 	.word	0xd7c4e177
 300a574:	4a9d1f9a 	.word	0x4a9d1f9a
 300a578:	ddb640d3 	.word	0xddb640d3
 300a57c:	8bd9117f 	.word	0x8bd9117f
 300a580:	cf5321d4 	.word	0xcf5321d4

000000000300a584 <rsa_pub_key2_end>:
 300a584:	00000000 	.word	0x00000000

000000000300a588 <rsa_pub_key3>:
 300a588:	d79cd341 	.word	0xd79cd341
 300a58c:	42011e92 	.word	0x42011e92
 300a590:	512a2110 	.word	0x512a2110
 300a594:	b0a478cd 	.word	0xb0a478cd
 300a598:	dade40f2 	.word	0xdade40f2
 300a59c:	fb2064ce 	.word	0xfb2064ce
 300a5a0:	b7a9f08e 	.word	0xb7a9f08e
 300a5a4:	01282eb9 	.word	0x01282eb9
 300a5a8:	6edbba92 	.word	0x6edbba92
 300a5ac:	cd4ba5eb 	.word	0xcd4ba5eb
 300a5b0:	7c57ce73 	.word	0x7c57ce73
 300a5b4:	732122dc 	.word	0x732122dc
 300a5b8:	7ee15721 	.word	0x7ee15721
 300a5bc:	e77ece2e 	.word	0xe77ece2e
 300a5c0:	9b71b5ed 	.word	0x9b71b5ed
 300a5c4:	35252072 	.word	0x35252072
 300a5c8:	3b28c904 	.word	0x3b28c904
 300a5cc:	5335ccf2 	.word	0x5335ccf2
 300a5d0:	f7b6f291 	.word	0xf7b6f291
 300a5d4:	43b49b81 	.word	0x43b49b81
 300a5d8:	c43588ba 	.word	0xc43588ba
 300a5dc:	a1353d51 	.word	0xa1353d51
 300a5e0:	df5fce6f 	.word	0xdf5fce6f
 300a5e4:	b233dcc2 	.word	0xb233dcc2
 300a5e8:	3c773fb6 	.word	0x3c773fb6
 300a5ec:	1b45da53 	.word	0x1b45da53
 300a5f0:	c6a4d8b3 	.word	0xc6a4d8b3
 300a5f4:	d95cd1f8 	.word	0xd95cd1f8
 300a5f8:	60cee41e 	.word	0x60cee41e
 300a5fc:	c291f865 	.word	0xc291f865
 300a600:	7decd6e7 	.word	0x7decd6e7
 300a604:	21d3c0ca 	.word	0x21d3c0ca
 300a608:	22b2bd8a 	.word	0x22b2bd8a
 300a60c:	303b764d 	.word	0x303b764d
 300a610:	6d9eb331 	.word	0x6d9eb331
 300a614:	0a5dde87 	.word	0x0a5dde87
 300a618:	d58fbe49 	.word	0xd58fbe49
 300a61c:	acf52ab0 	.word	0xacf52ab0
 300a620:	e34746e1 	.word	0xe34746e1
 300a624:	a23fe74b 	.word	0xa23fe74b
 300a628:	02af811d 	.word	0x02af811d
 300a62c:	72d26610 	.word	0x72d26610
 300a630:	a5240ddf 	.word	0xa5240ddf
 300a634:	86d67c22 	.word	0x86d67c22
 300a638:	f6f32d84 	.word	0xf6f32d84
 300a63c:	aeec0f56 	.word	0xaeec0f56
 300a640:	2907ffc2 	.word	0x2907ffc2
 300a644:	d8e485d1 	.word	0xd8e485d1
 300a648:	9bc6a6ef 	.word	0x9bc6a6ef
 300a64c:	835c6b68 	.word	0x835c6b68
 300a650:	dc706738 	.word	0xdc706738
 300a654:	0104b51f 	.word	0x0104b51f
 300a658:	5501ebe3 	.word	0x5501ebe3
 300a65c:	99e72090 	.word	0x99e72090
 300a660:	cad22bbe 	.word	0xcad22bbe
 300a664:	b212e4d4 	.word	0xb212e4d4
 300a668:	90526b17 	.word	0x90526b17
 300a66c:	18c40039 	.word	0x18c40039
 300a670:	82eea413 	.word	0x82eea413
 300a674:	82c208b8 	.word	0x82c208b8
 300a678:	96e3f928 	.word	0x96e3f928
 300a67c:	3c2bf26a 	.word	0x3c2bf26a
 300a680:	39e7f97a 	.word	0x39e7f97a
 300a684:	d2450d10 	.word	0xd2450d10

000000000300a688 <rsa_pub_key3_end>:
 300a688:	00000000 	.word	0x00000000

000000000300a68c <rsa_pub_key4>:
 300a68c:	78a00cf3 	.word	0x78a00cf3
 300a690:	83df481d 	.word	0x83df481d
 300a694:	aae35536 	.word	0xaae35536
 300a698:	b22ed6a7 	.word	0xb22ed6a7
 300a69c:	00889c20 	.word	0x00889c20
 300a6a0:	e06b5d27 	.word	0xe06b5d27
 300a6a4:	5deab410 	.word	0x5deab410
 300a6a8:	7c3fd778 	.word	0x7c3fd778
 300a6ac:	0f75cd74 	.word	0x0f75cd74
 300a6b0:	e2a691cc 	.word	0xe2a691cc
 300a6b4:	121eeb3e 	.word	0x121eeb3e
 300a6b8:	a1fb122f 	.word	0xa1fb122f
 300a6bc:	52a92606 	.word	0x52a92606
 300a6c0:	da84508a 	.word	0xda84508a
 300a6c4:	ca651b00 	.word	0xca651b00
 300a6c8:	5e184668 	.word	0x5e184668
 300a6cc:	b8379c58 	.word	0xb8379c58
 300a6d0:	bc92ae7a 	.word	0xbc92ae7a
 300a6d4:	6364750e 	.word	0x6364750e
 300a6d8:	6fe07e67 	.word	0x6fe07e67
 300a6dc:	434a87a6 	.word	0x434a87a6
 300a6e0:	17d158b9 	.word	0x17d158b9
 300a6e4:	123d3780 	.word	0x123d3780
 300a6e8:	9c1fb415 	.word	0x9c1fb415
 300a6ec:	de021615 	.word	0xde021615
 300a6f0:	f0d7e606 	.word	0xf0d7e606
 300a6f4:	83079956 	.word	0x83079956
 300a6f8:	ef768135 	.word	0xef768135
 300a6fc:	0e3860a0 	.word	0x0e3860a0
 300a700:	4fd180b3 	.word	0x4fd180b3
 300a704:	9fb047e0 	.word	0x9fb047e0
 300a708:	6f070440 	.word	0x6f070440
 300a70c:	0a9d64f2 	.word	0x0a9d64f2
 300a710:	e213d2be 	.word	0xe213d2be
 300a714:	3d7513aa 	.word	0x3d7513aa
 300a718:	1608e9d0 	.word	0x1608e9d0
 300a71c:	5a48aa21 	.word	0x5a48aa21
 300a720:	5923c8b7 	.word	0x5923c8b7
 300a724:	abf6dc3b 	.word	0xabf6dc3b
 300a728:	605d8f1d 	.word	0x605d8f1d
 300a72c:	6ffdbf72 	.word	0x6ffdbf72
 300a730:	30f7d58f 	.word	0x30f7d58f
 300a734:	b478dfe1 	.word	0xb478dfe1
 300a738:	ad0d928c 	.word	0xad0d928c
 300a73c:	4154ab4d 	.word	0x4154ab4d
 300a740:	ce7ccd7f 	.word	0xce7ccd7f
 300a744:	9882a22d 	.word	0x9882a22d
 300a748:	c305ae52 	.word	0xc305ae52
 300a74c:	bea12abb 	.word	0xbea12abb
 300a750:	35b27435 	.word	0x35b27435
 300a754:	80217690 	.word	0x80217690
 300a758:	27974111 	.word	0x27974111
 300a75c:	494db7d3 	.word	0x494db7d3
 300a760:	f2908ffe 	.word	0xf2908ffe
 300a764:	80eeab79 	.word	0x80eeab79
 300a768:	c225371e 	.word	0xc225371e
 300a76c:	a7782921 	.word	0xa7782921
 300a770:	acb00734 	.word	0xacb00734
 300a774:	58e81861 	.word	0x58e81861
 300a778:	51d4f23f 	.word	0x51d4f23f
 300a77c:	b8224e2f 	.word	0xb8224e2f
 300a780:	d5b9f5fa 	.word	0xd5b9f5fa
 300a784:	fb698793 	.word	0xfb698793
 300a788:	a996daf1 	.word	0xa996daf1

000000000300a78c <rsa_pub_key4_end>:
 300a78c:	00000000 	.word	0x00000000

Disassembly of section .bss:

000000000300a790 <sys_aes_mode>:
 300a790:	00000000 	.word	0x00000000

000000000300a794 <sys_blind_uwrite>:
 300a794:	00000000 	.word	0x00000000

000000000300a798 <sys_bisr_done>:
 300a798:	00000000 	.word	0x00000000

000000000300a79c <sys_nand_type>:
 300a79c:	00000000 	.word	0x00000000

000000000300a7a0 <sys_real_bootcode_size>:
	...

000000000300a7a8 <crc_table>:
	...

000000000300aba8 <rw_descriptor>:
	...

000000000300abb0 <sbuf_descriptor>:
	...

000000000300ac30 <emmc_card>:
	...

000000000300aca8 <BOOT_SIZE_MULT>:
 300aca8:	00000000 	.word	0x00000000

000000000300acac <emmc_sec_count>:
 300acac:	00000000 	.word	0x00000000

000000000300acb0 <mcp_dscpt>:
	...

000000000300ace8 <nand_spare_dma>:
	...

000000000300ad28 <g_BlockPerFlash>:
 300ad28:	00000000 	.word	0x00000000

000000000300ad2c <g_PagePerBlock>:
 300ad2c:	00000000 	.word	0x00000000

000000000300ad30 <g_BlockSize>:
 300ad30:	00000000 	.word	0x00000000

000000000300ad34 <g_PageSize>:
 300ad34:	00000000 	.word	0x00000000

000000000300ad38 <force_2k>:
	...

000000000300ad40 <g_nand_data_dma>:
	...

000000000300bd40 <p_BootArray_FW_Table>:
	...

000000000300bd48 <p_FW_Entry_DTE_BOOTCODE_RTK>:
	...

000000000300bd50 <p_FW_Entry_DTE_FW_Certificate>:
	...

000000000300bd58 <p_FW_Entry_Certificate_Area>:
	...

000000000300bd60 <g_backup_BootArray_FW_Table>:
	...

000000000300c160 <sys_rsa_addr>:
	...

000000000300c260 <g_DTE_FW_Certificate>:
	...

000000000300c660 <rsa_output>:
	...

000000000300c760 <sha256_output>:
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
       0:	00000090 	.inst	0x00000090 ; undefined
       4:	006e0002 	.inst	0x006e0002 ; undefined
       8:	01040000 	.inst	0x01040000 ; undefined
       c:	000d0efb 	.inst	0x000d0efb ; undefined
      10:	01010101 	.inst	0x01010101 ; undefined
      14:	01000000 	.inst	0x01000000 ; undefined
      18:	2f010000 	.inst	0x2f010000 ; undefined
      1c:	656d6f68 	.inst	0x656d6f68 ; undefined
      20:	64652f31 	.inst	0x64652f31 ; undefined
      24:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
      28:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
      2c:	68742f68 	.inst	0x68742f68 ; undefined
      30:	742f726f 	.inst	0x742f726f ; undefined
      34:	6b6e7572 	.inst	0x6b6e7572 ; undefined
      38:	312e382d 	adds	w13, w1, #0xb8e
      3c:	4554442f 	.inst	0x4554442f ; undefined
      40:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
      44:	646f6374 	.inst	0x646f6374 ; undefined
      48:	69622f65 	ldpsw	x5, x11, [x27,#-240]
      4c:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
      50:	6372732f 	.inst	0x6372732f ; undefined
      54:	6372612f 	.inst	0x6372612f ; undefined
      58:	65722f68 	.inst	0x65722f68 ; undefined
      5c:	2f746573 	.inst	0x2f746573 ; undefined
      60:	746f6f62 	.inst	0x746f6f62 ; undefined
      64:	74636576 	.inst	0x74636576 ; undefined
      68:	0000726f 	.inst	0x0000726f ; undefined
      6c:	72617473 	.inst	0x72617473 ; undefined
      70:	00532e74 	.inst	0x00532e74 ; undefined
      74:	00000001 	.inst	0x00000001 ; undefined
      78:	00020900 	.inst	0x00020900 ; undefined
      7c:	00030000 	.inst	0x00030000 ; undefined
      80:	03000000 	.inst	0x03000000 ; undefined
      84:	21210112 	.inst	0x21210112 ; undefined
      88:	23222123 	.inst	0x23222123 ; undefined
      8c:	02272321 	.inst	0x02272321 ; undefined
      90:	01010005 	.inst	0x01010005 ; undefined
      94:	00000262 	.inst	0x00000262 ; undefined
      98:	013f0002 	.inst	0x013f0002 ; undefined
      9c:	01040000 	.inst	0x01040000 ; undefined
      a0:	000d0efb 	.inst	0x000d0efb ; undefined
      a4:	01010101 	.inst	0x01010101 ; undefined
      a8:	01000000 	.inst	0x01000000 ; undefined
      ac:	2f010000 	.inst	0x2f010000 ; undefined
      b0:	656d6f68 	.inst	0x656d6f68 ; undefined
      b4:	64652f31 	.inst	0x64652f31 ; undefined
      b8:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
      bc:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
      c0:	68742f68 	.inst	0x68742f68 ; undefined
      c4:	742f726f 	.inst	0x742f726f ; undefined
      c8:	6b6e7572 	.inst	0x6b6e7572 ; undefined
      cc:	312e382d 	adds	w13, w1, #0xb8e
      d0:	4554442f 	.inst	0x4554442f ; undefined
      d4:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
      d8:	646f6374 	.inst	0x646f6374 ; undefined
      dc:	69622f65 	ldpsw	x5, x11, [x27,#-240]
      e0:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
      e4:	6372732f 	.inst	0x6372732f ; undefined
      e8:	6372612f 	.inst	0x6372612f ; undefined
      ec:	65722f68 	.inst	0x65722f68 ; undefined
      f0:	2f746573 	.inst	0x2f746573 ; undefined
      f4:	746f6f62 	.inst	0x746f6f62 ; undefined
      f8:	74636576 	.inst	0x74636576 ; undefined
      fc:	2f00726f 	.inst	0x2f00726f ; undefined
     100:	656d6f68 	.inst	0x656d6f68 ; undefined
     104:	64652f31 	.inst	0x64652f31 ; undefined
     108:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
     10c:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
     110:	68742f68 	.inst	0x68742f68 ; undefined
     114:	742f726f 	.inst	0x742f726f ; undefined
     118:	6b6e7572 	.inst	0x6b6e7572 ; undefined
     11c:	312e382d 	adds	w13, w1, #0xb8e
     120:	4554442f 	.inst	0x4554442f ; undefined
     124:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
     128:	646f6374 	.inst	0x646f6374 ; undefined
     12c:	69622f65 	ldpsw	x5, x11, [x27,#-240]
     130:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
     134:	706d742f 	adr	x15, dafbb <_stack_size+0xd9fbb>
     138:	6473612f 	.inst	0x6473612f ; undefined
     13c:	2d34366b 	stp	s11, s13, [x19,#-96]
     140:	2e392e34 	uqsub	v20.8b, v17.8b, v25.8b
     144:	35612d33 	cbnz	w19, c26e8 <_stack_size+0xc16e8>
     148:	4c452d33 	.inst	0x4c452d33 ; undefined
     14c:	312e332d 	adds	w13, w25, #0xb8c
     150:	32672d30 	.inst	0x32672d30 ; undefined
     154:	2d39312e 	stp	s14, s12, [x9,#-56]
     158:	6e343661 	cmhi	v1.16b, v19.16b, v20.16b
     15c:	35312d74 	cbnz	w20, 62708 <_stack_size+0x61708>
     160:	35313630 	cbnz	w16, 62824 <_stack_size+0x61824>
     164:	636e692f 	.inst	0x636e692f ; undefined
     168:	6564756c 	.inst	0x6564756c ; undefined
     16c:	6f682f00 	.inst	0x6f682f00 ; undefined
     170:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
     174:	73696465 	.inst	0x73696465 ; undefined
     178:	735f6e6f 	.inst	0x735f6e6f ; undefined
     17c:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
     180:	726f6874 	.inst	0x726f6874 ; undefined
     184:	7572742f 	.inst	0x7572742f ; undefined
     188:	382d6b6e 	strb	w14, [x27,x13]
     18c:	442f312e 	.inst	0x442f312e ; undefined
     190:	425f4554 	.inst	0x425f4554 ; undefined
     194:	63746f6f 	.inst	0x63746f6f ; undefined
     198:	2f65646f 	.inst	0x2f65646f ; undefined
     19c:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
     1a0:	732f2e2e 	.inst	0x732f2e2e ; undefined
     1a4:	612f6372 	.inst	0x612f6372 ; undefined
     1a8:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
     1ac:	6c636e69 	ldnp	d9, d27, [x19,#-464]
     1b0:	00656475 	.inst	0x00656475 ; undefined
     1b4:	63616300 	.inst	0x63616300 ; undefined
     1b8:	765f6568 	.inst	0x765f6568 ; undefined
     1bc:	00632e38 	.inst	0x00632e38 ; undefined
     1c0:	73000001 	.inst	0x73000001 ; undefined
     1c4:	6e696474 	umax	v20.8h, v3.8h, v9.8h
     1c8:	00682e74 	.inst	0x00682e74 ; undefined
     1cc:	74000002 	.inst	0x74000002 ; undefined
     1d0:	64657079 	.inst	0x64657079 ; undefined
     1d4:	682e6665 	.inst	0x682e6665 ; undefined
     1d8:	00000300 	.inst	0x00000300 ; undefined
     1dc:	02090000 	.inst	0x02090000 ; undefined
     1e0:	03000038 	.inst	0x03000038 ; undefined
     1e4:	00000000 	.inst	0x00000000 ; undefined
     1e8:	0101ac03 	.inst	0x0101ac03 ; undefined
     1ec:	031f4016 	.inst	0x031f4016 ; undefined
     1f0:	0318200b 	.inst	0x0318200b ; undefined
     1f4:	23262e7a 	.inst	0x23262e7a ; undefined
     1f8:	2000ea03 	.inst	0x2000ea03 ; undefined
     1fc:	95033d22 	bl	40cf684 <_stack_base+0x10c1f04>
     200:	e803207f 	.inst	0xe803207f ; undefined
     204:	21222000 	.inst	0x21222000 ; undefined
     208:	207f9703 	.inst	0x207f9703 ; undefined
     20c:	032e2e03 	.inst	0x032e2e03 ; undefined
     210:	03207ea3 	.inst	0x03207ea3 ; undefined
     214:	032001e5 	.inst	0x032001e5 ; undefined
     218:	21207ea1 	.inst	0x21207ea1 ; undefined
     21c:	5a200c03 	.inst	0x5a200c03 ; undefined
     220:	0101d403 	.inst	0x0101d403 ; undefined
     224:	207a0327 	.inst	0x207a0327 ; undefined
     228:	03204d03 	.inst	0x03204d03 ; undefined
     22c:	033c7ec9 	.inst	0x033c7ec9 ; undefined
     230:	032001bf 	.inst	0x032001bf ; undefined
     234:	21207ec7 	.inst	0x21207ec7 ; undefined
     238:	5a200c03 	.inst	0x5a200c03 ; undefined
     23c:	0101ad03 	.inst	0x0101ad03 ; undefined
     240:	7ebd0321 	.inst	0x7ebd0321 ; undefined
     244:	01c60320 	.inst	0x01c60320 ; undefined
     248:	28262620 	stnp	w0, w9, [x17,#-208]
     24c:	7eb10337 	.inst	0x7eb10337 ; undefined
     250:	0c03212e 	.inst	0x0c03212e ; undefined
     254:	c2035a20 	.inst	0xc2035a20 ; undefined
     258:	2c230101 	stnp	s1, s0, [x8,#-232]
     25c:	207ed303 	.inst	0x207ed303 ; undefined
     260:	200a032f 	.inst	0x200a032f ; undefined
     264:	01de032f 	.inst	0x01de032f ; undefined
     268:	033d2220 	.inst	0x033d2220 ; undefined
     26c:	2f207eba 	.inst	0x2f207eba ; undefined
     270:	2b2f2f27 	adds	w7, w25, w15, uxth #3
     274:	10033d3d 	adr	x29, 6a18 <_stack_size+0x5a18>
     278:	2070032e 	.inst	0x2070032e ; undefined
     27c:	03201203 	.inst	0x03201203 ; undefined
     280:	1503206f 	b	40c843c <_stack_base+0x10bacbc>
     284:	4a6b033c 	eon	w28, w25, w11, lsr #0
     288:	26200903 	.inst	0x26200903 ; undefined
     28c:	1b1e2532 	madd	w18, w9, w30, w9
     290:	3c0a0329 	stur	b9, [x25,#160]
     294:	20730331 	.inst	0x20730331 ; undefined
     298:	1e22223d 	.inst	0x1e22223d ; undefined
     29c:	212b2332 	.inst	0x212b2332 ; undefined
     2a0:	20730333 	.inst	0x20730333 ; undefined
     2a4:	7f9b0339 	.inst	0x7f9b0339 ; undefined
     2a8:	0187034a 	.inst	0x0187034a ; undefined
     2ac:	7eff0320 	.inst	0x7eff0320 ; undefined
     2b0:	0c032120 	.inst	0x0c032120 ; undefined
     2b4:	b7035a20 	tbnz	x0, #32, 6df8 <_stack_size+0x5df8>
     2b8:	0e030101 	tbl	v1.8b, {v8.16b}, v3.8b
     2bc:	2e740320 	uaddl	v0.4s, v25.4h, v20.4h
     2c0:	03202503 	.inst	0x03202503 ; undefined
     2c4:	03207e8d 	.inst	0x03207e8d ; undefined
     2c8:	032001fe 	.inst	0x032001fe ; undefined
     2cc:	21207e88 	.inst	0x21207e88 ; undefined
     2d0:	5a200c03 	.inst	0x5a200c03 ; undefined
     2d4:	0101eb03 	.inst	0x0101eb03 ; undefined
     2d8:	207e8003 	.inst	0x207e8003 ; undefined
     2dc:	20028803 	.inst	0x20028803 ; undefined
     2e0:	2e7dfe03 	.inst	0x2e7dfe03 ; undefined
     2e4:	200c0321 	.inst	0x200c0321 ; undefined
     2e8:	01f6035a 	.inst	0x01f6035a ; undefined
     2ec:	1e242101 	.inst	0x1e242101 ; undefined
     2f0:	3d221326 	str	b6, [x25,#2180]
     2f4:	00010221 	.inst	0x00010221 ; undefined
     2f8:	021c0101 	.inst	0x021c0101 ; undefined
     2fc:	00020000 	.inst	0x00020000 ; undefined
     300:	000001b9 	.inst	0x000001b9 ; undefined
     304:	0efb0104 	.inst	0x0efb0104 ; undefined
     308:	0101000d 	.inst	0x0101000d ; undefined
     30c:	00000101 	.inst	0x00000101 ; undefined
     310:	00000100 	.inst	0x00000100 ; undefined
     314:	6f682f01 	.inst	0x6f682f01 ; undefined
     318:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
     31c:	73696465 	.inst	0x73696465 ; undefined
     320:	735f6e6f 	.inst	0x735f6e6f ; undefined
     324:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
     328:	726f6874 	.inst	0x726f6874 ; undefined
     32c:	7572742f 	.inst	0x7572742f ; undefined
     330:	382d6b6e 	strb	w14, [x27,x13]
     334:	442f312e 	.inst	0x442f312e ; undefined
     338:	425f4554 	.inst	0x425f4554 ; undefined
     33c:	63746f6f 	.inst	0x63746f6f ; undefined
     340:	2f65646f 	.inst	0x2f65646f ; undefined
     344:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
     348:	732f2e2e 	.inst	0x732f2e2e ; undefined
     34c:	612f6372 	.inst	0x612f6372 ; undefined
     350:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
     354:	65736572 	.inst	0x65736572 ; undefined
     358:	6f622f74 	.inst	0x6f622f74 ; undefined
     35c:	6576746f 	.inst	0x6576746f ; undefined
     360:	726f7463 	.inst	0x726f7463 ; undefined
     364:	6f682f00 	.inst	0x6f682f00 ; undefined
     368:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
     36c:	73696465 	.inst	0x73696465 ; undefined
     370:	735f6e6f 	.inst	0x735f6e6f ; undefined
     374:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
     378:	726f6874 	.inst	0x726f6874 ; undefined
     37c:	7572742f 	.inst	0x7572742f ; undefined
     380:	382d6b6e 	strb	w14, [x27,x13]
     384:	442f312e 	.inst	0x442f312e ; undefined
     388:	425f4554 	.inst	0x425f4554 ; undefined
     38c:	63746f6f 	.inst	0x63746f6f ; undefined
     390:	2f65646f 	.inst	0x2f65646f ; undefined
     394:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
     398:	732f2e2e 	.inst	0x732f2e2e ; undefined
     39c:	612f6372 	.inst	0x612f6372 ; undefined
     3a0:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
     3a4:	6c636e69 	ldnp	d9, d27, [x19,#-464]
     3a8:	00656475 	.inst	0x00656475 ; undefined
     3ac:	6d6f682f 	ldp	d15, d26, [x1,#-272]
     3b0:	652f3165 	.inst	0x652f3165 ; undefined
     3b4:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
     3b8:	68735f6e 	.inst	0x68735f6e ; undefined
     3bc:	742f6869 	.inst	0x742f6869 ; undefined
     3c0:	2f726f68 	.inst	0x2f726f68 ; undefined
     3c4:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
     3c8:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
     3cc:	54442f31 	.inst	0x54442f31 ; undefined
     3d0:	6f425f45 	.inst	0x6f425f45 ; undefined
     3d4:	6f63746f 	uqshl	v15.2d, v3.2d, #35
     3d8:	622f6564 	.inst	0x622f6564 ; undefined
     3dc:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
     3e0:	6d742f2e 	ldp	d14, d11, [x25,#-192]
     3e4:	73612f70 	.inst	0x73612f70 ; undefined
     3e8:	34366b64 	cbz	w4, 6d154 <_stack_size+0x6c154>
     3ec:	392e342d 	strb	w13, [x1,#2957]
     3f0:	612d332e 	.inst	0x612d332e ; undefined
     3f4:	452d3335 	.inst	0x452d3335 ; undefined
     3f8:	2e332d4c 	uqsub	v12.8b, v10.8b, v19.8b
     3fc:	672d3031 	.inst	0x672d3031 ; undefined
     400:	39312e32 	strb	w18, [x17,#3147]
     404:	3436612d 	cbz	w13, 6d028 <_stack_size+0x6c028>
     408:	312d746e 	adds	w14, w3, #0xb5d
     40c:	31363035 	adds	w21, w1, #0xd8c
     410:	6e692f35 	uqsub	v21.8h, v25.8h, v9.8h
     414:	64756c63 	.inst	0x64756c63 ; undefined
     418:	63000065 	.inst	0x63000065 ; undefined
     41c:	746e655f 	.inst	0x746e655f ; undefined
     420:	632e7972 	.inst	0x632e7972 ; undefined
     424:	00000100 	.inst	0x00000100 ; undefined
     428:	6c697475 	ldnp	d21, d29, [x3,#-368]
     42c:	2e797469 	uabd	v9.4h, v3.4h, v25.4h
     430:	00020068 	.inst	0x00020068 ; undefined
     434:	64747300 	.inst	0x64747300 ; undefined
     438:	2e746e69 	umin	v9.4h, v19.4h, v20.4h
     43c:	00030068 	.inst	0x00030068 ; undefined
     440:	70797400 	adr	x0, f32c3 <_stack_size+0xf22c3>
     444:	66656465 	.inst	0x66656465 ; undefined
     448:	0200682e 	.inst	0x0200682e ; undefined
     44c:	666e0000 	.inst	0x666e0000 ; undefined
     450:	6765725f 	.inst	0x6765725f ; undefined
     454:	0200682e 	.inst	0x0200682e ; undefined
     458:	6f620000 	mla	v0.8h, v0.8h, v2.h[2]
     45c:	7261746f 	.inst	0x7261746f ; undefined
     460:	5f796172 	.inst	0x5f796172 ; undefined
     464:	745f7766 	.inst	0x745f7766 ; undefined
     468:	656c6261 	.inst	0x656c6261 ; undefined
     46c:	0200682e 	.inst	0x0200682e ; undefined
     470:	63730000 	.inst	0x63730000 ; undefined
     474:	6f625f73 	.inst	0x6f625f73 ; undefined
     478:	682e746f 	.inst	0x682e746f ; undefined
     47c:	00000200 	.inst	0x00000200 ; undefined
     480:	2e70746f 	uabd	v15.4h, v3.4h, v16.4h
     484:	00020068 	.inst	0x00020068 ; undefined
     488:	6d6d6500 	ldp	d0, d25, [x8,#-304]
     48c:	706f5f63 	adr	x3, df07b <_stack_size+0xde07b>
     490:	00682e73 	.inst	0x00682e73 ; undefined
     494:	6e000002 	ext	v2.16b, v0.16b, v0.16b, #0
     498:	5f646e61 	.inst	0x5f646e61 ; undefined
     49c:	2e73706f 	uabdl	v15.4s, v3.4h, v19.4h
     4a0:	00020068 	.inst	0x00020068 ; undefined
     4a4:	72706400 	.inst	0x72706400 ; undefined
     4a8:	66746e69 	.inst	0x66746e69 ; undefined
     4ac:	0200682e 	.inst	0x0200682e ; undefined
     4b0:	61750000 	.inst	0x61750000 ; undefined
     4b4:	682e7472 	.inst	0x682e7472 ; undefined
     4b8:	00000200 	.inst	0x00000200 ; undefined
     4bc:	02090000 	.inst	0x02090000 ; undefined
     4c0:	03000324 	.inst	0x03000324 ; undefined
     4c4:	00000000 	.inst	0x00000000 ; undefined
     4c8:	0100fe03 	.inst	0x0100fe03 ; undefined
     4cc:	4a790319 	eon	w25, w24, w25, lsr #0
     4d0:	2e790327 	uaddl	v7.4s, v25.4h, v25.4h
     4d4:	03206203 	.inst	0x03206203 ; undefined
     4d8:	5a032025 	.inst	0x5a032025 ; undefined
     4dc:	302f2f20 	adr	x0, 5eac1 <_stack_size+0x5dac1>
     4e0:	221e3725 	.inst	0x221e3725 ; undefined
     4e4:	9e0b0325 	.inst	0x9e0b0325 ; undefined
     4e8:	2076033d 	.inst	0x2076033d ; undefined
     4ec:	22202103 	.inst	0x22202103 ; undefined
     4f0:	0a034c30 	and	w16, w1, w3, lsl #19
     4f4:	7a032f20 	.inst	0x7a032f20 ; undefined
     4f8:	264c3020 	.inst	0x264c3020 ; undefined
     4fc:	43030204 	.inst	0x43030204 ; undefined
     500:	0301044a 	.inst	0x0301044a ; undefined
     504:	223c00c0 	.inst	0x223c00c0 ; undefined
     508:	20480322 	.inst	0x20480322 ; undefined
     50c:	2e00c503 	.inst	0x2e00c503 ; undefined
     510:	31211c32 	adds	w18, w1, #0x847
     514:	0001022f 	.inst	0x0001022f ; undefined
     518:	01230101 	.inst	0x01230101 ; undefined
     51c:	00020000 	.inst	0x00020000 ; undefined
     520:	000000c2 	.inst	0x000000c2 ; undefined
     524:	0efb0104 	.inst	0x0efb0104 ; undefined
     528:	0101000d 	.inst	0x0101000d ; undefined
     52c:	00000101 	.inst	0x00000101 ; undefined
     530:	00000100 	.inst	0x00000100 ; undefined
     534:	6f682f01 	.inst	0x6f682f01 ; undefined
     538:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
     53c:	73696465 	.inst	0x73696465 ; undefined
     540:	735f6e6f 	.inst	0x735f6e6f ; undefined
     544:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
     548:	726f6874 	.inst	0x726f6874 ; undefined
     54c:	7572742f 	.inst	0x7572742f ; undefined
     550:	382d6b6e 	strb	w14, [x27,x13]
     554:	442f312e 	.inst	0x442f312e ; undefined
     558:	425f4554 	.inst	0x425f4554 ; undefined
     55c:	63746f6f 	.inst	0x63746f6f ; undefined
     560:	2f65646f 	.inst	0x2f65646f ; undefined
     564:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
     568:	732f2e2e 	.inst	0x732f2e2e ; undefined
     56c:	612f6372 	.inst	0x612f6372 ; undefined
     570:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
     574:	65736572 	.inst	0x65736572 ; undefined
     578:	6f622f74 	.inst	0x6f622f74 ; undefined
     57c:	6576746f 	.inst	0x6576746f ; undefined
     580:	726f7463 	.inst	0x726f7463 ; undefined
     584:	6f682f00 	.inst	0x6f682f00 ; undefined
     588:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
     58c:	73696465 	.inst	0x73696465 ; undefined
     590:	735f6e6f 	.inst	0x735f6e6f ; undefined
     594:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
     598:	726f6874 	.inst	0x726f6874 ; undefined
     59c:	7572742f 	.inst	0x7572742f ; undefined
     5a0:	382d6b6e 	strb	w14, [x27,x13]
     5a4:	442f312e 	.inst	0x442f312e ; undefined
     5a8:	425f4554 	.inst	0x425f4554 ; undefined
     5ac:	63746f6f 	.inst	0x63746f6f ; undefined
     5b0:	2f65646f 	.inst	0x2f65646f ; undefined
     5b4:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
     5b8:	732f2e2e 	.inst	0x732f2e2e ; undefined
     5bc:	612f6372 	.inst	0x612f6372 ; undefined
     5c0:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
     5c4:	6c636e69 	ldnp	d9, d27, [x19,#-464]
     5c8:	00656475 	.inst	0x00656475 ; undefined
     5cc:	63726300 	.inst	0x63726300 ; undefined
     5d0:	632e3233 	.inst	0x632e3233 ; undefined
     5d4:	00000100 	.inst	0x00000100 ; undefined
     5d8:	65707974 	.inst	0x65707974 ; undefined
     5dc:	2e666564 	umax	v4.4h, v11.4h, v6.4h
     5e0:	00020068 	.inst	0x00020068 ; undefined
     5e4:	09000000 	.inst	0x09000000 ; undefined
     5e8:	00045802 	.inst	0x00045802 ; undefined
     5ec:	00000003 	.inst	0x00000003 ; undefined
     5f0:	01fb0300 	.inst	0x01fb0300 ; undefined
     5f4:	3f250101 	.inst	0x3f250101 ; undefined
     5f8:	00212239 	.inst	0x00212239 ; NYI
     5fc:	21020402 	.inst	0x21020402 ; undefined
     600:	02040200 	.inst	0x02040200 ; undefined
     604:	200b031c 	.inst	0x200b031c ; undefined
     608:	032e7103 	.inst	0x032e7103 ; undefined
     60c:	032e7fa8 	.inst	0x032e7fa8 ; undefined
     610:	032000c8 	.inst	0x032000c8 ; undefined
     614:	4a2e7fb8 	eon	w24, w29, w14, lsl #31
     618:	5800c603 	ldr	x3, 1ed8 <_stack_size+0xed8>
     61c:	1f213b68 	fnmadd	s8, s27, s1, s14
     620:	58770334 	ldr	x20, ee684 <_stack_size+0xed684>
     624:	03200903 	.inst	0x03200903 ; undefined
     628:	45032077 	.inst	0x45032077 ; undefined
     62c:	21495920 	.inst	0x21495920 ; undefined
     630:	1b03362d 	madd	w13, w17, w3, w13
     634:	745d0320 	.inst	0x745d0320 ; undefined
     638:	201b0328 	.inst	0x201b0328 ; undefined
     63c:	01000702 	.inst	0x01000702 ; undefined
     640:	0005a701 	.inst	0x0005a701 ; undefined
     644:	c5000200 	.inst	0xc5000200 ; undefined
     648:	04000001 	.inst	0x04000001 ; undefined
     64c:	0d0efb01 	.inst	0x0d0efb01 ; undefined
     650:	01010100 	.inst	0x01010100 ; undefined
     654:	00000001 	.inst	0x00000001 ; undefined
     658:	01000001 	.inst	0x01000001 ; undefined
     65c:	6d6f682f 	ldp	d15, d26, [x1,#-272]
     660:	652f3165 	.inst	0x652f3165 ; undefined
     664:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
     668:	68735f6e 	.inst	0x68735f6e ; undefined
     66c:	742f6869 	.inst	0x742f6869 ; undefined
     670:	2f726f68 	.inst	0x2f726f68 ; undefined
     674:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
     678:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
     67c:	54442f31 	.inst	0x54442f31 ; undefined
     680:	6f425f45 	.inst	0x6f425f45 ; undefined
     684:	6f63746f 	uqshl	v15.2d, v3.2d, #35
     688:	622f6564 	.inst	0x622f6564 ; undefined
     68c:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
     690:	72732f2e 	.inst	0x72732f2e ; undefined
     694:	72612f63 	.inst	0x72612f63 ; undefined
     698:	722f6863 	ands	w3, w3, #0xfffe0fff
     69c:	74657365 	.inst	0x74657365 ; undefined
     6a0:	6f6f622f 	umlsl2	v15.4s, v17.8h, v15.h[2]
     6a4:	63657674 	.inst	0x63657674 ; undefined
     6a8:	00726f74 	.inst	0x00726f74 ; undefined
     6ac:	6d6f682f 	ldp	d15, d26, [x1,#-272]
     6b0:	652f3165 	.inst	0x652f3165 ; undefined
     6b4:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
     6b8:	68735f6e 	.inst	0x68735f6e ; undefined
     6bc:	742f6869 	.inst	0x742f6869 ; undefined
     6c0:	2f726f68 	.inst	0x2f726f68 ; undefined
     6c4:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
     6c8:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
     6cc:	54442f31 	.inst	0x54442f31 ; undefined
     6d0:	6f425f45 	.inst	0x6f425f45 ; undefined
     6d4:	6f63746f 	uqshl	v15.2d, v3.2d, #35
     6d8:	622f6564 	.inst	0x622f6564 ; undefined
     6dc:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
     6e0:	72732f2e 	.inst	0x72732f2e ; undefined
     6e4:	6e692f63 	uqsub	v3.8h, v27.8h, v9.8h
     6e8:	64756c63 	.inst	0x64756c63 ; undefined
     6ec:	682f0065 	.inst	0x682f0065 ; undefined
     6f0:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
     6f4:	6964652f 	ldpsw	x15, x25, [x9,#-224]
     6f8:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
     6fc:	68696873 	.inst	0x68696873 ; undefined
     700:	6f68742f 	uqshl	v15.2d, v1.2d, #40
     704:	72742f72 	.inst	0x72742f72 ; undefined
     708:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
     70c:	2f312e38 	.inst	0x2f312e38 ; undefined
     710:	5f455444 	shl	d4, d2, #5
     714:	746f6f42 	.inst	0x746f6f42 ; undefined
     718:	65646f63 	.inst	0x65646f63 ; undefined
     71c:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
     720:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     724:	2f706d74 	.inst	0x2f706d74 ; undefined
     728:	6b647361 	.inst	0x6b647361 ; undefined
     72c:	342d3436 	cbz	w22, 5adb0 <_stack_size+0x59db0>
     730:	332e392e 	.inst	0x332e392e ; undefined
     734:	3335612d 	.inst	0x3335612d ; undefined
     738:	2d4c452d 	ldp	s13, s17, [x9,#96]
     73c:	30312e33 	adr	x19, 62d01 <_stack_size+0x61d01>
     740:	2e32672d 	umax	v13.8b, v25.8b, v18.8b
     744:	612d3931 	.inst	0x612d3931 ; undefined
     748:	746e3436 	.inst	0x746e3436 ; undefined
     74c:	3035312d 	adr	x13, 6ad71 <_stack_size+0x69d71>
     750:	2f353136 	.inst	0x2f353136 ; undefined
     754:	2f62696c 	umlsl	v12.4s, v11.4h, v2.h[6]
     758:	2f636367 	umlsl	v7.4s, v27.4h, v3.h[2]
     75c:	63726161 	.inst	0x63726161 ; undefined
     760:	2d343668 	stp	s8, s13, [x19,#-96]
     764:	756e696c 	.inst	0x756e696c ; undefined
     768:	6e672d78 	uqsub	v24.8h, v11.8h, v7.8h
     76c:	2e342f75 	uqsub	v21.8b, v27.8b, v20.8b
     770:	2f332e39 	.inst	0x2f332e39 ; undefined
     774:	6c636e69 	ldnp	d9, d27, [x19,#-464]
     778:	00656475 	.inst	0x00656475 ; undefined
     77c:	6d6f682f 	ldp	d15, d26, [x1,#-272]
     780:	652f3165 	.inst	0x652f3165 ; undefined
     784:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
     788:	68735f6e 	.inst	0x68735f6e ; undefined
     78c:	742f6869 	.inst	0x742f6869 ; undefined
     790:	2f726f68 	.inst	0x2f726f68 ; undefined
     794:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
     798:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
     79c:	54442f31 	.inst	0x54442f31 ; undefined
     7a0:	6f425f45 	.inst	0x6f425f45 ; undefined
     7a4:	6f63746f 	uqshl	v15.2d, v3.2d, #35
     7a8:	622f6564 	.inst	0x622f6564 ; undefined
     7ac:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
     7b0:	72732f2e 	.inst	0x72732f2e ; undefined
     7b4:	72612f63 	.inst	0x72612f63 ; undefined
     7b8:	692f6863 	.inst	0x692f6863 ; undefined
     7bc:	756c636e 	.inst	0x756c636e ; undefined
     7c0:	00006564 	.inst	0x00006564 ; undefined
     7c4:	69727064 	ldpsw	x4, x28, [x3,#-112]
     7c8:	2e66746e 	uabd	v14.4h, v3.4h, v6.4h
     7cc:	00010063 	.inst	0x00010063 ; undefined
     7d0:	73797300 	.inst	0x73797300 ; undefined
     7d4:	73666564 	.inst	0x73666564 ; undefined
     7d8:	0200682e 	.inst	0x0200682e ; undefined
     7dc:	74730000 	.inst	0x74730000 ; undefined
     7e0:	67726164 	.inst	0x67726164 ; undefined
     7e4:	0300682e 	.inst	0x0300682e ; undefined
     7e8:	61750000 	.inst	0x61750000 ; undefined
     7ec:	682e7472 	.inst	0x682e7472 ; undefined
     7f0:	00000400 	.inst	0x00000400 ; undefined
     7f4:	6c697475 	ldnp	d21, d29, [x3,#-368]
     7f8:	2e797469 	uabd	v9.4h, v3.4h, v25.4h
     7fc:	00040068 	.inst	0x00040068 ; undefined
     800:	75623c00 	.inst	0x75623c00 ; undefined
     804:	2d746c69 	ldp	s9, s27, [x3,#-96]
     808:	003e6e69 	.inst	0x003e6e69 ; NYI
     80c:	00000000 	.inst	0x00000000 ; undefined
     810:	98020900 	ldrsw	x0, 4930 <_stack_size+0x3930>
     814:	00030005 	.inst	0x00030005 ; undefined
     818:	03000000 	.inst	0x03000000 ; undefined
     81c:	170100f6 	b	fffffffffc040bf4 <SMC_ID_HW_RSA+0xffffffff78030ced>
     820:	033d2333 	.inst	0x033d2333 ; undefined
     824:	32282078 	orr	w24, w3, #0xff000001
     828:	3e211f1c 	.inst	0x3e211f1c ; undefined
     82c:	2c272922 	stnp	s2, s10, [x9,#-200]
     830:	21302222 	.inst	0x21302222 ; undefined
     834:	0341455b 	.inst	0x0341455b ; undefined
     838:	23232e6b 	.inst	0x23232e6b ; undefined
     83c:	032e7903 	.inst	0x032e7903 ; undefined
     840:	76032e0e 	.inst	0x76032e0e ; undefined
     844:	7f9e0374 	.inst	0x7f9e0374 ; undefined
     848:	202b232e 	.inst	0x202b232e ; undefined
     84c:	03322723 	.inst	0x03322723 ; undefined
     850:	2f3d4a76 	.inst	0x2f3d4a76 ; undefined
     854:	214d3521 	.inst	0x214d3521 ; undefined
     858:	fe033021 	.inst	0xfe033021 ; undefined
     85c:	3d033c00 	str	b0, [x0,#207]
     860:	2e430320 	.inst	0x2e430320 ; undefined
     864:	20290358 	.inst	0x20290358 ; undefined
     868:	523c5703 	eor	w3, w24, #0x3fffff0
     86c:	03203503 	.inst	0x03203503 ; undefined
     870:	a8033c53 	stnp	x19, x15, [x2,#48]
     874:	03272e01 	.inst	0x03272e01 ; undefined
     878:	1f827ed2 	.inst	0x1f827ed2 ; undefined
     87c:	03332221 	.inst	0x03332221 ; undefined
     880:	1c038279 	ldr	s25, 78cc <_stack_size+0x68cc>
     884:	2078032e 	.inst	0x2078032e ; undefined
     888:	ea032321 	ands	x1, x25, x3, lsl #8
     88c:	03593c00 	.inst	0x03593c00 ; undefined
     890:	03747f95 	.inst	0x03747f95 ; undefined
     894:	244a00ca 	.inst	0x244a00ca ; undefined
     898:	1b040200 	madd	w0, w16, w4, w0
     89c:	02002006 	.inst	0x02002006 ; undefined
     8a0:	00201f04 	.inst	0x00201f04 ; NYI
     8a4:	3c230402 	.inst	0x3c230402 ; undefined
     8a8:	29040200 	stp	w0, w0, [x16,#32]
     8ac:	7ef40306 	.inst	0x7ef40306 ; undefined
     8b0:	04020020 	.inst	0x04020020 ; undefined
     8b4:	22312d29 	.inst	0x22312d29 ; undefined
     8b8:	221e2330 	.inst	0x221e2330 ; undefined
     8bc:	01890359 	.inst	0x01890359 ; undefined
     8c0:	03592120 	.inst	0x03592120 ; undefined
     8c4:	2f23ac1d 	.inst	0x2f23ac1d ; undefined
     8c8:	001e22d5 	.inst	0x001e22d5 ; undefined
     8cc:	26010402 	.inst	0x26010402 ; undefined
     8d0:	002fc72f 	.inst	0x002fc72f ; NYI
     8d4:	03020402 	.inst	0x03020402 ; undefined
     8d8:	02007450 	.inst	0x02007450 ; undefined
     8dc:	20060d04 	.inst	0x20060d04 ; undefined
     8e0:	02002206 	.inst	0x02002206 ; undefined
     8e4:	20060404 	.inst	0x20060404 ; undefined
     8e8:	04040200 	.inst	0x04040200 ; undefined
     8ec:	6d033a06 	stp	d6, d14, [x16,#48]
     8f0:	0200232e 	.inst	0x0200232e ; undefined
     8f4:	20061b04 	.inst	0x20061b04 ; undefined
     8f8:	1f040200 	fmadd	s0, s16, s4, s0
     8fc:	04020020 	.inst	0x04020020 ; undefined
     900:	02003c23 	.inst	0x02003c23 ; undefined
     904:	26062904 	.inst	0x26062904 ; undefined
     908:	29040200 	stp	w0, w0, [x16,#32]
     90c:	0402003d 	.inst	0x0402003d ; undefined
     910:	02001f29 	.inst	0x02001f29 ; undefined
     914:	002f2904 	.inst	0x002f2904 ; NYI
     918:	03290402 	.inst	0x03290402 ; undefined
     91c:	0d03202f 	.inst	0x0d03202f ; undefined
     920:	1f2f5920 	fnmadd	s0, s9, s15, s22
     924:	5cc72f4b 	ldr	d11, fffffffffff8ef0c <SMC_ID_HW_RSA+0xffffffff7bf7f005>
     928:	7fa5032f 	.inst	0x7fa5032f ; undefined
     92c:	00242474 	.inst	0x00242474 ; NYI
     930:	06040402 	.inst	0x06040402 ; undefined
     934:	04020020 	.inst	0x04020020 ; undefined
     938:	00380604 	.inst	0x00380604 ; NYI
     93c:	26170402 	.inst	0x26170402 ; undefined
     940:	2e00c103 	.inst	0x2e00c103 ; undefined
     944:	3c7ef303 	.inst	0x3c7ef303 ; undefined
     948:	82019203 	.inst	0x82019203 ; undefined
     94c:	02040200 	.inst	0x02040200 ; undefined
     950:	3c7fb403 	.inst	0x3c7fb403 ; undefined
     954:	0c040200 	.inst	0x0c040200 ; undefined
     958:	02002006 	.inst	0x02002006 ; undefined
     95c:	06200e04 	.inst	0x06200e04 ; undefined
     960:	04020023 	.inst	0x04020023 ; undefined
     964:	00200604 	.inst	0x00200604 ; NYI
     968:	06040402 	.inst	0x06040402 ; undefined
     96c:	02002639 	.inst	0x02002639 ; undefined
     970:	00350204 	.inst	0x00350204 ; NYI
     974:	060d0402 	.inst	0x060d0402 ; undefined
     978:	04020020 	.inst	0x04020020 ; undefined
     97c:	23062017 	.inst	0x23062017 ; undefined
     980:	04040200 	.inst	0x04040200 ; undefined
     984:	02002006 	.inst	0x02002006 ; undefined
     988:	39060404 	strb	w4, [x0,#385]
     98c:	212e6c03 	.inst	0x212e6c03 ; undefined
     990:	35201c03 	cbnz	w3, 40d10 <_stack_size+0x3fd10>
     994:	002e4003 	.inst	0x002e4003 ; NYI
     998:	06040402 	.inst	0x06040402 ; undefined
     99c:	04020020 	.inst	0x04020020 ; undefined
     9a0:	02003c08 	.inst	0x02003c08 ; undefined
     9a4:	21060804 	.inst	0x21060804 ; undefined
     9a8:	08040200 	stxrb	w4, w0, [x16]
     9ac:	0402001f 	.inst	0x0402001f ; undefined
     9b0:	4a062108 	eor	w8, w8, w6, lsl #8
     9b4:	2e110306 	ext	v6.8b, v24.8b, v17.8b, #0
     9b8:	03212121 	.inst	0x03212121 ; undefined
     9bc:	02002038 	.inst	0x02002038 ; undefined
     9c0:	20060404 	.inst	0x20060404 ; undefined
     9c4:	08040200 	stxrb	w4, w0, [x16]
     9c8:	0402003c 	.inst	0x0402003c ; undefined
     9cc:	22210608 	.inst	0x22210608 ; undefined
     9d0:	44032122 	.inst	0x44032122 ; undefined
     9d4:	213d212e 	.inst	0x213d212e ; undefined
     9d8:	21207503 	.inst	0x21207503 ; undefined
     9dc:	211c211c 	.inst	0x211c211c ; undefined
     9e0:	21206a03 	.inst	0x21206a03 ; undefined
     9e4:	0c03214c 	.inst	0x0c03214c ; undefined
     9e8:	04020020 	.inst	0x04020020 ; undefined
     9ec:	00200604 	.inst	0x00200604 ; NYI
     9f0:	3c080402 	str	b2, [x0],#128
     9f4:	08040200 	stxrb	w4, w0, [x16]
     9f8:	03212f06 	.inst	0x03212f06 ; undefined
     9fc:	f9032e77 	str	x23, [x19,#1624]
     a00:	61037400 	.inst	0x61037400 ; undefined
     a04:	0402002e 	.inst	0x0402002e ; undefined
     a08:	2e69031d 	uaddl	v29.4s, v24.4h, v9.4h
     a0c:	02040200 	.inst	0x02040200 ; undefined
     a10:	00586703 	.inst	0x00586703 ; undefined
     a14:	031d0402 	.inst	0x031d0402 ; undefined
     a18:	02005809 	.inst	0x02005809 ; undefined
     a1c:	10031704 	adr	x4, 6cfc <_stack_size+0x5cfc>
     a20:	04020058 	.inst	0x04020058 ; undefined
     a24:	06200619 	.inst	0x06200619 ; undefined
     a28:	04020025 	.inst	0x04020025 ; undefined
     a2c:	00200604 	.inst	0x00200604 ; NYI
     a30:	06040402 	.inst	0x06040402 ; undefined
     a34:	2e720337 	uaddl	v23.4s, v25.4h, v18.4h
     a38:	04040200 	.inst	0x04040200 ; undefined
     a3c:	02002006 	.inst	0x02002006 ; undefined
     a40:	3a060404 	.inst	0x3a060404 ; undefined
     a44:	002e7503 	.inst	0x002e7503 ; NYI
     a48:	06040402 	.inst	0x06040402 ; undefined
     a4c:	04020020 	.inst	0x04020020 ; undefined
     a50:	263a0604 	.inst	0x263a0604 ; undefined
     a54:	002e1a03 	.inst	0x002e1a03 ; NYI
     a58:	06040402 	.inst	0x06040402 ; undefined
     a5c:	04020020 	.inst	0x04020020 ; undefined
     a60:	00390604 	.inst	0x00390604 ; NYI
     a64:	03020402 	.inst	0x03020402 ; undefined
     a68:	02002e44 	.inst	0x02002e44 ; undefined
     a6c:	c9030204 	.inst	0xc9030204 ; undefined
     a70:	02005800 	.inst	0x02005800 ; undefined
     a74:	b3030204 	.inst	0xb3030204 ; undefined
     a78:	e903587f 	.inst	0xe903587f ; undefined
     a7c:	02005800 	.inst	0x02005800 ; undefined
     a80:	57032004 	.inst	0x57032004 ; undefined
     a84:	0402004a 	.inst	0x0402004a ; undefined
     a88:	4a630310 	eon	w16, w24, w3, lsr #0
     a8c:	04020025 	.inst	0x04020025 ; undefined
     a90:	00200604 	.inst	0x00200604 ; NYI
     a94:	06040402 	.inst	0x06040402 ; undefined
     a98:	2b032637 	adds	w23, w17, w3, lsl #9
     a9c:	0200212e 	.inst	0x0200212e ; undefined
     aa0:	5b031904 	.inst	0x5b031904 ; undefined
     aa4:	0200252e 	.inst	0x0200252e ; undefined
     aa8:	20060404 	.inst	0x20060404 ; undefined
     aac:	04040200 	.inst	0x04040200 ; undefined
     ab0:	02003706 	.inst	0x02003706 ; undefined
     ab4:	77030504 	.inst	0x77030504 ; undefined
     ab8:	0402002e 	.inst	0x0402002e ; undefined
     abc:	02003805 	.inst	0x02003805 ; undefined
     ac0:	0d032004 	.inst	0x0d032004 ; undefined
     ac4:	00c5032e 	.inst	0x00c5032e ; undefined
     ac8:	0402004a 	.inst	0x0402004a ; undefined
     acc:	2e4d0302 	.inst	0x2e4d0302 ; undefined
     ad0:	05040200 	.inst	0x05040200 ; undefined
     ad4:	00580b03 	.inst	0x00580b03 ; undefined
     ad8:	03020402 	.inst	0x03020402 ; undefined
     adc:	02004a58 	.inst	0x02004a58 ; undefined
     ae0:	0d030204 	.inst	0x0d030204 ; undefined
     ae4:	04020058 	.inst	0x04020058 ; undefined
     ae8:	584e0305 	ldr	x5, 9cb48 <_stack_size+0x9bb48>
     aec:	05040200 	.inst	0x05040200 ; undefined
     af0:	00ec034e 	.inst	0x00ec034e ; undefined
     af4:	3c66034a 	.inst	0x3c66034a ; undefined
     af8:	04020023 	.inst	0x04020023 ; undefined
     afc:	2e6a0302 	uaddl	v2.4s, v24.4h, v10.4h
     b00:	02040200 	.inst	0x02040200 ; undefined
     b04:	00587003 	.inst	0x00587003 ; undefined
     b08:	03020402 	.inst	0x03020402 ; undefined
     b0c:	02005873 	.inst	0x02005873 ; undefined
     b10:	1c030504 	ldr	s4, 6bb0 <_stack_size+0x5bb0>
     b14:	04020058 	.inst	0x04020058 ; undefined
     b18:	02003a05 	.inst	0x02003a05 ; undefined
     b1c:	00330204 	.inst	0x00330204 ; NYI
     b20:	03020402 	.inst	0x03020402 ; undefined
     b24:	02005870 	.inst	0x02005870 ; undefined
     b28:	73030204 	.inst	0x73030204 ; undefined
     b2c:	04020058 	.inst	0x04020058 ; undefined
     b30:	02005505 	.inst	0x02005505 ; undefined
     b34:	003a0504 	.inst	0x003a0504 ; NYI
     b38:	03050402 	.inst	0x03050402 ; undefined
     b3c:	02002e0f 	.inst	0x02002e0f ; undefined
     b40:	003a0504 	.inst	0x003a0504 ; NYI
     b44:	03050402 	.inst	0x03050402 ; undefined
     b48:	02002e13 	.inst	0x02002e13 ; undefined
     b4c:	00390504 	.inst	0x00390504 ; NYI
     b50:	03050402 	.inst	0x03050402 ; undefined
     b54:	02002e75 	.inst	0x02002e75 ; undefined
     b58:	00370504 	.inst	0x00370504 ; NYI
     b5c:	31050402 	adds	w2, w0, #0x141
     b60:	05040200 	.inst	0x05040200 ; undefined
     b64:	04020039 	.inst	0x04020039 ; undefined
     b68:	2e150305 	ext	v5.8b, v24.8b, v21.8b, #0
     b6c:	05040200 	.inst	0x05040200 ; undefined
     b70:	04020037 	.inst	0x04020037 ; undefined
     b74:	2e660305 	uaddl	v5.4s, v24.4h, v6.4h
     b78:	05040200 	.inst	0x05040200 ; undefined
     b7c:	04020039 	.inst	0x04020039 ; undefined
     b80:	02003305 	.inst	0x02003305 ; undefined
     b84:	03370504 	.inst	0x03370504 ; undefined
     b88:	322e7eb8 	.inst	0x322e7eb8 ; undefined
     b8c:	32382446 	orr	w6, w2, #0x3ff00
     b90:	2077032a 	.inst	0x2077032a ; undefined
     b94:	03200903 	.inst	0x03200903 ; undefined
     b98:	09032077 	.inst	0x09032077 ; undefined
     b9c:	74770320 	.inst	0x74770320 ; undefined
     ba0:	03200903 	.inst	0x03200903 ; undefined
     ba4:	09032e77 	.inst	0x09032e77 ; undefined
     ba8:	c8770320 	ldxp	x0, x0, [x25]
     bac:	2e10034c 	ext	v12.8b, v26.8b, v16.8b, #0
     bb0:	244a0f03 	.inst	0x244a0f03 ; undefined
     bb4:	2570242a 	.inst	0x2570242a ; undefined
     bb8:	251b251b 	.inst	0x251b251b ; undefined
     bbc:	4095201b 	.inst	0x4095201b ; undefined
     bc0:	3c00c803 	.inst	0x3c00c803 ; undefined
     bc4:	a103832f 	.inst	0xa103832f ; undefined
     bc8:	2a242e7f 	orn	wzr, w19, w4, lsl #11
     bcc:	de037024 	.inst	0xde037024 ; undefined
     bd0:	a2035800 	.inst	0xa2035800 ; undefined
     bd4:	de03207f 	.inst	0xde03207f ; undefined
     bd8:	a2032000 	.inst	0xa2032000 ; undefined
     bdc:	03202e7f 	.inst	0x03202e7f ; undefined
     be0:	03ac00de 	.inst	0x03ac00de ; undefined
     be4:	023c7fab 	.inst	0x023c7fab ; undefined
     be8:	01010003 	.inst	0x01010003 ; undefined
     bec:	000003ab 	.inst	0x000003ab ; undefined
     bf0:	017e0002 	.inst	0x017e0002 ; undefined
     bf4:	01040000 	.inst	0x01040000 ; undefined
     bf8:	000d0efb 	.inst	0x000d0efb ; undefined
     bfc:	01010101 	.inst	0x01010101 ; undefined
     c00:	01000000 	.inst	0x01000000 ; undefined
     c04:	2f010000 	.inst	0x2f010000 ; undefined
     c08:	656d6f68 	.inst	0x656d6f68 ; undefined
     c0c:	64652f31 	.inst	0x64652f31 ; undefined
     c10:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
     c14:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
     c18:	68742f68 	.inst	0x68742f68 ; undefined
     c1c:	742f726f 	.inst	0x742f726f ; undefined
     c20:	6b6e7572 	.inst	0x6b6e7572 ; undefined
     c24:	312e382d 	adds	w13, w1, #0xb8e
     c28:	4554442f 	.inst	0x4554442f ; undefined
     c2c:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
     c30:	646f6374 	.inst	0x646f6374 ; undefined
     c34:	69622f65 	ldpsw	x5, x11, [x27,#-240]
     c38:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
     c3c:	6372732f 	.inst	0x6372732f ; undefined
     c40:	6372612f 	.inst	0x6372612f ; undefined
     c44:	65722f68 	.inst	0x65722f68 ; undefined
     c48:	2f746573 	.inst	0x2f746573 ; undefined
     c4c:	746f6f62 	.inst	0x746f6f62 ; undefined
     c50:	74636576 	.inst	0x74636576 ; undefined
     c54:	2f00726f 	.inst	0x2f00726f ; undefined
     c58:	656d6f68 	.inst	0x656d6f68 ; undefined
     c5c:	64652f31 	.inst	0x64652f31 ; undefined
     c60:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
     c64:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
     c68:	68742f68 	.inst	0x68742f68 ; undefined
     c6c:	742f726f 	.inst	0x742f726f ; undefined
     c70:	6b6e7572 	.inst	0x6b6e7572 ; undefined
     c74:	312e382d 	adds	w13, w1, #0xb8e
     c78:	4554442f 	.inst	0x4554442f ; undefined
     c7c:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
     c80:	646f6374 	.inst	0x646f6374 ; undefined
     c84:	69622f65 	ldpsw	x5, x11, [x27,#-240]
     c88:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
     c8c:	706d742f 	adr	x15, dbb13 <_stack_size+0xdab13>
     c90:	6473612f 	.inst	0x6473612f ; undefined
     c94:	2d34366b 	stp	s11, s13, [x19,#-96]
     c98:	2e392e34 	uqsub	v20.8b, v17.8b, v25.8b
     c9c:	35612d33 	cbnz	w19, c3240 <_stack_size+0xc2240>
     ca0:	4c452d33 	.inst	0x4c452d33 ; undefined
     ca4:	312e332d 	adds	w13, w25, #0xb8c
     ca8:	32672d30 	.inst	0x32672d30 ; undefined
     cac:	2d39312e 	stp	s14, s12, [x9,#-56]
     cb0:	6e343661 	cmhi	v1.16b, v19.16b, v20.16b
     cb4:	35312d74 	cbnz	w20, 63260 <_stack_size+0x62260>
     cb8:	35313630 	cbnz	w16, 6337c <_stack_size+0x6237c>
     cbc:	636e692f 	.inst	0x636e692f ; undefined
     cc0:	6564756c 	.inst	0x6564756c ; undefined
     cc4:	6f682f00 	.inst	0x6f682f00 ; undefined
     cc8:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
     ccc:	73696465 	.inst	0x73696465 ; undefined
     cd0:	735f6e6f 	.inst	0x735f6e6f ; undefined
     cd4:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
     cd8:	726f6874 	.inst	0x726f6874 ; undefined
     cdc:	7572742f 	.inst	0x7572742f ; undefined
     ce0:	382d6b6e 	strb	w14, [x27,x13]
     ce4:	442f312e 	.inst	0x442f312e ; undefined
     ce8:	425f4554 	.inst	0x425f4554 ; undefined
     cec:	63746f6f 	.inst	0x63746f6f ; undefined
     cf0:	2f65646f 	.inst	0x2f65646f ; undefined
     cf4:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
     cf8:	732f2e2e 	.inst	0x732f2e2e ; undefined
     cfc:	612f6372 	.inst	0x612f6372 ; undefined
     d00:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
     d04:	6c636e69 	ldnp	d9, d27, [x19,#-464]
     d08:	00656475 	.inst	0x00656475 ; undefined
     d0c:	6d6d6500 	ldp	d0, d25, [x8,#-304]
     d10:	706f5f63 	adr	x3, df8ff <_stack_size+0xde8ff>
     d14:	00632e73 	.inst	0x00632e73 ; undefined
     d18:	73000001 	.inst	0x73000001 ; undefined
     d1c:	6e696474 	umax	v20.8h, v3.8h, v9.8h
     d20:	00682e74 	.inst	0x00682e74 ; undefined
     d24:	74000002 	.inst	0x74000002 ; undefined
     d28:	64657079 	.inst	0x64657079 ; undefined
     d2c:	682e6665 	.inst	0x682e6665 ; undefined
     d30:	00000300 	.inst	0x00000300 ; undefined
     d34:	725f7263 	.inst	0x725f7263 ; undefined
     d38:	682e6765 	.inst	0x682e6765 ; undefined
     d3c:	00000300 	.inst	0x00000300 ; undefined
     d40:	636d6d65 	.inst	0x636d6d65 ; undefined
     d44:	73706f5f 	.inst	0x73706f5f ; undefined
     d48:	0300682e 	.inst	0x0300682e ; undefined
     d4c:	74750000 	.inst	0x74750000 ; undefined
     d50:	74696c69 	.inst	0x74696c69 ; undefined
     d54:	00682e79 	.inst	0x00682e79 ; undefined
     d58:	75000003 	.inst	0x75000003 ; undefined
     d5c:	2e747261 	uabdl	v1.4s, v19.4h, v20.4h
     d60:	00030068 	.inst	0x00030068 ; undefined
     d64:	63616300 	.inst	0x63616300 ; undefined
     d68:	765f6568 	.inst	0x765f6568 ; undefined
     d6c:	00682e38 	.inst	0x00682e38 ; undefined
     d70:	00000003 	.inst	0x00000003 ; undefined
     d74:	60020900 	.inst	0x60020900 ; undefined
     d78:	00030011 	.inst	0x00030011 ; undefined
     d7c:	03000000 	.inst	0x03000000 ; undefined
     d80:	310101b6 	adds	w22, w13, #0x40
     d84:	5b312e2b 	.inst	0x5b312e2b ; undefined
     d88:	032e0b03 	.inst	0x032e0b03 ; undefined
     d8c:	10033c72 	adr	x18, 7518 <_stack_size+0x6518>
     d90:	71034e4a 	subs	w10, w18, #0xd3
     d94:	212c304a 	.inst	0x212c304a ; undefined
     d98:	2f2f2f2f 	.inst	0x2f2f2f2f ; undefined
     d9c:	032e0a03 	.inst	0x032e0a03 ; undefined
     da0:	09032077 	.inst	0x09032077 ; undefined
     da4:	2e77032e 	uaddl	v14.4s, v25.4h, v23.4h
     da8:	2b152527 	adds	w7, w9, w21, lsl #9
     dac:	03212123 	.inst	0x03212123 ; undefined
     db0:	2525200a 	.inst	0x2525200a ; undefined
     db4:	25252525 	.inst	0x25252525 ; undefined
     db8:	30252525 	adr	x5, 4b25d <_stack_size+0x4a25d>
     dbc:	2e57033d 	.inst	0x2e57033d ; undefined
     dc0:	2033033d 	.inst	0x2033033d ; undefined
     dc4:	3d2e4703 	str	b3, [x24,#2961]
     dc8:	03203803 	.inst	0x03203803 ; undefined
     dcc:	033d2e51 	.inst	0x033d2e51 ; undefined
     dd0:	5603202e 	.inst	0x5603202e ; undefined
     dd4:	3d323d2e 	str	b14, [x9,#3215]
     dd8:	3d323d32 	str	b18, [x9,#3215]
     ddc:	3d323d32 	str	b18, [x9,#3215]
     de0:	132e1203 	.inst	0x132e1203 ; undefined
     de4:	2b4d244b 	adds	w11, w2, w13, lsr #9
     de8:	21311d31 	.inst	0x21311d31 ; undefined
     dec:	213d2121 	.inst	0x213d2121 ; undefined
     df0:	35213d21 	cbnz	w1, 43594 <_stack_size+0x42594>
     df4:	4b212167 	sub	w7, w11, w1, uxth
     df8:	69242159 	.inst	0x69242159 ; undefined
     dfc:	1c322a4e 	ldr	s14, 65344 <_stack_size+0x64344>
     e00:	21212132 	.inst	0x21212132 ; undefined
     e04:	3d21213d 	str	b29, [x9,#2120]
     e08:	21673521 	.inst	0x21673521 ; undefined
     e0c:	21594b21 	.inst	0x21594b21 ; undefined
     e10:	03201103 	.inst	0x03201103 ; undefined
     e14:	592e7fb2 	.inst	0x592e7fb2 ; undefined
     e18:	2e00d603 	.inst	0x2e00d603 ; undefined
     e1c:	1e4c1360 	.inst	0x1e4c1360 ; undefined
     e20:	01040200 	.inst	0x01040200 ; undefined
     e24:	50062006 	adr	x6, d226 <_stack_size+0xc226>
     e28:	09033e25 	.inst	0x09033e25 ; undefined
     e2c:	2075032e 	.inst	0x2075032e ; undefined
     e30:	3f200f03 	.inst	0x3f200f03 ; undefined
     e34:	2e7a0342 	uaddl	v2.4s, v26.4h, v26.4h
     e38:	0b033326 	add	w6, w25, w3, lsl #12
     e3c:	7a03232e 	.inst	0x7a03232e ; undefined
     e40:	03222620 	.inst	0x03222620 ; undefined
     e44:	1703206b 	b	fffffffffc0c8ff0 <SMC_ID_HW_RSA+0xffffffff780b90e9>
     e48:	20690320 	.inst	0x20690320 ; undefined
     e4c:	28207a03 	stnp	w3, w30, [x16,#-256]
     e50:	03231f2f 	.inst	0x03231f2f ; undefined
     e54:	3a224a1d 	.inst	0x3a224a1d ; undefined
     e58:	7fb70332 	.inst	0x7fb70332 ; undefined
     e5c:	00c9032e 	.inst	0x00c9032e ; undefined
     e60:	7fb7032e 	.inst	0x7fb7032e ; undefined
     e64:	00c9032e 	.inst	0x00c9032e ; undefined
     e68:	7fb70320 	.inst	0x7fb70320 ; undefined
     e6c:	00d6034a 	.inst	0x00d6034a ; undefined
     e70:	2c2f2f58 	stnp	s24, s11, [x26,#-136]
     e74:	2b242b23 	adds	w3, w25, w4, uxth #2
     e78:	1e231d24 	fcsel	s4, s9, s3, ne
     e7c:	21242121 	.inst	0x21242121 ; undefined
     e80:	2f2f3e22 	.inst	0x2f2f3e22 ; undefined
     e84:	232c232c 	.inst	0x232c232c ; undefined
     e88:	212f212b 	.inst	0x212f212b ; undefined
     e8c:	5b282121 	.inst	0x5b282121 ; undefined
     e90:	03323131 	.inst	0x03323131 ; undefined
     e94:	0e034a74 	.inst	0x0e034a74 ; undefined
     e98:	59222166 	.inst	0x59222166 ; undefined
     e9c:	4d23215a 	.inst	0x4d23215a ; undefined
     ea0:	5223215a 	eor	w26, w10, #0xe000003f
     ea4:	232c2f2f 	.inst	0x232c2f2f ; undefined
     ea8:	212b242b 	.inst	0x212b242b ; undefined
     eac:	03222121 	.inst	0x03222121 ; undefined
     eb0:	9f03200d 	.inst	0x9f03200d ; undefined
     eb4:	2f2f4a7f 	.inst	0x2f2f4a7f ; undefined
     eb8:	232c232c 	.inst	0x232c232c ; undefined
     ebc:	222b242b 	.inst	0x222b242b ; undefined
     ec0:	211f221f 	.inst	0x211f221f ; undefined
     ec4:	2e00c203 	.inst	0x2e00c203 ; undefined
     ec8:	03212f67 	.inst	0x03212f67 ; undefined
     ecc:	6a032e74 	ands	w20, w19, w3, lsl #11
     ed0:	03636c66 	.inst	0x03636c66 ; undefined
     ed4:	44666638 	.inst	0x44666638 ; undefined
     ed8:	033c2103 	.inst	0x033c2103 ; undefined
     edc:	6b214a7a 	subs	w26, w19, w1, uxtw #2
     ee0:	212e0a03 	.inst	0x212e0a03 ; undefined
     ee4:	42206303 	.inst	0x42206303 ; undefined
     ee8:	22232122 	.inst	0x22232122 ; undefined
     eec:	200a031d 	.inst	0x200a031d ; undefined
     ef0:	7a035021 	.inst	0x7a035021 ; undefined
     ef4:	0c033520 	.inst	0x0c033520 ; undefined
     ef8:	74670320 	.inst	0x74670320 ; undefined
     efc:	03740903 	.inst	0x03740903 ; undefined
     f00:	3f21740c 	.inst	0x3f21740c ; undefined
     f04:	03744903 	.inst	0x03744903 ; undefined
     f08:	21202039 	.inst	0x21202039 ; undefined
     f0c:	50216767 	adr	x7, 43bfa <_stack_size+0x42bfa>
     f10:	03201703 	.inst	0x03201703 ; undefined
     f14:	18032e69 	ldr	w9, 74e0 <_stack_size+0x64e0>
     f18:	032f2d20 	.inst	0x032f2d20 ; undefined
     f1c:	5e032e0a 	.inst	0x5e032e0a ; undefined
     f20:	661e032e 	.inst	0x661e032e ; undefined
     f24:	031e313d 	.inst	0x031e313d ; undefined
     f28:	2f2d3c70 	.inst	0x2f2d3c70 ; undefined
     f2c:	032e1203 	.inst	0x032e1203 ; undefined
     f30:	2f2d2e72 	.inst	0x2f2d2e72 ; undefined
     f34:	032e0e03 	.inst	0x032e0e03 ; undefined
     f38:	2f2d2e66 	.inst	0x2f2d2e66 ; undefined
     f3c:	03201a03 	.inst	0x03201a03 ; undefined
     f40:	212d2e62 	.inst	0x212d2e62 ; undefined
     f44:	2f2e1e03 	.inst	0x2f2e1e03 ; undefined
     f48:	234d2220 	.inst	0x234d2220 ; undefined
     f4c:	0321674b 	.inst	0x0321674b ; undefined
     f50:	3d2a4a0c 	str	b12, [x16,#2706]
     f54:	156a1e31 	b	5a88818 <_stack_base+0x2a7b098>
     f58:	232b232b 	.inst	0x232b232b ; undefined
     f5c:	0321672f 	.inst	0x0321672f ; undefined
     f60:	3d2a4a0c 	str	b12, [x16,#2706]
     f64:	22411e31 	.inst	0x22411e31 ; undefined
     f68:	4b222e2c 	sub	w12, w17, w2, uxth #3
     f6c:	24592221 	.inst	0x24592221 ; undefined
     f70:	2421232b 	.inst	0x2421232b ; undefined
     f74:	213d232b 	.inst	0x213d232b ; undefined
     f78:	23214b21 	.inst	0x23214b21 ; undefined
     f7c:	2123213d 	.inst	0x2123213d ; undefined
     f80:	214b2121 	.inst	0x214b2121 ; undefined
     f84:	23212f23 	.inst	0x23212f23 ; undefined
     f88:	4b212121 	sub	w1, w9, w1, uxth
     f8c:	200b0321 	.inst	0x200b0321 ; undefined
     f90:	4a01ac03 	.inst	0x4a01ac03 ; undefined
     f94:	01023d13 	.inst	0x01023d13 ; undefined
     f98:	eb010100 	subs	x0, x8, x1
     f9c:	02000001 	.inst	0x02000001 ; undefined
     fa0:	00017900 	.inst	0x00017900 ; undefined
     fa4:	fb010400 	.inst	0xfb010400 ; undefined
     fa8:	01000d0e 	.inst	0x01000d0e ; undefined
     fac:	00010101 	.inst	0x00010101 ; undefined
     fb0:	00010000 	.inst	0x00010000 ; undefined
     fb4:	682f0100 	.inst	0x682f0100 ; undefined
     fb8:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
     fbc:	6964652f 	ldpsw	x15, x25, [x9,#-224]
     fc0:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
     fc4:	68696873 	.inst	0x68696873 ; undefined
     fc8:	6f68742f 	uqshl	v15.2d, v1.2d, #40
     fcc:	72742f72 	.inst	0x72742f72 ; undefined
     fd0:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
     fd4:	2f312e38 	.inst	0x2f312e38 ; undefined
     fd8:	5f455444 	shl	d4, d2, #5
     fdc:	746f6f42 	.inst	0x746f6f42 ; undefined
     fe0:	65646f63 	.inst	0x65646f63 ; undefined
     fe4:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
     fe8:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     fec:	2f637273 	.inst	0x2f637273 ; undefined
     ff0:	68637261 	.inst	0x68637261 ; undefined
     ff4:	7365722f 	.inst	0x7365722f ; undefined
     ff8:	622f7465 	.inst	0x622f7465 ; undefined
     ffc:	76746f6f 	.inst	0x76746f6f ; undefined
    1000:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
    1004:	682f0072 	.inst	0x682f0072 ; undefined
    1008:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    100c:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    1010:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    1014:	68696873 	.inst	0x68696873 ; undefined
    1018:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    101c:	72742f72 	.inst	0x72742f72 ; undefined
    1020:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    1024:	2f312e38 	.inst	0x2f312e38 ; undefined
    1028:	5f455444 	shl	d4, d2, #5
    102c:	746f6f42 	.inst	0x746f6f42 ; undefined
    1030:	65646f63 	.inst	0x65646f63 ; undefined
    1034:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    1038:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    103c:	2f706d74 	.inst	0x2f706d74 ; undefined
    1040:	6b647361 	.inst	0x6b647361 ; undefined
    1044:	342d3436 	cbz	w22, 5b6c8 <_stack_size+0x5a6c8>
    1048:	332e392e 	.inst	0x332e392e ; undefined
    104c:	3335612d 	.inst	0x3335612d ; undefined
    1050:	2d4c452d 	ldp	s13, s17, [x9,#96]
    1054:	30312e33 	adr	x19, 63619 <_stack_size+0x62619>
    1058:	2e32672d 	umax	v13.8b, v25.8b, v18.8b
    105c:	612d3931 	.inst	0x612d3931 ; undefined
    1060:	746e3436 	.inst	0x746e3436 ; undefined
    1064:	3035312d 	adr	x13, 6b689 <_stack_size+0x6a689>
    1068:	2f353136 	.inst	0x2f353136 ; undefined
    106c:	6c636e69 	ldnp	d9, d27, [x19,#-464]
    1070:	00656475 	.inst	0x00656475 ; undefined
    1074:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    1078:	652f3165 	.inst	0x652f3165 ; undefined
    107c:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    1080:	68735f6e 	.inst	0x68735f6e ; undefined
    1084:	742f6869 	.inst	0x742f6869 ; undefined
    1088:	2f726f68 	.inst	0x2f726f68 ; undefined
    108c:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    1090:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    1094:	54442f31 	.inst	0x54442f31 ; undefined
    1098:	6f425f45 	.inst	0x6f425f45 ; undefined
    109c:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    10a0:	622f6564 	.inst	0x622f6564 ; undefined
    10a4:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    10a8:	72732f2e 	.inst	0x72732f2e ; undefined
    10ac:	72612f63 	.inst	0x72612f63 ; undefined
    10b0:	692f6863 	.inst	0x692f6863 ; undefined
    10b4:	756c636e 	.inst	0x756c636e ; undefined
    10b8:	00006564 	.inst	0x00006564 ; undefined
    10bc:	725f7768 	.inst	0x725f7768 ; undefined
    10c0:	632e6173 	.inst	0x632e6173 ; undefined
    10c4:	00000100 	.inst	0x00000100 ; undefined
    10c8:	69647473 	ldpsw	x19, x29, [x3,#-224]
    10cc:	682e746e 	.inst	0x682e746e ; undefined
    10d0:	00000200 	.inst	0x00000200 ; undefined
    10d4:	65707974 	.inst	0x65707974 ; undefined
    10d8:	2e666564 	umax	v4.4h, v11.4h, v6.4h
    10dc:	00030068 	.inst	0x00030068 ; undefined
    10e0:	5f776800 	.inst	0x5f776800 ; undefined
    10e4:	2e617372 	uabdl	v18.4s, v27.4h, v1.4h
    10e8:	00030068 	.inst	0x00030068 ; undefined
    10ec:	63616300 	.inst	0x63616300 ; undefined
    10f0:	765f6568 	.inst	0x765f6568 ; undefined
    10f4:	00682e38 	.inst	0x00682e38 ; undefined
    10f8:	74000003 	.inst	0x74000003 ; undefined
    10fc:	72656d69 	.inst	0x72656d69 ; undefined
    1100:	0300682e 	.inst	0x0300682e ; undefined
    1104:	74750000 	.inst	0x74750000 ; undefined
    1108:	74696c69 	.inst	0x74696c69 ; undefined
    110c:	00682e79 	.inst	0x00682e79 ; undefined
    1110:	75000003 	.inst	0x75000003 ; undefined
    1114:	2e747261 	uabdl	v1.4s, v19.4h, v20.4h
    1118:	00030068 	.inst	0x00030068 ; undefined
    111c:	09000000 	.inst	0x09000000 ; undefined
    1120:	001d6002 	.inst	0x001d6002 ; undefined
    1124:	00000003 	.inst	0x00000003 ; undefined
    1128:	01390300 	.inst	0x01390300 ; undefined
    112c:	244a0903 	.inst	0x244a0903 ; undefined
    1130:	01040200 	.inst	0x01040200 ; undefined
    1134:	5c062e06 	ldr	d6, d6f4 <_stack_size+0xc6f4>
    1138:	0a038524 	.inst	0x0a038524 ; undefined
    113c:	2e10032e 	ext	v14.8b, v25.8b, v16.8b, #0
    1140:	242f3559 	.inst	0x242f3559 ; undefined
    1144:	35293329 	cbnz	w9, 537a8 <_stack_size+0x527a8>
    1148:	242e7a03 	.inst	0x242e7a03 ; undefined
    114c:	76032323 	.inst	0x76032323 ; undefined
    1150:	50312f20 	adr	x0, 63736 <_stack_size+0x62736>
    1154:	3c78033f 	.inst	0x3c78033f ; undefined
    1158:	14032f2f 	b	cce14 <_stack_size+0xcbe14>
    115c:	304c774a 	adr	x10, 9a045 <_stack_size+0x99045>
    1160:	aa034b3e 	orr	x30, x25, x3, lsl #18
    1164:	d603827f 	.inst	0xd603827f ; undefined
    1168:	66032000 	.inst	0x66032000 ; undefined
    116c:	201a0358 	.inst	0x201a0358 ; undefined
    1170:	2e7fb903 	.inst	0x2e7fb903 ; undefined
    1174:	3a221e4d 	.inst	0x3a221e4d ; undefined
    1178:	77033f22 	.inst	0x77033f22 ; undefined
    117c:	201e0374 	.inst	0x201e0374 ; undefined
    1180:	741c0359 	.inst	0x741c0359 ; undefined
    1184:	0002023d 	.inst	0x0002023d ; undefined
    1188:	00190101 	.inst	0x00190101 ; undefined
    118c:	00020000 	.inst	0x00020000 ; undefined
    1190:	00000013 	.inst	0x00000013 ; undefined
    1194:	0efb0104 	.inst	0x0efb0104 ; undefined
    1198:	0101000d 	.inst	0x0101000d ; undefined
    119c:	00000101 	.inst	0x00000101 ; undefined
    11a0:	00000100 	.inst	0x00000100 ; undefined
    11a4:	a1000001 	.inst	0xa1000001 ; undefined
    11a8:	02000002 	.inst	0x02000002 ; undefined
    11ac:	00017300 	.inst	0x00017300 ; undefined
    11b0:	fb010400 	.inst	0xfb010400 ; undefined
    11b4:	01000d0e 	.inst	0x01000d0e ; undefined
    11b8:	00010101 	.inst	0x00010101 ; undefined
    11bc:	00010000 	.inst	0x00010000 ; undefined
    11c0:	682f0100 	.inst	0x682f0100 ; undefined
    11c4:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    11c8:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    11cc:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    11d0:	68696873 	.inst	0x68696873 ; undefined
    11d4:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    11d8:	72742f72 	.inst	0x72742f72 ; undefined
    11dc:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    11e0:	2f312e38 	.inst	0x2f312e38 ; undefined
    11e4:	5f455444 	shl	d4, d2, #5
    11e8:	746f6f42 	.inst	0x746f6f42 ; undefined
    11ec:	65646f63 	.inst	0x65646f63 ; undefined
    11f0:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    11f4:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    11f8:	2f637273 	.inst	0x2f637273 ; undefined
    11fc:	68637261 	.inst	0x68637261 ; undefined
    1200:	7365722f 	.inst	0x7365722f ; undefined
    1204:	622f7465 	.inst	0x622f7465 ; undefined
    1208:	76746f6f 	.inst	0x76746f6f ; undefined
    120c:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
    1210:	682f0072 	.inst	0x682f0072 ; undefined
    1214:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    1218:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    121c:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    1220:	68696873 	.inst	0x68696873 ; undefined
    1224:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    1228:	72742f72 	.inst	0x72742f72 ; undefined
    122c:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    1230:	2f312e38 	.inst	0x2f312e38 ; undefined
    1234:	5f455444 	shl	d4, d2, #5
    1238:	746f6f42 	.inst	0x746f6f42 ; undefined
    123c:	65646f63 	.inst	0x65646f63 ; undefined
    1240:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    1244:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    1248:	2f706d74 	.inst	0x2f706d74 ; undefined
    124c:	6b647361 	.inst	0x6b647361 ; undefined
    1250:	342d3436 	cbz	w22, 5b8d4 <_stack_size+0x5a8d4>
    1254:	332e392e 	.inst	0x332e392e ; undefined
    1258:	3335612d 	.inst	0x3335612d ; undefined
    125c:	2d4c452d 	ldp	s13, s17, [x9,#96]
    1260:	30312e33 	adr	x19, 63825 <_stack_size+0x62825>
    1264:	2e32672d 	umax	v13.8b, v25.8b, v18.8b
    1268:	612d3931 	.inst	0x612d3931 ; undefined
    126c:	746e3436 	.inst	0x746e3436 ; undefined
    1270:	3035312d 	adr	x13, 6b895 <_stack_size+0x6a895>
    1274:	2f353136 	.inst	0x2f353136 ; undefined
    1278:	6c636e69 	ldnp	d9, d27, [x19,#-464]
    127c:	00656475 	.inst	0x00656475 ; undefined
    1280:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    1284:	652f3165 	.inst	0x652f3165 ; undefined
    1288:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    128c:	68735f6e 	.inst	0x68735f6e ; undefined
    1290:	742f6869 	.inst	0x742f6869 ; undefined
    1294:	2f726f68 	.inst	0x2f726f68 ; undefined
    1298:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    129c:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    12a0:	54442f31 	.inst	0x54442f31 ; undefined
    12a4:	6f425f45 	.inst	0x6f425f45 ; undefined
    12a8:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    12ac:	622f6564 	.inst	0x622f6564 ; undefined
    12b0:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    12b4:	72732f2e 	.inst	0x72732f2e ; undefined
    12b8:	72612f63 	.inst	0x72612f63 ; undefined
    12bc:	692f6863 	.inst	0x692f6863 ; undefined
    12c0:	756c636e 	.inst	0x756c636e ; undefined
    12c4:	00006564 	.inst	0x00006564 ; undefined
    12c8:	2e70636d 	rsubhn	v13.4h, v27.4s, v16.4s
    12cc:	00010063 	.inst	0x00010063 ; undefined
    12d0:	64747300 	.inst	0x64747300 ; undefined
    12d4:	2e746e69 	umin	v9.4h, v19.4h, v20.4h
    12d8:	00020068 	.inst	0x00020068 ; undefined
    12dc:	70797400 	adr	x0, f415f <_stack_size+0xf315f>
    12e0:	66656465 	.inst	0x66656465 ; undefined
    12e4:	0300682e 	.inst	0x0300682e ; undefined
    12e8:	636d0000 	.inst	0x636d0000 ; undefined
    12ec:	00682e70 	.inst	0x00682e70 ; undefined
    12f0:	75000003 	.inst	0x75000003 ; undefined
    12f4:	696c6974 	ldpsw	x20, x26, [x11,#-160]
    12f8:	682e7974 	.inst	0x682e7974 ; undefined
    12fc:	00000300 	.inst	0x00000300 ; undefined
    1300:	68636163 	.inst	0x68636163 ; undefined
    1304:	38765f65 	.inst	0x38765f65 ; undefined
    1308:	0300682e 	.inst	0x0300682e ; undefined
    130c:	69740000 	ldpsw	x0, x0, [x0,#-96]
    1310:	2e72656d 	umax	v13.4h, v11.4h, v18.4h
    1314:	00030068 	.inst	0x00030068 ; undefined
    1318:	72617500 	.inst	0x72617500 ; undefined
    131c:	00682e74 	.inst	0x00682e74 ; undefined
    1320:	00000003 	.inst	0x00000003 ; undefined
    1324:	a8020900 	stnp	x0, x2, [x8,#32]
    1328:	0003001f 	.inst	0x0003001f ; undefined
    132c:	03000000 	.inst	0x03000000 ; undefined
    1330:	2601028a 	.inst	0x2601028a ; undefined
    1334:	0322222a 	.inst	0x0322222a ; undefined
    1338:	0b03207a 	add	w26, w3, w3, lsl #8
    133c:	4a0b0320 	eor	w0, w25, w11
    1340:	7a033131 	.inst	0x7a033131 ; undefined
    1344:	2131312e 	.inst	0x2131312e ; undefined
    1348:	2a332d3d 	orn	w29, w9, w19, lsl #11
    134c:	03863f21 	.inst	0x03863f21 ; undefined
    1350:	2121580e 	.inst	0x2121580e ; undefined
    1354:	222c3023 	.inst	0x222c3023 ; undefined
    1358:	3459221e 	cbz	w30, b3798 <_stack_size+0xb2798>
    135c:	033c7903 	.inst	0x033c7903 ; undefined
    1360:	3023580b 	adr	x11, 47e61 <_stack_size+0x46e61>
    1364:	23302f1e 	.inst	0x23302f1e ; undefined
    1368:	0903231d 	.inst	0x0903231d ; undefined
    136c:	212d2f2e 	.inst	0x212d2f2e ; undefined
    1370:	0322211f 	.inst	0x0322211f ; undefined
    1374:	1a033c48 	.inst	0x1a033c48 ; undefined
    1378:	1e213d58 	fcsel	s24, s10, s1, cc
    137c:	7e830321 	.inst	0x7e830321 ; undefined
    1380:	033f662e 	.inst	0x033f662e ; undefined
    1384:	032000d5 	.inst	0x032000d5 ; undefined
    1388:	3f667faf 	.inst	0x3f667faf ; undefined
    138c:	2f3d212b 	.inst	0x2f3d212b ; undefined
    1390:	2f2f2f2f 	.inst	0x2f2f2f2f ; undefined
    1394:	3d2f2f2f 	str	b15, [x25,#3019]
    1398:	213d2f2f 	.inst	0x213d2f2f ; undefined
    139c:	332f3d5d 	.inst	0x332f3d5d ; undefined
    13a0:	5221241b 	eor	w27, w0, #0x800001ff
    13a4:	364a0c03 	tbz	w3, #9, 5524 <_stack_size+0x4524>
    13a8:	03207803 	.inst	0x03207803 ; undefined
    13ac:	2f2f2010 	.inst	0x2f2f2010 ; undefined
    13b0:	33302f2f 	.inst	0x33302f2f ; undefined
    13b4:	00242137 	.inst	0x00242137 ; NYI
    13b8:	06010402 	.inst	0x06010402 ; undefined
    13bc:	42470620 	.inst	0x42470620 ; undefined
    13c0:	01040200 	.inst	0x01040200 ; undefined
    13c4:	4b062e06 	sub	w6, w16, w6, lsl #11
    13c8:	4403494d 	.inst	0x4403494d ; undefined
    13cc:	332f3d20 	.inst	0x332f3d20 ; undefined
    13d0:	4e21241b 	shsub	v27.16b, v0.16b, v1.16b
    13d4:	032f1f21 	.inst	0x032f1f21 ; undefined
    13d8:	4f032e2b 	.inst	0x4f032e2b ; undefined
    13dc:	1003213c 	adr	x28, 7800 <_stack_size+0x6800>
    13e0:	0b033d66 	add	w6, w11, w3, lsl #15
    13e4:	031f213c 	.inst	0x031f213c ; undefined
    13e8:	03212e63 	.inst	0x03212e63 ; undefined
    13ec:	1e22663a 	fccmpe	s17, s2, #0xa, vs
    13f0:	1e302c22 	fcsel	s2, s1, s16, cs
    13f4:	333e1e3e 	.inst	0x333e1e3e ; undefined
    13f8:	0e032b3f 	trn1	v31.8b, v25.8b, v3.8b
    13fc:	2e730320 	uaddl	v0.4s, v25.4h, v19.4h
    1400:	2f2f2f3d 	.inst	0x2f2f2f3d ; undefined
    1404:	2f2f2f2f 	.inst	0x2f2f2f2f ; undefined
    1408:	4b3f2f2f 	sub	w15, w25, wzr, uxth #3
    140c:	200b0330 	.inst	0x200b0330 ; undefined
    1410:	2f2f2f2f 	.inst	0x2f2f2f2f ; undefined
    1414:	312f2f2f 	adds	w15, w25, #0xbcb
    1418:	24213733 	.inst	0x24213733 ; undefined
    141c:	01040200 	.inst	0x01040200 ; undefined
    1420:	47062006 	.inst	0x47062006 ; undefined
    1424:	04020042 	.inst	0x04020042 ; undefined
    1428:	062e0601 	.inst	0x062e0601 ; undefined
    142c:	403d3d4e 	.inst	0x403d3d4e ; undefined
    1430:	5735213b 	.inst	0x5735213b ; undefined
    1434:	74037021 	.inst	0x74037021 ; undefined
    1438:	6703553c 	.inst	0x6703553c ; undefined
    143c:	30393e3c 	adr	x28, 73c01 <_stack_size+0x72c01>
    1440:	3a242931 	.inst	0x3a242931 ; undefined
    1444:	02223b24 	.inst	0x02223b24 ; undefined
    1448:	01010004 	.inst	0x01010004 ; undefined
    144c:	000005d5 	.inst	0x000005d5 ; undefined
    1450:	019d0002 	.inst	0x019d0002 ; undefined
    1454:	01040000 	.inst	0x01040000 ; undefined
    1458:	000d0efb 	.inst	0x000d0efb ; undefined
    145c:	01010101 	.inst	0x01010101 ; undefined
    1460:	01000000 	.inst	0x01000000 ; undefined
    1464:	2f010000 	.inst	0x2f010000 ; undefined
    1468:	656d6f68 	.inst	0x656d6f68 ; undefined
    146c:	64652f31 	.inst	0x64652f31 ; undefined
    1470:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    1474:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    1478:	68742f68 	.inst	0x68742f68 ; undefined
    147c:	742f726f 	.inst	0x742f726f ; undefined
    1480:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    1484:	312e382d 	adds	w13, w1, #0xb8e
    1488:	4554442f 	.inst	0x4554442f ; undefined
    148c:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    1490:	646f6374 	.inst	0x646f6374 ; undefined
    1494:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    1498:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    149c:	6372732f 	.inst	0x6372732f ; undefined
    14a0:	6372612f 	.inst	0x6372612f ; undefined
    14a4:	65722f68 	.inst	0x65722f68 ; undefined
    14a8:	2f746573 	.inst	0x2f746573 ; undefined
    14ac:	746f6f62 	.inst	0x746f6f62 ; undefined
    14b0:	74636576 	.inst	0x74636576 ; undefined
    14b4:	2f00726f 	.inst	0x2f00726f ; undefined
    14b8:	656d6f68 	.inst	0x656d6f68 ; undefined
    14bc:	64652f31 	.inst	0x64652f31 ; undefined
    14c0:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    14c4:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    14c8:	68742f68 	.inst	0x68742f68 ; undefined
    14cc:	742f726f 	.inst	0x742f726f ; undefined
    14d0:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    14d4:	312e382d 	adds	w13, w1, #0xb8e
    14d8:	4554442f 	.inst	0x4554442f ; undefined
    14dc:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    14e0:	646f6374 	.inst	0x646f6374 ; undefined
    14e4:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    14e8:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    14ec:	706d742f 	adr	x15, dc373 <_stack_size+0xdb373>
    14f0:	6473612f 	.inst	0x6473612f ; undefined
    14f4:	2d34366b 	stp	s11, s13, [x19,#-96]
    14f8:	2e392e34 	uqsub	v20.8b, v17.8b, v25.8b
    14fc:	35612d33 	cbnz	w19, c3aa0 <_stack_size+0xc2aa0>
    1500:	4c452d33 	.inst	0x4c452d33 ; undefined
    1504:	312e332d 	adds	w13, w25, #0xb8c
    1508:	32672d30 	.inst	0x32672d30 ; undefined
    150c:	2d39312e 	stp	s14, s12, [x9,#-56]
    1510:	6e343661 	cmhi	v1.16b, v19.16b, v20.16b
    1514:	35312d74 	cbnz	w20, 63ac0 <_stack_size+0x62ac0>
    1518:	35313630 	cbnz	w16, 63bdc <_stack_size+0x62bdc>
    151c:	636e692f 	.inst	0x636e692f ; undefined
    1520:	6564756c 	.inst	0x6564756c ; undefined
    1524:	6f682f00 	.inst	0x6f682f00 ; undefined
    1528:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
    152c:	73696465 	.inst	0x73696465 ; undefined
    1530:	735f6e6f 	.inst	0x735f6e6f ; undefined
    1534:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
    1538:	726f6874 	.inst	0x726f6874 ; undefined
    153c:	7572742f 	.inst	0x7572742f ; undefined
    1540:	382d6b6e 	strb	w14, [x27,x13]
    1544:	442f312e 	.inst	0x442f312e ; undefined
    1548:	425f4554 	.inst	0x425f4554 ; undefined
    154c:	63746f6f 	.inst	0x63746f6f ; undefined
    1550:	2f65646f 	.inst	0x2f65646f ; undefined
    1554:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
    1558:	732f2e2e 	.inst	0x732f2e2e ; undefined
    155c:	612f6372 	.inst	0x612f6372 ; undefined
    1560:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
    1564:	6c636e69 	ldnp	d9, d27, [x19,#-464]
    1568:	00656475 	.inst	0x00656475 ; undefined
    156c:	6e616e00 	umin	v0.8h, v16.8h, v1.8h
    1570:	706f5f64 	adr	x4, e015f <_stack_size+0xdf15f>
    1574:	00632e73 	.inst	0x00632e73 ; undefined
    1578:	73000001 	.inst	0x73000001 ; undefined
    157c:	6e696474 	umax	v20.8h, v3.8h, v9.8h
    1580:	00682e74 	.inst	0x00682e74 ; undefined
    1584:	6e000002 	ext	v2.16b, v0.16b, v0.16b, #0
    1588:	65725f66 	.inst	0x65725f66 ; undefined
    158c:	00682e67 	.inst	0x00682e67 ; undefined
    1590:	66000003 	.inst	0x66000003 ; undefined
    1594:	6873616c 	.inst	0x6873616c ; undefined
    1598:	6e616e5f 	umin	v31.8h, v18.8h, v1.8h
    159c:	72705f64 	.inst	0x72705f64 ; undefined
    15a0:	6c69666f 	ldnp	d15, d25, [x19,#-368]
    15a4:	00682e65 	.inst	0x00682e65 ; undefined
    15a8:	74000003 	.inst	0x74000003 ; undefined
    15ac:	64657079 	.inst	0x64657079 ; undefined
    15b0:	682e6665 	.inst	0x682e6665 ; undefined
    15b4:	00000300 	.inst	0x00000300 ; undefined
    15b8:	73616c66 	.inst	0x73616c66 ; undefined
    15bc:	616e5f68 	.inst	0x616e5f68 ; undefined
    15c0:	6c5f646e 	ldnp	d14, d25, [x3,#496]
    15c4:	2e747369 	uabdl	v9.4s, v27.4h, v20.4h
    15c8:	00030068 	.inst	0x00030068 ; undefined
    15cc:	63616300 	.inst	0x63616300 ; undefined
    15d0:	765f6568 	.inst	0x765f6568 ; undefined
    15d4:	00682e38 	.inst	0x00682e38 ; undefined
    15d8:	75000003 	.inst	0x75000003 ; undefined
    15dc:	696c6974 	ldpsw	x20, x26, [x11,#-160]
    15e0:	682e7974 	.inst	0x682e7974 ; undefined
    15e4:	00000300 	.inst	0x00000300 ; undefined
    15e8:	74726175 	.inst	0x74726175 ; undefined
    15ec:	0300682e 	.inst	0x0300682e ; undefined
    15f0:	00000000 	.inst	0x00000000 ; undefined
    15f4:	266c0209 	.inst	0x266c0209 ; undefined
    15f8:	00000300 	.inst	0x00000300 ; undefined
    15fc:	8e030000 	.inst	0x8e030000 ; undefined
    1600:	59130105 	.inst	0x59130105 ; undefined
    1604:	03591331 	.inst	0x03591331 ; undefined
    1608:	03142e1e 	.inst	0x03142e1e ; undefined
    160c:	132e0290 	.inst	0x132e0290 ; undefined
    1610:	034d1f59 	.inst	0x034d1f59 ; undefined
    1614:	13207eeb 	.inst	0x13207eeb ; undefined
    1618:	2e790334 	uaddl	v20.4s, v25.4h, v25.4h
    161c:	2e790328 	uaddl	v8.4s, v25.4h, v25.4h
    1620:	2e780328 	uaddl	v8.4s, v25.4h, v24.4h
    1624:	29252f26 	stp	w6, w11, [x25,#-216]
    1628:	272a2721 	.inst	0x272a2721 ; undefined
    162c:	232e7a03 	.inst	0x232e7a03 ; undefined
    1630:	232b2331 	.inst	0x232b2331 ; undefined
    1634:	200c034e 	.inst	0x200c034e ; undefined
    1638:	032e7803 	.inst	0x032e7803 ; undefined
    163c:	3e827a8c 	.inst	0x3e827a8c ; undefined
    1640:	200e0321 	.inst	0x200e0321 ; undefined
    1644:	01040200 	.inst	0x01040200 ; undefined
    1648:	3d063c06 	str	b6, [x0,#399]
    164c:	4a1e0330 	eor	w16, w25, w30
    1650:	4b696959 	.inst	0x4b696959 ; undefined
    1654:	3d4d3f3d 	ldr	b29, [x25,#847]
    1658:	4d4b4c4b 	.inst	0x4d4b4c4b ; undefined
    165c:	7575674b 	.inst	0x7575674b ; undefined
    1660:	3c0e033d 	stur	b29, [x25,#224]
    1664:	4f034b3e 	.inst	0x4f034b3e ; undefined
    1668:	2e330358 	uaddl	v24.8h, v26.8b, v19.8b
    166c:	59245a86 	.inst	0x59245a86 ; undefined
    1670:	4e4a1a03 	uzp1	v3.8h, v16.8h, v10.8h
    1674:	5d4c2422 	.inst	0x5d4c2422 ; undefined
    1678:	685e2522 	.inst	0x685e2522 ; undefined
    167c:	3e68303e 	.inst	0x3e68303e ; undefined
    1680:	01040200 	.inst	0x01040200 ; undefined
    1684:	3d063c06 	str	b6, [x0,#399]
    1688:	2131223d 	.inst	0x2131223d ; undefined
    168c:	2e028f03 	.inst	0x2e028f03 ; undefined
    1690:	58780328 	ldr	x8, f16f4 <_stack_size+0xf06f4>
    1694:	2e780328 	uaddl	v8.4s, v25.4h, v24.4h
    1698:	03200b03 	.inst	0x03200b03 ; undefined
    169c:	41442e75 	.inst	0x41442e75 ; undefined
    16a0:	2028031b 	.inst	0x2028031b ; undefined
    16a4:	5b205803 	.inst	0x5b205803 ; undefined
    16a8:	1503415a 	b	40d1c10 <_stack_base+0x10c4490>
    16ac:	524b6e4a 	.inst	0x524b6e4a ; undefined
    16b0:	211f3d3e 	.inst	0x211f3d3e ; undefined
    16b4:	1e312f21 	fcsel	s1, s25, s17, cs
    16b8:	03211f31 	.inst	0x03211f31 ; undefined
    16bc:	98c92012 	ldrsw	x18, fffffffffff93abc <SMC_ID_HW_RSA+0xffffffff7bf83bb5>
    16c0:	2696211f 	.inst	0x2696211f ; undefined
    16c4:	88207a03 	stxp	w0, w3, w30, [x16]
    16c8:	344a7a03 	cbz	w3, 96608 <_stack_size+0x95608>
    16cc:	032e7603 	.inst	0x032e7603 ; undefined
    16d0:	78033c0a 	strh	w10, [x0,#51]!
    16d4:	53032820 	ubfx	w0, w1, #3, #8
    16d8:	01fe0358 	.inst	0x01fe0358 ; undefined
    16dc:	20310320 	.inst	0x20310320 ; undefined
    16e0:	2e4e032f 	.inst	0x2e4e032f ; undefined
    16e4:	2a2e3503 	orn	w3, w8, w14, lsl #13
    16e8:	36212925 	tbz	w5, #4, 3c0c <_stack_size+0x2c0c>
    16ec:	2f292629 	urshr	v9.2s, v17.2s, #23
    16f0:	213b3023 	.inst	0x213b3023 ; undefined
    16f4:	034a4403 	.inst	0x034a4403 ; undefined
    16f8:	1f032025 	fmadd	s5, s1, s3, s8
    16fc:	1f2f214a 	fnmadd	s10, s10, s15, s8
    1700:	222c231f 	.inst	0x222c231f ; undefined
    1704:	2152211f 	.inst	0x2152211f ; undefined
    1708:	0b03212d 	add	w13, w9, w3, lsl #8
    170c:	2f312b58 	.inst	0x2f312b58 ; undefined
    1710:	7fad0321 	.inst	0x7fad0321 ; undefined
    1714:	3d593220 	ldr	b0, [x17,#1612]
    1718:	91c93f3d 	.inst	0x91c93f3d ; undefined
    171c:	900a0391 	adrp	x17, 14071000 <_stack_base+0x11063880>
    1720:	03591f21 	.inst	0x03591f21 ; undefined
    1724:	b7033c6c 	tbnz	x12, #32, 7eb0 <_stack_size+0x6eb0>
    1728:	213e207b 	.inst	0x213e207b ; undefined
    172c:	00200e03 	.inst	0x00200e03 ; NYI
    1730:	06010402 	.inst	0x06010402 ; undefined
    1734:	303d063c 	adr	x28, 7b7f9 <_stack_size+0x7a7f9>
    1738:	594a1d03 	.inst	0x594a1d03 ; undefined
    173c:	66790368 	.inst	0x66790368 ; undefined
    1740:	4b852236 	sub	w22, w17, w5, asr #8
    1744:	3d4d3f3d 	ldr	b29, [x25,#847]
    1748:	4d4b4c4b 	.inst	0x4d4b4c4b ; undefined
    174c:	7575674b 	.inst	0x7575674b ; undefined
    1750:	3c0a033d 	stur	b29, [x25,#160]
    1754:	864c4b3e 	.inst	0x864c4b3e ; undefined
    1758:	2159595d 	.inst	0x2159595d ; undefined
    175c:	4e741a03 	.inst	0x4e741a03 ; undefined
    1760:	5c4b2322 	ldr	d2, 97bc4 <_stack_size+0x96bc4>
    1764:	685e2722 	.inst	0x685e2722 ; undefined
    1768:	3e68303e 	.inst	0x3e68303e ; undefined
    176c:	01040200 	.inst	0x01040200 ; undefined
    1770:	3d063c06 	str	b6, [x0,#399]
    1774:	2131223d 	.inst	0x2131223d ; undefined
    1778:	2e04c103 	.inst	0x2e04c103 ; undefined
    177c:	207fbb03 	.inst	0x207fbb03 ; undefined
    1780:	2e00c503 	.inst	0x2e00c503 ; undefined
    1784:	314a4303 	adds	w3, w24, #0x290, lsl #12
    1788:	2e7ec703 	.inst	0x2e7ec703 ; undefined
    178c:	a5032f36 	.inst	0xa5032f36 ; undefined
    1790:	2f5b2e01 	.inst	0x2f5b2e01 ; undefined
    1794:	f803312f 	stur	x15, [x9,#51]
    1798:	bf032000 	.inst	0xbf032000 ; undefined
    179c:	c2032e7c 	.inst	0xc2032e7c ; undefined
    17a0:	be032003 	.inst	0xbe032003 ; undefined
    17a4:	c3032e7c 	.inst	0xc3032e7c ; undefined
    17a8:	89032003 	.inst	0x89032003 ; undefined
    17ac:	cf032e7f 	.inst	0xcf032e7f ; undefined
    17b0:	0321207e 	.inst	0x0321207e ; undefined
    17b4:	032002a6 	.inst	0x032002a6 ; undefined
    17b8:	03207f89 	.inst	0x03207f89 ; undefined
    17bc:	03207dba 	.inst	0x03207dba ; undefined
    17c0:	2f2e02c6 	.inst	0x2f2e02c6 ; undefined
    17c4:	207ec703 	.inst	0x207ec703 ; undefined
    17c8:	3c02a103 	stur	b3, [x8,#42]
    17cc:	207de203 	.inst	0x207de203 ; undefined
    17d0:	a5032125 	.inst	0xa5032125 ; undefined
    17d4:	21212002 	.inst	0x21212002 ; undefined
    17d8:	207f9703 	.inst	0x207f9703 ; undefined
    17dc:	2e0c0330 	ext	v16.8b, v25.8b, v12.8b, #0
    17e0:	59032f2f 	.inst	0x59032f2f ; undefined
    17e4:	2e38033c 	uaddl	v28.8h, v25.8b, v24.8b
    17e8:	03203503 	.inst	0x03203503 ; undefined
    17ec:	31667fb5 	adds	w21, w29, #0x99f, lsl #12
    17f0:	3d3c0a03 	str	b3, [x16,#3842]
    17f4:	3c20032f 	.inst	0x3c20032f ; undefined
    17f8:	3c7cec03 	.inst	0x3c7cec03 ; undefined
    17fc:	2e039703 	.inst	0x2e039703 ; undefined
    1800:	7dfb0321 	.inst	0x7dfb0321 ; undefined
    1804:	0285032e 	.inst	0x0285032e ; undefined
    1808:	7dfb032e 	.inst	0x7dfb032e ; undefined
    180c:	02a1032e 	.inst	0x02a1032e ; undefined
    1810:	7de2033c 	.inst	0x7de2033c ; undefined
    1814:	032f2520 	.inst	0x032f2520 ; undefined
    1818:	032e02a5 	.inst	0x032e02a5 ; undefined
    181c:	032e7dda 	.inst	0x032e7dda ; undefined
    1820:	032002a7 	.inst	0x032002a7 ; undefined
    1824:	212e7dd9 	.inst	0x212e7dd9 ; undefined
    1828:	2e02a603 	.inst	0x2e02a603 ; undefined
    182c:	0321211f 	.inst	0x0321211f ; undefined
    1830:	03322063 	.inst	0x03322063 ; undefined
    1834:	032f2e17 	.inst	0x032f2e17 ; undefined
    1838:	15032e6c 	b	40cd1e8 <_stack_base+0x10bfa68>
    183c:	1f222c2e 	fnmadd	s14, s1, s2, s11
    1840:	206c032f 	.inst	0x206c032f ; undefined
    1844:	207cd603 	.inst	0x207cd603 ; undefined
    1848:	20039b03 	.inst	0x20039b03 ; undefined
    184c:	207ce503 	.inst	0x207ce503 ; undefined
    1850:	20039203 	.inst	0x20039203 ; undefined
    1854:	032e1903 	.inst	0x032e1903 ; undefined
    1858:	03907fa4 	.inst	0x03907fa4 ; undefined
    185c:	822e02c4 	.inst	0x822e02c4 ; undefined
    1860:	21201103 	.inst	0x21201103 ; undefined
    1864:	213d405a 	.inst	0x213d405a ; undefined
    1868:	e9033130 	.inst	0xe9033130 ; undefined
    186c:	1b032e7a 	madd	w26, w19, w3, w11
    1870:	033e2f2e 	.inst	0x033e2f2e ; undefined
    1874:	3d2004fa 	str	b26, [x7,#2049]
    1878:	7ae10326 	.inst	0x7ae10326 ; undefined
    187c:	20150320 	.inst	0x20150320 ; undefined
    1880:	89032121 	.inst	0x89032121 ; undefined
    1884:	21232e05 	.inst	0x21232e05 ; undefined
    1888:	03207303 	.inst	0x03207303 ; undefined
    188c:	7403200c 	.inst	0x7403200c ; undefined
    1890:	2015032e 	.inst	0x2015032e ; undefined
    1894:	7aee0321 	.inst	0x7aee0321 ; undefined
    1898:	22222174 	.inst	0x22222174 ; undefined
    189c:	2e04ed03 	.inst	0x2e04ed03 ; undefined
    18a0:	77202003 	.inst	0x77202003 ; undefined
    18a4:	4a150366 	eor	w6, w27, w21
    18a8:	3d405a21 	ldr	b1, [x17,#22]
    18ac:	03313021 	.inst	0x03313021 ; undefined
    18b0:	032e7ae4 	.inst	0x032e7ae4 ; undefined
    18b4:	03667fa9 	.inst	0x03667fa9 ; undefined
    18b8:	032e03b4 	.inst	0x032e03b4 ; undefined
    18bc:	032e7da3 	.inst	0x032e7da3 ; undefined
    18c0:	002e05a1 	.inst	0x002e05a1 ; NYI
    18c4:	22010402 	.inst	0x22010402 ; undefined
    18c8:	0402003d 	.inst	0x0402003d ; undefined
    18cc:	03428f02 	.inst	0x03428f02 ; undefined
    18d0:	031f200e 	.inst	0x031f200e ; undefined
    18d4:	24032066 	.inst	0x24032066 ; undefined
    18d8:	0321572e 	.inst	0x0321572e ; undefined
    18dc:	7a032e6f 	.inst	0x7a032e6f ; undefined
    18e0:	7ad7034a 	.inst	0x7ad7034a ; undefined
    18e4:	7fa9032e 	.inst	0x7fa9032e ; undefined
    18e8:	00d90320 	.inst	0x00d90320 ; undefined
    18ec:	7fac032e 	.inst	0x7fac032e ; undefined
    18f0:	201b0320 	.inst	0x201b0320 ; undefined
    18f4:	2000c203 	.inst	0x2000c203 ; undefined
    18f8:	207f9e03 	.inst	0x207f9e03 ; undefined
    18fc:	2e00e803 	.inst	0x2e00e803 ; undefined
    1900:	207f9d03 	.inst	0x207f9d03 ; undefined
    1904:	2000eb03 	.inst	0x2000eb03 ; undefined
    1908:	222c5a3d 	.inst	0x222c5a3d ; undefined
    190c:	7f8f031e 	.inst	0x7f8f031e ; undefined
    1910:	06890320 	.inst	0x06890320 ; undefined
    1914:	79f70320 	ldrsh	w0, [x25,#7040]
    1918:	03cc0320 	.inst	0x03cc0320 ; undefined
    191c:	7cb90320 	.inst	0x7cb90320 ; undefined
    1920:	03c70320 	.inst	0x03c70320 ; undefined
    1924:	2e68032e 	uaddl	v14.4s, v25.4h, v8.4h
    1928:	21201b03 	.inst	0x21201b03 ; undefined
    192c:	031f2f4f 	.inst	0x031f2f4f ; undefined
    1930:	221f2e6d 	.inst	0x221f2e6d ; undefined
    1934:	1603211f 	b	fffffffff80c9db0 <SMC_ID_HW_RSA+0xffffffff740b9ea9>
    1938:	2e190320 	ext	v0.8b, v25.8b, v25.8b, #0
    193c:	03206703 	.inst	0x03206703 ; undefined
    1940:	6b032015 	subs	w21, w0, w3, lsl #8
    1944:	2016032e 	.inst	0x2016032e ; undefined
    1948:	20780331 	.inst	0x20780331 ; undefined
    194c:	311d2432 	adds	w18, w1, #0x749
    1950:	2f2f5c24 	.inst	0x2f2f5c24 ; undefined
    1954:	272a252c 	.inst	0x272a252c ; undefined
    1958:	272e7a03 	.inst	0x272e7a03 ; undefined
    195c:	252c252a 	.inst	0x252c252a ; undefined
    1960:	2925211b 	stp	w27, w8, [x8,#-216]
    1964:	2b342926 	adds	w6, w9, w20, uxth #2
    1968:	211f212f 	.inst	0x211f212f ; undefined
    196c:	27211f21 	.inst	0x27211f21 ; undefined
    1970:	282e7903 	stnp	w3, w30, [x8,#-144]
    1974:	032e7903 	.inst	0x032e7903 ; undefined
    1978:	6c032015 	stnp	d21, d8, [x0,#48]
    197c:	20130320 	.inst	0x20130320 ; undefined
    1980:	21207203 	.inst	0x21207203 ; undefined
    1984:	03200e03 	.inst	0x03200e03 ; undefined
    1988:	09032076 	.inst	0x09032076 ; undefined
    198c:	03322120 	.inst	0x03322120 ; undefined
    1990:	234d5813 	.inst	0x234d5813 ; undefined
    1994:	353d1f67 	cbnz	w7, 7bd80 <_stack_size+0x7ad80>
    1998:	1f3d694f 	fnmadd	s15, s10, s29, s26
    199c:	223e3121 	.inst	0x223e3121 ; undefined
    19a0:	747caa03 	.inst	0x747caa03 ; undefined
    19a4:	1f1e302f 	fmadd	s15, s1, s30, s12
    19a8:	03222221 	.inst	0x03222221 ; undefined
    19ac:	032e039d 	.inst	0x032e039d ; undefined
    19b0:	5e035852 	.inst	0x5e035852 ; undefined
    19b4:	2e700358 	uaddl	v24.4s, v26.4h, v16.4h
    19b8:	2e0f032f 	ext	v15.8b, v25.8b, v15.8b, #0
    19bc:	212e7003 	.inst	0x212e7003 ; undefined
    19c0:	0196032f 	.inst	0x0196032f ; undefined
    19c4:	032f3d2e 	.inst	0x032f3d2e ; undefined
    19c8:	033c01bc 	.inst	0x033c01bc ; undefined
    19cc:	0c035874 	.inst	0x0c035874 ; undefined
    19d0:	31163120 	adds	w0, w9, #0x58c
    19d4:	282e7903 	stnp	w3, w30, [x8,#-144]
    19d8:	242e7803 	.inst	0x242e7803 ; undefined
    19dc:	26232925 	.inst	0x26232925 ; undefined
    19e0:	21207a03 	.inst	0x21207a03 ; undefined
    19e4:	2e7a0326 	uaddl	v6.4s, v25.4h, v26.4h
    19e8:	7a032621 	.inst	0x7a032621 ; undefined
    19ec:	231f252e 	.inst	0x231f252e ; undefined
    19f0:	231f222b 	.inst	0x231f222b ; undefined
    19f4:	211f212c 	.inst	0x211f212c ; undefined
    19f8:	2e790327 	uaddl	v7.4s, v25.4h, v25.4h
    19fc:	03200e03 	.inst	0x03200e03 ; undefined
    1a00:	25212e73 	.inst	0x25212e73 ; undefined
    1a04:	001f2135 	.inst	0x001f2135 ; undefined
    1a08:	21010402 	.inst	0x21010402 ; undefined
    1a0c:	1f3d6932 	fnmadd	s18, s9, s29, s26
    1a10:	01040200 	.inst	0x01040200 ; undefined
    1a14:	223e3121 	.inst	0x223e3121 ; undefined
    1a18:	273d4b3d 	.inst	0x273d4b3d ; undefined
    1a1c:	3d2f3d2a 	str	b10, [x9,#3023]
    1a20:	01000202 	.inst	0x01000202 ; undefined
    1a24:	00028001 	.inst	0x00028001 ; undefined
    1a28:	55000200 	.inst	0x55000200 ; undefined
    1a2c:	04000001 	.inst	0x04000001 ; undefined
    1a30:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    1a34:	01010100 	.inst	0x01010100 ; undefined
    1a38:	00000001 	.inst	0x00000001 ; undefined
    1a3c:	01000001 	.inst	0x01000001 ; undefined
    1a40:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    1a44:	652f3165 	.inst	0x652f3165 ; undefined
    1a48:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    1a4c:	68735f6e 	.inst	0x68735f6e ; undefined
    1a50:	742f6869 	.inst	0x742f6869 ; undefined
    1a54:	2f726f68 	.inst	0x2f726f68 ; undefined
    1a58:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    1a5c:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    1a60:	54442f31 	.inst	0x54442f31 ; undefined
    1a64:	6f425f45 	.inst	0x6f425f45 ; undefined
    1a68:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    1a6c:	622f6564 	.inst	0x622f6564 ; undefined
    1a70:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    1a74:	72732f2e 	.inst	0x72732f2e ; undefined
    1a78:	72612f63 	.inst	0x72612f63 ; undefined
    1a7c:	722f6863 	ands	w3, w3, #0xfffe0fff
    1a80:	74657365 	.inst	0x74657365 ; undefined
    1a84:	6f6f622f 	umlsl2	v15.4s, v17.8h, v15.h[2]
    1a88:	63657674 	.inst	0x63657674 ; undefined
    1a8c:	00726f74 	.inst	0x00726f74 ; undefined
    1a90:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    1a94:	652f3165 	.inst	0x652f3165 ; undefined
    1a98:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    1a9c:	68735f6e 	.inst	0x68735f6e ; undefined
    1aa0:	742f6869 	.inst	0x742f6869 ; undefined
    1aa4:	2f726f68 	.inst	0x2f726f68 ; undefined
    1aa8:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    1aac:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    1ab0:	54442f31 	.inst	0x54442f31 ; undefined
    1ab4:	6f425f45 	.inst	0x6f425f45 ; undefined
    1ab8:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    1abc:	622f6564 	.inst	0x622f6564 ; undefined
    1ac0:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    1ac4:	6d742f2e 	ldp	d14, d11, [x25,#-192]
    1ac8:	73612f70 	.inst	0x73612f70 ; undefined
    1acc:	34366b64 	cbz	w4, 6e838 <_stack_size+0x6d838>
    1ad0:	392e342d 	strb	w13, [x1,#2957]
    1ad4:	612d332e 	.inst	0x612d332e ; undefined
    1ad8:	452d3335 	.inst	0x452d3335 ; undefined
    1adc:	2e332d4c 	uqsub	v12.8b, v10.8b, v19.8b
    1ae0:	672d3031 	.inst	0x672d3031 ; undefined
    1ae4:	39312e32 	strb	w18, [x17,#3147]
    1ae8:	3436612d 	cbz	w13, 6e70c <_stack_size+0x6d70c>
    1aec:	312d746e 	adds	w14, w3, #0xb5d
    1af0:	31363035 	adds	w21, w1, #0xd8c
    1af4:	6e692f35 	uqsub	v21.8h, v25.8h, v9.8h
    1af8:	64756c63 	.inst	0x64756c63 ; undefined
    1afc:	682f0065 	.inst	0x682f0065 ; undefined
    1b00:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    1b04:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    1b08:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    1b0c:	68696873 	.inst	0x68696873 ; undefined
    1b10:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    1b14:	72742f72 	.inst	0x72742f72 ; undefined
    1b18:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    1b1c:	2f312e38 	.inst	0x2f312e38 ; undefined
    1b20:	5f455444 	shl	d4, d2, #5
    1b24:	746f6f42 	.inst	0x746f6f42 ; undefined
    1b28:	65646f63 	.inst	0x65646f63 ; undefined
    1b2c:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    1b30:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    1b34:	2f637273 	.inst	0x2f637273 ; undefined
    1b38:	68637261 	.inst	0x68637261 ; undefined
    1b3c:	636e692f 	.inst	0x636e692f ; undefined
    1b40:	6564756c 	.inst	0x6564756c ; undefined
    1b44:	746f0000 	.inst	0x746f0000 ; undefined
    1b48:	00632e70 	.inst	0x00632e70 ; undefined
    1b4c:	73000001 	.inst	0x73000001 ; undefined
    1b50:	6e696474 	umax	v20.8h, v3.8h, v9.8h
    1b54:	00682e74 	.inst	0x00682e74 ; undefined
    1b58:	74000002 	.inst	0x74000002 ; undefined
    1b5c:	64657079 	.inst	0x64657079 ; undefined
    1b60:	682e6665 	.inst	0x682e6665 ; undefined
    1b64:	00000300 	.inst	0x00000300 ; undefined
    1b68:	68636163 	.inst	0x68636163 ; undefined
    1b6c:	38765f65 	.inst	0x38765f65 ; undefined
    1b70:	0300682e 	.inst	0x0300682e ; undefined
    1b74:	74750000 	.inst	0x74750000 ; undefined
    1b78:	74696c69 	.inst	0x74696c69 ; undefined
    1b7c:	00682e79 	.inst	0x00682e79 ; undefined
    1b80:	00000003 	.inst	0x00000003 ; undefined
    1b84:	b8020900 	sttr	w0, [x8,#32]
    1b88:	0003003b 	.inst	0x0003003b ; undefined
    1b8c:	03000000 	.inst	0x03000000 ; undefined
    1b90:	030100c0 	.inst	0x030100c0 ; undefined
    1b94:	4c592017 	.inst	0x4c592017 ; undefined
    1b98:	34661003 	cbz	w3, cdd98 <_stack_size+0xccd98>
    1b9c:	032e1303 	.inst	0x032e1303 ; undefined
    1ba0:	03342e70 	.inst	0x03342e70 ; undefined
    1ba4:	59032e0a 	.inst	0x59032e0a ; undefined
    1ba8:	2d2f212e 	stp	s14, s8, [x9,#-136]
    1bac:	1f221e22 	fnmadd	s2, s17, s2, s7
    1bb0:	27212121 	.inst	0x27212121 ; undefined
    1bb4:	2c2e1b03 	stnp	s3, s6, [x24,#-144]
    1bb8:	2e220330 	uaddl	v16.8h, v25.8b, v2.8b
    1bbc:	4e1f2f22 	smov	x2, v25.b[15]
    1bc0:	223d2f3d 	.inst	0x223d2f3d ; undefined
    1bc4:	2e00f003 	.inst	0x2e00f003 ; undefined
    1bc8:	2f211c26 	.inst	0x2f211c26 ; undefined
    1bcc:	38322122 	ldeorb	w18, w2, [x9]
    1bd0:	03040200 	.inst	0x03040200 ; undefined
    1bd4:	0402002f 	.inst	0x0402002f ; undefined
    1bd8:	02005903 	.inst	0x02005903 ; undefined
    1bdc:	003d0304 	.inst	0x003d0304 ; NYI
    1be0:	3d030402 	str	b2, [x0,#193]
    1be4:	03040200 	.inst	0x03040200 ; undefined
    1be8:	2e0c0370 	ext	v16.8b, v27.8b, v12.8b, #0
    1bec:	4a7ed703 	.inst	0x4a7ed703 ; undefined
    1bf0:	032e0903 	.inst	0x032e0903 ; undefined
    1bf4:	241e2079 	.inst	0x241e2079 ; undefined
    1bf8:	79032421 	strh	w1, [x1,#402]
    1bfc:	00232720 	.inst	0x00232720 ; NYI
    1c00:	06010402 	.inst	0x06010402 ; undefined
    1c04:	a231062e 	.inst	0xa231062e ; undefined
    1c08:	02001f2b 	.inst	0x02001f2b ; undefined
    1c0c:	30240104 	adr	x4, 49c2d <_stack_size+0x48c2d>
    1c10:	4a11033f 	eor	wzr, w25, w17
    1c14:	30200d03 	adr	x3, 41db5 <_stack_size+0x40db5>
    1c18:	68438922 	.inst	0x68438922 ; undefined
    1c1c:	352e7903 	cbnz	w3, 5eb3c <_stack_size+0x5db3c>
    1c20:	032e7103 	.inst	0x032e7103 ; undefined
    1c24:	0a032012 	and	w18, w0, w3, lsl #8
    1c28:	21302c20 	.inst	0x21302c20 ; undefined
    1c2c:	03200a03 	.inst	0x03200a03 ; undefined
    1c30:	3134207a 	adds	w26, w3, #0xd08
    1c34:	86223e28 	.inst	0x86223e28 ; undefined
    1c38:	03200a03 	.inst	0x03200a03 ; undefined
    1c3c:	0334207a 	.inst	0x0334207a ; undefined
    1c40:	11032e73 	add	w19, w19, #0xcb
    1c44:	22302120 	.inst	0x22302120 ; undefined
    1c48:	03820a03 	.inst	0x03820a03 ; undefined
    1c4c:	25033c77 	.inst	0x25033c77 ; undefined
    1c50:	301e2220 	adr	x0, 3e095 <_stack_size+0x3d095>
    1c54:	1d21331e 	.inst	0x1d21331e ; undefined
    1c58:	0402003f 	.inst	0x0402003f ; undefined
    1c5c:	2d4b2401 	ldp	s1, s9, [x0,#88]
    1c60:	0c032d21 	.inst	0x0c032d21 ; undefined
    1c64:	66710320 	.inst	0x66710320 ; undefined
    1c68:	16201303 	b	fffffffff8806874 <SMC_ID_HW_RSA+0xffffffff747f696d>
    1c6c:	3d232221 	str	b1, [x17,#2248]
    1c70:	312f2f1f 	cmn	w24, #0xbcb
    1c74:	003c0a03 	.inst	0x003c0a03 ; NYI
    1c78:	06020402 	.inst	0x06020402 ; undefined
    1c7c:	1f510674 	fmadd	d20, d19, d17, d1
    1c80:	03222f21 	.inst	0x03222f21 ; undefined
    1c84:	0a032076 	and	w22, w3, w3, lsl #8
    1c88:	20760320 	.inst	0x20760320 ; undefined
    1c8c:	383c1f03 	.inst	0x383c1f03 ; undefined
    1c90:	4f242327 	.inst	0x4f242327 ; undefined
    1c94:	29212f26 	stp	w6, w11, [x25,#-248]
    1c98:	2e750325 	uaddl	v5.4s, v25.4h, v21.4h
    1c9c:	302e0e03 	adr	x3, 5de5d <_stack_size+0x5ce5d>
    1ca0:	213d241f 	.inst	0x213d241f ; undefined
    1ca4:	01000202 	.inst	0x01000202 ; undefined
    1ca8:	00031701 	.inst	0x00031701 ; undefined
    1cac:	47000200 	.inst	0x47000200 ; undefined
    1cb0:	04000001 	.inst	0x04000001 ; undefined
    1cb4:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    1cb8:	01010100 	.inst	0x01010100 ; undefined
    1cbc:	00000001 	.inst	0x00000001 ; undefined
    1cc0:	01000001 	.inst	0x01000001 ; undefined
    1cc4:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    1cc8:	652f3165 	.inst	0x652f3165 ; undefined
    1ccc:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    1cd0:	68735f6e 	.inst	0x68735f6e ; undefined
    1cd4:	742f6869 	.inst	0x742f6869 ; undefined
    1cd8:	2f726f68 	.inst	0x2f726f68 ; undefined
    1cdc:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    1ce0:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    1ce4:	54442f31 	.inst	0x54442f31 ; undefined
    1ce8:	6f425f45 	.inst	0x6f425f45 ; undefined
    1cec:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    1cf0:	622f6564 	.inst	0x622f6564 ; undefined
    1cf4:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    1cf8:	72732f2e 	.inst	0x72732f2e ; undefined
    1cfc:	72612f63 	.inst	0x72612f63 ; undefined
    1d00:	722f6863 	ands	w3, w3, #0xfffe0fff
    1d04:	74657365 	.inst	0x74657365 ; undefined
    1d08:	6f6f622f 	umlsl2	v15.4s, v17.8h, v15.h[2]
    1d0c:	63657674 	.inst	0x63657674 ; undefined
    1d10:	00726f74 	.inst	0x00726f74 ; undefined
    1d14:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    1d18:	652f3165 	.inst	0x652f3165 ; undefined
    1d1c:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    1d20:	68735f6e 	.inst	0x68735f6e ; undefined
    1d24:	742f6869 	.inst	0x742f6869 ; undefined
    1d28:	2f726f68 	.inst	0x2f726f68 ; undefined
    1d2c:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    1d30:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    1d34:	54442f31 	.inst	0x54442f31 ; undefined
    1d38:	6f425f45 	.inst	0x6f425f45 ; undefined
    1d3c:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    1d40:	622f6564 	.inst	0x622f6564 ; undefined
    1d44:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    1d48:	6d742f2e 	ldp	d14, d11, [x25,#-192]
    1d4c:	73612f70 	.inst	0x73612f70 ; undefined
    1d50:	34366b64 	cbz	w4, 6eabc <_stack_size+0x6dabc>
    1d54:	392e342d 	strb	w13, [x1,#2957]
    1d58:	612d332e 	.inst	0x612d332e ; undefined
    1d5c:	452d3335 	.inst	0x452d3335 ; undefined
    1d60:	2e332d4c 	uqsub	v12.8b, v10.8b, v19.8b
    1d64:	672d3031 	.inst	0x672d3031 ; undefined
    1d68:	39312e32 	strb	w18, [x17,#3147]
    1d6c:	3436612d 	cbz	w13, 6e990 <_stack_size+0x6d990>
    1d70:	312d746e 	adds	w14, w3, #0xb5d
    1d74:	31363035 	adds	w21, w1, #0xd8c
    1d78:	6e692f35 	uqsub	v21.8h, v25.8h, v9.8h
    1d7c:	64756c63 	.inst	0x64756c63 ; undefined
    1d80:	682f0065 	.inst	0x682f0065 ; undefined
    1d84:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    1d88:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    1d8c:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    1d90:	68696873 	.inst	0x68696873 ; undefined
    1d94:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    1d98:	72742f72 	.inst	0x72742f72 ; undefined
    1d9c:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    1da0:	2f312e38 	.inst	0x2f312e38 ; undefined
    1da4:	5f455444 	shl	d4, d2, #5
    1da8:	746f6f42 	.inst	0x746f6f42 ; undefined
    1dac:	65646f63 	.inst	0x65646f63 ; undefined
    1db0:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    1db4:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    1db8:	2f637273 	.inst	0x2f637273 ; undefined
    1dbc:	68637261 	.inst	0x68637261 ; undefined
    1dc0:	636e692f 	.inst	0x636e692f ; undefined
    1dc4:	6564756c 	.inst	0x6564756c ; undefined
    1dc8:	63720000 	.inst	0x63720000 ; undefined
    1dcc:	00632e70 	.inst	0x00632e70 ; undefined
    1dd0:	73000001 	.inst	0x73000001 ; undefined
    1dd4:	6e696474 	umax	v20.8h, v3.8h, v9.8h
    1dd8:	00682e74 	.inst	0x00682e74 ; undefined
    1ddc:	74000002 	.inst	0x74000002 ; undefined
    1de0:	64657079 	.inst	0x64657079 ; undefined
    1de4:	682e6665 	.inst	0x682e6665 ; undefined
    1de8:	00000300 	.inst	0x00000300 ; undefined
    1dec:	6c697475 	ldnp	d21, d29, [x3,#-368]
    1df0:	2e797469 	uabd	v9.4h, v3.4h, v25.4h
    1df4:	00030068 	.inst	0x00030068 ; undefined
    1df8:	09000000 	.inst	0x09000000 ; undefined
    1dfc:	0040b002 	.inst	0x0040b002 ; undefined
    1e00:	00000003 	.inst	0x00000003 ; undefined
    1e04:	02f40300 	.inst	0x02f40300 ; undefined
    1e08:	032f5101 	.inst	0x032f5101 ; undefined
    1e0c:	4e032037 	tbl	v23.16b, {v1.16b, v2.16b}, v3.16b
    1e10:	1f214958 	fnmadd	s24, s10, s1, s18
    1e14:	2e780321 	uaddl	v1.4s, v25.4h, v24.4h
    1e18:	032e1203 	.inst	0x032e1203 ; undefined
    1e1c:	1303586e 	sbfx	w14, w3, #3, #20
    1e20:	0200213c 	.inst	0x0200213c ; undefined
    1e24:	00230204 	.inst	0x00230204 ; NYI
    1e28:	1b020402 	madd	w2, w0, w2, w1
    1e2c:	032e0903 	.inst	0x032e0903 ; undefined
    1e30:	28032e64 	stnp	w4, w11, [x19,#24]
    1e34:	20760320 	.inst	0x20760320 ; undefined
    1e38:	20790325 	.inst	0x20790325 ; undefined
    1e3c:	21404122 	.inst	0x21404122 ; undefined
    1e40:	0a03211f 	and	wzr, w8, w3, lsl #8
    1e44:	00213d2e 	.inst	0x00213d2e ; NYI
    1e48:	3a020402 	.inst	0x3a020402 ; undefined
    1e4c:	02040200 	.inst	0x02040200 ; undefined
    1e50:	04020025 	.inst	0x04020025 ; undefined
    1e54:	21281b02 	.inst	0x21281b02 ; undefined
    1e58:	03585b03 	.inst	0x03585b03 ; undefined
    1e5c:	5a032e1f 	.inst	0x5a032e1f ; undefined
    1e60:	7dc7032e 	.inst	0x7dc7032e ; undefined
    1e64:	010b032e 	.inst	0x010b032e ; undefined
    1e68:	03207503 	.inst	0x03207503 ; undefined
    1e6c:	75032e0b 	.inst	0x75032e0b ; undefined
    1e70:	580b033c 	ldr	x28, 17ed4 <_stack_size+0x16ed4>
    1e74:	5a3b2f41 	.inst	0x5a3b2f41 ; undefined
    1e78:	221e222c 	.inst	0x221e222c ; undefined
    1e7c:	223d2f3b 	.inst	0x223d2f3b ; undefined
    1e80:	18083e22 	ldr	w2, 12644 <_stack_size+0x11644>
    1e84:	3d207a03 	str	b3, [x16,#2078]
    1e88:	033d2523 	.inst	0x033d2523 ; undefined
    1e8c:	0e032074 	tbl	v20.8b, {v3.16b, v4.16b}, v3.8b
    1e90:	62032574 	.inst	0x62032574 ; undefined
    1e94:	201e03ba 	.inst	0x201e03ba ; undefined
    1e98:	032e6d03 	.inst	0x032e6d03 ; undefined
    1e9c:	2603206a 	.inst	0x2603206a ; undefined
    1ea0:	2010032e 	.inst	0x2010032e ; undefined
    1ea4:	03010b03 	.inst	0x03010b03 ; undefined
    1ea8:	0b032075 	add	w21, w3, w3, lsl #8
    1eac:	3c75032e 	.inst	0x3c75032e ; undefined
    1eb0:	40580b03 	.inst	0x40580b03 ; undefined
    1eb4:	2c5a3b2f 	ldnp	s15, s14, [x25,#208]
    1eb8:	223d2f2f 	.inst	0x223d2f2f ; undefined
    1ebc:	18083e22 	ldr	w2, 12680 <_stack_size+0x11680>
    1ec0:	3d207a03 	str	b3, [x16,#2078]
    1ec4:	033d2523 	.inst	0x033d2523 ; undefined
    1ec8:	0e032074 	tbl	v20.8b, {v3.16b, v4.16b}, v3.8b
    1ecc:	63032574 	.inst	0x63032574 ; undefined
    1ed0:	201d03ba 	.inst	0x201d03ba ; undefined
    1ed4:	032e6d03 	.inst	0x032e6d03 ; undefined
    1ed8:	2503206b 	.inst	0x2503206b ; undefined
    1edc:	2010032e 	.inst	0x2010032e ; undefined
    1ee0:	2e090366 	ext	v6.8b, v27.8b, v9.8b, #0
    1ee4:	5a2d2f32 	.inst	0x5a2d2f32 ; undefined
    1ee8:	211f302c 	.inst	0x211f302c ; undefined
    1eec:	222f211f 	.inst	0x222f211f ; undefined
    1ef0:	2f026822 	.inst	0x2f026822 ; undefined
    1ef4:	3d262313 	str	b19, [x24,#2440]
    1ef8:	03207303 	.inst	0x03207303 ; undefined
    1efc:	0326580f 	.inst	0x0326580f ; undefined
    1f00:	09036658 	.inst	0x09036658 ; undefined
    1f04:	2e1b032e 	ext	v14.8b, v25.8b, v27.8b, #0
    1f08:	26201003 	.inst	0x26201003 ; undefined
    1f0c:	7a031d23 	.inst	0x7a031d23 ; undefined
    1f10:	7a032666 	.inst	0x7a032666 ; undefined
    1f14:	7a03264a 	.inst	0x7a03264a ; undefined
    1f18:	2b31502e 	adds	w14, w1, w17, uxtw #4
    1f1c:	26207a03 	.inst	0x26207a03 ; undefined
    1f20:	7a032a24 	.inst	0x7a032a24 ; undefined
    1f24:	7a032620 	.inst	0x7a032620 ; undefined
    1f28:	200b032e 	.inst	0x200b032e ; undefined
    1f2c:	2347e729 	.inst	0x2347e729 ; undefined
    1f30:	1c21691d 	ldr	s29, 44c50 <_stack_size+0x43c50>
    1f34:	22261b25 	.inst	0x22261b25 ; undefined
    1f38:	39af3e22 	ldrsb	x2, [x17,#3023]
    1f3c:	207a0326 	.inst	0x207a0326 ; undefined
    1f40:	20790327 	.inst	0x20790327 ; undefined
    1f44:	22132202 	.inst	0x22132202 ; undefined
    1f48:	27132a02 	.inst	0x27132a02 ; undefined
    1f4c:	20720359 	.inst	0x20720359 ; undefined
    1f50:	26581003 	.inst	0x26581003 ; undefined
    1f54:	03745b03 	.inst	0x03745b03 ; undefined
    1f58:	10032e21 	adr	x1, 851c <_stack_size+0x751c>
    1f5c:	23366620 	.inst	0x23366620 ; undefined
    1f60:	2b3f1da1 	.inst	0x2b3f1da1 ; undefined
    1f64:	1b252a32 	.inst	0x1b252a32 ; undefined
    1f68:	2b31294f 	adds	w15, w10, w17, uxth #2
    1f6c:	1d232baf 	.inst	0x1d232baf ; undefined
    1f70:	215b1c24 	.inst	0x215b1c24 ; undefined
    1f74:	2221331c 	.inst	0x2221331c ; undefined
    1f78:	2f026822 	.inst	0x2f026822 ; undefined
    1f7c:	3d262313 	str	b19, [x24,#2440]
    1f80:	03207303 	.inst	0x03207303 ; undefined
    1f84:	0326580f 	.inst	0x0326580f ; undefined
    1f88:	2103665f 	.inst	0x2103665f ; undefined
    1f8c:	66570320 	.inst	0x66570320 ; undefined
    1f90:	282e2503 	stnp	w3, w9, [x8,#-144]
    1f94:	034a0a03 	.inst	0x034a0a03 ; undefined
    1f98:	22242076 	.inst	0x22242076 ; undefined
    1f9c:	91832d3d 	.inst	0x91832d3d ; undefined
    1fa0:	21223d22 	.inst	0x21223d22 ; undefined
    1fa4:	0a034d21 	and	w1, w9, w3, lsl #19
    1fa8:	2e76032e 	uaddl	v14.4s, v25.4h, v22.4h
    1fac:	3122242e 	adds	w14, w1, #0x889
    1fb0:	9122212b 	add	x11, x9, #0x888
    1fb4:	21212291 	.inst	0x21212291 ; undefined
    1fb8:	4a00c503 	.inst	0x4a00c503 ; undefined
    1fbc:	02144e14 	.inst	0x02144e14 ; undefined
    1fc0:	01010004 	.inst	0x01010004 ; undefined
    1fc4:	000001a8 	.inst	0x000001a8 ; undefined
    1fc8:	01530002 	.inst	0x01530002 ; undefined
    1fcc:	01040000 	.inst	0x01040000 ; undefined
    1fd0:	000d0efb 	.inst	0x000d0efb ; undefined
    1fd4:	01010101 	.inst	0x01010101 ; undefined
    1fd8:	01000000 	.inst	0x01000000 ; undefined
    1fdc:	2f010000 	.inst	0x2f010000 ; undefined
    1fe0:	656d6f68 	.inst	0x656d6f68 ; undefined
    1fe4:	64652f31 	.inst	0x64652f31 ; undefined
    1fe8:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    1fec:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    1ff0:	68742f68 	.inst	0x68742f68 ; undefined
    1ff4:	742f726f 	.inst	0x742f726f ; undefined
    1ff8:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    1ffc:	312e382d 	adds	w13, w1, #0xb8e
    2000:	4554442f 	.inst	0x4554442f ; undefined
    2004:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    2008:	646f6374 	.inst	0x646f6374 ; undefined
    200c:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    2010:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    2014:	6372732f 	.inst	0x6372732f ; undefined
    2018:	6372612f 	.inst	0x6372612f ; undefined
    201c:	65722f68 	.inst	0x65722f68 ; undefined
    2020:	2f746573 	.inst	0x2f746573 ; undefined
    2024:	746f6f62 	.inst	0x746f6f62 ; undefined
    2028:	74636576 	.inst	0x74636576 ; undefined
    202c:	2f00726f 	.inst	0x2f00726f ; undefined
    2030:	656d6f68 	.inst	0x656d6f68 ; undefined
    2034:	64652f31 	.inst	0x64652f31 ; undefined
    2038:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    203c:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    2040:	68742f68 	.inst	0x68742f68 ; undefined
    2044:	742f726f 	.inst	0x742f726f ; undefined
    2048:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    204c:	312e382d 	adds	w13, w1, #0xb8e
    2050:	4554442f 	.inst	0x4554442f ; undefined
    2054:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    2058:	646f6374 	.inst	0x646f6374 ; undefined
    205c:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    2060:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    2064:	706d742f 	adr	x15, dceeb <_stack_size+0xdbeeb>
    2068:	6473612f 	.inst	0x6473612f ; undefined
    206c:	2d34366b 	stp	s11, s13, [x19,#-96]
    2070:	2e392e34 	uqsub	v20.8b, v17.8b, v25.8b
    2074:	35612d33 	cbnz	w19, c4618 <_stack_size+0xc3618>
    2078:	4c452d33 	.inst	0x4c452d33 ; undefined
    207c:	312e332d 	adds	w13, w25, #0xb8c
    2080:	32672d30 	.inst	0x32672d30 ; undefined
    2084:	2d39312e 	stp	s14, s12, [x9,#-56]
    2088:	6e343661 	cmhi	v1.16b, v19.16b, v20.16b
    208c:	35312d74 	cbnz	w20, 64638 <_stack_size+0x63638>
    2090:	35313630 	cbnz	w16, 64754 <_stack_size+0x63754>
    2094:	636e692f 	.inst	0x636e692f ; undefined
    2098:	6564756c 	.inst	0x6564756c ; undefined
    209c:	6f682f00 	.inst	0x6f682f00 ; undefined
    20a0:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
    20a4:	73696465 	.inst	0x73696465 ; undefined
    20a8:	735f6e6f 	.inst	0x735f6e6f ; undefined
    20ac:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
    20b0:	726f6874 	.inst	0x726f6874 ; undefined
    20b4:	7572742f 	.inst	0x7572742f ; undefined
    20b8:	382d6b6e 	strb	w14, [x27,x13]
    20bc:	442f312e 	.inst	0x442f312e ; undefined
    20c0:	425f4554 	.inst	0x425f4554 ; undefined
    20c4:	63746f6f 	.inst	0x63746f6f ; undefined
    20c8:	2f65646f 	.inst	0x2f65646f ; undefined
    20cc:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
    20d0:	732f2e2e 	.inst	0x732f2e2e ; undefined
    20d4:	612f6372 	.inst	0x612f6372 ; undefined
    20d8:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
    20dc:	6c636e69 	ldnp	d9, d27, [x19,#-464]
    20e0:	00656475 	.inst	0x00656475 ; undefined
    20e4:	676e7200 	.inst	0x676e7200 ; undefined
    20e8:	0100632e 	.inst	0x0100632e ; undefined
    20ec:	74730000 	.inst	0x74730000 ; undefined
    20f0:	746e6964 	.inst	0x746e6964 ; undefined
    20f4:	0200682e 	.inst	0x0200682e ; undefined
    20f8:	79740000 	ldrh	w0, [x0,#6656]
    20fc:	65646570 	.inst	0x65646570 ; undefined
    2100:	00682e66 	.inst	0x00682e66 ; undefined
    2104:	63000003 	.inst	0x63000003 ; undefined
    2108:	65686361 	.inst	0x65686361 ; undefined
    210c:	2e38765f 	uabd	v31.8b, v18.8b, v24.8b
    2110:	00030068 	.inst	0x00030068 ; undefined
    2114:	6d697400 	ldp	d0, d29, [x0,#-368]
    2118:	682e7265 	.inst	0x682e7265 ; undefined
    211c:	00000300 	.inst	0x00000300 ; undefined
    2120:	02090000 	.inst	0x02090000 ; undefined
    2124:	03004d34 	.inst	0x03004d34 ; undefined
    2128:	00000000 	.inst	0x00000000 ; undefined
    212c:	0100c003 	.inst	0x0100c003 ; undefined
    2130:	00212116 	.inst	0x00212116 ; NYI
    2134:	56020402 	.inst	0x56020402 ; undefined
    2138:	212e0e03 	.inst	0x212e0e03 ; undefined
    213c:	28207803 	stnp	w3, w30, [x0,#-256]
    2140:	17205e03 	b	fffffffffc81994c <SMC_ID_HW_RSA+0xffffffff78809a45>
    2144:	232c2f2f 	.inst	0x232c2f2f ; undefined
    2148:	3d3d212b 	str	b11, [x9,#3912]
    214c:	03212f3d 	.inst	0x03212f3d ; undefined
    2150:	212f201b 	.inst	0x212f201b ; undefined
    2154:	2e090321 	ext	v1.8b, v25.8b, v9.8b, #0
    2158:	2223303d 	.inst	0x2223303d ; undefined
    215c:	03223d68 	.inst	0x03223d68 ; undefined
    2160:	0b033c79 	add	w25, w3, w3, lsl #15
    2164:	0e034c66 	.inst	0x0e034c66 ; undefined
    2168:	02213d2e 	.inst	0x02213d2e ; undefined
    216c:	01010002 	.inst	0x01010002 ; undefined
    2170:	00000161 	.inst	0x00000161 ; undefined
    2174:	01020002 	.inst	0x01020002 ; undefined
    2178:	01040000 	.inst	0x01040000 ; undefined
    217c:	000d0efb 	.inst	0x000d0efb ; undefined
    2180:	01010101 	.inst	0x01010101 ; undefined
    2184:	01000000 	.inst	0x01000000 ; undefined
    2188:	2f010000 	.inst	0x2f010000 ; undefined
    218c:	656d6f68 	.inst	0x656d6f68 ; undefined
    2190:	64652f31 	.inst	0x64652f31 ; undefined
    2194:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    2198:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    219c:	68742f68 	.inst	0x68742f68 ; undefined
    21a0:	742f726f 	.inst	0x742f726f ; undefined
    21a4:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    21a8:	312e382d 	adds	w13, w1, #0xb8e
    21ac:	4554442f 	.inst	0x4554442f ; undefined
    21b0:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    21b4:	646f6374 	.inst	0x646f6374 ; undefined
    21b8:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    21bc:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    21c0:	6372732f 	.inst	0x6372732f ; undefined
    21c4:	6372612f 	.inst	0x6372612f ; undefined
    21c8:	65722f68 	.inst	0x65722f68 ; undefined
    21cc:	2f746573 	.inst	0x2f746573 ; undefined
    21d0:	746f6f62 	.inst	0x746f6f62 ; undefined
    21d4:	74636576 	.inst	0x74636576 ; undefined
    21d8:	2f00726f 	.inst	0x2f00726f ; undefined
    21dc:	656d6f68 	.inst	0x656d6f68 ; undefined
    21e0:	64652f31 	.inst	0x64652f31 ; undefined
    21e4:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    21e8:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    21ec:	68742f68 	.inst	0x68742f68 ; undefined
    21f0:	742f726f 	.inst	0x742f726f ; undefined
    21f4:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    21f8:	312e382d 	adds	w13, w1, #0xb8e
    21fc:	4554442f 	.inst	0x4554442f ; undefined
    2200:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    2204:	646f6374 	.inst	0x646f6374 ; undefined
    2208:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    220c:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    2210:	6372732f 	.inst	0x6372732f ; undefined
    2214:	6372612f 	.inst	0x6372612f ; undefined
    2218:	6e692f68 	uqsub	v8.8h, v27.8h, v9.8h
    221c:	64756c63 	.inst	0x64756c63 ; undefined
    2220:	73000065 	.inst	0x73000065 ; undefined
    2224:	625f7363 	.inst	0x625f7363 ; undefined
    2228:	61746f6f 	.inst	0x61746f6f ; undefined
    222c:	79617272 	ldrh	w18, [x19,#4280]
    2230:	5f77665f 	.inst	0x5f77665f ; undefined
    2234:	6c626174 	ldnp	d20, d24, [x11,#-480]
    2238:	00632e65 	.inst	0x00632e65 ; undefined
    223c:	62000001 	.inst	0x62000001 ; undefined
    2240:	61746f6f 	.inst	0x61746f6f ; undefined
    2244:	79617272 	ldrh	w18, [x19,#4280]
    2248:	5f77665f 	.inst	0x5f77665f ; undefined
    224c:	6c626174 	ldnp	d20, d24, [x11,#-480]
    2250:	00682e65 	.inst	0x00682e65 ; undefined
    2254:	64000002 	.inst	0x64000002 ; undefined
    2258:	6e697270 	uabdl2	v16.4s, v19.8h, v9.8h
    225c:	682e6674 	.inst	0x682e6674 ; undefined
    2260:	00000200 	.inst	0x00000200 ; undefined
    2264:	6c697475 	ldnp	d21, d29, [x3,#-368]
    2268:	2e797469 	uabd	v9.4h, v3.4h, v25.4h
    226c:	00020068 	.inst	0x00020068 ; undefined
    2270:	72617500 	.inst	0x72617500 ; undefined
    2274:	00682e74 	.inst	0x00682e74 ; undefined
    2278:	00000002 	.inst	0x00000002 ; undefined
    227c:	74020900 	.inst	0x74020900 ; undefined
    2280:	0003004e 	.inst	0x0003004e ; undefined
    2284:	03000000 	.inst	0x03000000 ; undefined
    2288:	130101ec 	sbfiz	w12, w15, #31, #1
    228c:	8b716a25 	.inst	0x8b716a25 ; undefined
    2290:	4a7fbb03 	.inst	0x4a7fbb03 ; undefined
    2294:	1d252c14 	.inst	0x1d252c14 ; undefined
    2298:	900c0323 	adrp	x3, 18066000 <_stack_base+0x15058880>
    229c:	04020034 	.inst	0x04020034 ; undefined
    22a0:	3c750302 	.inst	0x3c750302 ; undefined
    22a4:	03453130 	.inst	0x03453130 ; undefined
    22a8:	4b833c15 	sub	w21, w0, w3, asr #15
    22ac:	2e73036a 	uaddl	v10.4s, v27.4h, v19.4h
    22b0:	312e0a03 	adds	w3, w16, #0xb82
    22b4:	2e65031d 	uaddl	v29.4s, v24.4h, v5.4h
    22b8:	32202103 	orr	w3, w8, #0x1ff
    22bc:	02040200 	.inst	0x02040200 ; undefined
    22c0:	23493e6a 	.inst	0x23493e6a ; undefined
    22c4:	231d231d 	.inst	0x231d231d ; undefined
    22c8:	ae392830 	.inst	0xae392830 ; undefined
    22cc:	3c6f0321 	.inst	0x3c6f0321 ; undefined
    22d0:	01000202 	.inst	0x01000202 ; undefined
    22d4:	00028e01 	.inst	0x00028e01 ; undefined
    22d8:	cf000200 	.inst	0xcf000200 ; undefined
    22dc:	04000001 	.inst	0x04000001 ; undefined
    22e0:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    22e4:	01010100 	.inst	0x01010100 ; undefined
    22e8:	00000001 	.inst	0x00000001 ; undefined
    22ec:	01000001 	.inst	0x01000001 ; undefined
    22f0:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    22f4:	652f3165 	.inst	0x652f3165 ; undefined
    22f8:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    22fc:	68735f6e 	.inst	0x68735f6e ; undefined
    2300:	742f6869 	.inst	0x742f6869 ; undefined
    2304:	2f726f68 	.inst	0x2f726f68 ; undefined
    2308:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    230c:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    2310:	54442f31 	.inst	0x54442f31 ; undefined
    2314:	6f425f45 	.inst	0x6f425f45 ; undefined
    2318:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    231c:	622f6564 	.inst	0x622f6564 ; undefined
    2320:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    2324:	72732f2e 	.inst	0x72732f2e ; undefined
    2328:	72612f63 	.inst	0x72612f63 ; undefined
    232c:	722f6863 	ands	w3, w3, #0xfffe0fff
    2330:	74657365 	.inst	0x74657365 ; undefined
    2334:	6f6f622f 	umlsl2	v15.4s, v17.8h, v15.h[2]
    2338:	63657674 	.inst	0x63657674 ; undefined
    233c:	00726f74 	.inst	0x00726f74 ; undefined
    2340:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    2344:	652f3165 	.inst	0x652f3165 ; undefined
    2348:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    234c:	68735f6e 	.inst	0x68735f6e ; undefined
    2350:	742f6869 	.inst	0x742f6869 ; undefined
    2354:	2f726f68 	.inst	0x2f726f68 ; undefined
    2358:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    235c:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    2360:	54442f31 	.inst	0x54442f31 ; undefined
    2364:	6f425f45 	.inst	0x6f425f45 ; undefined
    2368:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    236c:	622f6564 	.inst	0x622f6564 ; undefined
    2370:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    2374:	6d742f2e 	ldp	d14, d11, [x25,#-192]
    2378:	73612f70 	.inst	0x73612f70 ; undefined
    237c:	34366b64 	cbz	w4, 6f0e8 <_stack_size+0x6e0e8>
    2380:	392e342d 	strb	w13, [x1,#2957]
    2384:	612d332e 	.inst	0x612d332e ; undefined
    2388:	452d3335 	.inst	0x452d3335 ; undefined
    238c:	2e332d4c 	uqsub	v12.8b, v10.8b, v19.8b
    2390:	672d3031 	.inst	0x672d3031 ; undefined
    2394:	39312e32 	strb	w18, [x17,#3147]
    2398:	3436612d 	cbz	w13, 6efbc <_stack_size+0x6dfbc>
    239c:	312d746e 	adds	w14, w3, #0xb5d
    23a0:	31363035 	adds	w21, w1, #0xd8c
    23a4:	6e692f35 	uqsub	v21.8h, v25.8h, v9.8h
    23a8:	64756c63 	.inst	0x64756c63 ; undefined
    23ac:	682f0065 	.inst	0x682f0065 ; undefined
    23b0:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    23b4:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    23b8:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    23bc:	68696873 	.inst	0x68696873 ; undefined
    23c0:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    23c4:	72742f72 	.inst	0x72742f72 ; undefined
    23c8:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    23cc:	2f312e38 	.inst	0x2f312e38 ; undefined
    23d0:	5f455444 	shl	d4, d2, #5
    23d4:	746f6f42 	.inst	0x746f6f42 ; undefined
    23d8:	65646f63 	.inst	0x65646f63 ; undefined
    23dc:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    23e0:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    23e4:	2f637273 	.inst	0x2f637273 ; undefined
    23e8:	68637261 	.inst	0x68637261 ; undefined
    23ec:	636e692f 	.inst	0x636e692f ; undefined
    23f0:	6564756c 	.inst	0x6564756c ; undefined
    23f4:	63730000 	.inst	0x63730000 ; undefined
    23f8:	6f625f73 	.inst	0x6f625f73 ; undefined
    23fc:	632e746f 	.inst	0x632e746f ; undefined
    2400:	00000100 	.inst	0x00000100 ; undefined
    2404:	69647473 	ldpsw	x19, x29, [x3,#-224]
    2408:	682e746e 	.inst	0x682e746e ; undefined
    240c:	00000200 	.inst	0x00000200 ; undefined
    2410:	65707974 	.inst	0x65707974 ; undefined
    2414:	2e666564 	umax	v4.4h, v11.4h, v6.4h
    2418:	00030068 	.inst	0x00030068 ; undefined
    241c:	636f6e00 	.inst	0x636f6e00 ; undefined
    2420:	00682e73 	.inst	0x00682e73 ; undefined
    2424:	68000003 	.inst	0x68000003 ; undefined
    2428:	73725f77 	.inst	0x73725f77 ; undefined
    242c:	00682e61 	.inst	0x00682e61 ; undefined
    2430:	3c000003 	stur	b3, [x0]
    2434:	6c697562 	ldnp	d2, d29, [x11,#-368]
    2438:	6e692d74 	uqsub	v20.8h, v11.8h, v9.8h
    243c:	0000003e 	.inst	0x0000003e ; undefined
    2440:	70746f00 	adr	x0, eb223 <_stack_size+0xea223>
    2444:	0300682e 	.inst	0x0300682e ; undefined
    2448:	65760000 	.inst	0x65760000 ; undefined
    244c:	79666972 	ldrh	w18, [x11,#4916]
    2450:	676d695f 	.inst	0x676d695f ; undefined
    2454:	0300682e 	.inst	0x0300682e ; undefined
    2458:	63730000 	.inst	0x63730000 ; undefined
    245c:	6f625f73 	.inst	0x6f625f73 ; undefined
    2460:	735f746f 	.inst	0x735f746f ; undefined
    2464:	682e6970 	.inst	0x682e6970 ; undefined
    2468:	00000300 	.inst	0x00000300 ; undefined
    246c:	5f736373 	.inst	0x5f736373 ; undefined
    2470:	746f6f62 	.inst	0x746f6f62 ; undefined
    2474:	6d6d655f 	ldp	d31, d25, [x10,#-304]
    2478:	00682e63 	.inst	0x00682e63 ; undefined
    247c:	73000003 	.inst	0x73000003 ; undefined
    2480:	625f7363 	.inst	0x625f7363 ; undefined
    2484:	5f746f6f 	.inst	0x5f746f6f ; undefined
    2488:	646e616e 	.inst	0x646e616e ; undefined
    248c:	0300682e 	.inst	0x0300682e ; undefined
    2490:	74750000 	.inst	0x74750000 ; undefined
    2494:	74696c69 	.inst	0x74696c69 ; undefined
    2498:	00682e79 	.inst	0x00682e79 ; undefined
    249c:	73000003 	.inst	0x73000003 ; undefined
    24a0:	635f636d 	.inst	0x635f636d ; undefined
    24a4:	2e6c6c61 	umin	v1.4h, v3.4h, v12.4h
    24a8:	00030068 	.inst	0x00030068 ; undefined
    24ac:	09000000 	.inst	0x09000000 ; undefined
    24b0:	00507402 	.inst	0x00507402 ; undefined
    24b4:	00000003 	.inst	0x00000003 ; undefined
    24b8:	01e20300 	.inst	0x01e20300 ; undefined
    24bc:	78032801 	sttrh	w1, [x0,#50]
    24c0:	26032720 	.inst	0x26032720 ; undefined
    24c4:	222c3020 	.inst	0x222c3020 ; undefined
    24c8:	205f0330 	.inst	0x205f0330 ; undefined
    24cc:	03202003 	.inst	0x03202003 ; undefined
    24d0:	2403205d 	.inst	0x2403205d ; undefined
    24d4:	205d0320 	.inst	0x205d0320 ; undefined
    24d8:	03202303 	.inst	0x03202303 ; undefined
    24dc:	221f205d 	.inst	0x221f205d ; undefined
    24e0:	502e0d03 	adr	x3, 5e682 <_stack_size+0x5d682>
    24e4:	0322223a 	.inst	0x0322223a ; undefined
    24e8:	03282077 	.inst	0x03282077 ; undefined
    24ec:	0f032072 	.inst	0x0f032072 ; undefined
    24f0:	20720320 	.inst	0x20720320 ; undefined
    24f4:	03200e03 	.inst	0x03200e03 ; undefined
    24f8:	261f2072 	.inst	0x261f2072 ; undefined
    24fc:	3c7ecd03 	.inst	0x3c7ecd03 ; undefined
    2500:	03200b03 	.inst	0x03200b03 ; undefined
    2504:	0b032075 	add	w21, w3, w3, lsl #8
    2508:	2a036720 	orr	w0, w25, w3, lsl #25
    250c:	4a5d0320 	eor	w0, w25, w29, lsr #0
    2510:	241c2545 	.inst	0x241c2545 ; undefined
    2514:	03900b03 	.inst	0x03900b03 ; undefined
    2518:	0b032e77 	add	w23, w19, w3, lsl #11
    251c:	834b2420 	.inst	0x834b2420 ; undefined
    2520:	21243d25 	.inst	0x21243d25 ; undefined
    2524:	21666a03 	.inst	0x21666a03 ; undefined
    2528:	2e03211c 	ext	v28.8b, v8.8b, v3.8b, #4
    252c:	200e0320 	.inst	0x200e0320 ; undefined
    2530:	254a7203 	.inst	0x254a7203 ; undefined
    2534:	03200903 	.inst	0x03200903 ; undefined
    2538:	35039e0b 	cbnz	w11, 98f8 <_stack_size+0x88f8>
    253c:	3c450320 	ldur	b0, [x25,#80]
    2540:	5c4d2536 	ldr	d22, 9c9e4 <_stack_size+0x9b9e4>
    2544:	213b214d 	.inst	0x213b214d ; undefined
    2548:	1f5d284c 	fmadd	d12, d2, d29, d10
    254c:	222c1f23 	.inst	0x222c1f23 ; undefined
    2550:	21215721 	.inst	0x21215721 ; undefined
    2554:	242f2f25 	.inst	0x242f2f25 ; undefined
    2558:	2f584803 	mls	v3.4h, v0.4h, v8.h[5]
    255c:	18032f25 	ldr	w5, 8b40 <_stack_size+0x7b40>
    2560:	02023e20 	.inst	0x02023e20 ; undefined
    2564:	46010100 	.inst	0x46010100 ; undefined
    2568:	02000002 	.inst	0x02000002 ; undefined
    256c:	00019900 	.inst	0x00019900 ; undefined
    2570:	fb010400 	.inst	0xfb010400 ; undefined
    2574:	01000d0e 	.inst	0x01000d0e ; undefined
    2578:	00010101 	.inst	0x00010101 ; undefined
    257c:	00010000 	.inst	0x00010000 ; undefined
    2580:	682f0100 	.inst	0x682f0100 ; undefined
    2584:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    2588:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    258c:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    2590:	68696873 	.inst	0x68696873 ; undefined
    2594:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    2598:	72742f72 	.inst	0x72742f72 ; undefined
    259c:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    25a0:	2f312e38 	.inst	0x2f312e38 ; undefined
    25a4:	5f455444 	shl	d4, d2, #5
    25a8:	746f6f42 	.inst	0x746f6f42 ; undefined
    25ac:	65646f63 	.inst	0x65646f63 ; undefined
    25b0:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    25b4:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    25b8:	2f637273 	.inst	0x2f637273 ; undefined
    25bc:	68637261 	.inst	0x68637261 ; undefined
    25c0:	7365722f 	.inst	0x7365722f ; undefined
    25c4:	622f7465 	.inst	0x622f7465 ; undefined
    25c8:	76746f6f 	.inst	0x76746f6f ; undefined
    25cc:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
    25d0:	682f0072 	.inst	0x682f0072 ; undefined
    25d4:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    25d8:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    25dc:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    25e0:	68696873 	.inst	0x68696873 ; undefined
    25e4:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    25e8:	72742f72 	.inst	0x72742f72 ; undefined
    25ec:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    25f0:	2f312e38 	.inst	0x2f312e38 ; undefined
    25f4:	5f455444 	shl	d4, d2, #5
    25f8:	746f6f42 	.inst	0x746f6f42 ; undefined
    25fc:	65646f63 	.inst	0x65646f63 ; undefined
    2600:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    2604:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    2608:	2f706d74 	.inst	0x2f706d74 ; undefined
    260c:	6b647361 	.inst	0x6b647361 ; undefined
    2610:	342d3436 	cbz	w22, 5cc94 <_stack_size+0x5bc94>
    2614:	332e392e 	.inst	0x332e392e ; undefined
    2618:	3335612d 	.inst	0x3335612d ; undefined
    261c:	2d4c452d 	ldp	s13, s17, [x9,#96]
    2620:	30312e33 	adr	x19, 64be5 <_stack_size+0x63be5>
    2624:	2e32672d 	umax	v13.8b, v25.8b, v18.8b
    2628:	612d3931 	.inst	0x612d3931 ; undefined
    262c:	746e3436 	.inst	0x746e3436 ; undefined
    2630:	3035312d 	adr	x13, 6cc55 <_stack_size+0x6bc55>
    2634:	2f353136 	.inst	0x2f353136 ; undefined
    2638:	6c636e69 	ldnp	d9, d27, [x19,#-464]
    263c:	00656475 	.inst	0x00656475 ; undefined
    2640:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    2644:	652f3165 	.inst	0x652f3165 ; undefined
    2648:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    264c:	68735f6e 	.inst	0x68735f6e ; undefined
    2650:	742f6869 	.inst	0x742f6869 ; undefined
    2654:	2f726f68 	.inst	0x2f726f68 ; undefined
    2658:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    265c:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    2660:	54442f31 	.inst	0x54442f31 ; undefined
    2664:	6f425f45 	.inst	0x6f425f45 ; undefined
    2668:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    266c:	622f6564 	.inst	0x622f6564 ; undefined
    2670:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    2674:	72732f2e 	.inst	0x72732f2e ; undefined
    2678:	72612f63 	.inst	0x72612f63 ; undefined
    267c:	692f6863 	.inst	0x692f6863 ; undefined
    2680:	756c636e 	.inst	0x756c636e ; undefined
    2684:	00006564 	.inst	0x00006564 ; undefined
    2688:	5f736373 	.inst	0x5f736373 ; undefined
    268c:	746f6f62 	.inst	0x746f6f62 ; undefined
    2690:	6d6d655f 	ldp	d31, d25, [x10,#-304]
    2694:	00632e63 	.inst	0x00632e63 ; undefined
    2698:	73000001 	.inst	0x73000001 ; undefined
    269c:	6e696474 	umax	v20.8h, v3.8h, v9.8h
    26a0:	00682e74 	.inst	0x00682e74 ; undefined
    26a4:	74000002 	.inst	0x74000002 ; undefined
    26a8:	64657079 	.inst	0x64657079 ; undefined
    26ac:	682e6665 	.inst	0x682e6665 ; undefined
    26b0:	00000300 	.inst	0x00000300 ; undefined
    26b4:	636d6d65 	.inst	0x636d6d65 ; undefined
    26b8:	73706f5f 	.inst	0x73706f5f ; undefined
    26bc:	0300682e 	.inst	0x0300682e ; undefined
    26c0:	6f620000 	mla	v0.8h, v0.8h, v2.h[2]
    26c4:	7261746f 	.inst	0x7261746f ; undefined
    26c8:	5f796172 	.inst	0x5f796172 ; undefined
    26cc:	745f7766 	.inst	0x745f7766 ; undefined
    26d0:	656c6261 	.inst	0x656c6261 ; undefined
    26d4:	0300682e 	.inst	0x0300682e ; undefined
    26d8:	6f6e0000 	mla	v0.8h, v0.8h, v14.h[2]
    26dc:	682e7363 	.inst	0x682e7363 ; undefined
    26e0:	00000300 	.inst	0x00000300 ; undefined
    26e4:	5f736373 	.inst	0x5f736373 ; undefined
    26e8:	746f6f62 	.inst	0x746f6f62 ; undefined
    26ec:	0300682e 	.inst	0x0300682e ; undefined
    26f0:	61750000 	.inst	0x61750000 ; undefined
    26f4:	682e7472 	.inst	0x682e7472 ; undefined
    26f8:	00000300 	.inst	0x00000300 ; undefined
    26fc:	6c697475 	ldnp	d21, d29, [x3,#-368]
    2700:	2e797469 	uabd	v9.4h, v3.4h, v25.4h
    2704:	00030068 	.inst	0x00030068 ; undefined
    2708:	09000000 	.inst	0x09000000 ; undefined
    270c:	00537802 	.inst	0x00537802 ; undefined
    2710:	00000003 	.inst	0x00000003 ; undefined
    2714:	01ec0300 	.inst	0x01ec0300 ; undefined
    2718:	3c090301 	stur	b1, [x24,#144]
    271c:	352e7703 	cbnz	w3, 5f5fc <_stack_size+0x5e5fc>
    2720:	202e7903 	.inst	0x202e7903 ; undefined
    2724:	2f2f2135 	.inst	0x2f2f2135 ; undefined
    2728:	2f2f2f2f 	.inst	0x2f2f2f2f ; undefined
    272c:	032f3f2f 	.inst	0x032f3f2f ; undefined
    2730:	6703201c 	.inst	0x6703201c ; undefined
    2734:	206c0358 	.inst	0x206c0358 ; undefined
    2738:	03201403 	.inst	0x03201403 ; undefined
    273c:	1803206b 	ldr	w11, 8b48 <_stack_size+0x7b48>
    2740:	20090320 	.inst	0x20090320 ; undefined
    2744:	0324593e 	.inst	0x0324593e ; undefined
    2748:	0367ac72 	.inst	0x0367ac72 ; undefined
    274c:	032e7efc 	.inst	0x032e7efc ; undefined
    2750:	1203206e 	and	w14, w3, #0xe000003f
    2754:	019b032e 	.inst	0x019b032e ; undefined
    2758:	7f8b032e 	.inst	0x7f8b032e ; undefined
    275c:	00f90320 	.inst	0x00f90320 ; undefined
    2760:	031e2258 	.inst	0x031e2258 ; undefined
    2764:	0322200c 	.inst	0x0322200c ; undefined
    2768:	c9207ec8 	.inst	0xc9207ec8 ; undefined
    276c:	9391913d 	.inst	0x9391913d ; undefined
    2770:	03582a03 	.inst	0x03582a03 ; undefined
    2774:	a4033c56 	.inst	0xa4033c56 ; undefined
    2778:	03212001 	.inst	0x03212001 ; undefined
    277c:	032e7f9e 	.inst	0x032e7f9e ; undefined
    2780:	1303206d 	sbfx	w13, w3, #3, #6
    2784:	00dc032e 	.inst	0x00dc032e ; undefined
    2788:	204a033c 	.inst	0x204a033c ; undefined
    278c:	22663a03 	.inst	0x22663a03 ; undefined
    2790:	200c031e 	.inst	0x200c031e ; undefined
    2794:	7f860322 	.inst	0x7f860322 ; undefined
    2798:	913dd72e 	add	x14, x25, #0xf75
    279c:	1f219391 	fnmsub	s17, s28, s1, s4
    27a0:	3c2a0321 	.inst	0x3c2a0321 ; undefined
    27a4:	034a5603 	.inst	0x034a5603 ; undefined
    27a8:	212000e5 	.inst	0x212000e5 ; undefined
    27ac:	01000202 	.inst	0x01000202 ; undefined
    27b0:	00026a01 	.inst	0x00026a01 ; undefined
    27b4:	b0000200 	adrp	x0, 43000 <_stack_size+0x42000>
    27b8:	04000001 	.inst	0x04000001 ; undefined
    27bc:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    27c0:	01010100 	.inst	0x01010100 ; undefined
    27c4:	00000001 	.inst	0x00000001 ; undefined
    27c8:	01000001 	.inst	0x01000001 ; undefined
    27cc:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    27d0:	652f3165 	.inst	0x652f3165 ; undefined
    27d4:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    27d8:	68735f6e 	.inst	0x68735f6e ; undefined
    27dc:	742f6869 	.inst	0x742f6869 ; undefined
    27e0:	2f726f68 	.inst	0x2f726f68 ; undefined
    27e4:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    27e8:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    27ec:	54442f31 	.inst	0x54442f31 ; undefined
    27f0:	6f425f45 	.inst	0x6f425f45 ; undefined
    27f4:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    27f8:	622f6564 	.inst	0x622f6564 ; undefined
    27fc:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    2800:	72732f2e 	.inst	0x72732f2e ; undefined
    2804:	72612f63 	.inst	0x72612f63 ; undefined
    2808:	722f6863 	ands	w3, w3, #0xfffe0fff
    280c:	74657365 	.inst	0x74657365 ; undefined
    2810:	6f6f622f 	umlsl2	v15.4s, v17.8h, v15.h[2]
    2814:	63657674 	.inst	0x63657674 ; undefined
    2818:	00726f74 	.inst	0x00726f74 ; undefined
    281c:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    2820:	652f3165 	.inst	0x652f3165 ; undefined
    2824:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    2828:	68735f6e 	.inst	0x68735f6e ; undefined
    282c:	742f6869 	.inst	0x742f6869 ; undefined
    2830:	2f726f68 	.inst	0x2f726f68 ; undefined
    2834:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    2838:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    283c:	54442f31 	.inst	0x54442f31 ; undefined
    2840:	6f425f45 	.inst	0x6f425f45 ; undefined
    2844:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    2848:	622f6564 	.inst	0x622f6564 ; undefined
    284c:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    2850:	6d742f2e 	ldp	d14, d11, [x25,#-192]
    2854:	73612f70 	.inst	0x73612f70 ; undefined
    2858:	34366b64 	cbz	w4, 6f5c4 <_stack_size+0x6e5c4>
    285c:	392e342d 	strb	w13, [x1,#2957]
    2860:	612d332e 	.inst	0x612d332e ; undefined
    2864:	452d3335 	.inst	0x452d3335 ; undefined
    2868:	2e332d4c 	uqsub	v12.8b, v10.8b, v19.8b
    286c:	672d3031 	.inst	0x672d3031 ; undefined
    2870:	39312e32 	strb	w18, [x17,#3147]
    2874:	3436612d 	cbz	w13, 6f498 <_stack_size+0x6e498>
    2878:	312d746e 	adds	w14, w3, #0xb5d
    287c:	31363035 	adds	w21, w1, #0xd8c
    2880:	6e692f35 	uqsub	v21.8h, v25.8h, v9.8h
    2884:	64756c63 	.inst	0x64756c63 ; undefined
    2888:	682f0065 	.inst	0x682f0065 ; undefined
    288c:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    2890:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    2894:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    2898:	68696873 	.inst	0x68696873 ; undefined
    289c:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    28a0:	72742f72 	.inst	0x72742f72 ; undefined
    28a4:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    28a8:	2f312e38 	.inst	0x2f312e38 ; undefined
    28ac:	5f455444 	shl	d4, d2, #5
    28b0:	746f6f42 	.inst	0x746f6f42 ; undefined
    28b4:	65646f63 	.inst	0x65646f63 ; undefined
    28b8:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    28bc:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    28c0:	2f637273 	.inst	0x2f637273 ; undefined
    28c4:	68637261 	.inst	0x68637261 ; undefined
    28c8:	636e692f 	.inst	0x636e692f ; undefined
    28cc:	6564756c 	.inst	0x6564756c ; undefined
    28d0:	63730000 	.inst	0x63730000 ; undefined
    28d4:	6f625f73 	.inst	0x6f625f73 ; undefined
    28d8:	6e5f746f 	.inst	0x6e5f746f ; undefined
    28dc:	2e646e61 	umin	v1.4h, v19.4h, v4.4h
    28e0:	00010063 	.inst	0x00010063 ; undefined
    28e4:	64747300 	.inst	0x64747300 ; undefined
    28e8:	2e746e69 	umin	v9.4h, v19.4h, v20.4h
    28ec:	00020068 	.inst	0x00020068 ; undefined
    28f0:	70797400 	adr	x0, f5773 <_stack_size+0xf4773>
    28f4:	66656465 	.inst	0x66656465 ; undefined
    28f8:	0300682e 	.inst	0x0300682e ; undefined
    28fc:	6f620000 	mla	v0.8h, v0.8h, v2.h[2]
    2900:	7261746f 	.inst	0x7261746f ; undefined
    2904:	5f796172 	.inst	0x5f796172 ; undefined
    2908:	745f7766 	.inst	0x745f7766 ; undefined
    290c:	656c6261 	.inst	0x656c6261 ; undefined
    2910:	0300682e 	.inst	0x0300682e ; undefined
    2914:	6f6e0000 	mla	v0.8h, v0.8h, v14.h[2]
    2918:	682e7363 	.inst	0x682e7363 ; undefined
    291c:	00000300 	.inst	0x00000300 ; undefined
    2920:	646e616e 	.inst	0x646e616e ; undefined
    2924:	73706f5f 	.inst	0x73706f5f ; undefined
    2928:	0300682e 	.inst	0x0300682e ; undefined
    292c:	63730000 	.inst	0x63730000 ; undefined
    2930:	6f625f73 	.inst	0x6f625f73 ; undefined
    2934:	682e746f 	.inst	0x682e746f ; undefined
    2938:	00000300 	.inst	0x00000300 ; undefined
    293c:	6c697475 	ldnp	d21, d29, [x3,#-368]
    2940:	2e797469 	uabd	v9.4h, v3.4h, v25.4h
    2944:	00030068 	.inst	0x00030068 ; undefined
    2948:	616c6600 	.inst	0x616c6600 ; undefined
    294c:	6e5f6873 	.inst	0x6e5f6873 ; undefined
    2950:	5f646e61 	.inst	0x5f646e61 ; undefined
    2954:	6f79616c 	umlsl2	v12.4s, v11.8h, v9.h[3]
    2958:	682e7475 	.inst	0x682e7475 ; undefined
    295c:	00000300 	.inst	0x00000300 ; undefined
    2960:	74726175 	.inst	0x74726175 ; undefined
    2964:	0300682e 	.inst	0x0300682e ; undefined
    2968:	00000000 	.inst	0x00000000 ; undefined
    296c:	56e40209 	.inst	0x56e40209 ; undefined
    2970:	00000300 	.inst	0x00000300 ; undefined
    2974:	eb030000 	subs	x0, x0, x3
    2978:	34660101 	cbz	w1, ce998 <_stack_size+0xcd998>
    297c:	207ed203 	.inst	0x207ed203 ; undefined
    2980:	2e01b003 	.inst	0x2e01b003 ; undefined
    2984:	2f2d2135 	.inst	0x2f2d2135 ; undefined
    2988:	2e75032f 	uaddl	v15.4s, v25.4h, v21.4h
    298c:	22201703 	.inst	0x22201703 ; undefined
    2990:	22206703 	.inst	0x22206703 ; undefined
    2994:	207ed003 	.inst	0x207ed003 ; undefined
    2998:	3c01b003 	stur	b3, [x0,#27]
    299c:	207ed003 	.inst	0x207ed003 ; undefined
    29a0:	2001b003 	.inst	0x2001b003 ; undefined
    29a4:	01040200 	.inst	0x01040200 ; undefined
    29a8:	03062e06 	.inst	0x03062e06 ; undefined
    29ac:	03207ed0 	.inst	0x03207ed0 ; undefined
    29b0:	032e01b4 	.inst	0x032e01b4 ; undefined
    29b4:	b5032017 	cbnz	x23, 8db4 <_stack_size+0x7db4>
    29b8:	c303587e 	.inst	0xc303587e ; undefined
    29bc:	03246601 	.inst	0x03246601 ; undefined
    29c0:	17032067 	b	fffffffffc0cab5c <SMC_ID_HW_RSA+0xffffffff780bac55>
    29c4:	20690320 	.inst	0x20690320 ; undefined
    29c8:	21201c03 	.inst	0x21201c03 ; undefined
    29cc:	03586f03 	.inst	0x03586f03 ; undefined
    29d0:	ef032011 	.inst	0xef032011 ; undefined
    29d4:	6003587e 	.inst	0x6003587e ; undefined
    29d8:	1e033020 	.inst	0x1e033020 ; undefined
    29dc:	2e670320 	uaddl	v0.4s, v25.4h, v7.4h
    29e0:	031b2529 	.inst	0x031b2529 ; undefined
    29e4:	0321200e 	.inst	0x0321200e ; undefined
    29e8:	03252e71 	.inst	0x03252e71 ; undefined
    29ec:	2d2f2009 	stp	s9, s8, [x0,#-136]
    29f0:	38032f21 	strb	w1, [x25,#50]!
    29f4:	4c032120 	.inst	0x4c032120 ; undefined
    29f8:	213b214a 	.inst	0x213b214a ; undefined
    29fc:	7400c803 	.inst	0x7400c803 ; undefined
    2a00:	29207403 	stp	w3, w29, [x0,#-256]
    2a04:	032e1103 	.inst	0x032e1103 ; undefined
    2a08:	0c032074 	.inst	0x0c032074 ; undefined
    2a0c:	20740320 	.inst	0x20740320 ; undefined
    2a10:	2127241c 	.inst	0x2127241c ; undefined
    2a14:	2d03211f 	stp	s31, s8, [x8,#24]
    2a18:	04022f4a 	.inst	0x04022f4a ; undefined
    2a1c:	c4010100 	.inst	0xc4010100 ; undefined
    2a20:	02000001 	.inst	0x02000001 ; undefined
    2a24:	00018000 	.inst	0x00018000 ; undefined
    2a28:	fb010400 	.inst	0xfb010400 ; undefined
    2a2c:	01000d0e 	.inst	0x01000d0e ; undefined
    2a30:	00010101 	.inst	0x00010101 ; undefined
    2a34:	00010000 	.inst	0x00010000 ; undefined
    2a38:	682f0100 	.inst	0x682f0100 ; undefined
    2a3c:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    2a40:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    2a44:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    2a48:	68696873 	.inst	0x68696873 ; undefined
    2a4c:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    2a50:	72742f72 	.inst	0x72742f72 ; undefined
    2a54:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    2a58:	2f312e38 	.inst	0x2f312e38 ; undefined
    2a5c:	5f455444 	shl	d4, d2, #5
    2a60:	746f6f42 	.inst	0x746f6f42 ; undefined
    2a64:	65646f63 	.inst	0x65646f63 ; undefined
    2a68:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    2a6c:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    2a70:	2f637273 	.inst	0x2f637273 ; undefined
    2a74:	68637261 	.inst	0x68637261 ; undefined
    2a78:	7365722f 	.inst	0x7365722f ; undefined
    2a7c:	622f7465 	.inst	0x622f7465 ; undefined
    2a80:	76746f6f 	.inst	0x76746f6f ; undefined
    2a84:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
    2a88:	682f0072 	.inst	0x682f0072 ; undefined
    2a8c:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    2a90:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    2a94:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    2a98:	68696873 	.inst	0x68696873 ; undefined
    2a9c:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    2aa0:	72742f72 	.inst	0x72742f72 ; undefined
    2aa4:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    2aa8:	2f312e38 	.inst	0x2f312e38 ; undefined
    2aac:	5f455444 	shl	d4, d2, #5
    2ab0:	746f6f42 	.inst	0x746f6f42 ; undefined
    2ab4:	65646f63 	.inst	0x65646f63 ; undefined
    2ab8:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    2abc:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    2ac0:	2f706d74 	.inst	0x2f706d74 ; undefined
    2ac4:	6b647361 	.inst	0x6b647361 ; undefined
    2ac8:	342d3436 	cbz	w22, 5d14c <_stack_size+0x5c14c>
    2acc:	332e392e 	.inst	0x332e392e ; undefined
    2ad0:	3335612d 	.inst	0x3335612d ; undefined
    2ad4:	2d4c452d 	ldp	s13, s17, [x9,#96]
    2ad8:	30312e33 	adr	x19, 6509d <_stack_size+0x6409d>
    2adc:	2e32672d 	umax	v13.8b, v25.8b, v18.8b
    2ae0:	612d3931 	.inst	0x612d3931 ; undefined
    2ae4:	746e3436 	.inst	0x746e3436 ; undefined
    2ae8:	3035312d 	adr	x13, 6d10d <_stack_size+0x6c10d>
    2aec:	2f353136 	.inst	0x2f353136 ; undefined
    2af0:	6c636e69 	ldnp	d9, d27, [x19,#-464]
    2af4:	00656475 	.inst	0x00656475 ; undefined
    2af8:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    2afc:	652f3165 	.inst	0x652f3165 ; undefined
    2b00:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    2b04:	68735f6e 	.inst	0x68735f6e ; undefined
    2b08:	742f6869 	.inst	0x742f6869 ; undefined
    2b0c:	2f726f68 	.inst	0x2f726f68 ; undefined
    2b10:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    2b14:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    2b18:	54442f31 	.inst	0x54442f31 ; undefined
    2b1c:	6f425f45 	.inst	0x6f425f45 ; undefined
    2b20:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    2b24:	622f6564 	.inst	0x622f6564 ; undefined
    2b28:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    2b2c:	72732f2e 	.inst	0x72732f2e ; undefined
    2b30:	72612f63 	.inst	0x72612f63 ; undefined
    2b34:	692f6863 	.inst	0x692f6863 ; undefined
    2b38:	756c636e 	.inst	0x756c636e ; undefined
    2b3c:	00006564 	.inst	0x00006564 ; undefined
    2b40:	5f736373 	.inst	0x5f736373 ; undefined
    2b44:	746f6f62 	.inst	0x746f6f62 ; undefined
    2b48:	6970735f 	ldpsw	xzr, x28, [x26,#-128]
    2b4c:	0100632e 	.inst	0x0100632e ; undefined
    2b50:	74730000 	.inst	0x74730000 ; undefined
    2b54:	746e6964 	.inst	0x746e6964 ; undefined
    2b58:	0200682e 	.inst	0x0200682e ; undefined
    2b5c:	79740000 	ldrh	w0, [x0,#6656]
    2b60:	65646570 	.inst	0x65646570 ; undefined
    2b64:	00682e66 	.inst	0x00682e66 ; undefined
    2b68:	6e000003 	ext	v3.16b, v0.16b, v0.16b, #0
    2b6c:	2e73636f 	rsubhn	v15.4h, v27.4s, v19.4s
    2b70:	00030068 	.inst	0x00030068 ; undefined
    2b74:	6f6f6200 	umlsl2	v0.4s, v16.8h, v15.h[2]
    2b78:	72726174 	.inst	0x72726174 ; undefined
    2b7c:	665f7961 	.inst	0x665f7961 ; undefined
    2b80:	61745f77 	.inst	0x61745f77 ; undefined
    2b84:	2e656c62 	umin	v2.4h, v3.4h, v5.4h
    2b88:	00030068 	.inst	0x00030068 ; undefined
    2b8c:	73637300 	.inst	0x73637300 ; undefined
    2b90:	6f6f625f 	umlsl2	v31.4s, v18.8h, v15.h[2]
    2b94:	00682e74 	.inst	0x00682e74 ; undefined
    2b98:	75000003 	.inst	0x75000003 ; undefined
    2b9c:	696c6974 	ldpsw	x20, x26, [x11,#-160]
    2ba0:	682e7974 	.inst	0x682e7974 ; undefined
    2ba4:	00000300 	.inst	0x00000300 ; undefined
    2ba8:	02090000 	.inst	0x02090000 ; undefined
    2bac:	030058f0 	.inst	0x030058f0 ; undefined
    2bb0:	00000000 	.inst	0x00000000 ; undefined
    2bb4:	0100c603 	.inst	0x0100c603 ; undefined
    2bb8:	75032d13 	.inst	0x75032d13 ; undefined
    2bbc:	200e0320 	.inst	0x200e0320 ; undefined
    2bc0:	032e7103 	.inst	0x032e7103 ; undefined
    2bc4:	74032010 	.inst	0x74032010 ; undefined
    2bc8:	31444e2e 	adds	w14, w17, #0x113, lsl #12
    2bcc:	6e032d13 	mov	v19.b[1], v8.b[5]
    2bd0:	20150320 	.inst	0x20150320 ; undefined
    2bd4:	2069032f 	.inst	0x2069032f ; undefined
    2bd8:	03201803 	.inst	0x03201803 ; undefined
    2bdc:	03403c6c 	.inst	0x03403c6c ; undefined
    2be0:	03023c10 	.inst	0x03023c10 ; undefined
    2be4:	59010100 	.inst	0x59010100 ; undefined
    2be8:	02000001 	.inst	0x02000001 ; undefined
    2bec:	00013e00 	.inst	0x00013e00 ; undefined
    2bf0:	fb010400 	.inst	0xfb010400 ; undefined
    2bf4:	01000d0e 	.inst	0x01000d0e ; undefined
    2bf8:	00010101 	.inst	0x00010101 ; undefined
    2bfc:	00010000 	.inst	0x00010000 ; undefined
    2c00:	682f0100 	.inst	0x682f0100 ; undefined
    2c04:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    2c08:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    2c0c:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    2c10:	68696873 	.inst	0x68696873 ; undefined
    2c14:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    2c18:	72742f72 	.inst	0x72742f72 ; undefined
    2c1c:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    2c20:	2f312e38 	.inst	0x2f312e38 ; undefined
    2c24:	5f455444 	shl	d4, d2, #5
    2c28:	746f6f42 	.inst	0x746f6f42 ; undefined
    2c2c:	65646f63 	.inst	0x65646f63 ; undefined
    2c30:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    2c34:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    2c38:	2f637273 	.inst	0x2f637273 ; undefined
    2c3c:	68637261 	.inst	0x68637261 ; undefined
    2c40:	7365722f 	.inst	0x7365722f ; undefined
    2c44:	622f7465 	.inst	0x622f7465 ; undefined
    2c48:	76746f6f 	.inst	0x76746f6f ; undefined
    2c4c:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
    2c50:	682f0072 	.inst	0x682f0072 ; undefined
    2c54:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    2c58:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    2c5c:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    2c60:	68696873 	.inst	0x68696873 ; undefined
    2c64:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    2c68:	72742f72 	.inst	0x72742f72 ; undefined
    2c6c:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    2c70:	2f312e38 	.inst	0x2f312e38 ; undefined
    2c74:	5f455444 	shl	d4, d2, #5
    2c78:	746f6f42 	.inst	0x746f6f42 ; undefined
    2c7c:	65646f63 	.inst	0x65646f63 ; undefined
    2c80:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    2c84:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    2c88:	2f706d74 	.inst	0x2f706d74 ; undefined
    2c8c:	6b647361 	.inst	0x6b647361 ; undefined
    2c90:	342d3436 	cbz	w22, 5d314 <_stack_size+0x5c314>
    2c94:	332e392e 	.inst	0x332e392e ; undefined
    2c98:	3335612d 	.inst	0x3335612d ; undefined
    2c9c:	2d4c452d 	ldp	s13, s17, [x9,#96]
    2ca0:	30312e33 	adr	x19, 65265 <_stack_size+0x64265>
    2ca4:	2e32672d 	umax	v13.8b, v25.8b, v18.8b
    2ca8:	612d3931 	.inst	0x612d3931 ; undefined
    2cac:	746e3436 	.inst	0x746e3436 ; undefined
    2cb0:	3035312d 	adr	x13, 6d2d5 <_stack_size+0x6c2d5>
    2cb4:	2f353136 	.inst	0x2f353136 ; undefined
    2cb8:	6c636e69 	ldnp	d9, d27, [x19,#-464]
    2cbc:	00656475 	.inst	0x00656475 ; undefined
    2cc0:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    2cc4:	652f3165 	.inst	0x652f3165 ; undefined
    2cc8:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    2ccc:	68735f6e 	.inst	0x68735f6e ; undefined
    2cd0:	742f6869 	.inst	0x742f6869 ; undefined
    2cd4:	2f726f68 	.inst	0x2f726f68 ; undefined
    2cd8:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    2cdc:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    2ce0:	54442f31 	.inst	0x54442f31 ; undefined
    2ce4:	6f425f45 	.inst	0x6f425f45 ; undefined
    2ce8:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    2cec:	622f6564 	.inst	0x622f6564 ; undefined
    2cf0:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    2cf4:	72732f2e 	.inst	0x72732f2e ; undefined
    2cf8:	72612f63 	.inst	0x72612f63 ; undefined
    2cfc:	692f6863 	.inst	0x692f6863 ; undefined
    2d00:	756c636e 	.inst	0x756c636e ; undefined
    2d04:	00006564 	.inst	0x00006564 ; undefined
    2d08:	70737573 	adr	x19, e9bb7 <_stack_size+0xe8bb7>
    2d0c:	2e646e65 	umin	v5.4h, v19.4h, v4.4h
    2d10:	00010063 	.inst	0x00010063 ; undefined
    2d14:	64747300 	.inst	0x64747300 ; undefined
    2d18:	2e746e69 	umin	v9.4h, v19.4h, v20.4h
    2d1c:	00020068 	.inst	0x00020068 ; undefined
    2d20:	70797400 	adr	x0, f5ba3 <_stack_size+0xf4ba3>
    2d24:	66656465 	.inst	0x66656465 ; undefined
    2d28:	0300682e 	.inst	0x0300682e ; undefined
    2d2c:	00000000 	.inst	0x00000000 ; undefined
    2d30:	59880209 	.inst	0x59880209 ; undefined
    2d34:	00000300 	.inst	0x00000300 ; undefined
    2d38:	2d030000 	stp	s0, s0, [x0,#24]
    2d3c:	024d1701 	.inst	0x024d1701 ; undefined
    2d40:	01010002 	.inst	0x01010002 ; undefined
    2d44:	000001db 	.inst	0x000001db ; undefined
    2d48:	013c0002 	.inst	0x013c0002 ; undefined
    2d4c:	01040000 	.inst	0x01040000 ; undefined
    2d50:	000d0efb 	.inst	0x000d0efb ; undefined
    2d54:	01010101 	.inst	0x01010101 ; undefined
    2d58:	01000000 	.inst	0x01000000 ; undefined
    2d5c:	2f010000 	.inst	0x2f010000 ; undefined
    2d60:	656d6f68 	.inst	0x656d6f68 ; undefined
    2d64:	64652f31 	.inst	0x64652f31 ; undefined
    2d68:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    2d6c:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    2d70:	68742f68 	.inst	0x68742f68 ; undefined
    2d74:	742f726f 	.inst	0x742f726f ; undefined
    2d78:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    2d7c:	312e382d 	adds	w13, w1, #0xb8e
    2d80:	4554442f 	.inst	0x4554442f ; undefined
    2d84:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    2d88:	646f6374 	.inst	0x646f6374 ; undefined
    2d8c:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    2d90:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    2d94:	6372732f 	.inst	0x6372732f ; undefined
    2d98:	6372612f 	.inst	0x6372612f ; undefined
    2d9c:	65722f68 	.inst	0x65722f68 ; undefined
    2da0:	2f746573 	.inst	0x2f746573 ; undefined
    2da4:	746f6f62 	.inst	0x746f6f62 ; undefined
    2da8:	74636576 	.inst	0x74636576 ; undefined
    2dac:	2f00726f 	.inst	0x2f00726f ; undefined
    2db0:	656d6f68 	.inst	0x656d6f68 ; undefined
    2db4:	64652f31 	.inst	0x64652f31 ; undefined
    2db8:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    2dbc:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    2dc0:	68742f68 	.inst	0x68742f68 ; undefined
    2dc4:	742f726f 	.inst	0x742f726f ; undefined
    2dc8:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    2dcc:	312e382d 	adds	w13, w1, #0xb8e
    2dd0:	4554442f 	.inst	0x4554442f ; undefined
    2dd4:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    2dd8:	646f6374 	.inst	0x646f6374 ; undefined
    2ddc:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    2de0:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    2de4:	706d742f 	adr	x15, ddc6b <_stack_size+0xdcc6b>
    2de8:	6473612f 	.inst	0x6473612f ; undefined
    2dec:	2d34366b 	stp	s11, s13, [x19,#-96]
    2df0:	2e392e34 	uqsub	v20.8b, v17.8b, v25.8b
    2df4:	35612d33 	cbnz	w19, c5398 <_stack_size+0xc4398>
    2df8:	4c452d33 	.inst	0x4c452d33 ; undefined
    2dfc:	312e332d 	adds	w13, w25, #0xb8c
    2e00:	32672d30 	.inst	0x32672d30 ; undefined
    2e04:	2d39312e 	stp	s14, s12, [x9,#-56]
    2e08:	6e343661 	cmhi	v1.16b, v19.16b, v20.16b
    2e0c:	35312d74 	cbnz	w20, 653b8 <_stack_size+0x643b8>
    2e10:	35313630 	cbnz	w16, 654d4 <_stack_size+0x644d4>
    2e14:	636e692f 	.inst	0x636e692f ; undefined
    2e18:	6564756c 	.inst	0x6564756c ; undefined
    2e1c:	6f682f00 	.inst	0x6f682f00 ; undefined
    2e20:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
    2e24:	73696465 	.inst	0x73696465 ; undefined
    2e28:	735f6e6f 	.inst	0x735f6e6f ; undefined
    2e2c:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
    2e30:	726f6874 	.inst	0x726f6874 ; undefined
    2e34:	7572742f 	.inst	0x7572742f ; undefined
    2e38:	382d6b6e 	strb	w14, [x27,x13]
    2e3c:	442f312e 	.inst	0x442f312e ; undefined
    2e40:	425f4554 	.inst	0x425f4554 ; undefined
    2e44:	63746f6f 	.inst	0x63746f6f ; undefined
    2e48:	2f65646f 	.inst	0x2f65646f ; undefined
    2e4c:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
    2e50:	732f2e2e 	.inst	0x732f2e2e ; undefined
    2e54:	612f6372 	.inst	0x612f6372 ; undefined
    2e58:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
    2e5c:	6c636e69 	ldnp	d9, d27, [x19,#-464]
    2e60:	00656475 	.inst	0x00656475 ; undefined
    2e64:	6d697400 	ldp	d0, d29, [x0,#-368]
    2e68:	632e7265 	.inst	0x632e7265 ; undefined
    2e6c:	00000100 	.inst	0x00000100 ; undefined
    2e70:	69647473 	ldpsw	x19, x29, [x3,#-224]
    2e74:	682e746e 	.inst	0x682e746e ; undefined
    2e78:	00000200 	.inst	0x00000200 ; undefined
    2e7c:	65707974 	.inst	0x65707974 ; undefined
    2e80:	2e666564 	umax	v4.4h, v11.4h, v6.4h
    2e84:	00030068 	.inst	0x00030068 ; undefined
    2e88:	09000000 	.inst	0x09000000 ; undefined
    2e8c:	0059a002 	.inst	0x0059a002 ; undefined
    2e90:	00000003 	.inst	0x00000003 ; undefined
    2e94:	012a0300 	.inst	0x012a0300 ; undefined
    2e98:	03010c03 	.inst	0x03010c03 ; undefined
    2e9c:	73033c0d 	.inst	0x73033c0d ; undefined
    2ea0:	200d032e 	.inst	0x200d032e ; undefined
    2ea4:	23207603 	.inst	0x23207603 ; undefined
    2ea8:	71032227 	subs	w7, w17, #0xc8
    2eac:	20120320 	.inst	0x20120320 ; undefined
    2eb0:	23207103 	.inst	0x23207103 ; undefined
    2eb4:	03232227 	.inst	0x03232227 ; undefined
    2eb8:	03162063 	.inst	0x03162063 ; undefined
    2ebc:	143f2e19 	b	fce720 <_stack_size+0xfcd720>
    2ec0:	033c0a03 	.inst	0x033c0a03 ; undefined
    2ec4:	1b412e7a 	.inst	0x1b412e7a ; undefined
    2ec8:	1d261d23 	.inst	0x1d261d23 ; undefined
    2ecc:	03162323 	.inst	0x03162323 ; undefined
    2ed0:	77033c09 	.inst	0x77033c09 ; undefined
    2ed4:	20100358 	.inst	0x20100358 ; undefined
    2ed8:	032e0c03 	.inst	0x032e0c03 ; undefined
    2edc:	03207fb5 	.inst	0x03207fb5 ; undefined
    2ee0:	032000cb 	.inst	0x032000cb ; undefined
    2ee4:	00207fb5 	.inst	0x00207fb5 ; NYI
    2ee8:	03010402 	.inst	0x03010402 ; undefined
    2eec:	02002038 	.inst	0x02002038 ; undefined
    2ef0:	77030104 	.inst	0x77030104 ; undefined
    2ef4:	3c09034a 	stur	b10, [x26,#144]
    2ef8:	293c2003 	stp	w3, w8, [x0,#-32]
    2efc:	7fa60351 	.inst	0x7fa60351 ; undefined
    2f00:	00da0320 	.inst	0x00da0320 ; undefined
    2f04:	7fa60320 	.inst	0x7fa60320 ; undefined
    2f08:	04020020 	.inst	0x04020020 ; undefined
    2f0c:	20380301 	.inst	0x20380301 ; undefined
    2f10:	01040200 	.inst	0x01040200 ; undefined
    2f14:	034a7703 	.inst	0x034a7703 ; undefined
    2f18:	2d033c09 	stp	s9, s15, [x0,#24]
    2f1c:	0602293c 	.inst	0x0602293c ; undefined
    2f20:	1a010100 	adc	w0, w8, w1
    2f24:	02000003 	.inst	0x02000003 ; undefined
    2f28:	00015d00 	.inst	0x00015d00 ; undefined
    2f2c:	fb010400 	.inst	0xfb010400 ; undefined
    2f30:	01000d0e 	.inst	0x01000d0e ; undefined
    2f34:	00010101 	.inst	0x00010101 ; undefined
    2f38:	00010000 	.inst	0x00010000 ; undefined
    2f3c:	682f0100 	.inst	0x682f0100 ; undefined
    2f40:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    2f44:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    2f48:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    2f4c:	68696873 	.inst	0x68696873 ; undefined
    2f50:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    2f54:	72742f72 	.inst	0x72742f72 ; undefined
    2f58:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    2f5c:	2f312e38 	.inst	0x2f312e38 ; undefined
    2f60:	5f455444 	shl	d4, d2, #5
    2f64:	746f6f42 	.inst	0x746f6f42 ; undefined
    2f68:	65646f63 	.inst	0x65646f63 ; undefined
    2f6c:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    2f70:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    2f74:	2f637273 	.inst	0x2f637273 ; undefined
    2f78:	68637261 	.inst	0x68637261 ; undefined
    2f7c:	7365722f 	.inst	0x7365722f ; undefined
    2f80:	622f7465 	.inst	0x622f7465 ; undefined
    2f84:	76746f6f 	.inst	0x76746f6f ; undefined
    2f88:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
    2f8c:	682f0072 	.inst	0x682f0072 ; undefined
    2f90:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    2f94:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    2f98:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    2f9c:	68696873 	.inst	0x68696873 ; undefined
    2fa0:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    2fa4:	72742f72 	.inst	0x72742f72 ; undefined
    2fa8:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    2fac:	2f312e38 	.inst	0x2f312e38 ; undefined
    2fb0:	5f455444 	shl	d4, d2, #5
    2fb4:	746f6f42 	.inst	0x746f6f42 ; undefined
    2fb8:	65646f63 	.inst	0x65646f63 ; undefined
    2fbc:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    2fc0:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    2fc4:	2f706d74 	.inst	0x2f706d74 ; undefined
    2fc8:	6b647361 	.inst	0x6b647361 ; undefined
    2fcc:	342d3436 	cbz	w22, 5d650 <_stack_size+0x5c650>
    2fd0:	332e392e 	.inst	0x332e392e ; undefined
    2fd4:	3335612d 	.inst	0x3335612d ; undefined
    2fd8:	2d4c452d 	ldp	s13, s17, [x9,#96]
    2fdc:	30312e33 	adr	x19, 655a1 <_stack_size+0x645a1>
    2fe0:	2e32672d 	umax	v13.8b, v25.8b, v18.8b
    2fe4:	612d3931 	.inst	0x612d3931 ; undefined
    2fe8:	746e3436 	.inst	0x746e3436 ; undefined
    2fec:	3035312d 	adr	x13, 6d611 <_stack_size+0x6c611>
    2ff0:	2f353136 	.inst	0x2f353136 ; undefined
    2ff4:	6c636e69 	ldnp	d9, d27, [x19,#-464]
    2ff8:	00656475 	.inst	0x00656475 ; undefined
    2ffc:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    3000:	652f3165 	.inst	0x652f3165 ; undefined
    3004:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    3008:	68735f6e 	.inst	0x68735f6e ; undefined
    300c:	742f6869 	.inst	0x742f6869 ; undefined
    3010:	2f726f68 	.inst	0x2f726f68 ; undefined
    3014:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    3018:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    301c:	54442f31 	.inst	0x54442f31 ; undefined
    3020:	6f425f45 	.inst	0x6f425f45 ; undefined
    3024:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    3028:	622f6564 	.inst	0x622f6564 ; undefined
    302c:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    3030:	72732f2e 	.inst	0x72732f2e ; undefined
    3034:	72612f63 	.inst	0x72612f63 ; undefined
    3038:	692f6863 	.inst	0x692f6863 ; undefined
    303c:	756c636e 	.inst	0x756c636e ; undefined
    3040:	00006564 	.inst	0x00006564 ; undefined
    3044:	74726175 	.inst	0x74726175 ; undefined
    3048:	0100632e 	.inst	0x0100632e ; undefined
    304c:	74730000 	.inst	0x74730000 ; undefined
    3050:	746e6964 	.inst	0x746e6964 ; undefined
    3054:	0200682e 	.inst	0x0200682e ; undefined
    3058:	79740000 	ldrh	w0, [x0,#6656]
    305c:	65646570 	.inst	0x65646570 ; undefined
    3060:	00682e66 	.inst	0x00682e66 ; undefined
    3064:	75000003 	.inst	0x75000003 ; undefined
    3068:	2e747261 	uabdl	v1.4s, v19.4h, v20.4h
    306c:	00030068 	.inst	0x00030068 ; undefined
    3070:	69747500 	ldpsw	x0, x29, [x8,#-96]
    3074:	7974696c 	ldrh	w12, [x11,#6708]
    3078:	0300682e 	.inst	0x0300682e ; undefined
    307c:	69740000 	ldpsw	x0, x0, [x0,#-96]
    3080:	2e72656d 	umax	v13.4h, v11.4h, v18.4h
    3084:	00030068 	.inst	0x00030068 ; undefined
    3088:	09000000 	.inst	0x09000000 ; undefined
    308c:	005b0c02 	.inst	0x005b0c02 ; undefined
    3090:	00000003 	.inst	0x00000003 ; undefined
    3094:	01900300 	.inst	0x01900300 ; undefined
    3098:	262b1501 	.inst	0x262b1501 ; undefined
    309c:	2121211d 	.inst	0x2121211d ; undefined
    30a0:	2e090326 	ext	v6.8b, v25.8b, v9.8b, #0
    30a4:	2e750330 	uaddl	v16.4s, v25.4h, v21.4h
    30a8:	242e0903 	.inst	0x242e0903 ; undefined
    30ac:	221f232a 	.inst	0x221f232a ; undefined
    30b0:	211f221f 	.inst	0x211f221f ; undefined
    30b4:	31201503 	adds	w3, w8, #0x805
    30b8:	4a410313 	eor	w19, w24, w1, lsr #0
    30bc:	03203f03 	.inst	0x03203f03 ; undefined
    30c0:	3f032041 	.inst	0x3f032041 ; undefined
    30c4:	20410320 	.inst	0x20410320 ; undefined
    30c8:	03203f03 	.inst	0x03203f03 ; undefined
    30cc:	3f032041 	.inst	0x3f032041 ; undefined
    30d0:	2041033c 	.inst	0x2041033c ; undefined
    30d4:	03203f03 	.inst	0x03203f03 ; undefined
    30d8:	3f032e41 	.inst	0x3f032e41 ; undefined
    30dc:	2041032e 	.inst	0x2041032e ; undefined
    30e0:	0800cb03 	stlxrb	w0, w3, [x24]
    30e4:	0066233c 	.inst	0x0066233c ; undefined
    30e8:	03010402 	.inst	0x03010402 ; undefined
    30ec:	00747fb7 	.inst	0x00747fb7 ; undefined
    30f0:	03010402 	.inst	0x03010402 ; undefined
    30f4:	032000ca 	.inst	0x032000ca ; undefined
    30f8:	03207fb1 	.inst	0x03207fb1 ; undefined
    30fc:	032000d3 	.inst	0x032000d3 ; undefined
    3100:	03207fad 	.inst	0x03207fad ; undefined
    3104:	232000d3 	.inst	0x232000d3 ; undefined
    3108:	02002f01 	.inst	0x02002f01 ; undefined
    310c:	ae030104 	.inst	0xae030104 ; undefined
    3110:	0200ba7f 	.inst	0x0200ba7f ; undefined
    3114:	d3030104 	.inst	0xd3030104 ; undefined
    3118:	ad032000 	stp	q0, q8, [x0,#96]
    311c:	da03207f 	.inst	0xda03207f ; undefined
    3120:	a6033c00 	.inst	0xa6033c00 ; undefined
    3124:	d603207f 	.inst	0xd603207f ; undefined
    3128:	2321ba00 	.inst	0x2321ba00 ; undefined
    312c:	1f3d1423 	fnmadd	s3, s1, s29, s5
    3130:	13232521 	.inst	0x13232521 ; undefined
    3134:	8313234e 	.inst	0x8313234e ; undefined
    3138:	35202603 	cbnz	w3, 435f8 <_stack_size+0x425f8>
    313c:	2e207903 	sqneg	v3.8b, v8.8b
    3140:	032e0e03 	.inst	0x032e0e03 ; undefined
    3144:	3e232078 	.inst	0x3e232078 ; undefined
    3148:	034b4e42 	.inst	0x034b4e42 ; undefined
    314c:	6a032009 	ands	w9, w0, w3, lsl #8
    3150:	2016034a 	.inst	0x2016034a ; undefined
    3154:	30206a03 	adr	x3, 43e95 <_stack_size+0x42e95>
    3158:	17033f31 	b	fffffffffc0d2e1c <SMC_ID_HW_RSA+0xffffffff780c2f15>
    315c:	6d033e2e 	stp	d14, d15, [x17,#48]
    3160:	032f4b4a 	.inst	0x032f4b4a ; undefined
    3164:	72034a11 	ands	w17, w16, #0xe000ffff
    3168:	200e032e 	.inst	0x200e032e ; undefined
    316c:	03412431 	.inst	0x03412431 ; undefined
    3170:	03222e77 	.inst	0x03222e77 ; undefined
    3174:	79032009 	strh	w9, [x0,#400]
    3178:	0323222e 	.inst	0x0323222e ; undefined
    317c:	7503200b 	.inst	0x7503200b ; undefined
    3180:	2f3f223c 	.inst	0x2f3f223c ; undefined
    3184:	1c243e33 	ldr	s19, 4b948 <_stack_size+0x4a948>
    3188:	353f3221 	cbnz	w1, 817cc <_stack_size+0x807cc>
    318c:	2e207903 	sqneg	v3.8b, v8.8b
    3190:	03200e03 	.inst	0x03200e03 ; undefined
    3194:	3e232078 	.inst	0x3e232078 ; undefined
    3198:	034b4e42 	.inst	0x034b4e42 ; undefined
    319c:	6a032009 	ands	w9, w0, w3, lsl #8
    31a0:	2016034a 	.inst	0x2016034a ; undefined
    31a4:	30206a03 	adr	x3, 43ee5 <_stack_size+0x42ee5>
    31a8:	18033f31 	ldr	w17, 998c <_stack_size+0x898c>
    31ac:	4a6e032e 	eon	w14, w25, w14, lsr #0
    31b0:	10032f4b 	adr	x11, 9798 <_stack_size+0x8798>
    31b4:	2e73034a 	uaddl	v10.4s, v26.4h, v19.4h
    31b8:	31200d03 	adds	w3, w8, #0x803
    31bc:	20790335 	.inst	0x20790335 ; undefined
    31c0:	200e032e 	.inst	0x200e032e ; undefined
    31c4:	23207803 	.inst	0x23207803 ; undefined
    31c8:	0903433e 	.inst	0x0903433e ; undefined
    31cc:	09034b4a 	.inst	0x09034b4a ; undefined
    31d0:	4a640320 	eon	w0, w25, w4, lsr #0
    31d4:	03201c03 	.inst	0x03201c03 ; undefined
    31d8:	31302064 	adds	w4, w3, #0xc08
    31dc:	04020040 	.inst	0x04020040 ; undefined
    31e0:	062e0601 	.inst	0x062e0601 ; undefined
    31e4:	032e1d03 	.inst	0x032e1d03 ; undefined
    31e8:	2f4b4a6e 	mls	v14.4h, v19.4h, v11.h[4]
    31ec:	034a1003 	.inst	0x034a1003 ; undefined
    31f0:	0d032e73 	.inst	0x0d032e73 ; undefined
    31f4:	02003220 	.inst	0x02003220 ; undefined
    31f8:	4c340104 	.inst	0x4c340104 ; undefined
    31fc:	46232f3d 	.inst	0x46232f3d ; undefined
    3200:	30200e03 	adr	x3, 433c1 <_stack_size+0x423c1>
    3204:	4c3c6d03 	.inst	0x4c3c6d03 ; undefined
    3208:	200e0321 	.inst	0x200e0321 ; undefined
    320c:	032e0a03 	.inst	0x032e0a03 ; undefined
    3210:	214c2065 	.inst	0x214c2065 ; undefined
    3214:	032e1b03 	.inst	0x032e1b03 ; undefined
    3218:	2d234a09 	stp	s9, s18, [x16,#-232]
    321c:	2e56033d 	.inst	0x2e56033d ; undefined
    3220:	2028034c 	.inst	0x2028034c ; undefined
    3224:	00205903 	.inst	0x00205903 ; NYI
    3228:	03040402 	.inst	0x03040402 ; undefined
    322c:	233e2e29 	.inst	0x233e2e29 ; undefined
    3230:	21203219 	.inst	0x21203219 ; undefined
    3234:	3c7a0321 	.inst	0x3c7a0321 ; undefined
    3238:	1f3c0903 	fnmadd	s3, s8, s28, s2
    323c:	01000302 	.inst	0x01000302 ; undefined
    3240:	0000cc01 	.inst	0x0000cc01 ; undefined
    3244:	c6000200 	.inst	0xc6000200 ; undefined
    3248:	04000000 	.inst	0x04000000 ; undefined
    324c:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    3250:	01010100 	.inst	0x01010100 ; undefined
    3254:	00000001 	.inst	0x00000001 ; undefined
    3258:	01000001 	.inst	0x01000001 ; undefined
    325c:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    3260:	652f3165 	.inst	0x652f3165 ; undefined
    3264:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    3268:	68735f6e 	.inst	0x68735f6e ; undefined
    326c:	742f6869 	.inst	0x742f6869 ; undefined
    3270:	2f726f68 	.inst	0x2f726f68 ; undefined
    3274:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    3278:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    327c:	54442f31 	.inst	0x54442f31 ; undefined
    3280:	6f425f45 	.inst	0x6f425f45 ; undefined
    3284:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    3288:	622f6564 	.inst	0x622f6564 ; undefined
    328c:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    3290:	72732f2e 	.inst	0x72732f2e ; undefined
    3294:	72612f63 	.inst	0x72612f63 ; undefined
    3298:	722f6863 	ands	w3, w3, #0xfffe0fff
    329c:	74657365 	.inst	0x74657365 ; undefined
    32a0:	6f6f622f 	umlsl2	v15.4s, v17.8h, v15.h[2]
    32a4:	63657674 	.inst	0x63657674 ; undefined
    32a8:	00726f74 	.inst	0x00726f74 ; undefined
    32ac:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    32b0:	652f3165 	.inst	0x652f3165 ; undefined
    32b4:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    32b8:	68735f6e 	.inst	0x68735f6e ; undefined
    32bc:	742f6869 	.inst	0x742f6869 ; undefined
    32c0:	2f726f68 	.inst	0x2f726f68 ; undefined
    32c4:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    32c8:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    32cc:	54442f31 	.inst	0x54442f31 ; undefined
    32d0:	6f425f45 	.inst	0x6f425f45 ; undefined
    32d4:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    32d8:	622f6564 	.inst	0x622f6564 ; undefined
    32dc:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    32e0:	72732f2e 	.inst	0x72732f2e ; undefined
    32e4:	72612f63 	.inst	0x72612f63 ; undefined
    32e8:	692f6863 	.inst	0x692f6863 ; undefined
    32ec:	756c636e 	.inst	0x756c636e ; undefined
    32f0:	00006564 	.inst	0x00006564 ; undefined
    32f4:	74726175 	.inst	0x74726175 ; undefined
    32f8:	616f6c5f 	.inst	0x616f6c5f ; undefined
    32fc:	00632e64 	.inst	0x00632e64 ; undefined
    3300:	74000001 	.inst	0x74000001 ; undefined
    3304:	64657079 	.inst	0x64657079 ; undefined
    3308:	682e6665 	.inst	0x682e6665 ; undefined
    330c:	00000200 	.inst	0x00000200 ; undefined
    3310:	00013a00 	.inst	0x00013a00 ; undefined
    3314:	d1000200 	sub	x0, x16, #0x0
    3318:	04000000 	.inst	0x04000000 ; undefined
    331c:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    3320:	01010100 	.inst	0x01010100 ; undefined
    3324:	00000001 	.inst	0x00000001 ; undefined
    3328:	01000001 	.inst	0x01000001 ; undefined
    332c:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    3330:	652f3165 	.inst	0x652f3165 ; undefined
    3334:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    3338:	68735f6e 	.inst	0x68735f6e ; undefined
    333c:	742f6869 	.inst	0x742f6869 ; undefined
    3340:	2f726f68 	.inst	0x2f726f68 ; undefined
    3344:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    3348:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    334c:	54442f31 	.inst	0x54442f31 ; undefined
    3350:	6f425f45 	.inst	0x6f425f45 ; undefined
    3354:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    3358:	622f6564 	.inst	0x622f6564 ; undefined
    335c:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    3360:	72732f2e 	.inst	0x72732f2e ; undefined
    3364:	72612f63 	.inst	0x72612f63 ; undefined
    3368:	722f6863 	ands	w3, w3, #0xfffe0fff
    336c:	74657365 	.inst	0x74657365 ; undefined
    3370:	6f6f622f 	umlsl2	v15.4s, v17.8h, v15.h[2]
    3374:	63657674 	.inst	0x63657674 ; undefined
    3378:	00726f74 	.inst	0x00726f74 ; undefined
    337c:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    3380:	652f3165 	.inst	0x652f3165 ; undefined
    3384:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    3388:	68735f6e 	.inst	0x68735f6e ; undefined
    338c:	742f6869 	.inst	0x742f6869 ; undefined
    3390:	2f726f68 	.inst	0x2f726f68 ; undefined
    3394:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    3398:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    339c:	54442f31 	.inst	0x54442f31 ; undefined
    33a0:	6f425f45 	.inst	0x6f425f45 ; undefined
    33a4:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    33a8:	622f6564 	.inst	0x622f6564 ; undefined
    33ac:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    33b0:	72732f2e 	.inst	0x72732f2e ; undefined
    33b4:	72612f63 	.inst	0x72612f63 ; undefined
    33b8:	692f6863 	.inst	0x692f6863 ; undefined
    33bc:	756c636e 	.inst	0x756c636e ; undefined
    33c0:	00006564 	.inst	0x00006564 ; undefined
    33c4:	74726175 	.inst	0x74726175 ; undefined
    33c8:	7568745f 	.inst	0x7568745f ; undefined
    33cc:	632e626d 	.inst	0x632e626d ; undefined
    33d0:	00000100 	.inst	0x00000100 ; undefined
    33d4:	65707974 	.inst	0x65707974 ; undefined
    33d8:	2e666564 	umax	v4.4h, v11.4h, v6.4h
    33dc:	00020068 	.inst	0x00020068 ; undefined
    33e0:	72617500 	.inst	0x72617500 ; undefined
    33e4:	00682e74 	.inst	0x00682e74 ; undefined
    33e8:	00000002 	.inst	0x00000002 ; undefined
    33ec:	d4020900 	.inst	0xd4020900 ; undefined
    33f0:	00030061 	.inst	0x00030061 ; undefined
    33f4:	03000000 	.inst	0x03000000 ; undefined
    33f8:	2c140132 	stnp	s18, s0, [x9,#160]
    33fc:	031f2f3e 	.inst	0x031f2f3e ; undefined
    3400:	251b2e0c 	.inst	0x251b2e0c ; undefined
    3404:	03202803 	.inst	0x03202803 ; undefined
    3408:	2403205c 	.inst	0x2403205c ; undefined
    340c:	50032320 	adr	x0, 9872 <_stack_size+0x8872>
    3410:	3e40252e 	.inst	0x3e40252e ; undefined
    3414:	03301f21 	.inst	0x03301f21 ; undefined
    3418:	3e302e76 	.inst	0x3e302e76 ; undefined
    341c:	2c143126 	stnp	s6, s12, [x9,#160]
    3420:	031f2f3e 	.inst	0x031f2f3e ; undefined
    3424:	251b2e0c 	.inst	0x251b2e0c ; undefined
    3428:	03200f03 	.inst	0x03200f03 ; undefined
    342c:	0b032075 	add	w21, w3, w3, lsl #8
    3430:	69032320 	.inst	0x69032320 ; undefined
    3434:	3e40252e 	.inst	0x3e40252e ; undefined
    3438:	03301f21 	.inst	0x03301f21 ; undefined
    343c:	3e302e76 	.inst	0x3e302e76 ; undefined
    3440:	2b153226 	adds	w6, w17, w21, lsl #12
    3444:	22311f24 	.inst	0x22311f24 ; undefined
    3448:	0102231e 	.inst	0x0102231e ; undefined
    344c:	7c010100 	stur	h0, [x8,#16]
    3450:	02000006 	.inst	0x02000006 ; undefined
    3454:	00018900 	.inst	0x00018900 ; undefined
    3458:	fb010400 	.inst	0xfb010400 ; undefined
    345c:	01000d0e 	.inst	0x01000d0e ; undefined
    3460:	00010101 	.inst	0x00010101 ; undefined
    3464:	00010000 	.inst	0x00010000 ; undefined
    3468:	682f0100 	.inst	0x682f0100 ; undefined
    346c:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    3470:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    3474:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    3478:	68696873 	.inst	0x68696873 ; undefined
    347c:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    3480:	72742f72 	.inst	0x72742f72 ; undefined
    3484:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    3488:	2f312e38 	.inst	0x2f312e38 ; undefined
    348c:	5f455444 	shl	d4, d2, #5
    3490:	746f6f42 	.inst	0x746f6f42 ; undefined
    3494:	65646f63 	.inst	0x65646f63 ; undefined
    3498:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    349c:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    34a0:	2f637273 	.inst	0x2f637273 ; undefined
    34a4:	68637261 	.inst	0x68637261 ; undefined
    34a8:	7365722f 	.inst	0x7365722f ; undefined
    34ac:	622f7465 	.inst	0x622f7465 ; undefined
    34b0:	76746f6f 	.inst	0x76746f6f ; undefined
    34b4:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
    34b8:	682f0072 	.inst	0x682f0072 ; undefined
    34bc:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    34c0:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    34c4:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    34c8:	68696873 	.inst	0x68696873 ; undefined
    34cc:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    34d0:	72742f72 	.inst	0x72742f72 ; undefined
    34d4:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    34d8:	2f312e38 	.inst	0x2f312e38 ; undefined
    34dc:	5f455444 	shl	d4, d2, #5
    34e0:	746f6f42 	.inst	0x746f6f42 ; undefined
    34e4:	65646f63 	.inst	0x65646f63 ; undefined
    34e8:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    34ec:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    34f0:	2f706d74 	.inst	0x2f706d74 ; undefined
    34f4:	6b647361 	.inst	0x6b647361 ; undefined
    34f8:	342d3436 	cbz	w22, 5db7c <_stack_size+0x5cb7c>
    34fc:	332e392e 	.inst	0x332e392e ; undefined
    3500:	3335612d 	.inst	0x3335612d ; undefined
    3504:	2d4c452d 	ldp	s13, s17, [x9,#96]
    3508:	30312e33 	adr	x19, 65acd <_stack_size+0x64acd>
    350c:	2e32672d 	umax	v13.8b, v25.8b, v18.8b
    3510:	612d3931 	.inst	0x612d3931 ; undefined
    3514:	746e3436 	.inst	0x746e3436 ; undefined
    3518:	3035312d 	adr	x13, 6db3d <_stack_size+0x6cb3d>
    351c:	2f353136 	.inst	0x2f353136 ; undefined
    3520:	6c636e69 	ldnp	d9, d27, [x19,#-464]
    3524:	00656475 	.inst	0x00656475 ; undefined
    3528:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    352c:	652f3165 	.inst	0x652f3165 ; undefined
    3530:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    3534:	68735f6e 	.inst	0x68735f6e ; undefined
    3538:	742f6869 	.inst	0x742f6869 ; undefined
    353c:	2f726f68 	.inst	0x2f726f68 ; undefined
    3540:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    3544:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    3548:	54442f31 	.inst	0x54442f31 ; undefined
    354c:	6f425f45 	.inst	0x6f425f45 ; undefined
    3550:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    3554:	622f6564 	.inst	0x622f6564 ; undefined
    3558:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    355c:	72732f2e 	.inst	0x72732f2e ; undefined
    3560:	72612f63 	.inst	0x72612f63 ; undefined
    3564:	692f6863 	.inst	0x692f6863 ; undefined
    3568:	756c636e 	.inst	0x756c636e ; undefined
    356c:	00006564 	.inst	0x00006564 ; undefined
    3570:	6c697475 	ldnp	d21, d29, [x3,#-368]
    3574:	2e797469 	uabd	v9.4h, v3.4h, v25.4h
    3578:	00010063 	.inst	0x00010063 ; undefined
    357c:	64747300 	.inst	0x64747300 ; undefined
    3580:	2e746e69 	umin	v9.4h, v19.4h, v20.4h
    3584:	00020068 	.inst	0x00020068 ; undefined
    3588:	70797400 	adr	x0, f640b <_stack_size+0xf540b>
    358c:	66656465 	.inst	0x66656465 ; undefined
    3590:	0300682e 	.inst	0x0300682e ; undefined
    3594:	74750000 	.inst	0x74750000 ; undefined
    3598:	74696c69 	.inst	0x74696c69 ; undefined
    359c:	00682e79 	.inst	0x00682e79 ; undefined
    35a0:	74000003 	.inst	0x74000003 ; undefined
    35a4:	72656d69 	.inst	0x72656d69 ; undefined
    35a8:	0300682e 	.inst	0x0300682e ; undefined
    35ac:	70640000 	adr	x0, cb5af <_stack_size+0xca5af>
    35b0:	746e6972 	.inst	0x746e6972 ; undefined
    35b4:	00682e66 	.inst	0x00682e66 ; undefined
    35b8:	3c000003 	stur	b3, [x0]
    35bc:	6c697562 	ldnp	d2, d29, [x11,#-368]
    35c0:	6e692d74 	uqsub	v20.8h, v11.8h, v9.8h
    35c4:	0000003e 	.inst	0x0000003e ; undefined
    35c8:	63616300 	.inst	0x63616300 ; undefined
    35cc:	765f6568 	.inst	0x765f6568 ; undefined
    35d0:	00682e38 	.inst	0x00682e38 ; undefined
    35d4:	75000003 	.inst	0x75000003 ; undefined
    35d8:	2e747261 	uabdl	v1.4s, v19.4h, v20.4h
    35dc:	00030068 	.inst	0x00030068 ; undefined
    35e0:	09000000 	.inst	0x09000000 ; undefined
    35e4:	00633402 	.inst	0x00633402 ; undefined
    35e8:	00000003 	.inst	0x00000003 ; undefined
    35ec:	08840300 	.inst	0x08840300 ; undefined
    35f0:	20090301 	.inst	0x20090301 ; undefined
    35f4:	4a740331 	eon	w17, w25, w20, lsr #0
    35f8:	23200903 	.inst	0x23200903 ; undefined
    35fc:	2f28215b 	.inst	0x2f28215b ; undefined
    3600:	03580c03 	.inst	0x03580c03 ; undefined
    3604:	0d032074 	.inst	0x0d032074 ; undefined
    3608:	3c780320 	.inst	0x3c780320 ; undefined
    360c:	6c03263e 	stnp	d30, d9, [x17,#48]
    3610:	12033e3c 	and	w28, w17, #0xe0001fff
    3614:	78a50320 	ldaddah	w5, w0, [x25]
    3618:	0402003c 	.inst	0x0402003c ; undefined
    361c:	244c2101 	.inst	0x244c2101 ; undefined
    3620:	214e2521 	.inst	0x214e2521 ; undefined
    3624:	00206f03 	.inst	0x00206f03 ; NYI
    3628:	03010402 	.inst	0x03010402 ; undefined
    362c:	2006900c 	.inst	0x2006900c ; undefined
    3630:	401f2106 	.inst	0x401f2106 ; undefined
    3634:	23211f3d 	.inst	0x23211f3d ; undefined
    3638:	0402002f 	.inst	0x0402002f ; undefined
    363c:	06200601 	.inst	0x06200601 ; undefined
    3640:	59133268 	.inst	0x59133268 ; undefined
    3644:	83212023 	.inst	0x83212023 ; undefined
    3648:	0321112f 	.inst	0x0321112f ; undefined
    364c:	0b033c12 	add	w18, w0, w3, lsl #15
    3650:	2e750320 	uaddl	v0.4s, v25.4h, v21.4h
    3654:	22200b03 	.inst	0x22200b03 ; undefined
    3658:	2e760328 	uaddl	v8.4s, v25.4h, v22.4h
    365c:	04020022 	.inst	0x04020022 ; undefined
    3660:	3c100302 	stur	b2, [x24,#-256]
    3664:	02040200 	.inst	0x02040200 ; undefined
    3668:	31207503 	adds	w3, w8, #0x81d
    366c:	2e780344 	uaddl	v4.4s, v26.4h, v24.4h
    3670:	26201403 	.inst	0x26201403 ; undefined
    3674:	26207a03 	.inst	0x26207a03 ; undefined
    3678:	033c7a03 	.inst	0x033c7a03 ; undefined
    367c:	3e25200d 	.inst	0x3e25200d ; undefined
    3680:	033c0b03 	.inst	0x033c0b03 ; undefined
    3684:	27292012 	.inst	0x27292012 ; undefined
    3688:	282e7903 	stnp	w3, w30, [x8,#-144]
    368c:	032e7903 	.inst	0x032e7903 ; undefined
    3690:	0e032072 	tbl	v18.8b, {v3.16b, v4.16b}, v3.8b
    3694:	034b3d20 	.inst	0x034b3d20 ; undefined
    3698:	03582070 	.inst	0x03582070 ; undefined
    369c:	3d302012 	str	b18, [x0,#3080]
    36a0:	303d3d30 	adr	x16, 7de45 <_stack_size+0x7ce45>
    36a4:	21303d3d 	.inst	0x21303d3d ; undefined
    36a8:	2123211f 	.inst	0x2123211f ; undefined
    36ac:	1b263d3d 	.inst	0x1b263d3d ; undefined
    36b0:	200a0325 	.inst	0x200a0325 ; undefined
    36b4:	232c2f2f 	.inst	0x232c2f2f ; undefined
    36b8:	242b232c 	.inst	0x242b232c ; undefined
    36bc:	212a242b 	.inst	0x212a242b ; undefined
    36c0:	2f2f2f2f 	.inst	0x2f2f2f2f ; undefined
    36c4:	03212f30 	.inst	0x03212f30 ; undefined
    36c8:	3131660c 	adds	w12, w16, #0xc59
    36cc:	2f2e1203 	.inst	0x2f2e1203 ; undefined
    36d0:	2a2f233a 	orn	w26, w25, w15, lsl #8
    36d4:	29262925 	stp	w5, w10, [x9,#-208]
    36d8:	2e7a0326 	uaddl	v6.4s, v25.4h, v26.4h
    36dc:	2f2f2f21 	.inst	0x2f2f2f21 ; undefined
    36e0:	00322f2f 	.inst	0x00322f2f ; NYI
    36e4:	03020402 	.inst	0x03020402 ; undefined
    36e8:	0c034a52 	.inst	0x0c034a52 ; undefined
    36ec:	2f4b3d74 	.inst	0x2f4b3d74 ; undefined
    36f0:	3e2f4b3d 	.inst	0x3e2f4b3d ; undefined
    36f4:	1b252f25 	.inst	0x1b252f25 ; undefined
    36f8:	4b4b4b3d 	sub	w29, w25, w11, lsr #18
    36fc:	034b4b4b 	.inst	0x034b4b4b ; undefined
    3700:	02004a0d 	.inst	0x02004a0d ; undefined
    3704:	4a060104 	eor	w4, w8, w6
    3708:	02040200 	.inst	0x02040200 ; undefined
    370c:	0402004a 	.inst	0x0402004a ; undefined
    3710:	02004a03 	.inst	0x02004a03 ; undefined
    3714:	004a0404 	.inst	0x004a0404 ; undefined
    3718:	4a050402 	eor	w2, w0, w5, lsl #1
    371c:	06040200 	.inst	0x06040200 ; undefined
    3720:	0402004a 	.inst	0x0402004a ; undefined
    3724:	4b064a07 	sub	w7, w16, w6, lsl #18
    3728:	0c033032 	.inst	0x0c033032 ; undefined
    372c:	0402003c 	.inst	0x0402003c ; undefined
    3730:	062e0601 	.inst	0x062e0601 ; undefined
    3734:	2f2e0e03 	.inst	0x2f2e0e03 ; undefined
    3738:	222e0a03 	.inst	0x222e0a03 ; undefined
    373c:	2829252c 	stnp	w12, w9, [x9,#-184]
    3740:	2f2e7803 	.inst	0x2f2e7803 ; undefined
    3744:	03200c03 	.inst	0x03200c03 ; undefined
    3748:	4b3d2e75 	sub	w21, w19, w29, uxth #3
    374c:	2f4b3d2f 	.inst	0x2f4b3d2f ; undefined
    3750:	84032f41 	.inst	0x84032f41 ; undefined
    3754:	1d23667f 	.inst	0x1d23667f ; undefined
    3758:	4b4b4b3d 	sub	w29, w25, w11, lsr #18
    375c:	034b4b4b 	.inst	0x034b4b4b ; undefined
    3760:	315800d0 	adds	w16, w6, #0x600, lsl #12
    3764:	231d231e 	.inst	0x231d231e ; undefined
    3768:	03202c03 	.inst	0x03202c03 ; undefined
    376c:	27292012 	.inst	0x27292012 ; undefined
    3770:	282e7903 	stnp	w3, w30, [x8,#-144]
    3774:	032e7903 	.inst	0x032e7903 ; undefined
    3778:	0e032072 	tbl	v18.8b, {v3.16b, v4.16b}, v3.8b
    377c:	034b3d20 	.inst	0x034b3d20 ; undefined
    3780:	03582070 	.inst	0x03582070 ; undefined
    3784:	3d302012 	str	b18, [x0,#3080]
    3788:	303d3d30 	adr	x16, 7df2d <_stack_size+0x7cf2d>
    378c:	21303d3d 	.inst	0x21303d3d ; undefined
    3790:	2123211f 	.inst	0x2123211f ; undefined
    3794:	1c253d3d 	ldr	s29, 4df38 <_stack_size+0x4cf38>
    3798:	200a0324 	.inst	0x200a0324 ; undefined
    379c:	232c2f2f 	.inst	0x232c2f2f ; undefined
    37a0:	242b232c 	.inst	0x242b232c ; undefined
    37a4:	212a242b 	.inst	0x212a242b ; undefined
    37a8:	2f2f2f2f 	.inst	0x2f2f2f2f ; undefined
    37ac:	03212f30 	.inst	0x03212f30 ; undefined
    37b0:	3131660c 	adds	w12, w16, #0xc59
    37b4:	2f2e1103 	.inst	0x2f2e1103 ; undefined
    37b8:	2a2f233a 	orn	w26, w25, w15, lsl #8
    37bc:	29262925 	stp	w5, w10, [x9,#-208]
    37c0:	2e7a0326 	uaddl	v6.4s, v25.4h, v26.4h
    37c4:	2f2f2f21 	.inst	0x2f2f2f21 ; undefined
    37c8:	00332f2f 	.inst	0x00332f2f ; NYI
    37cc:	03020402 	.inst	0x03020402 ; undefined
    37d0:	0c034a52 	.inst	0x0c034a52 ; undefined
    37d4:	2f4b3d74 	.inst	0x2f4b3d74 ; undefined
    37d8:	3e2f4b3d 	.inst	0x3e2f4b3d ; undefined
    37dc:	1b252f24 	.inst	0x1b252f24 ; undefined
    37e0:	4b4b4b3d 	sub	w29, w25, w11, lsr #18
    37e4:	034b4b4b 	.inst	0x034b4b4b ; undefined
    37e8:	02004a0e 	.inst	0x02004a0e ; undefined
    37ec:	4a060104 	eor	w4, w8, w6
    37f0:	02040200 	.inst	0x02040200 ; undefined
    37f4:	0402004a 	.inst	0x0402004a ; undefined
    37f8:	02004a03 	.inst	0x02004a03 ; undefined
    37fc:	004a0404 	.inst	0x004a0404 ; undefined
    3800:	4a050402 	eor	w2, w0, w5, lsl #1
    3804:	06040200 	.inst	0x06040200 ; undefined
    3808:	0402004a 	.inst	0x0402004a ; undefined
    380c:	4b064a07 	sub	w7, w16, w6, lsl #18
    3810:	0d033032 	.inst	0x0d033032 ; undefined
    3814:	0402003c 	.inst	0x0402003c ; undefined
    3818:	062e0601 	.inst	0x062e0601 ; undefined
    381c:	2f2e0d03 	.inst	0x2f2e0d03 ; undefined
    3820:	232e0a03 	.inst	0x232e0a03 ; undefined
    3824:	7a03262b 	.inst	0x7a03262b ; undefined
    3828:	2009032e 	.inst	0x2009032e ; undefined
    382c:	302e7703 	adr	x3, 6070d <_stack_size+0x5f70d>
    3830:	03200c03 	.inst	0x03200c03 ; undefined
    3834:	4b3d2e75 	sub	w21, w19, w29, uxth #3
    3838:	2f4b3d2f 	.inst	0x2f4b3d2f ; undefined
    383c:	83032f41 	.inst	0x83032f41 ; undefined
    3840:	1d23667f 	.inst	0x1d23667f ; undefined
    3844:	4b4b4b3d 	sub	w29, w25, w11, lsr #18
    3848:	034b4b4b 	.inst	0x034b4b4b ; undefined
    384c:	315800d1 	adds	w17, w6, #0x600, lsl #12
    3850:	231d231e 	.inst	0x231d231e ; undefined
    3854:	15202403 	b	480c860 <_stack_base+0x17ff0e0>
    3858:	3123302f 	adds	w15, w1, #0x8cc
    385c:	3e3e3d2b 	.inst	0x3e3e3d2b ; undefined
    3860:	26201103 	.inst	0x26201103 ; undefined
    3864:	6c035c1c 	stnp	d28, d23, [x0,#48]
    3868:	78033620 	strh	w0, [x17],#51
    386c:	3e404020 	.inst	0x3e404020 ; undefined
    3870:	2e090340 	ext	v0.8b, v26.8b, v9.8b, #0
    3874:	2f010c03 	.inst	0x2f010c03 ; undefined
    3878:	032e0d03 	.inst	0x032e0d03 ; undefined
    387c:	0f032e72 	.inst	0x0f032e72 ; undefined
    3880:	2e710320 	uaddl	v0.4s, v25.4h, v17.4h
    3884:	423d422f 	.inst	0x423d422f ; undefined
    3888:	403d423d 	.inst	0x403d423d ; undefined
    388c:	342f1823 	cbz	w3, 61b90 <_stack_size+0x60b90>
    3890:	282e7903 	stnp	w3, w30, [x8,#-144]
    3894:	032e7903 	.inst	0x032e7903 ; undefined
    3898:	7303200e 	.inst	0x7303200e ; undefined
    389c:	2012032e 	.inst	0x2012032e ; undefined
    38a0:	212e6f03 	.inst	0x212e6f03 ; undefined
    38a4:	200a0323 	.inst	0x200a0323 ; undefined
    38a8:	2e740323 	uaddl	v3.4s, v25.4h, v20.4h
    38ac:	21232321 	.inst	0x21232321 ; undefined
    38b0:	27222121 	.inst	0x27222121 ; undefined
    38b4:	21222121 	.inst	0x21222121 ; undefined
    38b8:	14222421 	b	88c93c <_stack_size+0x88b93c>
    38bc:	2a281f21 	orn	w1, w25, w8, lsl #7
    38c0:	f9032f3f 	str	xzr, [x25,#1624]
    38c4:	00162e00 	.inst	0x00162e00 ; undefined
    38c8:	06010402 	.inst	0x06010402 ; undefined
    38cc:	0402003c 	.inst	0x0402003c ; undefined
    38d0:	062f0601 	.inst	0x062f0601 ; undefined
    38d4:	04020020 	.inst	0x04020020 ; undefined
    38d8:	00210603 	.inst	0x00210603 ; NYI
    38dc:	1f030402 	fmadd	s2, s0, s3, s1
    38e0:	03040200 	.inst	0x03040200 ; undefined
    38e4:	0402002f 	.inst	0x0402002f ; undefined
    38e8:	00271f03 	.inst	0x00271f03 ; NYI
    38ec:	1d010402 	.inst	0x1d010402 ; undefined
    38f0:	03040200 	.inst	0x03040200 ; undefined
    38f4:	0402003d 	.inst	0x0402003d ; undefined
    38f8:	02002d03 	.inst	0x02002d03 ; undefined
    38fc:	00210304 	.inst	0x00210304 ; NYI
    3900:	1f030402 	fmadd	s2, s0, s3, s1
    3904:	01990323 	.inst	0x01990323 ; undefined
    3908:	342f1320 	cbz	w0, 61b6c <_stack_size+0x60b6c>
    390c:	2f2e7903 	.inst	0x2f2e7903 ; undefined
    3910:	03213134 	.inst	0x03213134 ; undefined
    3914:	09032019 	.inst	0x09032019 ; undefined
    3918:	00cf0301 	.inst	0x00cf0301 ; undefined
    391c:	7f84032e 	.inst	0x7f84032e ; undefined
    3920:	03342f01 	.inst	0x03342f01 ; undefined
    3924:	342f2e79 	cbz	w25, 61ef0 <_stack_size+0x60ef0>
    3928:	00f40331 	.inst	0x00f40331 ; undefined
    392c:	205c0320 	.inst	0x205c0320 ; undefined
    3930:	0b036727 	add	w7, w25, w3, lsl #25
    3934:	003e4c90 	.inst	0x003e4c90 ; NYI
    3938:	59010402 	.inst	0x59010402 ; undefined
    393c:	04020024 	.inst	0x04020024 ; undefined
    3940:	ed032102 	.inst	0xed032102 ; undefined
    3944:	364a207c 	tbz	w28, #9, 7d50 <_stack_size+0x6d50>
    3948:	5c262124 	ldr	d4, 4fd6c <_stack_size+0x4ed6c>
    394c:	311d3f79 	adds	w25, w27, #0x74f
    3950:	04020021 	.inst	0x04020021 ; undefined
    3954:	0f032902 	.inst	0x0f032902 ; undefined
    3958:	2f3d2266 	.inst	0x2f3d2266 ; undefined
    395c:	5503243e 	.inst	0x5503243e ; undefined
    3960:	202e034a 	.inst	0x202e034a ; undefined
    3964:	00233158 	.inst	0x00233158 ; NYI
    3968:	06010402 	.inst	0x06010402 ; undefined
    396c:	0d03064a 	.inst	0x0d03064a ; undefined
    3970:	0402003c 	.inst	0x0402003c ; undefined
    3974:	062e0601 	.inst	0x062e0601 ; undefined
    3978:	5b3c1003 	.inst	0x5b3c1003 ; undefined
    397c:	0402006a 	.inst	0x0402006a ; undefined
    3980:	06200602 	.inst	0x06200602 ; undefined
    3984:	02003d2f 	.inst	0x02003d2f ; undefined
    3988:	00670304 	.inst	0x00670304 ; undefined
    398c:	65030402 	.inst	0x65030402 ; undefined
    3990:	41ac0b03 	.inst	0x41ac0b03 ; undefined
    3994:	00667803 	.inst	0x00667803 ; undefined
    3998:	67030402 	.inst	0x67030402 ; undefined
    399c:	03040200 	.inst	0x03040200 ; undefined
    39a0:	ba610373 	.inst	0xba610373 ; undefined
    39a4:	3d212b31 	str	b17, [x25,#2122]
    39a8:	2f3d2f2f 	.inst	0x2f3d2f2f ; undefined
    39ac:	302f3d2f 	adr	x15, 62151 <_stack_size+0x61151>
    39b0:	312e6703 	adds	w3, w24, #0xb99
    39b4:	2f3d212b 	.inst	0x2f3d212b ; undefined
    39b8:	2f2f3d2f 	.inst	0x2f2f3d2f ; undefined
    39bc:	032f2f3d 	.inst	0x032f2f3d ; undefined
    39c0:	0016203d 	.inst	0x0016203d ; undefined
    39c4:	4b030402 	sub	w2, w0, w3, lsl #1
    39c8:	03040200 	.inst	0x03040200 ; undefined
    39cc:	0402002d 	.inst	0x0402002d ; undefined
    39d0:	02002103 	.inst	0x02002103 ; undefined
    39d4:	272d0304 	.inst	0x272d0304 ; undefined
    39d8:	27207903 	.inst	0x27207903 ; undefined
    39dc:	30324a25 	adr	x5, 68321 <_stack_size+0x67321>
    39e0:	2e100333 	ext	v19.8b, v25.8b, v16.8b, #0
    39e4:	262e7003 	.inst	0x262e7003 ; undefined
    39e8:	212d2f29 	.inst	0x212d2f29 ; undefined
    39ec:	304a0903 	adr	x3, 97b0d <_stack_size+0x96b0d>
    39f0:	20740331 	.inst	0x20740331 ; undefined
    39f4:	032e0c03 	.inst	0x032e0c03 ; undefined
    39f8:	262f2074 	.inst	0x262f2074 ; undefined
    39fc:	21207a03 	.inst	0x21207a03 ; undefined
    3a00:	4d3f3d2f 	.inst	0x4d3f3d2f ; undefined
    3a04:	03207603 	.inst	0x03207603 ; undefined
    3a08:	76032e0a 	.inst	0x76032e0a ; undefined
    3a0c:	2e130320 	ext	v0.8b, v25.8b, v19.8b, #0
    3a10:	03214921 	.inst	0x03214921 ; undefined
    3a14:	1b034a64 	madd	w4, w19, w3, w18
    3a18:	2062032e 	.inst	0x2062032e ; undefined
    3a1c:	213c2303 	.inst	0x213c2303 ; undefined
    3a20:	3d226727 	str	b7, [x25,#2201]
    3a24:	0200674b 	.inst	0x0200674b ; undefined
    3a28:	001e0204 	.inst	0x001e0204 ; undefined
    3a2c:	06010402 	.inst	0x06010402 ; undefined
    3a30:	4c4f0666 	.inst	0x4c4f0666 ; undefined
    3a34:	29253023 	stp	w3, w12, [x1,#-216]
    3a38:	21212124 	.inst	0x21212124 ; undefined
    3a3c:	2d2f2122 	stp	s2, s8, [x9,#-136]
    3a40:	1e231f21 	fcsel	s1, s25, s3, ne
    3a44:	200a0322 	.inst	0x200a0322 ; undefined
    3a48:	03207703 	.inst	0x03207703 ; undefined
    3a4c:	03212009 	.inst	0x03212009 ; undefined
    3a50:	23032009 	.inst	0x23032009 ; undefined
    3a54:	3c600320 	.inst	0x3c600320 ; undefined
    3a58:	10034c21 	adr	x1, a3dc <_stack_size+0x93dc>
    3a5c:	200d032e 	.inst	0x200d032e ; undefined
    3a60:	4c3c7003 	.inst	0x4c3c7003 ; undefined
    3a64:	3c570332 	ldur	b18, [x25,#-144]
    3a68:	2f211d31 	.inst	0x2f211d31 ; undefined
    3a6c:	2f3d3240 	.inst	0x2f3d3240 ; undefined
    3a70:	2e0d033d 	ext	v29.8b, v25.8b, v13.8b, #0
    3a74:	212e0f03 	.inst	0x212e0f03 ; undefined
    3a78:	03273d2f 	.inst	0x03273d2f ; undefined
    3a7c:	00203c12 	.inst	0x00203c12 ; NYI
    3a80:	24030402 	.inst	0x24030402 ; undefined
    3a84:	03040200 	.inst	0x03040200 ; undefined
    3a88:	2f2f3457 	ursra	v23.2s, v2.2s, #17
    3a8c:	2a2f232c 	orn	w12, w25, w15, lsl #8
    3a90:	1c411c25 	ldr	s5, 85e14 <_stack_size+0x84e14>
    3a94:	1b263d3d 	.inst	0x1b263d3d ; undefined
    3a98:	23211f22 	.inst	0x23211f22 ; undefined
    3a9c:	2e00e003 	.inst	0x2e00e003 ; undefined
    3aa0:	2130214b 	.inst	0x2130214b ; undefined
    3aa4:	253a2f1f 	.inst	0x253a2f1f ; undefined
    3aa8:	214c214b 	.inst	0x214c214b ; undefined
    3aac:	4c1e3e30 	.inst	0x4c1e3e30 ; undefined
    3ab0:	033c7a03 	.inst	0x033c7a03 ; undefined
    3ab4:	214b2009 	.inst	0x214b2009 ; undefined
    3ab8:	3e30214c 	.inst	0x3e30214c ; undefined
    3abc:	7a034c1e 	.inst	0x7a034c1e ; undefined
    3ac0:	2009033c 	.inst	0x2009033c ; undefined
    3ac4:	241f5914 	.inst	0x241f5914 ; undefined
    3ac8:	0102251b 	.inst	0x0102251b ; undefined
    3acc:	39010100 	strb	w0, [x8,#64]
    3ad0:	02000002 	.inst	0x02000002 ; undefined
    3ad4:	00019700 	.inst	0x00019700 ; undefined
    3ad8:	fb010400 	.inst	0xfb010400 ; undefined
    3adc:	01000d0e 	.inst	0x01000d0e ; undefined
    3ae0:	00010101 	.inst	0x00010101 ; undefined
    3ae4:	00010000 	.inst	0x00010000 ; undefined
    3ae8:	682f0100 	.inst	0x682f0100 ; undefined
    3aec:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    3af0:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    3af4:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    3af8:	68696873 	.inst	0x68696873 ; undefined
    3afc:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    3b00:	72742f72 	.inst	0x72742f72 ; undefined
    3b04:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    3b08:	2f312e38 	.inst	0x2f312e38 ; undefined
    3b0c:	5f455444 	shl	d4, d2, #5
    3b10:	746f6f42 	.inst	0x746f6f42 ; undefined
    3b14:	65646f63 	.inst	0x65646f63 ; undefined
    3b18:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    3b1c:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    3b20:	2f637273 	.inst	0x2f637273 ; undefined
    3b24:	68637261 	.inst	0x68637261 ; undefined
    3b28:	7365722f 	.inst	0x7365722f ; undefined
    3b2c:	622f7465 	.inst	0x622f7465 ; undefined
    3b30:	76746f6f 	.inst	0x76746f6f ; undefined
    3b34:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
    3b38:	682f0072 	.inst	0x682f0072 ; undefined
    3b3c:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    3b40:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    3b44:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    3b48:	68696873 	.inst	0x68696873 ; undefined
    3b4c:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    3b50:	72742f72 	.inst	0x72742f72 ; undefined
    3b54:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    3b58:	2f312e38 	.inst	0x2f312e38 ; undefined
    3b5c:	5f455444 	shl	d4, d2, #5
    3b60:	746f6f42 	.inst	0x746f6f42 ; undefined
    3b64:	65646f63 	.inst	0x65646f63 ; undefined
    3b68:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    3b6c:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    3b70:	2f706d74 	.inst	0x2f706d74 ; undefined
    3b74:	6b647361 	.inst	0x6b647361 ; undefined
    3b78:	342d3436 	cbz	w22, 5e1fc <_stack_size+0x5d1fc>
    3b7c:	332e392e 	.inst	0x332e392e ; undefined
    3b80:	3335612d 	.inst	0x3335612d ; undefined
    3b84:	2d4c452d 	ldp	s13, s17, [x9,#96]
    3b88:	30312e33 	adr	x19, 6614d <_stack_size+0x6514d>
    3b8c:	2e32672d 	umax	v13.8b, v25.8b, v18.8b
    3b90:	612d3931 	.inst	0x612d3931 ; undefined
    3b94:	746e3436 	.inst	0x746e3436 ; undefined
    3b98:	3035312d 	adr	x13, 6e1bd <_stack_size+0x6d1bd>
    3b9c:	2f353136 	.inst	0x2f353136 ; undefined
    3ba0:	6c636e69 	ldnp	d9, d27, [x19,#-464]
    3ba4:	00656475 	.inst	0x00656475 ; undefined
    3ba8:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    3bac:	652f3165 	.inst	0x652f3165 ; undefined
    3bb0:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    3bb4:	68735f6e 	.inst	0x68735f6e ; undefined
    3bb8:	742f6869 	.inst	0x742f6869 ; undefined
    3bbc:	2f726f68 	.inst	0x2f726f68 ; undefined
    3bc0:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    3bc4:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    3bc8:	54442f31 	.inst	0x54442f31 ; undefined
    3bcc:	6f425f45 	.inst	0x6f425f45 ; undefined
    3bd0:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    3bd4:	622f6564 	.inst	0x622f6564 ; undefined
    3bd8:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    3bdc:	72732f2e 	.inst	0x72732f2e ; undefined
    3be0:	72612f63 	.inst	0x72612f63 ; undefined
    3be4:	692f6863 	.inst	0x692f6863 ; undefined
    3be8:	756c636e 	.inst	0x756c636e ; undefined
    3bec:	00006564 	.inst	0x00006564 ; undefined
    3bf0:	69726576 	ldpsw	x22, x25, [x11,#-112]
    3bf4:	695f7966 	ldpsw	x6, x30, [x11,#248]
    3bf8:	632e676d 	.inst	0x632e676d ; undefined
    3bfc:	00000100 	.inst	0x00000100 ; undefined
    3c00:	69647473 	ldpsw	x19, x29, [x3,#-224]
    3c04:	682e746e 	.inst	0x682e746e ; undefined
    3c08:	00000200 	.inst	0x00000200 ; undefined
    3c0c:	65707974 	.inst	0x65707974 ; undefined
    3c10:	2e666564 	umax	v4.4h, v11.4h, v6.4h
    3c14:	00030068 	.inst	0x00030068 ; undefined
    3c18:	5f776800 	.inst	0x5f776800 ; undefined
    3c1c:	2e617372 	uabdl	v18.4s, v27.4h, v1.4h
    3c20:	00030068 	.inst	0x00030068 ; undefined
    3c24:	69747500 	ldpsw	x0, x29, [x8,#-96]
    3c28:	7974696c 	ldrh	w12, [x11,#6708]
    3c2c:	0300682e 	.inst	0x0300682e ; undefined
    3c30:	61630000 	.inst	0x61630000 ; undefined
    3c34:	5f656863 	.inst	0x5f656863 ; undefined
    3c38:	682e3876 	.inst	0x682e3876 ; undefined
    3c3c:	00000300 	.inst	0x00000300 ; undefined
    3c40:	2e70636d 	rsubhn	v13.4h, v27.4s, v16.4s
    3c44:	00030068 	.inst	0x00030068 ; undefined
    3c48:	636d7300 	.inst	0x636d7300 ; undefined
    3c4c:	6c61635f 	ldnp	d31, d24, [x26,#-496]
    3c50:	00682e6c 	.inst	0x00682e6c ; undefined
    3c54:	75000003 	.inst	0x75000003 ; undefined
    3c58:	2e747261 	uabdl	v1.4s, v19.4h, v20.4h
    3c5c:	00030068 	.inst	0x00030068 ; undefined
    3c60:	75623c00 	.inst	0x75623c00 ; undefined
    3c64:	2d746c69 	ldp	s9, s27, [x3,#-96]
    3c68:	003e6e69 	.inst	0x003e6e69 ; NYI
    3c6c:	00000000 	.inst	0x00000000 ; undefined
    3c70:	64020900 	.inst	0x64020900 ; undefined
    3c74:	0003007b 	.inst	0x0003007b ; undefined
    3c78:	03000000 	.inst	0x03000000 ; undefined
    3c7c:	0326013d 	.inst	0x0326013d ; undefined
    3c80:	0342207a 	.inst	0x0342207a ; undefined
    3c84:	1c262e7a 	ldr	s26, 50250 <_stack_size+0x4f250>
    3c88:	7a03341e 	.inst	0x7a03341e ; undefined
    3c8c:	0a034220 	and	w0, w17, w3, lsl #16
    3c90:	211f592e 	.inst	0x211f592e ; undefined
    3c94:	3d3d3d4d 	str	b13, [x10,#3919]
    3c98:	031f7640 	.inst	0x031f7640 ; undefined
    3c9c:	b7032e34 	tbnz	x20, #32, a260 <_stack_size+0x9260>
    3ca0:	c9039e7f 	.inst	0xc9039e7f ; undefined
    3ca4:	50032000 	adr	x0, a0a6 <_stack_size+0x90a6>
    3ca8:	03595c2e 	.inst	0x03595c2e ; undefined
    3cac:	0c03200c 	.inst	0x0c03200c ; undefined
    3cb0:	0200594a 	.inst	0x0200594a ; undefined
    3cb4:	005a0404 	.inst	0x005a0404 ; undefined
    3cb8:	5a040402 	.inst	0x5a040402 ; undefined
    3cbc:	04040200 	.inst	0x04040200 ; undefined
    3cc0:	0402002c 	.inst	0x0402002c ; undefined
    3cc4:	02002504 	.inst	0x02002504 ; undefined
    3cc8:	002a0404 	.inst	0x002a0404 ; NYI
    3ccc:	59040402 	.inst	0x59040402 ; undefined
    3cd0:	04040200 	.inst	0x04040200 ; undefined
    3cd4:	0402002f 	.inst	0x0402002f ; undefined
    3cd8:	02003d04 	.inst	0x02003d04 ; undefined
    3cdc:	002f0404 	.inst	0x002f0404 ; NYI
    3ce0:	2f040402 	mvni	v2.2s, #0x80
    3ce4:	04040200 	.inst	0x04040200 ; undefined
    3ce8:	0402002f 	.inst	0x0402002f ; undefined
    3cec:	02002f04 	.inst	0x02002f04 ; undefined
    3cf0:	002f0404 	.inst	0x002f0404 ; NYI
    3cf4:	3d040402 	str	b2, [x0,#257]
    3cf8:	04040200 	.inst	0x04040200 ; undefined
    3cfc:	0402002f 	.inst	0x0402002f ; undefined
    3d00:	5b033204 	.inst	0x5b033204 ; undefined
    3d04:	025a3d2e 	.inst	0x025a3d2e ; undefined
    3d08:	01010002 	.inst	0x01010002 ; undefined
    3d0c:	000000eb 	.inst	0x000000eb ; undefined
    3d10:	00700002 	.inst	0x00700002 ; undefined
    3d14:	01040000 	.inst	0x01040000 ; undefined
    3d18:	000d0efb 	.inst	0x000d0efb ; undefined
    3d1c:	01010101 	.inst	0x01010101 ; undefined
    3d20:	01000000 	.inst	0x01000000 ; undefined
    3d24:	2f010000 	.inst	0x2f010000 ; undefined
    3d28:	656d6f68 	.inst	0x656d6f68 ; undefined
    3d2c:	64652f31 	.inst	0x64652f31 ; undefined
    3d30:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    3d34:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    3d38:	68742f68 	.inst	0x68742f68 ; undefined
    3d3c:	742f726f 	.inst	0x742f726f ; undefined
    3d40:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    3d44:	312e382d 	adds	w13, w1, #0xb8e
    3d48:	4554442f 	.inst	0x4554442f ; undefined
    3d4c:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    3d50:	646f6374 	.inst	0x646f6374 ; undefined
    3d54:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    3d58:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    3d5c:	6372732f 	.inst	0x6372732f ; undefined
    3d60:	6372612f 	.inst	0x6372612f ; undefined
    3d64:	65722f68 	.inst	0x65722f68 ; undefined
    3d68:	2f746573 	.inst	0x2f746573 ; undefined
    3d6c:	746f6f62 	.inst	0x746f6f62 ; undefined
    3d70:	74636576 	.inst	0x74636576 ; undefined
    3d74:	0000726f 	.inst	0x0000726f ; undefined
    3d78:	74636576 	.inst	0x74636576 ; undefined
    3d7c:	2e73726f 	uabdl	v15.4s, v19.4h, v19.4h
    3d80:	00010053 	.inst	0x00010053 ; undefined
    3d84:	09000000 	.inst	0x09000000 ; undefined
    3d88:	00800002 	.inst	0x00800002 ; undefined
    3d8c:	00000003 	.inst	0x00000003 ; undefined
    3d90:	01130300 	.inst	0x01130300 ; undefined
    3d94:	e708e708 	.inst	0xe708e708 ; undefined
    3d98:	ea08e708 	ands	x8, x24, x8, lsl #57
    3d9c:	e708e708 	.inst	0xe708e708 ; undefined
    3da0:	eb08e708 	subs	x8, x24, x8, lsl #57
    3da4:	e808e808 	.inst	0xe808e808 ; undefined
    3da8:	eb08e808 	subs	x8, x0, x8, lsl #58
    3dac:	e808e808 	.inst	0xe808e808 ; undefined
    3db0:	0c03e808 	.inst	0x0c03e808 ; undefined
    3db4:	e708e408 	.inst	0xe708e408 ; undefined
    3db8:	e708e708 	.inst	0xe708e708 ; undefined
    3dbc:	e708ea08 	.inst	0xe708ea08 ; undefined
    3dc0:	e708e708 	.inst	0xe708e708 ; undefined
    3dc4:	e808eb08 	.inst	0xe808eb08 ; undefined
    3dc8:	e808e808 	.inst	0xe808e808 ; undefined
    3dcc:	e808eb08 	.inst	0xe808eb08 ; undefined
    3dd0:	e808e808 	.inst	0xe808e808 ; undefined
    3dd4:	e4080c03 	.inst	0xe4080c03 ; undefined
    3dd8:	e708e708 	.inst	0xe708e708 ; undefined
    3ddc:	ea08e708 	ands	x8, x24, x8, lsl #57
    3de0:	e708e708 	.inst	0xe708e708 ; undefined
    3de4:	eb08e708 	subs	x8, x24, x8, lsl #57
    3de8:	e808e808 	.inst	0xe808e808 ; undefined
    3dec:	eb08e808 	subs	x8, x0, x8, lsl #58
    3df0:	e808e808 	.inst	0xe808e808 ; undefined
    3df4:	0102e808 	.inst	0x0102e808 ; undefined
    3df8:	f7010100 	.inst	0xf7010100 ; undefined
    3dfc:	02000000 	.inst	0x02000000 ; undefined
    3e00:	00006e00 	.inst	0x00006e00 ; undefined
    3e04:	fb010400 	.inst	0xfb010400 ; undefined
    3e08:	01000d0e 	.inst	0x01000d0e ; undefined
    3e0c:	00010101 	.inst	0x00010101 ; undefined
    3e10:	00010000 	.inst	0x00010000 ; undefined
    3e14:	682f0100 	.inst	0x682f0100 ; undefined
    3e18:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    3e1c:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    3e20:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    3e24:	68696873 	.inst	0x68696873 ; undefined
    3e28:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    3e2c:	72742f72 	.inst	0x72742f72 ; undefined
    3e30:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    3e34:	2f312e38 	.inst	0x2f312e38 ; undefined
    3e38:	5f455444 	shl	d4, d2, #5
    3e3c:	746f6f42 	.inst	0x746f6f42 ; undefined
    3e40:	65646f63 	.inst	0x65646f63 ; undefined
    3e44:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    3e48:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    3e4c:	2f637273 	.inst	0x2f637273 ; undefined
    3e50:	68637261 	.inst	0x68637261 ; undefined
    3e54:	7365722f 	.inst	0x7365722f ; undefined
    3e58:	622f7465 	.inst	0x622f7465 ; undefined
    3e5c:	76746f6f 	.inst	0x76746f6f ; undefined
    3e60:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
    3e64:	63000072 	.inst	0x63000072 ; undefined
    3e68:	65686361 	.inst	0x65686361 ; undefined
    3e6c:	0100532e 	.inst	0x0100532e ; undefined
    3e70:	00000000 	.inst	0x00000000 ; undefined
    3e74:	98000209 	ldrsw	x9, 3eb4 <_stack_size+0x2eb4>
    3e78:	00000300 	.inst	0x00000300 ; undefined
    3e7c:	19030000 	.inst	0x19030000 ; undefined
    3e80:	21212101 	.inst	0x21212101 ; undefined
    3e84:	21212121 	.inst	0x21212121 ; undefined
    3e88:	28212121 	stnp	w1, w8, [x9,#-248]
    3e8c:	21212122 	.inst	0x21212122 ; undefined
    3e90:	21212121 	.inst	0x21212121 ; undefined
    3e94:	21212121 	.inst	0x21212121 ; undefined
    3e98:	200b0322 	.inst	0x200b0322 ; undefined
    3e9c:	21212121 	.inst	0x21212121 ; undefined
    3ea0:	27212121 	.inst	0x27212121 ; undefined
    3ea4:	21212121 	.inst	0x21212121 ; undefined
    3ea8:	21222121 	.inst	0x21222121 ; undefined
    3eac:	21212221 	.inst	0x21212221 ; undefined
    3eb0:	25232121 	.inst	0x25232121 ; undefined
    3eb4:	21212121 	.inst	0x21212121 ; undefined
    3eb8:	21212124 	.inst	0x21212124 ; undefined
    3ebc:	200d0321 	.inst	0x200d0321 ; undefined
    3ec0:	21212121 	.inst	0x21212121 ; undefined
    3ec4:	21212123 	.inst	0x21212123 ; undefined
    3ec8:	21212121 	.inst	0x21212121 ; undefined
    3ecc:	21200903 	.inst	0x21200903 ; undefined
    3ed0:	20090321 	.inst	0x20090321 ; undefined
    3ed4:	26212121 	.inst	0x26212121 ; undefined
    3ed8:	21212121 	.inst	0x21212121 ; undefined
    3edc:	0d032121 	.inst	0x0d032121 ; undefined
    3ee0:	21222120 	.inst	0x21222120 ; undefined
    3ee4:	0d032124 	.inst	0x0d032124 ; undefined
    3ee8:	22212120 	.inst	0x22212120 ; undefined
    3eec:	23212121 	.inst	0x23212121 ; undefined
    3ef0:	00080221 	.inst	0x00080221 ; undefined
    3ef4:	00a30101 	.inst	0x00a30101 ; undefined
    3ef8:	00020000 	.inst	0x00020000 ; undefined
    3efc:	00000071 	.inst	0x00000071 ; undefined
    3f00:	0efb0104 	.inst	0x0efb0104 ; undefined
    3f04:	0101000d 	.inst	0x0101000d ; undefined
    3f08:	00000101 	.inst	0x00000101 ; undefined
    3f0c:	00000100 	.inst	0x00000100 ; undefined
    3f10:	6f682f01 	.inst	0x6f682f01 ; undefined
    3f14:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
    3f18:	73696465 	.inst	0x73696465 ; undefined
    3f1c:	735f6e6f 	.inst	0x735f6e6f ; undefined
    3f20:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
    3f24:	726f6874 	.inst	0x726f6874 ; undefined
    3f28:	7572742f 	.inst	0x7572742f ; undefined
    3f2c:	382d6b6e 	strb	w14, [x27,x13]
    3f30:	442f312e 	.inst	0x442f312e ; undefined
    3f34:	425f4554 	.inst	0x425f4554 ; undefined
    3f38:	63746f6f 	.inst	0x63746f6f ; undefined
    3f3c:	2f65646f 	.inst	0x2f65646f ; undefined
    3f40:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
    3f44:	732f2e2e 	.inst	0x732f2e2e ; undefined
    3f48:	612f6372 	.inst	0x612f6372 ; undefined
    3f4c:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
    3f50:	65736572 	.inst	0x65736572 ; undefined
    3f54:	6f622f74 	.inst	0x6f622f74 ; undefined
    3f58:	6576746f 	.inst	0x6576746f ; undefined
    3f5c:	726f7463 	.inst	0x726f7463 ; undefined
    3f60:	6d730000 	ldp	d0, d0, [x0,#-208]
    3f64:	61635f63 	.inst	0x61635f63 ; undefined
    3f68:	532e6c6c 	.inst	0x532e6c6c ; undefined
    3f6c:	00000100 	.inst	0x00000100 ; undefined
    3f70:	02090000 	.inst	0x02090000 ; undefined
    3f74:	030099b0 	.inst	0x030099b0 ; undefined
    3f78:	00000000 	.inst	0x00000000 ; undefined
    3f7c:	21010903 	.inst	0x21010903 ; undefined
    3f80:	21212121 	.inst	0x21212121 ; undefined
    3f84:	26212121 	.inst	0x26212121 ; undefined
    3f88:	21212121 	.inst	0x21212121 ; undefined
    3f8c:	21212121 	.inst	0x21212121 ; undefined
    3f90:	21212126 	.inst	0x21212126 ; undefined
    3f94:	21212121 	.inst	0x21212121 ; undefined
    3f98:	01000702 	.inst	0x01000702 ; undefined
    3f9c:	Address 0x0000000000003f9c is out of bounds.


Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
       0:	000000b7 	.inst	0x000000b7 ; undefined
       4:	00000002 	.inst	0x00000002 ; undefined
       8:	01080000 	.inst	0x01080000 ; undefined
       c:	00000000 	.inst	0x00000000 ; undefined
      10:	03000000 	.inst	0x03000000 ; undefined
      14:	00000000 	.inst	0x00000000 ; undefined
      18:	03000038 	.inst	0x03000038 ; undefined
      1c:	00000000 	.inst	0x00000000 ; undefined
      20:	6d6f682f 	ldp	d15, d26, [x1,#-272]
      24:	652f3165 	.inst	0x652f3165 ; undefined
      28:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
      2c:	68735f6e 	.inst	0x68735f6e ; undefined
      30:	742f6869 	.inst	0x742f6869 ; undefined
      34:	2f726f68 	.inst	0x2f726f68 ; undefined
      38:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
      3c:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
      40:	54442f31 	.inst	0x54442f31 ; undefined
      44:	6f425f45 	.inst	0x6f425f45 ; undefined
      48:	6f63746f 	uqshl	v15.2d, v3.2d, #35
      4c:	622f6564 	.inst	0x622f6564 ; undefined
      50:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
      54:	72732f2e 	.inst	0x72732f2e ; undefined
      58:	72612f63 	.inst	0x72612f63 ; undefined
      5c:	722f6863 	ands	w3, w3, #0xfffe0fff
      60:	74657365 	.inst	0x74657365 ; undefined
      64:	6f6f622f 	umlsl2	v15.4s, v17.8h, v15.h[2]
      68:	63657674 	.inst	0x63657674 ; undefined
      6c:	2f726f74 	.inst	0x2f726f74 ; undefined
      70:	72617473 	.inst	0x72617473 ; undefined
      74:	00532e74 	.inst	0x00532e74 ; undefined
      78:	6d6f682f 	ldp	d15, d26, [x1,#-272]
      7c:	652f3165 	.inst	0x652f3165 ; undefined
      80:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
      84:	68735f6e 	.inst	0x68735f6e ; undefined
      88:	742f6869 	.inst	0x742f6869 ; undefined
      8c:	2f726f68 	.inst	0x2f726f68 ; undefined
      90:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
      94:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
      98:	54442f31 	.inst	0x54442f31 ; undefined
      9c:	6f425f45 	.inst	0x6f425f45 ; undefined
      a0:	6f63746f 	uqshl	v15.2d, v3.2d, #35
      a4:	622f6564 	.inst	0x622f6564 ; undefined
      a8:	47006e69 	.inst	0x47006e69 ; undefined
      ac:	4120554e 	.inst	0x4120554e ; undefined
      b0:	2e322053 	usubl	v19.8h, v2.8b, v18.8b
      b4:	302e3432 	adr	x18, 5c739 <_stack_size+0x5b739>
      b8:	ad800100 	stp	q0, q0, [x8,#0]!
      bc:	04000009 	.inst	0x04000009 ; undefined
      c0:	00001400 	.inst	0x00001400 ; undefined
      c4:	89010800 	.inst	0x89010800 ; undefined
      c8:	01000001 	.inst	0x01000001 ; undefined
      cc:	00000289 	.inst	0x00000289 ; undefined
      d0:	03000038 	.inst	0x03000038 ; undefined
      d4:	00000000 	.inst	0x00000000 ; undefined
      d8:	000002ec 	.inst	0x000002ec ; undefined
      dc:	00000000 	.inst	0x00000000 ; undefined
      e0:	00000094 	.inst	0x00000094 ; undefined
      e4:	00060102 	.inst	0x00060102 ; undefined
      e8:	02000001 	.inst	0x02000001 ; undefined
      ec:	002b0502 	.inst	0x002b0502 ; NYI
      f0:	04030000 	.inst	0x04030000 ; undefined
      f4:	746e6905 	.inst	0x746e6905 ; undefined
      f8:	05080200 	.inst	0x05080200 ; undefined
      fc:	000000a9 	.inst	0x000000a9 ; undefined
     100:	fe080102 	.inst	0xfe080102 ; undefined
     104:	02000000 	.inst	0x02000000 ; undefined
     108:	01310702 	.inst	0x01310702 ; undefined
     10c:	04020000 	.inst	0x04020000 ; undefined
     110:	00011607 	.inst	0x00011607 ; undefined
     114:	07080200 	.inst	0x07080200 ; undefined
     118:	00000111 	.inst	0x00000111 ; undefined
     11c:	00008504 	.inst	0x00008504 ; undefined
     120:	5a7a0200 	.inst	0x5a7a0200 ; undefined
     124:	04000000 	.inst	0x04000000 ; undefined
     128:	0000003f 	.inst	0x0000003f ; undefined
     12c:	00531103 	.inst	0x00531103 ; undefined
     130:	f5040000 	.inst	0xf5040000 ; undefined
     134:	03000002 	.inst	0x03000002 ; undefined
     138:	00008213 	.inst	0x00008213 ; undefined
     13c:	07080200 	.inst	0x07080200 ; undefined
     140:	0000010c 	.inst	0x0000010c ; undefined
     144:	a4050802 	.inst	0xa4050802 ; undefined
     148:	05000000 	.inst	0x05000000 ; undefined
     14c:	000002fc 	.inst	0x000002fc ; undefined
     150:	006c1a01 	.inst	0x006c1a01 ; undefined
     154:	ac030000 	stnp	q0, q0, [x0,#96]
     158:	06000000 	.inst	0x06000000 ; undefined
     15c:	006c6176 	.inst	0x006c6176 ; undefined
     160:	00771c01 	.inst	0x00771c01 ; undefined
     164:	07000000 	.inst	0x07000000 ; undefined
     168:	00000046 	.inst	0x00000046 ; undefined
     16c:	c4032101 	.inst	0xc4032101 ; undefined
     170:	08000000 	stxrb	w0, w0, [x0]
     174:	006c6176 	.inst	0x006c6176 ; undefined
     178:	006c2101 	.inst	0x006c2101 ; undefined
     17c:	07000000 	.inst	0x07000000 ; undefined
     180:	000000ea 	.inst	0x000000ea ; undefined
     184:	e9012701 	.inst	0xe9012701 ; undefined
     188:	06000000 	.inst	0x06000000 ; undefined
     18c:	29010069 	stp	w9, w0, [x3,#8]
     190:	000000e9 	.inst	0x000000e9 ; undefined
     194:	00014409 	.inst	0x00014409 ; undefined
     198:	37300100 	tbnz	w0, #6, 1b8 <MPIDR_EL1_AFF3_LSB+0x198>
     19c:	00000000 	.inst	0x00000000 ; undefined
     1a0:	00000a0a 	.inst	0x00000a0a ; undefined
     1a4:	0000370b 	.inst	0x0000370b ; undefined
     1a8:	016b0c00 	.inst	0x016b0c00 ; undefined
     1ac:	30010000 	adr	x0, 21ad <_stack_size+0x11ad>
     1b0:	4d070101 	.inst	0x4d070101 ; undefined
     1b4:	01000001 	.inst	0x01000001 ; undefined
     1b8:	011a0136 	.inst	0x011a0136 ; undefined
     1bc:	72060000 	ands	w0, w0, #0x4000000
     1c0:	01006765 	.inst	0x01006765 ; undefined
     1c4:	00007738 	.inst	0x00007738 ; undefined
     1c8:	012b0d00 	.inst	0x012b0d00 ; undefined
     1cc:	39010000 	strb	w0, [x0,#64]
     1d0:	0000006c 	.inst	0x0000006c ; undefined
     1d4:	00150e00 	.inst	0x00150e00 ; undefined
     1d8:	ce010000 	.inst	0xce010000 ; undefined
     1dc:	00000037 	.inst	0x00000037 ; undefined
     1e0:	00000f01 	.inst	0x00000f01 ; undefined
     1e4:	ac010000 	stnp	q0, q0, [x0,#32]
     1e8:	03000038 	.inst	0x03000038 ; undefined
     1ec:	00000000 	.inst	0x00000000 ; undefined
     1f0:	00000014 	.inst	0x00000014 ; undefined
     1f4:	00000000 	.inst	0x00000000 ; undefined
     1f8:	01699c01 	.inst	0x01699c01 ; undefined
     1fc:	5c100000 	ldr	d0, 201fc <_stack_size+0x1f1fc>
     200:	01000000 	.inst	0x01000000 ; undefined
     204:	000150ae 	.inst	0x000150ae ; undefined
     208:	11000a00 	add	w0, w16, #0x2
     20c:	000000dc 	.inst	0x000000dc ; undefined
     210:	0053af01 	.inst	0x0053af01 ; undefined
     214:	4c120000 	.inst	0x4c120000 ; undefined
     218:	00030000 	.inst	0x00030000 ; undefined
     21c:	56000000 	.inst	0x56000000 ; undefined
     220:	00000009 	.inst	0x00000009 ; undefined
     224:	00008f0f 	.inst	0x00008f0f ; undefined
     228:	4cbe0100 	.inst	0x4cbe0100 ; undefined
     22c:	00030000 	.inst	0x00030000 ; undefined
     230:	40000000 	.inst	0x40000000 ; undefined
     234:	00000000 	.inst	0x00000000 ; undefined
     238:	01000000 	.inst	0x01000000 ; undefined
     23c:	0002269c 	.inst	0x0002269c ; undefined
     240:	00351300 	.inst	0x00351300 ; NYI
     244:	be010000 	.inst	0xbe010000 ; undefined
     248:	0000006c 	.inst	0x0000006c ; undefined
     24c:	00000000 	.inst	0x00000000 ; undefined
     250:	00005413 	.inst	0x00005413 ; undefined
     254:	6cbe0100 	stp	d0, d0, [x8],#-32
     258:	39000000 	strb	w0, [x0]
     25c:	14000000 	b	25c <MPIDR_EL1_AFF3_LSB+0x23c>
     260:	00000170 	.inst	0x00000170 ; undefined
     264:	01bac001 	.inst	0x01bac001 ; undefined
     268:	6c150000 	stnp	d0, d0, [x0,#336]
     26c:	15000000 	b	400026c <_stack_base+0xff2aec>
     270:	0000006c 	.inst	0x0000006c ; undefined
     274:	00691600 	.inst	0x00691600 ; undefined
     278:	006cc101 	.inst	0x006cc101 ; undefined
     27c:	17000000 	b	fffffffffc00027c <SMC_ID_HW_RSA+0xffffffff77ff0375>
     280:	00000aa5 	.inst	0x00000aa5 ; undefined
     284:	0226c201 	.inst	0x0226c201 ; undefined
     288:	11000000 	add	w0, w0, #0x0
     28c:	000000dc 	.inst	0x000000dc ; undefined
     290:	0053c301 	.inst	0x0053c301 ; undefined
     294:	ee180000 	.inst	0xee180000 ; undefined
     298:	60000000 	.inst	0x60000000 ; undefined
     29c:	00030000 	.inst	0x00030000 ; undefined
     2a0:	14000000 	b	2a0 <MPIDR_EL1_AFF3_LSB+0x280>
     2a4:	00000000 	.inst	0x00000000 ; undefined
     2a8:	01000000 	.inst	0x01000000 ; undefined
     2ac:	00ee18c9 	.inst	0x00ee18c9 ; undefined
     2b0:	00780000 	.inst	0x00780000 ; undefined
     2b4:	00000300 	.inst	0x00000300 ; undefined
     2b8:	000c0000 	.inst	0x000c0000 ; undefined
     2bc:	00000000 	.inst	0x00000000 ; undefined
     2c0:	cb010000 	sub	x0, x0, x1
     2c4:	00007819 	.inst	0x00007819 ; undefined
     2c8:	00000003 	.inst	0x00000003 ; undefined
     2cc:	00096400 	.inst	0x00096400 ; undefined
     2d0:	50011a00 	adr	x0, 2612 <_stack_size+0x1612>
     2d4:	5001f303 	adr	x3, 4136 <_stack_size+0x3136>
     2d8:	0351011a 	.inst	0x0351011a ; undefined
     2dc:	005101f3 	.inst	0x005101f3 ; undefined
     2e0:	6c081b00 	stnp	d0, d6, [x24,#128]
     2e4:	0f000000 	.inst	0x0f000000 ; undefined
     2e8:	000000ce 	.inst	0x000000ce ; undefined
     2ec:	008cf901 	.inst	0x008cf901 ; undefined
     2f0:	00000300 	.inst	0x00000300 ; undefined
     2f4:	00340000 	.inst	0x00340000 ; NYI
     2f8:	00000000 	.inst	0x00000000 ; undefined
     2fc:	9c010000 	ldr	q0, 22fc <_stack_size+0x12fc>
     300:	00000342 	.inst	0x00000342 ; undefined
     304:	00012b1c 	.inst	0x00012b1c ; undefined
     308:	6cfb0100 	ldp	d0, d0, [x8],#-80
     30c:	72000000 	ands	w0, w0, #0x1
     310:	10000000 	adr	x0, 310 <MPIDR_EL1_AFF3_LSB+0x2f0>
     314:	00000243 	.inst	0x00000243 ; undefined
     318:	0265fc01 	.inst	0x0265fc01 ; undefined
     31c:	000a0000 	.inst	0x000a0000 ; undefined
     320:	00025f10 	.inst	0x00025f10 ; undefined
     324:	72fd0100 	.inst	0x72fd0100 ; undefined
     328:	0a000002 	and	w2, w0, w0
     32c:	00901d00 	.inst	0x00901d00 ; undefined
     330:	00900000 	.inst	0x00900000 ; undefined
     334:	00000300 	.inst	0x00000300 ; undefined
     338:	00040000 	.inst	0x00040000 ; undefined
     33c:	00000000 	.inst	0x00000000 ; undefined
     340:	01010000 	.inst	0x01010000 ; undefined
     344:	0002aa01 	.inst	0x0002aa01 ; undefined
     348:	00901e00 	.inst	0x00901e00 ; undefined
     34c:	00000300 	.inst	0x00000300 ; undefined
     350:	00040000 	.inst	0x00040000 ; undefined
     354:	00000000 	.inst	0x00000000 ; undefined
     358:	a01f0000 	.inst	0xa01f0000 ; undefined
     35c:	c0000000 	.inst	0xc0000000 ; undefined
     360:	00000000 	.inst	0x00000000 ; undefined
     364:	00ac1d00 	.inst	0x00ac1d00 ; undefined
     368:	00980000 	.inst	0x00980000 ; undefined
     36c:	00000300 	.inst	0x00000300 ; undefined
     370:	00080000 	.inst	0x00080000 ; undefined
     374:	00000000 	.inst	0x00000000 ; undefined
     378:	03010000 	.inst	0x03010000 ; undefined
     37c:	0002d001 	.inst	0x0002d001 ; undefined
     380:	00b82000 	.inst	0x00b82000 ; undefined
     384:	00e30000 	.inst	0x00e30000 ; undefined
     388:	1d000000 	.inst	0x1d000000 ; undefined
     38c:	000000c4 	.inst	0x000000c4 ; undefined
     390:	030000a0 	.inst	0x030000a0 ; undefined
     394:	00000000 	.inst	0x00000000 ; undefined
     398:	00000014 	.inst	0x00000014 ; undefined
     39c:	00000000 	.inst	0x00000000 ; undefined
     3a0:	27010401 	.inst	0x27010401 ; undefined
     3a4:	1e000003 	.inst	0x1e000003 ; undefined
     3a8:	030000a0 	.inst	0x030000a0 ; undefined
     3ac:	00000000 	.inst	0x00000000 ; undefined
     3b0:	00000014 	.inst	0x00000014 ; undefined
     3b4:	00000000 	.inst	0x00000000 ; undefined
     3b8:	0000d021 	.inst	0x0000d021 ; undefined
     3bc:	00b41900 	.inst	0x00b41900 ; undefined
     3c0:	00000300 	.inst	0x00000300 ; undefined
     3c4:	097a0000 	.inst	0x097a0000 ; undefined
     3c8:	011a0000 	.inst	0x011a0000 ; undefined
     3cc:	1a300150 	.inst	0x1a300150 ; undefined
     3d0:	30015101 	adr	x1, 2df1 <_stack_size+0x1df1>
     3d4:	0152011a 	.inst	0x0152011a ; undefined
     3d8:	53011a30 	ubfx	w16, w17, #1, #6
     3dc:	00640802 	.inst	0x00640802 ; undefined
     3e0:	b8220000 	ldadd	w2, w0, [x0]
     3e4:	00030000 	.inst	0x00030000 ; undefined
     3e8:	8b000000 	add	x0, x0, x0
     3ec:	12000009 	and	w9, w0, #0x1
     3f0:	030000c0 	.inst	0x030000c0 ; undefined
     3f4:	00000000 	.inst	0x00000000 ; undefined
     3f8:	00000998 	.inst	0x00000998 ; undefined
     3fc:	00210700 	.inst	0x00210700 ; NYI
     400:	57010000 	.inst	0x57010000 ; undefined
     404:	00039701 	.inst	0x00039701 ; undefined
     408:	0aa50d00 	bic	w0, w8, w5, asr #3
     40c:	59010000 	.inst	0x59010000 ; undefined
     410:	00000077 	.inst	0x00000077 ; undefined
     414:	00616f06 	.inst	0x00616f06 ; undefined
     418:	00775901 	.inst	0x00775901 ; undefined
     41c:	2b0d0000 	adds	w0, w0, w13
     420:	01000001 	.inst	0x01000001 ; undefined
     424:	00006c5a 	.inst	0x00006c5a ; undefined
     428:	02e40d00 	.inst	0x02e40d00 ; undefined
     42c:	5b010000 	.inst	0x5b010000 ; undefined
     430:	00000077 	.inst	0x00000077 ; undefined
     434:	01006906 	.inst	0x01006906 ; undefined
     438:	0000775c 	.inst	0x0000775c ; undefined
     43c:	006a0600 	.inst	0x006a0600 ; undefined
     440:	00775c01 	.inst	0x00775c01 ; undefined
     444:	f30d0000 	.inst	0xf30d0000 ; undefined
     448:	01000000 	.inst	0x01000000 ; undefined
     44c:	0003975d 	.inst	0x0003975d ; undefined
     450:	081b0000 	stxrb	w27, w0, [x0]
     454:	00000077 	.inst	0x00000077 ; undefined
     458:	0002780f 	.inst	0x0002780f ; undefined
     45c:	c0d30100 	.inst	0xc0d30100 ; undefined
     460:	00030000 	.inst	0x00030000 ; undefined
     464:	e8000000 	.inst	0xe8000000 ; undefined
     468:	00000001 	.inst	0x00000001 ; undefined
     46c:	01000000 	.inst	0x01000000 ; undefined
     470:	00073e9c 	.inst	0x00073e9c ; undefined
     474:	01231300 	.inst	0x01231300 ; undefined
     478:	d3010000 	.inst	0xd3010000 ; undefined
     47c:	0000006c 	.inst	0x0000006c ; undefined
     480:	0000011d 	.inst	0x0000011d ; undefined
     484:	00012b1c 	.inst	0x00012b1c ; undefined
     488:	6cd50100 	ldp	d0, d0, [x8],#336
     48c:	bb000000 	.inst	0xbb000000 ; undefined
     490:	1c000001 	ldr	s1, 490 <MPIDR_EL1_AFF3_LSB+0x470>
     494:	00000161 	.inst	0x00000161 ; undefined
     498:	006cd501 	.inst	0x006cd501 ; undefined
     49c:	02560000 	.inst	0x02560000 ; undefined
     4a0:	b2100000 	orr	x0, x0, #0x1000000010000
     4a4:	01000000 	.inst	0x01000000 ; undefined
     4a8:	0003f4d6 	.inst	0x0003f4d6 ; undefined
     4ac:	10000a00 	adr	x0, 5ec <MPIDR_EL1_AFF3_LSB+0x5cc>
     4b0:	0000025f 	.inst	0x0000025f ; undefined
     4b4:	0401d701 	.inst	0x0401d701 ; undefined
     4b8:	000a0000 	.inst	0x000a0000 ; undefined
     4bc:	00005c10 	.inst	0x00005c10 ; undefined
     4c0:	0ed80100 	.inst	0x0ed80100 ; undefined
     4c4:	0a000004 	and	w4, w0, w0
     4c8:	00902300 	.inst	0x00902300 ; undefined
     4cc:	00cc0000 	.inst	0x00cc0000 ; undefined
     4d0:	00000300 	.inst	0x00000300 ; undefined
     4d4:	00040000 	.inst	0x00040000 ; undefined
     4d8:	00000000 	.inst	0x00000000 ; undefined
     4dc:	db010000 	.inst	0xdb010000 ; undefined
     4e0:	00000445 	.inst	0x00000445 ; undefined
     4e4:	0000cc1e 	.inst	0x0000cc1e ; undefined
     4e8:	00000003 	.inst	0x00000003 ; undefined
     4ec:	00000400 	.inst	0x00000400 ; undefined
     4f0:	00000000 	.inst	0x00000000 ; undefined
     4f4:	00a01f00 	.inst	0x00a01f00 ; undefined
     4f8:	02a20000 	.inst	0x02a20000 ; undefined
     4fc:	00000000 	.inst	0x00000000 ; undefined
     500:	0000ac23 	.inst	0x0000ac23 ; undefined
     504:	0000d400 	.inst	0x0000d400 ; undefined
     508:	00000003 	.inst	0x00000003 ; undefined
     50c:	00000800 	.inst	0x00000800 ; undefined
     510:	00000000 	.inst	0x00000000 ; undefined
     514:	6add0100 	ands	w0, w8, w29, ror #0
     518:	20000004 	.inst	0x20000004 ; undefined
     51c:	000000b8 	.inst	0x000000b8 ; undefined
     520:	000002eb 	.inst	0x000002eb ; undefined
     524:	00c42300 	.inst	0x00c42300 ; undefined
     528:	00dc0000 	.inst	0x00dc0000 ; undefined
     52c:	00000300 	.inst	0x00000300 ; undefined
     530:	00140000 	.inst	0x00140000 ; undefined
     534:	00000000 	.inst	0x00000000 ; undefined
     538:	de010000 	.inst	0xde010000 ; undefined
     53c:	000004c0 	.inst	0x000004c0 ; undefined
     540:	0000dc1e 	.inst	0x0000dc1e ; undefined
     544:	00000003 	.inst	0x00000003 ; undefined
     548:	00001400 	.inst	0x00001400 ; undefined
     54c:	00000000 	.inst	0x00000000 ; undefined
     550:	00d02100 	.inst	0x00d02100 ; undefined
     554:	f0190000 	adrp	x0, 32003000 <_stack_base+0x2eff5880>
     558:	00030000 	.inst	0x00030000 ; undefined
     55c:	7a000000 	sbcs	w0, w0, w0
     560:	1a000009 	adc	w9, w0, w0
     564:	30015001 	adr	x1, 2f65 <_stack_size+0x1f65>
     568:	0151011a 	.inst	0x0151011a ; undefined
     56c:	52011a30 	eor	w16, w17, #0x8000003f
     570:	011a3001 	.inst	0x011a3001 ; undefined
     574:	64080253 	.inst	0x64080253 ; undefined
     578:	23000000 	.inst	0x23000000 ; undefined
     57c:	0000011a 	.inst	0x0000011a ; undefined
     580:	030000f8 	.inst	0x030000f8 ; undefined
     584:	00000000 	.inst	0x00000000 ; undefined
     588:	00000004 	.inst	0x00000004 ; undefined
     58c:	00000000 	.inst	0x00000000 ; undefined
     590:	050fe301 	.inst	0x050fe301 ; undefined
     594:	90240000 	adrp	x0, 48000000 <MPIDR_EL1_U+0x8000000>
     598:	f8000000 	stur	x0, [x0]
     59c:	00030000 	.inst	0x00030000 ; undefined
     5a0:	04000000 	.inst	0x04000000 ; undefined
     5a4:	00000000 	.inst	0x00000000 ; undefined
     5a8:	01000000 	.inst	0x01000000 ; undefined
     5ac:	00f81ed0 	.inst	0x00f81ed0 ; undefined
     5b0:	00000300 	.inst	0x00000300 ; undefined
     5b4:	00040000 	.inst	0x00040000 ; undefined
     5b8:	00000000 	.inst	0x00000000 ; undefined
     5bc:	a01f0000 	.inst	0xa01f0000 ; undefined
     5c0:	72000000 	ands	w0, w0, #0x1
     5c4:	00000003 	.inst	0x00000003 ; undefined
     5c8:	ac230000 	stnp	q0, q0, [x0,#-928]
     5cc:	1c000000 	ldr	s0, 5cc <MPIDR_EL1_AFF3_LSB+0x5ac>
     5d0:	00030001 	.inst	0x00030001 ; undefined
     5d4:	08000000 	stxrb	w0, w0, [x0]
     5d8:	00000000 	.inst	0x00000000 ; undefined
     5dc:	01000000 	.inst	0x01000000 ; undefined
     5e0:	000534f2 	.inst	0x000534f2 ; undefined
     5e4:	00b82000 	.inst	0x00b82000 ; undefined
     5e8:	03950000 	.inst	0x03950000 ; undefined
     5ec:	23000000 	.inst	0x23000000 ; undefined
     5f0:	000000c4 	.inst	0x000000c4 ; undefined
     5f4:	03000124 	.inst	0x03000124 ; undefined
     5f8:	00000000 	.inst	0x00000000 ; undefined
     5fc:	00000014 	.inst	0x00000014 ; undefined
     600:	00000000 	.inst	0x00000000 ; undefined
     604:	058af301 	.inst	0x058af301 ; undefined
     608:	241e0000 	.inst	0x241e0000 ; undefined
     60c:	00030001 	.inst	0x00030001 ; undefined
     610:	14000000 	b	610 <MPIDR_EL1_AFF3_LSB+0x5f0>
     614:	00000000 	.inst	0x00000000 ; undefined
     618:	21000000 	.inst	0x21000000 ; undefined
     61c:	000000d0 	.inst	0x000000d0 ; undefined
     620:	00013819 	.inst	0x00013819 ; undefined
     624:	00000003 	.inst	0x00000003 ; undefined
     628:	00097a00 	.inst	0x00097a00 ; undefined
     62c:	50011a00 	adr	x0, 296e <_stack_size+0x196e>
     630:	011a3001 	.inst	0x011a3001 ; undefined
     634:	1a300151 	.inst	0x1a300151 ; undefined
     638:	30015201 	adr	x1, 3079 <_stack_size+0x2079>
     63c:	0253011a 	.inst	0x0253011a ; undefined
     640:	00006408 	.inst	0x00006408 ; undefined
     644:	03422300 	.inst	0x03422300 ; undefined
     648:	01480000 	.inst	0x01480000 ; undefined
     64c:	00000300 	.inst	0x00000300 ; undefined
     650:	01500000 	.inst	0x01500000 ; undefined
     654:	00000000 	.inst	0x00000000 ; undefined
     658:	e4010000 	.inst	0xe4010000 ; undefined
     65c:	000006fc 	.inst	0x000006fc ; undefined
     660:	0001481e 	.inst	0x0001481e ; undefined
     664:	00000003 	.inst	0x00000003 ; undefined
     668:	00015000 	.inst	0x00015000 ; undefined
     66c:	00000000 	.inst	0x00000000 ; undefined
     670:	034e1f00 	.inst	0x034e1f00 ; undefined
     674:	03c20000 	.inst	0x03c20000 ; undefined
     678:	591f0000 	.inst	0x591f0000 ; undefined
     67c:	16000003 	b	fffffffff8000688 <SMC_ID_HW_RSA+0xffffffff73ff0781>
     680:	1f000004 	fmadd	s4, s0, s0, s0
     684:	00000363 	.inst	0x00000363 ; undefined
     688:	00000460 	.inst	0x00000460 ; undefined
     68c:	00036e1f 	.inst	0x00036e1f ; undefined
     690:	00048400 	.inst	0x00048400 ; undefined
     694:	03791f00 	.inst	0x03791f00 ; undefined
     698:	05160000 	.inst	0x05160000 ; undefined
     69c:	821f0000 	.inst	0x821f0000 ; undefined
     6a0:	4d000003 	st1	{v3.b}[8], [x0]
     6a4:	1f000005 	fmadd	s5, s0, s0, s0
     6a8:	0000038b 	.inst	0x0000038b ; undefined
     6ac:	00000584 	.inst	0x00000584 ; undefined
     6b0:	0000f723 	.inst	0x0000f723 ; undefined
     6b4:	00014800 	.inst	0x00014800 ; undefined
     6b8:	00000003 	.inst	0x00000003 ; undefined
     6bc:	00001800 	.inst	0x00001800 ; undefined
     6c0:	00000000 	.inst	0x00000000 ; undefined
     6c4:	35640100 	cbnz	w0, c86e4 <_stack_size+0xc76e4>
     6c8:	1e000006 	.inst	0x1e000006 ; undefined
     6cc:	03000148 	.inst	0x03000148 ; undefined
     6d0:	00000000 	.inst	0x00000000 ; undefined
     6d4:	00000018 	.inst	0x00000018 ; undefined
     6d8:	00000000 	.inst	0x00000000 ; undefined
     6dc:	0001031f 	.inst	0x0001031f ; undefined
     6e0:	0005de00 	.inst	0x0005de00 ; undefined
     6e4:	010e1f00 	.inst	0x010e1f00 ; undefined
     6e8:	06030000 	.inst	0x06030000 ; undefined
     6ec:	00000000 	.inst	0x00000000 ; undefined
     6f0:	0000ee18 	.inst	0x0000ee18 ; undefined
     6f4:	00016000 	.inst	0x00016000 ; undefined
     6f8:	00000003 	.inst	0x00000003 ; undefined
     6fc:	00001400 	.inst	0x00001400 ; undefined
     700:	00000000 	.inst	0x00000000 ; undefined
     704:	23650100 	.inst	0x23650100 ; undefined
     708:	00000090 	.inst	0x00000090 ; undefined
     70c:	03000274 	.inst	0x03000274 ; undefined
     710:	00000000 	.inst	0x00000000 ; undefined
     714:	00000004 	.inst	0x00000004 ; undefined
     718:	00000000 	.inst	0x00000000 ; undefined
     71c:	0683a301 	.inst	0x0683a301 ; undefined
     720:	741e0000 	.inst	0x741e0000 ; undefined
     724:	00030002 	.inst	0x00030002 ; undefined
     728:	04000000 	.inst	0x04000000 ; undefined
     72c:	00000000 	.inst	0x00000000 ; undefined
     730:	1f000000 	fmadd	s0, s0, s0, s0
     734:	000000a0 	.inst	0x000000a0 ; undefined
     738:	00000629 	.inst	0x00000629 ; undefined
     73c:	ac230000 	stnp	q0, q0, [x0,#-928]
     740:	7c000000 	stur	h0, [x0]
     744:	00030002 	.inst	0x00030002 ; undefined
     748:	08000000 	stxrb	w0, w0, [x0]
     74c:	00000000 	.inst	0x00000000 ; undefined
     750:	01000000 	.inst	0x01000000 ; undefined
     754:	0006a8a4 	.inst	0x0006a8a4 ; undefined
     758:	00b82000 	.inst	0x00b82000 ; undefined
     75c:	064c0000 	.inst	0x064c0000 ; undefined
     760:	24000000 	.inst	0x24000000 ; undefined
     764:	000000c4 	.inst	0x000000c4 ; undefined
     768:	03000284 	.inst	0x03000284 ; undefined
     76c:	00000000 	.inst	0x00000000 ; undefined
     770:	00000014 	.inst	0x00000014 ; undefined
     774:	00000000 	.inst	0x00000000 ; undefined
     778:	841ea501 	.inst	0x841ea501 ; undefined
     77c:	00030002 	.inst	0x00030002 ; undefined
     780:	14000000 	b	780 <MPIDR_EL1_AFF3_LSB+0x760>
     784:	00000000 	.inst	0x00000000 ; undefined
     788:	21000000 	.inst	0x21000000 ; undefined
     78c:	000000d0 	.inst	0x000000d0 ; undefined
     790:	00029819 	.inst	0x00029819 ; undefined
     794:	00000003 	.inst	0x00000003 ; undefined
     798:	00097a00 	.inst	0x00097a00 ; undefined
     79c:	50011a00 	adr	x0, 2ade <_stack_size+0x1ade>
     7a0:	011a3001 	.inst	0x011a3001 ; undefined
     7a4:	1a300151 	.inst	0x1a300151 ; undefined
     7a8:	30015201 	adr	x1, 31e9 <_stack_size+0x21e9>
     7ac:	0253011a 	.inst	0x0253011a ; undefined
     7b0:	00006408 	.inst	0x00006408 ; undefined
     7b4:	22000000 	.inst	0x22000000 ; undefined
     7b8:	030000f4 	.inst	0x030000f4 ; undefined
     7bc:	00000000 	.inst	0x00000000 ; undefined
     7c0:	000009a6 	.inst	0x000009a6 ; undefined
     7c4:	0000f822 	.inst	0x0000f822 ; undefined
     7c8:	00000003 	.inst	0x00000003 ; undefined
     7cc:	00099800 	.inst	0x00099800 ; undefined
     7d0:	013c2200 	.inst	0x013c2200 ; undefined
     7d4:	00000300 	.inst	0x00000300 ; undefined
     7d8:	09560000 	.inst	0x09560000 ; undefined
     7dc:	48120000 	stxrh	w18, w0, [x0]
     7e0:	00030001 	.inst	0x00030001 ; undefined
     7e4:	98000000 	ldrsw	x0, 7e4 <MPIDR_EL1_AFF3_LSB+0x7c4>
     7e8:	12000009 	and	w9, w0, #0x1
     7ec:	030002a8 	.inst	0x030002a8 ; undefined
     7f0:	00000000 	.inst	0x00000000 ; undefined
     7f4:	0000022c 	.inst	0x0000022c ; undefined
     7f8:	00732500 	.inst	0x00732500 ; undefined
     7fc:	0f010000 	.inst	0x0f010000 ; undefined
     800:	0002a801 	.inst	0x0002a801 ; undefined
     804:	00000003 	.inst	0x00000003 ; undefined
     808:	00006400 	.inst	0x00006400 ; undefined
     80c:	00000000 	.inst	0x00000000 ; undefined
     810:	349c0100 	cbz	w0, fffffffffff38830 <SMC_ID_HW_RSA+0xffffffff7bf28929>
     814:	26000009 	.inst	0x26000009 ; undefined
     818:	000000b2 	.inst	0x000000b2 ; undefined
     81c:	6a011101 	ands	w1, w8, w1, lsl #4
     820:	0a000007 	and	w7, w0, w0
     824:	005c2600 	.inst	0x005c2600 ; undefined
     828:	12010000 	and	w0, w0, #0x80000000
     82c:	00077801 	.inst	0x00077801 ; undefined
     830:	26000a00 	.inst	0x26000a00 ; undefined
     834:	0000025f 	.inst	0x0000025f ; undefined
     838:	86011301 	.inst	0x86011301 ; undefined
     83c:	0a000007 	and	w7, w0, w0
     840:	012b2700 	.inst	0x012b2700 ; undefined
     844:	16010000 	b	fffffffff8040844 <SMC_ID_HW_RSA+0xffffffff7403093d>
     848:	00006c01 	.inst	0x00006c01 ; undefined
     84c:	01612800 	.inst	0x01612800 ; undefined
     850:	16010000 	b	fffffffff8040850 <SMC_ID_HW_RSA+0xffffffff74030949>
     854:	00006c01 	.inst	0x00006c01 ; undefined
     858:	00068600 	.inst	0x00068600 ; undefined
     85c:	00901d00 	.inst	0x00901d00 ; undefined
     860:	02ac0000 	.inst	0x02ac0000 ; undefined
     864:	00000300 	.inst	0x00000300 ; undefined
     868:	00040000 	.inst	0x00040000 ; undefined
     86c:	00000000 	.inst	0x00000000 ; undefined
     870:	18010000 	ldr	w0, 2870 <_stack_size+0x1870>
     874:	0007da01 	.inst	0x0007da01 ; undefined
     878:	02ac1e00 	.inst	0x02ac1e00 ; undefined
     87c:	00000300 	.inst	0x00000300 ; undefined
     880:	00040000 	.inst	0x00040000 ; undefined
     884:	00000000 	.inst	0x00000000 ; undefined
     888:	a01f0000 	.inst	0xa01f0000 ; undefined
     88c:	be000000 	.inst	0xbe000000 ; undefined
     890:	00000006 	.inst	0x00000006 ; undefined
     894:	00ac1d00 	.inst	0x00ac1d00 ; undefined
     898:	02b40000 	.inst	0x02b40000 ; undefined
     89c:	00000300 	.inst	0x00000300 ; undefined
     8a0:	00080000 	.inst	0x00080000 ; undefined
     8a4:	00000000 	.inst	0x00000000 ; undefined
     8a8:	1b010000 	madd	w0, w0, w1, w0
     8ac:	00080001 	.inst	0x00080001 ; undefined
     8b0:	00b82000 	.inst	0x00b82000 ; undefined
     8b4:	06e10000 	.inst	0x06e10000 ; undefined
     8b8:	1d000000 	.inst	0x1d000000 ; undefined
     8bc:	000000c4 	.inst	0x000000c4 ; undefined
     8c0:	030002bc 	.inst	0x030002bc ; undefined
     8c4:	00000000 	.inst	0x00000000 ; undefined
     8c8:	00000014 	.inst	0x00000014 ; undefined
     8cc:	00000000 	.inst	0x00000000 ; undefined
     8d0:	57011c01 	.inst	0x57011c01 ; undefined
     8d4:	1e000008 	.inst	0x1e000008 ; undefined
     8d8:	030002bc 	.inst	0x030002bc ; undefined
     8dc:	00000000 	.inst	0x00000000 ; undefined
     8e0:	00000014 	.inst	0x00000014 ; undefined
     8e4:	00000000 	.inst	0x00000000 ; undefined
     8e8:	0000d021 	.inst	0x0000d021 ; undefined
     8ec:	02d01900 	.inst	0x02d01900 ; undefined
     8f0:	00000300 	.inst	0x00000300 ; undefined
     8f4:	097a0000 	.inst	0x097a0000 ; undefined
     8f8:	011a0000 	.inst	0x011a0000 ; undefined
     8fc:	1a300150 	.inst	0x1a300150 ; undefined
     900:	30015101 	adr	x1, 3321 <_stack_size+0x2321>
     904:	0152011a 	.inst	0x0152011a ; undefined
     908:	53011a30 	ubfx	w16, w17, #1, #6
     90c:	00640802 	.inst	0x00640802 ; undefined
     910:	901d0000 	adrp	x0, 3a000000 <_stack_base+0x36ff2880>
     914:	d4000000 	.inst	0xd4000000 ; undefined
     918:	00030002 	.inst	0x00030002 ; undefined
     91c:	04000000 	.inst	0x04000000 ; undefined
     920:	00000000 	.inst	0x00000000 ; undefined
     924:	01000000 	.inst	0x01000000 ; undefined
     928:	088f011f 	.inst	0x088f011f ; undefined
     92c:	d41e0000 	.inst	0xd41e0000 ; undefined
     930:	00030002 	.inst	0x00030002 ; undefined
     934:	04000000 	.inst	0x04000000 ; undefined
     938:	00000000 	.inst	0x00000000 ; undefined
     93c:	1f000000 	fmadd	s0, s0, s0, s0
     940:	000000a0 	.inst	0x000000a0 ; undefined
     944:	0000071d 	.inst	0x0000071d ; undefined
     948:	ac1d0000 	stnp	q0, q0, [x0,#928]
     94c:	e0000000 	.inst	0xe0000000 ; undefined
     950:	00030002 	.inst	0x00030002 ; undefined
     954:	08000000 	stxrb	w0, w0, [x0]
     958:	00000000 	.inst	0x00000000 ; undefined
     95c:	01000000 	.inst	0x01000000 ; undefined
     960:	08b50125 	.inst	0x08b50125 ; undefined
     964:	b8200000 	ldadd	w0, w0, [x0]
     968:	40000000 	.inst	0x40000000 ; undefined
     96c:	00000007 	.inst	0x00000007 ; undefined
     970:	0000c41d 	.inst	0x0000c41d ; undefined
     974:	0002e800 	.inst	0x0002e800 ; undefined
     978:	00000003 	.inst	0x00000003 ; undefined
     97c:	00001400 	.inst	0x00001400 ; undefined
     980:	00000000 	.inst	0x00000000 ; undefined
     984:	01270100 	.inst	0x01270100 ; undefined
     988:	0000090c 	.inst	0x0000090c ; undefined
     98c:	0002e81e 	.inst	0x0002e81e ; undefined
     990:	00000003 	.inst	0x00000003 ; undefined
     994:	00001400 	.inst	0x00001400 ; undefined
     998:	00000000 	.inst	0x00000000 ; undefined
     99c:	00d02100 	.inst	0x00d02100 ; undefined
     9a0:	fc190000 	stur	d0, [x0,#-112]
     9a4:	00030002 	.inst	0x00030002 ; undefined
     9a8:	7a000000 	sbcs	w0, w0, w0
     9ac:	1a000009 	adc	w9, w0, w0
     9b0:	30015001 	adr	x1, 33b1 <_stack_size+0x23b1>
     9b4:	0151011a 	.inst	0x0151011a ; undefined
     9b8:	52011a30 	eor	w16, w17, #0x8000003f
     9bc:	011a3001 	.inst	0x011a3001 ; undefined
     9c0:	64080253 	.inst	0x64080253 ; undefined
     9c4:	22000000 	.inst	0x22000000 ; undefined
     9c8:	030002d4 	.inst	0x030002d4 ; undefined
     9cc:	00000000 	.inst	0x00000000 ; undefined
     9d0:	000009a6 	.inst	0x000009a6 ; undefined
     9d4:	00030422 	.inst	0x00030422 ; undefined
     9d8:	00000003 	.inst	0x00000003 ; undefined
     9dc:	00095600 	.inst	0x00095600 ; undefined
     9e0:	030c1200 	.inst	0x030c1200 ; undefined
     9e4:	00000300 	.inst	0x00000300 ; undefined
     9e8:	09980000 	.inst	0x09980000 ; undefined
     9ec:	29000000 	stp	w0, w0, [x0]
     9f0:	000000ee 	.inst	0x000000ee ; undefined
     9f4:	0300030c 	.inst	0x0300030c ; undefined
     9f8:	00000000 	.inst	0x00000000 ; undefined
     9fc:	00000018 	.inst	0x00000018 ; undefined
     a00:	00000000 	.inst	0x00000000 ; undefined
     a04:	dc119c01 	.inst	0xdc119c01 ; undefined
     a08:	01000000 	.inst	0x01000000 ; undefined
     a0c:	000053c3 	.inst	0x000053c3 ; undefined
     a10:	005c2600 	.inst	0x005c2600 ; undefined
     a14:	12010000 	and	w0, w0, #0x80000000
     a18:	00096401 	.inst	0x00096401 ; undefined
     a1c:	14000a00 	b	321c <_stack_size+0x221c>
     a20:	00000170 	.inst	0x00000170 ; undefined
     a24:	097ac001 	.inst	0x097ac001 ; undefined
     a28:	6c150000 	stnp	d0, d0, [x0,#336]
     a2c:	15000000 	b	4000a2c <_stack_base+0xff32ac>
     a30:	0000006c 	.inst	0x0000006c ; undefined
     a34:	01442a00 	.inst	0x01442a00 ; undefined
     a38:	30010000 	adr	x0, 2a39 <_stack_size+0x1a39>
     a3c:	00000037 	.inst	0x00000037 ; undefined
     a40:	0000098b 	.inst	0x0000098b ; undefined
     a44:	4310000a 	.inst	0x4310000a ; undefined
     a48:	01000002 	.inst	0x01000002 ; undefined
     a4c:	000998fc 	.inst	0x000998fc ; undefined
     a50:	26000a00 	.inst	0x26000a00 ; undefined
     a54:	0000025f 	.inst	0x0000025f ; undefined
     a58:	a6011301 	.inst	0xa6011301 ; undefined
     a5c:	0a000009 	and	w9, w0, w0
     a60:	00b22b00 	.inst	0x00b22b00 ; undefined
     a64:	11010000 	add	w0, w0, #0x40
     a68:	00000a01 	.inst	0x00000a01 ; undefined
     a6c:	00000531 	.inst	0x00000531 ; undefined
     a70:	02790004 	.inst	0x02790004 ; undefined
     a74:	01080000 	.inst	0x01080000 ; undefined
     a78:	00000189 	.inst	0x00000189 ; undefined
     a7c:	00043601 	.inst	0x00043601 ; undefined
     a80:	00034700 	.inst	0x00034700 ; undefined
     a84:	00032400 	.inst	0x00032400 ; undefined
     a88:	00000003 	.inst	0x00000003 ; undefined
     a8c:	00013400 	.inst	0x00013400 ; undefined
     a90:	00000000 	.inst	0x00000000 ; undefined
     a94:	0002fa00 	.inst	0x0002fa00 ; undefined
     a98:	06010200 	.inst	0x06010200 ; undefined
     a9c:	00000100 	.inst	0x00000100 ; undefined
     aa0:	2b050202 	adds	w2, w16, w5
     aa4:	03000000 	.inst	0x03000000 ; undefined
     aa8:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
     aac:	08020074 	stxrb	w2, w20, [x3]
     ab0:	0000a905 	.inst	0x0000a905 ; undefined
     ab4:	08010200 	stxrb	w1, w0, [x16]
     ab8:	000000fe 	.inst	0x000000fe ; undefined
     abc:	31070202 	adds	w2, w16, #0x1c0
     ac0:	02000001 	.inst	0x02000001 ; undefined
     ac4:	01160704 	.inst	0x01160704 ; undefined
     ac8:	08020000 	stxrb	w2, w0, [x0]
     acc:	00011107 	.inst	0x00011107 ; undefined
     ad0:	00850400 	.inst	0x00850400 ; undefined
     ad4:	7a030000 	sbcs	w0, w0, w3
     ad8:	0000005e 	.inst	0x0000005e ; undefined
     adc:	00003f04 	.inst	0x00003f04 ; undefined
     ae0:	57110400 	.inst	0x57110400 ; undefined
     ae4:	04000000 	.inst	0x04000000 ; undefined
     ae8:	000002f5 	.inst	0x000002f5 ; undefined
     aec:	00861304 	.inst	0x00861304 ; undefined
     af0:	08020000 	stxrb	w2, w0, [x0]
     af4:	00010c07 	.inst	0x00010c07 ; undefined
     af8:	05080200 	.inst	0x05080200 ; undefined
     afc:	000000a4 	.inst	0x000000a4 ; undefined
     b00:	0003a905 	.inst	0x0003a905 ; undefined
     b04:	18040400 	ldr	w0, 8b84 <_stack_size+0x7b84>
     b08:	000000bf 	.inst	0x000000bf ; undefined
     b0c:	0004f906 	.inst	0x0004f906 ; undefined
     b10:	90060000 	adrp	x0, c000000 <_stack_base+0x8ff2880>
     b14:	01000004 	.inst	0x01000004 ; undefined
     b18:	0003e006 	.inst	0x0003e006 ; undefined
     b1c:	32060200 	orr	w0, w16, #0x4000000
     b20:	03000005 	.inst	0x03000005 ; undefined
     b24:	00032c06 	.inst	0x00032c06 ; undefined
     b28:	04000400 	.inst	0x04000400 ; undefined
     b2c:	00000408 	.inst	0x00000408 ; undefined
     b30:	00941f04 	.inst	0x00941f04 ; undefined
     b34:	08020000 	stxrb	w2, w0, [x0]
     b38:	00059d07 	.inst	0x00059d07 ; undefined
     b3c:	05f80500 	.inst	0x05f80500 ; undefined
     b40:	05040000 	.inst	0x05040000 ; undefined
     b44:	0000f089 	.inst	0x0000f089 ; undefined
     b48:	05410600 	.inst	0x05410600 ; undefined
     b4c:	06000000 	.inst	0x06000000 ; undefined
     b50:	000005dc 	.inst	0x000005dc ; undefined
     b54:	049d0601 	.inst	0x049d0601 ; undefined
     b58:	00020000 	.inst	0x00020000 ; undefined
     b5c:	00056a04 	.inst	0x00056a04 ; undefined
     b60:	d18e0500 	.inst	0xd18e0500 ; undefined
     b64:	02000000 	.inst	0x02000000 ; undefined
     b68:	01070801 	.inst	0x01070801 ; undefined
     b6c:	49070000 	.inst	0x49070000 ; undefined
     b70:	12000000 	and	w0, w0, #0x1
     b74:	08000001 	stxrb	w0, w1, [x0]
     b78:	000000ca 	.inst	0x000000ca ; undefined
     b7c:	960900ff 	bl	fffffffff8240f78 <SMC_ID_HW_RSA+0xffffffff74231071>
     b80:	10000003 	adr	x3, b80 <MPIDR_EL1_AFF3_LSB+0xb60>
     b84:	01612f06 	.inst	0x01612f06 ; undefined
     b88:	d30a0000 	.inst	0xd30a0000 ; undefined
     b8c:	06000013 	.inst	0x06000013 ; undefined
     b90:	00005730 	.inst	0x00005730 ; undefined
     b94:	3c0a0000 	stur	b0, [x0,#160]
     b98:	06000003 	.inst	0x06000003 ; undefined
     b9c:	00005731 	.inst	0x00005731 ; undefined
     ba0:	5a0a0400 	.inst	0x5a0a0400 ; undefined
     ba4:	06000008 	.inst	0x06000008 ; undefined
     ba8:	00005732 	.inst	0x00005732 ; undefined
     bac:	270b0800 	.inst	0x270b0800 ; undefined
     bb0:	06000004 	.inst	0x06000004 ; undefined
     bb4:	00005734 	.inst	0x00005734 ; undefined
     bb8:	1f010400 	fmadd	s0, s0, s1, s1
     bbc:	05b70b0c 	.inst	0x05b70b0c ; undefined
     bc0:	35060000 	cbnz	w0, cbc0 <_stack_size+0xbbc0>
     bc4:	00000057 	.inst	0x00000057 ; undefined
     bc8:	0c001f04 	.inst	0x0c001f04 ; undefined
     bcc:	03be0400 	.inst	0x03be0400 ; undefined
     bd0:	36060000 	tbz	w0, #0, ffffffffffffcbd0 <SMC_ID_HW_RSA+0xffffffff7bfeccc9>
     bd4:	00000112 	.inst	0x00000112 ; undefined
     bd8:	0018ca0c 	.inst	0x0018ca0c ; undefined
     bdc:	06040000 	.inst	0x06040000 ; undefined
     be0:	0001b738 	.inst	0x0001b738 ; undefined
     be4:	05b10a00 	.inst	0x05b10a00 ; undefined
     be8:	39060000 	strb	w0, [x0,#384]
     bec:	00000057 	.inst	0x00000057 ; undefined
     bf0:	03240a00 	.inst	0x03240a00 ; undefined
     bf4:	3a060000 	adcs	w0, w0, w6
     bf8:	00000057 	.inst	0x00000057 ; undefined
     bfc:	05b70a04 	.inst	0x05b70a04 ; undefined
     c00:	3b060000 	.inst	0x3b060000 ; undefined
     c04:	000001b7 	.inst	0x000001b7 ; undefined
     c08:	17e50a08 	b	ffffffffff943428 <SMC_ID_HW_RSA+0xffffffff7b933521>
     c0c:	3c060000 	stur	b0, [x0,#96]
     c10:	000001c7 	.inst	0x000001c7 ; undefined
     c14:	0cb00d10 	.inst	0x0cb00d10 ; undefined
     c18:	3d060000 	str	b0, [x0,#384]
     c1c:	00000102 	.inst	0x00000102 ; undefined
     c20:	07000300 	.inst	0x07000300 ; undefined
     c24:	00000049 	.inst	0x00000049 ; undefined
     c28:	000001c7 	.inst	0x000001c7 ; undefined
     c2c:	0000ca08 	.inst	0x0000ca08 ; undefined
     c30:	07000700 	.inst	0x07000700 ; undefined
     c34:	00000161 	.inst	0x00000161 ; undefined
     c38:	000001d7 	.inst	0x000001d7 ; undefined
     c3c:	0000ca08 	.inst	0x0000ca08 ; undefined
     c40:	04002e00 	.inst	0x04002e00 ; undefined
     c44:	00000412 	.inst	0x00000412 ; undefined
     c48:	016c3e06 	.inst	0x016c3e06 ; undefined
     c4c:	7a0e0000 	sbcs	w0, w0, w14
     c50:	02000003 	.inst	0x02000003 ; undefined
     c54:	00007060 	.inst	0x00007060 ; undefined
     c58:	540f0300 	b.eq	1ecb8 <_stack_size+0x1dcb8>
     c5c:	01000005 	.inst	0x01000005 ; undefined
     c60:	a60f015e 	.inst	0xa60f015e ; undefined
     c64:	01000005 	.inst	0x01000005 ; undefined
     c68:	f0100167 	adrp	x7, 2002f000 <_stack_base+0x1d021880>
     c6c:	01000005 	.inst	0x01000005 ; undefined
     c70:	0003247e 	.inst	0x0003247e ; undefined
     c74:	00000003 	.inst	0x00000003 ; undefined
     c78:	00013400 	.inst	0x00013400 ; undefined
     c7c:	00000000 	.inst	0x00000000 ; undefined
     c80:	f59c0100 	.inst	0xf59c0100 ; undefined
     c84:	11000003 	add	w3, w0, #0x0
     c88:	00746572 	.inst	0x00746572 ; undefined
     c8c:	003b8001 	.inst	0x003b8001 ; NYI
     c90:	07930000 	.inst	0x07930000 ; undefined
     c94:	ee120000 	.inst	0xee120000 ; undefined
     c98:	44000001 	.inst	0x44000001 ; undefined
     c9c:	00030003 	.inst	0x00030003 ; undefined
     ca0:	00000000 	.inst	0x00000000 ; undefined
     ca4:	01000000 	.inst	0x01000000 ; undefined
     ca8:	00025c89 	.inst	0x00025c89 ; undefined
     cac:	03581300 	.inst	0x03581300 ; undefined
     cb0:	00000300 	.inst	0x00000300 ; undefined
     cb4:	04b90000 	.inst	0x04b90000 ; undefined
     cb8:	60130000 	.inst	0x60130000 ; undefined
     cbc:	00030003 	.inst	0x00030003 ; undefined
     cc0:	c4000000 	.inst	0xc4000000 ; undefined
     cc4:	00000004 	.inst	0x00000004 ; undefined
     cc8:	0001f612 	.inst	0x0001f612 ; undefined
     ccc:	00036800 	.inst	0x00036800 ; undefined
     cd0:	00000003 	.inst	0x00000003 ; undefined
     cd4:	00004000 	.inst	0x00004000 ; undefined
     cd8:	ba8a0100 	.inst	0xba8a0100 ; undefined
     cdc:	14000002 	b	ce4 <MPIDR_EL1_AFF3_LSB+0xcc4>
     ce0:	030003b4 	.inst	0x030003b4 ; undefined
     ce4:	00000000 	.inst	0x00000000 ; undefined
     ce8:	000004cf 	.inst	0x000004cf ; undefined
     cec:	00000292 	.inst	0x00000292 ; undefined
     cf0:	09500115 	.inst	0x09500115 ; undefined
     cf4:	009c6803 	.inst	0x009c6803 ; undefined
     cf8:	00000003 	.inst	0x00000003 ; undefined
     cfc:	b8130000 	stur	w0, [x0,#-208]
     d00:	00030003 	.inst	0x00030003 ; undefined
     d04:	f0000000 	adrp	x0, 3000 <_stack_size+0x2000>
     d08:	13000004 	sbfx	w4, w0, #0, #1
     d0c:	030003bc 	.inst	0x030003bc ; undefined
     d10:	00000000 	.inst	0x00000000 ; undefined
     d14:	000004f7 	.inst	0x000004f7 ; undefined
     d18:	00043013 	.inst	0x00043013 ; undefined
     d1c:	00000003 	.inst	0x00000003 ; undefined
     d20:	0004fe00 	.inst	0x0004fe00 ; undefined
     d24:	e2160000 	.inst	0xe2160000 ; undefined
     d28:	14000001 	b	d2c <MPIDR_EL1_AFF3_LSB+0xd0c>
     d2c:	00030004 	.inst	0x00030004 ; undefined
     d30:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
     d34:	00000000 	.inst	0x00000000 ; undefined
     d38:	01000000 	.inst	0x01000000 ; undefined
     d3c:	034c14a4 	.inst	0x034c14a4 ; undefined
     d40:	00000300 	.inst	0x00000300 ; undefined
     d44:	04cf0000 	.inst	0x04cf0000 ; undefined
     d48:	030a0000 	.inst	0x030a0000 ; undefined
     d4c:	01150000 	.inst	0x01150000 ; undefined
     d50:	50030950 	adr	x16, 6e7a <_stack_size+0x5e7a>
     d54:	0003009c 	.inst	0x0003009c ; undefined
     d58:	15000000 	b	4000d58 <_stack_base+0xff35d8>
     d5c:	03095101 	.inst	0x03095101 ; undefined
     d60:	03009c40 	.inst	0x03009c40 ; undefined
     d64:	00000000 	.inst	0x00000000 ; undefined
     d68:	09520115 	.inst	0x09520115 ; undefined
     d6c:	009c3003 	.inst	0x009c3003 ; undefined
     d70:	00000003 	.inst	0x00000003 ; undefined
     d74:	c0130000 	.inst	0xc0130000 ; undefined
     d78:	00030003 	.inst	0x00030003 ; undefined
     d7c:	09000000 	.inst	0x09000000 ; undefined
     d80:	13000005 	sbfx	w5, w0, #0, #1
     d84:	030003c4 	.inst	0x030003c4 ; undefined
     d88:	00000000 	.inst	0x00000000 ; undefined
     d8c:	00000510 	.inst	0x00000510 ; undefined
     d90:	0003d814 	.inst	0x0003d814 ; undefined
     d94:	00000003 	.inst	0x00000003 ; undefined
     d98:	0004cf00 	.inst	0x0004cf00 ; undefined
     d9c:	00034900 	.inst	0x00034900 ; undefined
     da0:	50011500 	adr	x0, 3042 <_stack_size+0x2042>
     da4:	9c880309 	ldr	q9, fffffffffff10e04 <SMC_ID_HW_RSA+0xffffffff7bf00efd>
     da8:	00000300 	.inst	0x00000300 ; undefined
     dac:	01150000 	.inst	0x01150000 ; undefined
     db0:	00840251 	.inst	0x00840251 ; undefined
     db4:	03e81300 	.inst	0x03e81300 ; undefined
     db8:	00000300 	.inst	0x00000300 ; undefined
     dbc:	04f00000 	.inst	0x04f00000 ; undefined
     dc0:	ec130000 	.inst	0xec130000 ; undefined
     dc4:	00030003 	.inst	0x00030003 ; undefined
     dc8:	1b000000 	madd	w0, w0, w0, w0
     dcc:	14000005 	b	de0 <MPIDR_EL1_AFF3_LSB+0xdc0>
     dd0:	03000400 	.inst	0x03000400 ; undefined
     dd4:	00000000 	.inst	0x00000000 ; undefined
     dd8:	000004cf 	.inst	0x000004cf ; undefined
     ddc:	00000388 	.inst	0x00000388 ; undefined
     de0:	09500115 	.inst	0x09500115 ; undefined
     de4:	009cb003 	.inst	0x009cb003 ; undefined
     de8:	00000003 	.inst	0x00000003 ; undefined
     dec:	51011500 	sub	w0, w8, #0x45
     df0:	00008402 	.inst	0x00008402 ; undefined
     df4:	00041414 	.inst	0x00041414 ; undefined
     df8:	00000003 	.inst	0x00000003 ; undefined
     dfc:	0004cf00 	.inst	0x0004cf00 ; undefined
     e00:	0003ae00 	.inst	0x0003ae00 ; undefined
     e04:	50011500 	adr	x0, 30a6 <_stack_size+0x20a6>
     e08:	9cd00309 	ldr	q9, fffffffffffa0e68 <SMC_ID_HW_RSA+0xffffffff7bf90f61>
     e0c:	00000300 	.inst	0x00000300 ; undefined
     e10:	01150000 	.inst	0x01150000 ; undefined
     e14:	3d480351 	ldr	b17, [x26,#512]
     e18:	2c130024 	stnp	s4, s0, [x1,#152]
     e1c:	00030004 	.inst	0x00030004 ; undefined
     e20:	f0000000 	adrp	x0, 3000 <_stack_size+0x2000>
     e24:	14000004 	b	e34 <MPIDR_EL1_AFF3_LSB+0xe14>
     e28:	03000444 	.inst	0x03000444 ; undefined
     e2c:	00000000 	.inst	0x00000000 ; undefined
     e30:	00000526 	.inst	0x00000526 ; undefined
     e34:	000003da 	.inst	0x000003da ; undefined
     e38:	09500115 	.inst	0x09500115 ; undefined
     e3c:	009cf003 	.inst	0x009cf003 ; undefined
     e40:	00000003 	.inst	0x00000003 ; undefined
     e44:	4c170000 	.inst	0x4c170000 ; undefined
     e48:	00030004 	.inst	0x00030004 ; undefined
     e4c:	03000000 	.inst	0x03000000 ; undefined
     e50:	13243d48 	.inst	0x13243d48 ; undefined
     e54:	03000458 	.inst	0x03000458 ; undefined
     e58:	00000000 	.inst	0x00000000 ; undefined
     e5c:	000004f0 	.inst	0x000004f0 ; undefined
     e60:	04ef1800 	.inst	0x04ef1800 ; undefined
     e64:	42010000 	.inst	0x42010000 ; undefined
     e68:	0000003b 	.inst	0x0000003b ; undefined
     e6c:	a36c0309 	.inst	0xa36c0309 ; undefined
     e70:	00000300 	.inst	0x00000300 ; undefined
     e74:	06190000 	.inst	0x06190000 ; undefined
     e78:	07000005 	.inst	0x07000005 ; undefined
     e7c:	00005720 	.inst	0x00005720 ; undefined
     e80:	05c01800 	.inst	0x05c01800 ; undefined
     e84:	3d010000 	str	b0, [x0,#64]
     e88:	000000f0 	.inst	0x000000f0 ; undefined
     e8c:	a79c0309 	.inst	0xa79c0309 ; undefined
     e90:	00000300 	.inst	0x00000300 ; undefined
     e94:	c8190000 	stxr	w25, x0, [x0]
     e98:	06000018 	.inst	0x06000018 ; undefined
     e9c:	00043548 	.inst	0x00043548 ; undefined
     ea0:	d7081a00 	.inst	0xd7081a00 ; undefined
     ea4:	18000001 	ldr	w1, ea4 <MPIDR_EL1_AFF3_LSB+0xe84>
     ea8:	0000051b 	.inst	0x0000051b ; undefined
     eac:	00573a01 	.inst	0x00573a01 ; undefined
     eb0:	03090000 	.inst	0x03090000 ; undefined
     eb4:	0300a7a0 	.inst	0x0300a7a0 ; undefined
     eb8:	00000000 	.inst	0x00000000 ; undefined
     ebc:	00058c18 	.inst	0x00058c18 ; undefined
     ec0:	573b0100 	.inst	0x573b0100 ; undefined
     ec4:	09000000 	.inst	0x09000000 ; undefined
     ec8:	00a37003 	.inst	0x00a37003 ; undefined
     ecc:	00000003 	.inst	0x00000003 ; undefined
     ed0:	03b11800 	.inst	0x03b11800 ; undefined
     ed4:	3c010000 	stur	b0, [x0,#16]
     ed8:	000000bf 	.inst	0x000000bf ; undefined
     edc:	a7900309 	.inst	0xa7900309 ; undefined
     ee0:	00000300 	.inst	0x00000300 ; undefined
     ee4:	78180000 	sturh	w0, [x0,#-128]
     ee8:	01000005 	.inst	0x01000005 ; undefined
     eec:	00003b3e 	.inst	0x00003b3e ; undefined
     ef0:	68030900 	.inst	0x68030900 ; undefined
     ef4:	000300a3 	.inst	0x000300a3 ; undefined
     ef8:	18000000 	ldr	w0, ef8 <MPIDR_EL1_AFF3_LSB+0xed8>
     efc:	000000dc 	.inst	0x000000dc ; undefined
     f00:	00574001 	.inst	0x00574001 ; undefined
     f04:	03090000 	.inst	0x03090000 ; undefined
     f08:	0300a798 	.inst	0x0300a798 ; undefined
     f0c:	00000000 	.inst	0x00000000 ; undefined
     f10:	0004de18 	.inst	0x0004de18 ; undefined
     f14:	3b430100 	.inst	0x3b430100 ; undefined
     f18:	09000000 	.inst	0x09000000 ; undefined
     f1c:	00a79403 	.inst	0x00a79403 ; undefined
     f20:	00000003 	.inst	0x00000003 ; undefined
     f24:	04b11b00 	.inst	0x04b11b00 ; undefined
     f28:	2b080000 	adds	w0, w0, w8
     f2c:	0000003b 	.inst	0x0000003b ; undefined
     f30:	00050a1b 	.inst	0x00050a1b ; undefined
     f34:	3b350800 	.inst	0x3b350800 ; undefined
     f38:	1c000000 	ldr	s0, f38 <MPIDR_EL1_AFF3_LSB+0xf18>
     f3c:	0000073c 	.inst	0x0000073c ; undefined
     f40:	003b230b 	.inst	0x003b230b ; NYI
     f44:	04e50000 	.inst	0x04e50000 ; undefined
     f48:	e51d0000 	.inst	0xe51d0000 ; undefined
     f4c:	1e000004 	.inst	0x1e000004 ; undefined
     f50:	eb081a00 	subs	x0, x16, x8, lsl #6
     f54:	1f000004 	fmadd	s4, s0, s0, s0
     f58:	000000fb 	.inst	0x000000fb ; undefined
     f5c:	00038a20 	.inst	0x00038a20 ; undefined
     f60:	206c0200 	.inst	0x206c0200 ; undefined
     f64:	000005ce 	.inst	0x000005ce ; undefined
     f68:	d31b3109 	.inst	0xd31b3109 ; undefined
     f6c:	0a000003 	and	w3, w0, w0
     f70:	00003b34 	.inst	0x00003b34 ; undefined
     f74:	030a2000 	.inst	0x030a2000 ; undefined
     f78:	53060000 	ubfiz	w0, w0, #26, #1
     f7c:	0003ed1b 	.inst	0x0003ed1b ; undefined
     f80:	3b260700 	.inst	0x3b260700 ; undefined
     f84:	1b000000 	madd	w0, w0, w0, w0
     f88:	000004c5 	.inst	0x000004c5 ; undefined
     f8c:	003b2707 	.inst	0x003b2707 ; NYI
     f90:	63210000 	.inst	0x63210000 ; undefined
     f94:	0c000005 	st4	{v5.8b-v8.8b}, [x0]
     f98:	e51d012c 	.inst	0xe51d012c ; undefined
     f9c:	00000004 	.inst	0x00000004 ; undefined
     fa0:	00021700 	.inst	0x00021700 ; undefined
     fa4:	4a000400 	eor	w0, w0, w0, lsl #1
     fa8:	08000004 	stxrb	w0, w4, [x0]
     fac:	00018901 	.inst	0x00018901 ; undefined
     fb0:	061d0100 	.inst	0x061d0100 ; undefined
     fb4:	04580000 	.inst	0x04580000 ; undefined
     fb8:	00000300 	.inst	0x00000300 ; undefined
     fbc:	01400000 	.inst	0x01400000 ; undefined
     fc0:	00000000 	.inst	0x00000000 ; undefined
     fc4:	051a0000 	.inst	0x051a0000 ; undefined
     fc8:	01020000 	.inst	0x01020000 ; undefined
     fcc:	00010006 	.inst	0x00010006 ; undefined
     fd0:	05020200 	.inst	0x05020200 ; undefined
     fd4:	0000002b 	.inst	0x0000002b ; undefined
     fd8:	69050403 	.inst	0x69050403 ; undefined
     fdc:	0200746e 	.inst	0x0200746e ; undefined
     fe0:	00a90508 	.inst	0x00a90508 ; undefined
     fe4:	01020000 	.inst	0x01020000 ; undefined
     fe8:	0000fe08 	.inst	0x0000fe08 ; undefined
     fec:	07020200 	.inst	0x07020200 ; undefined
     ff0:	00000131 	.inst	0x00000131 ; undefined
     ff4:	16070402 	b	fffffffff81c1ffc <SMC_ID_HW_RSA+0xffffffff741b20f5>
     ff8:	02000001 	.inst	0x02000001 ; undefined
     ffc:	01110708 	.inst	0x01110708 ; undefined
    1000:	04040000 	.inst	0x04040000 ; undefined
    1004:	02000006 	.inst	0x02000006 ; undefined
    1008:	0000450d 	.inst	0x0000450d ; undefined
    100c:	003f0400 	.inst	0x003f0400 ; NYI
    1010:	11020000 	add	w0, w0, #0x80
    1014:	00000053 	.inst	0x00000053 ; undefined
    1018:	0c070802 	.inst	0x0c070802 ; undefined
    101c:	02000001 	.inst	0x02000001 ; undefined
    1020:	00a40508 	.inst	0x00a40508 ; undefined
    1024:	0a050000 	and	w0, w0, w5
    1028:	01000006 	.inst	0x01000006 ; undefined
    102c:	00006cfb 	.inst	0x00006cfb ; undefined
    1030:	00045800 	.inst	0x00045800 ; undefined
    1034:	00000003 	.inst	0x00000003 ; undefined
    1038:	00004000 	.inst	0x00004000 ; undefined
    103c:	00000000 	.inst	0x00000000 ; undefined
    1040:	e09c0100 	.inst	0xe09c0100 ; undefined
    1044:	06000000 	.inst	0x06000000 ; undefined
    1048:	00666572 	.inst	0x00666572 ; undefined
    104c:	006cfb01 	.inst	0x006cfb01 ; undefined
    1050:	082c0000 	.inst	0x082c0000 ; undefined
    1054:	63060000 	.inst	0x63060000 ; undefined
    1058:	fb010068 	.inst	0xfb010068 ; undefined
    105c:	000000e0 	.inst	0x000000e0 ; undefined
    1060:	00000875 	.inst	0x00000875 ; undefined
    1064:	001e3407 	.inst	0x001e3407 ; undefined
    1068:	6cfd0100 	ldp	d0, d0, [x8],#-48
    106c:	c3000000 	.inst	0xc3000000 ; undefined
    1070:	08000008 	stxrb	w0, w8, [x0]
    1074:	fe010069 	.inst	0xfe010069 ; undefined
    1078:	00000037 	.inst	0x00000037 ; undefined
    107c:	0000090e 	.inst	0x0000090e ; undefined
    1080:	08010200 	stxrb	w1, w0, [x16]
    1084:	00000107 	.inst	0x00000107 ; undefined
    1088:	00067509 	.inst	0x00067509 ; undefined
    108c:	01d50100 	.inst	0x01d50100 ; undefined
    1090:	00000111 	.inst	0x00000111 ; undefined
    1094:	0006120a 	.inst	0x0006120a ; undefined
    1098:	6cd90100 	ldp	d0, d0, [x8],#400
    109c:	0b000000 	add	w0, w0, w0
    10a0:	db010069 	.inst	0xdb010069 ; undefined
    10a4:	00000037 	.inst	0x00000037 ; undefined
    10a8:	01006a0b 	.inst	0x01006a0b ; undefined
    10ac:	000037db 	.inst	0x000037db ; undefined
    10b0:	840c0000 	.inst	0x840c0000 ; undefined
    10b4:	01000006 	.inst	0x01000006 ; undefined
    10b8:	00006ca1 	.inst	0x00006ca1 ; undefined
    10bc:	00049800 	.inst	0x00049800 ; undefined
    10c0:	00000003 	.inst	0x00000003 ; undefined
    10c4:	00010000 	.inst	0x00010000 ; undefined
    10c8:	00000000 	.inst	0x00000000 ; undefined
    10cc:	e29c0100 	.inst	0xe29c0100 ; undefined
    10d0:	06000001 	.inst	0x06000001 ; undefined
    10d4:	a2010070 	.inst	0xa2010070 ; undefined
    10d8:	000001e2 	.inst	0x000001e2 ; undefined
    10dc:	0000097f 	.inst	0x0000097f ; undefined
    10e0:	6e656c06 	umin	v6.8h, v0.8h, v5.8h
    10e4:	37a30100 	tbnz	w0, #20, 7104 <_stack_size+0x6104>
    10e8:	06000000 	.inst	0x06000000 ; undefined
    10ec:	0600000a 	.inst	0x0600000a ; undefined
    10f0:	00637263 	.inst	0x00637263 ; undefined
    10f4:	01e8a401 	.inst	0x01e8a401 ; undefined
    10f8:	0a7b0000 	bic	w0, w0, w27, lsr #0
    10fc:	63080000 	.inst	0x63080000 ; undefined
    1100:	0100746e 	.inst	0x0100746e ; undefined
    1104:	000037a6 	.inst	0x000037a6 ; undefined
    1108:	000af000 	.inst	0x000af000 ; undefined
    110c:	1e340700 	fccmp	s24, s20, #0x0, eq
    1110:	a7010000 	.inst	0xa7010000 ; undefined
    1114:	0000006c 	.inst	0x0000006c ; undefined
    1118:	00000b80 	.inst	0x00000b80 ; undefined
    111c:	0000e70d 	.inst	0x0000e70d ; undefined
    1120:	00049c00 	.inst	0x00049c00 ; undefined
    1124:	00000003 	.inst	0x00000003 ; undefined
    1128:	00008000 	.inst	0x00008000 ; undefined
    112c:	0eab0100 	saddl	v0.2d, v8.2s, v11.2s
    1130:	00000080 	.inst	0x00000080 ; undefined
    1134:	0000f30f 	.inst	0x0000f30f ; undefined
    1138:	c11db700 	.inst	0xc11db700 ; undefined
    113c:	00fe1004 	.inst	0x00fe1004 ; undefined
    1140:	0be30000 	.inst	0x0be30000 ; undefined
    1144:	07100000 	.inst	0x07100000 ; undefined
    1148:	1a000001 	adc	w1, w0, w0
    114c:	1100000c 	add	w12, w0, #0x0
    1150:	030004d8 	.inst	0x030004d8 ; undefined
    1154:	00000000 	.inst	0x00000000 ; undefined
    1158:	00000085 	.inst	0x00000085 ; undefined
    115c:	000001cb 	.inst	0x000001cb ; undefined
    1160:	02500112 	.inst	0x02500112 ; undefined
    1164:	01120089 	.inst	0x01120089 ; undefined
    1168:	00380151 	.inst	0x00380151 ; NYI
    116c:	00051013 	.inst	0x00051013 ; undefined
    1170:	00000003 	.inst	0x00000003 ; undefined
    1174:	00008500 	.inst	0x00008500 ; undefined
    1178:	51011200 	sub	w0, w16, #0x44
    117c:	00200802 	.inst	0x00200802 ; NYI
    1180:	14000000 	b	1180 <_stack_size+0x180>
    1184:	00006108 	.inst	0x00006108 ; undefined
    1188:	6c081400 	stnp	d0, d5, [x0,#128]
    118c:	15000000 	b	400118c <_stack_base+0xff3a0c>
    1190:	0000006c 	.inst	0x0000006c ; undefined
    1194:	000001fe 	.inst	0x000001fe ; undefined
    1198:	0001fe16 	.inst	0x0001fe16 ; undefined
    119c:	0200ff00 	.inst	0x0200ff00 ; undefined
    11a0:	059d0708 	.inst	0x059d0708 ; undefined
    11a4:	7a170000 	sbcs	w0, w0, w23
    11a8:	01000006 	.inst	0x01000006 ; undefined
    11ac:	0001ee59 	.inst	0x0001ee59 ; undefined
    11b0:	a8030900 	stnp	x0, x2, [x8,#48]
    11b4:	000300a7 	.inst	0x000300a7 ; undefined
    11b8:	00000000 	.inst	0x00000000 ; undefined
    11bc:	0000089e 	.inst	0x0000089e ; undefined
    11c0:	05830004 	.inst	0x05830004 ; undefined
    11c4:	01080000 	.inst	0x01080000 ; undefined
    11c8:	00000189 	.inst	0x00000189 ; undefined
    11cc:	00078d01 	.inst	0x00078d01 ; undefined
    11d0:	00034700 	.inst	0x00034700 ; undefined
    11d4:	00059800 	.inst	0x00059800 ; undefined
    11d8:	00000003 	.inst	0x00000003 ; undefined
    11dc:	000bc800 	.inst	0x000bc800 ; undefined
    11e0:	00000000 	.inst	0x00000000 ; undefined
    11e4:	00064100 	.inst	0x00064100 ; undefined
    11e8:	068a0200 	.inst	0x068a0200 ; undefined
    11ec:	69020000 	.inst	0x69020000 ; undefined
    11f0:	00000038 	.inst	0x00000038 ; undefined
    11f4:	11070803 	add	w3, w0, #0x1c2
    11f8:	03000001 	.inst	0x03000001 ; undefined
    11fc:	01000601 	.inst	0x01000601 ; undefined
    1200:	02030000 	.inst	0x02030000 ; undefined
    1204:	00002b05 	.inst	0x00002b05 ; undefined
    1208:	05040400 	.inst	0x05040400 ; undefined
    120c:	00746e69 	.inst	0x00746e69 ; undefined
    1210:	a9050803 	stp	x3, x2, [x0,#80]
    1214:	03000000 	.inst	0x03000000 ; undefined
    1218:	00fe0801 	.inst	0x00fe0801 ; undefined
    121c:	02030000 	.inst	0x02030000 ; undefined
    1220:	00013107 	.inst	0x00013107 ; undefined
    1224:	07040300 	.inst	0x07040300 ; undefined
    1228:	00000116 	.inst	0x00000116 ; undefined
    122c:	0c070803 	.inst	0x0c070803 ; undefined
    1230:	03000001 	.inst	0x03000001 ; undefined
    1234:	00a40508 	.inst	0x00a40508 ; undefined
    1238:	2a020000 	orr	w0, w0, w2
    123c:	03000007 	.inst	0x03000007 ; undefined
    1240:	00008928 	.inst	0x00008928 ; undefined
    1244:	06cc0500 	.inst	0x06cc0500 ; undefined
    1248:	06200000 	.inst	0x06200000 ; undefined
    124c:	0000c800 	.inst	0x0000c800 ; undefined
    1250:	070a0600 	.inst	0x070a0600 ; undefined
    1254:	00c80000 	.inst	0x00c80000 ; undefined
    1258:	06000000 	.inst	0x06000000 ; undefined
    125c:	0000074b 	.inst	0x0000074b ; undefined
    1260:	000000c8 	.inst	0x000000c8 ; undefined
    1264:	080f0608 	stxrb	w15, w8, [x16]
    1268:	00c80000 	.inst	0x00c80000 ; undefined
    126c:	06100000 	.inst	0x06100000 ; undefined
    1270:	000006de 	.inst	0x000006de ; undefined
    1274:	0000004d 	.inst	0x0000004d ; undefined
    1278:	06e80618 	.inst	0x06e80618 ; undefined
    127c:	004d0000 	.inst	0x004d0000 ; undefined
    1280:	001c0000 	.inst	0x001c0000 ; undefined
    1284:	ce020807 	.inst	0xce020807 ; undefined
    1288:	03000006 	.inst	0x03000006 ; undefined
    128c:	00007e62 	.inst	0x00007e62 ; undefined
    1290:	076c0800 	.inst	0x076c0800 ; undefined
    1294:	95010000 	bl	4041294 <_stack_base+0x1033b14>
    1298:	0000016b 	.inst	0x0000016b ; undefined
    129c:	00016b01 	.inst	0x00016b01 ; undefined
    12a0:	75620900 	.inst	0x75620900 ; undefined
    12a4:	95010066 	bl	404143c <_stack_base+0x1033cbc>
    12a8:	0000016b 	.inst	0x0000016b ; undefined
    12ac:	01007509 	.inst	0x01007509 ; undefined
    12b0:	00007095 	.inst	0x00007095 ; undefined
    12b4:	656c0900 	.inst	0x656c0900 ; undefined
    12b8:	9501006e 	bl	4041470 <_stack_base+0x1033cf0>
    12bc:	0000004d 	.inst	0x0000004d ; undefined
    12c0:	0007540a 	.inst	0x0007540a ; undefined
    12c4:	69950100 	.inst	0x69950100 ; undefined
    12c8:	0b000000 	add	w0, w0, w0
    12cc:	00736f70 	.inst	0x00736f70 ; undefined
    12d0:	004d9701 	.inst	0x004d9701 ; undefined
    12d4:	910c0000 	add	x0, x0, #0x300
    12d8:	01000006 	.inst	0x01000006 ; undefined
    12dc:	00018f98 	.inst	0x00018f98 ; undefined
    12e0:	31301000 	adds	w0, w0, #0xc04
    12e4:	35343332 	cbnz	w18, 69948 <_stack_size+0x68948>
    12e8:	39383736 	strb	w22, [x25,#3597]
    12ec:	64636261 	.inst	0x64636261 ; undefined
    12f0:	b80c6665 	str	w5, [x19],#198
    12f4:	01000006 	.inst	0x01000006 ; undefined
    12f8:	00019499 	.inst	0x00019499 ; undefined
    12fc:	31301000 	adds	w0, w0, #0xc04
    1300:	35343332 	cbnz	w18, 69964 <_stack_size+0x68964>
    1304:	39383736 	strb	w22, [x25,#3597]
    1308:	44434241 	.inst	0x44434241 ; undefined
    130c:	7e0d4645 	.inst	0x7e0d4645 ; undefined
    1310:	01000006 	.inst	0x01000006 ; undefined
    1314:	0001999a 	.inst	0x0001999a ; undefined
    1318:	c60d0e00 	.inst	0xc60d0e00 ; undefined
    131c:	01000006 	.inst	0x01000006 ; undefined
    1320:	000069a3 	.inst	0x000069a3 ; undefined
    1324:	0f000000 	.inst	0x0f000000 ; undefined
    1328:	00017108 	.inst	0x00017108 ; undefined
    132c:	08010300 	stxrb	w1, w0, [x24]
    1330:	00000107 	.inst	0x00000107 ; undefined
    1334:	00017110 	.inst	0x00017110 ; undefined
    1338:	00018800 	.inst	0x00018800 ; undefined
    133c:	01881100 	.inst	0x01881100 ; undefined
    1340:	000f0000 	.inst	0x000f0000 ; undefined
    1344:	9d070803 	.inst	0x9d070803 ; undefined
    1348:	12000005 	and	w5, w0, #0x1
    134c:	00000178 	.inst	0x00000178 ; undefined
    1350:	00017812 	.inst	0x00017812 ; undefined
    1354:	9f080f00 	.inst	0x9f080f00 ; undefined
    1358:	12000001 	and	w1, w0, #0x1
    135c:	00000171 	.inst	0x00000171 ; undefined
    1360:	0007f413 	.inst	0x0007f413 ; undefined
    1364:	4dac0100 	st2	{v0.b, v1.b}[8], [x8], x12
    1368:	01000000 	.inst	0x01000000 ; undefined
    136c:	000001d5 	.inst	0x000001d5 ; undefined
    1370:	72747309 	.inst	0x72747309 ; undefined
    1374:	6bac0100 	.inst	0x6bac0100 ; undefined
    1378:	09000001 	.inst	0x09000001 ; undefined
    137c:	00746d66 	.inst	0x00746d66 ; undefined
    1380:	0199ac01 	.inst	0x0199ac01 ; undefined
    1384:	61090000 	.inst	0x61090000 ; undefined
    1388:	ac010070 	stnp	q16, q0, [x3,#32]
    138c:	000000ca 	.inst	0x000000ca ; undefined
    1390:	06a50800 	.inst	0x06a50800 ; undefined
    1394:	77010000 	.inst	0x77010000 ; undefined
    1398:	0000016b 	.inst	0x0000016b ; undefined
    139c:	00023301 	.inst	0x00023301 ; undefined
    13a0:	75620900 	.inst	0x75620900 ; undefined
    13a4:	77010066 	.inst	0x77010066 ; undefined
    13a8:	0000016b 	.inst	0x0000016b ; undefined
    13ac:	01006e09 	.inst	0x01006e09 ; undefined
    13b0:	00007077 	.inst	0x00007077 ; undefined
    13b4:	656c0900 	.inst	0x656c0900 ; undefined
    13b8:	7701006e 	.inst	0x7701006e ; undefined
    13bc:	0000004d 	.inst	0x0000004d ; undefined
    13c0:	0007540a 	.inst	0x0007540a ; undefined
    13c4:	69770100 	ldpsw	x0, x0, [x8,#-72]
    13c8:	0b000000 	add	w0, w0, w0
    13cc:	00736f70 	.inst	0x00736f70 ; undefined
    13d0:	004d7901 	.inst	0x004d7901 ; undefined
    13d4:	f20d0000 	ands	x0, x0, #0x8000000080000
    13d8:	01000006 	.inst	0x01000006 ; undefined
    13dc:	00004d7a 	.inst	0x00004d7a ; undefined
    13e0:	c60d0e00 	.inst	0xc60d0e00 ; undefined
    13e4:	01000006 	.inst	0x01000006 ; undefined
    13e8:	00004d85 	.inst	0x00004d85 ; undefined
    13ec:	14000000 	b	13ec <_stack_size+0x3ec>
    13f0:	000001d5 	.inst	0x000001d5 ; undefined
    13f4:	03000598 	.inst	0x03000598 ; undefined
    13f8:	00000000 	.inst	0x00000000 ; undefined
    13fc:	000000e0 	.inst	0x000000e0 ; undefined
    1400:	00000000 	.inst	0x00000000 ; undefined
    1404:	028f9c01 	.inst	0x028f9c01 ; undefined
    1408:	e5150000 	.inst	0xe5150000 ; undefined
    140c:	6c000001 	stnp	d1, d0, [x0]
    1410:	1500000c 	b	4001440 <_stack_base+0xff3cc0>
    1414:	000001f0 	.inst	0x000001f0 ; undefined
    1418:	00000ce1 	.inst	0x00000ce1 ; undefined
    141c:	00020416 	.inst	0x00020416 ; undefined
    1420:	17520100 	b	fffffffffd481820 <SMC_ID_HW_RSA+0xffffffff79471919>
    1424:	0000020f 	.inst	0x0000020f ; undefined
    1428:	00000d7d 	.inst	0x00000d7d ; undefined
    142c:	00021a17 	.inst	0x00021a17 ; undefined
    1430:	000e7c00 	.inst	0x000e7c00 ; undefined
    1434:	01f91800 	.inst	0x01f91800 ; undefined
    1438:	19200000 	.inst	0x19200000 ; undefined
    143c:	000000b0 	.inst	0x000000b0 ; undefined
    1440:	00022617 	.inst	0x00022617 ; undefined
    1444:	000ec800 	.inst	0x000ec800 ; undefined
    1448:	1a000000 	adc	w0, w0, w0
    144c:	000006d6 	.inst	0x000006d6 ; undefined
    1450:	004d1e01 	.inst	0x004d1e01 ; undefined
    1454:	06780000 	.inst	0x06780000 ; undefined
    1458:	00000300 	.inst	0x00000300 ; undefined
    145c:	00600000 	.inst	0x00600000 ; undefined
    1460:	00000000 	.inst	0x00000000 ; undefined
    1464:	9c010000 	ldr	q0, 3464 <_stack_size+0x2464>
    1468:	0000030e 	.inst	0x0000030e ; undefined
    146c:	0100631b 	.inst	0x0100631b ; undefined
    1470:	00004d1e 	.inst	0x00004d1e ; undefined
    1474:	000f0000 	.inst	0x000f0000 ; undefined
    1478:	006e1c00 	.inst	0x006e1c00 ; undefined
    147c:	004d2001 	.inst	0x004d2001 ; undefined
    1480:	91020000 	add	x0, x0, #0x80
    1484:	06981d7c 	.inst	0x06981d7c ; undefined
    1488:	00000300 	.inst	0x00000300 ; undefined
    148c:	08660000 	.inst	0x08660000 ; undefined
    1490:	02e10000 	.inst	0x02e10000 ; undefined
    1494:	011e0000 	.inst	0x011e0000 ; undefined
    1498:	6c910250 	stp	d16, d0, [x18],#272
    149c:	06bc1d00 	.inst	0x06bc1d00 ; undefined
    14a0:	00000300 	.inst	0x00000300 ; undefined
    14a4:	08660000 	.inst	0x08660000 ; undefined
    14a8:	02f90000 	.inst	0x02f90000 ; undefined
    14ac:	011e0000 	.inst	0x011e0000 ; undefined
    14b0:	00840250 	.inst	0x00840250 ; undefined
    14b4:	06c81f00 	.inst	0x06c81f00 ; undefined
    14b8:	00000300 	.inst	0x00000300 ; undefined
    14bc:	08660000 	.inst	0x08660000 ; undefined
    14c0:	011e0000 	.inst	0x011e0000 ; undefined
    14c4:	00840250 	.inst	0x00840250 ; undefined
    14c8:	3c1a0000 	stur	b0, [x0,#-96]
    14cc:	0100001b 	.inst	0x0100001b ; undefined
    14d0:	00004d2f 	.inst	0x00004d2f ; undefined
    14d4:	0006d800 	.inst	0x0006d800 ; undefined
    14d8:	00000003 	.inst	0x00000003 ; undefined
    14dc:	00001c00 	.inst	0x00001c00 ; undefined
    14e0:	00000000 	.inst	0x00000000 ; undefined
    14e4:	6b9c0100 	subs	w0, w8, w28, asr #0
    14e8:	1b000003 	madd	w3, w0, w0, w0
    14ec:	00727473 	.inst	0x00727473 ; undefined
    14f0:	01992f01 	.inst	0x01992f01 ; undefined
    14f4:	0f840000 	.inst	0x0f840000 ; undefined
    14f8:	e01d0000 	.inst	0xe01d0000 ; undefined
    14fc:	00030006 	.inst	0x00030006 ; undefined
    1500:	7e000000 	.inst	0x7e000000 ; undefined
    1504:	57000008 	.inst	0x57000008 ; undefined
    1508:	1e000003 	.inst	0x1e000003 ; undefined
    150c:	f3035001 	.inst	0xf3035001 ; undefined
    1510:	1f005001 	fmadd	s1, s0, s0, s20
    1514:	030006e8 	.inst	0x030006e8 ; undefined
    1518:	00000000 	.inst	0x00000000 ; undefined
    151c:	0000028f 	.inst	0x0000028f ; undefined
    1520:	0150011e 	.inst	0x0150011e ; undefined
    1524:	1a00003a 	adc	w26, w1, w0
    1528:	00000739 	.inst	0x00000739 ; undefined
    152c:	004db101 	.inst	0x004db101 ; undefined
    1530:	06f40000 	.inst	0x06f40000 ; undefined
    1534:	00000300 	.inst	0x00000300 ; undefined
    1538:	08500000 	ldxrb	w0, [x0]
    153c:	00000000 	.inst	0x00000000 ; undefined
    1540:	9c010000 	ldr	q0, 3540 <_stack_size+0x2540>
    1544:	00000591 	.inst	0x00000591 ; undefined
    1548:	7274731b 	.inst	0x7274731b ; undefined
    154c:	6bb10100 	.inst	0x6bb10100 ; undefined
    1550:	bd000001 	str	s1, [x0]
    1554:	1b00000f 	madd	w15, w0, w0, w0
    1558:	006e656c 	.inst	0x006e656c ; undefined
    155c:	002db101 	.inst	0x002db101 ; NYI
    1560:	11f30000 	.inst	0x11f30000 ; undefined
    1564:	661b0000 	.inst	0x661b0000 ; undefined
    1568:	0100746d 	.inst	0x0100746d ; undefined
    156c:	000199b1 	.inst	0x000199b1 ; undefined
    1570:	00125200 	.inst	0x00125200 ; undefined
    1574:	70611b00 	adr	x0, c38d7 <_stack_size+0xc28d7>
    1578:	cab10100 	eon	x0, x8, x17, asr #0
    157c:	04000000 	.inst	0x04000000 ; undefined
    1580:	20000013 	.inst	0x20000013 ; undefined
    1584:	b3010063 	.inst	0xb3010063 ; undefined
    1588:	00000171 	.inst	0x00000171 ; undefined
    158c:	00001c87 	.inst	0x00001c87 ; undefined
    1590:	00637520 	.inst	0x00637520 ; undefined
    1594:	005bb401 	.inst	0x005bb401 ; undefined
    1598:	1fa80000 	.inst	0x1fa80000 ; undefined
    159c:	73200000 	.inst	0x73200000 ; undefined
    15a0:	99b50100 	.inst	0x99b50100 ; undefined
    15a4:	cc000001 	.inst	0xcc000001 ; undefined
    15a8:	2000001f 	.inst	0x2000001f ; undefined
    15ac:	b601006e 	tbz	x14, #32, 35b8 <_stack_size+0x25b8>
    15b0:	00000070 	.inst	0x00000070 ; undefined
    15b4:	0000201e 	.inst	0x0000201e ; undefined
    15b8:	72747020 	.inst	0x72747020 ; undefined
    15bc:	c8b70100 	.inst	0xc8b70100 ; undefined
    15c0:	a0000000 	.inst	0xa0000000 ; undefined
    15c4:	21000020 	.inst	0x21000020 ; undefined
    15c8:	00000809 	.inst	0x00000809 ; undefined
    15cc:	004db801 	.inst	0x004db801 ; undefined
    15d0:	20fc0000 	.inst	0x20fc0000 ; undefined
    15d4:	82210000 	.inst	0x82210000 ; undefined
    15d8:	01000007 	.inst	0x01000007 ; undefined
    15dc:	000069b9 	.inst	0x000069b9 ; undefined
    15e0:	0021cd00 	.inst	0x0021cd00 ; NYI
    15e4:	071c2100 	.inst	0x071c2100 ; undefined
    15e8:	ba010000 	adcs	x0, x0, x1
    15ec:	0000002d 	.inst	0x0000002d ; undefined
    15f0:	0000221b 	.inst	0x0000221b ; undefined
    15f4:	00076122 	.inst	0x00076122 ; undefined
    15f8:	91bb0100 	.inst	0x91bb0100 ; undefined
    15fc:	02000005 	.inst	0x02000005 ; undefined
    1600:	73236091 	.inst	0x73236091 ; undefined
    1604:	01000027 	.inst	0x01000027 ; undefined
    1608:	074c0168 	.inst	0x074c0168 ; undefined
    160c:	00000300 	.inst	0x00000300 ; undefined
    1610:	fd240000 	str	d0, [x0,#18432]
    1614:	01000007 	.inst	0x01000007 ; undefined
    1618:	06fb23d5 	.inst	0x06fb23d5 ; undefined
    161c:	4e010000 	tbl	v0.16b, {v0.16b}, v1.16b
    1620:	0008a401 	.inst	0x0008a401 ; undefined
    1624:	00000003 	.inst	0x00000003 ; undefined
    1628:	65682500 	.inst	0x65682500 ; undefined
    162c:	27010078 	.inst	0x27010078 ; undefined
    1630:	00080801 	.inst	0x00080801 ; undefined
    1634:	00000003 	.inst	0x00000003 ; undefined
    1638:	00d52600 	.inst	0x00d52600 ; undefined
    163c:	08200000 	.inst	0x08200000 ; undefined
    1640:	00000300 	.inst	0x00000300 ; undefined
    1644:	00400000 	.inst	0x00400000 ; undefined
    1648:	00000000 	.inst	0x00000000 ; undefined
    164c:	2f010000 	.inst	0x2f010000 ; undefined
    1650:	00051b01 	.inst	0x00051b01 ; undefined
    1654:	01041500 	.inst	0x01041500 ; undefined
    1658:	234c0000 	.inst	0x234c0000 ; undefined
    165c:	f9150000 	str	x0, [x0,#10752]
    1660:	6f000000 	.inst	0x6f000000 ; undefined
    1664:	15000023 	b	40016f0 <_stack_base+0xff3f70>
    1668:	000000f0 	.inst	0x000000f0 ; undefined
    166c:	00002394 	.inst	0x00002394 ; undefined
    1670:	0000e515 	.inst	0x0000e515 ; undefined
    1674:	0023b700 	.inst	0x0023b700 ; NYI
    1678:	08202700 	.inst	0x08202700 ; undefined
    167c:	00000300 	.inst	0x00000300 ; undefined
    1680:	00400000 	.inst	0x00400000 ; undefined
    1684:	00000000 	.inst	0x00000000 ; undefined
    1688:	0f170000 	.inst	0x0f170000 ; undefined
    168c:	da000001 	sbc	x1, x0, x0
    1690:	17000023 	b	fffffffffc00171c <SMC_ID_HW_RSA+0xffffffff77ff1815>
    1694:	00000152 	.inst	0x00000152 ; undefined
    1698:	00002461 	.inst	0x00002461 ; undefined
    169c:	00011a28 	.inst	0x00011a28 ; undefined
    16a0:	f0030900 	adrp	x0, 6124000 <_stack_base+0x3116880>
    16a4:	0003009a 	.inst	0x0003009a ; undefined
    16a8:	28000000 	stnp	w0, w0, [x0]
    16ac:	00000136 	.inst	0x00000136 ; undefined
    16b0:	9ae00309 	.inst	0x9ae00309 ; undefined
    16b4:	00000300 	.inst	0x00000300 ; undefined
    16b8:	3c270000 	.inst	0x3c270000 ; undefined
    16bc:	00030008 	.inst	0x00030008 ; undefined
    16c0:	20000000 	.inst	0x20000000 ; undefined
    16c4:	00000000 	.inst	0x00000000 ; undefined
    16c8:	17000000 	b	fffffffffc0016c8 <SMC_ID_HW_RSA+0xffffffff77ff17c1>
    16cc:	0000015e 	.inst	0x0000015e ; undefined
    16d0:	00002484 	.inst	0x00002484 ; undefined
    16d4:	29000000 	stp	w0, w0, [x0]
    16d8:	00000100 	.inst	0x00000100 ; undefined
    16dc:	00000535 	.inst	0x00000535 ; undefined
    16e0:	00239e2a 	.inst	0x00239e2a ; NYI
    16e4:	01510100 	.inst	0x01510100 ; undefined
    16e8:	00000069 	.inst	0x00000069 ; undefined
    16ec:	000024a7 	.inst	0x000024a7 ; undefined
    16f0:	01602900 	.inst	0x01602900 ; undefined
    16f4:	05740000 	.inst	0x05740000 ; undefined
    16f8:	432a0000 	.inst	0x432a0000 ; undefined
    16fc:	01000007 	.inst	0x01000007 ; undefined
    1700:	002d015c 	.inst	0x002d015c ; NYI
    1704:	24f20000 	.inst	0x24f20000 ; undefined
    1708:	592a0000 	.inst	0x592a0000 ; undefined
    170c:	01000007 	.inst	0x01000007 ; undefined
    1710:	0171015d 	.inst	0x0171015d ; undefined
    1714:	25280000 	.inst	0x25280000 ; undefined
    1718:	c01f0000 	.inst	0xc01f0000 ; undefined
    171c:	00030009 	.inst	0x00030009 ; undefined
    1720:	90000000 	adrp	x0, 1000 <_stack_size>
    1724:	1e000008 	.inst	0x1e000008 ; undefined
    1728:	91035001 	add	x1, x0, #0xd4
    172c:	00000650 	.inst	0x00000650 ; undefined
    1730:	0009a41f 	.inst	0x0009a41f ; undefined
    1734:	00000003 	.inst	0x00000003 ; undefined
    1738:	00023300 	.inst	0x00023300 ; undefined
    173c:	50011e00 	adr	x0, 3afe <_stack_size+0x2afe>
    1740:	1e008a02 	.inst	0x1e008a02 ; undefined
    1744:	91045201 	add	x1, x16, #0x114
    1748:	00049450 	.inst	0x00049450 ; undefined
    174c:	01711000 	.inst	0x01711000 ; undefined
    1750:	05a10000 	.inst	0x05a10000 ; undefined
    1754:	88110000 	stxr	w17, w0, [x0]
    1758:	1f000001 	fmadd	s1, s0, s0, s0
    175c:	07120800 	.inst	0x07120800 ; undefined
    1760:	36010000 	tbz	w0, #0, 3760 <_stack_size+0x2760>
    1764:	0000004d 	.inst	0x0000004d ; undefined
    1768:	0005dd01 	.inst	0x0005dd01 ; undefined
    176c:	6d660900 	ldp	d0, d2, [x8,#-416]
    1770:	36010074 	tbz	w20, #0, 377c <_stack_size+0x277c>
    1774:	00000199 	.inst	0x00000199 ; undefined
    1778:	00706109 	.inst	0x00706109 ; undefined
    177c:	00ca3601 	.inst	0x00ca3601 ; undefined
    1780:	620b0000 	.inst	0x620b0000 ; undefined
    1784:	01006675 	.inst	0x01006675 ; undefined
    1788:	0005dd38 	.inst	0x0005dd38 ; undefined
    178c:	72650b00 	.inst	0x72650b00 ; undefined
    1790:	39010072 	strb	w18, [x3,#64]
    1794:	0000004d 	.inst	0x0000004d ; undefined
    1798:	01711000 	.inst	0x01711000 ; undefined
    179c:	05ed0000 	.inst	0x05ed0000 ; undefined
    17a0:	88110000 	stxr	w17, w0, [x0]
    17a4:	ff000001 	.inst	0xff000001 ; undefined
    17a8:	073c1a00 	.inst	0x073c1a00 ; undefined
    17ac:	43010000 	.inst	0x43010000 ; undefined
    17b0:	0000004d 	.inst	0x0000004d ; undefined
    17b4:	03000f44 	.inst	0x03000f44 ; undefined
    17b8:	00000000 	.inst	0x00000000 ; undefined
    17bc:	000000d0 	.inst	0x000000d0 ; undefined
    17c0:	00000000 	.inst	0x00000000 ; undefined
    17c4:	06bb9c01 	.inst	0x06bb9c01 ; undefined
    17c8:	661b0000 	.inst	0x661b0000 ; undefined
    17cc:	0100746d 	.inst	0x0100746d ; undefined
    17d0:	00019943 	.inst	0x00019943 ; undefined
    17d4:	00255e00 	.inst	0x00255e00 ; NYI
    17d8:	651c2b00 	.inst	0x651c2b00 ; undefined
    17dc:	01007272 	.inst	0x01007272 ; undefined
    17e0:	00004d45 	.inst	0x00004d45 ; undefined
    17e4:	1c630100 	ldr	s0, c7804 <_stack_size+0xc6804>
    17e8:	01007061 	.inst	0x01007061 ; undefined
    17ec:	0000ca47 	.inst	0x0000ca47 ; undefined
    17f0:	80910300 	.inst	0x80910300 ; undefined
    17f4:	05a12c7c 	.inst	0x05a12c7c ; undefined
    17f8:	0f800000 	.inst	0x0f800000 ; undefined
    17fc:	00000300 	.inst	0x00000300 ; undefined
    1800:	01a00000 	.inst	0x01a00000 ; undefined
    1804:	49010000 	.inst	0x49010000 ; undefined
    1808:	0005bc16 	.inst	0x0005bc16 ; undefined
    180c:	a0910300 	.inst	0xa0910300 ; undefined
    1810:	05b1157c 	.inst	0x05b1157c ; undefined
    1814:	25aa0000 	.inst	0x25aa0000 ; undefined
    1818:	a0190000 	.inst	0xa0190000 ; undefined
    181c:	28000001 	stnp	w1, w0, [x0]
    1820:	000005c6 	.inst	0x000005c6 ; undefined
    1824:	7cc09103 	.inst	0x7cc09103 ; undefined
    1828:	0005d117 	.inst	0x0005d117 ; undefined
    182c:	0025f600 	.inst	0x0025f600 ; NYI
    1830:	0ff81d00 	.inst	0x0ff81d00 ; undefined
    1834:	00000300 	.inst	0x00000300 ; undefined
    1838:	036b0000 	.inst	0x036b0000 ; undefined
    183c:	06a30000 	.inst	0x06a30000 ; undefined
    1840:	011e0000 	.inst	0x011e0000 ; undefined
    1844:	c0910350 	.inst	0xc0910350 ; undefined
    1848:	51011e7c 	sub	w28, w19, #0x47
    184c:	01000a03 	.inst	0x01000a03 ; undefined
    1850:	0352011e 	.inst	0x0352011e ; undefined
    1854:	1e5001f3 	.inst	0x1e5001f3 ; undefined
    1858:	91035301 	add	x1, x24, #0xd4
    185c:	1f007be0 	fmadd	s0, s31, s0, s30
    1860:	03001004 	.inst	0x03001004 ; undefined
    1864:	00000000 	.inst	0x00000000 ; undefined
    1868:	0000087e 	.inst	0x0000087e ; undefined
    186c:	0350011e 	.inst	0x0350011e ; undefined
    1870:	007cc091 	.inst	0x007cc091 ; undefined
    1874:	1a000000 	adc	w0, w0, w0
    1878:	0000073a 	.inst	0x0000073a ; undefined
    187c:	004d5b01 	.inst	0x004d5b01 ; undefined
    1880:	10140000 	adr	x0, 29880 <_stack_size+0x28880>
    1884:	00000300 	.inst	0x00000300 ; undefined
    1888:	00840000 	.inst	0x00840000 ; undefined
    188c:	00000000 	.inst	0x00000000 ; undefined
    1890:	9c010000 	ldr	q0, 3890 <_stack_size+0x2890>
    1894:	00000750 	.inst	0x00000750 ; undefined
    1898:	7274731b 	.inst	0x7274731b ; undefined
    189c:	6b5b0100 	subs	w0, w8, w27, lsr #0
    18a0:	3f000001 	.inst	0x3f000001 ; undefined
    18a4:	1b000026 	madd	w6, w1, w0, w0
    18a8:	006e656c 	.inst	0x006e656c ; undefined
    18ac:	002d5b01 	.inst	0x002d5b01 ; NYI
    18b0:	26780000 	.inst	0x26780000 ; undefined
    18b4:	661b0000 	.inst	0x661b0000 ; undefined
    18b8:	0100746d 	.inst	0x0100746d ; undefined
    18bc:	0001995b 	.inst	0x0001995b ; undefined
    18c0:	0026b100 	.inst	0x0026b100 ; NYI
    18c4:	651c2b00 	.inst	0x651c2b00 ; undefined
    18c8:	01007272 	.inst	0x01007272 ; undefined
    18cc:	00004d5d 	.inst	0x00004d5d ; undefined
    18d0:	1c500100 	ldr	s0, a18f0 <_stack_size+0xa08f0>
    18d4:	01007061 	.inst	0x01007061 ; undefined
    18d8:	0000ca5f 	.inst	0x0000ca5f ; undefined
    18dc:	b0910300 	adrp	x0, ffffffff22062000 <SMC_ID_HW_RSA+0xfffffffe9e0520f9>
    18e0:	108c1f7e 	adr	x30, fffffffffff19ccc <SMC_ID_HW_RSA+0xffffffff7bf09dc5>
    18e4:	00000300 	.inst	0x00000300 ; undefined
    18e8:	036b0000 	.inst	0x036b0000 ; undefined
    18ec:	011e0000 	.inst	0x011e0000 ; undefined
    18f0:	01f30350 	.inst	0x01f30350 ; undefined
    18f4:	51011e50 	sub	w16, w18, #0x47
    18f8:	5101f303 	sub	w3, w24, #0x7c
    18fc:	0352011e 	.inst	0x0352011e ; undefined
    1900:	1e5201f3 	.inst	0x1e5201f3 ; undefined
    1904:	91035301 	add	x1, x24, #0xd4
    1908:	00007e90 	.inst	0x00007e90 ; undefined
    190c:	0001a414 	.inst	0x0001a414 ; undefined
    1910:	00109800 	.inst	0x00109800 ; undefined
    1914:	00000003 	.inst	0x00000003 ; undefined
    1918:	00003000 	.inst	0x00003000 ; undefined
    191c:	00000000 	.inst	0x00000000 ; undefined
    1920:	b19c0100 	.inst	0xb19c0100 ; undefined
    1924:	15000007 	b	4001940 <_stack_base+0xff41c0>
    1928:	000001b4 	.inst	0x000001b4 ; undefined
    192c:	000026ea 	.inst	0x000026ea ; undefined
    1930:	0001bf15 	.inst	0x0001bf15 ; undefined
    1934:	00272300 	.inst	0x00272300 ; NYI
    1938:	01ca1600 	.inst	0x01ca1600 ; undefined
    193c:	74020000 	.inst	0x74020000 ; undefined
    1940:	10c01f00 	adr	x0, fffffffffff81d20 <SMC_ID_HW_RSA+0xffffffff7bf71e19>
    1944:	00000300 	.inst	0x00000300 ; undefined
    1948:	036b0000 	.inst	0x036b0000 ; undefined
    194c:	011e0000 	.inst	0x011e0000 ; undefined
    1950:	01f30350 	.inst	0x01f30350 ; undefined
    1954:	51011e50 	sub	w16, w18, #0x47
    1958:	ffff0c05 	.inst	0xffff0c05 ; undefined
    195c:	011e7fff 	.inst	0x011e7fff ; undefined
    1960:	01f30352 	.inst	0x01f30352 ; undefined
    1964:	53011e51 	ubfx	w17, w18, #1, #7
    1968:	00609102 	.inst	0x00609102 ; undefined
    196c:	07f51a00 	.inst	0x07f51a00 ; undefined
    1970:	4f010000 	.inst	0x4f010000 ; undefined
    1974:	0000004d 	.inst	0x0000004d ; undefined
    1978:	030010c8 	.inst	0x030010c8 ; undefined
    197c:	00000000 	.inst	0x00000000 ; undefined
    1980:	00000098 	.inst	0x00000098 ; undefined
    1984:	00000000 	.inst	0x00000000 ; undefined
    1988:	08669c01 	.inst	0x08669c01 ; undefined
    198c:	731b0000 	.inst	0x731b0000 ; undefined
    1990:	01007274 	.inst	0x01007274 ; undefined
    1994:	00016b4f 	.inst	0x00016b4f ; undefined
    1998:	00276f00 	.inst	0x00276f00 ; NYI
    199c:	6d661b00 	ldp	d0, d6, [x24,#-416]
    19a0:	4f010074 	.inst	0x4f010074 ; undefined
    19a4:	00000199 	.inst	0x00000199 ; undefined
    19a8:	000027a8 	.inst	0x000027a8 ; undefined
    19ac:	72650b2b 	.inst	0x72650b2b ; undefined
    19b0:	51010072 	sub	w18, w3, #0x40
    19b4:	0000004d 	.inst	0x0000004d ; undefined
    19b8:	0070611c 	.inst	0x0070611c ; undefined
    19bc:	00ca5301 	.inst	0x00ca5301 ; undefined
    19c0:	91030000 	add	x0, x0, #0xc0
    19c4:	a42c7e90 	.inst	0xa42c7e90 ; undefined
    19c8:	08000001 	stxrb	w0, w1, [x0]
    19cc:	00030011 	.inst	0x00030011 ; undefined
    19d0:	00000000 	.inst	0x00000000 ; undefined
    19d4:	01000002 	.inst	0x01000002 ; undefined
    19d8:	01ca1655 	.inst	0x01ca1655 ; undefined
    19dc:	91030000 	add	x0, x0, #0xc0
    19e0:	bf157eb0 	.inst	0xbf157eb0 ; undefined
    19e4:	f4000001 	.inst	0xf4000001 ; undefined
    19e8:	15000027 	b	4001a84 <_stack_base+0xff4304>
    19ec:	000001b4 	.inst	0x000001b4 ; undefined
    19f0:	00002840 	.inst	0x00002840 ; undefined
    19f4:	0011541f 	.inst	0x0011541f ; undefined
    19f8:	00000003 	.inst	0x00000003 ; undefined
    19fc:	00036b00 	.inst	0x00036b00 ; undefined
    1a00:	50011e00 	adr	x0, 3dc2 <_stack_size+0x2dc2>
    1a04:	5001f303 	adr	x3, 5866 <_stack_size+0x4866>
    1a08:	0551011e 	.inst	0x0551011e ; undefined
    1a0c:	ffffff0c 	.inst	0xffffff0c ; undefined
    1a10:	52011e7f 	eor	wsp, w19, #0x8000007f
    1a14:	5101f303 	sub	w3, w24, #0x7c
    1a18:	0353011e 	.inst	0x0353011e ; undefined
    1a1c:	007df091 	.inst	0x007df091 ; undefined
    1a20:	e72d0000 	.inst	0xe72d0000 ; undefined
    1a24:	04000007 	.inst	0x04000007 ; undefined
    1a28:	0878012b 	.inst	0x0878012b ; undefined
    1a2c:	782e0000 	ldaddh	w14, w0, [x0]
    1a30:	00000008 	.inst	0x00000008 ; undefined
    1a34:	005b080f 	.inst	0x005b080f ; undefined
    1a38:	632d0000 	.inst	0x632d0000 ; undefined
    1a3c:	04000005 	.inst	0x04000005 ; undefined
    1a40:	0890012c 	.inst	0x0890012c ; undefined
    1a44:	992e0000 	.inst	0x992e0000 ; undefined
    1a48:	00000001 	.inst	0x00000001 ; undefined
    1a4c:	00069a2f 	.inst	0x00069a2f ; undefined
    1a50:	4d710500 	.inst	0x4d710500 ; undefined
    1a54:	2e000000 	ext	v0.8b, v0.8b, v0.8b, #0
    1a58:	00000199 	.inst	0x00000199 ; undefined
    1a5c:	11f00000 	.inst	0x11f00000 ; undefined
    1a60:	00040000 	.inst	0x00040000 ; undefined
    1a64:	000007d8 	.inst	0x000007d8 ; undefined
    1a68:	01890108 	.inst	0x01890108 ; undefined
    1a6c:	b8010000 	stur	w0, [x0,#16]
    1a70:	60000008 	.inst	0x60000008 ; undefined
    1a74:	00030011 	.inst	0x00030011 ; undefined
    1a78:	00000000 	.inst	0x00000000 ; undefined
    1a7c:	0000000c 	.inst	0x0000000c ; undefined
    1a80:	ec000000 	.inst	0xec000000 ; undefined
    1a84:	0200000b 	.inst	0x0200000b ; undefined
    1a88:	01110708 	.inst	0x01110708 ; undefined
    1a8c:	01020000 	.inst	0x01020000 ; undefined
    1a90:	00010006 	.inst	0x00010006 ; undefined
    1a94:	05020200 	.inst	0x05020200 ; undefined
    1a98:	0000002b 	.inst	0x0000002b ; undefined
    1a9c:	69050403 	.inst	0x69050403 ; undefined
    1aa0:	0200746e 	.inst	0x0200746e ; undefined
    1aa4:	00a90508 	.inst	0x00a90508 ; undefined
    1aa8:	01020000 	.inst	0x01020000 ; undefined
    1aac:	0000fe08 	.inst	0x0000fe08 ; undefined
    1ab0:	07020200 	.inst	0x07020200 ; undefined
    1ab4:	00000131 	.inst	0x00000131 ; undefined
    1ab8:	16070402 	b	fffffffff81c2ac0 <SMC_ID_HW_RSA+0xffffffff741b2bb9>
    1abc:	04000001 	.inst	0x04000001 ; undefined
    1ac0:	00000085 	.inst	0x00000085 ; undefined
    1ac4:	00297a02 	.inst	0x00297a02 ; NYI
    1ac8:	04040000 	.inst	0x04040000 ; undefined
    1acc:	03000006 	.inst	0x03000006 ; undefined
    1ad0:	00004c0d 	.inst	0x00004c0d ; undefined
    1ad4:	003f0400 	.inst	0x003f0400 ; NYI
    1ad8:	11030000 	add	w0, w0, #0xc0
    1adc:	0000005a 	.inst	0x0000005a ; undefined
    1ae0:	0c070802 	.inst	0x0c070802 ; undefined
    1ae4:	02000001 	.inst	0x02000001 ; undefined
    1ae8:	00a40508 	.inst	0x00a40508 ; undefined
    1aec:	1e050000 	.inst	0x1e050000 ; undefined
    1af0:	1800000a 	ldr	w10, 1af0 <_stack_size+0xaf0>
    1af4:	00fd1204 	.inst	0x00fd1204 ; undefined
    1af8:	61060000 	.inst	0x61060000 ; undefined
    1afc:	04000008 	.inst	0x04000008 ; undefined
    1b00:	00005a13 	.inst	0x00005a13 ; undefined
    1b04:	17060000 	b	fffffffffc181b04 <SMC_ID_HW_RSA+0xffffffff78171bfd>
    1b08:	0400000b 	.inst	0x0400000b ; undefined
    1b0c:	0000fd14 	.inst	0x0000fd14 ; undefined
    1b10:	c8060400 	stxr	w6, x0, [x0]
    1b14:	0400000b 	.inst	0x0400000b ; undefined
    1b18:	00005a15 	.inst	0x00005a15 ; undefined
    1b1c:	07060c00 	.inst	0x07060c00 ; undefined
    1b20:	0400000a 	.inst	0x0400000a ; undefined
    1b24:	00005316 	.inst	0x00005316 ; undefined
    1b28:	ad061000 	stp	q0, q4, [x0,#192]
    1b2c:	04000008 	.inst	0x04000008 ; undefined
    1b30:	00005317 	.inst	0x00005317 ; undefined
    1b34:	85061200 	.inst	0x85061200 ; undefined
    1b38:	0400000a 	.inst	0x0400000a ; undefined
    1b3c:	00004c18 	.inst	0x00004c18 ; undefined
    1b40:	df061400 	.inst	0xdf061400 ; undefined
    1b44:	04000009 	.inst	0x04000009 ; undefined
    1b48:	00004c19 	.inst	0x00004c19 ; undefined
    1b4c:	c0061500 	.inst	0xc0061500 ; undefined
    1b50:	04000009 	.inst	0x04000009 ; undefined
    1b54:	00004c1a 	.inst	0x00004c1a ; undefined
    1b58:	07001600 	.inst	0x07001600 ; undefined
    1b5c:	00000114 	.inst	0x00000114 ; undefined
    1b60:	0000010d 	.inst	0x0000010d ; undefined
    1b64:	00010d08 	.inst	0x00010d08 ; undefined
    1b68:	02000700 	.inst	0x02000700 ; undefined
    1b6c:	059d0708 	.inst	0x059d0708 ; undefined
    1b70:	01020000 	.inst	0x01020000 ; undefined
    1b74:	00010708 	.inst	0x00010708 ; undefined
    1b78:	0b320500 	add	w0, w8, w18, uxtb #1
    1b7c:	04240000 	.inst	0x04240000 ; undefined
    1b80:	0001d01d 	.inst	0x0001d01d ; undefined
    1b84:	0b9e0600 	add	w0, w16, w30, asr #1
    1b88:	1e040000 	.inst	0x1e040000 ; undefined
    1b8c:	0000004c 	.inst	0x0000004c ; undefined
    1b90:	09f30600 	.inst	0x09f30600 ; undefined
    1b94:	1f040000 	fmadd	s0, s0, s4, s0
    1b98:	00000053 	.inst	0x00000053 ; undefined
    1b9c:	097e0602 	.inst	0x097e0602 ; undefined
    1ba0:	20040000 	.inst	0x20040000 ; undefined
    1ba4:	00000053 	.inst	0x00000053 ; undefined
    1ba8:	0ac30604 	and	w4, w16, w3, ror #1
    1bac:	21040000 	.inst	0x21040000 ; undefined
    1bb0:	0000005a 	.inst	0x0000005a ; undefined
    1bb4:	09fc0608 	.inst	0x09fc0608 ; undefined
    1bb8:	22040000 	.inst	0x22040000 ; undefined
    1bbc:	0000005a 	.inst	0x0000005a ; undefined
    1bc0:	0aef060c 	bic	w12, w16, w15, ror #1
    1bc4:	23040000 	.inst	0x23040000 ; undefined
    1bc8:	0000005a 	.inst	0x0000005a ; undefined
    1bcc:	09b30610 	.inst	0x09b30610 ; undefined
    1bd0:	24040000 	.inst	0x24040000 ; undefined
    1bd4:	0000005a 	.inst	0x0000005a ; undefined
    1bd8:	0a260614 	bic	w20, w16, w6, lsl #1
    1bdc:	25040000 	.inst	0x25040000 ; undefined
    1be0:	0000005a 	.inst	0x0000005a ; undefined
    1be4:	08180618 	stxrb	w24, w24, [x16]
    1be8:	26040000 	.inst	0x26040000 ; undefined
    1bec:	0000005a 	.inst	0x0000005a ; undefined
    1bf0:	0a5d091c 	and	w28, w8, w29, lsr #2
    1bf4:	27040000 	.inst	0x27040000 ; undefined
    1bf8:	0000005a 	.inst	0x0000005a ; undefined
    1bfc:	201f0104 	.inst	0x201f0104 ; undefined
    1c00:	00099709 	.inst	0x00099709 ; undefined
    1c04:	5a280400 	.inst	0x5a280400 ; undefined
    1c08:	04000000 	.inst	0x04000000 ; undefined
    1c0c:	09201e01 	.inst	0x09201e01 ; undefined
    1c10:	000009e5 	.inst	0x000009e5 ; undefined
    1c14:	005a2904 	.inst	0x005a2904 ; undefined
    1c18:	01040000 	.inst	0x01040000 ; undefined
    1c1c:	4e09201d 	tbl	v29.16b, {v0.16b, v1.16b}, v9.16b
    1c20:	0400000a 	.inst	0x0400000a ; undefined
    1c24:	00005a2a 	.inst	0x00005a2a ; undefined
    1c28:	1c010400 	ldr	s0, 3ca8 <_stack_size+0x2ca8>
    1c2c:	46050020 	.inst	0x46050020 ; undefined
    1c30:	10000009 	adr	x9, 1c30 <_stack_size+0xc30>
    1c34:	020d2d04 	.inst	0x020d2d04 ; undefined
    1c38:	720a0000 	ands	w0, w0, #0x400000
    1c3c:	04007665 	.inst	0x04007665 ; undefined
    1c40:	00004c2e 	.inst	0x00004c2e ; undefined
    1c44:	48060000 	stxrh	w6, w0, [x0]
    1c48:	0400000b 	.inst	0x0400000b ; undefined
    1c4c:	00005a2f 	.inst	0x00005a2f ; undefined
    1c50:	ec060400 	.inst	0xec060400 ; undefined
    1c54:	0400000a 	.inst	0x0400000a ; undefined
    1c58:	00005a30 	.inst	0x00005a30 ; undefined
    1c5c:	f7060800 	.inst	0xf7060800 ; undefined
    1c60:	0400000a 	.inst	0x0400000a ; undefined
    1c64:	00005a31 	.inst	0x00005a31 ; undefined
    1c68:	05000c00 	.inst	0x05000c00 ; undefined
    1c6c:	00000b8f 	.inst	0x00000b8f ; undefined
    1c70:	26340404 	.inst	0x26340404 ; undefined
    1c74:	06000002 	.inst	0x06000002 ; undefined
    1c78:	00000aec 	.inst	0x00000aec ; undefined
    1c7c:	005a3504 	.inst	0x005a3504 ; undefined
    1c80:	00000000 	.inst	0x00000000 ; undefined
    1c84:	3804780b 	sttrb	w11, [x0,#71]
    1c88:	0000028f 	.inst	0x0000028f ; undefined
    1c8c:	6163720a 	.inst	0x6163720a ; undefined
    1c90:	5a390400 	.inst	0x5a390400 ; undefined
    1c94:	00000000 	.inst	0x00000000 ; undefined
    1c98:	0008b206 	.inst	0x0008b206 ; undefined
    1c9c:	5a3a0400 	.inst	0x5a3a0400 ; undefined
    1ca0:	04000000 	.inst	0x04000000 ; undefined
    1ca4:	00095206 	.inst	0x00095206 ; undefined
    1ca8:	8f440400 	.inst	0x8f440400 ; undefined
    1cac:	08000002 	stxrb	w0, w2, [x0]
    1cb0:	000a6a06 	.inst	0x000a6a06 ; undefined
    1cb4:	8f450400 	.inst	0x8f450400 ; undefined
    1cb8:	18000002 	ldr	w2, 1cb8 <_stack_size+0xcb8>
    1cbc:	6469630a 	.inst	0x6469630a ; undefined
    1cc0:	90470400 	adrp	x0, 8e081000 <SMC_ID_HW_RSA+0xa0710f9>
    1cc4:	28000000 	stnp	w0, w0, [x0]
    1cc8:	6473630a 	.inst	0x6473630a ; undefined
    1ccc:	1b480400 	.inst	0x1b480400 ; undefined
    1cd0:	40000001 	.inst	0x40000001 ; undefined
    1cd4:	00094a06 	.inst	0x00094a06 ; undefined
    1cd8:	d0490400 	adrp	x0, 92083000 <SMC_ID_HW_RSA+0xe0730f9>
    1cdc:	64000001 	.inst	0x64000001 ; undefined
    1ce0:	00083d06 	.inst	0x00083d06 ; undefined
    1ce4:	0d4a0400 	.inst	0x0d4a0400 ; undefined
    1ce8:	74000002 	.inst	0x74000002 ; undefined
    1cec:	00770700 	.inst	0x00770700 ; undefined
    1cf0:	029f0000 	.inst	0x029f0000 ; undefined
    1cf4:	0d080000 	.inst	0x0d080000 ; undefined
    1cf8:	03000001 	.inst	0x03000001 ; undefined
    1cfc:	0b3a0400 	add	w0, w0, w26, uxtb #1
    1d00:	4c040000 	.inst	0x4c040000 ; undefined
    1d04:	00000226 	.inst	0x00000226 ; undefined
    1d08:	006c080c 	.inst	0x006c080c ; undefined
    1d0c:	080c0000 	stxrb	w12, w0, [x0]
    1d10:	00000077 	.inst	0x00000077 ; undefined
    1d14:	1905040d 	.inst	0x1905040d ; undefined
    1d18:	000002ef 	.inst	0x000002ef ; undefined
    1d1c:	0008a40e 	.inst	0x0008a40e ; undefined
    1d20:	8b0e0000 	add	x0, x0, x14
    1d24:	0100000a 	.inst	0x0100000a ; undefined
    1d28:	000a960e 	.inst	0x000a960e ; undefined
    1d2c:	680e0200 	.inst	0x680e0200 ; undefined
    1d30:	03000008 	.inst	0x03000008 ; undefined
    1d34:	0009130e 	.inst	0x0009130e ; undefined
    1d38:	1c0e0400 	ldr	s0, 1ddb8 <_stack_size+0x1cdb8>
    1d3c:	05000009 	.inst	0x05000009 ; undefined
    1d40:	0009250e 	.inst	0x0009250e ; undefined
    1d44:	2e0e0600 	.inst	0x2e0e0600 ; undefined
    1d48:	07000009 	.inst	0x07000009 ; undefined
    1d4c:	0a0d0400 	and	w0, w0, w13, lsl #1
    1d50:	22050000 	.inst	0x22050000 ; undefined
    1d54:	000002b6 	.inst	0x000002b6 ; undefined
    1d58:	000acb0f 	.inst	0x000acb0f ; undefined
    1d5c:	01b70100 	.inst	0x01b70100 ; undefined
    1d60:	00000340 	.inst	0x00000340 ; undefined
    1d64:	000aa510 	.inst	0x000aa510 ; undefined
    1d68:	40b70100 	.inst	0x40b70100 ; undefined
    1d6c:	10000003 	adr	x3, 1d6c <_stack_size+0xd6c>
    1d70:	00000979 	.inst	0x00000979 ; undefined
    1d74:	0077b701 	.inst	0x0077b701 ; undefined
    1d78:	34100000 	cbz	w0, 21d78 <_stack_size+0x20d78>
    1d7c:	0100001e 	.inst	0x0100001e ; undefined
    1d80:	000077b7 	.inst	0x000077b7 ; undefined
    1d84:	006e1100 	.inst	0x006e1100 ; undefined
    1d88:	005ab801 	.inst	0x005ab801 ; undefined
    1d8c:	13120000 	sbfiz	w0, w0, #14, #1
    1d90:	00000b07 	.inst	0x00000b07 ; undefined
    1d94:	003ec801 	.inst	0x003ec801 ; NYI
    1d98:	00140000 	.inst	0x00140000 ; undefined
    1d9c:	080c0000 	stxrb	w12, w0, [x0]
    1da0:	00000346 	.inst	0x00000346 ; undefined
    1da4:	00007715 	.inst	0x00007715 ; undefined
    1da8:	0b291600 	.inst	0x0b291600 ; undefined
    1dac:	1d010000 	.inst	0x1d010000 ; undefined
    1db0:	88170101 	stxr	w23, w1, [x8]
    1db4:	01000008 	.inst	0x01000008 ; undefined
    1db8:	0077017c 	.inst	0x0077017c ; undefined
    1dbc:	72010000 	ands	w0, w0, #0x80000000
    1dc0:	18000003 	ldr	w3, 1dc0 <_stack_size+0xdc0>
    1dc4:	00000aa5 	.inst	0x00000aa5 ; undefined
    1dc8:	77017c01 	.inst	0x77017c01 ; undefined
    1dcc:	00000000 	.inst	0x00000000 ; undefined
    1dd0:	0002fa19 	.inst	0x0002fa19 ; undefined
    1dd4:	00116000 	.inst	0x00116000 ; undefined
    1dd8:	00000003 	.inst	0x00000003 ; undefined
    1ddc:	0000d000 	.inst	0x0000d000 ; undefined
    1de0:	00000000 	.inst	0x00000000 ; undefined
    1de4:	e29c0100 	.inst	0xe29c0100 ; undefined
    1de8:	1a000004 	adc	w4, w0, w0
    1dec:	00000306 	.inst	0x00000306 ; undefined
    1df0:	00002879 	.inst	0x00002879 ; undefined
    1df4:	0003111a 	.inst	0x0003111a ; undefined
    1df8:	00290100 	.inst	0x00290100 ; NYI
    1dfc:	031c1a00 	.inst	0x031c1a00 ; undefined
    1e00:	29760000 	ldp	w0, w0, [x0,#-80]
    1e04:	271b0000 	.inst	0x271b0000 ; undefined
    1e08:	fe000003 	.inst	0xfe000003 ; undefined
    1e0c:	1c000029 	ldr	s9, 1e10 <_stack_size+0xe10>
    1e10:	03001194 	.inst	0x03001194 ; undefined
    1e14:	00000000 	.inst	0x00000000 ; undefined
    1e18:	00000014 	.inst	0x00000014 ; undefined
    1e1c:	00000000 	.inst	0x00000000 ; undefined
    1e20:	000003ec 	.inst	0x000003ec ; undefined
    1e24:	0003311d 	.inst	0x0003311d ; undefined
    1e28:	03d30000 	.inst	0x03d30000 ; undefined
    1e2c:	14140000 	b	501e2c <_stack_size+0x500e2c>
    1e30:	11a81e00 	.inst	0x11a81e00 ; undefined
    1e34:	00000300 	.inst	0x00000300 ; undefined
    1e38:	11930000 	.inst	0x11930000 ; undefined
    1e3c:	011f0000 	.inst	0x011f0000 ; undefined
    1e40:	1f300150 	fnmadd	s16, s10, s16, s0
    1e44:	31015101 	adds	w1, w8, #0x54
    1e48:	40200000 	.inst	0x40200000 ; undefined
    1e4c:	d4000002 	hvc	#0x0
    1e50:	1a000004 	adc	w4, w0, w0
    1e54:	0000031c 	.inst	0x0000031c ; undefined
    1e58:	00002a73 	.inst	0x00002a73 ; undefined
    1e5c:	0003111a 	.inst	0x0003111a ; undefined
    1e60:	002aac00 	.inst	0x002aac00 ; NYI
    1e64:	03061a00 	.inst	0x03061a00 ; undefined
    1e68:	2ae50000 	orn	w0, w0, w5, ror #0
    1e6c:	40210000 	.inst	0x40210000 ; undefined
    1e70:	22000002 	.inst	0x22000002 ; undefined
    1e74:	00000327 	.inst	0x00000327 ; undefined
    1e78:	00024021 	.inst	0x00024021 ; undefined
    1e7c:	11ec2300 	.inst	0x11ec2300 ; undefined
    1e80:	00000300 	.inst	0x00000300 ; undefined
    1e84:	11a40000 	.inst	0x11a40000 ; undefined
    1e88:	043e0000 	.inst	0x043e0000 ; undefined
    1e8c:	011f0000 	.inst	0x011f0000 ; undefined
    1e90:	18030950 	ldr	w16, 7fb8 <_stack_size+0x6fb8>
    1e94:	0003009d 	.inst	0x0003009d ; undefined
    1e98:	00000000 	.inst	0x00000000 ; undefined
    1e9c:	0011f423 	.inst	0x0011f423 ; undefined
    1ea0:	00000003 	.inst	0x00000003 ; undefined
    1ea4:	0011c100 	.inst	0x0011c100 ; undefined
    1ea8:	00045600 	.inst	0x00045600 ; undefined
    1eac:	50011f00 	adr	x0, 428e <_stack_size+0x328e>
    1eb0:	00008402 	.inst	0x00008402 ; undefined
    1eb4:	0011fc23 	.inst	0x0011fc23 ; undefined
    1eb8:	00000003 	.inst	0x00000003 ; undefined
    1ebc:	0011a400 	.inst	0x0011a400 ; undefined
    1ec0:	00046e00 	.inst	0x00046e00 ; undefined
    1ec4:	50011f00 	adr	x0, 42a6 <_stack_size+0x32a6>
    1ec8:	00008302 	.inst	0x00008302 ; undefined
    1ecc:	00120423 	.inst	0x00120423 ; undefined
    1ed0:	00000003 	.inst	0x00000003 ; undefined
    1ed4:	0011c100 	.inst	0x0011c100 ; undefined
    1ed8:	00048600 	.inst	0x00048600 ; undefined
    1edc:	50011f00 	adr	x0, 42be <_stack_size+0x32be>
    1ee0:	00008502 	.inst	0x00008502 ; undefined
    1ee4:	00120c23 	.inst	0x00120c23 ; undefined
    1ee8:	00000003 	.inst	0x00000003 ; undefined
    1eec:	0011a400 	.inst	0x0011a400 ; undefined
    1ef0:	00049e00 	.inst	0x00049e00 ; undefined
    1ef4:	50011f00 	adr	x0, 42d6 <_stack_size+0x32d6>
    1ef8:	00008302 	.inst	0x00008302 ; undefined
    1efc:	00121423 	.inst	0x00121423 ; undefined
    1f00:	00000003 	.inst	0x00000003 ; undefined
    1f04:	0011c100 	.inst	0x0011c100 ; undefined
    1f08:	0004b600 	.inst	0x0004b600 ; undefined
    1f0c:	50011f00 	adr	x0, 42ee <_stack_size+0x32ee>
    1f10:	00008602 	.inst	0x00008602 ; undefined
    1f14:	00122c24 	.inst	0x00122c24 ; undefined
    1f18:	00000003 	.inst	0x00000003 ; undefined
    1f1c:	0011a400 	.inst	0x0011a400 ; undefined
    1f20:	50011f00 	adr	x0, 4302 <_stack_size+0x3302>
    1f24:	9d480309 	.inst	0x9d480309 ; undefined
    1f28:	00000300 	.inst	0x00000300 ; undefined
    1f2c:	00000000 	.inst	0x00000000 ; undefined
    1f30:	30250000 	adr	x0, 4bf31 <_stack_size+0x4af31>
    1f34:	00030012 	.inst	0x00030012 ; undefined
    1f38:	d3000000 	.inst	0xd3000000 ; undefined
    1f3c:	00000011 	.inst	0x00000011 ; undefined
    1f40:	00087c26 	.inst	0x00087c26 ; undefined
    1f44:	77d10100 	.inst	0x77d10100 ; undefined
    1f48:	30000000 	adr	x0, 1f49 <_stack_size+0xf49>
    1f4c:	00030012 	.inst	0x00030012 ; undefined
    1f50:	18000000 	ldr	w0, 1f50 <_stack_size+0xf50>
    1f54:	00000001 	.inst	0x00000001 ; undefined
    1f58:	01000000 	.inst	0x01000000 ; undefined
    1f5c:	0006529c 	.inst	0x0006529c ; undefined
    1f60:	08822700 	.inst	0x08822700 ; undefined
    1f64:	d3010000 	.inst	0xd3010000 ; undefined
    1f68:	00000077 	.inst	0x00000077 ; undefined
    1f6c:	00002b1e 	.inst	0x00002b1e ; undefined
    1f70:	00124825 	.inst	0x00124825 ; undefined
    1f74:	00000003 	.inst	0x00000003 ; undefined
    1f78:	0011da00 	.inst	0x0011da00 ; undefined
    1f7c:	12802300 	mov	w0, #0xfffffee7            	// #-281
    1f80:	00000300 	.inst	0x00000300 ; undefined
    1f84:	11a40000 	.inst	0x11a40000 ; undefined
    1f88:	053e0000 	.inst	0x053e0000 ; undefined
    1f8c:	011f0000 	.inst	0x011f0000 ; undefined
    1f90:	38030950 	sttrb	w16, [x10,#48]
    1f94:	0003009e 	.inst	0x0003009e ; undefined
    1f98:	00000000 	.inst	0x00000000 ; undefined
    1f9c:	00129423 	.inst	0x00129423 ; undefined
    1fa0:	00000003 	.inst	0x00000003 ; undefined
    1fa4:	0011a400 	.inst	0x0011a400 ; undefined
    1fa8:	00055d00 	.inst	0x00055d00 ; undefined
    1fac:	50011f00 	adr	x0, 438e <_stack_size+0x338e>
    1fb0:	9d600309 	.inst	0x9d600309 ; undefined
    1fb4:	00000300 	.inst	0x00000300 ; undefined
    1fb8:	23000000 	.inst	0x23000000 ; undefined
    1fbc:	030012ac 	.inst	0x030012ac ; undefined
    1fc0:	00000000 	.inst	0x00000000 ; undefined
    1fc4:	000011a4 	.inst	0x000011a4 ; undefined
    1fc8:	0000057c 	.inst	0x0000057c ; undefined
    1fcc:	0950011f 	.inst	0x0950011f ; undefined
    1fd0:	009d5003 	.inst	0x009d5003 ; undefined
    1fd4:	00000003 	.inst	0x00000003 ; undefined
    1fd8:	c4230000 	.inst	0xc4230000 ; undefined
    1fdc:	00030012 	.inst	0x00030012 ; undefined
    1fe0:	a4000000 	.inst	0xa4000000 ; undefined
    1fe4:	9b000011 	madd	x17, x0, x0, x0
    1fe8:	1f000005 	fmadd	s5, s0, s0, s0
    1fec:	03095001 	.inst	0x03095001 ; undefined
    1ff0:	03009d78 	.inst	0x03009d78 ; undefined
    1ff4:	00000000 	.inst	0x00000000 ; undefined
    1ff8:	12dc2300 	.inst	0x12dc2300 ; undefined
    1ffc:	00000300 	.inst	0x00000300 ; undefined
    2000:	11a40000 	.inst	0x11a40000 ; undefined
    2004:	05ba0000 	.inst	0x05ba0000 ; undefined
    2008:	011f0000 	.inst	0x011f0000 ; undefined
    200c:	98030950 	ldrsw	x16, 8134 <_stack_size+0x7134>
    2010:	0003009d 	.inst	0x0003009d ; undefined
    2014:	00000000 	.inst	0x00000000 ; undefined
    2018:	0012f023 	.inst	0x0012f023 ; undefined
    201c:	00000003 	.inst	0x00000003 ; undefined
    2020:	0011a400 	.inst	0x0011a400 ; undefined
    2024:	0005d900 	.inst	0x0005d900 ; undefined
    2028:	50011f00 	adr	x0, 440a <_stack_size+0x340a>
    202c:	9db80309 	.inst	0x9db80309 ; undefined
    2030:	00000300 	.inst	0x00000300 ; undefined
    2034:	23000000 	.inst	0x23000000 ; undefined
    2038:	03001304 	.inst	0x03001304 ; undefined
    203c:	00000000 	.inst	0x00000000 ; undefined
    2040:	000011a4 	.inst	0x000011a4 ; undefined
    2044:	000005f8 	.inst	0x000005f8 ; undefined
    2048:	0950011f 	.inst	0x0950011f ; undefined
    204c:	009de003 	.inst	0x009de003 ; undefined
    2050:	00000003 	.inst	0x00000003 ; undefined
    2054:	18230000 	ldr	w0, 48054 <_stack_size+0x47054>
    2058:	00030013 	.inst	0x00030013 ; undefined
    205c:	a4000000 	.inst	0xa4000000 ; undefined
    2060:	17000011 	b	fffffffffc0020a4 <SMC_ID_HW_RSA+0xffffffff77ff219d>
    2064:	1f000006 	fmadd	s6, s0, s0, s0
    2068:	03095001 	.inst	0x03095001 ; undefined
    206c:	03009df8 	.inst	0x03009df8 ; undefined
    2070:	00000000 	.inst	0x00000000 ; undefined
    2074:	132c2300 	.inst	0x132c2300 ; undefined
    2078:	00000300 	.inst	0x00000300 ; undefined
    207c:	11a40000 	.inst	0x11a40000 ; undefined
    2080:	06360000 	.inst	0x06360000 ; undefined
    2084:	011f0000 	.inst	0x011f0000 ; undefined
    2088:	10030950 	adr	x16, 81b0 <_stack_size+0x71b0>
    208c:	0003009e 	.inst	0x0003009e ; undefined
    2090:	00000000 	.inst	0x00000000 ; undefined
    2094:	0013401e 	.inst	0x0013401e ; undefined
    2098:	00000003 	.inst	0x00000003 ; undefined
    209c:	0011a400 	.inst	0x0011a400 ; undefined
    20a0:	50011f00 	adr	x0, 4482 <_stack_size+0x3482>
    20a4:	9e200309 	fcvtns	x9, s24
    20a8:	00000300 	.inst	0x00000300 ; undefined
    20ac:	00000000 	.inst	0x00000000 ; undefined
    20b0:	00034b19 	.inst	0x00034b19 ; undefined
    20b4:	00134800 	.inst	0x00134800 ; undefined
    20b8:	00000003 	.inst	0x00000003 ; undefined
    20bc:	00001400 	.inst	0x00001400 ; undefined
    20c0:	00000000 	.inst	0x00000000 ; undefined
    20c4:	7b9c0100 	.inst	0x7b9c0100 ; undefined
    20c8:	28000006 	stnp	w6, w0, [x0]
    20cc:	0300135c 	.inst	0x0300135c ; undefined
    20d0:	00000000 	.inst	0x00000000 ; undefined
    20d4:	000011da 	.inst	0x000011da ; undefined
    20d8:	095a2900 	.inst	0x095a2900 ; undefined
    20dc:	23010000 	.inst	0x23010000 ; undefined
    20e0:	00003e01 	.inst	0x00003e01 ; undefined
    20e4:	00135c00 	.inst	0x00135c00 ; undefined
    20e8:	00000003 	.inst	0x00000003 ; undefined
    20ec:	0000c800 	.inst	0x0000c800 ; undefined
    20f0:	00000000 	.inst	0x00000000 ; undefined
    20f4:	5f9c0100 	.inst	0x5f9c0100 ; undefined
    20f8:	2a000007 	orr	w7, w0, w0
    20fc:	00000bdb 	.inst	0x00000bdb ; undefined
    2100:	77012301 	.inst	0x77012301 ; undefined
    2104:	7a000000 	sbcs	w0, w0, w0
    2108:	2a00002b 	orr	w11, w1, w0
    210c:	00000845 	.inst	0x00000845 ; undefined
    2110:	77012301 	.inst	0x77012301 ; undefined
    2114:	c6000000 	.inst	0xc6000000 ; undefined
    2118:	2a00002b 	orr	w11, w1, w0
    211c:	00000aff 	.inst	0x00000aff ; undefined
    2120:	77012301 	.inst	0x77012301 ; undefined
    2124:	12000000 	and	w0, w0, #0x1
    2128:	2b00002c 	adds	w12, w1, w0
    212c:	00637263 	.inst	0x00637263 ; undefined
    2130:	77012301 	.inst	0x77012301 ; undefined
    2134:	5e000000 	sha1c	q0, s0, v0.4s
    2138:	2500002c 	.inst	0x2500002c ; undefined
    213c:	03001394 	.inst	0x03001394 ; undefined
    2140:	00000000 	.inst	0x00000000 ; undefined
    2144:	000011da 	.inst	0x000011da ; undefined
    2148:	0013a825 	.inst	0x0013a825 ; undefined
    214c:	00000003 	.inst	0x00000003 ; undefined
    2150:	0011da00 	.inst	0x0011da00 ; undefined
    2154:	13bc2500 	.inst	0x13bc2500 ; undefined
    2158:	00000300 	.inst	0x00000300 ; undefined
    215c:	11da0000 	.inst	0x11da0000 ; undefined
    2160:	e0250000 	.inst	0xe0250000 ; undefined
    2164:	00030013 	.inst	0x00030013 ; undefined
    2168:	da000000 	sbc	x0, x0, x0
    216c:	23000011 	.inst	0x23000011 ; undefined
    2170:	030013f0 	.inst	0x030013f0 ; undefined
    2174:	00000000 	.inst	0x00000000 ; undefined
    2178:	000002fa 	.inst	0x000002fa ; undefined
    217c:	00000733 	.inst	0x00000733 ; undefined
    2180:	0250011f 	.inst	0x0250011f ; undefined
    2184:	011f0085 	.inst	0x011f0085 ; undefined
    2188:	1f340151 	fnmadd	s17, s10, s20, s0
    218c:	34015201 	cbz	w1, 4bcc <_stack_size+0x3bcc>
    2190:	14042300 	b	10ad90 <_stack_size+0x109d90>
    2194:	00000300 	.inst	0x00000300 ; undefined
    2198:	02fa0000 	.inst	0x02fa0000 ; undefined
    219c:	07510000 	.inst	0x07510000 ; undefined
    21a0:	011f0000 	.inst	0x011f0000 ; undefined
    21a4:	000a0351 	.inst	0x000a0351 ; undefined
    21a8:	52011f02 	eor	w2, w24, #0x8000007f
    21ac:	25003001 	.inst	0x25003001 ; undefined
    21b0:	0300140c 	.inst	0x0300140c ; undefined
    21b4:	00000000 	.inst	0x00000000 ; undefined
    21b8:	000011da 	.inst	0x000011da ; undefined
    21bc:	0bb22900 	.inst	0x0bb22900 ; undefined
    21c0:	42010000 	.inst	0x42010000 ; undefined
    21c4:	00003e01 	.inst	0x00003e01 ; undefined
    21c8:	00142400 	.inst	0x00142400 ; undefined
    21cc:	00000003 	.inst	0x00000003 ; undefined
    21d0:	0000e800 	.inst	0x0000e800 ; undefined
    21d4:	00000000 	.inst	0x00000000 ; undefined
    21d8:	8a9c0100 	and	x0, x8, x28, asr #0
    21dc:	2a000008 	orr	w8, w0, w0
    21e0:	00000bdb 	.inst	0x00000bdb ; undefined
    21e4:	77014201 	.inst	0x77014201 ; undefined
    21e8:	aa000000 	orr	x0, x0, x0
    21ec:	2a00002c 	orr	w12, w1, w0
    21f0:	00000845 	.inst	0x00000845 ; undefined
    21f4:	77014201 	.inst	0x77014201 ; undefined
    21f8:	f6000000 	.inst	0xf6000000 ; undefined
    21fc:	2a00002c 	orr	w12, w1, w0
    2200:	00000aff 	.inst	0x00000aff ; undefined
    2204:	77014201 	.inst	0x77014201 ; undefined
    2208:	42000000 	.inst	0x42000000 ; undefined
    220c:	2b00002d 	adds	w13, w1, w0
    2210:	00637263 	.inst	0x00637263 ; undefined
    2214:	77014201 	.inst	0x77014201 ; undefined
    2218:	8e000000 	.inst	0x8e000000 ; undefined
    221c:	2c00002d 	stnp	s13, s0, [x1]
    2220:	0000096f 	.inst	0x0000096f ; undefined
    2224:	3e014401 	.inst	0x3e014401 ; undefined
    2228:	da000000 	sbc	x0, x0, x0
    222c:	2d00002d 	stp	s13, s0, [x1]
    2230:	0000034b 	.inst	0x0000034b ; undefined
    2234:	030014dc 	.inst	0x030014dc ; undefined
    2238:	00000000 	.inst	0x00000000 ; undefined
    223c:	0000001c 	.inst	0x0000001c ; undefined
    2240:	00000000 	.inst	0x00000000 ; undefined
    2244:	fb017201 	.inst	0xfb017201 ; undefined
    2248:	25000007 	.inst	0x25000007 ; undefined
    224c:	030014f4 	.inst	0x030014f4 ; undefined
    2250:	00000000 	.inst	0x00000000 ; undefined
    2254:	000011da 	.inst	0x000011da ; undefined
    2258:	145c2500 	b	170b658 <MPIDR_EL1_MT+0x70b658>
    225c:	00000300 	.inst	0x00000300 ; undefined
    2260:	11da0000 	.inst	0x11da0000 ; undefined
    2264:	70250000 	adr	x0, 4c267 <_stack_size+0x4b267>
    2268:	00030014 	.inst	0x00030014 ; undefined
    226c:	da000000 	sbc	x0, x0, x0
    2270:	25000011 	.inst	0x25000011 ; undefined
    2274:	03001484 	.inst	0x03001484 ; undefined
    2278:	00000000 	.inst	0x00000000 ; undefined
    227c:	000011da 	.inst	0x000011da ; undefined
    2280:	0014a825 	.inst	0x0014a825 ; undefined
    2284:	00000003 	.inst	0x00000003 ; undefined
    2288:	0011da00 	.inst	0x0011da00 ; undefined
    228c:	14b82300 	b	2e0ae8c <MPIDR_EL1_MT+0x1e0ae8c>
    2290:	00000300 	.inst	0x00000300 ; undefined
    2294:	02fa0000 	.inst	0x02fa0000 ; undefined
    2298:	08510000 	ldxrb	w0, [x0]
    229c:	011f0000 	.inst	0x011f0000 ; undefined
    22a0:	00850250 	.inst	0x00850250 ; undefined
    22a4:	0151011f 	.inst	0x0151011f ; undefined
    22a8:	52011f34 	eor	w20, w25, #0x8000007f
    22ac:	23003401 	.inst	0x23003401 ; undefined
    22b0:	030014cc 	.inst	0x030014cc ; undefined
    22b4:	00000000 	.inst	0x00000000 ; undefined
    22b8:	000002fa 	.inst	0x000002fa ; undefined
    22bc:	0000086f 	.inst	0x0000086f ; undefined
    22c0:	0351011f 	.inst	0x0351011f ; undefined
    22c4:	1f02000a 	fmadd	s10, s0, s2, s0
    22c8:	30015201 	adr	x1, 4d09 <_stack_size+0x3d09>
    22cc:	14d42500 	b	350b6cc <_stack_base+0x4fdf4c>
    22d0:	00000300 	.inst	0x00000300 ; undefined
    22d4:	11da0000 	.inst	0x11da0000 ; undefined
    22d8:	d8250000 	prfm	pldl1keep, 4c2d8 <_stack_size+0x4b2d8>
    22dc:	00030014 	.inst	0x00030014 ; undefined
    22e0:	e2000000 	.inst	0xe2000000 ; undefined
    22e4:	00000004 	.inst	0x00000004 ; undefined
    22e8:	00035419 	.inst	0x00035419 ; undefined
    22ec:	00150c00 	.inst	0x00150c00 ; undefined
    22f0:	00000003 	.inst	0x00000003 ; undefined
    22f4:	00002c00 	.inst	0x00002c00 ; undefined
    22f8:	00000000 	.inst	0x00000000 ; undefined
    22fc:	af9c0100 	.inst	0xaf9c0100 ; undefined
    2300:	1a000008 	adc	w8, w0, w0
    2304:	00000365 	.inst	0x00000365 ; undefined
    2308:	00002e25 	.inst	0x00002e25 ; undefined
    230c:	0bcf2e00 	.inst	0x0bcf2e00 ; undefined
    2310:	89010000 	.inst	0x89010000 ; undefined
    2314:	00153801 	.inst	0x00153801 ; undefined
    2318:	00000003 	.inst	0x00000003 ; undefined
    231c:	0000ac00 	.inst	0x0000ac00 ; undefined
    2320:	00000000 	.inst	0x00000000 ; undefined
    2324:	669c0100 	.inst	0x669c0100 ; undefined
    2328:	2a000009 	orr	w9, w0, w0
    232c:	00000aa1 	.inst	0x00000aa1 ; undefined
    2330:	77018901 	.inst	0x77018901 ; undefined
    2334:	5b000000 	.inst	0x5b000000 ; undefined
    2338:	2a00002e 	orr	w14, w1, w0
    233c:	00000856 	.inst	0x00000856 ; undefined
    2340:	77018901 	.inst	0x77018901 ; undefined
    2344:	91000000 	add	x0, x0, #0x0
    2348:	2c00002e 	stnp	s14, s0, [x1]
    234c:	00000b75 	.inst	0x00000b75 ; undefined
    2350:	b0018b01 	adrp	x1, 3163000 <_stack_base+0x155880>
    2354:	ca000002 	eor	x2, x0, x0
    2358:	2c00002e 	stnp	s14, s0, [x1]
    235c:	0000098f 	.inst	0x0000098f ; undefined
    2360:	77018c01 	.inst	0x77018c01 ; undefined
    2364:	15000000 	b	4002364 <_stack_base+0xff4be4>
    2368:	2f00002f 	.inst	0x2f00002f ; undefined
    236c:	00000b0e 	.inst	0x00000b0e ; undefined
    2370:	77018d01 	.inst	0x77018d01 ; undefined
    2374:	2c000000 	stnp	s0, s0, [x0]
    2378:	00000988 	.inst	0x00000988 ; undefined
    237c:	77018e01 	.inst	0x77018e01 ; undefined
    2380:	50000000 	adr	x0, 2382 <_stack_size+0x1382>
    2384:	2c00002f 	stnp	s15, s0, [x1]
    2388:	00000b21 	.inst	0x00000b21 ; undefined
    238c:	77019001 	.inst	0x77019001 ; undefined
    2390:	ae000000 	.inst	0xae000000 ; undefined
    2394:	2300002f 	.inst	0x2300002f ; undefined
    2398:	03001560 	.inst	0x03001560 ; undefined
    239c:	00000000 	.inst	0x00000000 ; undefined
    23a0:	000011e1 	.inst	0x000011e1 ; undefined
    23a4:	00000958 	.inst	0x00000958 ; undefined
    23a8:	0250011f 	.inst	0x0250011f ; undefined
    23ac:	011f0083 	.inst	0x011f0083 ; undefined
    23b0:	80830351 	.inst	0x80830351 ; undefined
    23b4:	e4280001 	.inst	0xe4280001 ; undefined
    23b8:	00030015 	.inst	0x00030015 ; undefined
    23bc:	e1000000 	.inst	0xe1000000 ; undefined
    23c0:	00000011 	.inst	0x00000011 ; undefined
    23c4:	000a7229 	.inst	0x000a7229 ; undefined
    23c8:	01c70100 	.inst	0x01c70100 ; undefined
    23cc:	0000003e 	.inst	0x0000003e ; undefined
    23d0:	030015e4 	.inst	0x030015e4 ; undefined
    23d4:	00000000 	.inst	0x00000000 ; undefined
    23d8:	000002ec 	.inst	0x000002ec ; undefined
    23dc:	00000000 	.inst	0x00000000 ; undefined
    23e0:	0b349c01 	.inst	0x0b349c01 ; undefined
    23e4:	db2a0000 	.inst	0xdb2a0000 ; undefined
    23e8:	0100000b 	.inst	0x0100000b ; undefined
    23ec:	007701c7 	.inst	0x007701c7 ; undefined
    23f0:	2ffc0000 	.inst	0x2ffc0000 ; undefined
    23f4:	252a0000 	.inst	0x252a0000 ; undefined
    23f8:	01000008 	.inst	0x01000008 ; undefined
    23fc:	007701c7 	.inst	0x007701c7 ; undefined
    2400:	30c10000 	adr	x0, fffffffffff84401 <SMC_ID_HW_RSA+0xffffffff7bf744fa>
    2404:	a12a0000 	.inst	0xa12a0000 ; undefined
    2408:	0100000a 	.inst	0x0100000a ; undefined
    240c:	007701c7 	.inst	0x007701c7 ; undefined
    2410:	31330000 	adds	w0, w0, #0xcc0
    2414:	562a0000 	.inst	0x562a0000 ; undefined
    2418:	01000008 	.inst	0x01000008 ; undefined
    241c:	007701c7 	.inst	0x007701c7 ; undefined
    2420:	317f0000 	adds	w0, w0, #0xfc0, lsl #12
    2424:	6f2c0000 	.inst	0x6f2c0000 ; undefined
    2428:	01000009 	.inst	0x01000009 ; undefined
    242c:	007701c8 	.inst	0x007701c8 ; undefined
    2430:	31f10000 	.inst	0x31f10000 ; undefined
    2434:	72300000 	ands	w0, w0, #0x10000
    2438:	01006765 	.inst	0x01006765 ; undefined
    243c:	007701c9 	.inst	0x007701c9 ; undefined
    2440:	31000000 	adds	w0, w0, #0x0
    2444:	00000354 	.inst	0x00000354 ; undefined
    2448:	030015ec 	.inst	0x030015ec ; undefined
    244c:	00000000 	.inst	0x00000000 ; undefined
    2450:	00000280 	.inst	0x00000280 ; undefined
    2454:	0701cb01 	.inst	0x0701cb01 ; undefined
    2458:	1a00000a 	adc	w10, w0, w0
    245c:	00000365 	.inst	0x00000365 ; undefined
    2460:	0000323c 	.inst	0x0000323c ; undefined
    2464:	16782500 	b	fffffffff9e0b864 <SMC_ID_HW_RSA+0xffffffff75dfb95d>
    2468:	00000300 	.inst	0x00000300 ; undefined
    246c:	11da0000 	.inst	0x11da0000 ; undefined
    2470:	84230000 	.inst	0x84230000 ; undefined
    2474:	00030016 	.inst	0x00030016 ; undefined
    2478:	af000000 	.inst	0xaf000000 ; undefined
    247c:	32000008 	orr	w8, w0, #0x1
    2480:	1f00000a 	fmadd	s10, s0, s0, s0
    2484:	85025001 	.inst	0x85025001 ; undefined
    2488:	51011f00 	sub	w0, w24, #0x47
    248c:	00008702 	.inst	0x00008702 ; undefined
    2490:	0016d025 	.inst	0x0016d025 ; undefined
    2494:	00000003 	.inst	0x00000003 ; undefined
    2498:	0011da00 	.inst	0x0011da00 ; undefined
    249c:	17082300 	b	fffffffffc20b09c <SMC_ID_HW_RSA+0xffffffff781fb195>
    24a0:	00000300 	.inst	0x00000300 ; undefined
    24a4:	11a40000 	.inst	0x11a40000 ; undefined
    24a8:	0a5e0000 	and	w0, w0, w30, lsr #0
    24ac:	011f0000 	.inst	0x011f0000 ; undefined
    24b0:	48030950 	stxrh	w3, w16, [x10]
    24b4:	0003009e 	.inst	0x0003009e ; undefined
    24b8:	00000000 	.inst	0x00000000 ; undefined
    24bc:	00172c25 	.inst	0x00172c25 ; undefined
    24c0:	00000003 	.inst	0x00000003 ; undefined
    24c4:	0011da00 	.inst	0x0011da00 ; undefined
    24c8:	17402300 	b	fffffffffd00b0c8 <SMC_ID_HW_RSA+0xffffffff78ffb1c1>
    24cc:	00000300 	.inst	0x00000300 ; undefined
    24d0:	02fa0000 	.inst	0x02fa0000 ; undefined
    24d4:	0a870000 	and	w0, w0, w7, asr #0
    24d8:	011f0000 	.inst	0x011f0000 ; undefined
    24dc:	1f340151 	fnmadd	s17, s10, s20, s0
    24e0:	34015201 	cbz	w1, 4f20 <_stack_size+0x3f20>
    24e4:	17542300 	b	fffffffffd50b0e4 <SMC_ID_HW_RSA+0xffffffff794fb1dd>
    24e8:	00000300 	.inst	0x00000300 ; undefined
    24ec:	02fa0000 	.inst	0x02fa0000 ; undefined
    24f0:	0aa30000 	bic	w0, w0, w3, asr #0
    24f4:	011f0000 	.inst	0x011f0000 ; undefined
    24f8:	1f380151 	fnmadd	s17, s10, s24, s0
    24fc:	38015201 	sturb	w1, [x16,#21]
    2500:	175c2500 	b	fffffffffd70b900 <SMC_ID_HW_RSA+0xffffffff796fb9f9>
    2504:	00000300 	.inst	0x00000300 ; undefined
    2508:	11da0000 	.inst	0x11da0000 ; undefined
    250c:	80230000 	.inst	0x80230000 ; NYI
    2510:	00030017 	.inst	0x00030017 ; undefined
    2514:	fa000000 	sbcs	x0, x0, x0
    2518:	ce000002 	.inst	0xce000002 ; undefined
    251c:	1f00000a 	fmadd	s10, s0, s0, s0
    2520:	0a035101 	and	w1, w8, w3, lsl #20
    2524:	011f0200 	.inst	0x011f0200 ; undefined
    2528:	00300152 	.inst	0x00300152 ; NYI
    252c:	00178825 	.inst	0x00178825 ; undefined
    2530:	00000003 	.inst	0x00000003 ; undefined
    2534:	0011da00 	.inst	0x0011da00 ; undefined
    2538:	17dc2500 	b	ffffffffff70b938 <SMC_ID_HW_RSA+0xffffffff7b6fba31>
    253c:	00000300 	.inst	0x00000300 ; undefined
    2540:	04e20000 	.inst	0x04e20000 ; undefined
    2544:	5c230000 	ldr	d0, 48544 <_stack_size+0x47544>
    2548:	00030018 	.inst	0x00030018 ; undefined
    254c:	fa000000 	sbcs	x0, x0, x0
    2550:	0a000002 	and	w2, w0, w0
    2554:	1f00000b 	fmadd	s11, s0, s0, s0
    2558:	83025001 	.inst	0x83025001 ; undefined
    255c:	51011f00 	sub	w0, w24, #0x47
    2560:	011f3201 	.inst	0x011f3201 ; undefined
    2564:	00320152 	.inst	0x00320152 ; NYI
    2568:	00186c25 	.inst	0x00186c25 ; undefined
    256c:	00000003 	.inst	0x00000003 ; undefined
    2570:	0011da00 	.inst	0x0011da00 ; undefined
    2574:	18841e00 	ldr	w0, fffffffffff0a934 <SMC_ID_HW_RSA+0xffffffff7befaa2d>
    2578:	00000300 	.inst	0x00000300 ; undefined
    257c:	02fa0000 	.inst	0x02fa0000 ; undefined
    2580:	011f0000 	.inst	0x011f0000 ; undefined
    2584:	000a0351 	.inst	0x000a0351 ; undefined
    2588:	52011f40 	eor	w0, w26, #0x8000007f
    258c:	40000a03 	.inst	0x40000a03 ; undefined
    2590:	96290000 	bl	fffffffff8a42590 <SMC_ID_HW_RSA+0xffffffff74a32689>
    2594:	01000008 	.inst	0x01000008 ; undefined
    2598:	003e022f 	.inst	0x003e022f ; NYI
    259c:	18d00000 	ldr	w0, fffffffffffa259c <SMC_ID_HW_RSA+0xffffffff7bf92695>
    25a0:	00000300 	.inst	0x00000300 ; undefined
    25a4:	01380000 	.inst	0x01380000 ; undefined
    25a8:	00000000 	.inst	0x00000000 ; undefined
    25ac:	9c010000 	ldr	q0, 45ac <_stack_size+0x35ac>
    25b0:	00000cf6 	.inst	0x00000cf6 ; undefined
    25b4:	0008362a 	.inst	0x0008362a ; undefined
    25b8:	022f0100 	.inst	0x022f0100 ; undefined
    25bc:	00000077 	.inst	0x00000077 ; undefined
    25c0:	000032ae 	.inst	0x000032ae ; undefined
    25c4:	0008252a 	.inst	0x0008252a ; undefined
    25c8:	022f0100 	.inst	0x022f0100 ; undefined
    25cc:	00000077 	.inst	0x00000077 ; undefined
    25d0:	00003349 	.inst	0x00003349 ; undefined
    25d4:	00098f2a 	.inst	0x00098f2a ; undefined
    25d8:	022f0100 	.inst	0x022f0100 ; undefined
    25dc:	00000077 	.inst	0x00000077 ; undefined
    25e0:	000033e4 	.inst	0x000033e4 ; undefined
    25e4:	000aa12a 	.inst	0x000aa12a ; undefined
    25e8:	022f0100 	.inst	0x022f0100 ; undefined
    25ec:	000002aa 	.inst	0x000002aa ; undefined
    25f0:	00003443 	.inst	0x00003443 ; undefined
    25f4:	00082e2c 	.inst	0x00082e2c ; undefined
    25f8:	02300100 	.inst	0x02300100 ; undefined
    25fc:	0000003e 	.inst	0x0000003e ; undefined
    2600:	000034de 	.inst	0x000034de ; undefined
    2604:	01006930 	.inst	0x01006930 ; undefined
    2608:	003e0231 	.inst	0x003e0231 ; NYI
    260c:	32000000 	orr	w0, w0, #0x1
    2610:	00000b53 	.inst	0x00000b53 ; undefined
    2614:	77023201 	.inst	0x77023201 ; undefined
    2618:	40000000 	.inst	0x40000000 ; undefined
    261c:	0009882c 	.inst	0x0009882c ; undefined
    2620:	02330100 	.inst	0x02330100 ; undefined
    2624:	00000077 	.inst	0x00000077 ; undefined
    2628:	000035b1 	.inst	0x000035b1 ; undefined
    262c:	0008212c 	.inst	0x0008212c ; undefined
    2630:	02340100 	.inst	0x02340100 ; undefined
    2634:	00000077 	.inst	0x00000077 ; undefined
    2638:	00003620 	.inst	0x00003620 ; undefined
    263c:	0009c62c 	.inst	0x0009c62c ; undefined
    2640:	02350100 	.inst	0x02350100 ; undefined
    2644:	00000077 	.inst	0x00000077 ; undefined
    2648:	000036b5 	.inst	0x000036b5 ; undefined
    264c:	00192823 	.inst	0x00192823 ; undefined
    2650:	00000003 	.inst	0x00000003 ; undefined
    2654:	00096600 	.inst	0x00096600 ; undefined
    2658:	000c2100 	.inst	0x000c2100 ; undefined
    265c:	50011f00 	adr	x0, 4a3e <_stack_size+0x3a3e>
    2660:	011f4901 	.inst	0x011f4901 ; undefined
    2664:	00850251 	.inst	0x00850251 ; undefined
    2668:	0a52011f 	and	wzr, w8, w18, lsr #0
    266c:	00870085 	.inst	0x00870085 ; undefined
    2670:	8824391c 	stxp	w4, w28, w14, [x8]
    2674:	011f2200 	.inst	0x011f2200 ; undefined
    2678:	00840453 	.inst	0x00840453 ; undefined
    267c:	23002439 	.inst	0x23002439 ; undefined
    2680:	03001934 	.inst	0x03001934 ; undefined
    2684:	00000000 	.inst	0x00000000 ; undefined
    2688:	000011a4 	.inst	0x000011a4 ; undefined
    268c:	00000c39 	.inst	0x00000c39 ; undefined
    2690:	0250011f 	.inst	0x0250011f ; undefined
    2694:	2500008b 	.inst	0x2500008b ; undefined
    2698:	03001954 	.inst	0x03001954 ; undefined
    269c:	00000000 	.inst	0x00000000 ; undefined
    26a0:	000011da 	.inst	0x000011da ; undefined
    26a4:	00197c23 	.inst	0x00197c23 ; undefined
    26a8:	00000003 	.inst	0x00000003 ; undefined
    26ac:	00096600 	.inst	0x00096600 ; undefined
    26b0:	000c6500 	.inst	0x000c6500 ; undefined
    26b4:	50011f00 	adr	x0, 4a96 <_stack_size+0x3a96>
    26b8:	011f4201 	.inst	0x011f4201 ; undefined
    26bc:	00840453 	.inst	0x00840453 ; undefined
    26c0:	23002439 	.inst	0x23002439 ; undefined
    26c4:	030019b4 	.inst	0x030019b4 ; undefined
    26c8:	00000000 	.inst	0x00000000 ; undefined
    26cc:	00000966 	.inst	0x00000966 ; undefined
    26d0:	00000c97 	.inst	0x00000c97 ; undefined
    26d4:	0150011f 	.inst	0x0150011f ; undefined
    26d8:	51011f48 	sub	w8, w26, #0x47
    26dc:	1f008502 	fmsub	s2, s8, s0, s1
    26e0:	850a5201 	.inst	0x850a5201 ; undefined
    26e4:	1c008700 	ldr	s0, 37c4 <_stack_size+0x27c4>
    26e8:	00882439 	.inst	0x00882439 ; undefined
    26ec:	53011f22 	ubfx	w2, w25, #1, #7
    26f0:	02000a03 	.inst	0x02000a03 ; undefined
    26f4:	19d02300 	.inst	0x19d02300 ; undefined
    26f8:	00000300 	.inst	0x00000300 ; undefined
    26fc:	09660000 	.inst	0x09660000 ; undefined
    2700:	0cc90000 	ld4	{v0.8b-v3.8b}, [x0], x9
    2704:	011f0000 	.inst	0x011f0000 ; undefined
    2708:	1f410150 	fmadd	d16, d10, d1, d0
    270c:	85025101 	.inst	0x85025101 ; undefined
    2710:	52011f00 	eor	w0, w24, #0x8000007f
    2714:	8700850a 	.inst	0x8700850a ; undefined
    2718:	24391c00 	.inst	0x24391c00 ; undefined
    271c:	1f220088 	fnmadd	s8, s4, s2, s0
    2720:	0a035301 	and	w1, w24, w3, lsl #20
    2724:	23000200 	.inst	0x23000200 ; undefined
    2728:	030019e8 	.inst	0x030019e8 ; undefined
    272c:	00000000 	.inst	0x00000000 ; undefined
    2730:	000011a4 	.inst	0x000011a4 ; undefined
    2734:	00000ce8 	.inst	0x00000ce8 ; undefined
    2738:	0950011f 	.inst	0x0950011f ; undefined
    273c:	009e5803 	.inst	0x009e5803 ; undefined
    2740:	00000003 	.inst	0x00000003 ; undefined
    2744:	08250000 	.inst	0x08250000 ; undefined
    2748:	0003001a 	.inst	0x0003001a ; undefined
    274c:	d3000000 	.inst	0xd3000000 ; undefined
    2750:	00000011 	.inst	0x00000011 ; undefined
    2754:	000ba72e 	.inst	0x000ba72e ; undefined
    2758:	02710100 	.inst	0x02710100 ; undefined
    275c:	03001a08 	.inst	0x03001a08 ; undefined
    2760:	00000000 	.inst	0x00000000 ; undefined
    2764:	00000130 	.inst	0x00000130 ; undefined
    2768:	00000000 	.inst	0x00000000 ; undefined
    276c:	0dc99c01 	.inst	0x0dc99c01 ; undefined
    2770:	e32a0000 	.inst	0xe32a0000 ; undefined
    2774:	0100000b 	.inst	0x0100000b ; undefined
    2778:	006c0271 	.inst	0x006c0271 ; undefined
    277c:	36fe0000 	tbz	w0, #31, ffffffffffffe77c <SMC_ID_HW_RSA+0xffffffff7bfee875>
    2780:	28230000 	stnp	w0, w0, [x0,#-232]
    2784:	0003001a 	.inst	0x0003001a ; undefined
    2788:	5f000000 	.inst	0x5f000000 ; undefined
    278c:	53000007 	ubfx	w7, w0, #0, #1
    2790:	1f00000d 	fmadd	s13, s0, s0, s0
    2794:	36015001 	tbz	w1, #0, 5194 <_stack_size+0x4194>
    2798:	0a51011f 	and	wzr, w8, w17, lsr #0
    279c:	24380083 	.inst	0x24380083 ; undefined
    27a0:	b700000c 	tbnz	x12, #32, 27a0 <_stack_size+0x17a0>
    27a4:	011f2103 	.inst	0x011f2103 ; undefined
    27a8:	1f310152 	fnmadd	s18, s10, s17, s0
    27ac:	31015301 	adds	w1, w24, #0x54
    27b0:	1a402300 	.inst	0x1a402300 ; undefined
    27b4:	00000300 	.inst	0x00000300 ; undefined
    27b8:	075f0000 	.inst	0x075f0000 ; undefined
    27bc:	0d740000 	.inst	0x0d740000 ; undefined
    27c0:	011f0000 	.inst	0x011f0000 ; undefined
    27c4:	1f3d0150 	fnmadd	s16, s10, s29, s0
    27c8:	31015201 	adds	w1, w16, #0x54
    27cc:	0153011f 	.inst	0x0153011f ; undefined
    27d0:	a8230031 	stnp	x17, x0, [x1,#-464]
    27d4:	0003001a 	.inst	0x0003001a ; undefined
    27d8:	a4000000 	.inst	0xa4000000 ; undefined
    27dc:	93000011 	.inst	0x93000011 ; undefined
    27e0:	1f00000d 	fmadd	s13, s0, s0, s0
    27e4:	03095001 	.inst	0x03095001 ; undefined
    27e8:	03009e68 	.inst	0x03009e68 ; undefined
    27ec:	00000000 	.inst	0x00000000 ; undefined
    27f0:	1ab02300 	.inst	0x1ab02300 ; undefined
    27f4:	00000300 	.inst	0x00000300 ; undefined
    27f8:	11c10000 	.inst	0x11c10000 ; undefined
    27fc:	0dad0000 	st2	{v0.b, v1.b}[0], [x0], x13
    2800:	011f0000 	.inst	0x011f0000 ; undefined
    2804:	00830450 	.inst	0x00830450 ; undefined
    2808:	24002432 	.inst	0x24002432 ; undefined
    280c:	03001ac0 	.inst	0x03001ac0 ; undefined
    2810:	00000000 	.inst	0x00000000 ; undefined
    2814:	000011a4 	.inst	0x000011a4 ; undefined
    2818:	0950011f 	.inst	0x0950011f ; undefined
    281c:	009e8003 	.inst	0x009e8003 ; undefined
    2820:	00000003 	.inst	0x00000003 ; undefined
    2824:	2e000000 	ext	v0.8b, v0.8b, v0.8b, #0
    2828:	000009d2 	.inst	0x000009d2 ; undefined
    282c:	38029e01 	strb	w1, [x16,#41]!
    2830:	0003001b 	.inst	0x0003001b ; undefined
    2834:	90000000 	adrp	x0, 2000 <_stack_size+0x1000>
    2838:	00000000 	.inst	0x00000000 ; undefined
    283c:	01000000 	.inst	0x01000000 ; undefined
    2840:	000e9c9c 	.inst	0x000e9c9c ; undefined
    2844:	28ef2a00 	ldp	w0, w10, [x16],#-136
    2848:	9e010000 	.inst	0x9e010000 ; undefined
    284c:	00006c02 	.inst	0x00006c02 ; undefined
    2850:	00374a00 	.inst	0x00374a00 ; NYI
    2854:	0aaa2c00 	bic	w0, w0, w10, asr #11
    2858:	9f010000 	.inst	0x9f010000 ; undefined
    285c:	00003e02 	.inst	0x00003e02 ; undefined
    2860:	0037a900 	.inst	0x0037a900 ; NYI
    2864:	1b642300 	.inst	0x1b642300 ; undefined
    2868:	00000300 	.inst	0x00000300 ; undefined
    286c:	075f0000 	.inst	0x075f0000 ; undefined
    2870:	0e280000 	saddl	v0.8h, v0.8b, v8.8b
    2874:	011f0000 	.inst	0x011f0000 ; undefined
    2878:	1f360150 	fnmadd	s16, s10, s22, s0
    287c:	31015201 	adds	w1, w16, #0x54
    2880:	0153011f 	.inst	0x0153011f ; undefined
    2884:	7c230031 	.inst	0x7c230031 ; undefined
    2888:	0003001b 	.inst	0x0003001b ; undefined
    288c:	5f000000 	.inst	0x5f000000 ; undefined
    2890:	49000007 	.inst	0x49000007 ; undefined
    2894:	1f00000e 	fmadd	s14, s0, s0, s0
    2898:	3d015001 	str	b1, [x0,#84]
    289c:	0152011f 	.inst	0x0152011f ; undefined
    28a0:	53011f31 	ubfx	w17, w25, #1, #7
    28a4:	23003101 	.inst	0x23003101 ; undefined
    28a8:	03001ba4 	.inst	0x03001ba4 ; undefined
    28ac:	00000000 	.inst	0x00000000 ; undefined
    28b0:	000011a4 	.inst	0x000011a4 ; undefined
    28b4:	00000e68 	.inst	0x00000e68 ; undefined
    28b8:	0950011f 	.inst	0x0950011f ; undefined
    28bc:	009e9003 	.inst	0x009e9003 ; undefined
    28c0:	00000003 	.inst	0x00000003 ; undefined
    28c4:	ac230000 	stnp	q0, q0, [x0,#-928]
    28c8:	0003001b 	.inst	0x0003001b ; undefined
    28cc:	c1000000 	.inst	0xc1000000 ; undefined
    28d0:	80000011 	.inst	0x80000011 ; undefined
    28d4:	1f00000e 	fmadd	s14, s0, s0, s0
    28d8:	83025001 	.inst	0x83025001 ; undefined
    28dc:	bc240000 	.inst	0xbc240000 ; undefined
    28e0:	0003001b 	.inst	0x0003001b ; undefined
    28e4:	a4000000 	.inst	0xa4000000 ; undefined
    28e8:	1f000011 	fmadd	s17, s0, s0, s0
    28ec:	03095001 	.inst	0x03095001 ; undefined
    28f0:	03009ea8 	.inst	0x03009ea8 ; undefined
    28f4:	00000000 	.inst	0x00000000 ; undefined
    28f8:	7e2e0000 	.inst	0x7e2e0000 ; undefined
    28fc:	0100000b 	.inst	0x0100000b ; undefined
    2900:	1bc802b7 	.inst	0x1bc802b7 ; undefined
    2904:	00000300 	.inst	0x00000300 ; undefined
    2908:	00780000 	.inst	0x00780000 ; undefined
    290c:	00000000 	.inst	0x00000000 ; undefined
    2910:	9c010000 	ldr	q0, 4910 <_stack_size+0x3910>
    2914:	00000f6d 	.inst	0x00000f6d ; undefined
    2918:	00042c2a 	.inst	0x00042c2a ; undefined
    291c:	02b70100 	.inst	0x02b70100 ; undefined
    2920:	000002ef 	.inst	0x000002ef ; undefined
    2924:	000037e9 	.inst	0x000037e9 ; undefined
    2928:	001be823 	.inst	0x001be823 ; undefined
    292c:	00000003 	.inst	0x00000003 ; undefined
    2930:	00075f00 	.inst	0x00075f00 ; undefined
    2934:	000ef900 	.inst	0x000ef900 ; undefined
    2938:	50011f00 	adr	x0, 4d1a <_stack_size+0x3d1a>
    293c:	011f3601 	.inst	0x011f3601 ; undefined
    2940:	00830a51 	.inst	0x00830a51 ; undefined
    2944:	000c2438 	.inst	0x000c2438 ; undefined
    2948:	2103b300 	.inst	0x2103b300 ; undefined
    294c:	0152011f 	.inst	0x0152011f ; undefined
    2950:	53011f31 	ubfx	w17, w25, #1, #7
    2954:	23003101 	.inst	0x23003101 ; undefined
    2958:	03001c00 	.inst	0x03001c00 ; undefined
    295c:	00000000 	.inst	0x00000000 ; undefined
    2960:	0000075f 	.inst	0x0000075f ; undefined
    2964:	00000f1a 	.inst	0x00000f1a ; undefined
    2968:	0150011f 	.inst	0x0150011f ; undefined
    296c:	52011f3d 	eor	w29, w25, #0x8000007f
    2970:	011f3101 	.inst	0x011f3101 ; undefined
    2974:	00310153 	.inst	0x00310153 ; NYI
    2978:	001c2823 	.inst	0x001c2823 ; undefined
    297c:	00000003 	.inst	0x00000003 ; undefined
    2980:	0011a400 	.inst	0x0011a400 ; undefined
    2984:	000f3900 	.inst	0x000f3900 ; undefined
    2988:	50011f00 	adr	x0, 4d6a <_stack_size+0x3d6a>
    298c:	9eb00309 	.inst	0x9eb00309 ; undefined
    2990:	00000300 	.inst	0x00000300 ; undefined
    2994:	23000000 	.inst	0x23000000 ; undefined
    2998:	03001c30 	.inst	0x03001c30 ; undefined
    299c:	00000000 	.inst	0x00000000 ; undefined
    29a0:	000011c1 	.inst	0x000011c1 ; undefined
    29a4:	00000f51 	.inst	0x00000f51 ; undefined
    29a8:	0250011f 	.inst	0x0250011f ; undefined
    29ac:	24000083 	.inst	0x24000083 ; undefined
    29b0:	03001c40 	.inst	0x03001c40 ; undefined
    29b4:	00000000 	.inst	0x00000000 ; undefined
    29b8:	000011a4 	.inst	0x000011a4 ; undefined
    29bc:	0950011f 	.inst	0x0950011f ; undefined
    29c0:	009ea803 	.inst	0x009ea803 ; undefined
    29c4:	00000003 	.inst	0x00000003 ; undefined
    29c8:	29000000 	stp	w0, w0, [x0]
    29cc:	00000872 	.inst	0x00000872 ; undefined
    29d0:	3e02cc01 	.inst	0x3e02cc01 ; undefined
    29d4:	40000000 	.inst	0x40000000 ; undefined
    29d8:	0003001c 	.inst	0x0003001c ; undefined
    29dc:	10000000 	adr	x0, 29dc <_stack_size+0x19dc>
    29e0:	00000001 	.inst	0x00000001 ; undefined
    29e4:	01000000 	.inst	0x01000000 ; undefined
    29e8:	0010cc9c 	.inst	0x0010cc9c ; undefined
    29ec:	72662b00 	.inst	0x72662b00 ; undefined
    29f0:	cc010065 	.inst	0xcc010065 ; undefined
    29f4:	00007702 	.inst	0x00007702 ; undefined
    29f8:	00385e00 	.inst	0x00385e00 ; NYI
    29fc:	69642b00 	ldpsw	x0, x10, [x24,#-224]
    2a00:	cc010076 	.inst	0xcc010076 ; undefined
    2a04:	00007702 	.inst	0x00007702 ; undefined
    2a08:	00389700 	.inst	0x00389700 ; NYI
    2a0c:	1c702500 	ldr	s0, e2eac <_stack_size+0xe1eac>
    2a10:	00000300 	.inst	0x00000300 ; undefined
    2a14:	11da0000 	.inst	0x11da0000 ; undefined
    2a18:	84230000 	.inst	0x84230000 ; undefined
    2a1c:	0003001c 	.inst	0x0003001c ; undefined
    2a20:	fa000000 	sbcs	x0, x0, x0
    2a24:	da000002 	sbc	x2, x0, x0
    2a28:	1f00000f 	fmadd	s15, s0, s0, s0
    2a2c:	0a035101 	and	w1, w8, w3, lsl #20
    2a30:	011f0200 	.inst	0x011f0200 ; undefined
    2a34:	00300152 	.inst	0x00300152 ; NYI
    2a38:	001c9425 	.inst	0x001c9425 ; undefined
    2a3c:	00000003 	.inst	0x00000003 ; undefined
    2a40:	0011da00 	.inst	0x0011da00 ; undefined
    2a44:	1ca82500 	ldr	s0, fffffffffff52ee4 <SMC_ID_HW_RSA+0xffffffff7bf42fdd>
    2a48:	00000300 	.inst	0x00000300 ; undefined
    2a4c:	11da0000 	.inst	0x11da0000 ; undefined
    2a50:	bc250000 	.inst	0xbc250000 ; undefined
    2a54:	0003001c 	.inst	0x0003001c ; undefined
    2a58:	da000000 	sbc	x0, x0, x0
    2a5c:	23000011 	.inst	0x23000011 ; undefined
    2a60:	03001ccc 	.inst	0x03001ccc ; undefined
    2a64:	00000000 	.inst	0x00000000 ; undefined
    2a68:	000002fa 	.inst	0x000002fa ; undefined
    2a6c:	00001026 	.inst	0x00001026 ; undefined
    2a70:	0250011f 	.inst	0x0250011f ; undefined
    2a74:	011f0083 	.inst	0x011f0083 ; undefined
    2a78:	4b400451 	sub	w17, w2, w0, lsr #1
    2a7c:	011f1f24 	.inst	0x011f1f24 ; undefined
    2a80:	00300152 	.inst	0x00300152 ; NYI
    2a84:	001cd425 	.inst	0x001cd425 ; undefined
    2a88:	00000003 	.inst	0x00000003 ; undefined
    2a8c:	0011da00 	.inst	0x0011da00 ; undefined
    2a90:	1ce82500 	ldr	s0, fffffffffffd2f30 <SMC_ID_HW_RSA+0xffffffff7bfc3029>
    2a94:	00000300 	.inst	0x00000300 ; undefined
    2a98:	11da0000 	.inst	0x11da0000 ; undefined
    2a9c:	f4250000 	.inst	0xf4250000 ; undefined
    2aa0:	0003001c 	.inst	0x0003001c ; undefined
    2aa4:	da000000 	sbc	x0, x0, x0
    2aa8:	23000011 	.inst	0x23000011 ; undefined
    2aac:	03001d04 	.inst	0x03001d04 ; undefined
    2ab0:	00000000 	.inst	0x00000000 ; undefined
    2ab4:	000002fa 	.inst	0x000002fa ; undefined
    2ab8:	00001072 	.inst	0x00001072 ; undefined
    2abc:	0250011f 	.inst	0x0250011f ; undefined
    2ac0:	011f0083 	.inst	0x011f0083 ; undefined
    2ac4:	4b400451 	sub	w17, w2, w0, lsr #1
    2ac8:	011f1f24 	.inst	0x011f1f24 ; undefined
    2acc:	00300152 	.inst	0x00300152 ; NYI
    2ad0:	001d0c25 	.inst	0x001d0c25 ; undefined
    2ad4:	00000003 	.inst	0x00000003 ; undefined
    2ad8:	0011da00 	.inst	0x0011da00 ; undefined
    2adc:	1d1c2500 	.inst	0x1d1c2500 ; undefined
    2ae0:	00000300 	.inst	0x00000300 ; undefined
    2ae4:	11da0000 	.inst	0x11da0000 ; undefined
    2ae8:	28250000 	stnp	w0, w0, [x0,#-216]
    2aec:	0003001d 	.inst	0x0003001d ; undefined
    2af0:	da000000 	sbc	x0, x0, x0
    2af4:	23000011 	.inst	0x23000011 ; undefined
    2af8:	03001d38 	.inst	0x03001d38 ; undefined
    2afc:	00000000 	.inst	0x00000000 ; undefined
    2b00:	000002fa 	.inst	0x000002fa ; undefined
    2b04:	000010be 	.inst	0x000010be ; undefined
    2b08:	0250011f 	.inst	0x0250011f ; undefined
    2b0c:	011f0083 	.inst	0x011f0083 ; undefined
    2b10:	4b400451 	sub	w17, w2, w0, lsr #1
    2b14:	011f1f24 	.inst	0x011f1f24 ; undefined
    2b18:	00300152 	.inst	0x00300152 ; NYI
    2b1c:	001d4025 	.inst	0x001d4025 ; undefined
    2b20:	00000003 	.inst	0x00000003 ; undefined
    2b24:	0011da00 	.inst	0x0011da00 ; undefined
    2b28:	ce330000 	.inst	0xce330000 ; undefined
    2b2c:	01000005 	.inst	0x01000005 ; undefined
    2b30:	1d5003b1 	.inst	0x1d5003b1 ; undefined
    2b34:	00000300 	.inst	0x00000300 ; undefined
    2b38:	00100000 	.inst	0x00100000 ; undefined
    2b3c:	00000000 	.inst	0x00000000 ; undefined
    2b40:	9c010000 	ldr	q0, 4b40 <_stack_size+0x3b40>
    2b44:	00005a07 	.inst	0x00005a07 ; undefined
    2b48:	0010f600 	.inst	0x0010f600 ; undefined
    2b4c:	010d0800 	.inst	0x010d0800 ; undefined
    2b50:	001f0000 	.inst	0x001f0000 ; undefined
    2b54:	000a3e34 	.inst	0x000a3e34 ; undefined
    2b58:	e6980100 	.inst	0xe6980100 ; undefined
    2b5c:	09000010 	.inst	0x09000010 ; undefined
    2b60:	00abb003 	.inst	0x00abb003 ; undefined
    2b64:	00000003 	.inst	0x00000003 ; undefined
    2b68:	0add3500 	and	w0, w8, w29, ror #13
    2b6c:	99010000 	.inst	0x99010000 ; undefined
    2b70:	0000111a 	.inst	0x0000111a ; undefined
    2b74:	02000000 	.inst	0x02000000 ; undefined
    2b78:	00111f36 	.inst	0x00111f36 ; undefined
    2b7c:	5a080c00 	.inst	0x5a080c00 ; undefined
    2b80:	34000000 	cbz	w0, 2b80 <_stack_size+0x1b80>
    2b84:	000009a5 	.inst	0x000009a5 ; undefined
    2b88:	111f9a01 	add	w1, w16, #0x7e6
    2b8c:	03090000 	.inst	0x03090000 ; undefined
    2b90:	0300aba8 	.inst	0x0300aba8 ; undefined
    2b94:	00000000 	.inst	0x00000000 ; undefined
    2b98:	00084c34 	.inst	0x00084c34 ; undefined
    2b9c:	9f9b0100 	.inst	0x9f9b0100 ; undefined
    2ba0:	09000002 	.inst	0x09000002 ; undefined
    2ba4:	00ac3003 	.inst	0x00ac3003 ; undefined
    2ba8:	00000003 	.inst	0x00000003 ; undefined
    2bac:	0ab73500 	bic	w0, w8, w23, asr #13
    2bb0:	9c010000 	ldr	q0, 4bb0 <_stack_size+0x3bb0>
    2bb4:	000002aa 	.inst	0x000002aa ; undefined
    2bb8:	80008000 	.inst	0x80008000 ; undefined
    2bbc:	000ebf37 	.inst	0x000ebf37 ; undefined
    2bc0:	5a1a0600 	.inst	0x5a1a0600 ; undefined
    2bc4:	38000000 	sturb	w0, [x0]
    2bc8:	00000b66 	.inst	0x00000b66 ; undefined
    2bcc:	00779001 	.inst	0x00779001 ; undefined
    2bd0:	03090000 	.inst	0x03090000 ; undefined
    2bd4:	0300acac 	.inst	0x0300acac ; undefined
    2bd8:	00000000 	.inst	0x00000000 ; undefined
    2bdc:	00093738 	.inst	0x00093738 ; undefined
    2be0:	77910100 	.inst	0x77910100 ; undefined
    2be4:	09000000 	.inst	0x09000000 ; undefined
    2be8:	00aca803 	.inst	0x00aca803 ; undefined
    2bec:	00000003 	.inst	0x00000003 ; undefined
    2bf0:	0b073900 	add	w0, w8, w7, lsl #14
    2bf4:	c8010000 	stxr	w1, x0, [x0]
    2bf8:	0000003e 	.inst	0x0000003e ; undefined
    2bfc:	000011a4 	.inst	0x000011a4 ; undefined
    2c00:	633a0014 	.inst	0x633a0014 ; undefined
    2c04:	07000005 	.inst	0x07000005 ; undefined
    2c08:	11b6012c 	.inst	0x11b6012c ; undefined
    2c0c:	b63b0000 	tbz	x0, #39, 8c0c <_stack_size+0x7c0c>
    2c10:	00000011 	.inst	0x00000011 ; undefined
    2c14:	11bc080c 	.inst	0x11bc080c ; undefined
    2c18:	14360000 	b	d82c18 <_stack_size+0xd81c18>
    2c1c:	3a000001 	adcs	w1, w0, w0
    2c20:	00000a34 	.inst	0x00000a34 ; undefined
    2c24:	d3012e07 	.inst	0xd3012e07 ; undefined
    2c28:	3b000011 	.inst	0x3b000011 ; undefined
    2c2c:	0000005a 	.inst	0x0000005a ; undefined
    2c30:	038a3c00 	.inst	0x038a3c00 ; undefined
    2c34:	6c060000 	stnp	d0, d0, [x0,#96]
    2c38:	00016b3c 	.inst	0x00016b3c ; undefined
    2c3c:	3d550800 	ldr	b0, [x0,#1346]
    2c40:	0000008f 	.inst	0x0000008f ; undefined
    2c44:	773b4e08 	.inst	0x773b4e08 ; undefined
    2c48:	3b000000 	.inst	0x3b000000 ; undefined
    2c4c:	00000077 	.inst	0x00000077 ; undefined
    2c50:	03b60000 	.inst	0x03b60000 ; undefined
    2c54:	00040000 	.inst	0x00040000 ; undefined
    2c58:	00000b30 	.inst	0x00000b30 ; undefined
    2c5c:	01890108 	.inst	0x01890108 ; undefined
    2c60:	ee010000 	.inst	0xee010000 ; undefined
    2c64:	6000000b 	.inst	0x6000000b ; undefined
    2c68:	0003001d 	.inst	0x0003001d ; undefined
    2c6c:	48000000 	stxrh	w0, w0, [x0]
    2c70:	00000002 	.inst	0x00000002 ; undefined
    2c74:	9b000000 	madd	x0, x0, x0, x0
    2c78:	0200000f 	.inst	0x0200000f ; undefined
    2c7c:	01000601 	.inst	0x01000601 ; undefined
    2c80:	02020000 	.inst	0x02020000 ; undefined
    2c84:	00002b05 	.inst	0x00002b05 ; undefined
    2c88:	05040300 	.inst	0x05040300 ; undefined
    2c8c:	00746e69 	.inst	0x00746e69 ; undefined
    2c90:	a9050802 	stp	x2, x2, [x0,#80]
    2c94:	02000000 	.inst	0x02000000 ; undefined
    2c98:	00fe0801 	.inst	0x00fe0801 ; undefined
    2c9c:	02020000 	.inst	0x02020000 ; undefined
    2ca0:	00013107 	.inst	0x00013107 ; undefined
    2ca4:	07040200 	.inst	0x07040200 ; undefined
    2ca8:	00000116 	.inst	0x00000116 ; undefined
    2cac:	11070802 	add	w2, w0, #0x1c2
    2cb0:	04000001 	.inst	0x04000001 ; undefined
    2cb4:	00000085 	.inst	0x00000085 ; undefined
    2cb8:	005a7a02 	.inst	0x005a7a02 ; undefined
    2cbc:	3f040000 	.inst	0x3f040000 ; undefined
    2cc0:	03000000 	.inst	0x03000000 ; undefined
    2cc4:	00005311 	.inst	0x00005311 ; undefined
    2cc8:	07080200 	.inst	0x07080200 ; undefined
    2ccc:	0000010c 	.inst	0x0000010c ; undefined
    2cd0:	a4050802 	.inst	0xa4050802 ; undefined
    2cd4:	05000000 	.inst	0x05000000 ; undefined
    2cd8:	00000cdc 	.inst	0x00000cdc ; undefined
    2cdc:	b01b0404 	adrp	x4, 36083000 <_stack_base+0x33075880>
    2ce0:	06000000 	.inst	0x06000000 ; undefined
    2ce4:	00000c47 	.inst	0x00000c47 ; undefined
    2ce8:	0cf20600 	.inst	0x0cf20600 ; undefined
    2cec:	06010000 	.inst	0x06010000 ; undefined
    2cf0:	00000cfd 	.inst	0x00000cfd ; undefined
    2cf4:	0d080602 	.inst	0x0d080602 ; undefined
    2cf8:	06030000 	.inst	0x06030000 ; undefined
    2cfc:	00000d13 	.inst	0x00000d13 ; undefined
    2d00:	76040004 	.inst	0x76040004 ; undefined
    2d04:	0400000c 	.inst	0x0400000c ; undefined
    2d08:	00008521 	.inst	0x00008521 ; undefined
    2d0c:	0c6e0700 	.inst	0x0c6e0700 ; undefined
    2d10:	04100000 	.inst	0x04100000 ; undefined
    2d14:	0000e023 	.inst	0x0000e023 ; undefined
    2d18:	13d30800 	.inst	0x13d30800 ; undefined
    2d1c:	24040000 	.inst	0x24040000 ; undefined
    2d20:	000000b0 	.inst	0x000000b0 ; undefined
    2d24:	656b0900 	.inst	0x656b0900 ; undefined
    2d28:	25040079 	.inst	0x25040079 ; undefined
    2d2c:	000000e0 	.inst	0x000000e0 ; undefined
    2d30:	080a0008 	stxrb	w10, w8, [x0]
    2d34:	000c8b04 	.inst	0x000c8b04 ; undefined
    2d38:	bb260400 	.inst	0xbb260400 ; undefined
    2d3c:	0b000000 	add	w0, w0, w0
    2d40:	00000ce8 	.inst	0x00000ce8 ; undefined
    2d44:	00373901 	.inst	0x00373901 ; NYI
    2d48:	1d600000 	.inst	0x1d600000 ; undefined
    2d4c:	00000300 	.inst	0x00000300 ; undefined
    2d50:	02480000 	.inst	0x02480000 ; undefined
    2d54:	00000000 	.inst	0x00000000 ; undefined
    2d58:	9c010000 	ldr	q0, 4d58 <_stack_size+0x3d58>
    2d5c:	000002e4 	.inst	0x000002e4 ; undefined
    2d60:	000c520c 	.inst	0x000c520c ; undefined
    2d64:	e4390100 	.inst	0xe4390100 ; undefined
    2d68:	e3000002 	.inst	0xe3000002 ; undefined
    2d6c:	0c000038 	st4	{v24.8b-v27.8b}, [x1]
    2d70:	00000c6c 	.inst	0x00000c6c ; undefined
    2d74:	02e93901 	.inst	0x02e93901 ; undefined
    2d78:	39580000 	ldrb	w0, [x0,#1536]
    2d7c:	ba0c0000 	adcs	x0, x0, x12
    2d80:	0100000c 	.inst	0x0100000c ; undefined
    2d84:	0002e439 	.inst	0x0002e439 ; undefined
    2d88:	003a1f00 	.inst	0x003a1f00 ; NYI
    2d8c:	0c950d00 	.inst	0x0c950d00 ; undefined
    2d90:	3b010000 	.inst	0x3b010000 ; undefined
    2d94:	000002f4 	.inst	0x000002f4 ; undefined
    2d98:	7e809103 	.inst	0x7e809103 ; undefined
    2d9c:	000be90e 	.inst	0x000be90e ; undefined
    2da0:	373c0100 	tbnz	w0, #7, ffffffffffffadc0 <SMC_ID_HW_RSA+0xffffffff7bfeaeb9>
    2da4:	ba000000 	adcs	x0, x0, x0
    2da8:	0d00003a 	st1	{v26.b}[0], [x1]
    2dac:	00001e34 	.inst	0x00001e34 ; undefined
    2db0:	030b3d01 	.inst	0x030b3d01 ; undefined
    2db4:	91030000 	add	x0, x0, #0xc0
    2db8:	a40f7dfc 	.inst	0xa40f7dfc ; undefined
    2dbc:	0100000c 	.inst	0x0100000c ; undefined
    2dc0:	00003795 	.inst	0x00003795 ; undefined
    2dc4:	00017900 	.inst	0x00017900 ; undefined
    2dc8:	11001000 	add	w0, w0, #0x4
    2dcc:	03001d94 	.inst	0x03001d94 ; undefined
    2dd0:	00000000 	.inst	0x00000000 ; undefined
    2dd4:	00000310 	.inst	0x00000310 ; undefined
    2dd8:	001da812 	.inst	0x001da812 ; undefined
    2ddc:	00000003 	.inst	0x00000003 ; undefined
    2de0:	00031700 	.inst	0x00031700 ; undefined
    2de4:	0001ab00 	.inst	0x0001ab00 ; undefined
    2de8:	51011300 	sub	w0, w24, #0x44
    2dec:	0c008408 	st2	{v8.4h, v9.4h}, [x0]
    2df0:	ffffffff 	.inst	0xffffffff ; undefined
    2df4:	5201131a 	eor	w26, w24, #0x8000000f
    2df8:	01000a03 	.inst	0x01000a03 ; undefined
    2dfc:	1dd81100 	.inst	0x1dd81100 ; undefined
    2e00:	00000300 	.inst	0x00000300 ; undefined
    2e04:	03360000 	.inst	0x03360000 ; undefined
    2e08:	5c120000 	ldr	d0, 26e08 <_stack_size+0x25e08>
    2e0c:	0003001e 	.inst	0x0003001e ; undefined
    2e10:	4c000000 	st4	{v0.16b-v3.16b}, [x0]
    2e14:	d4000003 	smc	#0x0
    2e18:	13000001 	sbfx	w1, w0, #0, #1
    2e1c:	30015001 	adr	x1, 581d <_stack_size+0x481d>
    2e20:	01510113 	.inst	0x01510113 ; undefined
    2e24:	90120031 	adrp	x17, 24006000 <_stack_base+0x20ff8880>
    2e28:	0003001e 	.inst	0x0003001e ; undefined
    2e2c:	17000000 	b	fffffffffc002e2c <SMC_ID_HW_RSA+0xffffffff77ff2f25>
    2e30:	f8000003 	stur	x3, [x0]
    2e34:	13000001 	sbfx	w1, w0, #0, #1
    2e38:	88085001 	stxr	w8, w1, [x0]
    2e3c:	ffff0c00 	.inst	0xffff0c00 ; undefined
    2e40:	131affff 	.inst	0x131affff ; undefined
    2e44:	08025201 	stxrb	w2, w1, [x16]
    2e48:	a8120020 	stnp	x0, x0, [x1,#288]
    2e4c:	0003001e 	.inst	0x0003001e ; undefined
    2e50:	36000000 	tbz	w0, #0, 2e50 <_stack_size+0x1e50>
    2e54:	16000003 	b	fffffffff8002e60 <SMC_ID_HW_RSA+0xffffffff73ff2f59>
    2e58:	13000002 	sbfx	w2, w0, #0, #1
    2e5c:	88025001 	stxr	w2, w1, [x0]
    2e60:	51011300 	sub	w0, w24, #0x44
    2e64:	00008402 	.inst	0x00008402 ; undefined
    2e68:	001eb012 	.inst	0x001eb012 ; undefined
    2e6c:	00000003 	.inst	0x00000003 ; undefined
    2e70:	00036200 	.inst	0x00036200 ; undefined
    2e74:	00022e00 	.inst	0x00022e00 ; undefined
    2e78:	50011300 	adr	x0, 50da <_stack_size+0x40da>
    2e7c:	00008802 	.inst	0x00008802 ; undefined
    2e80:	001ebc12 	.inst	0x001ebc12 ; undefined
    2e84:	00000003 	.inst	0x00000003 ; undefined
    2e88:	00033600 	.inst	0x00033600 ; undefined
    2e8c:	00024c00 	.inst	0x00024c00 ; undefined
    2e90:	50011300 	adr	x0, 50f2 <_stack_size+0x40f2>
    2e94:	13008802 	.inst	0x13008802 ; undefined
    2e98:	84025101 	.inst	0x84025101 ; undefined
    2e9c:	20120000 	.inst	0x20120000 ; undefined
    2ea0:	0003001f 	.inst	0x0003001f ; undefined
    2ea4:	73000000 	.inst	0x73000000 ; undefined
    2ea8:	70000003 	adr	x3, 2eab <_stack_size+0x1eab>
    2eac:	13000002 	sbfx	w2, w0, #0, #1
    2eb0:	91035001 	add	x1, x0, #0xd4
    2eb4:	01137e80 	.inst	0x01137e80 ; undefined
    2eb8:	13300151 	.inst	0x13300151 ; undefined
    2ebc:	84025201 	.inst	0x84025201 ; undefined
    2ec0:	3c120000 	stur	b0, [x0,#-224]
    2ec4:	0003001f 	.inst	0x0003001f ; undefined
    2ec8:	17000000 	b	fffffffffc002ec8 <SMC_ID_HW_RSA+0xffffffff77ff2fc1>
    2ecc:	88000003 	stxr	w0, w3, [x0]
    2ed0:	13000002 	sbfx	w2, w0, #0, #1
    2ed4:	84025201 	.inst	0x84025201 ; undefined
    2ed8:	58120000 	ldr	x0, 26ed8 <_stack_size+0x25ed8>
    2edc:	0003001f 	.inst	0x0003001f ; undefined
    2ee0:	17000000 	b	fffffffffc002ee0 <SMC_ID_HW_RSA+0xffffffff77ff2fd9>
    2ee4:	a1000003 	.inst	0xa1000003 ; undefined
    2ee8:	13000002 	sbfx	w2, w0, #0, #1
    2eec:	91035101 	add	x1, x8, #0xd4
    2ef0:	11007e80 	add	w0, w20, #0x1f
    2ef4:	03001f64 	.inst	0x03001f64 ; undefined
    2ef8:	00000000 	.inst	0x00000000 ; undefined
    2efc:	0000038e 	.inst	0x0000038e ; undefined
    2f00:	001f7811 	.inst	0x001f7811 ; undefined
    2f04:	00000003 	.inst	0x00000003 ; undefined
    2f08:	00033600 	.inst	0x00033600 ; undefined
    2f0c:	1f8c1100 	.inst	0x1f8c1100 ; undefined
    2f10:	00000300 	.inst	0x00000300 ; undefined
    2f14:	03360000 	.inst	0x03360000 ; undefined
    2f18:	a0140000 	.inst	0xa0140000 ; undefined
    2f1c:	0003001f 	.inst	0x0003001f ; undefined
    2f20:	95000000 	bl	4002f20 <_stack_base+0xff57a0>
    2f24:	13000003 	sbfx	w3, w0, #0, #1
    2f28:	03095001 	.inst	0x03095001 ; undefined
    2f2c:	03009ec8 	.inst	0x03009ec8 ; undefined
    2f30:	00000000 	.inst	0x00000000 ; undefined
    2f34:	53150000 	ubfiz	w0, w0, #11, #1
    2f38:	16000000 	b	fffffffff8002f38 <SMC_ID_HW_RSA+0xffffffff73ff3031>
    2f3c:	0002ef08 	.inst	0x0002ef08 ; undefined
    2f40:	00e21500 	.inst	0x00e21500 ; undefined
    2f44:	53170000 	ubfiz	w0, w0, #9, #1
    2f48:	04000000 	.inst	0x04000000 ; undefined
    2f4c:	18000003 	ldr	w3, 2f4c <_stack_size+0x1f4c>
    2f50:	00000304 	.inst	0x00000304 ; undefined
    2f54:	0802003f 	stxrb	w2, wzr, [x1]
    2f58:	00059d07 	.inst	0x00059d07 ; undefined
    2f5c:	00531900 	.inst	0x00531900 ; undefined
    2f60:	d21a0000 	eor	x0, x0, #0x4000000040
    2f64:	0700000c 	.inst	0x0700000c ; undefined
    2f68:	0cc61b6b 	.inst	0x0cc61b6b ; undefined
    2f6c:	53070000 	ubfiz	w0, w0, #25, #1
    2f70:	0000006c 	.inst	0x0000006c ; undefined
    2f74:	00000336 	.inst	0x00000336 ; undefined
    2f78:	0000e01c 	.inst	0x0000e01c ; undefined
    2f7c:	00e01c00 	.inst	0x00e01c00 ; undefined
    2f80:	6c1c0000 	stnp	d0, d0, [x0,#448]
    2f84:	00000000 	.inst	0x00000000 ; undefined
    2f88:	00008f1d 	.inst	0x00008f1d ; undefined
    2f8c:	4c4e0500 	.inst	0x4c4e0500 ; undefined
    2f90:	1c000003 	ldr	s3, 2f90 <_stack_size+0x1f90>
    2f94:	0000006c 	.inst	0x0000006c ; undefined
    2f98:	00006c1c 	.inst	0x00006c1c ; undefined
    2f9c:	841d0000 	.inst	0x841d0000 ; undefined
    2fa0:	0600000c 	.inst	0x0600000c ; undefined
    2fa4:	0003622d 	.inst	0x0003622d ; undefined
    2fa8:	006c1c00 	.inst	0x006c1c00 ; undefined
    2fac:	531c0000 	ubfiz	w0, w0, #4, #1
    2fb0:	00000000 	.inst	0x00000000 ; undefined
    2fb4:	000ca40f 	.inst	0x000ca40f ; undefined
    2fb8:	37950100 	tbnz	w0, #18, ffffffffffffcfd8 <SMC_ID_HW_RSA+0xffffffff7bfed0d1>
    2fbc:	73000000 	.inst	0x73000000 ; undefined
    2fc0:	10000003 	adr	x3, 2fc0 <_stack_size+0x1fc0>
    2fc4:	0c611d00 	.inst	0x0c611d00 ; undefined
    2fc8:	54070000 	b.eq	10fc8 <_stack_size+0xffc8>
    2fcc:	0000038e 	.inst	0x0000038e ; undefined
    2fd0:	0000e01c 	.inst	0x0000e01c ; undefined
    2fd4:	006c1c00 	.inst	0x006c1c00 ; undefined
    2fd8:	6c1c0000 	stnp	d0, d0, [x0,#448]
    2fdc:	00000000 	.inst	0x00000000 ; undefined
    2fe0:	00038a1a 	.inst	0x00038a1a ; undefined
    2fe4:	1e6c0700 	fccmp	d24, d12, #0x0, eq
    2fe8:	00000563 	.inst	0x00000563 ; undefined
    2fec:	a7012c08 	.inst	0xa7012c08 ; undefined
    2ff0:	1c000003 	ldr	s3, 2ff0 <_stack_size+0x1ff0>
    2ff4:	000003a7 	.inst	0x000003a7 ; undefined
    2ff8:	ad081600 	stp	q0, q5, [x16,#256]
    2ffc:	15000003 	b	4003008 <_stack_base+0xff5888>
    3000:	000003b2 	.inst	0x000003b2 ; undefined
    3004:	07080102 	.inst	0x07080102 ; undefined
    3008:	00000001 	.inst	0x00000001 ; undefined
    300c:	0000005c 	.inst	0x0000005c ; undefined
    3010:	0cbd0004 	.inst	0x0cbd0004 ; undefined
    3014:	01080000 	.inst	0x01080000 ; undefined
    3018:	00000189 	.inst	0x00000189 ; undefined
    301c:	000d1e01 	.inst	0x000d1e01 ; undefined
    3020:	00118a00 	.inst	0x00118a00 ; undefined
    3024:	07080200 	.inst	0x07080200 ; undefined
    3028:	00000111 	.inst	0x00000111 ; undefined
    302c:	00060102 	.inst	0x00060102 ; undefined
    3030:	02000001 	.inst	0x02000001 ; undefined
    3034:	002b0502 	.inst	0x002b0502 ; NYI
    3038:	04030000 	.inst	0x04030000 ; undefined
    303c:	746e6905 	.inst	0x746e6905 ; undefined
    3040:	05080200 	.inst	0x05080200 ; undefined
    3044:	000000a9 	.inst	0x000000a9 ; undefined
    3048:	fe080102 	.inst	0xfe080102 ; undefined
    304c:	02000000 	.inst	0x02000000 ; undefined
    3050:	01310702 	.inst	0x01310702 ; undefined
    3054:	04020000 	.inst	0x04020000 ; undefined
    3058:	00011607 	.inst	0x00011607 ; undefined
    305c:	07080200 	.inst	0x07080200 ; undefined
    3060:	0000010c 	.inst	0x0000010c ; undefined
    3064:	a4050802 	.inst	0xa4050802 ; undefined
    3068:	00000000 	.inst	0x00000000 ; undefined
    306c:	00000934 	.inst	0x00000934 ; undefined
    3070:	0ce10004 	.inst	0x0ce10004 ; undefined
    3074:	01080000 	.inst	0x01080000 ; undefined
    3078:	00000189 	.inst	0x00000189 ; undefined
    307c:	000dcc01 	.inst	0x000dcc01 ; undefined
    3080:	001fa800 	.inst	0x001fa800 ; undefined
    3084:	00000003 	.inst	0x00000003 ; undefined
    3088:	0006c400 	.inst	0x0006c400 ; undefined
    308c:	00000000 	.inst	0x00000000 ; undefined
    3090:	0011a700 	.inst	0x0011a700 ; undefined
    3094:	06010200 	.inst	0x06010200 ; undefined
    3098:	00000100 	.inst	0x00000100 ; undefined
    309c:	2b050202 	adds	w2, w16, w5
    30a0:	03000000 	.inst	0x03000000 ; undefined
    30a4:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    30a8:	08020074 	stxrb	w2, w20, [x3]
    30ac:	0000a905 	.inst	0x0000a905 ; undefined
    30b0:	08010200 	stxrb	w1, w0, [x16]
    30b4:	000000fe 	.inst	0x000000fe ; undefined
    30b8:	31070202 	adds	w2, w16, #0x1c0
    30bc:	02000001 	.inst	0x02000001 ; undefined
    30c0:	01160704 	.inst	0x01160704 ; undefined
    30c4:	08020000 	stxrb	w2, w0, [x0]
    30c8:	00011107 	.inst	0x00011107 ; undefined
    30cc:	00850400 	.inst	0x00850400 ; undefined
    30d0:	7a020000 	sbcs	w0, w0, w2
    30d4:	0000005a 	.inst	0x0000005a ; undefined
    30d8:	00060404 	.inst	0x00060404 ; undefined
    30dc:	450d0300 	.inst	0x450d0300 ; undefined
    30e0:	04000000 	.inst	0x04000000 ; undefined
    30e4:	0000003f 	.inst	0x0000003f ; undefined
    30e8:	00531103 	.inst	0x00531103 ; undefined
    30ec:	40040000 	.inst	0x40040000 ; undefined
    30f0:	03000000 	.inst	0x03000000 ; undefined
    30f4:	00003712 	.inst	0x00003712 ; undefined
    30f8:	07080200 	.inst	0x07080200 ; undefined
    30fc:	0000010c 	.inst	0x0000010c ; undefined
    3100:	a4050802 	.inst	0xa4050802 ; undefined
    3104:	05000000 	.inst	0x05000000 ; undefined
    3108:	000003a9 	.inst	0x000003a9 ; undefined
    310c:	c6180304 	.inst	0xc6180304 ; undefined
    3110:	06000000 	.inst	0x06000000 ; undefined
    3114:	000004f9 	.inst	0x000004f9 ; undefined
    3118:	04900600 	.inst	0x04900600 ; undefined
    311c:	06010000 	.inst	0x06010000 ; undefined
    3120:	000003e0 	.inst	0x000003e0 ; undefined
    3124:	05320602 	.inst	0x05320602 ; undefined
    3128:	06030000 	.inst	0x06030000 ; undefined
    312c:	0000032c 	.inst	0x0000032c ; undefined
    3130:	08040004 	stxrb	w4, w4, [x0]
    3134:	03000004 	.inst	0x03000004 ; undefined
    3138:	00009b1f 	.inst	0x00009b1f ; undefined
    313c:	0dad0700 	st2	{v0.b, v1.b}[1], [x24], x13
    3140:	04380000 	.inst	0x04380000 ; undefined
    3144:	0001262d 	.inst	0x0001262d ; undefined
    3148:	0eb40800 	.inst	0x0eb40800 ; undefined
    314c:	2f040000 	.inst	0x2f040000 ; undefined
    3150:	00000053 	.inst	0x00000053 ; undefined
    3154:	656b0900 	.inst	0x656b0900 ; undefined
    3158:	30040079 	adr	x25, b165 <_stack_size+0xa165>
    315c:	00000126 	.inst	0x00000126 ; undefined
    3160:	0dbc0804 	st2	{v4.b, v5.b}[2], [x0], x28
    3164:	31040000 	adds	w0, w0, #0x100
    3168:	0000013d 	.inst	0x0000013d ; undefined
    316c:	0e57081c 	.inst	0x0e57081c ; undefined
    3170:	32040000 	orr	w0, w0, #0x10000000
    3174:	00000053 	.inst	0x00000053 ; undefined
    3178:	0d97082c 	st1	{v12.b}[2], [x1], x23
    317c:	33040000 	bfi	w0, w0, #28, #1
    3180:	00000053 	.inst	0x00000053 ; undefined
    3184:	085a0830 	ldxrb	w16, [x1]
    3188:	34040000 	cbz	w0, b188 <_stack_size+0xa188>
    318c:	00000053 	.inst	0x00000053 ; undefined
    3190:	530a0034 	ubfiz	w20, w1, #22, #1
    3194:	36000000 	tbz	w0, #0, 3194 <_stack_size+0x2194>
    3198:	0b000001 	add	w1, w0, w0
    319c:	00000136 	.inst	0x00000136 ; undefined
    31a0:	08020005 	stxrb	w2, w5, [x0]
    31a4:	00059d07 	.inst	0x00059d07 ; undefined
    31a8:	00530a00 	.inst	0x00530a00 ; undefined
    31ac:	014d0000 	.inst	0x014d0000 ; undefined
    31b0:	360b0000 	tbz	w0, #1, 91b0 <_stack_size+0x81b0>
    31b4:	03000001 	.inst	0x03000001 ; undefined
    31b8:	0dab0400 	st2	{v0.b, v1.b}[1], [x0], x11
    31bc:	35040000 	cbnz	w0, b1bc <_stack_size+0xa1bc>
    31c0:	000000d1 	.inst	0x000000d1 ; undefined
    31c4:	000e2f0c 	.inst	0x000e2f0c ; undefined
    31c8:	010b0100 	.inst	0x010b0100 ; undefined
    31cc:	00000037 	.inst	0x00000037 ; undefined
    31d0:	0001a601 	.inst	0x0001a601 ; undefined
    31d4:	0e640d00 	sqadd	v0.4h, v8.4h, v4.4h
    31d8:	0b010000 	add	w0, w0, w1
    31dc:	0001a601 	.inst	0x0001a601 ; undefined
    31e0:	0e360e00 	sqadd	v0.8b, v16.8b, v22.8b
    31e4:	0d010000 	.inst	0x0d010000 ; undefined
    31e8:	0001ac01 	.inst	0x0001ac01 ; undefined
    31ec:	65720f00 	.inst	0x65720f00 ; undefined
    31f0:	0e010073 	tbl	v19.8b, {v3.16b}, v1.8b
    31f4:	00003701 	.inst	0x00003701 ; undefined
    31f8:	239e0e00 	.inst	0x239e0e00 ; undefined
    31fc:	0e010000 	tbl	v0.8b, {v0.16b}, v1.8b
    3200:	00003701 	.inst	0x00003701 ; undefined
    3204:	0da00e00 	st2	{v0.b, v1.b}[3], [x16], x0
    3208:	0f010000 	.inst	0x0f010000 ; undefined
    320c:	0001ac01 	.inst	0x0001ac01 ; undefined
    3210:	08100000 	stxrb	w16, w0, [x0]
    3214:	0000014d 	.inst	0x0000014d ; undefined
    3218:	00007711 	.inst	0x00007711 ; undefined
    321c:	01581200 	.inst	0x01581200 ; undefined
    3220:	1fa80000 	.inst	0x1fa80000 ; undefined
    3224:	00000300 	.inst	0x00000300 ; undefined
    3228:	01b80000 	.inst	0x01b80000 ; undefined
    322c:	00000000 	.inst	0x00000000 ; undefined
    3230:	9c010000 	ldr	q0, 5230 <_stack_size+0x4230>
    3234:	0000024f 	.inst	0x0000024f ; undefined
    3238:	00017513 	.inst	0x00017513 ; undefined
    323c:	78910200 	ldursh	x0, [x16,#-240]
    3240:	00018114 	.inst	0x00018114 ; undefined
    3244:	003b8b00 	.inst	0x003b8b00 ; NYI
    3248:	018d1400 	.inst	0x018d1400 ; undefined
    324c:	3bae0000 	.inst	0x3bae0000 ; undefined
    3250:	99130000 	.inst	0x99130000 ; undefined
    3254:	02000001 	.inst	0x02000001 ; undefined
    3258:	69157c91 	.inst	0x69157c91 ; undefined
    325c:	0a000001 	and	w1, w0, w0
    3260:	00acb003 	.inst	0x00acb003 ; undefined
    3264:	00000003 	.inst	0x00000003 ; undefined
    3268:	d4169f00 	.inst	0xd4169f00 ; undefined
    326c:	0003001f 	.inst	0x0003001f ; undefined
    3270:	8f000000 	.inst	0x8f000000 ; undefined
    3274:	16000008 	b	fffffffff8003294 <SMC_ID_HW_RSA+0xffffffff73ff338d>
    3278:	0300206c 	.inst	0x0300206c ; undefined
    327c:	00000000 	.inst	0x00000000 ; undefined
    3280:	000008a5 	.inst	0x000008a5 ; undefined
    3284:	00207016 	.inst	0x00207016 ; NYI
    3288:	00000003 	.inst	0x00000003 ; undefined
    328c:	0008ac00 	.inst	0x0008ac00 ; undefined
    3290:	20b81700 	.inst	0x20b81700 ; undefined
    3294:	00000300 	.inst	0x00000300 ; undefined
    3298:	08b30000 	.inst	0x08b30000 ; undefined
    329c:	02410000 	.inst	0x02410000 ; undefined
    32a0:	01180000 	.inst	0x01180000 ; undefined
    32a4:	18300150 	ldr	w16, 632cc <_stack_size+0x622cc>
    32a8:	31015101 	adds	w1, w8, #0x54
    32ac:	20d01600 	.inst	0x20d01600 ; undefined
    32b0:	00000300 	.inst	0x00000300 ; undefined
    32b4:	08ac0000 	.inst	0x08ac0000 ; undefined
    32b8:	19000000 	.inst	0x19000000 ; undefined
    32bc:	00000d87 	.inst	0x00000d87 ; undefined
    32c0:	00374b01 	.inst	0x00374b01 ; NYI
    32c4:	21600000 	.inst	0x21600000 ; undefined
    32c8:	00000300 	.inst	0x00000300 ; undefined
    32cc:	02980000 	.inst	0x02980000 ; undefined
    32d0:	00000000 	.inst	0x00000000 ; undefined
    32d4:	9c010000 	ldr	q0, 52d4 <_stack_size+0x42d4>
    32d8:	000005e3 	.inst	0x000005e3 ; undefined
    32dc:	000e571a 	.inst	0x000e571a ; undefined
    32e0:	e34b0100 	.inst	0xe34b0100 ; undefined
    32e4:	4a000005 	eor	w5, w0, w0
    32e8:	1a00003c 	adc	w28, w1, w0
    32ec:	0000085a 	.inst	0x0000085a ; undefined
    32f0:	00774b01 	.inst	0x00774b01 ; undefined
    32f4:	3cd20000 	ldur	q0, [x0,#-224]
    32f8:	971a0000 	bl	fffffffffc6832f8 <SMC_ID_HW_RSA+0xffffffff786733f1>
    32fc:	0100000d 	.inst	0x0100000d ; undefined
    3300:	0005e34b 	.inst	0x0005e34b ; undefined
    3304:	003d5a00 	.inst	0x003d5a00 ; NYI
    3308:	656b1b00 	.inst	0x656b1b00 ; undefined
    330c:	4b010079 	sub	w25, w3, w1
    3310:	000005e9 	.inst	0x000005e9 ; undefined
    3314:	00003db9 	.inst	0x00003db9 ; undefined
    3318:	002a971a 	.inst	0x002a971a ; NYI
    331c:	774b0100 	.inst	0x774b0100 ; undefined
    3320:	18000000 	ldr	w0, 3320 <_stack_size+0x2320>
    3324:	1a00003e 	adc	w30, w1, w0
    3328:	00000e4c 	.inst	0x00000e4c ; undefined
    332c:	00774b01 	.inst	0x00774b01 ; undefined
    3330:	3e770000 	.inst	0x3e770000 ; undefined
    3334:	b11c0000 	adds	x0, x0, #0x700
    3338:	01000003 	.inst	0x01000003 ; undefined
    333c:	0000c64d 	.inst	0x0000c64d ; undefined
    3340:	0e221d00 	and	v0.8b, v8.8b, v2.8b
    3344:	06060000 	.inst	0x06060000 ; undefined
    3348:	03090000 	.inst	0x03090000 ; undefined
    334c:	03009b08 	.inst	0x03009b08 ; undefined
    3350:	00000000 	.inst	0x00000000 ; undefined
    3354:	0021b817 	.inst	0x0021b817 ; NYI
    3358:	00000003 	.inst	0x00000003 ; undefined
    335c:	0008c900 	.inst	0x0008c900 ; undefined
    3360:	00030700 	.inst	0x00030700 ; undefined
    3364:	50011800 	adr	x0, 5666 <_stack_size+0x4666>
    3368:	9b080309 	madd	x9, x24, x8, x0
    336c:	00000300 	.inst	0x00000300 ; undefined
    3370:	17000000 	b	fffffffffc003370 <SMC_ID_HW_RSA+0xffffffff77ff3469>
    3374:	030021c4 	.inst	0x030021c4 ; undefined
    3378:	00000000 	.inst	0x00000000 ; undefined
    337c:	000008c9 	.inst	0x000008c9 ; undefined
    3380:	00000326 	.inst	0x00000326 ; undefined
    3384:	09500118 	.inst	0x09500118 ; undefined
    3388:	009ed803 	.inst	0x009ed803 ; undefined
    338c:	00000003 	.inst	0x00000003 ; undefined
    3390:	cc170000 	.inst	0xcc170000 ; undefined
    3394:	00030021 	.inst	0x00030021 ; undefined
    3398:	e6000000 	.inst	0xe6000000 ; undefined
    339c:	3e000008 	.inst	0x3e000008 ; undefined
    33a0:	18000003 	ldr	w3, 33a0 <_stack_size+0x23a0>
    33a4:	85025001 	.inst	0x85025001 ; undefined
    33a8:	d4170000 	.inst	0xd4170000 ; undefined
    33ac:	00030021 	.inst	0x00030021 ; undefined
    33b0:	c9000000 	.inst	0xc9000000 ; undefined
    33b4:	56000008 	.inst	0x56000008 ; undefined
    33b8:	18000003 	ldr	w3, 33b8 <_stack_size+0x23b8>
    33bc:	87025001 	.inst	0x87025001 ; undefined
    33c0:	dc170000 	.inst	0xdc170000 ; undefined
    33c4:	00030021 	.inst	0x00030021 ; undefined
    33c8:	e6000000 	.inst	0xe6000000 ; undefined
    33cc:	6e000008 	ext	v8.16b, v0.16b, v0.16b, #0
    33d0:	18000003 	ldr	w3, 33d0 <_stack_size+0x23d0>
    33d4:	83025001 	.inst	0x83025001 ; undefined
    33d8:	e4170000 	.inst	0xe4170000 ; undefined
    33dc:	00030021 	.inst	0x00030021 ; undefined
    33e0:	c9000000 	.inst	0xc9000000 ; undefined
    33e4:	86000008 	.inst	0x86000008 ; undefined
    33e8:	18000003 	ldr	w3, 33e8 <_stack_size+0x23e8>
    33ec:	87025001 	.inst	0x87025001 ; undefined
    33f0:	ec170000 	.inst	0xec170000 ; undefined
    33f4:	00030021 	.inst	0x00030021 ; undefined
    33f8:	e6000000 	.inst	0xe6000000 ; undefined
    33fc:	9e000008 	.inst	0x9e000008 ; undefined
    3400:	18000003 	ldr	w3, 3400 <_stack_size+0x2400>
    3404:	84025001 	.inst	0x84025001 ; undefined
    3408:	f4170000 	.inst	0xf4170000 ; undefined
    340c:	00030021 	.inst	0x00030021 ; undefined
    3410:	c9000000 	.inst	0xc9000000 ; undefined
    3414:	b6000008 	tbz	x8, #32, 3414 <_stack_size+0x2414>
    3418:	18000003 	ldr	w3, 3418 <_stack_size+0x2418>
    341c:	87025001 	.inst	0x87025001 ; undefined
    3420:	fc170000 	stur	d0, [x0,#-144]
    3424:	00030021 	.inst	0x00030021 ; undefined
    3428:	e6000000 	.inst	0xe6000000 ; undefined
    342c:	ce000008 	.inst	0xce000008 ; undefined
    3430:	18000003 	ldr	w3, 3430 <_stack_size+0x2430>
    3434:	86025001 	.inst	0x86025001 ; undefined
    3438:	04170000 	.inst	0x04170000 ; undefined
    343c:	00030022 	.inst	0x00030022 ; undefined
    3440:	c9000000 	.inst	0xc9000000 ; undefined
    3444:	e6000008 	.inst	0xe6000008 ; undefined
    3448:	18000003 	ldr	w3, 3448 <_stack_size+0x2448>
    344c:	87025001 	.inst	0x87025001 ; undefined
    3450:	10170000 	adr	x0, 31450 <_stack_size+0x30450>
    3454:	00030022 	.inst	0x00030022 ; undefined
    3458:	e6000000 	.inst	0xe6000000 ; undefined
    345c:	00000008 	.inst	0x00000008 ; undefined
    3460:	18000004 	ldr	w4, 3460 <_stack_size+0x2460>
    3464:	91045001 	add	x1, x0, #0x114
    3468:	0004947c 	.inst	0x0004947c ; undefined
    346c:	00221817 	.inst	0x00221817 ; NYI
    3470:	00000003 	.inst	0x00000003 ; undefined
    3474:	0008c900 	.inst	0x0008c900 ; undefined
    3478:	00041800 	.inst	0x00041800 ; undefined
    347c:	50011800 	adr	x0, 577e <_stack_size+0x477e>
    3480:	00008702 	.inst	0x00008702 ; undefined
    3484:	00222017 	.inst	0x00222017 ; NYI
    3488:	00000003 	.inst	0x00000003 ; undefined
    348c:	0008e600 	.inst	0x0008e600 ; undefined
    3490:	00043000 	.inst	0x00043000 ; undefined
    3494:	50011800 	adr	x0, 5796 <_stack_size+0x4796>
    3498:	00008802 	.inst	0x00008802 ; undefined
    349c:	00222c17 	.inst	0x00222c17 ; NYI
    34a0:	00000003 	.inst	0x00000003 ; undefined
    34a4:	0008c900 	.inst	0x0008c900 ; undefined
    34a8:	00044f00 	.inst	0x00044f00 ; undefined
    34ac:	50011800 	adr	x0, 57ae <_stack_size+0x47ae>
    34b0:	9d480309 	.inst	0x9d480309 ; undefined
    34b4:	00000300 	.inst	0x00000300 ; undefined
    34b8:	17000000 	b	fffffffffc0034b8 <SMC_ID_HW_RSA+0xffffffff77ff35b1>
    34bc:	03002244 	.inst	0x03002244 ; undefined
    34c0:	00000000 	.inst	0x00000000 ; undefined
    34c4:	000008f8 	.inst	0x000008f8 ; undefined
    34c8:	00000479 	.inst	0x00000479 ; undefined
    34cc:	09500118 	.inst	0x09500118 ; undefined
    34d0:	009ee803 	.inst	0x009ee803 ; undefined
    34d4:	00000003 	.inst	0x00000003 ; undefined
    34d8:	51011800 	sub	w0, w0, #0x46
    34dc:	18008602 	ldr	w2, 459c <_stack_size+0x359c>
    34e0:	40015201 	.inst	0x40015201 ; undefined
    34e4:	22501700 	.inst	0x22501700 ; undefined
    34e8:	00000300 	.inst	0x00000300 ; undefined
    34ec:	088f0000 	.inst	0x088f0000 ; undefined
    34f0:	049a0000 	.inst	0x049a0000 ; undefined
    34f4:	01180000 	.inst	0x01180000 ; undefined
    34f8:	00850250 	.inst	0x00850250 ; undefined
    34fc:	05510118 	.inst	0x05510118 ; undefined
    3500:	00850083 	.inst	0x00850083 ; undefined
    3504:	68170022 	.inst	0x68170022 ; undefined
    3508:	00030022 	.inst	0x00030022 ; undefined
    350c:	8f000000 	.inst	0x8f000000 ; undefined
    3510:	bb000008 	.inst	0xbb000008 ; undefined
    3514:	18000004 	ldr	w4, 3514 <_stack_size+0x2514>
    3518:	84025001 	.inst	0x84025001 ; undefined
    351c:	51011800 	sub	w0, w0, #0x46
    3520:	84008305 	.inst	0x84008305 ; undefined
    3524:	16002200 	b	fffffffff800bd24 <SMC_ID_HW_RSA+0xffffffff73ffbe1d>
    3528:	0300226c 	.inst	0x0300226c ; undefined
    352c:	00000000 	.inst	0x00000000 ; undefined
    3530:	000008a5 	.inst	0x000008a5 ; undefined
    3534:	00227c17 	.inst	0x00227c17 ; NYI
    3538:	00000003 	.inst	0x00000003 ; undefined
    353c:	00091a00 	.inst	0x00091a00 ; undefined
    3540:	0004f200 	.inst	0x0004f200 ; undefined
    3544:	50011800 	adr	x0, 5846 <_stack_size+0x4846>
    3548:	acb00309 	stp	q9, q0, [x24],#-512
    354c:	00000300 	.inst	0x00000300 ; undefined
    3550:	01180000 	.inst	0x01180000 ; undefined
    3554:	18300151 	ldr	w17, 6357c <_stack_size+0x6257c>
    3558:	08025201 	stxrb	w2, w1, [x16]
    355c:	3c1e0038 	stur	b24, [x1,#-32]
    3560:	00030023 	.inst	0x00030023 ; undefined
    3564:	b1000000 	adds	x0, x0, #0x0
    3568:	17000001 	b	fffffffffc00356c <SMC_ID_HW_RSA+0xffffffff77ff3665>
    356c:	03002348 	.inst	0x03002348 ; undefined
    3570:	00000000 	.inst	0x00000000 ; undefined
    3574:	0000088f 	.inst	0x0000088f ; undefined
    3578:	00000520 	.inst	0x00000520 ; undefined
    357c:	02500118 	.inst	0x02500118 ; undefined
    3580:	01180085 	.inst	0x01180085 ; undefined
    3584:	00830551 	.inst	0x00830551 ; undefined
    3588:	00220085 	.inst	0x00220085 ; NYI
    358c:	00236017 	.inst	0x00236017 ; NYI
    3590:	00000003 	.inst	0x00000003 ; undefined
    3594:	00088f00 	.inst	0x00088f00 ; undefined
    3598:	00054100 	.inst	0x00054100 ; undefined
    359c:	50011800 	adr	x0, 589e <_stack_size+0x489e>
    35a0:	18008402 	ldr	w2, 4620 <_stack_size+0x3620>
    35a4:	83055101 	.inst	0x83055101 ; undefined
    35a8:	22008400 	.inst	0x22008400 ; undefined
    35ac:	23641600 	.inst	0x23641600 ; undefined
    35b0:	00000300 	.inst	0x00000300 ; undefined
    35b4:	08a50000 	.inst	0x08a50000 ; undefined
    35b8:	74170000 	.inst	0x74170000 ; undefined
    35bc:	00030023 	.inst	0x00030023 ; undefined
    35c0:	1a000000 	adc	w0, w0, w0
    35c4:	78000009 	sturh	w9, [x0]
    35c8:	18000005 	ldr	w5, 35c8 <_stack_size+0x25c8>
    35cc:	03095001 	.inst	0x03095001 ; undefined
    35d0:	0300acb0 	.inst	0x0300acb0 ; undefined
    35d4:	00000000 	.inst	0x00000000 ; undefined
    35d8:	01510118 	.inst	0x01510118 ; undefined
    35dc:	52011830 	eor	w16, w1, #0x8000003f
    35e0:	00380802 	.inst	0x00380802 ; NYI
    35e4:	00239c16 	.inst	0x00239c16 ; NYI
    35e8:	00000003 	.inst	0x00000003 ; undefined
    35ec:	0008a500 	.inst	0x0008a500 ; undefined
    35f0:	23b01700 	.inst	0x23b01700 ; undefined
    35f4:	00000300 	.inst	0x00000300 ; undefined
    35f8:	091a0000 	.inst	0x091a0000 ; undefined
    35fc:	05af0000 	.inst	0x05af0000 ; undefined
    3600:	01180000 	.inst	0x01180000 ; undefined
    3604:	b0030950 	adrp	x16, 612c000 <_stack_base+0x311e880>
    3608:	000300ac 	.inst	0x000300ac ; undefined
    360c:	18000000 	ldr	w0, 360c <_stack_size+0x260c>
    3610:	30015101 	adr	x1, 6031 <_stack_size+0x5031>
    3614:	02520118 	.inst	0x02520118 ; undefined
    3618:	16003808 	b	fffffffff8011638 <SMC_ID_HW_RSA+0xffffffff74001731>
    361c:	030023e0 	.inst	0x030023e0 ; undefined
    3620:	00000000 	.inst	0x00000000 ; undefined
    3624:	000008a5 	.inst	0x000008a5 ; undefined
    3628:	0023f41f 	.inst	0x0023f41f ; NYI
    362c:	00000003 	.inst	0x00000003 ; undefined
    3630:	00091a00 	.inst	0x00091a00 ; undefined
    3634:	50011800 	adr	x0, 5936 <_stack_size+0x4936>
    3638:	acb00309 	stp	q9, q0, [x24],#-512
    363c:	00000300 	.inst	0x00000300 ; undefined
    3640:	01180000 	.inst	0x01180000 ; undefined
    3644:	18300151 	ldr	w17, 6366c <_stack_size+0x6266c>
    3648:	08025201 	stxrb	w2, w1, [x16]
    364c:	10000038 	adr	x24, 3650 <_stack_size+0x2650>
    3650:	00006c08 	.inst	0x00006c08 ; undefined
    3654:	77081000 	.inst	0x77081000 ; undefined
    3658:	0a000000 	and	w0, w0, w0
    365c:	000005ff 	.inst	0x000005ff ; undefined
    3660:	000005ff 	.inst	0x000005ff ; undefined
    3664:	0001360b 	.inst	0x0001360b ; undefined
    3668:	02000f00 	.inst	0x02000f00 ; undefined
    366c:	01070801 	.inst	0x01070801 ; undefined
    3670:	ef200000 	.inst	0xef200000 ; undefined
    3674:	19000005 	.inst	0x19000005 ; undefined
    3678:	00000d7b 	.inst	0x00000d7b ; undefined
    367c:	0037a701 	.inst	0x0037a701 ; NYI
    3680:	23f80000 	.inst	0x23f80000 ; undefined
    3684:	00000300 	.inst	0x00000300 ; undefined
    3688:	02740000 	.inst	0x02740000 ; undefined
    368c:	00000000 	.inst	0x00000000 ; undefined
    3690:	9c010000 	ldr	q0, 5690 <_stack_size+0x4690>
    3694:	0000084f 	.inst	0x0000084f ; undefined
    3698:	000e571a 	.inst	0x000e571a ; undefined
    369c:	e3a70100 	.inst	0xe3a70100 ; undefined
    36a0:	ff000005 	.inst	0xff000005 ; undefined
    36a4:	1a00003e 	adc	w30, w1, w0
    36a8:	0000085a 	.inst	0x0000085a ; undefined
    36ac:	0082a701 	.inst	0x0082a701 ; undefined
    36b0:	3f870000 	.inst	0x3f870000 ; undefined
    36b4:	971a0000 	bl	fffffffffc6836b4 <SMC_ID_HW_RSA+0xffffffff786737ad>
    36b8:	0100000d 	.inst	0x0100000d ; undefined
    36bc:	0005e3a7 	.inst	0x0005e3a7 ; undefined
    36c0:	00400f00 	.inst	0x00400f00 ; undefined
    36c4:	76691b00 	.inst	0x76691b00 ; undefined
    36c8:	e9a70100 	.inst	0xe9a70100 ; undefined
    36cc:	81000005 	.inst	0x81000005 ; undefined
    36d0:	1a000040 	adc	w0, w2, w0
    36d4:	00000e41 	.inst	0x00000e41 ; undefined
    36d8:	006ca701 	.inst	0x006ca701 ; undefined
    36dc:	40f30000 	.inst	0x40f30000 ; undefined
    36e0:	221d0000 	.inst	0x221d0000 ; undefined
    36e4:	5f00000e 	.inst	0x5f00000e ; undefined
    36e8:	09000008 	.inst	0x09000008 ; undefined
    36ec:	009b1803 	.inst	0x009b1803 ; undefined
    36f0:	00000003 	.inst	0x00000003 ; undefined
    36f4:	24541700 	.inst	0x24541700 ; undefined
    36f8:	00000300 	.inst	0x00000300 ; undefined
    36fc:	08c90000 	.inst	0x08c90000 ; undefined
    3700:	06a80000 	.inst	0x06a80000 ; undefined
    3704:	01180000 	.inst	0x01180000 ; undefined
    3708:	18030950 	ldr	w16, 9830 <_stack_size+0x8830>
    370c:	0003009b 	.inst	0x0003009b ; undefined
    3710:	00000000 	.inst	0x00000000 ; undefined
    3714:	00246817 	.inst	0x00246817 ; NYI
    3718:	00000003 	.inst	0x00000003 ; undefined
    371c:	0008c900 	.inst	0x0008c900 ; undefined
    3720:	0006c700 	.inst	0x0006c700 ; undefined
    3724:	50011800 	adr	x0, 5a26 <_stack_size+0x4a26>
    3728:	9ed80309 	.inst	0x9ed80309 ; undefined
    372c:	00000300 	.inst	0x00000300 ; undefined
    3730:	17000000 	b	fffffffffc003730 <SMC_ID_HW_RSA+0xffffffff77ff3829>
    3734:	03002470 	.inst	0x03002470 ; undefined
    3738:	00000000 	.inst	0x00000000 ; undefined
    373c:	000008e6 	.inst	0x000008e6 ; undefined
    3740:	000006df 	.inst	0x000006df ; undefined
    3744:	02500118 	.inst	0x02500118 ; undefined
    3748:	17000085 	b	fffffffffc00395c <SMC_ID_HW_RSA+0xffffffff77ff3a55>
    374c:	03002478 	.inst	0x03002478 ; undefined
    3750:	00000000 	.inst	0x00000000 ; undefined
    3754:	000008c9 	.inst	0x000008c9 ; undefined
    3758:	000006f7 	.inst	0x000006f7 ; undefined
    375c:	02500118 	.inst	0x02500118 ; undefined
    3760:	17000089 	b	fffffffffc003984 <SMC_ID_HW_RSA+0xffffffff77ff3a7d>
    3764:	03002480 	.inst	0x03002480 ; undefined
    3768:	00000000 	.inst	0x00000000 ; undefined
    376c:	000008e6 	.inst	0x000008e6 ; undefined
    3770:	0000070f 	.inst	0x0000070f ; undefined
    3774:	02500118 	.inst	0x02500118 ; undefined
    3778:	17000084 	b	fffffffffc003988 <SMC_ID_HW_RSA+0xffffffff77ff3a81>
    377c:	03002488 	.inst	0x03002488 ; undefined
    3780:	00000000 	.inst	0x00000000 ; undefined
    3784:	000008c9 	.inst	0x000008c9 ; undefined
    3788:	00000727 	.inst	0x00000727 ; undefined
    378c:	02500118 	.inst	0x02500118 ; undefined
    3790:	17000089 	b	fffffffffc0039b4 <SMC_ID_HW_RSA+0xffffffff77ff3aad>
    3794:	03002490 	.inst	0x03002490 ; undefined
    3798:	00000000 	.inst	0x00000000 ; undefined
    379c:	000008e6 	.inst	0x000008e6 ; undefined
    37a0:	0000073f 	.inst	0x0000073f ; undefined
    37a4:	02500118 	.inst	0x02500118 ; undefined
    37a8:	17000083 	b	fffffffffc0039b4 <SMC_ID_HW_RSA+0xffffffff77ff3aad>
    37ac:	03002498 	.inst	0x03002498 ; undefined
    37b0:	00000000 	.inst	0x00000000 ; undefined
    37b4:	000008c9 	.inst	0x000008c9 ; undefined
    37b8:	00000757 	.inst	0x00000757 ; undefined
    37bc:	02500118 	.inst	0x02500118 ; undefined
    37c0:	17000089 	b	fffffffffc0039e4 <SMC_ID_HW_RSA+0xffffffff77ff3add>
    37c4:	030024a0 	.inst	0x030024a0 ; undefined
    37c8:	00000000 	.inst	0x00000000 ; undefined
    37cc:	000008e6 	.inst	0x000008e6 ; undefined
    37d0:	0000076f 	.inst	0x0000076f ; undefined
    37d4:	02500118 	.inst	0x02500118 ; undefined
    37d8:	17000086 	b	fffffffffc0039f0 <SMC_ID_HW_RSA+0xffffffff77ff3ae9>
    37dc:	030024a8 	.inst	0x030024a8 ; undefined
    37e0:	00000000 	.inst	0x00000000 ; undefined
    37e4:	000008c9 	.inst	0x000008c9 ; undefined
    37e8:	00000787 	.inst	0x00000787 ; undefined
    37ec:	02500118 	.inst	0x02500118 ; undefined
    37f0:	17000089 	b	fffffffffc003a14 <SMC_ID_HW_RSA+0xffffffff77ff3b0d>
    37f4:	030024b0 	.inst	0x030024b0 ; undefined
    37f8:	00000000 	.inst	0x00000000 ; undefined
    37fc:	000008e6 	.inst	0x000008e6 ; undefined
    3800:	0000079f 	.inst	0x0000079f ; undefined
    3804:	02500118 	.inst	0x02500118 ; undefined
    3808:	17000087 	b	fffffffffc003a24 <SMC_ID_HW_RSA+0xffffffff77ff3b1d>
    380c:	030024bc 	.inst	0x030024bc ; undefined
    3810:	00000000 	.inst	0x00000000 ; undefined
    3814:	000008c9 	.inst	0x000008c9 ; undefined
    3818:	000007be 	.inst	0x000007be ; undefined
    381c:	09500118 	.inst	0x09500118 ; undefined
    3820:	009d4803 	.inst	0x009d4803 ; undefined
    3824:	00000003 	.inst	0x00000003 ; undefined
    3828:	cc170000 	.inst	0xcc170000 ; undefined
    382c:	00030024 	.inst	0x00030024 ; undefined
    3830:	1a000000 	adc	w0, w0, w0
    3834:	e1000009 	.inst	0xe1000009 ; undefined
    3838:	18000007 	ldr	w7, 3838 <_stack_size+0x2838>
    383c:	88025001 	stxr	w2, w1, [x0]
    3840:	51011800 	sub	w0, w0, #0x46
    3844:	01183001 	.inst	0x01183001 ; undefined
    3848:	38080252 	sturb	w18, [x18,#128]
    384c:	25781700 	.inst	0x25781700 ; undefined
    3850:	00000300 	.inst	0x00000300 ; undefined
    3854:	088f0000 	.inst	0x088f0000 ; undefined
    3858:	08020000 	stxrb	w2, w0, [x0]
    385c:	01180000 	.inst	0x01180000 ; undefined
    3860:	00850250 	.inst	0x00850250 ; undefined
    3864:	05510118 	.inst	0x05510118 ; undefined
    3868:	00850084 	.inst	0x00850084 ; undefined
    386c:	84170022 	.inst	0x84170022 ; undefined
    3870:	00030025 	.inst	0x00030025 ; undefined
    3874:	8f000000 	.inst	0x8f000000 ; undefined
    3878:	23000008 	.inst	0x23000008 ; undefined
    387c:	18000008 	ldr	w8, 387c <_stack_size+0x287c>
    3880:	83025001 	.inst	0x83025001 ; undefined
    3884:	51011800 	sub	w0, w0, #0x46
    3888:	83008405 	.inst	0x83008405 ; undefined
    388c:	17002200 	b	fffffffffc00c08c <SMC_ID_HW_RSA+0xffffffff77ffc185>
    3890:	03002590 	.inst	0x03002590 ; undefined
    3894:	00000000 	.inst	0x00000000 ; undefined
    3898:	0000088f 	.inst	0x0000088f ; undefined
    389c:	00000841 	.inst	0x00000841 ; undefined
    38a0:	02500118 	.inst	0x02500118 ; undefined
    38a4:	01180086 	.inst	0x01180086 ; undefined
    38a8:	20860251 	.inst	0x20860251 ; undefined
    38ac:	25c01e00 	.inst	0x25c01e00 ; undefined
    38b0:	00000300 	.inst	0x00000300 ; undefined
    38b4:	01b10000 	.inst	0x01b10000 ; undefined
    38b8:	0a000000 	and	w0, w0, w0
    38bc:	000005ff 	.inst	0x000005ff ; undefined
    38c0:	0000085f 	.inst	0x0000085f ; undefined
    38c4:	0001360b 	.inst	0x0001360b ; undefined
    38c8:	20000b00 	.inst	0x20000b00 ; undefined
    38cc:	0000084f 	.inst	0x0000084f ; undefined
    38d0:	000e6021 	.inst	0x000e6021 ; undefined
    38d4:	4d2a0100 	.inst	0x4d2a0100 ; undefined
    38d8:	09000001 	.inst	0x09000001 ; undefined
    38dc:	00acb003 	.inst	0x00acb003 ; undefined
    38e0:	00000003 	.inst	0x00000003 ; undefined
    38e4:	0ebf1c00 	orr	v0.8b, v0.8b, v31.8b
    38e8:	1a050000 	adc	w0, w0, w5
    38ec:	00000053 	.inst	0x00000053 ; undefined
    38f0:	0003b11c 	.inst	0x0003b11c ; undefined
    38f4:	c64d0100 	.inst	0xc64d0100 ; undefined
    38f8:	22000000 	.inst	0x22000000 ; undefined
    38fc:	0000008f 	.inst	0x0000008f ; undefined
    3900:	08a54e06 	.inst	0x08a54e06 ; undefined
    3904:	77230000 	.inst	0x77230000 ; undefined
    3908:	23000000 	.inst	0x23000000 ; undefined
    390c:	00000077 	.inst	0x00000077 ; undefined
    3910:	0cd22400 	ld1	{v0.4h-v3.4h}, [x0], x18
    3914:	6b050000 	subs	w0, w0, w5
    3918:	00016b24 	.inst	0x00016b24 ; undefined
    391c:	22550600 	.inst	0x22550600 ; undefined
    3920:	00000c84 	.inst	0x00000c84 ; undefined
    3924:	08c92d07 	.inst	0x08c92d07 ; undefined
    3928:	77230000 	.inst	0x77230000 ; undefined
    392c:	23000000 	.inst	0x23000000 ; undefined
    3930:	00000053 	.inst	0x00000053 ; undefined
    3934:	05632500 	.inst	0x05632500 ; undefined
    3938:	2c080000 	stnp	s0, s0, [x0,#64]
    393c:	0008db01 	.inst	0x0008db01 ; undefined
    3940:	08db2300 	.inst	0x08db2300 ; undefined
    3944:	10000000 	adr	x0, 3944 <_stack_size+0x2944>
    3948:	0008e108 	.inst	0x0008e108 ; undefined
    394c:	05ff2000 	.inst	0x05ff2000 ; undefined
    3950:	34250000 	cbz	w0, 4d950 <_stack_size+0x4c950>
    3954:	0800000a 	stxrb	w0, w10, [x0]
    3958:	08f8012e 	.inst	0x08f8012e ; undefined
    395c:	53230000 	.inst	0x53230000 ; undefined
    3960:	00000000 	.inst	0x00000000 ; undefined
    3964:	000dc422 	.inst	0x000dc422 ; undefined
    3968:	13590500 	.inst	0x13590500 ; undefined
    396c:	23000009 	.inst	0x23000009 ; undefined
    3970:	000008db 	.inst	0x000008db ; undefined
    3974:	00091323 	.inst	0x00091323 ; undefined
    3978:	00532300 	.inst	0x00532300 ; undefined
    397c:	10000000 	adr	x0, 397c <_stack_size+0x297c>
    3980:	00091908 	.inst	0x00091908 ; undefined
    3984:	61222600 	.inst	0x61222600 ; undefined
    3988:	0500000c 	.inst	0x0500000c ; undefined
    398c:	00093554 	.inst	0x00093554 ; undefined
    3990:	09352300 	.inst	0x09352300 ; undefined
    3994:	77230000 	.inst	0x77230000 ; undefined
    3998:	23000000 	.inst	0x23000000 ; undefined
    399c:	00000077 	.inst	0x00000077 ; undefined
    39a0:	00082700 	.inst	0x00082700 ; undefined
    39a4:	000017ef 	.inst	0x000017ef ; undefined
    39a8:	0ed90004 	.inst	0x0ed90004 ; undefined
    39ac:	01080000 	.inst	0x01080000 ; undefined
    39b0:	00000189 	.inst	0x00000189 ; undefined
    39b4:	000fd101 	.inst	0x000fd101 ; undefined
    39b8:	00266c00 	.inst	0x00266c00 ; NYI
    39bc:	00000003 	.inst	0x00000003 ; undefined
    39c0:	00154c00 	.inst	0x00154c00 ; undefined
    39c4:	00000000 	.inst	0x00000000 ; undefined
    39c8:	00144c00 	.inst	0x00144c00 ; undefined
    39cc:	06010200 	.inst	0x06010200 ; undefined
    39d0:	00000100 	.inst	0x00000100 ; undefined
    39d4:	2b050202 	adds	w2, w16, w5
    39d8:	03000000 	.inst	0x03000000 ; undefined
    39dc:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    39e0:	08020074 	stxrb	w2, w20, [x3]
    39e4:	0000a905 	.inst	0x0000a905 ; undefined
    39e8:	08010200 	stxrb	w1, w0, [x16]
    39ec:	000000fe 	.inst	0x000000fe ; undefined
    39f0:	31070202 	adds	w2, w16, #0x1c0
    39f4:	02000001 	.inst	0x02000001 ; undefined
    39f8:	01160704 	.inst	0x01160704 ; undefined
    39fc:	08020000 	stxrb	w2, w0, [x0]
    3a00:	00011107 	.inst	0x00011107 ; undefined
    3a04:	00850400 	.inst	0x00850400 ; undefined
    3a08:	7a020000 	sbcs	w0, w0, w2
    3a0c:	0000005a 	.inst	0x0000005a ; undefined
    3a10:	0005f805 	.inst	0x0005f805 ; undefined
    3a14:	89030400 	.inst	0x89030400 ; undefined
    3a18:	0000008b 	.inst	0x0000008b ; undefined
    3a1c:	00054106 	.inst	0x00054106 ; undefined
    3a20:	dc060000 	.inst	0xdc060000 ; undefined
    3a24:	01000005 	.inst	0x01000005 ; undefined
    3a28:	00049d06 	.inst	0x00049d06 ; undefined
    3a2c:	04000200 	.inst	0x04000200 ; undefined
    3a30:	0000056a 	.inst	0x0000056a ; undefined
    3a34:	006c8e03 	.inst	0x006c8e03 ; undefined
    3a38:	00070000 	.inst	0x00070000 ; undefined
    3a3c:	d8190401 	prfm	pldl1strm, 35abc <_stack_size+0x34abc>
    3a40:	08000001 	stxrb	w0, w1, [x0]
    3a44:	00000f4f 	.inst	0x00000f4f ; undefined
    3a48:	01d81a04 	.inst	0x01d81a04 ; undefined
    3a4c:	08000000 	stxrb	w0, w0, [x0]
    3a50:	00000e9e 	.inst	0x00000e9e ; undefined
    3a54:	00531b04 	.inst	0x00531b04 ; undefined
    3a58:	08080000 	stxrb	w8, w0, [x0]
    3a5c:	000010dc 	.inst	0x000010dc ; undefined
    3a60:	01ef1c04 	.inst	0x01ef1c04 ; undefined
    3a64:	080c0000 	stxrb	w12, w0, [x0]
    3a68:	00000fa8 	.inst	0x00000fa8 ; undefined
    3a6c:	01ff1d04 	.inst	0x01ff1d04 ; undefined
    3a70:	08200000 	.inst	0x08200000 ; undefined
    3a74:	00000f09 	.inst	0x00000f09 ; undefined
    3a78:	020f1e04 	.inst	0x020f1e04 ; undefined
    3a7c:	082c0000 	.inst	0x082c0000 ; undefined
    3a80:	000010e7 	.inst	0x000010e7 ; undefined
    3a84:	021f1f04 	.inst	0x021f1f04 ; undefined
    3a88:	083c0000 	.inst	0x083c0000 ; undefined
    3a8c:	00001299 	.inst	0x00001299 ; undefined
    3a90:	00532004 	.inst	0x00532004 ; undefined
    3a94:	08400000 	ldxrb	w0, [x0]
    3a98:	00001358 	.inst	0x00001358 ; undefined
    3a9c:	00532104 	.inst	0x00532104 ; undefined
    3aa0:	08440000 	ldxrb	w0, [x0]
    3aa4:	00001251 	.inst	0x00001251 ; undefined
    3aa8:	00532204 	.inst	0x00532204 ; undefined
    3aac:	08480000 	ldxrb	w0, [x0]
    3ab0:	000010bf 	.inst	0x000010bf ; undefined
    3ab4:	00532304 	.inst	0x00532304 ; undefined
    3ab8:	084c0000 	ldxrb	w0, [x0]
    3abc:	00000e84 	.inst	0x00000e84 ; undefined
    3ac0:	00532404 	.inst	0x00532404 ; undefined
    3ac4:	08500000 	ldxrb	w0, [x0]
    3ac8:	00001218 	.inst	0x00001218 ; undefined
    3acc:	00532504 	.inst	0x00532504 ; undefined
    3ad0:	08540000 	ldxrb	w0, [x0]
    3ad4:	00000efb 	.inst	0x00000efb ; undefined
    3ad8:	00532604 	.inst	0x00532604 ; undefined
    3adc:	08580000 	ldxrb	w0, [x0]
    3ae0:	00000f42 	.inst	0x00000f42 ; undefined
    3ae4:	00532704 	.inst	0x00532704 ; undefined
    3ae8:	085c0000 	ldxrb	w0, [x0]
    3aec:	00001113 	.inst	0x00001113 ; undefined
    3af0:	00532804 	.inst	0x00532804 ; undefined
    3af4:	08600000 	.inst	0x08600000 ; undefined
    3af8:	000012ff 	.inst	0x000012ff ; undefined
    3afc:	00532904 	.inst	0x00532904 ; undefined
    3b00:	08640000 	.inst	0x08640000 ; undefined
    3b04:	000010f2 	.inst	0x000010f2 ; undefined
    3b08:	022f2a04 	.inst	0x022f2a04 ; undefined
    3b0c:	08680000 	.inst	0x08680000 ; undefined
    3b10:	00001066 	.inst	0x00001066 ; undefined
    3b14:	004c2b04 	.inst	0x004c2b04 ; undefined
    3b18:	086a0000 	.inst	0x086a0000 ; undefined
    3b1c:	00001206 	.inst	0x00001206 ; undefined
    3b20:	00532c04 	.inst	0x00532c04 ; undefined
    3b24:	086c0000 	.inst	0x086c0000 ; undefined
    3b28:	0000120f 	.inst	0x0000120f ; undefined
    3b2c:	00532d04 	.inst	0x00532d04 ; undefined
    3b30:	08700000 	.inst	0x08700000 ; undefined
    3b34:	00000e72 	.inst	0x00000e72 ; undefined
    3b38:	00532e04 	.inst	0x00532e04 ; undefined
    3b3c:	08740000 	.inst	0x08740000 ; undefined
    3b40:	00000e7b 	.inst	0x00000e7b ; undefined
    3b44:	00532f04 	.inst	0x00532f04 ; undefined
    3b48:	08780000 	.inst	0x08780000 ; undefined
    3b4c:	000011ef 	.inst	0x000011ef ; undefined
    3b50:	00453004 	.inst	0x00453004 ; undefined
    3b54:	087c0000 	.inst	0x087c0000 ; undefined
    3b58:	000010fd 	.inst	0x000010fd ; undefined
    3b5c:	023f3104 	.inst	0x023f3104 ; undefined
    3b60:	087d0000 	.inst	0x087d0000 ; undefined
    3b64:	000012d8 	.inst	0x000012d8 ; undefined
    3b68:	024f3204 	.inst	0x024f3204 ; undefined
    3b6c:	08800000 	.inst	0x08800000 ; undefined
    3b70:	00001108 	.inst	0x00001108 ; undefined
    3b74:	025f3304 	.inst	0x025f3304 ; undefined
    3b78:	00a00000 	.inst	0x00a00000 ; undefined
    3b7c:	00004509 	.inst	0x00004509 ; undefined
    3b80:	0001e800 	.inst	0x0001e800 ; undefined
    3b84:	01e80a00 	.inst	0x01e80a00 ; undefined
    3b88:	00070000 	.inst	0x00070000 ; undefined
    3b8c:	9d070802 	.inst	0x9d070802 ; undefined
    3b90:	09000005 	.inst	0x09000005 ; undefined
    3b94:	00000045 	.inst	0x00000045 ; undefined
    3b98:	000001ff 	.inst	0x000001ff ; undefined
    3b9c:	0001e80a 	.inst	0x0001e80a ; undefined
    3ba0:	09001300 	.inst	0x09001300 ; undefined
    3ba4:	00000045 	.inst	0x00000045 ; undefined
    3ba8:	0000020f 	.inst	0x0000020f ; undefined
    3bac:	0001e80a 	.inst	0x0001e80a ; undefined
    3bb0:	09000b00 	.inst	0x09000b00 ; undefined
    3bb4:	00000045 	.inst	0x00000045 ; undefined
    3bb8:	0000021f 	.inst	0x0000021f ; undefined
    3bbc:	0001e80a 	.inst	0x0001e80a ; undefined
    3bc0:	09000f00 	.inst	0x09000f00 ; undefined
    3bc4:	00000045 	.inst	0x00000045 ; undefined
    3bc8:	0000022f 	.inst	0x0000022f ; undefined
    3bcc:	0001e80a 	.inst	0x0001e80a ; undefined
    3bd0:	09000300 	.inst	0x09000300 ; undefined
    3bd4:	00000045 	.inst	0x00000045 ; undefined
    3bd8:	0000023f 	.inst	0x0000023f ; undefined
    3bdc:	0001e80a 	.inst	0x0001e80a ; undefined
    3be0:	09000100 	.inst	0x09000100 ; undefined
    3be4:	00000045 	.inst	0x00000045 ; undefined
    3be8:	0000024f 	.inst	0x0000024f ; undefined
    3bec:	0001e80a 	.inst	0x0001e80a ; undefined
    3bf0:	09000200 	.inst	0x09000200 ; undefined
    3bf4:	00000045 	.inst	0x00000045 ; undefined
    3bf8:	0000025f 	.inst	0x0000025f ; undefined
    3bfc:	0001e80a 	.inst	0x0001e80a ; undefined
    3c00:	09001f00 	.inst	0x09001f00 ; undefined
    3c04:	00000045 	.inst	0x00000045 ; undefined
    3c08:	0000026f 	.inst	0x0000026f ; undefined
    3c0c:	0001e80a 	.inst	0x0001e80a ; undefined
    3c10:	04005f00 	.inst	0x04005f00 ; undefined
    3c14:	000011b0 	.inst	0x000011b0 ; undefined
    3c18:	00963404 	.inst	0x00963404 ; undefined
    3c1c:	04040000 	.inst	0x04040000 ; undefined
    3c20:	05000006 	.inst	0x05000006 ; undefined
    3c24:	0000450d 	.inst	0x0000450d ; undefined
    3c28:	003f0400 	.inst	0x003f0400 ; NYI
    3c2c:	11050000 	add	w0, w0, #0x140
    3c30:	00000053 	.inst	0x00000053 ; undefined
    3c34:	00004004 	.inst	0x00004004 ; undefined
    3c38:	37120500 	tbnz	w0, #2, 7cd8 <_stack_size+0x6cd8>
    3c3c:	02000000 	.inst	0x02000000 ; undefined
    3c40:	010c0708 	.inst	0x010c0708 ; undefined
    3c44:	08020000 	stxrb	w2, w0, [x0]
    3c48:	0000a405 	.inst	0x0000a405 ; undefined
    3c4c:	06300b00 	.inst	0x06300b00 ; undefined
    3c50:	00037a82 	.inst	0x00037a82 ; undefined
    3c54:	64690c00 	.inst	0x64690c00 ; undefined
    3c58:	53840600 	.inst	0x53840600 ; undefined
    3c5c:	00000000 	.inst	0x00000000 ; undefined
    3c60:	0011e608 	.inst	0x0011e608 ; undefined
    3c64:	4c850600 	st4	{v0.8h-v3.8h}, [x16], x5
    3c68:	04000000 	.inst	0x04000000 ; undefined
    3c6c:	000f5c08 	.inst	0x000f5c08 ; undefined
    3c70:	53860600 	.inst	0x53860600 ; undefined
    3c74:	08000000 	stxrb	w0, w0, [x0]
    3c78:	001f8608 	.inst	0x001f8608 ; undefined
    3c7c:	9b870600 	.inst	0x9b870600 ; undefined
    3c80:	10000002 	adr	x2, 3c80 <_stack_size+0x2c80>
    3c84:	000f3508 	.inst	0x000f3508 ; undefined
    3c88:	45880600 	.inst	0x45880600 ; undefined
    3c8c:	18000000 	ldr	w0, 3c8c <_stack_size+0x2c8c>
    3c90:	00122608 	.inst	0x00122608 ; undefined
    3c94:	45890600 	.inst	0x45890600 ; undefined
    3c98:	19000000 	.inst	0x19000000 ; undefined
    3c9c:	0011fc08 	.inst	0x0011fc08 ; undefined
    3ca0:	458a0600 	.inst	0x458a0600 ; undefined
    3ca4:	1a000000 	adc	w0, w0, w0
    3ca8:	00106e08 	.inst	0x00106e08 ; undefined
    3cac:	458b0600 	.inst	0x458b0600 ; undefined
    3cb0:	1b000000 	madd	w0, w0, w0, w0
    3cb4:	0031740c 	.inst	0x0031740c ; NYI
    3cb8:	00458c06 	.inst	0x00458c06 ; undefined
    3cbc:	0c1c0000 	.inst	0x0c1c0000 ; undefined
    3cc0:	06003274 	.inst	0x06003274 ; undefined
    3cc4:	0000458d 	.inst	0x0000458d ; undefined
    3cc8:	740c1d00 	.inst	0x740c1d00 ; undefined
    3ccc:	8e060033 	.inst	0x8e060033 ; undefined
    3cd0:	00000045 	.inst	0x00000045 ; undefined
    3cd4:	11a9081e 	.inst	0x11a9081e ; undefined
    3cd8:	8f060000 	.inst	0x8f060000 ; undefined
    3cdc:	00000045 	.inst	0x00000045 ; undefined
    3ce0:	1066081f 	adr	xzr, cfde0 <_stack_size+0xcede0>
    3ce4:	90060000 	adrp	x0, c003000 <_stack_base+0x8ff5880>
    3ce8:	00000045 	.inst	0x00000045 ; undefined
    3cec:	11480820 	add	w0, w1, #0x202, lsl #12
    3cf0:	91060000 	add	x0, x0, #0x180
    3cf4:	00000045 	.inst	0x00000045 ; undefined
    3cf8:	64690c21 	.inst	0x64690c21 ; undefined
    3cfc:	92060035 	and	x21, x1, #0x400000004000000
    3d00:	00000045 	.inst	0x00000045 ; undefined
    3d04:	64690c22 	.inst	0x64690c22 ; undefined
    3d08:	93060036 	.inst	0x93060036 ; undefined
    3d0c:	00000045 	.inst	0x00000045 ; undefined
    3d10:	06b10823 	.inst	0x06b10823 ; undefined
    3d14:	94060000 	bl	183d14 <_stack_size+0x182d14>
    3d18:	0000037a 	.inst	0x0000037a ; undefined
    3d1c:	080d0028 	stxrb	w13, w8, [x1]
    3d20:	00000380 	.inst	0x00000380 ; undefined
    3d24:	0003850e 	.inst	0x0003850e ; undefined
    3d28:	08010200 	stxrb	w1, w0, [x16]
    3d2c:	00000107 	.inst	0x00000107 ; undefined
    3d30:	00130d04 	.inst	0x00130d04 ; undefined
    3d34:	a9950600 	stp	x0, x1, [x16,#336]!
    3d38:	0f000002 	.inst	0x0f000002 ; undefined
    3d3c:	0000118c 	.inst	0x0000118c ; undefined
    3d40:	3702ae01 	tbnz	w1, #0, 9300 <_stack_size+0x8300>
    3d44:	01000000 	.inst	0x01000000 ; undefined
    3d48:	000eb910 	.inst	0x000eb910 ; undefined
    3d4c:	02c10100 	.inst	0x02c10100 ; undefined
    3d50:	00000053 	.inst	0x00000053 ; undefined
    3d54:	0003da01 	.inst	0x0003da01 ; undefined
    3d58:	11a11100 	.inst	0x11a11100 ; undefined
    3d5c:	c1010000 	.inst	0xc1010000 ; undefined
    3d60:	0003da02 	.inst	0x0003da02 ; undefined
    3d64:	13c51100 	.inst	0x13c51100 ; undefined
    3d68:	c1010000 	.inst	0xc1010000 ; undefined
    3d6c:	0003df02 	.inst	0x0003df02 ; undefined
    3d70:	1dbb1200 	.inst	0x1dbb1200 ; undefined
    3d74:	c3010000 	.inst	0xc3010000 ; undefined
    3d78:	00005302 	.inst	0x00005302 ; undefined
    3d7c:	370e0000 	tbnz	w0, #1, fffffffffffffd7c <SMC_ID_HW_RSA+0xffffffff7bfefe75>
    3d80:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    3d84:	00000053 	.inst	0x00000053 ; undefined
    3d88:	000ea70f 	.inst	0x000ea70f ; undefined
    3d8c:	04420100 	.inst	0x04420100 ; undefined
    3d90:	00000385 	.inst	0x00000385 ; undefined
    3d94:	12b11301 	mov	w1, #0x7767ffff            	// #2003304447
    3d98:	47010000 	.inst	0x47010000 ; undefined
    3d9c:	04170104 	.inst	0x04170104 ; undefined
    3da0:	54110000 	b.eq	25da0 <_stack_size+0x24da0>
    3da4:	01000011 	.inst	0x01000011 ; undefined
    3da8:	00530447 	.inst	0x00530447 ; undefined
    3dac:	e1110000 	.inst	0xe1110000 ; undefined
    3db0:	01000012 	.inst	0x01000012 ; undefined
    3db4:	00530447 	.inst	0x00530447 ; undefined
    3db8:	0f000000 	.inst	0x0f000000 ; undefined
    3dbc:	00000f99 	.inst	0x00000f99 ; undefined
    3dc0:	53028e01 	.inst	0x53028e01 ; undefined
    3dc4:	01000000 	.inst	0x01000000 ; undefined
    3dc8:	00117c0f 	.inst	0x00117c0f ; undefined
    3dcc:	02930100 	.inst	0x02930100 ; undefined
    3dd0:	00000053 	.inst	0x00000053 ; undefined
    3dd4:	134a1401 	.inst	0x134a1401 ; undefined
    3dd8:	1d010000 	.inst	0x1d010000 ; undefined
    3ddc:	940f0103 	bl	3c41e8 <_stack_size+0x3c31e8>
    3de0:	01000010 	.inst	0x01000010 ; undefined
    3de4:	005302db 	.inst	0x005302db ; undefined
    3de8:	10010000 	adr	x0, 5de8 <_stack_size+0x4de8>
    3dec:	0000107d 	.inst	0x0000107d ; undefined
    3df0:	37022401 	tbnz	w1, #0, 8270 <_stack_size+0x7270>
    3df4:	01000000 	.inst	0x01000000 ; undefined
    3df8:	000004b9 	.inst	0x000004b9 ; undefined
    3dfc:	0010a111 	.inst	0x0010a111 ; undefined
    3e00:	02240100 	.inst	0x02240100 ; undefined
    3e04:	00000053 	.inst	0x00000053 ; undefined
    3e08:	000f8a11 	.inst	0x000f8a11 ; undefined
    3e0c:	02240100 	.inst	0x02240100 ; undefined
    3e10:	00000053 	.inst	0x00000053 ; undefined
    3e14:	00113012 	.inst	0x00113012 ; undefined
    3e18:	02260100 	.inst	0x02260100 ; undefined
    3e1c:	00000053 	.inst	0x00000053 ; undefined
    3e20:	000f6612 	.inst	0x000f6612 ; undefined
    3e24:	02270100 	.inst	0x02270100 ; undefined
    3e28:	00000053 	.inst	0x00000053 ; undefined
    3e2c:	000f7012 	.inst	0x000f7012 ; undefined
    3e30:	02270100 	.inst	0x02270100 ; undefined
    3e34:	00000053 	.inst	0x00000053 ; undefined
    3e38:	0011b712 	.inst	0x0011b712 ; undefined
    3e3c:	022b0100 	.inst	0x022b0100 ; undefined
    3e40:	000004b9 	.inst	0x000004b9 ; undefined
    3e44:	0005b112 	.inst	0x0005b112 ; undefined
    3e48:	022c0100 	.inst	0x022c0100 ; undefined
    3e4c:	000001d8 	.inst	0x000001d8 ; undefined
    3e50:	000e6a12 	.inst	0x000e6a12 ; undefined
    3e54:	022d0100 	.inst	0x022d0100 ; undefined
    3e58:	000004bf 	.inst	0x000004bf ; undefined
    3e5c:	6f080d00 	.inst	0x6f080d00 ; undefined
    3e60:	09000002 	.inst	0x09000002 ; undefined
    3e64:	00000045 	.inst	0x00000045 ; undefined
    3e68:	000004d0 	.inst	0x000004d0 ; undefined
    3e6c:	0001e815 	.inst	0x0001e815 ; undefined
    3e70:	0007ff00 	.inst	0x0007ff00 ; undefined
    3e74:	00125f10 	.inst	0x00125f10 ; undefined
    3e78:	02e10100 	.inst	0x02e10100 ; undefined
    3e7c:	00000053 	.inst	0x00000053 ; undefined
    3e80:	00052801 	.inst	0x00052801 ; undefined
    3e84:	109b1100 	adr	x0, fffffffffff3a0a4 <SMC_ID_HW_RSA+0xffffffff7bf2a19d>
    3e88:	e1010000 	.inst	0xe1010000 ; undefined
    3e8c:	00028502 	.inst	0x00028502 ; undefined
    3e90:	13c51100 	.inst	0x13c51100 ; undefined
    3e94:	e1010000 	.inst	0xe1010000 ; undefined
    3e98:	00028502 	.inst	0x00028502 ; undefined
    3e9c:	00691600 	.inst	0x00691600 ; undefined
    3ea0:	7a02e301 	.inst	0x7a02e301 ; undefined
    3ea4:	12000002 	and	w2, w0, #0x1
    3ea8:	0000239e 	.inst	0x0000239e ; undefined
    3eac:	7a02e301 	.inst	0x7a02e301 ; undefined
    3eb0:	12000002 	and	w2, w0, #0x1
    3eb4:	00000f8f 	.inst	0x00000f8f ; undefined
    3eb8:	7a02e301 	.inst	0x7a02e301 ; undefined
    3ebc:	12000002 	and	w2, w0, #0x1
    3ec0:	000010d3 	.inst	0x000010d3 ; undefined
    3ec4:	5302e401 	.inst	0x5302e401 ; undefined
    3ec8:	00000000 	.inst	0x00000000 ; undefined
    3ecc:	00117110 	.inst	0x00117110 ; undefined
    3ed0:	03840100 	.inst	0x03840100 ; undefined
    3ed4:	00000037 	.inst	0x00000037 ; undefined
    3ed8:	00055101 	.inst	0x00055101 ; undefined
    3edc:	64691700 	.inst	0x64691700 ; undefined
    3ee0:	03840100 	.inst	0x03840100 ; undefined
    3ee4:	00000551 	.inst	0x00000551 ; undefined
    3ee8:	001dbb12 	.inst	0x001dbb12 ; undefined
    3eec:	03860100 	.inst	0x03860100 ; undefined
    3ef0:	00000053 	.inst	0x00000053 ; undefined
    3ef4:	53080d00 	ubfiz	w0, w8, #24, #4
    3ef8:	10000000 	adr	x0, 3ef8 <_stack_size+0x2ef8>
    3efc:	00000f24 	.inst	0x00000f24 ; undefined
    3f00:	37035d01 	tbnz	w1, #0, aaa0 <_stack_size+0x9aa0>
    3f04:	01000000 	.inst	0x01000000 ; undefined
    3f08:	0000058d 	.inst	0x0000058d ; undefined
    3f0c:	00113811 	.inst	0x00113811 ; undefined
    3f10:	035d0100 	.inst	0x035d0100 ; undefined
    3f14:	00000053 	.inst	0x00000053 ; undefined
    3f18:	73657216 	.inst	0x73657216 ; undefined
    3f1c:	035f0100 	.inst	0x035f0100 ; undefined
    3f20:	00000037 	.inst	0x00000037 ; undefined
    3f24:	000ec512 	.inst	0x000ec512 ; undefined
    3f28:	03600100 	.inst	0x03600100 ; undefined
    3f2c:	00000053 	.inst	0x00000053 ; undefined
    3f30:	04171800 	.inst	0x04171800 ; undefined
    3f34:	266c0000 	.inst	0x266c0000 ; undefined
    3f38:	00000300 	.inst	0x00000300 ; undefined
    3f3c:	001c0000 	.inst	0x001c0000 ; undefined
    3f40:	00000000 	.inst	0x00000000 ; undefined
    3f44:	9c010000 	ldr	q0, 5f44 <_stack_size+0x4f44>
    3f48:	00042418 	.inst	0x00042418 ; undefined
    3f4c:	00268800 	.inst	0x00268800 ; NYI
    3f50:	00000003 	.inst	0x00000003 ; undefined
    3f54:	00001c00 	.inst	0x00001c00 ; undefined
    3f58:	00000000 	.inst	0x00000000 ; undefined
    3f5c:	199c0100 	.inst	0x199c0100 ; undefined
    3f60:	00000f7a 	.inst	0x00000f7a ; undefined
    3f64:	3702b301 	tbnz	w1, #0, 95c4 <_stack_size+0x85c4>
    3f68:	a4000000 	.inst	0xa4000000 ; undefined
    3f6c:	00030026 	.inst	0x00030026 ; undefined
    3f70:	08000000 	stxrb	w0, w0, [x0]
    3f74:	00000000 	.inst	0x00000000 ; undefined
    3f78:	01000000 	.inst	0x01000000 ; undefined
    3f7c:	0005ee9c 	.inst	0x0005ee9c ; undefined
    3f80:	0aa51a00 	bic	w0, w16, w5, asr #6
    3f84:	b3010000 	.inst	0xb3010000 ; undefined
    3f88:	00005302 	.inst	0x00005302 ; undefined
    3f8c:	00416500 	.inst	0x00416500 ; undefined
    3f90:	481b0000 	stxrh	w27, w0, [x0]
    3f94:	01000010 	.inst	0x01000010 ; undefined
    3f98:	26ac03c5 	.inst	0x26ac03c5 ; undefined
    3f9c:	00000300 	.inst	0x00000300 ; undefined
    3fa0:	002c0000 	.inst	0x002c0000 ; NYI
    3fa4:	00000000 	.inst	0x00000000 ; undefined
    3fa8:	9c010000 	ldr	q0, 5fa8 <_stack_size+0x4fa8>
    3fac:	00000637 	.inst	0x00000637 ; undefined
    3fb0:	000aa51c 	.inst	0x000aa51c ; undefined
    3fb4:	03c50100 	.inst	0x03c50100 ; undefined
    3fb8:	00000053 	.inst	0x00000053 ; undefined
    3fbc:	791c5001 	strh	w1, [x0,#3624]
    3fc0:	01000009 	.inst	0x01000009 ; undefined
    3fc4:	005303c5 	.inst	0x005303c5 ; undefined
    3fc8:	51010000 	sub	w0, w0, #0x40
    3fcc:	001e341c 	.inst	0x001e341c ; undefined
    3fd0:	03c50100 	.inst	0x03c50100 ; undefined
    3fd4:	00000053 	.inst	0x00000053 ; undefined
    3fd8:	19005201 	.inst	0x19005201 ; undefined
    3fdc:	0000131b 	.inst	0x0000131b ; undefined
    3fe0:	37033401 	tbnz	w1, #0, a660 <_stack_size+0x9660>
    3fe4:	d8000000 	prfm	pldl1keep, 3fe4 <_stack_size+0x2fe4>
    3fe8:	00030026 	.inst	0x00030026 ; undefined
    3fec:	b4000000 	cbz	x0, 3fec <_stack_size+0x2fec>
    3ff0:	00000000 	.inst	0x00000000 ; undefined
    3ff4:	01000000 	.inst	0x01000000 ; undefined
    3ff8:	00069f9c 	.inst	0x00069f9c ; undefined
    3ffc:	275c1d00 	.inst	0x275c1d00 ; undefined
    4000:	00000300 	.inst	0x00000300 ; undefined
    4004:	17340000 	b	fffffffffcd04004 <SMC_ID_HW_RSA+0xffffffff78cf40fd>
    4008:	067d0000 	.inst	0x067d0000 ; undefined
    400c:	011e0000 	.inst	0x011e0000 ; undefined
    4010:	80080251 	.inst	0x80080251 ; undefined
    4014:	0152011e 	.inst	0x0152011e ; undefined
    4018:	53011e30 	ubfx	w16, w17, #1, #7
    401c:	243c4003 	.inst	0x243c4003 ; undefined
    4020:	27841f00 	.inst	0x27841f00 ; undefined
    4024:	00000300 	.inst	0x00000300 ; undefined
    4028:	17340000 	b	fffffffffcd04028 <SMC_ID_HW_RSA+0xffffffff78cf4121>
    402c:	011e0000 	.inst	0x011e0000 ; undefined
    4030:	40080251 	.inst	0x40080251 ; undefined
    4034:	0252011e 	.inst	0x0252011e ; undefined
    4038:	011e4008 	.inst	0x011e4008 ; undefined
    403c:	3c400353 	ldur	b19, [x26]
    4040:	20000024 	.inst	0x20000024 ; undefined
    4044:	00001334 	.inst	0x00001334 ; undefined
    4048:	00535e01 	.inst	0x00535e01 ; undefined
    404c:	278c0000 	.inst	0x278c0000 ; undefined
    4050:	00000300 	.inst	0x00000300 ; undefined
    4054:	02fc0000 	.inst	0x02fc0000 ; undefined
    4058:	00000000 	.inst	0x00000000 ; undefined
    405c:	9c010000 	ldr	q0, 605c <_stack_size+0x505c>
    4060:	00000806 	.inst	0x00000806 ; undefined
    4064:	00113021 	.inst	0x00113021 ; undefined
    4068:	535e0100 	.inst	0x535e0100 ; undefined
    406c:	9e000000 	.inst	0x9e000000 ; undefined
    4070:	21000041 	.inst	0x21000041 ; undefined
    4074:	000012a7 	.inst	0x000012a7 ; undefined
    4078:	00535e01 	.inst	0x00535e01 ; undefined
    407c:	41e90000 	.inst	0x41e90000 ; undefined
    4080:	d3220000 	.inst	0xd3220000 ; undefined
    4084:	01000010 	.inst	0x01000010 ; undefined
    4088:	00005360 	.inst	0x00005360 ; undefined
    408c:	00423400 	.inst	0x00423400 ; undefined
    4090:	127d2200 	.inst	0x127d2200 ; undefined
    4094:	61010000 	.inst	0x61010000 ; undefined
    4098:	00000037 	.inst	0x00000037 ; undefined
    409c:	0000427f 	.inst	0x0000427f ; undefined
    40a0:	00136822 	.inst	0x00136822 ; undefined
    40a4:	37620100 	tbnz	w0, #12, 80c4 <_stack_size+0x70c4>
    40a8:	de000000 	.inst	0xde000000 ; undefined
    40ac:	23000042 	.inst	0x23000042 ; undefined
    40b0:	00001352 	.inst	0x00001352 ; undefined
    40b4:	27a06f01 	.inst	0x27a06f01 ; undefined
    40b8:	00000300 	.inst	0x00000300 ; undefined
    40bc:	a4240000 	.inst	0xa4240000 ; undefined
    40c0:	00030027 	.inst	0x00030027 ; undefined
    40c4:	17000000 	b	fffffffffc0040c4 <SMC_ID_HW_RSA+0xffffffff77ff41bd>
    40c8:	24000004 	.inst	0x24000004 ; undefined
    40cc:	030027b0 	.inst	0x030027b0 ; undefined
    40d0:	00000000 	.inst	0x00000000 ; undefined
    40d4:	00000424 	.inst	0x00000424 ; undefined
    40d8:	0029341d 	.inst	0x0029341d ; NYI
    40dc:	00000003 	.inst	0x00000003 ; undefined
    40e0:	0005bb00 	.inst	0x0005bb00 ; undefined
    40e4:	00074e00 	.inst	0x00074e00 ; undefined
    40e8:	50011e00 	adr	x0, 64aa <_stack_size+0x54aa>
    40ec:	94689104 	bl	1a284fc <MPIDR_EL1_MT+0xa284fc>
    40f0:	80240004 	.inst	0x80240004 ; NYI
    40f4:	00030029 	.inst	0x00030029 ; undefined
    40f8:	58000000 	ldr	x0, 40f8 <_stack_size+0x30f8>
    40fc:	24000017 	.inst	0x24000017 ; undefined
    4100:	030029b8 	.inst	0x030029b8 ; undefined
    4104:	00000000 	.inst	0x00000000 ; undefined
    4108:	0000175f 	.inst	0x0000175f ; undefined
    410c:	0029bc24 	.inst	0x0029bc24 ; NYI
    4110:	00000003 	.inst	0x00000003 ; undefined
    4114:	00175800 	.inst	0x00175800 ; undefined
    4118:	29e01d00 	ldp	w0, w7, [x8,#-256]!
    411c:	00000300 	.inst	0x00000300 ; undefined
    4120:	05ee0000 	.inst	0x05ee0000 ; undefined
    4124:	07950000 	.inst	0x07950000 ; undefined
    4128:	011e0000 	.inst	0x011e0000 ; undefined
    412c:	80080251 	.inst	0x80080251 ; undefined
    4130:	0452011e 	.inst	0x0452011e ; undefined
    4134:	04947891 	.inst	0x04947891 ; undefined
    4138:	29e42400 	ldp	w0, w9, [x0,#-224]!
    413c:	00000300 	.inst	0x00000300 ; undefined
    4140:	175f0000 	b	fffffffffd7c4140 <SMC_ID_HW_RSA+0xffffffff797b4239>
    4144:	e8240000 	.inst	0xe8240000 ; undefined
    4148:	00030029 	.inst	0x00030029 ; undefined
    414c:	58000000 	ldr	x0, 414c <_stack_size+0x314c>
    4150:	1d000017 	.inst	0x1d000017 ; undefined
    4154:	030029fc 	.inst	0x030029fc ; undefined
    4158:	00000000 	.inst	0x00000000 ; undefined
    415c:	000005ee 	.inst	0x000005ee ; undefined
    4160:	000007cb 	.inst	0x000007cb ; undefined
    4164:	0151011e 	.inst	0x0151011e ; undefined
    4168:	52011e31 	eor	w17, w17, #0x8000007f
    416c:	1d003101 	.inst	0x1d003101 ; undefined
    4170:	03002a20 	.inst	0x03002a20 ; undefined
    4174:	00000000 	.inst	0x00000000 ; undefined
    4178:	00001766 	.inst	0x00001766 ; undefined
    417c:	000007ea 	.inst	0x000007ea ; undefined
    4180:	0950011e 	.inst	0x0950011e ; undefined
    4184:	009b2803 	.inst	0x009b2803 ; undefined
    4188:	00000003 	.inst	0x00000003 ; undefined
    418c:	4c1f0000 	.inst	0x4c1f0000 ; undefined
    4190:	0003002a 	.inst	0x0003002a ; undefined
    4194:	66000000 	.inst	0x66000000 ; undefined
    4198:	1e000017 	.inst	0x1e000017 ; undefined
    419c:	03095001 	.inst	0x03095001 ; undefined
    41a0:	03009b38 	.inst	0x03009b38 ; undefined
    41a4:	00000000 	.inst	0x00000000 ; undefined
    41a8:	47250000 	.inst	0x47250000 ; undefined
    41ac:	88000004 	stxr	w0, w4, [x0]
    41b0:	0003002a 	.inst	0x0003002a ; undefined
    41b4:	14000000 	b	41b4 <_stack_size+0x31b4>
    41b8:	00000002 	.inst	0x00000002 ; undefined
    41bc:	01000000 	.inst	0x01000000 ; undefined
    41c0:	0009da9c 	.inst	0x0009da9c ; undefined
    41c4:	04702600 	.inst	0x04702600 ; undefined
    41c8:	43160000 	.inst	0x43160000 ; undefined
    41cc:	7c260000 	.inst	0x7c260000 ; undefined
    41d0:	4d000004 	st1	{v4.b}[8], [x0]
    41d4:	27000043 	.inst	0x27000043 ; undefined
    41d8:	00000488 	.inst	0x00000488 ; undefined
    41dc:	6ff49103 	fmulx	v3.2d, v8.2d, v20.d[0]
    41e0:	00049426 	.inst	0x00049426 ; undefined
    41e4:	00439600 	.inst	0x00439600 ; undefined
    41e8:	04a02700 	.inst	0x04a02700 ; undefined
    41ec:	91030000 	add	x0, x0, #0xc0
    41f0:	ac276ff8 	stnp	q24, q27, [sp,#-800]
    41f4:	03000004 	.inst	0x03000004 ; undefined
    41f8:	28708091 	ldnp	w17, w0, [x4,#-124]
    41fc:	00000464 	.inst	0x00000464 ; undefined
    4200:	045829c0 	.inst	0x045829c0 ; undefined
    4204:	01800000 	.inst	0x01800000 ; undefined
    4208:	002b1c1d 	.inst	0x002b1c1d ; NYI
    420c:	00000003 	.inst	0x00000003 ; undefined
    4210:	00069f00 	.inst	0x00069f00 ; undefined
    4214:	00088200 	.inst	0x00088200 ; undefined
    4218:	50011e00 	adr	x0, 65da <_stack_size+0x55da>
    421c:	1e008302 	.inst	0x1e008302 ; undefined
    4220:	84025101 	.inst	0x84025101 ; undefined
    4224:	301d0000 	adr	x0, 3e225 <_stack_size+0x3d225>
    4228:	0003002b 	.inst	0x0003002b ; undefined
    422c:	78000000 	sturh	w0, [x0]
    4230:	a6000017 	.inst	0xa6000017 ; undefined
    4234:	1e000008 	.inst	0x1e000008 ; undefined
    4238:	91035001 	add	x1, x0, #0xd4
    423c:	011e6ff8 	.inst	0x011e6ff8 ; undefined
    4240:	00850251 	.inst	0x00850251 ; undefined
    4244:	0152011e 	.inst	0x0152011e ; undefined
    4248:	441d0038 	.inst	0x441d0038 ; undefined
    424c:	0003002b 	.inst	0x0003002b ; undefined
    4250:	99000000 	.inst	0x99000000 ; undefined
    4254:	c4000017 	.inst	0xc4000017 ; undefined
    4258:	1e000008 	.inst	0x1e000008 ; undefined
    425c:	84025001 	.inst	0x84025001 ; undefined
    4260:	51011e00 	sub	w0, w16, #0x47
    4264:	00800802 	.inst	0x00800802 ; undefined
    4268:	002b581d 	.inst	0x002b581d ; NYI
    426c:	00000003 	.inst	0x00000003 ; undefined
    4270:	0017b300 	.inst	0x0017b300 ; undefined
    4274:	0008e800 	.inst	0x0008e800 ; undefined
    4278:	50011e00 	adr	x0, 663a <_stack_size+0x563a>
    427c:	6ff49103 	fmulx	v3.2d, v8.2d, v20.d[0]
    4280:	0251011e 	.inst	0x0251011e ; undefined
    4284:	011e0087 	.inst	0x011e0087 ; undefined
    4288:	00340152 	.inst	0x00340152 ; NYI
    428c:	002bb81d 	.inst	0x002bb81d ; NYI
    4290:	00000003 	.inst	0x00000003 ; undefined
    4294:	00176600 	.inst	0x00176600 ; undefined
    4298:	00090700 	.inst	0x00090700 ; undefined
    429c:	50011e00 	adr	x0, 665e <_stack_size+0x565e>
    42a0:	9ef00309 	.inst	0x9ef00309 ; undefined
    42a4:	00000300 	.inst	0x00000300 ; undefined
    42a8:	1d000000 	.inst	0x1d000000 ; undefined
    42ac:	03002bc0 	.inst	0x03002bc0 ; undefined
    42b0:	00000000 	.inst	0x00000000 ; undefined
    42b4:	00001766 	.inst	0x00001766 ; undefined
    42b8:	0000091f 	.inst	0x0000091f ; undefined
    42bc:	0250011e 	.inst	0x0250011e ; undefined
    42c0:	24000085 	.inst	0x24000085 ; undefined
    42c4:	03002bd0 	.inst	0x03002bd0 ; undefined
    42c8:	00000000 	.inst	0x00000000 ; undefined
    42cc:	000017d2 	.inst	0x000017d2 ; undefined
    42d0:	002bd81d 	.inst	0x002bd81d ; NYI
    42d4:	00000003 	.inst	0x00000003 ; undefined
    42d8:	00176600 	.inst	0x00176600 ; undefined
    42dc:	00094400 	.inst	0x00094400 ; undefined
    42e0:	50011e00 	adr	x0, 66a2 <_stack_size+0x56a2>
    42e4:	00008302 	.inst	0x00008302 ; undefined
    42e8:	002be41d 	.inst	0x002be41d ; NYI
    42ec:	00000003 	.inst	0x00000003 ; undefined
    42f0:	00176600 	.inst	0x00176600 ; undefined
    42f4:	00096300 	.inst	0x00096300 ; undefined
    42f8:	50011e00 	adr	x0, 66ba <_stack_size+0x56ba>
    42fc:	9f080309 	.inst	0x9f080309 ; undefined
    4300:	00000300 	.inst	0x00000300 ; undefined
    4304:	1d000000 	.inst	0x1d000000 ; undefined
    4308:	03002bec 	.inst	0x03002bec ; undefined
    430c:	00000000 	.inst	0x00000000 ; undefined
    4310:	00001766 	.inst	0x00001766 ; undefined
    4314:	0000097b 	.inst	0x0000097b ; undefined
    4318:	0250011e 	.inst	0x0250011e ; undefined
    431c:	24000085 	.inst	0x24000085 ; undefined
    4320:	03002bf4 	.inst	0x03002bf4 ; undefined
    4324:	00000000 	.inst	0x00000000 ; undefined
    4328:	000017d2 	.inst	0x000017d2 ; undefined
    432c:	002bfc1d 	.inst	0x002bfc1d ; NYI
    4330:	00000003 	.inst	0x00000003 ; undefined
    4334:	00176600 	.inst	0x00176600 ; undefined
    4338:	0009a000 	.inst	0x0009a000 ; undefined
    433c:	50011e00 	adr	x0, 66fe <_stack_size+0x56fe>
    4340:	00008302 	.inst	0x00008302 ; undefined
    4344:	002c0424 	.inst	0x002c0424 ; NYI
    4348:	00000003 	.inst	0x00000003 ; undefined
    434c:	0017e400 	.inst	0x0017e400 ; undefined
    4350:	2c7c1d00 	ldnp	s0, s7, [x8,#-32]
    4354:	00000300 	.inst	0x00000300 ; undefined
    4358:	17660000 	b	fffffffffd984358 <SMC_ID_HW_RSA+0xffffffff79974451>
    435c:	09cc0000 	.inst	0x09cc0000 ; undefined
    4360:	011e0000 	.inst	0x011e0000 ; undefined
    4364:	18030950 	ldr	w16, a48c <_stack_size+0x948c>
    4368:	0003009f 	.inst	0x0003009f ; undefined
    436c:	00000000 	.inst	0x00000000 ; undefined
    4370:	002c9c24 	.inst	0x002c9c24 ; NYI
    4374:	00000003 	.inst	0x00000003 ; undefined
    4378:	0017eb00 	.inst	0x0017eb00 ; undefined
    437c:	57250000 	.inst	0x57250000 ; undefined
    4380:	9c000005 	ldr	q5, 4380 <_stack_size+0x3380>
    4384:	0003002c 	.inst	0x0003002c ; undefined
    4388:	24000000 	.inst	0x24000000 ; undefined
    438c:	00000002 	.inst	0x00000002 ; undefined
    4390:	01000000 	.inst	0x01000000 ; undefined
    4394:	000c349c 	.inst	0x000c349c ; undefined
    4398:	05742600 	.inst	0x05742600 ; undefined
    439c:	43e20000 	.inst	0x43e20000 ; undefined
    43a0:	80260000 	.inst	0x80260000 ; NYI
    43a4:	05000005 	.inst	0x05000005 ; undefined
    43a8:	28000044 	stnp	w4, w0, [x2]
    43ac:	00000568 	.inst	0x00000568 ; undefined
    43b0:	05282ac0 	.inst	0x05282ac0 ; undefined
    43b4:	2ca00000 	stp	s0, s0, [x0],#-256
    43b8:	00000300 	.inst	0x00000300 ; undefined
    43bc:	02c00000 	.inst	0x02c00000 ; undefined
    43c0:	63010000 	.inst	0x63010000 ; undefined
    43c4:	000aa903 	.inst	0x000aa903 ; undefined
    43c8:	05392b00 	.inst	0x05392b00 ; undefined
    43cc:	f2060000 	ands	x0, x0, #0x400000004000000
    43d0:	000043a2 	.inst	0x000043a2 ; undefined
    43d4:	02c02c00 	.inst	0x02c02c00 ; undefined
    43d8:	44260000 	.inst	0x44260000 ; undefined
    43dc:	76000005 	.inst	0x76000005 ; undefined
    43e0:	1d000044 	.inst	0x1d000044 ; undefined
    43e4:	03002d1c 	.inst	0x03002d1c ; undefined
    43e8:	00000000 	.inst	0x00000000 ; undefined
    43ec:	00001734 	.inst	0x00001734 ; undefined
    43f0:	00000a63 	.inst	0x00000a63 ; undefined
    43f4:	0251011e 	.inst	0x0251011e ; undefined
    43f8:	011e0083 	.inst	0x011e0083 ; undefined
    43fc:	1e300152 	fcvtms	w18, s10
    4400:	40035301 	.inst	0x40035301 ; undefined
    4404:	1d00243c 	.inst	0x1d00243c ; undefined
    4408:	03002d6c 	.inst	0x03002d6c ; undefined
    440c:	00000000 	.inst	0x00000000 ; undefined
    4410:	00001734 	.inst	0x00001734 ; undefined
    4414:	00000a87 	.inst	0x00000a87 ; undefined
    4418:	0251011e 	.inst	0x0251011e ; undefined
    441c:	011e0083 	.inst	0x011e0083 ; undefined
    4420:	1e300152 	fcvtms	w18, s10
    4424:	40035301 	.inst	0x40035301 ; undefined
    4428:	1f00243c 	fmadd	s28, s1, s0, s9
    442c:	03002d90 	.inst	0x03002d90 ; undefined
    4430:	00000000 	.inst	0x00000000 ; undefined
    4434:	00001734 	.inst	0x00001734 ; undefined
    4438:	0251011e 	.inst	0x0251011e ; undefined
    443c:	011e0083 	.inst	0x011e0083 ; undefined
    4440:	1e300152 	fcvtms	w18, s10
    4444:	40035301 	.inst	0x40035301 ; undefined
    4448:	0000243c 	.inst	0x0000243c ; undefined
    444c:	2db82400 	stp	s0, s9, [x0,#-64]!
    4450:	00000300 	.inst	0x00000300 ; undefined
    4454:	08060000 	stxrb	w6, w0, [x0]
    4458:	081d0000 	stxrb	w29, w0, [x0]
    445c:	0003002e 	.inst	0x0003002e ; undefined
    4460:	66000000 	.inst	0x66000000 ; undefined
    4464:	d5000017 	msr	s0_0_c0_c0_0, x23
    4468:	1e00000a 	.inst	0x1e00000a ; undefined
    446c:	03095001 	.inst	0x03095001 ; undefined
    4470:	03009f28 	.inst	0x03009f28 ; undefined
    4474:	00000000 	.inst	0x00000000 ; undefined
    4478:	2e101d00 	.inst	0x2e101d00 ; undefined
    447c:	00000300 	.inst	0x00000300 ; undefined
    4480:	17660000 	b	fffffffffd984480 <SMC_ID_HW_RSA+0xffffffff79974579>
    4484:	0aed0000 	bic	w0, w0, w13, ror #0
    4488:	011e0000 	.inst	0x011e0000 ; undefined
    448c:	00850250 	.inst	0x00850250 ; undefined
    4490:	2e202400 	uhsub	v0.8b, v0.8b, v0.8b
    4494:	00000300 	.inst	0x00000300 ; undefined
    4498:	17d20000 	b	ffffffffff484498 <SMC_ID_HW_RSA+0xffffffff7b474591>
    449c:	281d0000 	stnp	w0, w0, [x0,#232]
    44a0:	0003002e 	.inst	0x0003002e ; undefined
    44a4:	66000000 	.inst	0x66000000 ; undefined
    44a8:	12000017 	and	w23, w0, #0x1
    44ac:	1e00000b 	.inst	0x1e00000b ; undefined
    44b0:	84025001 	.inst	0x84025001 ; undefined
    44b4:	341d0000 	cbz	w0, 3e4b4 <_stack_size+0x3d4b4>
    44b8:	0003002e 	.inst	0x0003002e ; undefined
    44bc:	66000000 	.inst	0x66000000 ; undefined
    44c0:	31000017 	adds	w23, w0, #0x0
    44c4:	1e00000b 	.inst	0x1e00000b ; undefined
    44c8:	03095001 	.inst	0x03095001 ; undefined
    44cc:	03009f38 	.inst	0x03009f38 ; undefined
    44d0:	00000000 	.inst	0x00000000 ; undefined
    44d4:	2e3c1d00 	eor	v0.8b, v8.8b, v28.8b
    44d8:	00000300 	.inst	0x00000300 ; undefined
    44dc:	17660000 	b	fffffffffd9844dc <SMC_ID_HW_RSA+0xffffffff799745d5>
    44e0:	0b490000 	add	w0, w0, w9, lsr #0
    44e4:	011e0000 	.inst	0x011e0000 ; undefined
    44e8:	00850250 	.inst	0x00850250 ; undefined
    44ec:	2e442400 	.inst	0x2e442400 ; undefined
    44f0:	00000300 	.inst	0x00000300 ; undefined
    44f4:	17d20000 	b	ffffffffff4844f4 <SMC_ID_HW_RSA+0xffffffff7b4745ed>
    44f8:	4c1d0000 	.inst	0x4c1d0000 ; undefined
    44fc:	0003002e 	.inst	0x0003002e ; undefined
    4500:	66000000 	.inst	0x66000000 ; undefined
    4504:	6e000017 	ext	v23.16b, v0.16b, v0.16b, #0
    4508:	1e00000b 	.inst	0x1e00000b ; undefined
    450c:	84025001 	.inst	0x84025001 ; undefined
    4510:	581d0000 	ldr	x0, 3e510 <_stack_size+0x3d510>
    4514:	0003002e 	.inst	0x0003002e ; undefined
    4518:	66000000 	.inst	0x66000000 ; undefined
    451c:	8d000017 	.inst	0x8d000017 ; undefined
    4520:	1e00000b 	.inst	0x1e00000b ; undefined
    4524:	03095001 	.inst	0x03095001 ; undefined
    4528:	03009f48 	.inst	0x03009f48 ; undefined
    452c:	00000000 	.inst	0x00000000 ; undefined
    4530:	2e601d00 	bsl	v0.8b, v8.8b, v0.8b
    4534:	00000300 	.inst	0x00000300 ; undefined
    4538:	17660000 	b	fffffffffd984538 <SMC_ID_HW_RSA+0xffffffff79974631>
    453c:	0ba50000 	.inst	0x0ba50000 ; undefined
    4540:	011e0000 	.inst	0x011e0000 ; undefined
    4544:	00850250 	.inst	0x00850250 ; undefined
    4548:	2e682400 	uhsub	v0.4h, v0.4h, v8.4h
    454c:	00000300 	.inst	0x00000300 ; undefined
    4550:	17d20000 	b	ffffffffff484550 <SMC_ID_HW_RSA+0xffffffff7b474649>
    4554:	701d0000 	adr	x0, 3e557 <_stack_size+0x3d557>
    4558:	0003002e 	.inst	0x0003002e ; undefined
    455c:	66000000 	.inst	0x66000000 ; undefined
    4560:	ca000017 	eor	x23, x0, x0
    4564:	1e00000b 	.inst	0x1e00000b ; undefined
    4568:	84025001 	.inst	0x84025001 ; undefined
    456c:	7c1d0000 	stur	h0, [x0,#-48]
    4570:	0003002e 	.inst	0x0003002e ; undefined
    4574:	66000000 	.inst	0x66000000 ; undefined
    4578:	e9000017 	.inst	0xe9000017 ; undefined
    457c:	1e00000b 	.inst	0x1e00000b ; undefined
    4580:	03095001 	.inst	0x03095001 ; undefined
    4584:	03009f58 	.inst	0x03009f58 ; undefined
    4588:	00000000 	.inst	0x00000000 ; undefined
    458c:	2e841d00 	.inst	0x2e841d00 ; undefined
    4590:	00000300 	.inst	0x00000300 ; undefined
    4594:	17660000 	b	fffffffffd984594 <SMC_ID_HW_RSA+0xffffffff7997468d>
    4598:	0c010000 	.inst	0x0c010000 ; undefined
    459c:	011e0000 	.inst	0x011e0000 ; undefined
    45a0:	00850250 	.inst	0x00850250 ; undefined
    45a4:	2e8c2400 	.inst	0x2e8c2400 ; undefined
    45a8:	00000300 	.inst	0x00000300 ; undefined
    45ac:	17d20000 	b	ffffffffff4845ac <SMC_ID_HW_RSA+0xffffffff7b4746a5>
    45b0:	941d0000 	bl	7445b0 <_stack_size+0x7435b0>
    45b4:	0003002e 	.inst	0x0003002e ; undefined
    45b8:	66000000 	.inst	0x66000000 ; undefined
    45bc:	26000017 	.inst	0x26000017 ; undefined
    45c0:	1e00000c 	.inst	0x1e00000c ; undefined
    45c4:	84025001 	.inst	0x84025001 ; undefined
    45c8:	c0240000 	.inst	0xc0240000 ; undefined
    45cc:	0003002e 	.inst	0x0003002e ; undefined
    45d0:	eb000000 	subs	x0, x0, x0
    45d4:	00000017 	.inst	0x00000017 ; undefined
    45d8:	00102c2d 	.inst	0x00102c2d ; undefined
    45dc:	01210100 	.inst	0x01210100 ; undefined
    45e0:	00000053 	.inst	0x00000053 ; undefined
    45e4:	03002ec0 	.inst	0x03002ec0 ; undefined
    45e8:	00000000 	.inst	0x00000000 ; undefined
    45ec:	0000033c 	.inst	0x0000033c ; undefined
    45f0:	00000000 	.inst	0x00000000 ; undefined
    45f4:	0daf9c01 	.inst	0x0daf9c01 ; undefined
    45f8:	301a0000 	adr	x0, 385f9 <_stack_size+0x375f9>
    45fc:	01000011 	.inst	0x01000011 ; undefined
    4600:	00530121 	.inst	0x00530121 ; undefined
    4604:	44bf0000 	.inst	0x44bf0000 ; undefined
    4608:	a71a0000 	.inst	0xa71a0000 ; undefined
    460c:	01000012 	.inst	0x01000012 ; undefined
    4610:	00530121 	.inst	0x00530121 ; undefined
    4614:	450a0000 	.inst	0x450a0000 ; undefined
    4618:	d32e0000 	.inst	0xd32e0000 ; undefined
    461c:	01000010 	.inst	0x01000010 ; undefined
    4620:	00530123 	.inst	0x00530123 ; undefined
    4624:	45550000 	.inst	0x45550000 ; undefined
    4628:	7d2e0000 	str	h0, [x0,#5888]
    462c:	01000012 	.inst	0x01000012 ; undefined
    4630:	00370124 	.inst	0x00370124 ; NYI
    4634:	45a00000 	.inst	0x45a00000 ; undefined
    4638:	682e0000 	.inst	0x682e0000 ; undefined
    463c:	01000013 	.inst	0x01000013 ; undefined
    4640:	00370125 	.inst	0x00370125 ; NYI
    4644:	45ff0000 	.inst	0x45ff0000 ; undefined
    4648:	522f0000 	eor	w0, w0, #0x20000
    464c:	01000013 	.inst	0x01000013 ; undefined
    4650:	2ed40132 	.inst	0x2ed40132 ; undefined
    4654:	00000300 	.inst	0x00000300 ; undefined
    4658:	d8240000 	prfm	pldl1keep, 4c658 <_stack_size+0x4b658>
    465c:	0003002e 	.inst	0x0003002e ; undefined
    4660:	17000000 	b	fffffffffc004660 <SMC_ID_HW_RSA+0xffffffff77ff4759>
    4664:	24000004 	.inst	0x24000004 ; undefined
    4668:	03002ee4 	.inst	0x03002ee4 ; undefined
    466c:	00000000 	.inst	0x00000000 ; undefined
    4670:	00000424 	.inst	0x00000424 ; undefined
    4674:	002f5424 	.inst	0x002f5424 ; NYI
    4678:	00000003 	.inst	0x00000003 ; undefined
    467c:	0017eb00 	.inst	0x0017eb00 ; undefined
    4680:	30941d00 	adr	x0, fffffffffff2ca21 <SMC_ID_HW_RSA+0xffffffff7bf1cb1a>
    4684:	00000300 	.inst	0x00000300 ; undefined
    4688:	05bb0000 	.inst	0x05bb0000 ; undefined
    468c:	0cf70000 	.inst	0x0cf70000 ; undefined
    4690:	011e0000 	.inst	0x011e0000 ; undefined
    4694:	68910450 	.inst	0x68910450 ; undefined
    4698:	24000494 	.inst	0x24000494 ; undefined
    469c:	030030fc 	.inst	0x030030fc ; undefined
    46a0:	00000000 	.inst	0x00000000 ; undefined
    46a4:	000017eb 	.inst	0x000017eb ; undefined
    46a8:	00312c24 	.inst	0x00312c24 ; NYI
    46ac:	00000003 	.inst	0x00000003 ; undefined
    46b0:	00175f00 	.inst	0x00175f00 ; undefined
    46b4:	31302400 	adds	w0, w0, #0xc09
    46b8:	00000300 	.inst	0x00000300 ; undefined
    46bc:	17580000 	b	fffffffffd6046bc <SMC_ID_HW_RSA+0xffffffff795f47b5>
    46c0:	541d0000 	b.eq	3e6c0 <_stack_size+0x3d6c0>
    46c4:	00030031 	.inst	0x00030031 ; undefined
    46c8:	ee000000 	.inst	0xee000000 ; undefined
    46cc:	3e000005 	.inst	0x3e000005 ; undefined
    46d0:	1e00000d 	.inst	0x1e00000d ; undefined
    46d4:	08025101 	stxrb	w2, w1, [x8]
    46d8:	52011e80 	eor	w0, w20, #0x8000007f
    46dc:	94789104 	bl	1e28aec <MPIDR_EL1_MT+0xe28aec>
    46e0:	58240004 	ldr	x4, 4c6e0 <_stack_size+0x4b6e0>
    46e4:	00030031 	.inst	0x00030031 ; undefined
    46e8:	5f000000 	.inst	0x5f000000 ; undefined
    46ec:	24000017 	.inst	0x24000017 ; undefined
    46f0:	0300315c 	.inst	0x0300315c ; undefined
    46f4:	00000000 	.inst	0x00000000 ; undefined
    46f8:	00001758 	.inst	0x00001758 ; undefined
    46fc:	0031701d 	.inst	0x0031701d ; NYI
    4700:	00000003 	.inst	0x00000003 ; undefined
    4704:	0005ee00 	.inst	0x0005ee00 ; undefined
    4708:	000d7400 	.inst	0x000d7400 ; undefined
    470c:	51011e00 	sub	w0, w16, #0x47
    4710:	011e3101 	.inst	0x011e3101 ; undefined
    4714:	00310152 	.inst	0x00310152 ; NYI
    4718:	0031941d 	.inst	0x0031941d ; NYI
    471c:	00000003 	.inst	0x00000003 ; undefined
    4720:	00176600 	.inst	0x00176600 ; undefined
    4724:	000d9300 	.inst	0x000d9300 ; undefined
    4728:	50011e00 	adr	x0, 6aea <_stack_size+0x5aea>
    472c:	9b280309 	smaddl	x9, w24, w8, x0
    4730:	00000300 	.inst	0x00000300 ; undefined
    4734:	1f000000 	fmadd	s0, s0, s0, s0
    4738:	030031c0 	.inst	0x030031c0 ; undefined
    473c:	00000000 	.inst	0x00000000 ; undefined
    4740:	00001766 	.inst	0x00001766 ; undefined
    4744:	0950011e 	.inst	0x0950011e ; undefined
    4748:	009b5003 	.inst	0x009b5003 ; undefined
    474c:	00000003 	.inst	0x00000003 ; undefined
    4750:	10000000 	adr	x0, 4750 <_stack_size+0x3750>
    4754:	00001122 	.inst	0x00001122 ; undefined
    4758:	3703cc01 	tbnz	w1, #0, c0d8 <_stack_size+0xb0d8>
    475c:	01000000 	.inst	0x01000000 ; undefined
    4760:	00000dfb 	.inst	0x00000dfb ; undefined
    4764:	00106111 	.inst	0x00106111 ; undefined
    4768:	03cc0100 	.inst	0x03cc0100 ; undefined
    476c:	00000dfb 	.inst	0x00000dfb ; undefined
    4770:	01006916 	.inst	0x01006916 ; undefined
    4774:	003703ce 	.inst	0x003703ce ; NYI
    4778:	72160000 	ands	w0, w0, #0x400
    477c:	01007365 	.inst	0x01007365 ; undefined
    4780:	003703cf 	.inst	0x003703cf ; NYI
    4784:	38120000 	sturb	w0, [x0,#-224]
    4788:	01000011 	.inst	0x01000011 ; undefined
    478c:	005303d0 	.inst	0x005303d0 ; undefined
    4790:	8a120000 	and	x0, x0, x18
    4794:	01000012 	.inst	0x01000012 ; undefined
    4798:	0e0103d1 	tbl	v17.8b, {v30.16b}, v1.8b
    479c:	0d000000 	st1	{v0.b}[0], [x0]
    47a0:	00008b08 	.inst	0x00008b08 ; undefined
    47a4:	008b0900 	.inst	0x008b0900 ; undefined
    47a8:	0e110000 	tbl	v0.8b, {v0.16b}, v17.8b
    47ac:	e80a0000 	.inst	0xe80a0000 ; undefined
    47b0:	01000001 	.inst	0x01000001 ; undefined
    47b4:	03d32d00 	.inst	0x03d32d00 ; undefined
    47b8:	15010000 	b	40447b8 <_stack_base+0x1037038>
    47bc:	00003704 	.inst	0x00003704 ; undefined
    47c0:	0031fc00 	.inst	0x0031fc00 ; NYI
    47c4:	00000003 	.inst	0x00000003 ; undefined
    47c8:	00027400 	.inst	0x00027400 ; undefined
    47cc:	00000000 	.inst	0x00000000 ; undefined
    47d0:	099c0100 	.inst	0x099c0100 ; undefined
    47d4:	30000011 	adr	x17, 47d5 <_stack_size+0x37d5>
    47d8:	00736572 	.inst	0x00736572 ; undefined
    47dc:	37041701 	tbnz	w1, #0, ffffffffffffcabc <SMC_ID_HW_RSA+0xffffffff7bfecbb5>
    47e0:	37000000 	tbnz	w0, #0, 47e0 <_stack_size+0x37e0>
    47e4:	2e000046 	ext	v6.8b, v2.8b, v0.8b, #0
    47e8:	00001061 	.inst	0x00001061 ; undefined
    47ec:	8b041801 	add	x1, x0, x4, lsl #6
    47f0:	6d000000 	stp	d0, d0, [x0]
    47f4:	2e000046 	ext	v6.8b, v2.8b, v0.8b, #0
    47f8:	00001138 	.inst	0x00001138 ; undefined
    47fc:	53041901 	ubfx	w1, w8, #4, #3
    4800:	90000000 	adrp	x0, 4000 <_stack_size+0x3000>
    4804:	2a000046 	orr	w6, w2, w0
    4808:	00000daf 	.inst	0x00000daf ; undefined
    480c:	03003200 	.inst	0x03003200 ; undefined
    4810:	00000000 	.inst	0x00000000 ; undefined
    4814:	00000300 	.inst	0x00000300 ; undefined
    4818:	3f042001 	.inst	0x3f042001 ; undefined
    481c:	2b000010 	adds	w16, w0, w0
    4820:	00000dc0 	.inst	0x00000dc0 ; undefined
    4824:	47e7f206 	.inst	0x47e7f206 ; undefined
    4828:	2c000000 	stnp	s0, s0, [x0]
    482c:	00000300 	.inst	0x00000300 ; undefined
    4830:	000dcc26 	.inst	0x000dcc26 ; undefined
    4834:	0046b500 	.inst	0x0046b500 ; undefined
    4838:	0dd62600 	ld3	{v0.b-v2.b}[1], [x16], x22
    483c:	46d90000 	.inst	0x46d90000 ; undefined
    4840:	e2260000 	.inst	0xe2260000 ; undefined
    4844:	4900000d 	.inst	0x4900000d ; undefined
    4848:	27000047 	.inst	0x27000047 ; undefined
    484c:	00000dee 	.inst	0x00000dee ; undefined
    4850:	2a789102 	.inst	0x2a789102 ; undefined
    4854:	00000431 	.inst	0x00000431 ; undefined
    4858:	03003228 	.inst	0x03003228 ; undefined
    485c:	00000000 	.inst	0x00000000 ; undefined
    4860:	00000350 	.inst	0x00000350 ; undefined
    4864:	0b03e901 	.inst	0x0b03e901 ; undefined
    4868:	2a00000f 	orr	w15, w0, w0
    486c:	000003f1 	.inst	0x000003f1 ; undefined
    4870:	03003270 	.inst	0x03003270 ; undefined
    4874:	00000000 	.inst	0x00000000 ; undefined
    4878:	000003c0 	.inst	0x000003c0 ; undefined
    487c:	f2032d01 	ands	x1, x8, #0xe00001ffe00001ff
    4880:	3100000e 	adds	w14, w0, #0x0
    4884:	0000040a 	.inst	0x0000040a ; undefined
    4888:	00004783 	.inst	0x00004783 ; undefined
    488c:	0003fe31 	.inst	0x0003fe31 ; undefined
    4890:	0047a900 	.inst	0x0047a900 ; undefined
    4894:	e4320000 	.inst	0xe4320000 ; undefined
    4898:	c4000003 	.inst	0xc4000003 ; undefined
    489c:	00030032 	.inst	0x00030032 ; undefined
    48a0:	04000000 	.inst	0x04000000 ; undefined
    48a4:	00000000 	.inst	0x00000000 ; undefined
    48a8:	01000000 	.inst	0x01000000 ; undefined
    48ac:	33000326 	bfxil	w6, w25, #0, #1
    48b0:	00000417 	.inst	0x00000417 ; undefined
    48b4:	03003278 	.inst	0x03003278 ; undefined
    48b8:	00000000 	.inst	0x00000000 ; undefined
    48bc:	00000420 	.inst	0x00000420 ; undefined
    48c0:	3203db01 	orr	w1, w24, #0xefefefef
    48c4:	00000424 	.inst	0x00000424 ; undefined
    48c8:	030032a4 	.inst	0x030032a4 ; undefined
    48cc:	00000000 	.inst	0x00000000 ; undefined
    48d0:	00000008 	.inst	0x00000008 ; undefined
    48d4:	00000000 	.inst	0x00000000 ; undefined
    48d8:	1d03db01 	.inst	0x1d03db01 ; undefined
    48dc:	0300325c 	.inst	0x0300325c ; undefined
    48e0:	00000000 	.inst	0x00000000 ; undefined
    48e4:	00001766 	.inst	0x00001766 ; undefined
    48e8:	00000f56 	.inst	0x00000f56 ; undefined
    48ec:	0950011e 	.inst	0x0950011e ; undefined
    48f0:	009f6803 	.inst	0x009f6803 ; undefined
    48f4:	00000003 	.inst	0x00000003 ; undefined
    48f8:	641d0000 	.inst	0x641d0000 ; undefined
    48fc:	00030032 	.inst	0x00030032 ; undefined
    4900:	d2000000 	eor	x0, x0, #0x100000001
    4904:	6e000017 	ext	v23.16b, v0.16b, v0.16b, #0
    4908:	1e00000f 	.inst	0x1e00000f ; undefined
    490c:	83025001 	.inst	0x83025001 ; undefined
    4910:	6c1d0000 	stnp	d0, d0, [x0,#464]
    4914:	00030032 	.inst	0x00030032 ; undefined
    4918:	66000000 	.inst	0x66000000 ; undefined
    491c:	8d000017 	.inst	0x8d000017 ; undefined
    4920:	1e00000f 	.inst	0x1e00000f ; undefined
    4924:	03095001 	.inst	0x03095001 ; undefined
    4928:	03009f80 	.inst	0x03009f80 ; undefined
    492c:	00000000 	.inst	0x00000000 ; undefined
    4930:	32e42400 	.inst	0x32e42400 ; undefined
    4934:	00000300 	.inst	0x00000300 ; undefined
    4938:	06370000 	.inst	0x06370000 ; undefined
    493c:	f4240000 	.inst	0xf4240000 ; undefined
    4940:	00030032 	.inst	0x00030032 ; undefined
    4944:	66000000 	.inst	0x66000000 ; undefined
    4948:	1d000017 	.inst	0x1d000017 ; undefined
    494c:	03003300 	.inst	0x03003300 ; undefined
    4950:	00000000 	.inst	0x00000000 ; undefined
    4954:	000017d2 	.inst	0x000017d2 ; undefined
    4958:	00000fbf 	.inst	0x00000fbf ; undefined
    495c:	0250011e 	.inst	0x0250011e ; undefined
    4960:	1d000083 	.inst	0x1d000083 ; undefined
    4964:	0300330c 	.inst	0x0300330c ; undefined
    4968:	00000000 	.inst	0x00000000 ; undefined
    496c:	00001766 	.inst	0x00001766 ; undefined
    4970:	00000fde 	.inst	0x00000fde ; undefined
    4974:	0950011e 	.inst	0x0950011e ; undefined
    4978:	009f9803 	.inst	0x009f9803 ; undefined
    497c:	00000003 	.inst	0x00000003 ; undefined
    4980:	34240000 	cbz	w0, 4c980 <_stack_size+0x4b980>
    4984:	00030033 	.inst	0x00030033 ; undefined
    4988:	da000000 	sbc	x0, x0, x0
    498c:	1d000009 	.inst	0x1d000009 ; undefined
    4990:	03003350 	.inst	0x03003350 ; undefined
    4994:	00000000 	.inst	0x00000000 ; undefined
    4998:	00001766 	.inst	0x00001766 ; undefined
    499c:	0000100a 	.inst	0x0000100a ; undefined
    49a0:	0950011e 	.inst	0x0950011e ; undefined
    49a4:	009fa803 	.inst	0x009fa803 ; undefined
    49a8:	00000003 	.inst	0x00000003 ; undefined
    49ac:	581d0000 	ldr	x0, 3e9ac <_stack_size+0x3d9ac>
    49b0:	00030033 	.inst	0x00030033 ; undefined
    49b4:	d2000000 	eor	x0, x0, #0x100000001
    49b8:	22000017 	.inst	0x22000017 ; undefined
    49bc:	1e000010 	.inst	0x1e000010 ; undefined
    49c0:	83025001 	.inst	0x83025001 ; undefined
    49c4:	641f0000 	.inst	0x641f0000 ; undefined
    49c8:	00030033 	.inst	0x00030033 ; undefined
    49cc:	66000000 	.inst	0x66000000 ; undefined
    49d0:	1e000017 	.inst	0x1e000017 ; undefined
    49d4:	03095001 	.inst	0x03095001 ; undefined
    49d8:	03009fb8 	.inst	0x03009fb8 ; undefined
    49dc:	00000000 	.inst	0x00000000 ; undefined
    49e0:	32000000 	orr	w0, w0, #0x1
    49e4:	00000417 	.inst	0x00000417 ; undefined
    49e8:	03003370 	.inst	0x03003370 ; undefined
    49ec:	00000000 	.inst	0x00000000 ; undefined
    49f0:	00000008 	.inst	0x00000008 ; undefined
    49f4:	00000000 	.inst	0x00000000 ; undefined
    49f8:	2a042701 	orr	w1, w24, w4, lsl #9
    49fc:	00000431 	.inst	0x00000431 ; undefined
    4a00:	03003384 	.inst	0x03003384 ; undefined
    4a04:	00000000 	.inst	0x00000000 ; undefined
    4a08:	00000450 	.inst	0x00000450 ; undefined
    4a0c:	af043501 	.inst	0xaf043501 ; undefined
    4a10:	32000010 	orr	w16, w0, #0x1
    4a14:	000003e4 	.inst	0x000003e4 ; undefined
    4a18:	030033a0 	.inst	0x030033a0 ; undefined
    4a1c:	00000000 	.inst	0x00000000 ; undefined
    4a20:	00000004 	.inst	0x00000004 ; undefined
    4a24:	00000000 	.inst	0x00000000 ; undefined
    4a28:	34032601 	cbz	w1, aee8 <_stack_size+0x9ee8>
    4a2c:	000003f1 	.inst	0x000003f1 ; undefined
    4a30:	030033b8 	.inst	0x030033b8 ; undefined
    4a34:	00000000 	.inst	0x00000000 ; undefined
    4a38:	00000480 	.inst	0x00000480 ; undefined
    4a3c:	31032d01 	adds	w1, w8, #0xcb
    4a40:	0000040a 	.inst	0x0000040a ; undefined
    4a44:	000047cd 	.inst	0x000047cd ; undefined
    4a48:	0003fe31 	.inst	0x0003fe31 ; undefined
    4a4c:	0047f300 	.inst	0x0047f300 ; undefined
    4a50:	2a000000 	orr	w0, w0, w0
    4a54:	000003f1 	.inst	0x000003f1 ; undefined
    4a58:	030033f8 	.inst	0x030033f8 ; undefined
    4a5c:	00000000 	.inst	0x00000000 ; undefined
    4a60:	000004c0 	.inst	0x000004c0 ; undefined
    4a64:	da043e01 	.inst	0xda043e01 ; undefined
    4a68:	31000010 	adds	w16, w0, #0x0
    4a6c:	0000040a 	.inst	0x0000040a ; undefined
    4a70:	00004817 	.inst	0x00004817 ; undefined
    4a74:	0003fe31 	.inst	0x0003fe31 ; undefined
    4a78:	00483a00 	.inst	0x00483a00 ; undefined
    4a7c:	24330000 	.inst	0x24330000 ; undefined
    4a80:	30000004 	adr	x4, 4a81 <_stack_size+0x3a81>
    4a84:	00030034 	.inst	0x00030034 ; undefined
    4a88:	f0000000 	adrp	x0, 7000 <_stack_size+0x6000>
    4a8c:	01000004 	.inst	0x01000004 ; undefined
    4a90:	ec240427 	.inst	0xec240427 ; undefined
    4a94:	00030033 	.inst	0x00030033 ; undefined
    4a98:	37000000 	tbnz	w0, #0, 4a98 <_stack_size+0x3a98>
    4a9c:	24000006 	.inst	0x24000006 ; undefined
    4aa0:	030033f4 	.inst	0x030033f4 ; undefined
    4aa4:	00000000 	.inst	0x00000000 ; undefined
    4aa8:	000009da 	.inst	0x000009da ; undefined
    4aac:	10b72d00 	adr	x0, fffffffffff7304c <SMC_ID_HW_RSA+0xffffffff7bf63145>
    4ab0:	27010000 	.inst	0x27010000 ; undefined
    4ab4:	00003705 	.inst	0x00003705 ; undefined
    4ab8:	00347000 	.inst	0x00347000 ; NYI
    4abc:	00000003 	.inst	0x00000003 ; undefined
    4ac0:	00012800 	.inst	0x00012800 ; undefined
    4ac4:	00000000 	.inst	0x00000000 ; undefined
    4ac8:	099c0100 	.inst	0x099c0100 ; undefined
    4acc:	1a000012 	adc	w18, w0, w0
    4ad0:	000012f4 	.inst	0x000012f4 ; undefined
    4ad4:	85052701 	.inst	0x85052701 ; undefined
    4ad8:	5e000002 	sha1c	q2, s0, v0.4s
    4adc:	35000048 	cbnz	w8, 4ae4 <_stack_size+0x3ae4>
    4ae0:	00667562 	.inst	0x00667562 ; undefined
    4ae4:	09052701 	.inst	0x09052701 ; undefined
    4ae8:	cf000012 	.inst	0xcf000012 ; undefined
    4aec:	1a000048 	adc	w8, w2, w0
    4af0:	00001f86 	.inst	0x00001f86 ; undefined
    4af4:	85052701 	.inst	0x85052701 ; undefined
    4af8:	18000002 	ldr	w2, 4af8 <_stack_size+0x3af8>
    4afc:	1a000049 	adc	w9, w2, w0
    4b00:	0000109b 	.inst	0x0000109b ; undefined
    4b04:	0f052701 	movi	v1.2s, #0xb8, lsl #8
    4b08:	51000012 	sub	w18, w0, #0x0
    4b0c:	2e000049 	ext	v9.8b, v2.8b, v0.8b, #0
    4b10:	00000fb8 	.inst	0x00000fb8 ; undefined
    4b14:	85052901 	.inst	0x85052901 ; undefined
    4b18:	c6000002 	.inst	0xc6000002 ; undefined
    4b1c:	30000049 	adr	x9, 4b25 <_stack_size+0x3b25>
    4b20:	00736572 	.inst	0x00736572 ; undefined
    4b24:	90052a01 	adrp	x1, a544000 <_stack_base+0x7536880>
    4b28:	fc000002 	stur	d2, [x0]
    4b2c:	2a000049 	orr	w9, w2, w0
    4b30:	0000043a 	.inst	0x0000043a ; undefined
    4b34:	030034e0 	.inst	0x030034e0 ; undefined
    4b38:	00000000 	.inst	0x00000000 ; undefined
    4b3c:	00000520 	.inst	0x00000520 ; undefined
    4b40:	ee055001 	.inst	0xee055001 ; undefined
    4b44:	34000011 	cbz	w17, 4b44 <_stack_size+0x3b44>
    4b48:	000003a4 	.inst	0x000003a4 ; undefined
    4b4c:	030034e0 	.inst	0x030034e0 ; undefined
    4b50:	00000000 	.inst	0x00000000 ; undefined
    4b54:	00000520 	.inst	0x00000520 ; undefined
    4b58:	3102de01 	adds	w1, w16, #0xb7
    4b5c:	000003c1 	.inst	0x000003c1 ; undefined
    4b60:	00004a1f 	.inst	0x00004a1f ; undefined
    4b64:	0003b531 	.inst	0x0003b531 ; undefined
    4b68:	004a5700 	.inst	0x004a5700 ; undefined
    4b6c:	05202c00 	.inst	0x05202c00 ; undefined
    4b70:	cd260000 	.inst	0xcd260000 ; undefined
    4b74:	8f000003 	.inst	0x8f000003 ; undefined
    4b78:	3300004a 	bfxil	w10, w2, #0, #1
    4b7c:	00000397 	.inst	0x00000397 ; undefined
    4b80:	030034e0 	.inst	0x030034e0 ; undefined
    4b84:	00000000 	.inst	0x00000000 ; undefined
    4b88:	00000560 	.inst	0x00000560 ; undefined
    4b8c:	0002c501 	.inst	0x0002c501 ; undefined
    4b90:	0c1f0000 	.inst	0x0c1f0000 ; undefined
    4b94:	00030035 	.inst	0x00030035 ; undefined
    4b98:	34000000 	cbz	w0, 4b98 <_stack_size+0x3b98>
    4b9c:	1e00000c 	.inst	0x1e00000c ; undefined
    4ba0:	83025001 	.inst	0x83025001 ; undefined
    4ba4:	51011e00 	sub	w0, w16, #0x47
    4ba8:	00008c02 	.inst	0x00008c02 ; undefined
    4bac:	7a080d00 	.inst	0x7a080d00 ; undefined
    4bb0:	0d000002 	st1	{v2.b}[0], [x0]
    4bb4:	00028508 	.inst	0x00028508 ; undefined
    4bb8:	0ece1000 	.inst	0x0ece1000 ; undefined
    4bbc:	56010000 	.inst	0x56010000 ; undefined
    4bc0:	00003704 	.inst	0x00003704 ; undefined
    4bc4:	12570100 	.inst	0x12570100 ; undefined
    4bc8:	30110000 	adr	x0, 26bc9 <_stack_size+0x25bc9>
    4bcc:	01000011 	.inst	0x01000011 ; undefined
    4bd0:	00530456 	.inst	0x00530456 ; undefined
    4bd4:	57110000 	.inst	0x57110000 ; undefined
    4bd8:	0100000e 	.inst	0x0100000e ; undefined
    4bdc:	00530456 	.inst	0x00530456 ; undefined
    4be0:	30120000 	adr	x0, 28be1 <_stack_size+0x27be1>
    4be4:	0100000f 	.inst	0x0100000f ; undefined
    4be8:	02850458 	.inst	0x02850458 ; undefined
    4bec:	e1120000 	.inst	0xe1120000 ; undefined
    4bf0:	0100000e 	.inst	0x0100000e ; undefined
    4bf4:	02850459 	.inst	0x02850459 ; undefined
    4bf8:	2d000000 	stp	s0, s0, [x0]
    4bfc:	0000103f 	.inst	0x0000103f ; undefined
    4c00:	37055f01 	tbnz	w1, #0, fffffffffffff7e0 <SMC_ID_HW_RSA+0xffffffff7bfef8d9>
    4c04:	98000000 	ldrsw	x0, 4c04 <_stack_size+0x3c04>
    4c08:	00030035 	.inst	0x00030035 ; undefined
    4c0c:	b8000000 	stur	w0, [x0]
    4c10:	00000004 	.inst	0x00000004 ; undefined
    4c14:	01000000 	.inst	0x01000000 ; undefined
    4c18:	0015479c 	.inst	0x0015479c ; undefined
    4c1c:	12f41a00 	.inst	0x12f41a00 ; undefined
    4c20:	5f010000 	.inst	0x5f010000 ; undefined
    4c24:	00028505 	.inst	0x00028505 ; undefined
    4c28:	004adc00 	.inst	0x004adc00 ; undefined
    4c2c:	75623500 	.inst	0x75623500 ; undefined
    4c30:	5f010066 	.inst	0x5f010066 ; undefined
    4c34:	00120905 	.inst	0x00120905 ; undefined
    4c38:	004b4d00 	.inst	0x004b4d00 ; undefined
    4c3c:	1f861a00 	.inst	0x1f861a00 ; undefined
    4c40:	5f010000 	.inst	0x5f010000 ; undefined
    4c44:	00028505 	.inst	0x00028505 ; undefined
    4c48:	004b9600 	.inst	0x004b9600 ; undefined
    4c4c:	109b1a00 	adr	x0, fffffffffff3af8c <SMC_ID_HW_RSA+0xffffffff7bf2b085>
    4c50:	5f010000 	.inst	0x5f010000 ; undefined
    4c54:	00028505 	.inst	0x00028505 ; undefined
    4c58:	004bcf00 	.inst	0x004bcf00 ; undefined
    4c5c:	12451a00 	.inst	0x12451a00 ; undefined
    4c60:	5f010000 	.inst	0x5f010000 ; undefined
    4c64:	00027a05 	.inst	0x00027a05 ; undefined
    4c68:	004c4400 	.inst	0x004c4400 ; undefined
    4c6c:	0fb82e00 	.inst	0x0fb82e00 ; undefined
    4c70:	61010000 	.inst	0x61010000 ; undefined
    4c74:	00028505 	.inst	0x00028505 ; undefined
    4c78:	004c9000 	.inst	0x004c9000 ; undefined
    4c7c:	65721600 	.inst	0x65721600 ; undefined
    4c80:	62010073 	.inst	0x62010073 ; undefined
    4c84:	00029005 	.inst	0x00029005 ; undefined
    4c88:	00693000 	.inst	0x00693000 ; undefined
    4c8c:	85056301 	.inst	0x85056301 ; undefined
    4c90:	c6000002 	.inst	0xc6000002 ; undefined
    4c94:	2e00004c 	ext	v12.8b, v2.8b, v0.8b, #0
    4c98:	000011bf 	.inst	0x000011bf ; undefined
    4c9c:	7a056401 	.inst	0x7a056401 ; undefined
    4ca0:	24000002 	.inst	0x24000002 ; undefined
    4ca4:	2a00004d 	orr	w13, w2, w0
    4ca8:	000004d0 	.inst	0x000004d0 ; undefined
    4cac:	0300360c 	.inst	0x0300360c ; undefined
    4cb0:	00000000 	.inst	0x00000000 ; undefined
    4cb4:	00000590 	.inst	0x00000590 ; undefined
    4cb8:	cc059801 	.inst	0xcc059801 ; undefined
    4cbc:	31000013 	adds	w19, w0, #0x0
    4cc0:	000004ed 	.inst	0x000004ed ; undefined
    4cc4:	00004d95 	.inst	0x00004d95 ; undefined
    4cc8:	0004e131 	.inst	0x0004e131 ; undefined
    4ccc:	004db900 	.inst	0x004db900 ; undefined
    4cd0:	05902c00 	.inst	0x05902c00 ; undefined
    4cd4:	f9260000 	str	x0, [x0,#19456]
    4cd8:	dc000004 	.inst	0xdc000004 ; undefined
    4cdc:	2600004d 	.inst	0x2600004d ; undefined
    4ce0:	00000503 	.inst	0x00000503 ; undefined
    4ce4:	00004e00 	.inst	0x00004e00 ; undefined
    4ce8:	00050f26 	.inst	0x00050f26 ; undefined
    4cec:	004e4a00 	.inst	0x004e4a00 ; undefined
    4cf0:	051b2600 	.inst	0x051b2600 ; undefined
    4cf4:	4e6e0000 	saddl2	v0.4s, v0.8h, v14.8h
    4cf8:	17330000 	b	fffffffffccc4cf8 <SMC_ID_HW_RSA+0xffffffff78cb4df1>
    4cfc:	24000004 	.inst	0x24000004 ; undefined
    4d00:	00030036 	.inst	0x00030036 ; undefined
    4d04:	e0000000 	.inst	0xe0000000 ; undefined
    4d08:	01000005 	.inst	0x01000005 ; undefined
    4d0c:	243202e9 	.inst	0x243202e9 ; undefined
    4d10:	d8000004 	prfm	pldl3keep, 4d10 <_stack_size+0x3d10>
    4d14:	00030036 	.inst	0x00030036 ; undefined
    4d18:	04000000 	.inst	0x04000000 ; undefined
    4d1c:	00000000 	.inst	0x00000000 ; undefined
    4d20:	01000000 	.inst	0x01000000 ; undefined
    4d24:	973202e9 	bl	fffffffffcc858c8 <SMC_ID_HW_RSA+0xffffffff78c759c1>
    4d28:	dc000003 	.inst	0xdc000003 ; undefined
    4d2c:	00030036 	.inst	0x00030036 ; undefined
    4d30:	04000000 	.inst	0x04000000 ; undefined
    4d34:	00000000 	.inst	0x00000000 ; undefined
    4d38:	01000000 	.inst	0x01000000 ; undefined
    4d3c:	173202f2 	b	fffffffffcc85904 <SMC_ID_HW_RSA+0xffffffff78c759fd>
    4d40:	e4000004 	.inst	0xe4000004 ; undefined
    4d44:	00030036 	.inst	0x00030036 ; undefined
    4d48:	08000000 	stxrb	w0, w0, [x0]
    4d4c:	00000000 	.inst	0x00000000 ; undefined
    4d50:	01000000 	.inst	0x01000000 ; undefined
    4d54:	243202f8 	.inst	0x243202f8 ; undefined
    4d58:	f0000004 	adrp	x4, 7000 <_stack_size+0x6000>
    4d5c:	00030036 	.inst	0x00030036 ; undefined
    4d60:	04000000 	.inst	0x04000000 ; undefined
    4d64:	00000000 	.inst	0x00000000 ; undefined
    4d68:	01000000 	.inst	0x01000000 ; undefined
    4d6c:	000002f8 	.inst	0x000002f8 ; undefined
    4d70:	00121534 	.inst	0x00121534 ; undefined
    4d74:	00362c00 	.inst	0x00362c00 ; NYI
    4d78:	00000003 	.inst	0x00000003 ; undefined
    4d7c:	00061000 	.inst	0x00061000 ; undefined
    4d80:	05990100 	.inst	0x05990100 ; undefined
    4d84:	00123231 	.inst	0x00123231 ; undefined
    4d88:	004e9400 	.inst	0x004e9400 ; undefined
    4d8c:	12263100 	and	w0, w8, #0xfc00007f
    4d90:	4f030000 	.inst	0x4f030000 ; undefined
    4d94:	102c0000 	adr	x0, 5cd94 <_stack_size+0x5bd94>
    4d98:	26000006 	.inst	0x26000006 ; undefined
    4d9c:	0000123e 	.inst	0x0000123e ; undefined
    4da0:	00004f39 	.inst	0x00004f39 ; undefined
    4da4:	00124a26 	.inst	0x00124a26 ; undefined
    4da8:	004f6000 	.inst	0x004f6000 ; undefined
    4dac:	03e43300 	.inst	0x03e43300 ; undefined
    4db0:	362c0000 	tbz	w0, #5, ffffffffffffcdb0 <SMC_ID_HW_RSA+0xffffffff7bfecea9>
    4db4:	00000300 	.inst	0x00000300 ; undefined
    4db8:	06600000 	.inst	0x06600000 ; undefined
    4dbc:	5f010000 	.inst	0x5f010000 ; undefined
    4dc0:	04173304 	.inst	0x04173304 ; undefined
    4dc4:	37280000 	tbnz	w0, #5, 4dc4 <_stack_size+0x3dc4>
    4dc8:	00000300 	.inst	0x00000300 ; undefined
    4dcc:	06900000 	.inst	0x06900000 ; undefined
    4dd0:	5c010000 	ldr	d0, 6dd0 <_stack_size+0x5dd0>
    4dd4:	04243204 	.inst	0x04243204 ; undefined
    4dd8:	37380000 	tbnz	w0, #7, 4dd8 <_stack_size+0x3dd8>
    4ddc:	00000300 	.inst	0x00000300 ; undefined
    4de0:	00080000 	.inst	0x00080000 ; undefined
    4de4:	00000000 	.inst	0x00000000 ; undefined
    4de8:	5c010000 	ldr	d0, 6de8 <_stack_size+0x5de8>
    4dec:	03f13604 	.inst	0x03f13604 ; undefined
    4df0:	37740000 	tbnz	w0, #14, ffffffffffffcdf0 <SMC_ID_HW_RSA+0xffffffff7bfecee9>
    4df4:	00000300 	.inst	0x00000300 ; undefined
    4df8:	00140000 	.inst	0x00140000 ; undefined
    4dfc:	00000000 	.inst	0x00000000 ; undefined
    4e00:	66010000 	.inst	0x66010000 ; undefined
    4e04:	00147804 	.inst	0x00147804 ; undefined
    4e08:	040a3100 	.inst	0x040a3100 ; undefined
    4e0c:	4f9c0000 	.inst	0x4f9c0000 ; undefined
    4e10:	fe310000 	.inst	0xfe310000 ; undefined
    4e14:	bf000003 	.inst	0xbf000003 ; undefined
    4e18:	0000004f 	.inst	0x0000004f ; undefined
    4e1c:	0003f12a 	.inst	0x0003f12a ; undefined
    4e20:	0039e400 	.inst	0x0039e400 ; NYI
    4e24:	00000003 	.inst	0x00000003 ; undefined
    4e28:	0006c000 	.inst	0x0006c000 ; undefined
    4e2c:	04620100 	.inst	0x04620100 ; undefined
    4e30:	000014a3 	.inst	0x000014a3 ; undefined
    4e34:	00040a31 	.inst	0x00040a31 ; undefined
    4e38:	004fe300 	.inst	0x004fe300 ; undefined
    4e3c:	03fe3100 	.inst	0x03fe3100 ; undefined
    4e40:	50090000 	adr	x0, 16e42 <_stack_size+0x15e42>
    4e44:	24000000 	.inst	0x24000000 ; undefined
    4e48:	030038e8 	.inst	0x030038e8 ; undefined
    4e4c:	00000000 	.inst	0x00000000 ; undefined
    4e50:	00001758 	.inst	0x00001758 ; undefined
    4e54:	0039401d 	.inst	0x0039401d ; NYI
    4e58:	00000003 	.inst	0x00000003 ; undefined
    4e5c:	00173400 	.inst	0x00173400 ; undefined
    4e60:	0014d300 	.inst	0x0014d300 ; undefined
    4e64:	51011e00 	sub	w0, w16, #0x47
    4e68:	1e400802 	.inst	0x1e400802 ; undefined
    4e6c:	08025201 	stxrb	w2, w1, [x16]
    4e70:	53011e40 	ubfx	w0, w18, #1, #7
    4e74:	1d003001 	.inst	0x1d003001 ; undefined
    4e78:	03003978 	.inst	0x03003978 ; undefined
    4e7c:	00000000 	.inst	0x00000000 ; undefined
    4e80:	00001766 	.inst	0x00001766 ; undefined
    4e84:	000014f2 	.inst	0x000014f2 ; undefined
    4e88:	0950011e 	.inst	0x0950011e ; undefined
    4e8c:	009fc803 	.inst	0x009fc803 ; undefined
    4e90:	00000003 	.inst	0x00000003 ; undefined
    4e94:	1c1d0000 	ldr	s0, 3ee94 <_stack_size+0x3de94>
    4e98:	0003003a 	.inst	0x0003003a ; undefined
    4e9c:	66000000 	.inst	0x66000000 ; undefined
    4ea0:	11000017 	add	w23, w0, #0x0
    4ea4:	1e000015 	.inst	0x1e000015 ; undefined
    4ea8:	03095001 	.inst	0x03095001 ; undefined
    4eac:	03009fd0 	.inst	0x03009fd0 ; undefined
    4eb0:	00000000 	.inst	0x00000000 ; undefined
    4eb4:	3a241d00 	.inst	0x3a241d00 ; undefined
    4eb8:	00000300 	.inst	0x00000300 ; undefined
    4ebc:	17d20000 	b	ffffffffff484ebc <SMC_ID_HW_RSA+0xffffffff7b474fb5>
    4ec0:	15290000 	b	4a44ec0 <_stack_base+0x1a37740>
    4ec4:	011e0000 	.inst	0x011e0000 ; undefined
    4ec8:	008c0250 	.inst	0x008c0250 ; undefined
    4ecc:	3a301f00 	.inst	0x3a301f00 ; undefined
    4ed0:	00000300 	.inst	0x00000300 ; undefined
    4ed4:	17660000 	b	fffffffffd984ed4 <SMC_ID_HW_RSA+0xffffffff79974fcd>
    4ed8:	011e0000 	.inst	0x011e0000 ; undefined
    4edc:	d8030950 	prfm	pstl1keep, b004 <_stack_size+0xa004>
    4ee0:	0003009f 	.inst	0x0003009f ; undefined
    4ee4:	00000000 	.inst	0x00000000 ; undefined
    4ee8:	2d000000 	stp	s0, s0, [x0]
    4eec:	0000115d 	.inst	0x0000115d ; undefined
    4ef0:	3705a901 	tbnz	w1, #0, 410 <MPIDR_EL1_AFF3_LSB+0x3f0>
    4ef4:	50000000 	adr	x0, 4ef6 <_stack_size+0x3ef6>
    4ef8:	0003003a 	.inst	0x0003003a ; undefined
    4efc:	68000000 	.inst	0x68000000 ; undefined
    4f00:	00000001 	.inst	0x00000001 ; undefined
    4f04:	01000000 	.inst	0x01000000 ; undefined
    4f08:	00164a9c 	.inst	0x00164a9c ; undefined
    4f0c:	0e941a00 	uzp1	v0.2s, v16.2s, v20.2s
    4f10:	a9010000 	stp	x0, x0, [x0,#16]
    4f14:	00028505 	.inst	0x00028505 ; undefined
    4f18:	00502d00 	.inst	0x00502d00 ; undefined
    4f1c:	0f302e00 	.inst	0x0f302e00 ; undefined
    4f20:	ab010000 	adds	x0, x0, x1
    4f24:	00028505 	.inst	0x00028505 ; undefined
    4f28:	00508c00 	.inst	0x00508c00 ; undefined
    4f2c:	3b301d00 	.inst	0x3b301d00 ; undefined
    4f30:	00000300 	.inst	0x00000300 ; undefined
    4f34:	17340000 	b	fffffffffcd04f34 <SMC_ID_HW_RSA+0xffffffff78cf502d>
    4f38:	15ac0000 	b	6b04f38 <_stack_base+0x3af77b8>
    4f3c:	011e0000 	.inst	0x011e0000 ; undefined
    4f40:	40080251 	.inst	0x40080251 ; undefined
    4f44:	0252011e 	.inst	0x0252011e ; undefined
    4f48:	011e4008 	.inst	0x011e4008 ; undefined
    4f4c:	00300153 	.inst	0x00300153 ; NYI
    4f50:	003b681d 	.inst	0x003b681d ; NYI
    4f54:	00000003 	.inst	0x00000003 ; undefined
    4f58:	00176600 	.inst	0x00176600 ; undefined
    4f5c:	0015cb00 	.inst	0x0015cb00 ; undefined
    4f60:	50011e00 	adr	x0, 7322 <_stack_size+0x6322>
    4f64:	9fe00309 	.inst	0x9fe00309 ; undefined
    4f68:	00000300 	.inst	0x00000300 ; undefined
    4f6c:	24000000 	.inst	0x24000000 ; undefined
    4f70:	03003b78 	.inst	0x03003b78 ; undefined
    4f74:	00000000 	.inst	0x00000000 ; undefined
    4f78:	000017d2 	.inst	0x000017d2 ; undefined
    4f7c:	003b841d 	.inst	0x003b841d ; NYI
    4f80:	00000003 	.inst	0x00000003 ; undefined
    4f84:	00176600 	.inst	0x00176600 ; undefined
    4f88:	0015f700 	.inst	0x0015f700 ; undefined
    4f8c:	50011e00 	adr	x0, 734e <_stack_size+0x634e>
    4f90:	9fd80309 	.inst	0x9fd80309 ; undefined
    4f94:	00000300 	.inst	0x00000300 ; undefined
    4f98:	1d000000 	.inst	0x1d000000 ; undefined
    4f9c:	03003b9c 	.inst	0x03003b9c ; undefined
    4fa0:	00000000 	.inst	0x00000000 ; undefined
    4fa4:	00001766 	.inst	0x00001766 ; undefined
    4fa8:	00001616 	.inst	0x00001616 ; undefined
    4fac:	0950011e 	.inst	0x0950011e ; undefined
    4fb0:	009fe803 	.inst	0x009fe803 ; undefined
    4fb4:	00000003 	.inst	0x00000003 ; undefined
    4fb8:	a41d0000 	.inst	0xa41d0000 ; undefined
    4fbc:	0003003b 	.inst	0x0003003b ; undefined
    4fc0:	d2000000 	eor	x0, x0, #0x100000001
    4fc4:	2e000017 	ext	v23.8b, v0.8b, v0.8b, #0
    4fc8:	1e000016 	.inst	0x1e000016 ; undefined
    4fcc:	83025001 	.inst	0x83025001 ; undefined
    4fd0:	b01f0000 	adrp	x0, 3e005000 <_stack_base+0x3aff7880>
    4fd4:	0003003b 	.inst	0x0003003b ; undefined
    4fd8:	66000000 	.inst	0x66000000 ; undefined
    4fdc:	1e000017 	.inst	0x1e000017 ; undefined
    4fe0:	03095001 	.inst	0x03095001 ; undefined
    4fe4:	03009fd8 	.inst	0x03009fd8 ; undefined
    4fe8:	00000000 	.inst	0x00000000 ; undefined
    4fec:	8c090000 	.inst	0x8c090000 ; undefined
    4ff0:	5a000003 	sbc	w3, w0, w0
    4ff4:	0a000016 	and	w22, w0, w0
    4ff8:	000001e8 	.inst	0x000001e8 ; undefined
    4ffc:	db370045 	.inst	0xdb370045 ; undefined
    5000:	06000011 	.inst	0x06000011 ; undefined
    5004:	00166597 	.inst	0x00166597 ; undefined
    5008:	164a0e00 	b	fffffffff9288808 <SMC_ID_HW_RSA+0xffffffff75278901>
    500c:	14370000 	b	dc500c <_stack_size+0xdc400c>
    5010:	0100000f 	.inst	0x0100000f ; undefined
    5014:	00028536 	.inst	0x00028536 ; undefined
    5018:	126c3700 	.inst	0x126c3700 ; undefined
    501c:	37010000 	tbnz	w0, #0, 701c <_stack_size+0x601c>
    5020:	00000285 	.inst	0x00000285 ; undefined
    5024:	000fc238 	.inst	0x000fc238 ; undefined
    5028:	532b0100 	.inst	0x532b0100 ; undefined
    502c:	09000000 	.inst	0x09000000 ; undefined
    5030:	00ad2c03 	.inst	0x00ad2c03 ; undefined
    5034:	00000003 	.inst	0x00000003 ; undefined
    5038:	11e43800 	.inst	0x11e43800 ; undefined
    503c:	29010000 	stp	w0, w0, [x0,#8]
    5040:	00000053 	.inst	0x00000053 ; undefined
    5044:	ad340309 	stp	q9, q0, [x24,#-384]
    5048:	00000300 	.inst	0x00000300 ; undefined
    504c:	5a380000 	.inst	0x5a380000 ; undefined
    5050:	0100000f 	.inst	0x0100000f ; undefined
    5054:	0000532a 	.inst	0x0000532a ; undefined
    5058:	30030900 	adr	x0, b179 <_stack_size+0xa179>
    505c:	000300ad 	.inst	0x000300ad ; undefined
    5060:	38000000 	sturb	w0, [x0]
    5064:	000012eb 	.inst	0x000012eb ; undefined
    5068:	02853101 	.inst	0x02853101 ; undefined
    506c:	03090000 	.inst	0x03090000 ; undefined
    5070:	0300ad38 	.inst	0x0300ad38 ; undefined
    5074:	00000000 	.inst	0x00000000 ; undefined
    5078:	0011cb38 	.inst	0x0011cb38 ; undefined
    507c:	532c0100 	.inst	0x532c0100 ; undefined
    5080:	09000000 	.inst	0x09000000 ; undefined
    5084:	00ad2803 	.inst	0x00ad2803 ; undefined
    5088:	00000003 	.inst	0x00000003 ; undefined
    508c:	00450900 	.inst	0x00450900 ; undefined
    5090:	16fa0000 	b	fffffffffbe85090 <SMC_ID_HW_RSA+0xffffffff77e75189>
    5094:	e8150000 	.inst	0xe8150000 ; undefined
    5098:	ff000001 	.inst	0xff000001 ; undefined
    509c:	eb38000f 	subs	x15, x0, w24, uxtb
    50a0:	0100000e 	.inst	0x0100000e ; undefined
    50a4:	0016e92d 	.inst	0x0016e92d ; undefined
    50a8:	40030900 	.inst	0x40030900 ; undefined
    50ac:	000300ad 	.inst	0x000300ad ; undefined
    50b0:	09000000 	.inst	0x09000000 ; undefined
    50b4:	00000045 	.inst	0x00000045 ; undefined
    50b8:	0000171f 	.inst	0x0000171f ; undefined
    50bc:	0001e80a 	.inst	0x0001e80a ; undefined
    50c0:	38003f00 	strb	w0, [x24,#3]!
    50c4:	00001236 	.inst	0x00001236 ; undefined
    50c8:	170f2e01 	b	fffffffffc3d08cc <SMC_ID_HW_RSA+0xffffffff783c09c5>
    50cc:	03090000 	.inst	0x03090000 ; undefined
    50d0:	0300ace8 	.inst	0x0300ace8 ; undefined
    50d4:	00000000 	.inst	0x00000000 ; undefined
    50d8:	00132439 	.inst	0x00132439 ; undefined
    50dc:	37420800 	tbnz	w0, #8, 91dc <_stack_size+0x81dc>
    50e0:	58000000 	ldr	x0, 50e0 <_stack_size+0x40e0>
    50e4:	3a000017 	adcs	w23, w0, w0
    50e8:	000003df 	.inst	0x000003df ; undefined
    50ec:	0003df3a 	.inst	0x0003df3a ; undefined
    50f0:	03df3a00 	.inst	0x03df3a00 ; undefined
    50f4:	533a0000 	.inst	0x533a0000 ; undefined
    50f8:	00000000 	.inst	0x00000000 ; undefined
    50fc:	00016b3b 	.inst	0x00016b3b ; undefined
    5100:	3b550700 	.inst	0x3b550700 ; undefined
    5104:	00000000 	.inst	0x00000000 ; undefined
    5108:	633c4d07 	.inst	0x633c4d07 ; undefined
    510c:	09000005 	.inst	0x09000005 ; undefined
    5110:	1778012c 	b	fffffffffde055c0 <SMC_ID_HW_RSA+0xffffffff79df56b9>
    5114:	7a3a0000 	.inst	0x7a3a0000 ; undefined
    5118:	00000003 	.inst	0x00000003 ; undefined
    511c:	00105239 	.inst	0x00105239 ; undefined
    5120:	85520800 	.inst	0x85520800 ; undefined
    5124:	97000002 	bl	fffffffffc00512c <SMC_ID_HW_RSA+0xffffffff77ff5225>
    5128:	3a000017 	adcs	w23, w0, w0
    512c:	00001797 	.inst	0x00001797 ; undefined
    5130:	0017973a 	.inst	0x0017973a ; undefined
    5134:	02853a00 	.inst	0x02853a00 ; undefined
    5138:	3d000000 	str	b0, [x0]
    513c:	12c83908 	.inst	0x12c83908 ; undefined
    5140:	40010000 	.inst	0x40010000 ; undefined
    5144:	00000053 	.inst	0x00000053 ; undefined
    5148:	000017b3 	.inst	0x000017b3 ; undefined
    514c:	0000533a 	.inst	0x0000533a ; undefined
    5150:	00533a00 	.inst	0x00533a00 ; undefined
    5154:	39000000 	strb	w0, [x0]
    5158:	00000cc6 	.inst	0x00000cc6 ; undefined
    515c:	02855308 	.inst	0x02855308 ; undefined
    5160:	17d20000 	b	ffffffffff485160 <SMC_ID_HW_RSA+0xffffffff7b475259>
    5164:	973a0000 	bl	fffffffffce85164 <SMC_ID_HW_RSA+0xffffffff78e7525d>
    5168:	3a000017 	adcs	w23, w0, w0
    516c:	00001797 	.inst	0x00001797 ; undefined
    5170:	0002853a 	.inst	0x0002853a ; undefined
    5174:	343c0000 	cbz	w0, 7d174 <_stack_size+0x7c174>
    5178:	0900000a 	.inst	0x0900000a ; undefined
    517c:	17e4012e 	b	ffffffffff905634 <SMC_ID_HW_RSA+0xffffffff7b8f572d>
    5180:	533a0000 	.inst	0x533a0000 ; undefined
    5184:	00000000 	.inst	0x00000000 ; undefined
    5188:	000cd23b 	.inst	0x000cd23b ; undefined
    518c:	3b6b0800 	.inst	0x3b6b0800 ; undefined
    5190:	0000038a 	.inst	0x0000038a ; undefined
    5194:	2e006c08 	.inst	0x2e006c08 ; undefined
    5198:	04000008 	.inst	0x04000008 ; undefined
    519c:	00123000 	.inst	0x00123000 ; undefined
    51a0:	89010800 	.inst	0x89010800 ; undefined
    51a4:	01000001 	.inst	0x01000001 ; undefined
    51a8:	000013f7 	.inst	0x000013f7 ; undefined
    51ac:	03003bb8 	.inst	0x03003bb8 ; undefined
    51b0:	00000000 	.inst	0x00000000 ; undefined
    51b4:	000004f8 	.inst	0x000004f8 ; undefined
    51b8:	00000000 	.inst	0x00000000 ; undefined
    51bc:	00001a25 	.inst	0x00001a25 ; undefined
    51c0:	00060102 	.inst	0x00060102 ; undefined
    51c4:	02000001 	.inst	0x02000001 ; undefined
    51c8:	002b0502 	.inst	0x002b0502 ; NYI
    51cc:	04030000 	.inst	0x04030000 ; undefined
    51d0:	746e6905 	.inst	0x746e6905 ; undefined
    51d4:	05080200 	.inst	0x05080200 ; undefined
    51d8:	000000a9 	.inst	0x000000a9 ; undefined
    51dc:	fe080102 	.inst	0xfe080102 ; undefined
    51e0:	02000000 	.inst	0x02000000 ; undefined
    51e4:	01310702 	.inst	0x01310702 ; undefined
    51e8:	04020000 	.inst	0x04020000 ; undefined
    51ec:	00011607 	.inst	0x00011607 ; undefined
    51f0:	07080200 	.inst	0x07080200 ; undefined
    51f4:	00000111 	.inst	0x00000111 ; undefined
    51f8:	00008504 	.inst	0x00008504 ; undefined
    51fc:	5a7a0200 	.inst	0x5a7a0200 ; undefined
    5200:	04000000 	.inst	0x04000000 ; undefined
    5204:	00000604 	.inst	0x00000604 ; undefined
    5208:	00450d03 	.inst	0x00450d03 ; undefined
    520c:	3f040000 	.inst	0x3f040000 ; undefined
    5210:	03000000 	.inst	0x03000000 ; undefined
    5214:	00005311 	.inst	0x00005311 ; undefined
    5218:	07080200 	.inst	0x07080200 ; undefined
    521c:	0000010c 	.inst	0x0000010c ; undefined
    5220:	a4050802 	.inst	0xa4050802 ; undefined
    5224:	02000000 	.inst	0x02000000 ; undefined
    5228:	059d0708 	.inst	0x059d0708 ; undefined
    522c:	01020000 	.inst	0x01020000 ; undefined
    5230:	00010708 	.inst	0x00010708 ; undefined
    5234:	6c080500 	stnp	d0, d1, [x8,#128]
    5238:	05000000 	.inst	0x05000000 ; undefined
    523c:	00007708 	.inst	0x00007708 ; undefined
    5240:	04b10600 	.inst	0x04b10600 ; undefined
    5244:	40010000 	.inst	0x40010000 ; undefined
    5248:	00000037 	.inst	0x00000037 ; undefined
    524c:	03003bb8 	.inst	0x03003bb8 ; undefined
    5250:	00000000 	.inst	0x00000000 ; undefined
    5254:	000000c4 	.inst	0x000000c4 ; undefined
    5258:	00000000 	.inst	0x00000000 ; undefined
    525c:	01979c01 	.inst	0x01979c01 ; undefined
    5260:	72070000 	ands	w0, w0, #0x2000000
    5264:	01007465 	.inst	0x01007465 ; undefined
    5268:	00003742 	.inst	0x00003742 ; undefined
    526c:	e7080000 	.inst	0xe7080000 ; undefined
    5270:	01000014 	.inst	0x01000014 ; undefined
    5274:	00005344 	.inst	0x00005344 ; undefined
    5278:	03000000 	.inst	0x03000000 ; undefined
    527c:	05c40900 	.inst	0x05c40900 ; undefined
    5280:	45010000 	.inst	0x45010000 ; undefined
    5284:	00000053 	.inst	0x00000053 ; undefined
    5288:	0013d80a 	.inst	0x0013d80a ; undefined
    528c:	53460100 	.inst	0x53460100 ; undefined
    5290:	b3000000 	.inst	0xb3000000 ; undefined
    5294:	0a000050 	and	w16, w2, w0
    5298:	000013de 	.inst	0x000013de ; undefined
    529c:	00534601 	.inst	0x00534601 ; undefined
    52a0:	51360000 	sub	w0, w0, #0xd80
    52a4:	280b0000 	stnp	w0, w0, [x0,#88]
    52a8:	0003003c 	.inst	0x0003003c ; undefined
    52ac:	3c000000 	stur	b0, [x0]
    52b0:	00000000 	.inst	0x00000000 ; undefined
    52b4:	6c000000 	stnp	d0, d0, [x0]
    52b8:	0c000001 	st4	{v1.8b-v4.8b}, [x0]
    52bc:	00000c84 	.inst	0x00000c84 ; undefined
    52c0:	00376001 	.inst	0x00376001 ; NYI
    52c4:	01350000 	.inst	0x01350000 ; undefined
    52c8:	000d0000 	.inst	0x000d0000 ; undefined
    52cc:	003c2c0e 	.inst	0x003c2c0e ; NYI
    52d0:	00000003 	.inst	0x00000003 ; undefined
    52d4:	0007be00 	.inst	0x0007be00 ; undefined
    52d8:	3c540f00 	ldr	b0, [x24,#-192]!
    52dc:	00000300 	.inst	0x00000300 ; undefined
    52e0:	07c50000 	.inst	0x07c50000 ; undefined
    52e4:	015e0000 	.inst	0x015e0000 ; undefined
    52e8:	01100000 	.inst	0x01100000 ; undefined
    52ec:	10300150 	adr	x16, 65314 <_stack_size+0x64314>
    52f0:	3a015101 	.inst	0x3a015101 ; undefined
    52f4:	3c5c0e00 	ldr	b0, [x16,#-64]!
    52f8:	00000300 	.inst	0x00000300 ; undefined
    52fc:	07be0000 	.inst	0x07be0000 ; undefined
    5300:	0f000000 	.inst	0x0f000000 ; undefined
    5304:	03003bcc 	.inst	0x03003bcc ; undefined
    5308:	00000000 	.inst	0x00000000 ; undefined
    530c:	000007d6 	.inst	0x000007d6 ; undefined
    5310:	00000183 	.inst	0x00000183 ; undefined
    5314:	01510110 	.inst	0x01510110 ; undefined
    5318:	e011004d 	.inst	0xe011004d ; undefined
    531c:	0003003b 	.inst	0x0003003b ; undefined
    5320:	d6000000 	.inst	0xd6000000 ; undefined
    5324:	10000007 	adr	x7, 5324 <_stack_size+0x4324>
    5328:	4e015101 	tbx	v1.16b, {v8.16b-v10.16b}, v1.16b
    532c:	5c060000 	ldr	d0, 1132c <_stack_size+0x1032c>
    5330:	01000014 	.inst	0x01000014 ; undefined
    5334:	000037a5 	.inst	0x000037a5 ; undefined
    5338:	003c7c00 	.inst	0x003c7c00 ; NYI
    533c:	00000003 	.inst	0x00000003 ; undefined
    5340:	00004c00 	.inst	0x00004c00 ; undefined
    5344:	00000000 	.inst	0x00000000 ; undefined
    5348:	349c0100 	cbz	w0, fffffffffff3d368 <SMC_ID_HW_RSA+0xffffffff7bf2d461>
    534c:	12000002 	and	w2, w0, #0x1
    5350:	03003c9c 	.inst	0x03003c9c ; undefined
    5354:	00000000 	.inst	0x00000000 ; undefined
    5358:	00000024 	.inst	0x00000024 ; undefined
    535c:	00000000 	.inst	0x00000000 ; undefined
    5360:	0005630c 	.inst	0x0005630c ; undefined
    5364:	37ac0100 	tbnz	w0, #21, ffffffffffffd384 <SMC_ID_HW_RSA+0xffffffff7bfed47d>
    5368:	da000000 	sbc	x0, x0, x0
    536c:	0d000001 	st1	{v1.b}[0], [x0]
    5370:	0a340c00 	bic	w0, w0, w20, lsl #3
    5374:	ad010000 	stp	q0, q0, [x0,#32]
    5378:	00000037 	.inst	0x00000037 ; undefined
    537c:	000001eb 	.inst	0x000001eb ; undefined
    5380:	a80f000d 	stnp	x13, x0, [x0,#240]
    5384:	0003003c 	.inst	0x0003003c ; undefined
    5388:	f0000000 	adrp	x0, 8000 <_stack_size+0x7000>
    538c:	0a000007 	and	w7, w0, w0
    5390:	10000002 	adr	x2, 5390 <_stack_size+0x4390>
    5394:	03095001 	.inst	0x03095001 ; undefined
    5398:	03009ff0 	.inst	0x03009ff0 ; undefined
    539c:	00000000 	.inst	0x00000000 ; undefined
    53a0:	3cb00e00 	.inst	0x3cb00e00 ; undefined
    53a4:	00000300 	.inst	0x00000300 ; undefined
    53a8:	08010000 	stxrb	w1, w0, [x0]
    53ac:	bc110000 	stur	s0, [x0,#-240]
    53b0:	0003003c 	.inst	0x0003003c ; undefined
    53b4:	f0000000 	adrp	x0, 8000 <_stack_size+0x7000>
    53b8:	10000007 	adr	x7, 53b8 <_stack_size+0x43b8>
    53bc:	03095001 	.inst	0x03095001 ; undefined
    53c0:	03009e58 	.inst	0x03009e58 ; undefined
    53c4:	00000000 	.inst	0x00000000 ; undefined
    53c8:	13000000 	sbfx	w0, w0, #0, #1
    53cc:	00001376 	.inst	0x00001376 ; undefined
    53d0:	77012001 	.inst	0x77012001 ; undefined
    53d4:	c8000000 	stxr	w0, x0, [x0]
    53d8:	0003003c 	.inst	0x0003003c ; undefined
    53dc:	98000000 	ldrsw	x0, 53dc <_stack_size+0x43dc>
    53e0:	00000000 	.inst	0x00000000 ; undefined
    53e4:	01000000 	.inst	0x01000000 ; undefined
    53e8:	0002d19c 	.inst	0x0002d19c ; undefined
    53ec:	13c51400 	.inst	0x13c51400 ; undefined
    53f0:	20010000 	.inst	0x20010000 ; undefined
    53f4:	00007701 	.inst	0x00007701 ; undefined
    53f8:	0051a600 	.inst	0x0051a600 ; undefined
    53fc:	74701500 	.inst	0x74701500 ; undefined
    5400:	20010072 	.inst	0x20010072 ; undefined
    5404:	00009e01 	.inst	0x00009e01 ; undefined
    5408:	0051df00 	.inst	0x0051df00 ; undefined
    540c:	6e631500 	urhadd	v0.8h, v8.8h, v3.8h
    5410:	20010074 	.inst	0x20010074 ; undefined
    5414:	00007701 	.inst	0x00007701 ; undefined
    5418:	00521800 	.inst	0x00521800 ; undefined
    541c:	00691600 	.inst	0x00691600 ; undefined
    5420:	77012201 	.inst	0x77012201 ; undefined
    5424:	51000000 	sub	w0, w0, #0x0
    5428:	17000052 	b	fffffffffc005570 <SMC_ID_HW_RSA+0xffffffff77ff5669>
    542c:	0000144d 	.inst	0x0000144d ; undefined
    5430:	d1012301 	sub	x1, x24, #0x48
    5434:	02000002 	.inst	0x02000002 ; undefined
    5438:	6e177091 	.inst	0x6e177091 ; undefined
    543c:	01000013 	.inst	0x01000013 ; undefined
    5440:	02d10124 	.inst	0x02d10124 ; undefined
    5444:	91020000 	add	x0, x0, #0x80
    5448:	13ac1774 	.inst	0x13ac1774 ; undefined
    544c:	24010000 	.inst	0x24010000 ; undefined
    5450:	0002d101 	.inst	0x0002d101 ; undefined
    5454:	78910200 	ldursh	x0, [x16,#-240]
    5458:	0014f317 	.inst	0x0014f317 ; undefined
    545c:	01250100 	.inst	0x01250100 ; undefined
    5460:	000002d1 	.inst	0x000002d1 ; undefined
    5464:	007c9102 	.inst	0x007c9102 ; undefined
    5468:	00007718 	.inst	0x00007718 ; undefined
    546c:	14ce0600 	b	3386c6c <_stack_base+0x3794ec>
    5470:	8a010000 	and	x0, x0, x1
    5474:	00000037 	.inst	0x00000037 ; undefined
    5478:	03003d60 	.inst	0x03003d60 ; undefined
    547c:	00000000 	.inst	0x00000000 ; undefined
    5480:	00000094 	.inst	0x00000094 ; undefined
    5484:	00000000 	.inst	0x00000000 ; undefined
    5488:	03819c01 	.inst	0x03819c01 ; undefined
    548c:	bb190000 	.inst	0xbb190000 ; undefined
    5490:	01000009 	.inst	0x01000009 ; undefined
    5494:	0000378a 	.inst	0x0000378a ; undefined
    5498:	0052a900 	.inst	0x0052a900 ; undefined
    549c:	0aa50a00 	bic	w0, w16, w5, asr #2
    54a0:	8c010000 	.inst	0x8c010000 ; undefined
    54a4:	00000037 	.inst	0x00000037 ; undefined
    54a8:	000052f5 	.inst	0x000052f5 ; undefined
    54ac:	0013c50a 	.inst	0x0013c50a ; undefined
    54b0:	378c0100 	tbnz	w0, #17, ffffffffffffd4d0 <SMC_ID_HW_RSA+0xffffffff7bfed5c9>
    54b4:	18000000 	ldr	w0, 54b4 <_stack_size+0x44b4>
    54b8:	1a000053 	adc	w19, w2, w0
    54bc:	00001453 	.inst	0x00001453 ; undefined
    54c0:	006c8d01 	.inst	0x006c8d01 ; undefined
    54c4:	91020000 	add	x0, x0, #0x80
    54c8:	0b070c7f 	add	wzr, w3, w7, lsl #3
    54cc:	a0010000 	.inst	0xa0010000 ; undefined
    54d0:	00000037 	.inst	0x00000037 ; undefined
    54d4:	00000343 	.inst	0x00000343 ; undefined
    54d8:	880f000d 	stxr	w15, w13, [x0]
    54dc:	0003003d 	.inst	0x0003003d ; undefined
    54e0:	34000000 	cbz	w0, 54e0 <_stack_size+0x44e0>
    54e4:	68000002 	.inst	0x68000002 ; undefined
    54e8:	10000003 	adr	x3, 54e8 <_stack_size+0x44e8>
    54ec:	83045001 	.inst	0x83045001 ; undefined
    54f0:	10243300 	adr	x0, 4db50 <_stack_size+0x4cb50>
    54f4:	91025101 	add	x1, x8, #0x94
    54f8:	5201107f 	eor	wsp, w3, #0x8000000f
    54fc:	11003101 	add	w1, w8, #0xc
    5500:	03003de4 	.inst	0x03003de4 ; undefined
    5504:	00000000 	.inst	0x00000000 ; undefined
    5508:	00000812 	.inst	0x00000812 ; undefined
    550c:	01500110 	.inst	0x01500110 ; undefined
    5510:	51011030 	sub	w16, w1, #0x44
    5514:	00003501 	.inst	0x00003501 ; undefined
    5518:	0013cc06 	.inst	0x0013cc06 ; undefined
    551c:	37b30100 	tbnz	w0, #22, b53c <_stack_size+0xa53c>
    5520:	f4000000 	.inst	0xf4000000 ; undefined
    5524:	0003003d 	.inst	0x0003003d ; undefined
    5528:	70000000 	adr	x0, 552b <_stack_size+0x452b>
    552c:	00000000 	.inst	0x00000000 ; undefined
    5530:	01000000 	.inst	0x01000000 ; undefined
    5534:	0003ef9c 	.inst	0x0003ef9c ; undefined
    5538:	1e341a00 	fdiv	s0, s16, s20
    553c:	c1010000 	.inst	0xc1010000 ; undefined
    5540:	0000006c 	.inst	0x0000006c ; undefined
    5544:	0e7f9102 	sqdmlal	v2.4s, v8.4h, v31.4h
    5548:	03003e04 	.inst	0x03003e04 ; undefined
    554c:	00000000 	.inst	0x00000000 ; undefined
    5550:	00000823 	.inst	0x00000823 ; undefined
    5554:	003e140f 	.inst	0x003e140f ; NYI
    5558:	00000003 	.inst	0x00000003 ; undefined
    555c:	00023400 	.inst	0x00023400 ; undefined
    5560:	0003e100 	.inst	0x0003e100 ; undefined
    5564:	50011000 	adr	x0, 7766 <_stack_size+0x6766>
    5568:	1f600a03 	fnmadd	d3, d16, d0, d2
    556c:	02510110 	.inst	0x02510110 ; undefined
    5570:	01100083 	.inst	0x01100083 ; undefined
    5574:	00310152 	.inst	0x00310152 ; NYI
    5578:	003e640e 	.inst	0x003e640e ; NYI
    557c:	00000003 	.inst	0x00000003 ; undefined
    5580:	00082a00 	.inst	0x00082a00 ; undefined
    5584:	0a060000 	and	w0, w0, w6
    5588:	01000005 	.inst	0x01000005 ; undefined
    558c:	000037d7 	.inst	0x000037d7 ; undefined
    5590:	003e6400 	.inst	0x003e6400 ; NYI
    5594:	00000003 	.inst	0x00000003 ; undefined
    5598:	00003000 	.inst	0x00003000 ; undefined
    559c:	00000000 	.inst	0x00000000 ; undefined
    55a0:	409c0100 	.inst	0x409c0100 ; undefined
    55a4:	0a000004 	and	w4, w0, w0
    55a8:	00001e34 	.inst	0x00001e34 ; undefined
    55ac:	0045e001 	.inst	0x0045e001 ; undefined
    55b0:	53680000 	.inst	0x53680000 ; undefined
    55b4:	7c110000 	stur	h0, [x0,#-240]
    55b8:	0003003e 	.inst	0x0003003e ; undefined
    55bc:	34000000 	cbz	w0, 55bc <_stack_size+0x45bc>
    55c0:	10000002 	adr	x2, 55c0 <_stack_size+0x45c0>
    55c4:	0a035001 	and	w1, w0, w3, lsl #20
    55c8:	01102271 	.inst	0x01102271 ; undefined
    55cc:	7f910251 	.inst	0x7f910251 ; undefined
    55d0:	01520110 	.inst	0x01520110 ; undefined
    55d4:	06000031 	.inst	0x06000031 ; undefined
    55d8:	000013e4 	.inst	0x000013e4 ; undefined
    55dc:	0037ef01 	.inst	0x0037ef01 ; NYI
    55e0:	3e940000 	.inst	0x3e940000 ; undefined
    55e4:	00000300 	.inst	0x00000300 ; undefined
    55e8:	00500000 	.inst	0x00500000 ; undefined
    55ec:	00000000 	.inst	0x00000000 ; undefined
    55f0:	9c010000 	ldr	q0, 75f0 <_stack_size+0x65f0>
    55f4:	000004af 	.inst	0x000004af ; undefined
    55f8:	001e340a 	.inst	0x001e340a ; undefined
    55fc:	45f80100 	.inst	0x45f80100 ; undefined
    5600:	ae000000 	.inst	0xae000000 ; undefined
    5604:	0e000053 	tbl	v19.8b, {v2.16b}, v0.8b
    5608:	03003ea8 	.inst	0x03003ea8 ; undefined
    560c:	00000000 	.inst	0x00000000 ; undefined
    5610:	00000823 	.inst	0x00000823 ; undefined
    5614:	003eb80f 	.inst	0x003eb80f ; NYI
    5618:	00000003 	.inst	0x00000003 ; undefined
    561c:	00023400 	.inst	0x00023400 ; undefined
    5620:	0004a100 	.inst	0x0004a100 ; undefined
    5624:	50011000 	adr	x0, 7826 <_stack_size+0x6826>
    5628:	18600a03 	ldr	w3, c5768 <_stack_size+0xc4768>
    562c:	02510110 	.inst	0x02510110 ; undefined
    5630:	01100083 	.inst	0x01100083 ; undefined
    5634:	00310152 	.inst	0x00310152 ; NYI
    5638:	003ee40e 	.inst	0x003ee40e ; NYI
    563c:	00000003 	.inst	0x00000003 ; undefined
    5640:	00082a00 	.inst	0x00082a00 ; undefined
    5644:	8c130000 	.inst	0x8c130000 ; undefined
    5648:	01000013 	.inst	0x01000013 ; undefined
    564c:	0037010d 	.inst	0x0037010d ; NYI
    5650:	3ee40000 	.inst	0x3ee40000 ; undefined
    5654:	00000300 	.inst	0x00000300 ; undefined
    5658:	00400000 	.inst	0x00400000 ; undefined
    565c:	00000000 	.inst	0x00000000 ; undefined
    5660:	9c010000 	ldr	q0, 7660 <_stack_size+0x6660>
    5664:	00000520 	.inst	0x00000520 ; undefined
    5668:	001e341b 	.inst	0x001e341b ; undefined
    566c:	010f0100 	.inst	0x010f0100 ; undefined
    5670:	00000037 	.inst	0x00000037 ; undefined
    5674:	000053f0 	.inst	0x000053f0 ; undefined
    5678:	003ef40e 	.inst	0x003ef40e ; NYI
    567c:	00000003 	.inst	0x00000003 ; undefined
    5680:	00082300 	.inst	0x00082300 ; undefined
    5684:	3f040f00 	.inst	0x3f040f00 ; undefined
    5688:	00000300 	.inst	0x00000300 ; undefined
    568c:	02340000 	.inst	0x02340000 ; undefined
    5690:	05120000 	.inst	0x05120000 ; undefined
    5694:	01100000 	.inst	0x01100000 ; undefined
    5698:	600a0350 	.inst	0x600a0350 ; undefined
    569c:	51011018 	sub	w24, w0, #0x44
    56a0:	10008302 	adr	x2, 6700 <_stack_size+0x5700>
    56a4:	32015201 	orr	w1, w16, #0x800fffff
    56a8:	3f240e00 	.inst	0x3f240e00 ; undefined
    56ac:	00000300 	.inst	0x00000300 ; undefined
    56b0:	082a0000 	.inst	0x082a0000 ; undefined
    56b4:	13000000 	sbfx	w0, w0, #0, #1
    56b8:	0000139f 	.inst	0x0000139f ; undefined
    56bc:	77013801 	.inst	0x77013801 ; undefined
    56c0:	24000000 	.inst	0x24000000 ; undefined
    56c4:	0003003f 	.inst	0x0003003f ; undefined
    56c8:	78000000 	sturh	w0, [x0]
    56cc:	00000000 	.inst	0x00000000 ; undefined
    56d0:	01000000 	.inst	0x01000000 ; undefined
    56d4:	0005bb9c 	.inst	0x0005bb9c ; undefined
    56d8:	13c51400 	.inst	0x13c51400 ; undefined
    56dc:	38010000 	sturb	w0, [x0,#16]
    56e0:	00007701 	.inst	0x00007701 ; undefined
    56e4:	00542e00 	.inst	0x00542e00 ; undefined
    56e8:	74701500 	.inst	0x74701500 ; undefined
    56ec:	38010072 	sturb	w18, [x3,#16]
    56f0:	0000a401 	.inst	0x0000a401 ; undefined
    56f4:	00546700 	.inst	0x00546700 ; undefined
    56f8:	6e631500 	urhadd	v0.8h, v8.8h, v3.8h
    56fc:	38010074 	sturb	w20, [x3,#16]
    5700:	00007701 	.inst	0x00007701 ; undefined
    5704:	0054c600 	.inst	0x0054c600 ; undefined
    5708:	00691600 	.inst	0x00691600 ; undefined
    570c:	77013a01 	.inst	0x77013a01 ; undefined
    5710:	25000000 	.inst	0x25000000 ; undefined
    5714:	1b000055 	madd	w21, w2, w0, w0
    5718:	000013c0 	.inst	0x000013c0 ; undefined
    571c:	77013b01 	.inst	0x77013b01 ; undefined
    5720:	5d000000 	.inst	0x5d000000 ; undefined
    5724:	1b000055 	madd	w21, w2, w0, w0
    5728:	0000146c 	.inst	0x0000146c ; undefined
    572c:	77013c01 	.inst	0x77013c01 ; undefined
    5730:	ad000000 	stp	q0, q0, [x0]
    5734:	0e000055 	tbl	v21.8b, {v2.16b}, v0.8b
    5738:	03003f44 	.inst	0x03003f44 ; undefined
    573c:	00000000 	.inst	0x00000000 ; undefined
    5740:	00000823 	.inst	0x00000823 ; undefined
    5744:	003f9c0e 	.inst	0x003f9c0e ; NYI
    5748:	00000003 	.inst	0x00000003 ; undefined
    574c:	00082a00 	.inst	0x00082a00 ; undefined
    5750:	9d130000 	.inst	0x9d130000 ; undefined
    5754:	01000014 	.inst	0x01000014 ; undefined
    5758:	00770152 	.inst	0x00770152 ; undefined
    575c:	3f9c0000 	.inst	0x3f9c0000 ; undefined
    5760:	00000300 	.inst	0x00000300 ; undefined
    5764:	00340000 	.inst	0x00340000 ; NYI
    5768:	00000000 	.inst	0x00000000 ; undefined
    576c:	9c010000 	ldr	q0, 776c <_stack_size+0x676c>
    5770:	0000063e 	.inst	0x0000063e ; undefined
    5774:	0013c514 	.inst	0x0013c514 ; undefined
    5778:	01520100 	.inst	0x01520100 ; undefined
    577c:	00000077 	.inst	0x00000077 ; undefined
    5780:	00005613 	.inst	0x00005613 ; undefined
    5784:	00144d1b 	.inst	0x00144d1b ; undefined
    5788:	01540100 	.inst	0x01540100 ; undefined
    578c:	00000077 	.inst	0x00000077 ; undefined
    5790:	0000564c 	.inst	0x0000564c ; undefined
    5794:	0013b21b 	.inst	0x0013b21b ; undefined
    5798:	01540100 	.inst	0x01540100 ; undefined
    579c:	00000077 	.inst	0x00000077 ; undefined
    57a0:	0000569b 	.inst	0x0000569b ; undefined
    57a4:	00136e1b 	.inst	0x00136e1b ; undefined
    57a8:	01550100 	.inst	0x01550100 ; undefined
    57ac:	00000077 	.inst	0x00000077 ; undefined
    57b0:	000056d5 	.inst	0x000056d5 ; undefined
    57b4:	0013ac1b 	.inst	0x0013ac1b ; undefined
    57b8:	01550100 	.inst	0x01550100 ; undefined
    57bc:	00000077 	.inst	0x00000077 ; undefined
    57c0:	00005724 	.inst	0x00005724 ; undefined
    57c4:	0014e01b 	.inst	0x0014e01b ; undefined
    57c8:	01550100 	.inst	0x01550100 ; undefined
    57cc:	00000077 	.inst	0x00000077 ; undefined
    57d0:	00005779 	.inst	0x00005779 ; undefined
    57d4:	14b71300 	b	2dca3d4 <MPIDR_EL1_MT+0x1dca3d4>
    57d8:	61010000 	.inst	0x61010000 ; undefined
    57dc:	00007701 	.inst	0x00007701 ; undefined
    57e0:	003fd000 	.inst	0x003fd000 ; NYI
    57e4:	00000003 	.inst	0x00000003 ; undefined
    57e8:	00007400 	.inst	0x00007400 ; undefined
    57ec:	00000000 	.inst	0x00000000 ; undefined
    57f0:	f79c0100 	.inst	0xf79c0100 ; undefined
    57f4:	14000006 	b	580c <_stack_size+0x480c>
    57f8:	00001477 	.inst	0x00001477 ; undefined
    57fc:	77016101 	.inst	0x77016101 ; undefined
    5800:	b0000000 	adrp	x0, 6000 <_stack_size+0x5000>
    5804:	14000057 	b	5960 <_stack_size+0x4960>
    5808:	00001492 	.inst	0x00001492 ; undefined
    580c:	77016101 	.inst	0x77016101 ; undefined
    5810:	fc000000 	stur	d0, [x0]
    5814:	14000057 	b	5970 <_stack_size+0x4970>
    5818:	00001488 	.inst	0x00001488 ; undefined
    581c:	9e016101 	.inst	0x9e016101 ; undefined
    5820:	35000000 	cbnz	w0, 5820 <_stack_size+0x4820>
    5824:	16000058 	b	fffffffff8005984 <SMC_ID_HW_RSA+0xffffffff73ff5a7d>
    5828:	63010069 	.inst	0x63010069 ; undefined
    582c:	00007701 	.inst	0x00007701 ; undefined
    5830:	00588100 	.inst	0x00588100 ; undefined
    5834:	006a1600 	.inst	0x006a1600 ; undefined
    5838:	77016301 	.inst	0x77016301 ; undefined
    583c:	e0000000 	.inst	0xe0000000 ; undefined
    5840:	1b000058 	madd	w24, w2, w0, w0
    5844:	00001383 	.inst	0x00001383 ; undefined
    5848:	77016401 	.inst	0x77016401 ; undefined
    584c:	2a000000 	orr	w0, w0, w0
    5850:	1b000059 	madd	w25, w2, w0, w0
    5854:	00001480 	.inst	0x00001480 ; undefined
    5858:	77016401 	.inst	0x77016401 ; undefined
    585c:	78000000 	sturh	w0, [x0]
    5860:	0f000059 	.inst	0x0f000059 ; undefined
    5864:	03004028 	.inst	0x03004028 ; undefined
    5868:	00000000 	.inst	0x00000000 ; undefined
    586c:	000002d6 	.inst	0x000002d6 ; undefined
    5870:	000006e9 	.inst	0x000006e9 ; undefined
    5874:	07500110 	.inst	0x07500110 ; undefined
    5878:	00860083 	.inst	0x00860083 ; undefined
    587c:	001c3122 	.inst	0x001c3122 ; undefined
    5880:	0040441c 	.inst	0x0040441c ; undefined
    5884:	00000003 	.inst	0x00000003 ; undefined
    5888:	00019700 	.inst	0x00019700 ; undefined
    588c:	ab130000 	adds	x0, x0, x19
    5890:	01000014 	.inst	0x01000014 ; undefined
    5894:	0037018d 	.inst	0x0037018d ; NYI
    5898:	40440000 	.inst	0x40440000 ; undefined
    589c:	00000300 	.inst	0x00000300 ; undefined
    58a0:	00440000 	.inst	0x00440000 ; undefined
    58a4:	00000000 	.inst	0x00000000 ; undefined
    58a8:	9c010000 	ldr	q0, 78a8 <_stack_size+0x68a8>
    58ac:	0000075e 	.inst	0x0000075e ; undefined
    58b0:	000ce014 	.inst	0x000ce014 ; undefined
    58b4:	018d0100 	.inst	0x018d0100 ; undefined
    58b8:	00000053 	.inst	0x00000053 ; undefined
    58bc:	000059f0 	.inst	0x000059f0 ; undefined
    58c0:	0013b814 	.inst	0x0013b814 ; undefined
    58c4:	018d0100 	.inst	0x018d0100 ; undefined
    58c8:	0000075e 	.inst	0x0000075e ; undefined
    58cc:	00005a7b 	.inst	0x00005a7b ; undefined
    58d0:	0013c51b 	.inst	0x0013c51b ; undefined
    58d4:	018f0100 	.inst	0x018f0100 ; undefined
    58d8:	00000053 	.inst	0x00000053 ; undefined
    58dc:	00005ac7 	.inst	0x00005ac7 ; undefined
    58e0:	00406811 	.inst	0x00406811 ; undefined
    58e4:	00000003 	.inst	0x00000003 ; undefined
    58e8:	00052000 	.inst	0x00052000 ; undefined
    58ec:	52011000 	eor	w0, w0, #0x8000000f
    58f0:	00400802 	.inst	0x00400802 ; undefined
    58f4:	45080500 	.inst	0x45080500 ; undefined
    58f8:	13000000 	sbfx	w0, w0, #0, #1
    58fc:	000014fe 	.inst	0x000014fe ; undefined
    5900:	3701a401 	tbnz	w1, #0, 8d80 <_stack_size+0x7d80>
    5904:	88000000 	stxr	w0, w0, [x0]
    5908:	00030040 	.inst	0x00030040 ; undefined
    590c:	28000000 	stnp	w0, w0, [x0]
    5910:	00000000 	.inst	0x00000000 ; undefined
    5914:	01000000 	.inst	0x01000000 ; undefined
    5918:	0007b89c 	.inst	0x0007b89c ; undefined
    591c:	75621500 	.inst	0x75621500 ; undefined
    5920:	a4010066 	.inst	0xa4010066 ; undefined
    5924:	0007b801 	.inst	0x0007b801 ; undefined
    5928:	005aea00 	.inst	0x005aea00 ; undefined
    592c:	40a41100 	.inst	0x40a41100 ; undefined
    5930:	00000300 	.inst	0x00000300 ; undefined
    5934:	05200000 	.inst	0x05200000 ; undefined
    5938:	01100000 	.inst	0x01100000 ; undefined
    593c:	600a0350 	.inst	0x600a0350 ; undefined
    5940:	5101101e 	sub	w30, w0, #0x44
    5944:	5001f303 	adr	x3, 97a6 <_stack_size+0x87a6>
    5948:	01520110 	.inst	0x01520110 ; undefined
    594c:	05000034 	.inst	0x05000034 ; undefined
    5950:	00005308 	.inst	0x00005308 ; undefined
    5954:	016b1d00 	.inst	0x016b1d00 ; undefined
    5958:	55040000 	.inst	0x55040000 ; undefined
    595c:	000c840c 	.inst	0x000c840c ; undefined
    5960:	37600100 	tbnz	w0, #12, 5980 <_stack_size+0x4980>
    5964:	d6000000 	.inst	0xd6000000 ; undefined
    5968:	0d000007 	st1	{v7.b}[0], [x0]
    596c:	14c11e00 	b	304d16c <_stack_base+0x3f9ec>
    5970:	6e050000 	ext	v0.16b, v0.16b, v5.16b, #0
    5974:	00000037 	.inst	0x00000037 ; undefined
    5978:	000007f0 	.inst	0x000007f0 ; undefined
    597c:	0000531f 	.inst	0x0000531f ; undefined
    5980:	00531f00 	.inst	0x00531f00 ; undefined
    5984:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    5988:	00000563 	.inst	0x00000563 ; undefined
    598c:	0037ac01 	.inst	0x0037ac01 ; NYI
    5990:	08010000 	stxrb	w1, w0, [x0]
    5994:	000d0000 	.inst	0x000d0000 ; undefined
    5998:	000a340c 	.inst	0x000a340c ; undefined
    599c:	37ad0100 	tbnz	w0, #21, fffffffffffff9bc <SMC_ID_HW_RSA+0xffffffff7bfefab5>
    59a0:	12000000 	and	w0, w0, #0x1
    59a4:	0d000008 	st1	{v8.b}[0], [x0]
    59a8:	0b070c00 	add	w0, w0, w7, lsl #3
    59ac:	a0010000 	.inst	0xa0010000 ; undefined
    59b0:	00000037 	.inst	0x00000037 ; undefined
    59b4:	00000823 	.inst	0x00000823 ; undefined
    59b8:	d21d000d 	eor	x13, x0, #0x800000008
    59bc:	0500000c 	.inst	0x0500000c ; undefined
    59c0:	038a1d6b 	.inst	0x038a1d6b ; undefined
    59c4:	6c050000 	stnp	d0, d0, [x0,#80]
    59c8:	000aca00 	.inst	0x000aca00 ; undefined
    59cc:	e6000400 	.inst	0xe6000400 ; undefined
    59d0:	08000013 	stxrb	w0, w19, [x0]
    59d4:	00018901 	.inst	0x00018901 ; undefined
    59d8:	15260100 	b	4985dd8 <_stack_base+0x1978658>
    59dc:	40b00000 	.inst	0x40b00000 ; undefined
    59e0:	00000300 	.inst	0x00000300 ; undefined
    59e4:	0c840000 	st4	{v0.8b-v3.8b}, [x0], x4
    59e8:	00000000 	.inst	0x00000000 ; undefined
    59ec:	1ca90000 	ldr	s0, fffffffffff579ec <SMC_ID_HW_RSA+0xffffffff7bf47ae5>
    59f0:	01020000 	.inst	0x01020000 ; undefined
    59f4:	00010006 	.inst	0x00010006 ; undefined
    59f8:	05020200 	.inst	0x05020200 ; undefined
    59fc:	0000002b 	.inst	0x0000002b ; undefined
    5a00:	69050403 	.inst	0x69050403 ; undefined
    5a04:	0200746e 	.inst	0x0200746e ; undefined
    5a08:	00a90508 	.inst	0x00a90508 ; undefined
    5a0c:	01020000 	.inst	0x01020000 ; undefined
    5a10:	0000fe08 	.inst	0x0000fe08 ; undefined
    5a14:	07020200 	.inst	0x07020200 ; undefined
    5a18:	00000131 	.inst	0x00000131 ; undefined
    5a1c:	16070402 	b	fffffffff81c6a24 <SMC_ID_HW_RSA+0xffffffff741b6b1d>
    5a20:	02000001 	.inst	0x02000001 ; undefined
    5a24:	01110708 	.inst	0x01110708 ; undefined
    5a28:	85040000 	.inst	0x85040000 ; undefined
    5a2c:	02000000 	.inst	0x02000000 ; undefined
    5a30:	00005a7a 	.inst	0x00005a7a ; undefined
    5a34:	003f0400 	.inst	0x003f0400 ; NYI
    5a38:	11030000 	add	w0, w0, #0xc0
    5a3c:	00000053 	.inst	0x00000053 ; undefined
    5a40:	0c070802 	.inst	0x0c070802 ; undefined
    5a44:	02000001 	.inst	0x02000001 ; undefined
    5a48:	00a40508 	.inst	0x00a40508 ; undefined
    5a4c:	0e050000 	tbl	v0.8b, {v0.16b}, v5.8b
    5a50:	01000015 	.inst	0x01000015 ; undefined
    5a54:	00370174 	.inst	0x00370174 ; NYI
    5a58:	40b00000 	.inst	0x40b00000 ; undefined
    5a5c:	00000300 	.inst	0x00000300 ; undefined
    5a60:	01300000 	.inst	0x01300000 ; undefined
    5a64:	00000000 	.inst	0x00000000 ; undefined
    5a68:	9c010000 	ldr	q0, 7a68 <_stack_size+0x6a68>
    5a6c:	00000140 	.inst	0x00000140 ; undefined
    5a70:	0015ee06 	.inst	0x0015ee06 ; undefined
    5a74:	01740100 	.inst	0x01740100 ; undefined
    5a78:	00000053 	.inst	0x00000053 ; undefined
    5a7c:	00005b36 	.inst	0x00005b36 ; undefined
    5a80:	0015b906 	.inst	0x0015b906 ; undefined
    5a84:	01740100 	.inst	0x01740100 ; undefined
    5a88:	00000140 	.inst	0x00000140 ; undefined
    5a8c:	00005bd4 	.inst	0x00005bd4 ; undefined
    5a90:	0015ca06 	.inst	0x0015ca06 ; undefined
    5a94:	01740100 	.inst	0x01740100 ; undefined
    5a98:	00000140 	.inst	0x00000140 ; undefined
    5a9c:	00005c72 	.inst	0x00005c72 ; undefined
    5aa0:	00239e07 	.inst	0x00239e07 ; NYI
    5aa4:	01760100 	.inst	0x01760100 ; undefined
    5aa8:	00000037 	.inst	0x00000037 ; undefined
    5aac:	00005d10 	.inst	0x00005d10 ; undefined
    5ab0:	01006908 	.inst	0x01006908 ; undefined
    5ab4:	00370177 	.inst	0x00370177 ; NYI
    5ab8:	5dd80000 	.inst	0x5dd80000 ; undefined
    5abc:	74080000 	.inst	0x74080000 ; undefined
    5ac0:	0100706d 	.inst	0x0100706d ; undefined
    5ac4:	00530178 	.inst	0x00530178 ; undefined
    5ac8:	5e100000 	sha1c	q0, s0, v16.4s
    5acc:	94070000 	bl	1c5acc <_stack_size+0x1c4acc>
    5ad0:	01000015 	.inst	0x01000015 ; undefined
    5ad4:	00530179 	.inst	0x00530179 ; undefined
    5ad8:	5f100000 	.inst	0x5f100000 ; undefined
    5adc:	75070000 	.inst	0x75070000 ; undefined
    5ae0:	01000016 	.inst	0x01000016 ; undefined
    5ae4:	0053017a 	.inst	0x0053017a ; undefined
    5ae8:	5fc40000 	.inst	0x5fc40000 ; undefined
    5aec:	cc090000 	.inst	0xcc090000 ; undefined
    5af0:	00030041 	.inst	0x00030041 ; undefined
    5af4:	99000000 	.inst	0x99000000 ; undefined
    5af8:	0900000a 	.inst	0x0900000a ; undefined
    5afc:	030041d4 	.inst	0x030041d4 ; undefined
    5b00:	00000000 	.inst	0x00000000 ; undefined
    5b04:	00000a99 	.inst	0x00000a99 ; undefined
    5b08:	53080a00 	ubfiz	w0, w16, #24, #3
    5b0c:	0b000000 	add	w0, w0, w0
    5b10:	0000157c 	.inst	0x0000157c ; undefined
    5b14:	00374501 	.inst	0x00374501 ; NYI
    5b18:	41e00000 	.inst	0x41e00000 ; undefined
    5b1c:	00000300 	.inst	0x00000300 ; undefined
    5b20:	01800000 	.inst	0x01800000 ; undefined
    5b24:	00000000 	.inst	0x00000000 ; undefined
    5b28:	9c010000 	ldr	q0, 7b28 <_stack_size+0x6b28>
    5b2c:	000002ef 	.inst	0x000002ef ; undefined
    5b30:	0015f50c 	.inst	0x0015f50c ; undefined
    5b34:	45460100 	.inst	0x45460100 ; undefined
    5b38:	78000000 	sturh	w0, [x0]
    5b3c:	0c000060 	st4	{v0.8b-v3.8b}, [x3]
    5b40:	0000160b 	.inst	0x0000160b ; undefined
    5b44:	00374701 	.inst	0x00374701 ; NYI
    5b48:	60b10000 	.inst	0x60b10000 ; undefined
    5b4c:	860c0000 	.inst	0x860c0000 ; undefined
    5b50:	01000016 	.inst	0x01000016 ; undefined
    5b54:	00003748 	.inst	0x00003748 ; undefined
    5b58:	00611300 	.inst	0x00611300 ; undefined
    5b5c:	15fa0c00 	b	7e88b5c <_stack_base+0x4e7b3dc>
    5b60:	49010000 	.inst	0x49010000 ; undefined
    5b64:	00000037 	.inst	0x00000037 ; undefined
    5b68:	00006175 	.inst	0x00006175 ; undefined
    5b6c:	0016060c 	.inst	0x0016060c ; undefined
    5b70:	ef4a0100 	.inst	0xef4a0100 ; undefined
    5b74:	d7000002 	.inst	0xd7000002 ; undefined
    5b78:	0c000061 	st4	{v1.8b-v4.8b}, [x3]
    5b7c:	000016bc 	.inst	0x000016bc ; undefined
    5b80:	02ef4b01 	.inst	0x02ef4b01 ; undefined
    5b84:	62390000 	.inst	0x62390000 ; undefined
    5b88:	c10c0000 	.inst	0xc10c0000 ; undefined
    5b8c:	01000015 	.inst	0x01000015 ; undefined
    5b90:	0002ef4c 	.inst	0x0002ef4c ; undefined
    5b94:	00627200 	.inst	0x00627200 ; undefined
    5b98:	166d0c00 	b	fffffffff9b48b98 <SMC_ID_HW_RSA+0xffffffff75b38c91>
    5b9c:	4d010000 	.inst	0x4d010000 ; undefined
    5ba0:	00000053 	.inst	0x00000053 ; undefined
    5ba4:	000062d4 	.inst	0x000062d4 ; undefined
    5ba8:	00159b0d 	.inst	0x00159b0d ; undefined
    5bac:	37500100 	tbnz	w0, #10, 5bcc <_stack_size+0x4bcc>
    5bb0:	6b000000 	subs	w0, w0, w0
    5bb4:	0e000063 	tbl	v3.8b, {v3.16b}, v0.8b
    5bb8:	00001638 	.inst	0x00001638 ; undefined
    5bbc:	01405101 	.inst	0x01405101 ; undefined
    5bc0:	58440000 	ldr	x0, 8dbc0 <_stack_size+0x8cbc0>
    5bc4:	910e9801 	add	x1, x0, #0x3a6
    5bc8:	01000016 	.inst	0x01000016 ; undefined
    5bcc:	00014052 	.inst	0x00014052 ; undefined
    5bd0:	01585400 	.inst	0x01585400 ; undefined
    5bd4:	17010e98 	b	fffffffffc049634 <SMC_ID_HW_RSA+0xffffffff7803972d>
    5bd8:	53010000 	lsl	w0, w0, #31
    5bdc:	00000140 	.inst	0x00000140 ; undefined
    5be0:	98015834 	ldrsw	x20, 86e4 <_stack_size+0x76e4>
    5be4:	0015bb0f 	.inst	0x0015bb0f ; undefined
    5be8:	f5550100 	.inst	0xf5550100 ; undefined
    5bec:	4e000002 	tbl	v2.16b, {v0.16b}, v0.16b
    5bf0:	01939f30 	.inst	0x01939f30 ; undefined
    5bf4:	01939f41 	.inst	0x01939f41 ; undefined
    5bf8:	939f2208 	.inst	0x939f2208 ; undefined
    5bfc:	9f330801 	.inst	0x9f330801 ; undefined
    5c00:	44080193 	.inst	0x44080193 ; undefined
    5c04:	0801939f 	stlxrb	w1, wzr, [x28]
    5c08:	01939f55 	.inst	0x01939f55 ; undefined
    5c0c:	939f6608 	.inst	0x939f6608 ; undefined
    5c10:	9f770801 	.inst	0x9f770801 ; undefined
    5c14:	88090193 	stxr	w9, w19, [x12]
    5c18:	0901939f 	.inst	0x0901939f ; undefined
    5c1c:	01939f99 	.inst	0x01939f99 ; undefined
    5c20:	939faa09 	.inst	0x939faa09 ; undefined
    5c24:	9fbb0901 	.inst	0x9fbb0901 ; undefined
    5c28:	cc090193 	.inst	0xcc090193 ; undefined
    5c2c:	0901939f 	.inst	0x0901939f ; undefined
    5c30:	01939fdd 	.inst	0x01939fdd ; undefined
    5c34:	939fee09 	.inst	0x939fee09 ; undefined
    5c38:	9fff0901 	.inst	0x9fff0901 ; undefined
    5c3c:	6b100193 	subs	w19, w12, w16
    5c40:	01007965 	.inst	0x01007965 ; undefined
    5c44:	0002f557 	.inst	0x0002f557 ; undefined
    5c48:	2aac0d00 	orn	w0, w8, w12, asr #3
    5c4c:	58010000 	ldr	x0, 7c4c <_stack_size+0x6c4c>
    5c50:	000002f5 	.inst	0x000002f5 ; undefined
    5c54:	000063f3 	.inst	0x000063f3 ; undefined
    5c58:	00016b11 	.inst	0x00016b11 ; undefined
    5c5c:	37620100 	tbnz	w0, #12, 9c7c <_stack_size+0x8c7c>
    5c60:	a0000000 	.inst	0xa0000000 ; undefined
    5c64:	12000002 	and	w2, w0, #0x1
    5c68:	42780900 	.inst	0x42780900 ; undefined
    5c6c:	00000300 	.inst	0x00000300 ; undefined
    5c70:	0aae0000 	bic	w0, w0, w14, asr #0
    5c74:	7c090000 	stur	h0, [x0,#144]
    5c78:	00030042 	.inst	0x00030042 ; undefined
    5c7c:	bf000000 	.inst	0xbf000000 ; undefined
    5c80:	0900000a 	.inst	0x0900000a ; undefined
    5c84:	030042e0 	.inst	0x030042e0 ; undefined
    5c88:	00000000 	.inst	0x00000000 ; undefined
    5c8c:	00000aae 	.inst	0x00000aae ; undefined
    5c90:	0042e409 	.inst	0x0042e409 ; undefined
    5c94:	00000003 	.inst	0x00000003 ; undefined
    5c98:	000aae00 	.inst	0x000aae00 ; undefined
    5c9c:	42f40900 	.inst	0x42f40900 ; undefined
    5ca0:	00000300 	.inst	0x00000300 ; undefined
    5ca4:	0aae0000 	bic	w0, w0, w14, asr #0
    5ca8:	60090000 	.inst	0x60090000 ; undefined
    5cac:	00030043 	.inst	0x00030043 ; undefined
    5cb0:	c6000000 	.inst	0xc6000000 ; undefined
    5cb4:	0000000a 	.inst	0x0000000a ; undefined
    5cb8:	0045080a 	.inst	0x0045080a ; undefined
    5cbc:	45130000 	.inst	0x45130000 ; undefined
    5cc0:	05000000 	.inst	0x05000000 ; undefined
    5cc4:	14000003 	b	5cd0 <_stack_size+0x4cd0>
    5cc8:	00000305 	.inst	0x00000305 ; undefined
    5ccc:	0802000f 	stxrb	w2, w15, [x0]
    5cd0:	00059d07 	.inst	0x00059d07 ; undefined
    5cd4:	16a00b00 	b	fffffffffa8088d4 <SMC_ID_HW_RSA+0xffffffff767f89cd>
    5cd8:	7c010000 	stur	h0, [x0,#16]
    5cdc:	00000037 	.inst	0x00000037 ; undefined
    5ce0:	03004360 	.inst	0x03004360 ; undefined
    5ce4:	00000000 	.inst	0x00000000 ; undefined
    5ce8:	00000170 	.inst	0x00000170 ; undefined
    5cec:	00000000 	.inst	0x00000000 ; undefined
    5cf0:	04b59c01 	.inst	0x04b59c01 ; undefined
    5cf4:	f50c0000 	.inst	0xf50c0000 ; undefined
    5cf8:	01000015 	.inst	0x01000015 ; undefined
    5cfc:	0000457d 	.inst	0x0000457d ; undefined
    5d00:	00648500 	.inst	0x00648500 ; undefined
    5d04:	160b0c00 	b	fffffffff82c8d04 <SMC_ID_HW_RSA+0xffffffff742b8dfd>
    5d08:	7e010000 	.inst	0x7e010000 ; undefined
    5d0c:	00000037 	.inst	0x00000037 ; undefined
    5d10:	000064be 	.inst	0x000064be ; undefined
    5d14:	0016860c 	.inst	0x0016860c ; undefined
    5d18:	377f0100 	tbnz	w0, #15, 3d38 <_stack_size+0x2d38>
    5d1c:	f7000000 	.inst	0xf7000000 ; undefined
    5d20:	0c000064 	st4	{v4.8b-v7.8b}, [x3]
    5d24:	000015fa 	.inst	0x000015fa ; undefined
    5d28:	00378001 	.inst	0x00378001 ; NYI
    5d2c:	65300000 	.inst	0x65300000 ; undefined
    5d30:	060c0000 	.inst	0x060c0000 ; undefined
    5d34:	01000016 	.inst	0x01000016 ; undefined
    5d38:	0002ef81 	.inst	0x0002ef81 ; undefined
    5d3c:	00659200 	.inst	0x00659200 ; undefined
    5d40:	16bc0c00 	b	fffffffffaf08d40 <SMC_ID_HW_RSA+0xffffffff76ef8e39>
    5d44:	82010000 	.inst	0x82010000 ; undefined
    5d48:	000002ef 	.inst	0x000002ef ; undefined
    5d4c:	000065f4 	.inst	0x000065f4 ; undefined
    5d50:	0015c10c 	.inst	0x0015c10c ; undefined
    5d54:	ef830100 	.inst	0xef830100 ; undefined
    5d58:	56000002 	.inst	0x56000002 ; undefined
    5d5c:	0c000066 	st4	{v6.8b-v9.8b}, [x3]
    5d60:	0000166d 	.inst	0x0000166d ; undefined
    5d64:	00538401 	.inst	0x00538401 ; undefined
    5d68:	66b80000 	.inst	0x66b80000 ; undefined
    5d6c:	9b0d0000 	madd	x0, x0, x13, x0
    5d70:	01000015 	.inst	0x01000015 ; undefined
    5d74:	00003787 	.inst	0x00003787 ; undefined
    5d78:	00674f00 	.inst	0x00674f00 ; undefined
    5d7c:	16380e00 	b	fffffffff8e0957c <SMC_ID_HW_RSA+0xffffffff74df9675>
    5d80:	88010000 	stxr	w1, w0, [x0]
    5d84:	00000140 	.inst	0x00000140 ; undefined
    5d88:	98015844 	ldrsw	x4, 8890 <_stack_size+0x7890>
    5d8c:	0016910e 	.inst	0x0016910e ; undefined
    5d90:	40890100 	.inst	0x40890100 ; undefined
    5d94:	54000001 	b.ne	5d94 <_stack_size+0x4d94>
    5d98:	0e980158 	.inst	0x0e980158 ; undefined
    5d9c:	00001701 	.inst	0x00001701 ; undefined
    5da0:	01408a01 	.inst	0x01408a01 ; undefined
    5da4:	58340000 	ldr	x0, 6dda4 <_stack_size+0x6cda4>
    5da8:	bb0f9801 	.inst	0xbb0f9801 ; undefined
    5dac:	01000015 	.inst	0x01000015 ; undefined
    5db0:	0002f58c 	.inst	0x0002f58c ; undefined
    5db4:	9f304e00 	.inst	0x9f304e00 ; undefined
    5db8:	9f410193 	.inst	0x9f410193 ; undefined
    5dbc:	22080193 	.inst	0x22080193 ; undefined
    5dc0:	0801939f 	stlxrb	w1, wzr, [x28]
    5dc4:	01939f33 	.inst	0x01939f33 ; undefined
    5dc8:	939f4408 	.inst	0x939f4408 ; undefined
    5dcc:	9f550801 	.inst	0x9f550801 ; undefined
    5dd0:	66080193 	.inst	0x66080193 ; undefined
    5dd4:	0801939f 	stlxrb	w1, wzr, [x28]
    5dd8:	01939f77 	.inst	0x01939f77 ; undefined
    5ddc:	939f8809 	.inst	0x939f8809 ; undefined
    5de0:	9f990901 	.inst	0x9f990901 ; undefined
    5de4:	aa090193 	orr	x19, x12, x9
    5de8:	0901939f 	.inst	0x0901939f ; undefined
    5dec:	01939fbb 	.inst	0x01939fbb ; undefined
    5df0:	939fcc09 	.inst	0x939fcc09 ; undefined
    5df4:	9fdd0901 	.inst	0x9fdd0901 ; undefined
    5df8:	ee090193 	.inst	0xee090193 ; undefined
    5dfc:	0901939f 	.inst	0x0901939f ; undefined
    5e00:	01939fff 	.inst	0x01939fff ; undefined
    5e04:	79656b10 	ldrh	w16, [x24,#4788]
    5e08:	f58e0100 	.inst	0xf58e0100 ; undefined
    5e0c:	0d000002 	st1	{v2.b}[0], [x0]
    5e10:	00002aac 	.inst	0x00002aac ; undefined
    5e14:	02f58f01 	.inst	0x02f58f01 ; undefined
    5e18:	67d70000 	.inst	0x67d70000 ; undefined
    5e1c:	6b110000 	subs	w0, w0, w17
    5e20:	01000001 	.inst	0x01000001 ; undefined
    5e24:	00003762 	.inst	0x00003762 ; undefined
    5e28:	00046600 	.inst	0x00046600 ; undefined
    5e2c:	09001200 	.inst	0x09001200 ; undefined
    5e30:	030043e8 	.inst	0x030043e8 ; undefined
    5e34:	00000000 	.inst	0x00000000 ; undefined
    5e38:	00000aae 	.inst	0x00000aae ; undefined
    5e3c:	0043ec09 	.inst	0x0043ec09 ; undefined
    5e40:	00000003 	.inst	0x00000003 ; undefined
    5e44:	000abf00 	.inst	0x000abf00 ; undefined
    5e48:	44500900 	.inst	0x44500900 ; undefined
    5e4c:	00000300 	.inst	0x00000300 ; undefined
    5e50:	0aae0000 	bic	w0, w0, w14, asr #0
    5e54:	54090000 	b.eq	17e54 <_stack_size+0x16e54>
    5e58:	00030044 	.inst	0x00030044 ; undefined
    5e5c:	ae000000 	.inst	0xae000000 ; undefined
    5e60:	0900000a 	.inst	0x0900000a ; undefined
    5e64:	03004464 	.inst	0x03004464 ; undefined
    5e68:	00000000 	.inst	0x00000000 ; undefined
    5e6c:	00000aae 	.inst	0x00000aae ; undefined
    5e70:	0044d009 	.inst	0x0044d009 ; undefined
    5e74:	00000003 	.inst	0x00000003 ; undefined
    5e78:	000ac600 	.inst	0x000ac600 ; undefined
    5e7c:	460b0000 	.inst	0x460b0000 ; undefined
    5e80:	01000016 	.inst	0x01000016 ; undefined
    5e84:	000037b2 	.inst	0x000037b2 ; undefined
    5e88:	0044d000 	.inst	0x0044d000 ; undefined
    5e8c:	00000003 	.inst	0x00000003 ; undefined
    5e90:	0001ac00 	.inst	0x0001ac00 ; undefined
    5e94:	00000000 	.inst	0x00000000 ; undefined
    5e98:	049c0100 	.inst	0x049c0100 ; undefined
    5e9c:	0c000006 	st4	{v6.8b-v9.8b}, [x0]
    5ea0:	000015f5 	.inst	0x000015f5 ; undefined
    5ea4:	0045b301 	.inst	0x0045b301 ; undefined
    5ea8:	68690000 	.inst	0x68690000 ; undefined
    5eac:	0b0c0000 	add	w0, w0, w12
    5eb0:	01000016 	.inst	0x01000016 ; undefined
    5eb4:	000037b4 	.inst	0x000037b4 ; undefined
    5eb8:	0068a200 	.inst	0x0068a200 ; undefined
    5ebc:	16860c00 	b	fffffffffa188ebc <SMC_ID_HW_RSA+0xffffffff76178fb5>
    5ec0:	b5010000 	cbnz	x0, 7ec0 <_stack_size+0x6ec0>
    5ec4:	00000037 	.inst	0x00000037 ; undefined
    5ec8:	00006904 	.inst	0x00006904 ; undefined
    5ecc:	0015fa0c 	.inst	0x0015fa0c ; undefined
    5ed0:	37b60100 	tbnz	w0, #22, 1ef0 <_stack_size+0xef0>
    5ed4:	66000000 	.inst	0x66000000 ; undefined
    5ed8:	0c000069 	st4	{v9.8b-v12.8b}, [x3]
    5edc:	00001606 	.inst	0x00001606 ; undefined
    5ee0:	02efb701 	.inst	0x02efb701 ; undefined
    5ee4:	69c80000 	ldpsw	x0, x0, [x0,#64]!
    5ee8:	bc0c0000 	stur	s0, [x0,#192]
    5eec:	01000016 	.inst	0x01000016 ; undefined
    5ef0:	0002efb8 	.inst	0x0002efb8 ; undefined
    5ef4:	006a2a00 	.inst	0x006a2a00 ; undefined
    5ef8:	15c10c00 	b	7048ef8 <_stack_base+0x403b778>
    5efc:	b9010000 	str	w0, [x0,#256]
    5f00:	000002ef 	.inst	0x000002ef ; undefined
    5f04:	00006ab0 	.inst	0x00006ab0 ; undefined
    5f08:	00166d0c 	.inst	0x00166d0c ; undefined
    5f0c:	53ba0100 	.inst	0x53ba0100 ; undefined
    5f10:	12000000 	and	w0, w0, #0x1
    5f14:	0d00006b 	st1	{v11.b}[0], [x3]
    5f18:	0000159b 	.inst	0x0000159b ; undefined
    5f1c:	0037bd01 	.inst	0x0037bd01 ; NYI
    5f20:	6b8c0000 	subs	w0, w0, w12, asr #0
    5f24:	380e0000 	sturb	w0, [x0,#224]
    5f28:	01000016 	.inst	0x01000016 ; undefined
    5f2c:	000140be 	.inst	0x000140be ; undefined
    5f30:	01584400 	.inst	0x01584400 ; undefined
    5f34:	16910e98 	b	fffffffffa449994 <SMC_ID_HW_RSA+0xffffffff76439a8d>
    5f38:	bf010000 	.inst	0xbf010000 ; undefined
    5f3c:	00000140 	.inst	0x00000140 ; undefined
    5f40:	98015854 	ldrsw	x20, 8a48 <_stack_size+0x7a48>
    5f44:	0017010e 	.inst	0x0017010e ; undefined
    5f48:	40c00100 	.inst	0x40c00100 ; undefined
    5f4c:	34000001 	cbz	w1, 5f4c <_stack_size+0x4f4c>
    5f50:	10980158 	adr	x24, fffffffffff35f78 <SMC_ID_HW_RSA+0xffffffff7bf26071>
    5f54:	0079656b 	.inst	0x0079656b ; undefined
    5f58:	02f5c201 	.inst	0x02f5c201 ; undefined
    5f5c:	ac0d0000 	stnp	q0, q0, [x0,#416]
    5f60:	0100002a 	.inst	0x0100002a ; undefined
    5f64:	0002f5c3 	.inst	0x0002f5c3 ; undefined
    5f68:	006bde00 	.inst	0x006bde00 ; undefined
    5f6c:	016b1100 	.inst	0x016b1100 ; undefined
    5f70:	62010000 	.inst	0x62010000 ; undefined
    5f74:	00000037 	.inst	0x00000037 ; undefined
    5f78:	000005b5 	.inst	0x000005b5 ; undefined
    5f7c:	48090012 	stxrh	w9, w18, [x0]
    5f80:	00030045 	.inst	0x00030045 ; undefined
    5f84:	ae000000 	.inst	0xae000000 ; undefined
    5f88:	0900000a 	.inst	0x0900000a ; undefined
    5f8c:	0300454c 	.inst	0x0300454c ; undefined
    5f90:	00000000 	.inst	0x00000000 ; undefined
    5f94:	00000abf 	.inst	0x00000abf ; undefined
    5f98:	00462409 	.inst	0x00462409 ; undefined
    5f9c:	00000003 	.inst	0x00000003 ; undefined
    5fa0:	000aae00 	.inst	0x000aae00 ; undefined
    5fa4:	46280900 	.inst	0x46280900 ; undefined
    5fa8:	00000300 	.inst	0x00000300 ; undefined
    5fac:	0aae0000 	bic	w0, w0, w14, asr #0
    5fb0:	38090000 	sturb	w0, [x0,#144]
    5fb4:	00030046 	.inst	0x00030046 ; undefined
    5fb8:	ae000000 	.inst	0xae000000 ; undefined
    5fbc:	0900000a 	.inst	0x0900000a ; undefined
    5fc0:	0300467c 	.inst	0x0300467c ; undefined
    5fc4:	00000000 	.inst	0x00000000 ; undefined
    5fc8:	00000ac6 	.inst	0x00000ac6 ; undefined
    5fcc:	15d30b00 	b	74c8bcc <_stack_base+0x44bb44c>
    5fd0:	e7010000 	.inst	0xe7010000 ; undefined
    5fd4:	00000037 	.inst	0x00000037 ; undefined
    5fd8:	0300467c 	.inst	0x0300467c ; undefined
    5fdc:	00000000 	.inst	0x00000000 ; undefined
    5fe0:	00000300 	.inst	0x00000300 ; undefined
    5fe4:	00000000 	.inst	0x00000000 ; undefined
    5fe8:	07399c01 	.inst	0x07399c01 ; undefined
    5fec:	f50c0000 	.inst	0xf50c0000 ; undefined
    5ff0:	01000015 	.inst	0x01000015 ; undefined
    5ff4:	000045e8 	.inst	0x000045e8 ; undefined
    5ff8:	006c7000 	.inst	0x006c7000 ; undefined
    5ffc:	160b0c00 	b	fffffffff82c8ffc <SMC_ID_HW_RSA+0xffffffff742b90f5>
    6000:	e9010000 	.inst	0xe9010000 ; undefined
    6004:	00000037 	.inst	0x00000037 ; undefined
    6008:	00006ca9 	.inst	0x00006ca9 ; undefined
    600c:	0016860c 	.inst	0x0016860c ; undefined
    6010:	37ea0100 	tbnz	w0, #29, a030 <_stack_size+0x9030>
    6014:	e2000000 	.inst	0xe2000000 ; undefined
    6018:	0c00006c 	st4	{v12.8b-v15.8b}, [x3]
    601c:	000015fa 	.inst	0x000015fa ; undefined
    6020:	0037eb01 	.inst	0x0037eb01 ; NYI
    6024:	6d1b0000 	stp	d0, d0, [x0,#432]
    6028:	060c0000 	.inst	0x060c0000 ; undefined
    602c:	01000016 	.inst	0x01000016 ; undefined
    6030:	0002efec 	.inst	0x0002efec ; undefined
    6034:	006d5400 	.inst	0x006d5400 ; undefined
    6038:	16bc0c00 	b	fffffffffaf09038 <SMC_ID_HW_RSA+0xffffffff76ef9131>
    603c:	ed010000 	.inst	0xed010000 ; undefined
    6040:	000002ef 	.inst	0x000002ef ; undefined
    6044:	00006d8d 	.inst	0x00006d8d ; undefined
    6048:	0015c10c 	.inst	0x0015c10c ; undefined
    604c:	efee0100 	.inst	0xefee0100 ; undefined
    6050:	fe000002 	.inst	0xfe000002 ; undefined
    6054:	0c00006d 	st4	{v13.8b-v16.8b}, [x3]
    6058:	0000166d 	.inst	0x0000166d ; undefined
    605c:	0053ef01 	.inst	0x0053ef01 ; undefined
    6060:	6e6f0000 	uaddl2	v0.4s, v0.8h, v15.8h
    6064:	9b0d0000 	madd	x0, x0, x13, x0
    6068:	01000015 	.inst	0x01000015 ; undefined
    606c:	000037f2 	.inst	0x000037f2 ; undefined
    6070:	006ece00 	.inst	0x006ece00 ; undefined
    6074:	16380e00 	b	fffffffff8e09874 <SMC_ID_HW_RSA+0xffffffff74df996d>
    6078:	f3010000 	.inst	0xf3010000 ; undefined
    607c:	00000140 	.inst	0x00000140 ; undefined
    6080:	98015844 	ldrsw	x4, 8b88 <_stack_size+0x7b88>
    6084:	0016910e 	.inst	0x0016910e ; undefined
    6088:	40f40100 	.inst	0x40f40100 ; undefined
    608c:	54000001 	b.ne	608c <_stack_size+0x508c>
    6090:	0e980158 	.inst	0x0e980158 ; undefined
    6094:	00001701 	.inst	0x00001701 ; undefined
    6098:	0140f501 	.inst	0x0140f501 ; undefined
    609c:	58340000 	ldr	x0, 6e09c <_stack_size+0x6d09c>
    60a0:	6b119801 	.inst	0x6b119801 ; undefined
    60a4:	01000001 	.inst	0x01000001 ; undefined
    60a8:	00003762 	.inst	0x00003762 ; undefined
    60ac:	0006ea00 	.inst	0x0006ea00 ; undefined
    60b0:	09001200 	.inst	0x09001200 ; undefined
    60b4:	03004794 	.inst	0x03004794 ; undefined
    60b8:	00000000 	.inst	0x00000000 ; undefined
    60bc:	00000aae 	.inst	0x00000aae ; undefined
    60c0:	00479809 	.inst	0x00479809 ; undefined
    60c4:	00000003 	.inst	0x00000003 ; undefined
    60c8:	000abf00 	.inst	0x000abf00 ; undefined
    60cc:	48780900 	.inst	0x48780900 ; undefined
    60d0:	00000300 	.inst	0x00000300 ; undefined
    60d4:	0aae0000 	bic	w0, w0, w14, asr #0
    60d8:	24090000 	.inst	0x24090000 ; undefined
    60dc:	00030049 	.inst	0x00030049 ; undefined
    60e0:	ae000000 	.inst	0xae000000 ; undefined
    60e4:	0900000a 	.inst	0x0900000a ; undefined
    60e8:	0300493c 	.inst	0x0300493c ; undefined
    60ec:	00000000 	.inst	0x00000000 ; undefined
    60f0:	00000aae 	.inst	0x00000aae ; undefined
    60f4:	00497c09 	.inst	0x00497c09 ; undefined
    60f8:	00000003 	.inst	0x00000003 ; undefined
    60fc:	000ac600 	.inst	0x000ac600 ; undefined
    6100:	d5150000 	msr	s2_5_c0_c0_0, x0
    6104:	01000016 	.inst	0x01000016 ; undefined
    6108:	00370119 	.inst	0x00370119 ; NYI
    610c:	497c0000 	.inst	0x497c0000 ; undefined
    6110:	00000300 	.inst	0x00000300 ; undefined
    6114:	025c0000 	.inst	0x025c0000 ; undefined
    6118:	00000000 	.inst	0x00000000 ; undefined
    611c:	9c010000 	ldr	q0, 811c <_stack_size+0x711c>
    6120:	0000088b 	.inst	0x0000088b ; undefined
    6124:	0015f506 	.inst	0x0015f506 ; undefined
    6128:	011a0100 	.inst	0x011a0100 ; undefined
    612c:	00000045 	.inst	0x00000045 ; undefined
    6130:	00006f06 	.inst	0x00006f06 ; undefined
    6134:	00160b06 	.inst	0x00160b06 ; undefined
    6138:	011b0100 	.inst	0x011b0100 ; undefined
    613c:	00000037 	.inst	0x00000037 ; undefined
    6140:	00006f8e 	.inst	0x00006f8e ; undefined
    6144:	00168606 	.inst	0x00168606 ; undefined
    6148:	011c0100 	.inst	0x011c0100 ; undefined
    614c:	00000037 	.inst	0x00000037 ; undefined
    6150:	00006ff0 	.inst	0x00006ff0 ; undefined
    6154:	0015fa06 	.inst	0x0015fa06 ; undefined
    6158:	011d0100 	.inst	0x011d0100 ; undefined
    615c:	00000037 	.inst	0x00000037 ; undefined
    6160:	00007052 	.inst	0x00007052 ; undefined
    6164:	00160606 	.inst	0x00160606 ; undefined
    6168:	011e0100 	.inst	0x011e0100 ; undefined
    616c:	000002ef 	.inst	0x000002ef ; undefined
    6170:	000070b4 	.inst	0x000070b4 ; undefined
    6174:	0016bc06 	.inst	0x0016bc06 ; undefined
    6178:	011f0100 	.inst	0x011f0100 ; undefined
    617c:	000002ef 	.inst	0x000002ef ; undefined
    6180:	00007116 	.inst	0x00007116 ; undefined
    6184:	0015c106 	.inst	0x0015c106 ; undefined
    6188:	01200100 	.inst	0x01200100 ; undefined
    618c:	000002ef 	.inst	0x000002ef ; undefined
    6190:	0000719c 	.inst	0x0000719c ; undefined
    6194:	00166d06 	.inst	0x00166d06 ; undefined
    6198:	01210100 	.inst	0x01210100 ; undefined
    619c:	00000053 	.inst	0x00000053 ; undefined
    61a0:	000071fe 	.inst	0x000071fe ; undefined
    61a4:	00159b07 	.inst	0x00159b07 ; undefined
    61a8:	01240100 	.inst	0x01240100 ; undefined
    61ac:	00000037 	.inst	0x00000037 ; undefined
    61b0:	00007278 	.inst	0x00007278 ; undefined
    61b4:	00163816 	.inst	0x00163816 ; undefined
    61b8:	01250100 	.inst	0x01250100 ; undefined
    61bc:	00000140 	.inst	0x00000140 ; undefined
    61c0:	98015844 	ldrsw	x4, 8cc8 <_stack_size+0x7cc8>
    61c4:	00169116 	.inst	0x00169116 ; undefined
    61c8:	01260100 	.inst	0x01260100 ; undefined
    61cc:	00000140 	.inst	0x00000140 ; undefined
    61d0:	98015854 	ldrsw	x20, 8cd8 <_stack_size+0x7cd8>
    61d4:	00170116 	.inst	0x00170116 ; undefined
    61d8:	01270100 	.inst	0x01270100 ; undefined
    61dc:	00000140 	.inst	0x00000140 ; undefined
    61e0:	98015834 	ldrsw	x20, 8ce4 <_stack_size+0x7ce4>
    61e4:	002aac07 	.inst	0x002aac07 ; NYI
    61e8:	01290100 	.inst	0x01290100 ; undefined
    61ec:	000002f5 	.inst	0x000002f5 ; undefined
    61f0:	000072ca 	.inst	0x000072ca ; undefined
    61f4:	00016b11 	.inst	0x00016b11 ; undefined
    61f8:	37620100 	tbnz	w0, #12, a218 <_stack_size+0x9218>
    61fc:	3c000000 	stur	b0, [x0]
    6200:	12000008 	and	w8, w0, #0x1
    6204:	4a900900 	eor	w0, w8, w16, asr #2
    6208:	00000300 	.inst	0x00000300 ; undefined
    620c:	0aae0000 	bic	w0, w0, w14, asr #0
    6210:	94090000 	bl	246210 <_stack_size+0x245210>
    6214:	0003004a 	.inst	0x0003004a ; undefined
    6218:	bf000000 	.inst	0xbf000000 ; undefined
    621c:	0900000a 	.inst	0x0900000a ; undefined
    6220:	03004b6c 	.inst	0x03004b6c ; undefined
    6224:	00000000 	.inst	0x00000000 ; undefined
    6228:	00000aae 	.inst	0x00000aae ; undefined
    622c:	004b7009 	.inst	0x004b7009 ; undefined
    6230:	00000003 	.inst	0x00000003 ; undefined
    6234:	000aae00 	.inst	0x000aae00 ; undefined
    6238:	4b800900 	sub	w0, w8, w0, asr #2
    623c:	00000300 	.inst	0x00000300 ; undefined
    6240:	0aae0000 	bic	w0, w0, w14, asr #0
    6244:	d8090000 	prfm	pldl1keep, 18244 <_stack_size+0x17244>
    6248:	0003004b 	.inst	0x0003004b ; undefined
    624c:	c6000000 	.inst	0xc6000000 ; undefined
    6250:	0000000a 	.inst	0x0000000a ; undefined
    6254:	0016ef17 	.inst	0x0016ef17 ; undefined
    6258:	01500100 	.inst	0x01500100 ; undefined
    625c:	03004bd8 	.inst	0x03004bd8 ; undefined
    6260:	00000000 	.inst	0x00000000 ; undefined
    6264:	000000a0 	.inst	0x000000a0 ; undefined
    6268:	00000000 	.inst	0x00000000 ; undefined
    626c:	09219c01 	.inst	0x09219c01 ; undefined
    6270:	69180000 	.inst	0x69180000 ; undefined
    6274:	50010064 	adr	x4, 8282 <_stack_size+0x7282>
    6278:	00005301 	.inst	0x00005301 ; undefined
    627c:	00735c00 	.inst	0x00735c00 ; undefined
    6280:	1dbb0600 	.inst	0x1dbb0600 ; undefined
    6284:	50010000 	adr	x0, 8286 <_stack_size+0x7286>
    6288:	0002ef01 	.inst	0x0002ef01 ; undefined
    628c:	00739500 	.inst	0x00739500 ; undefined
    6290:	16141600 	b	fffffffff850ba90 <SMC_ID_HW_RSA+0xffffffff744fbb89>
    6294:	52010000 	eor	w0, w0, #0x80000000
    6298:	00014001 	.inst	0x00014001 ; undefined
    629c:	01405800 	.inst	0x01405800 ; undefined
    62a0:	165f1698 	b	fffffffff97cbd00 <SMC_ID_HW_RSA+0xffffffff757bbdf9>
    62a4:	53010000 	lsl	w0, w0, #31
    62a8:	00014001 	.inst	0x00014001 ; undefined
    62ac:	01406000 	.inst	0x01406000 ; undefined
    62b0:	016b1198 	.inst	0x016b1198 ; undefined
    62b4:	62010000 	.inst	0x62010000 ; undefined
    62b8:	00000037 	.inst	0x00000037 ; undefined
    62bc:	000008f9 	.inst	0x000008f9 ; undefined
    62c0:	f4090012 	.inst	0xf4090012 ; undefined
    62c4:	0003004b 	.inst	0x0003004b ; undefined
    62c8:	bf000000 	.inst	0xbf000000 ; undefined
    62cc:	0900000a 	.inst	0x0900000a ; undefined
    62d0:	03004c50 	.inst	0x03004c50 ; undefined
    62d4:	00000000 	.inst	0x00000000 ; undefined
    62d8:	00000aae 	.inst	0x00000aae ; undefined
    62dc:	004c6009 	.inst	0x004c6009 ; undefined
    62e0:	00000003 	.inst	0x00000003 ; undefined
    62e4:	000aae00 	.inst	0x000aae00 ; undefined
    62e8:	c4170000 	.inst	0xc4170000 ; undefined
    62ec:	01000016 	.inst	0x01000016 ; undefined
    62f0:	4c780162 	.inst	0x4c780162 ; undefined
    62f4:	00000300 	.inst	0x00000300 ; undefined
    62f8:	009c0000 	.inst	0x009c0000 ; undefined
    62fc:	00000000 	.inst	0x00000000 ; undefined
    6300:	9c010000 	ldr	q0, 8300 <_stack_size+0x7300>
    6304:	000009b7 	.inst	0x000009b7 ; undefined
    6308:	00646918 	.inst	0x00646918 ; undefined
    630c:	53016201 	ubfx	w1, w16, #1, #24
    6310:	e1000000 	.inst	0xe1000000 ; undefined
    6314:	06000073 	.inst	0x06000073 ; undefined
    6318:	00001dbb 	.inst	0x00001dbb ; undefined
    631c:	ef016201 	.inst	0xef016201 ; undefined
    6320:	2d000002 	stp	s2, s0, [x0]
    6324:	16000074 	b	fffffffff80064f4 <SMC_ID_HW_RSA+0xffffffff73ff65ed>
    6328:	00001614 	.inst	0x00001614 ; undefined
    632c:	40016401 	.inst	0x40016401 ; undefined
    6330:	58000001 	ldr	x1, 6330 <_stack_size+0x5330>
    6334:	16980140 	b	fffffffffa606834 <SMC_ID_HW_RSA+0xffffffff765f692d>
    6338:	0000165f 	.inst	0x0000165f ; undefined
    633c:	40016501 	.inst	0x40016501 ; undefined
    6340:	60000001 	.inst	0x60000001 ; undefined
    6344:	11980140 	.inst	0x11980140 ; undefined
    6348:	0000016b 	.inst	0x0000016b ; undefined
    634c:	00376201 	.inst	0x00376201 ; NYI
    6350:	098f0000 	.inst	0x098f0000 ; undefined
    6354:	00120000 	.inst	0x00120000 ; undefined
    6358:	004c9809 	.inst	0x004c9809 ; undefined
    635c:	00000003 	.inst	0x00000003 ; undefined
    6360:	000abf00 	.inst	0x000abf00 ; undefined
    6364:	4cb00900 	.inst	0x4cb00900 ; undefined
    6368:	00000300 	.inst	0x00000300 ; undefined
    636c:	0aae0000 	bic	w0, w0, w14, asr #0
    6370:	fc090000 	stur	d0, [x0,#144]
    6374:	0003004c 	.inst	0x0003004c ; undefined
    6378:	ae000000 	.inst	0xae000000 ; undefined
    637c:	0000000a 	.inst	0x0000000a ; undefined
    6380:	00162215 	.inst	0x00162215 ; undefined
    6384:	01b60100 	.inst	0x01b60100 ; undefined
    6388:	00000037 	.inst	0x00000037 ; undefined
    638c:	03004d14 	.inst	0x03004d14 ; undefined
    6390:	00000000 	.inst	0x00000000 ; undefined
    6394:	00000010 	.inst	0x00000010 ; undefined
    6398:	00000000 	.inst	0x00000000 ; undefined
    639c:	0a289c01 	.inst	0x0a289c01 ; undefined
    63a0:	b9060000 	str	w0, [x0,#1536]
    63a4:	01000015 	.inst	0x01000015 ; undefined
    63a8:	014001b6 	.inst	0x014001b6 ; undefined
    63ac:	74790000 	.inst	0x74790000 ; undefined
    63b0:	ca060000 	eor	x0, x0, x6
    63b4:	01000015 	.inst	0x01000015 ; undefined
    63b8:	014001b6 	.inst	0x014001b6 ; undefined
    63bc:	74c50000 	.inst	0x74c50000 ; undefined
    63c0:	6f190000 	.inst	0x6f190000 ; undefined
    63c4:	01007470 	.inst	0x01007470 ; undefined
    63c8:	005301b8 	.inst	0x005301b8 ; undefined
    63cc:	1a030000 	adc	w0, w0, w3
    63d0:	03004d24 	.inst	0x03004d24 ; undefined
    63d4:	00000000 	.inst	0x00000000 ; undefined
    63d8:	00000085 	.inst	0x00000085 ; undefined
    63dc:	0150011b 	.inst	0x0150011b ; undefined
    63e0:	51011b33 	sub	w19, w25, #0x46
    63e4:	5001f303 	adr	x3, a246 <_stack_size+0x9246>
    63e8:	0352011b 	.inst	0x0352011b ; undefined
    63ec:	005101f3 	.inst	0x005101f3 ; undefined
    63f0:	15a31500 	b	68cb7f0 <_stack_base+0x38be070>
    63f4:	bc010000 	stur	s0, [x0,#16]
    63f8:	00003701 	.inst	0x00003701 ; undefined
    63fc:	004d2400 	.inst	0x004d2400 ; undefined
    6400:	00000003 	.inst	0x00000003 ; undefined
    6404:	00001000 	.inst	0x00001000 ; undefined
    6408:	00000000 	.inst	0x00000000 ; undefined
    640c:	999c0100 	.inst	0x999c0100 ; undefined
    6410:	0600000a 	.inst	0x0600000a ; undefined
    6414:	000015b9 	.inst	0x000015b9 ; undefined
    6418:	4001bc01 	.inst	0x4001bc01 ; undefined
    641c:	11000001 	add	w1, w0, #0x0
    6420:	06000075 	.inst	0x06000075 ; undefined
    6424:	000015ca 	.inst	0x000015ca ; undefined
    6428:	4001bc01 	.inst	0x4001bc01 ; undefined
    642c:	5d000001 	.inst	0x5d000001 ; undefined
    6430:	19000075 	.inst	0x19000075 ; undefined
    6434:	0074706f 	.inst	0x0074706f ; undefined
    6438:	5301be01 	.inst	0x5301be01 ; undefined
    643c:	02000000 	.inst	0x02000000 ; undefined
    6440:	004d341a 	.inst	0x004d341a ; undefined
    6444:	00000003 	.inst	0x00000003 ; undefined
    6448:	00008500 	.inst	0x00008500 ; undefined
    644c:	50011b00 	adr	x0, 87ae <_stack_size+0x77ae>
    6450:	011b3201 	.inst	0x011b3201 ; undefined
    6454:	01f30351 	.inst	0x01f30351 ; undefined
    6458:	52011b50 	eor	w16, w26, #0x8000003f
    645c:	5101f303 	sub	w3, w24, #0x7c
    6460:	7a1c0000 	sbcs	w0, w0, w28
    6464:	04000016 	.inst	0x04000016 ; undefined
    6468:	0000376a 	.inst	0x0000376a ; undefined
    646c:	000aae00 	.inst	0x000aae00 ; undefined
    6470:	006c1d00 	.inst	0x006c1d00 ; undefined
    6474:	11000000 	add	w0, w0, #0x0
    6478:	0000016b 	.inst	0x0000016b ; undefined
    647c:	00376201 	.inst	0x00376201 ; NYI
    6480:	0abf0000 	bic	w0, w0, wzr, asr #0
    6484:	00120000 	.inst	0x00120000 ; undefined
    6488:	000cd21e 	.inst	0x000cd21e ; undefined
    648c:	1e6b0400 	fccmp	d0, d11, #0x0, eq
    6490:	0000038a 	.inst	0x0000038a ; undefined
    6494:	c6006c04 	.inst	0xc6006c04 ; undefined
    6498:	04000001 	.inst	0x04000001 ; undefined
    649c:	0015af00 	.inst	0x0015af00 ; undefined
    64a0:	89010800 	.inst	0x89010800 ; undefined
    64a4:	01000001 	.inst	0x01000001 ; undefined
    64a8:	00001711 	.inst	0x00001711 ; undefined
    64ac:	03004d34 	.inst	0x03004d34 ; undefined
    64b0:	00000000 	.inst	0x00000000 ; undefined
    64b4:	00000140 	.inst	0x00000140 ; undefined
    64b8:	00000000 	.inst	0x00000000 ; undefined
    64bc:	00001fc4 	.inst	0x00001fc4 ; undefined
    64c0:	00060102 	.inst	0x00060102 ; undefined
    64c4:	02000001 	.inst	0x02000001 ; undefined
    64c8:	002b0502 	.inst	0x002b0502 ; NYI
    64cc:	04030000 	.inst	0x04030000 ; undefined
    64d0:	746e6905 	.inst	0x746e6905 ; undefined
    64d4:	05080200 	.inst	0x05080200 ; undefined
    64d8:	000000a9 	.inst	0x000000a9 ; undefined
    64dc:	fe080102 	.inst	0xfe080102 ; undefined
    64e0:	02000000 	.inst	0x02000000 ; undefined
    64e4:	01310702 	.inst	0x01310702 ; undefined
    64e8:	04020000 	.inst	0x04020000 ; undefined
    64ec:	00011607 	.inst	0x00011607 ; undefined
    64f0:	07080200 	.inst	0x07080200 ; undefined
    64f4:	00000111 	.inst	0x00000111 ; undefined
    64f8:	00008504 	.inst	0x00008504 ; undefined
    64fc:	5a7a0200 	.inst	0x5a7a0200 ; undefined
    6500:	04000000 	.inst	0x04000000 ; undefined
    6504:	00000604 	.inst	0x00000604 ; undefined
    6508:	00450d03 	.inst	0x00450d03 ; undefined
    650c:	3f040000 	.inst	0x3f040000 ; undefined
    6510:	03000000 	.inst	0x03000000 ; undefined
    6514:	00005311 	.inst	0x00005311 ; undefined
    6518:	07080200 	.inst	0x07080200 ; undefined
    651c:	0000010c 	.inst	0x0000010c ; undefined
    6520:	a4050802 	.inst	0xa4050802 ; undefined
    6524:	05000000 	.inst	0x05000000 ; undefined
    6528:	00001767 	.inst	0x00001767 ; undefined
    652c:	006c4001 	.inst	0x006c4001 ; undefined
    6530:	4d340000 	.inst	0x4d340000 ; undefined
    6534:	00000300 	.inst	0x00000300 ; undefined
    6538:	00340000 	.inst	0x00340000 ; NYI
    653c:	00000000 	.inst	0x00000000 ; undefined
    6540:	9c010000 	ldr	q0, 8540 <_stack_size+0x7540>
    6544:	000000dd 	.inst	0x000000dd ; undefined
    6548:	00179406 	.inst	0x00179406 ; undefined
    654c:	77400100 	.inst	0x77400100 ; undefined
    6550:	a9000000 	stp	x0, x0, [x0]
    6554:	07000075 	.inst	0x07000075 ; undefined
    6558:	4201006b 	.inst	0x4201006b ; undefined
    655c:	00000077 	.inst	0x00000077 ; undefined
    6560:	0000760b 	.inst	0x0000760b ; undefined
    6564:	0017a508 	.inst	0x0017a508 ; undefined
    6568:	77430100 	.inst	0x77430100 ; undefined
    656c:	57000000 	.inst	0x57000000 ; undefined
    6570:	00000076 	.inst	0x00000076 ; undefined
    6574:	00177509 	.inst	0x00177509 ; undefined
    6578:	68310100 	.inst	0x68310100 ; undefined
    657c:	0003004d 	.inst	0x0003004d ; undefined
    6580:	5c000000 	ldr	d0, 6580 <_stack_size+0x5580>
    6584:	00000000 	.inst	0x00000000 ; undefined
    6588:	01000000 	.inst	0x01000000 ; undefined
    658c:	0001089c 	.inst	0x0001089c ; undefined
    6590:	4dc40a00 	ld1	{v0.b}[10], [x16], x4
    6594:	00000300 	.inst	0x00000300 ; undefined
    6598:	01b00000 	.inst	0x01b00000 ; undefined
    659c:	0b000000 	add	w0, w0, w0
    65a0:	0000179d 	.inst	0x0000179d ; undefined
    65a4:	00775701 	.inst	0x00775701 ; undefined
    65a8:	4dc40000 	ld1	{v0.b}[8], [x0], x4
    65ac:	00000300 	.inst	0x00000300 ; undefined
    65b0:	00b00000 	.inst	0x00b00000 ; undefined
    65b4:	00000000 	.inst	0x00000000 ; undefined
    65b8:	9c010000 	ldr	q0, 85b8 <_stack_size+0x75b8>
    65bc:	000001aa 	.inst	0x000001aa ; undefined
    65c0:	6c61760c 	ldnp	d12, d29, [x16,#-496]
    65c4:	aa570100 	orr	x0, x8, x23, lsr #0
    65c8:	7b000001 	.inst	0x7b000001 ; undefined
    65cc:	08000076 	stxrb	w0, w22, [x3]
    65d0:	0000170b 	.inst	0x0000170b ; undefined
    65d4:	00775901 	.inst	0x00775901 ; undefined
    65d8:	76c60000 	.inst	0x76c60000 ; undefined
    65dc:	94080000 	bl	2065dc <_stack_size+0x2055dc>
    65e0:	01000017 	.inst	0x01000017 ; undefined
    65e4:	0000775a 	.inst	0x0000775a ; undefined
    65e8:	00772500 	.inst	0x00772500 ; undefined
    65ec:	17880800 	b	fffffffffe2085ec <SMC_ID_HW_RSA+0xffffffff7a1f86e5>
    65f0:	5b010000 	.inst	0x5b010000 ; undefined
    65f4:	00000037 	.inst	0x00000037 ; undefined
    65f8:	00007798 	.inst	0x00007798 ; undefined
    65fc:	0017820d 	.inst	0x0017820d ; undefined
    6600:	dc620100 	.inst	0xdc620100 ; undefined
    6604:	0003004d 	.inst	0x0003004d ; undefined
    6608:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    660c:	03004e2c 	.inst	0x03004e2c ; undefined
    6610:	00000000 	.inst	0x00000000 ; undefined
    6614:	000001b7 	.inst	0x000001b7 ; undefined
    6618:	00000193 	.inst	0x00000193 ; undefined
    661c:	0450010f 	.inst	0x0450010f ; undefined
    6620:	04947491 	.inst	0x04947491 ; undefined
    6624:	0151010f 	.inst	0x0151010f ; undefined
    6628:	5c100031 	ldr	d17, 2662c <_stack_size+0x2562c>
    662c:	0003004e 	.inst	0x0003004e ; undefined
    6630:	90000000 	adrp	x0, 6000 <_stack_size+0x5000>
    6634:	0f000000 	.inst	0x0f000000 ; undefined
    6638:	91045001 	add	x1, x0, #0x114
    663c:	00049474 	.inst	0x00049474 ; undefined
    6640:	77081100 	.inst	0x77081100 ; undefined
    6644:	12000000 	and	w0, w0, #0x1
    6648:	0000016b 	.inst	0x0000016b ; undefined
    664c:	07135504 	.inst	0x07135504 ; undefined
    6650:	0500000b 	.inst	0x0500000b ; undefined
    6654:	0077142e 	.inst	0x0077142e ; undefined
    6658:	53140000 	ubfiz	w0, w0, #12, #1
    665c:	00000000 	.inst	0x00000000 ; undefined
    6660:	00053a00 	.inst	0x00053a00 ; undefined
    6664:	e1000400 	.inst	0xe1000400 ; undefined
    6668:	08000016 	stxrb	w0, w22, [x0]
    666c:	00018901 	.inst	0x00018901 ; undefined
    6670:	18dd0100 	ldr	w0, fffffffffffc0690 <SMC_ID_HW_RSA+0xffffffff7bfb0789>
    6674:	03470000 	.inst	0x03470000 ; undefined
    6678:	4e740000 	saddl2	v0.4s, v0.8h, v20.8h
    667c:	00000300 	.inst	0x00000300 ; undefined
    6680:	02000000 	.inst	0x02000000 ; undefined
    6684:	00000000 	.inst	0x00000000 ; undefined
    6688:	21700000 	.inst	0x21700000 ; undefined
    668c:	01020000 	.inst	0x01020000 ; undefined
    6690:	00010006 	.inst	0x00010006 ; undefined
    6694:	05020200 	.inst	0x05020200 ; undefined
    6698:	0000002b 	.inst	0x0000002b ; undefined
    669c:	69050403 	.inst	0x69050403 ; undefined
    66a0:	0200746e 	.inst	0x0200746e ; undefined
    66a4:	00a90508 	.inst	0x00a90508 ; undefined
    66a8:	01020000 	.inst	0x01020000 ; undefined
    66ac:	0000fe08 	.inst	0x0000fe08 ; undefined
    66b0:	07020200 	.inst	0x07020200 ; undefined
    66b4:	00000131 	.inst	0x00000131 ; undefined
    66b8:	16070402 	b	fffffffff81c76c0 <SMC_ID_HW_RSA+0xffffffff741b77b9>
    66bc:	02000001 	.inst	0x02000001 ; undefined
    66c0:	01110708 	.inst	0x01110708 ; undefined
    66c4:	08020000 	stxrb	w2, w0, [x0]
    66c8:	00010c07 	.inst	0x00010c07 ; undefined
    66cc:	05080200 	.inst	0x05080200 ; undefined
    66d0:	000000a4 	.inst	0x000000a4 ; undefined
    66d4:	9d070802 	.inst	0x9d070802 ; undefined
    66d8:	04000005 	.inst	0x04000005 ; undefined
    66dc:	00001824 	.inst	0x00001824 ; undefined
    66e0:	05170204 	.inst	0x05170204 ; undefined
    66e4:	05000001 	.inst	0x05000001 ; undefined
    66e8:	00001dd7 	.inst	0x00001dd7 ; undefined
    66ec:	184a0500 	ldr	w0, 9a78c <_stack_size+0x9978c>
    66f0:	05010000 	.inst	0x05010000 ; undefined
    66f4:	000019e8 	.inst	0x000019e8 ; undefined
    66f8:	19510502 	.inst	0x19510502 ; undefined
    66fc:	05030000 	.inst	0x05030000 ; undefined
    6700:	000017be 	.inst	0x000017be ; undefined
    6704:	18690504 	ldr	w4, d87a4 <_stack_size+0xd77a4>
    6708:	05050000 	.inst	0x05050000 ; undefined
    670c:	000019ca 	.inst	0x000019ca ; undefined
    6710:	17ee0506 	b	ffffffffffb87b28 <SMC_ID_HW_RSA+0xffffffff7bb77c21>
    6714:	05070000 	.inst	0x05070000 ; undefined
    6718:	0000180e 	.inst	0x0000180e ; undefined
    671c:	19b60508 	.inst	0x19b60508 ; undefined
    6720:	05090000 	.inst	0x05090000 ; undefined
    6724:	000018ae 	.inst	0x000018ae ; undefined
    6728:	19dd050a 	.inst	0x19dd050a ; undefined
    672c:	050b0000 	.inst	0x050b0000 ; undefined
    6730:	00001946 	.inst	0x00001946 ; undefined
    6734:	1801050c 	ldr	w12, 87d4 <_stack_size+0x77d4>
    6738:	050d0000 	.inst	0x050d0000 ; undefined
    673c:	0000185f 	.inst	0x0000185f ; undefined
    6740:	197d050e 	.inst	0x197d050e ; undefined
    6744:	050f0000 	.inst	0x050f0000 ; undefined
    6748:	0000196c 	.inst	0x0000196c ; undefined
    674c:	18450510 	ldr	w16, 907ec <_stack_size+0x8f7ec>
    6750:	05110000 	.inst	0x05110000 ; undefined
    6754:	0000198a 	.inst	0x0000198a ; undefined
    6758:	17ad0512 	b	fffffffffeb47ba0 <SMC_ID_HW_RSA+0xffffffff7ab37c99>
    675c:	05130000 	.inst	0x05130000 ; undefined
    6760:	0000189d 	.inst	0x0000189d ; undefined
    6764:	7e060014 	.inst	0x7e060014 ; undefined
    6768:	02000018 	.inst	0x02000018 ; undefined
    676c:	00007a2d 	.inst	0x00007a2d ; undefined
    6770:	03960700 	.inst	0x03960700 ; undefined
    6774:	02100000 	.inst	0x02100000 ; undefined
    6778:	00015f2f 	.inst	0x00015f2f ; undefined
    677c:	13d30800 	.inst	0x13d30800 ; undefined
    6780:	30020000 	adr	x0, a781 <_stack_size+0x9781>
    6784:	00000057 	.inst	0x00000057 ; undefined
    6788:	033c0800 	.inst	0x033c0800 ; undefined
    678c:	31020000 	adds	w0, w0, #0x80
    6790:	00000057 	.inst	0x00000057 ; undefined
    6794:	085a0804 	ldxrb	w4, [x0]
    6798:	32020000 	orr	w0, w0, #0x40000000
    679c:	00000057 	.inst	0x00000057 ; undefined
    67a0:	04270908 	.inst	0x04270908 ; undefined
    67a4:	34020000 	cbz	w0, a7a4 <_stack_size+0x97a4>
    67a8:	00000057 	.inst	0x00000057 ; undefined
    67ac:	0c1f0104 	.inst	0x0c1f0104 ; undefined
    67b0:	0005b709 	.inst	0x0005b709 ; undefined
    67b4:	57350200 	.inst	0x57350200 ; undefined
    67b8:	04000000 	.inst	0x04000000 ; undefined
    67bc:	000c001f 	.inst	0x000c001f ; undefined
    67c0:	0003be06 	.inst	0x0003be06 ; undefined
    67c4:	10360200 	adr	x0, 72804 <_stack_size+0x71804>
    67c8:	0a000001 	and	w1, w0, w0
    67cc:	000018ca 	.inst	0x000018ca ; undefined
    67d0:	38020400 	strb	w0, [x0],#32
    67d4:	000001b5 	.inst	0x000001b5 ; undefined
    67d8:	0005b108 	.inst	0x0005b108 ; undefined
    67dc:	57390200 	.inst	0x57390200 ; undefined
    67e0:	00000000 	.inst	0x00000000 ; undefined
    67e4:	00032408 	.inst	0x00032408 ; undefined
    67e8:	573a0200 	.inst	0x573a0200 ; undefined
    67ec:	04000000 	.inst	0x04000000 ; undefined
    67f0:	0005b708 	.inst	0x0005b708 ; undefined
    67f4:	b53b0200 	cbnz	x0, 7c834 <_stack_size+0x7b834>
    67f8:	08000001 	stxrb	w0, w1, [x0]
    67fc:	0017e508 	.inst	0x0017e508 ; undefined
    6800:	c53c0200 	.inst	0xc53c0200 ; undefined
    6804:	10000001 	adr	x1, 6804 <_stack_size+0x5804>
    6808:	000cb00b 	.inst	0x000cb00b ; undefined
    680c:	d53d0200 	mrs	x0, s3_5_c0_c2_0
    6810:	00000001 	.inst	0x00000001 ; undefined
    6814:	490c0003 	.inst	0x490c0003 ; undefined
    6818:	c5000000 	.inst	0xc5000000 ; undefined
    681c:	0d000001 	st1	{v1.b}[0], [x0]
    6820:	00000073 	.inst	0x00000073 ; undefined
    6824:	5f0c0007 	.inst	0x5f0c0007 ; undefined
    6828:	d5000001 	msr	s0_0_c0_c0_0, x1
    682c:	0d000001 	st1	{v1.b}[0], [x0]
    6830:	00000073 	.inst	0x00000073 ; undefined
    6834:	490c002e 	.inst	0x490c002e ; undefined
    6838:	e5000000 	.inst	0xe5000000 ; undefined
    683c:	0d000001 	st1	{v1.b}[0], [x0]
    6840:	00000073 	.inst	0x00000073 ; undefined
    6844:	120600ff 	and	wsp, w7, #0x4000000
    6848:	02000004 	.inst	0x02000004 ; undefined
    684c:	00016a3e 	.inst	0x00016a3e ; undefined
    6850:	18360e00 	ldr	w0, 72a10 <_stack_size+0x71a10>
    6854:	ec010000 	.inst	0xec010000 ; undefined
    6858:	03004e74 	.inst	0x03004e74 ; undefined
    685c:	00000000 	.inst	0x00000000 ; undefined
    6860:	0000006c 	.inst	0x0000006c ; undefined
    6864:	00000000 	.inst	0x00000000 ; undefined
    6868:	029a9c01 	.inst	0x029a9c01 ; undefined
    686c:	730f0000 	.inst	0x730f0000 ; undefined
    6870:	01007274 	.inst	0x01007274 ; undefined
    6874:	00029aec 	.inst	0x00029aec ; undefined
    6878:	00781e00 	.inst	0x00781e00 ; undefined
    687c:	19ae1000 	.inst	0x19ae1000 ; undefined
    6880:	ec010000 	.inst	0xec010000 ; undefined
    6884:	000002ac 	.inst	0x000002ac ; undefined
    6888:	000078e2 	.inst	0x000078e2 ; undefined
    688c:	004eac11 	.inst	0x004eac11 ; undefined
    6890:	00000003 	.inst	0x00000003 ; undefined
    6894:	00050000 	.inst	0x00050000 ; undefined
    6898:	00025100 	.inst	0x00025100 ; undefined
    689c:	50011200 	adr	x0, 8ade <_stack_size+0x7ade>
    68a0:	a0700309 	.inst	0xa0700309 ; undefined
    68a4:	00000300 	.inst	0x00000300 ; undefined
    68a8:	01120000 	.inst	0x01120000 ; undefined
    68ac:	01f30351 	.inst	0x01f30351 ; undefined
    68b0:	d0110050 	adrp	x16, 22010000 <_stack_base+0x1f002880>
    68b4:	0003004e 	.inst	0x0003004e ; undefined
    68b8:	00000000 	.inst	0x00000000 ; undefined
    68bc:	77000005 	.inst	0x77000005 ; undefined
    68c0:	12000002 	and	w2, w0, #0x1
    68c4:	03095001 	.inst	0x03095001 ; undefined
    68c8:	0300a028 	.inst	0x0300a028 ; undefined
    68cc:	00000000 	.inst	0x00000000 ; undefined
    68d0:	03510112 	.inst	0x03510112 ; undefined
    68d4:	005001f3 	.inst	0x005001f3 ; undefined
    68d8:	004ee013 	.inst	0x004ee013 ; undefined
    68dc:	00000003 	.inst	0x00000003 ; undefined
    68e0:	00050000 	.inst	0x00050000 ; undefined
    68e4:	50011200 	adr	x0, 8b26 <_stack_size+0x7b26>
    68e8:	a0180309 	.inst	0xa0180309 ; undefined
    68ec:	00000300 	.inst	0x00000300 ; undefined
    68f0:	01120000 	.inst	0x01120000 ; undefined
    68f4:	01f30351 	.inst	0x01f30351 ; undefined
    68f8:	14000050 	b	6a38 <_stack_size+0x5a38>
    68fc:	0002a008 	.inst	0x0002a008 ; undefined
    6900:	02a51500 	.inst	0x02a51500 ; undefined
    6904:	01020000 	.inst	0x01020000 ; undefined
    6908:	00010708 	.inst	0x00010708 ; undefined
    690c:	b2081400 	orr	x0, x0, #0x3f0000003f000000
    6910:	15000002 	b	4006918 <_stack_base+0xff9198>
    6914:	0000015f 	.inst	0x0000015f ; undefined
    6918:	00030a0e 	.inst	0x00030a0e ; undefined
    691c:	e0a90100 	.inst	0xe0a90100 ; undefined
    6920:	0003004e 	.inst	0x0003004e ; undefined
    6924:	e8000000 	.inst	0xe8000000 ; undefined
    6928:	00000000 	.inst	0x00000000 ; undefined
    692c:	01000000 	.inst	0x01000000 ; undefined
    6930:	0003669c 	.inst	0x0003669c ; undefined
    6934:	00691600 	.inst	0x00691600 ; undefined
    6938:	003bab01 	.inst	0x003bab01 ; NYI
    693c:	d8170000 	prfm	pldl1keep, 3493c <_stack_size+0x3393c>
    6940:	01000017 	.inst	0x01000017 ; undefined
    6944:	000366ac 	.inst	0x000366ac ; undefined
    6948:	00796d00 	.inst	0x00796d00 ; undefined
    694c:	19ae1700 	.inst	0x19ae1700 ; undefined
    6950:	ad010000 	stp	q0, q0, [x0,#32]
    6954:	0000036c 	.inst	0x0000036c ; undefined
    6958:	000079d9 	.inst	0x000079d9 ; undefined
    695c:	004f7818 	.inst	0x004f7818 ; undefined
    6960:	00000003 	.inst	0x00000003 ; undefined
    6964:	0001f000 	.inst	0x0001f000 ; undefined
    6968:	00031a00 	.inst	0x00031a00 ; undefined
    696c:	50011200 	adr	x0, 8bae <_stack_size+0x7bae>
    6970:	a0a00309 	.inst	0xa0a00309 ; undefined
    6974:	00000300 	.inst	0x00000300 ; undefined
    6978:	18000000 	ldr	w0, 6978 <_stack_size+0x5978>
    697c:	03004f88 	.inst	0x03004f88 ; undefined
    6980:	00000000 	.inst	0x00000000 ; undefined
    6984:	000001f0 	.inst	0x000001f0 ; undefined
    6988:	00000339 	.inst	0x00000339 ; undefined
    698c:	09500112 	.inst	0x09500112 ; undefined
    6990:	00a0c003 	.inst	0x00a0c003 ; undefined
    6994:	00000003 	.inst	0x00000003 ; undefined
    6998:	c4110000 	.inst	0xc4110000 ; undefined
    699c:	0003004f 	.inst	0x0003004f ; undefined
    69a0:	f0000000 	adrp	x0, 9000 <_stack_size+0x8000>
    69a4:	58000001 	ldr	x1, 69a4 <_stack_size+0x59a4>
    69a8:	12000003 	and	w3, w0, #0x1
    69ac:	03095001 	.inst	0x03095001 ; undefined
    69b0:	0300a0e0 	.inst	0x0300a0e0 ; undefined
    69b4:	00000000 	.inst	0x00000000 ; undefined
    69b8:	4fc81900 	fmla	v0.2d, v8.2d, v8.d[1]
    69bc:	00000300 	.inst	0x00000300 ; undefined
    69c0:	05160000 	.inst	0x05160000 ; undefined
    69c4:	14000000 	b	69c4 <_stack_size+0x59c4>
    69c8:	0001e508 	.inst	0x0001e508 ; undefined
    69cc:	5f081400 	.inst	0x5f081400 ; undefined
    69d0:	1a000001 	adc	w1, w0, w0
    69d4:	000017e0 	.inst	0x000017e0 ; undefined
    69d8:	036cd301 	.inst	0x036cd301 ; undefined
    69dc:	4fc80000 	.inst	0x4fc80000 ; undefined
    69e0:	00000300 	.inst	0x00000300 ; undefined
    69e4:	00ac0000 	.inst	0x00ac0000 ; undefined
    69e8:	00000000 	.inst	0x00000000 ; undefined
    69ec:	9c010000 	ldr	q0, 89ec <_stack_size+0x79ec>
    69f0:	00000477 	.inst	0x00000477 ; undefined
    69f4:	0017d810 	.inst	0x0017d810 ; undefined
    69f8:	66d30100 	.inst	0x66d30100 ; undefined
    69fc:	4a000003 	eor	w3, w0, w0
    6a00:	1000007a 	adr	x26, 6a0c <_stack_size+0x5a0c>
    6a04:	000017b6 	.inst	0x000017b6 ; undefined
    6a08:	0105d301 	.inst	0x0105d301 ; undefined
    6a0c:	7afb0000 	.inst	0x7afb0000 ; undefined
    6a10:	691b0000 	.inst	0x691b0000 ; undefined
    6a14:	3bd50100 	.inst	0x3bd50100 ; undefined
    6a18:	96000000 	bl	fffffffff8006a18 <SMC_ID_HW_RSA+0xffffffff73ff6b11>
    6a1c:	1700007b 	b	fffffffffc006c08 <SMC_ID_HW_RSA+0xffffffff77ff6d01>
    6a20:	000019ae 	.inst	0x000019ae ; undefined
    6a24:	036cd601 	.inst	0x036cd601 ; undefined
    6a28:	7be10000 	.inst	0x7be10000 ; undefined
    6a2c:	221c0000 	.inst	0x221c0000 ; undefined
    6a30:	8700000e 	.inst	0x8700000e ; undefined
    6a34:	09000004 	.inst	0x09000004 ; undefined
    6a38:	009b6003 	.inst	0x009b6003 ; undefined
    6a3c:	00000003 	.inst	0x00000003 ; undefined
    6a40:	50201800 	adr	x0, 46d42 <_stack_size+0x45d42>
    6a44:	00000300 	.inst	0x00000300 ; undefined
    6a48:	01f00000 	.inst	0x01f00000 ; undefined
    6a4c:	04050000 	.inst	0x04050000 ; undefined
    6a50:	01120000 	.inst	0x01120000 ; undefined
    6a54:	60030950 	.inst	0x60030950 ; undefined
    6a58:	0003009b 	.inst	0x0003009b ; undefined
    6a5c:	12000000 	and	w0, w0, #0x1
    6a60:	83025101 	.inst	0x83025101 ; undefined
    6a64:	3c180000 	stur	b0, [x0,#-128]
    6a68:	00030050 	.inst	0x00030050 ; undefined
    6a6c:	1d000000 	.inst	0x1d000000 ; undefined
    6a70:	24000005 	.inst	0x24000005 ; undefined
    6a74:	12000004 	and	w4, w0, #0x1
    6a78:	03095001 	.inst	0x03095001 ; undefined
    6a7c:	0300a100 	.inst	0x0300a100 ; undefined
    6a80:	00000000 	.inst	0x00000000 ; undefined
    6a84:	50481800 	adr	x0, 96d86 <_stack_size+0x95d86>
    6a88:	00000300 	.inst	0x00000300 ; undefined
    6a8c:	051d0000 	.inst	0x051d0000 ; undefined
    6a90:	04430000 	.inst	0x04430000 ; undefined
    6a94:	01120000 	.inst	0x01120000 ; undefined
    6a98:	00030950 	.inst	0x00030950 ; undefined
    6a9c:	0003009f 	.inst	0x0003009f ; undefined
    6aa0:	00000000 	.inst	0x00000000 ; undefined
    6aa4:	00505018 	.inst	0x00505018 ; undefined
    6aa8:	00000003 	.inst	0x00000003 ; undefined
    6aac:	00052f00 	.inst	0x00052f00 ; undefined
    6ab0:	00045b00 	.inst	0x00045b00 ; undefined
    6ab4:	50011200 	adr	x0, 8cf6 <_stack_size+0x7cf6>
    6ab8:	00008402 	.inst	0x00008402 ; undefined
    6abc:	00505c1d 	.inst	0x00505c1d ; undefined
    6ac0:	00000003 	.inst	0x00000003 ; undefined
    6ac4:	00051d00 	.inst	0x00051d00 ; undefined
    6ac8:	50011200 	adr	x0, 8d0a <_stack_size+0x7d0a>
    6acc:	9e580309 	fcvtzs	x9, d24, #64
    6ad0:	00000300 	.inst	0x00000300 ; undefined
    6ad4:	00000000 	.inst	0x00000000 ; undefined
    6ad8:	0002a50c 	.inst	0x0002a50c ; undefined
    6adc:	00048700 	.inst	0x00048700 ; undefined
    6ae0:	00730d00 	.inst	0x00730d00 ; undefined
    6ae4:	000d0000 	.inst	0x000d0000 ; undefined
    6ae8:	00047715 	.inst	0x00047715 ; undefined
    6aec:	19611e00 	.inst	0x19611e00 ; undefined
    6af0:	33010000 	bfi	w0, w0, #31, #1
    6af4:	0000036c 	.inst	0x0000036c ; undefined
    6af8:	bd480309 	ldr	s9, [x24,#2048]
    6afc:	00000300 	.inst	0x00000300 ; undefined
    6b00:	901e0000 	adrp	x0, 3c006000 <_stack_base+0x38ff8880>
    6b04:	01000019 	.inst	0x01000019 ; undefined
    6b08:	00036c34 	.inst	0x00036c34 ; undefined
    6b0c:	50030900 	adr	x0, cc2e <_stack_size+0xbc2e>
    6b10:	000300bd 	.inst	0x000300bd ; undefined
    6b14:	1e000000 	.inst	0x1e000000 ; undefined
    6b18:	00001892 	.inst	0x00001892 ; undefined
    6b1c:	036c3501 	.inst	0x036c3501 ; undefined
    6b20:	03090000 	.inst	0x03090000 ; undefined
    6b24:	0300bd58 	.inst	0x0300bd58 ; undefined
    6b28:	00000000 	.inst	0x00000000 ; undefined
    6b2c:	0018c81e 	.inst	0x0018c81e ; undefined
    6b30:	662f0100 	.inst	0x662f0100 ; undefined
    6b34:	09000003 	.inst	0x09000003 ; undefined
    6b38:	00bd4003 	.inst	0x00bd4003 ; undefined
    6b3c:	00000003 	.inst	0x00000003 ; undefined
    6b40:	18c11e00 	ldr	w0, fffffffffff88f00 <SMC_ID_HW_RSA+0xffffffff7bf78ff9>
    6b44:	30010000 	adr	x0, 8b45 <_stack_size+0x7b45>
    6b48:	000001e5 	.inst	0x000001e5 ; undefined
    6b4c:	bd600309 	ldr	s9, [x24,#8192]
    6b50:	00000300 	.inst	0x00000300 ; undefined
    6b54:	781f0000 	sturh	w0, [x0,#-16]
    6b58:	01000005 	.inst	0x01000005 ; undefined
    6b5c:	0000572a 	.inst	0x0000572a ; undefined
    6b60:	073c2000 	.inst	0x073c2000 ; undefined
    6b64:	23030000 	.inst	0x23030000 ; undefined
    6b68:	0000003b 	.inst	0x0000003b ; undefined
    6b6c:	00000516 	.inst	0x00000516 ; undefined
    6b70:	00029a21 	.inst	0x00029a21 ; undefined
    6b74:	23002200 	.inst	0x23002200 ; undefined
    6b78:	0000038a 	.inst	0x0000038a ; undefined
    6b7c:	63246c04 	.inst	0x63246c04 ; undefined
    6b80:	05000005 	.inst	0x05000005 ; undefined
    6b84:	052f012c 	.inst	0x052f012c ; undefined
    6b88:	9a210000 	.inst	0x9a210000 ; undefined
    6b8c:	00000002 	.inst	0x00000002 ; undefined
    6b90:	000a3425 	.inst	0x000a3425 ; undefined
    6b94:	012e0500 	.inst	0x012e0500 ; undefined
    6b98:	00005721 	.inst	0x00005721 ; undefined
    6b9c:	11000000 	add	w0, w0, #0x0
    6ba0:	0400000a 	.inst	0x0400000a ; undefined
    6ba4:	0018f400 	.inst	0x0018f400 ; undefined
    6ba8:	89010800 	.inst	0x89010800 ; undefined
    6bac:	01000001 	.inst	0x01000001 ; undefined
    6bb0:	00001ad7 	.inst	0x00001ad7 ; undefined
    6bb4:	00000347 	.inst	0x00000347 ; undefined
    6bb8:	03005074 	.inst	0x03005074 ; undefined
    6bbc:	00000000 	.inst	0x00000000 ; undefined
    6bc0:	00000304 	.inst	0x00000304 ; undefined
    6bc4:	00000000 	.inst	0x00000000 ; undefined
    6bc8:	000022d5 	.inst	0x000022d5 ; undefined
    6bcc:	00060102 	.inst	0x00060102 ; undefined
    6bd0:	02000001 	.inst	0x02000001 ; undefined
    6bd4:	002b0502 	.inst	0x002b0502 ; NYI
    6bd8:	04030000 	.inst	0x04030000 ; undefined
    6bdc:	746e6905 	.inst	0x746e6905 ; undefined
    6be0:	05080200 	.inst	0x05080200 ; undefined
    6be4:	000000a9 	.inst	0x000000a9 ; undefined
    6be8:	fe080102 	.inst	0xfe080102 ; undefined
    6bec:	02000000 	.inst	0x02000000 ; undefined
    6bf0:	01310702 	.inst	0x01310702 ; undefined
    6bf4:	04020000 	.inst	0x04020000 ; undefined
    6bf8:	00011607 	.inst	0x00011607 ; undefined
    6bfc:	07080200 	.inst	0x07080200 ; undefined
    6c00:	00000111 	.inst	0x00000111 ; undefined
    6c04:	00008504 	.inst	0x00008504 ; undefined
    6c08:	5e7a0200 	.inst	0x5e7a0200 ; undefined
    6c0c:	04000000 	.inst	0x04000000 ; undefined
    6c10:	0000003f 	.inst	0x0000003f ; undefined
    6c14:	00571103 	.inst	0x00571103 ; undefined
    6c18:	08020000 	stxrb	w2, w0, [x0]
    6c1c:	00010c07 	.inst	0x00010c07 ; undefined
    6c20:	05080200 	.inst	0x05080200 ; undefined
    6c24:	000000a4 	.inst	0x000000a4 ; undefined
    6c28:	9d070802 	.inst	0x9d070802 ; undefined
    6c2c:	05000005 	.inst	0x05000005 ; undefined
    6c30:	00000049 	.inst	0x00000049 ; undefined
    6c34:	000000a0 	.inst	0x000000a0 ; undefined
    6c38:	00008906 	.inst	0x00008906 ; undefined
    6c3c:	0700ff00 	.inst	0x0700ff00 ; undefined
    6c40:	00001e19 	.inst	0x00001e19 ; undefined
    6c44:	e9180404 	.inst	0xe9180404 ; undefined
    6c48:	08000000 	stxrb	w0, w0, [x0]
    6c4c:	00001dcd 	.inst	0x00001dcd ; undefined
    6c50:	1b650800 	.inst	0x1b650800 ; undefined
    6c54:	08010000 	stxrb	w1, w0, [x0]
    6c58:	00001ccd 	.inst	0x00001ccd ; undefined
    6c5c:	1a050802 	.inst	0x1a050802 ; undefined
    6c60:	08030000 	stxrb	w3, w0, [x0]
    6c64:	00001b54 	.inst	0x00001b54 ; undefined
    6c68:	1c340804 	ldr	s4, 6ed68 <_stack_size+0x6dd68>
    6c6c:	08050000 	stxrb	w5, w0, [x0]
    6c70:	00001d7e 	.inst	0x00001d7e ; undefined
    6c74:	1d1c0806 	.inst	0x1d1c0806 ; undefined
    6c78:	08070000 	stxrb	w7, w0, [x0]
    6c7c:	00001dfb 	.inst	0x00001dfb ; undefined
    6c80:	1e630808 	fmul	d8, d0, d3
    6c84:	00090000 	.inst	0x00090000 ; undefined
    6c88:	001bde09 	.inst	0x001bde09 ; undefined
    6c8c:	25041000 	.inst	0x25041000 ; undefined
    6c90:	00000126 	.inst	0x00000126 ; undefined
    6c94:	001d530a 	.inst	0x001d530a ; undefined
    6c98:	57260400 	.inst	0x57260400 ; undefined
    6c9c:	00000000 	.inst	0x00000000 ; undefined
    6ca0:	001b960a 	.inst	0x001b960a ; undefined
    6ca4:	57270400 	.inst	0x57270400 ; undefined
    6ca8:	04000000 	.inst	0x04000000 ; undefined
    6cac:	001e540a 	.inst	0x001e540a ; undefined
    6cb0:	57280400 	.inst	0x57280400 ; undefined
    6cb4:	08000000 	stxrb	w0, w0, [x0]
    6cb8:	001c660a 	.inst	0x001c660a ; undefined
    6cbc:	57290400 	.inst	0x57290400 ; undefined
    6cc0:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    6cc4:	19f90400 	.inst	0x19f90400 ; undefined
    6cc8:	2a040000 	orr	w0, w0, w4
    6ccc:	000000e9 	.inst	0x000000e9 ; undefined
    6cd0:	00004905 	.inst	0x00004905 ; undefined
    6cd4:	00014100 	.inst	0x00014100 ; undefined
    6cd8:	00890600 	.inst	0x00890600 ; undefined
    6cdc:	000f0000 	.inst	0x000f0000 ; undefined
    6ce0:	001ac809 	.inst	0x001ac809 ; undefined
    6ce4:	68041400 	.inst	0x68041400 ; undefined
    6ce8:	0000018a 	.inst	0x0000018a ; undefined
    6cec:	000aa50a 	.inst	0x000aa50a ; undefined
    6cf0:	57690400 	.inst	0x57690400 ; undefined
    6cf4:	00000000 	.inst	0x00000000 ; undefined
    6cf8:	001f860a 	.inst	0x001f860a ; undefined
    6cfc:	576a0400 	.inst	0x576a0400 ; undefined
    6d00:	04000000 	.inst	0x04000000 ; undefined
    6d04:	0015ee0a 	.inst	0x0015ee0a ; undefined
    6d08:	576b0400 	.inst	0x576b0400 ; undefined
    6d0c:	08000000 	stxrb	w0, w0, [x0]
    6d10:	001da20a 	.inst	0x001da20a ; undefined
    6d14:	576c0400 	.inst	0x576c0400 ; undefined
    6d18:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    6d1c:	001a5d0a 	.inst	0x001a5d0a ; undefined
    6d20:	576d0400 	.inst	0x576d0400 ; undefined
    6d24:	10000000 	adr	x0, 6d24 <_stack_size+0x5d24>
    6d28:	1d2e0400 	.inst	0x1d2e0400 ; undefined
    6d2c:	6e040000 	ext	v0.16b, v0.16b, v4.16b, #0
    6d30:	00000141 	.inst	0x00000141 ; undefined
    6d34:	001d9209 	.inst	0x001d9209 ; undefined
    6d38:	70041000 	adr	x0, ef3b <_stack_size+0xdf3b>
    6d3c:	000001d2 	.inst	0x000001d2 ; undefined
    6d40:	000aa50a 	.inst	0x000aa50a ; undefined
    6d44:	57710400 	.inst	0x57710400 ; undefined
    6d48:	00000000 	.inst	0x00000000 ; undefined
    6d4c:	001f860a 	.inst	0x001f860a ; undefined
    6d50:	57720400 	.inst	0x57720400 ; undefined
    6d54:	04000000 	.inst	0x04000000 ; undefined
    6d58:	001da20a 	.inst	0x001da20a ; undefined
    6d5c:	57730400 	.inst	0x57730400 ; undefined
    6d60:	08000000 	stxrb	w0, w0, [x0]
    6d64:	001a5d0a 	.inst	0x001a5d0a ; undefined
    6d68:	57740400 	.inst	0x57740400 ; undefined
    6d6c:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    6d70:	1ab00400 	.inst	0x1ab00400 ; undefined
    6d74:	75040000 	.inst	0x75040000 ; undefined
    6d78:	00000195 	.inst	0x00000195 ; undefined
    6d7c:	001dc20b 	.inst	0x001dc20b ; undefined
    6d80:	04026800 	.inst	0x04026800 ; undefined
    6d84:	0002bf77 	.inst	0x0002bf77 ; undefined
    6d88:	1bcb0a00 	.inst	0x1bcb0a00 ; undefined
    6d8c:	78040000 	sturh	w0, [x0,#64]
    6d90:	00000057 	.inst	0x00000057 ; undefined
    6d94:	1eea0a00 	.inst	0x1eea0a00 ; undefined
    6d98:	79040000 	strh	w0, [x0,#512]
    6d9c:	00000057 	.inst	0x00000057 ; undefined
    6da0:	1cba0a04 	ldr	s4, fffffffffff7aee0 <SMC_ID_HW_RSA+0xffffffff7bf6afd9>
    6da4:	7a040000 	sbcs	w0, w0, w4
    6da8:	00000057 	.inst	0x00000057 ; undefined
    6dac:	1c8d0a08 	ldr	s8, fffffffffff20eec <SMC_ID_HW_RSA+0xffffffff7bf10fe5>
    6db0:	7b040000 	.inst	0x7b040000 ; undefined
    6db4:	00000057 	.inst	0x00000057 ; undefined
    6db8:	1bb00a0c 	.inst	0x1bb00a0c ; undefined
    6dbc:	7c040000 	stur	h0, [x0,#64]
    6dc0:	00000057 	.inst	0x00000057 ; undefined
    6dc4:	1ea20a10 	.inst	0x1ea20a10 ; undefined
    6dc8:	7d040000 	str	h0, [x0,#512]
    6dcc:	00000057 	.inst	0x00000057 ; undefined
    6dd0:	1a660a14 	.inst	0x1a660a14 ; undefined
    6dd4:	7e040000 	.inst	0x7e040000 ; undefined
    6dd8:	00000057 	.inst	0x00000057 ; undefined
    6ddc:	1a520a18 	.inst	0x1a520a18 ; undefined
    6de0:	7f040000 	.inst	0x7f040000 ; undefined
    6de4:	000002bf 	.inst	0x000002bf ; undefined
    6de8:	1a470a1c 	.inst	0x1a470a1c ; undefined
    6dec:	80040000 	.inst	0x80040000 ; undefined
    6df0:	000002cf 	.inst	0x000002cf ; undefined
    6df4:	1c160ca8 	ldr	s8, 32f88 <_stack_size+0x31f88>
    6df8:	81040000 	.inst	0x81040000 ; undefined
    6dfc:	00000057 	.inst	0x00000057 ; undefined
    6e00:	a00c0128 	.inst	0xa00c0128 ; undefined
    6e04:	0400001b 	.inst	0x0400001b ; undefined
    6e08:	00005782 	.inst	0x00005782 ; undefined
    6e0c:	0c012c00 	.inst	0x0c012c00 ; undefined
    6e10:	00001cf7 	.inst	0x00001cf7 ; undefined
    6e14:	00578304 	.inst	0x00578304 ; undefined
    6e18:	01300000 	.inst	0x01300000 ; undefined
    6e1c:	001e750c 	.inst	0x001e750c ; undefined
    6e20:	57840400 	.inst	0x57840400 ; undefined
    6e24:	34000000 	cbz	w0, 6e24 <_stack_size+0x5e24>
    6e28:	1bde0c01 	.inst	0x1bde0c01 ; undefined
    6e2c:	85040000 	.inst	0x85040000 ; undefined
    6e30:	00000126 	.inst	0x00000126 ; undefined
    6e34:	8f0c0138 	.inst	0x8f0c0138 ; undefined
    6e38:	0400001e 	.inst	0x0400001e ; undefined
    6e3c:	00013186 	.inst	0x00013186 ; undefined
    6e40:	0c014800 	.inst	0x0c014800 ; undefined
    6e44:	00001b41 	.inst	0x00001b41 ; undefined
    6e48:	01318704 	.inst	0x01318704 ; undefined
    6e4c:	01580000 	.inst	0x01580000 ; undefined
    6e50:	001c830c 	.inst	0x001c830c ; undefined
    6e54:	90880400 	adrp	x0, ffffffff10086000 <SMC_ID_HW_RSA+0xfffffffe8c0760f9>
    6e58:	68000000 	.inst	0x68000000 ; undefined
    6e5c:	8a050001 	and	x1, x0, x5
    6e60:	cf000001 	.inst	0xcf000001 ; undefined
    6e64:	06000002 	.inst	0x06000002 ; undefined
    6e68:	00000089 	.inst	0x00000089 ; undefined
    6e6c:	d2050006 	eor	x6, x0, #0x800000008000000
    6e70:	df000001 	.inst	0xdf000001 ; undefined
    6e74:	06000002 	.inst	0x06000002 ; undefined
    6e78:	00000089 	.inst	0x00000089 ; undefined
    6e7c:	23040007 	.inst	0x23040007 ; undefined
    6e80:	0400001e 	.inst	0x0400001e ; undefined
    6e84:	0001dd89 	.inst	0x0001dd89 ; undefined
    6e88:	1a970b00 	.inst	0x1a970b00 ; undefined
    6e8c:	01140000 	.inst	0x01140000 ; undefined
    6e90:	031c9404 	.inst	0x031c9404 ; undefined
    6e94:	cb0a0000 	sub	x0, x0, x10
    6e98:	0400001b 	.inst	0x0400001b ; undefined
    6e9c:	00005795 	.inst	0x00005795 ; undefined
    6ea0:	de0a0000 	.inst	0xde0a0000 ; undefined
    6ea4:	0400001b 	.inst	0x0400001b ; undefined
    6ea8:	00012696 	.inst	0x00012696 ; undefined
    6eac:	830a0400 	.inst	0x830a0400 ; undefined
    6eb0:	0400001c 	.inst	0x0400001c ; undefined
    6eb4:	00009097 	.inst	0x00009097 ; undefined
    6eb8:	04001400 	.inst	0x04001400 ; undefined
    6ebc:	00001be8 	.inst	0x00001be8 ; undefined
    6ec0:	02ea9804 	.inst	0x02ea9804 ; undefined
    6ec4:	280b0000 	stnp	w0, w0, [x0,#88]
    6ec8:	00000021 	.inst	0x00000021 ; undefined
    6ecc:	759a0404 	.inst	0x759a0404 ; undefined
    6ed0:	0a000003 	and	w3, w0, w0
    6ed4:	00001c70 	.inst	0x00001c70 ; undefined
    6ed8:	00909b04 	.inst	0x00909b04 ; undefined
    6edc:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    6ee0:	00001d11 	.inst	0x00001d11 ; undefined
    6ee4:	00579c04 	.inst	0x00579c04 ; undefined
    6ee8:	01000000 	.inst	0x01000000 ; undefined
    6eec:	001ec60c 	.inst	0x001ec60c ; undefined
    6ef0:	759d0400 	.inst	0x759d0400 ; undefined
    6ef4:	04000003 	.inst	0x04000003 ; undefined
    6ef8:	1bde0c01 	.inst	0x1bde0c01 ; undefined
    6efc:	9e040000 	.inst	0x9e040000 ; undefined
    6f00:	00000126 	.inst	0x00000126 ; undefined
    6f04:	830c02f0 	.inst	0x830c02f0 ; undefined
    6f08:	0400001c 	.inst	0x0400001c ; undefined
    6f0c:	0000909f 	.inst	0x0000909f ; undefined
    6f10:	00030000 	.inst	0x00030000 ; undefined
    6f14:	00004905 	.inst	0x00004905 ; undefined
    6f18:	00038600 	.inst	0x00038600 ; undefined
    6f1c:	00890d00 	.inst	0x00890d00 ; undefined
    6f20:	01eb0000 	.inst	0x01eb0000 ; undefined
    6f24:	1ed50400 	.inst	0x1ed50400 ; undefined
    6f28:	a0040000 	.inst	0xa0040000 ; undefined
    6f2c:	00000327 	.inst	0x00000327 ; undefined
    6f30:	000cdc07 	.inst	0x000cdc07 ; undefined
    6f34:	1b050400 	madd	w0, w0, w5, w1
    6f38:	000003bc 	.inst	0x000003bc ; undefined
    6f3c:	000c4708 	.inst	0x000c4708 ; undefined
    6f40:	f2080000 	ands	x0, x0, #0x100000001000000
    6f44:	0100000c 	.inst	0x0100000c ; undefined
    6f48:	000cfd08 	.inst	0x000cfd08 ; undefined
    6f4c:	08080200 	stxrb	w8, w0, [x16]
    6f50:	0300000d 	.inst	0x0300000d ; undefined
    6f54:	000d1308 	.inst	0x000d1308 ; undefined
    6f58:	04000400 	.inst	0x04000400 ; undefined
    6f5c:	00000c76 	.inst	0x00000c76 ; undefined
    6f60:	03912105 	.inst	0x03912105 ; undefined
    6f64:	6e090000 	ext	v0.16b, v0.16b, v9.16b, #0
    6f68:	1000000c 	adr	x12, 6f68 <_stack_size+0x5f68>
    6f6c:	03ec2305 	.inst	0x03ec2305 ; undefined
    6f70:	d30a0000 	.inst	0xd30a0000 ; undefined
    6f74:	05000013 	.inst	0x05000013 ; undefined
    6f78:	0003bc24 	.inst	0x0003bc24 ; undefined
    6f7c:	6b0e0000 	subs	w0, w0, w14
    6f80:	05007965 	.inst	0x05007965 ; undefined
    6f84:	0003ec25 	.inst	0x0003ec25 ; undefined
    6f88:	0f000800 	.inst	0x0f000800 ; undefined
    6f8c:	0c8b0408 	st4	{v8.4h-v11.4h}, [x0], x11
    6f90:	26050000 	.inst	0x26050000 ; undefined
    6f94:	000003c7 	.inst	0x000003c7 ; undefined
    6f98:	001d6810 	.inst	0x001d6810 ; undefined
    6f9c:	010e0100 	.inst	0x010e0100 ; undefined
    6fa0:	0000003b 	.inst	0x0000003b ; undefined
    6fa4:	00042301 	.inst	0x00042301 ; undefined
    6fa8:	1daa1100 	.inst	0x1daa1100 ; undefined
    6fac:	0e010000 	tbl	v0.8b, {v0.16b}, v1.8b
    6fb0:	00042301 	.inst	0x00042301 ; undefined
    6fb4:	1e341200 	.inst	0x1e341200 ; undefined
    6fb8:	10010000 	adr	x0, 8fb8 <_stack_size+0x7fb8>
    6fbc:	00042901 	.inst	0x00042901 ; undefined
    6fc0:	08130000 	stxrb	w19, w0, [x0]
    6fc4:	00000057 	.inst	0x00000057 ; undefined
    6fc8:	00005705 	.inst	0x00005705 ; undefined
    6fcc:	00043900 	.inst	0x00043900 ; undefined
    6fd0:	00890600 	.inst	0x00890600 ; undefined
    6fd4:	00010000 	.inst	0x00010000 ; undefined
    6fd8:	001a2c10 	.inst	0x001a2c10 ; undefined
    6fdc:	01010100 	.inst	0x01010100 ; undefined
    6fe0:	0000003b 	.inst	0x0000003b ; undefined
    6fe4:	00046301 	.inst	0x00046301 ; undefined
    6fe8:	03241100 	.inst	0x03241100 ; undefined
    6fec:	01010000 	.inst	0x01010000 ; undefined
    6ff0:	00042301 	.inst	0x00042301 ; undefined
    6ff4:	1e341200 	.inst	0x1e341200 ; undefined
    6ff8:	03010000 	.inst	0x03010000 ; undefined
    6ffc:	00042901 	.inst	0x00042901 ; undefined
    7000:	af140000 	.inst	0xaf140000 ; undefined
    7004:	0100001d 	.inst	0x0100001d ; undefined
    7008:	00003be2 	.inst	0x00003be2 ; undefined
    700c:	00507400 	.inst	0x00507400 ; undefined
    7010:	00000003 	.inst	0x00000003 ; undefined
    7014:	0000ac00 	.inst	0x0000ac00 ; undefined
    7018:	00000000 	.inst	0x00000000 ; undefined
    701c:	4f9c0100 	.inst	0x4f9c0100 ; undefined
    7020:	15000005 	b	4007034 <_stack_base+0xff98b4>
    7024:	00727470 	.inst	0x00727470 ; undefined
    7028:	054fe201 	.inst	0x054fe201 ; undefined
    702c:	7d020000 	str	h0, [x0,#256]
    7030:	30160000 	adr	x0, 33031 <_stack_size+0x32031>
    7034:	0100001e 	.inst	0x0100001e ; undefined
    7038:	000057e4 	.inst	0x000057e4 ; undefined
    703c:	007d6100 	.inst	0x007d6100 ; undefined
    7040:	1b8c1600 	.inst	0x1b8c1600 ; undefined
    7044:	e5010000 	.inst	0xe5010000 ; undefined
    7048:	00000057 	.inst	0x00000057 ; undefined
    704c:	00007e36 	.inst	0x00007e36 ; undefined
    7050:	0003f917 	.inst	0x0003f917 ; undefined
    7054:	00508400 	.inst	0x00508400 ; undefined
    7058:	00000003 	.inst	0x00000003 ; undefined
    705c:	0006f000 	.inst	0x0006f000 ; undefined
    7060:	00ef0100 	.inst	0x00ef0100 ; undefined
    7064:	18000005 	ldr	w5, 7064 <_stack_size+0x6064>
    7068:	0000040a 	.inst	0x0000040a ; undefined
    706c:	00007ee2 	.inst	0x00007ee2 ; undefined
    7070:	0006f019 	.inst	0x0006f019 ; undefined
    7074:	04161a00 	.inst	0x04161a00 ; undefined
    7078:	91020000 	add	x0, x0, #0x80
    707c:	50a01b78 	adr	x24, fffffffffff473ea <SMC_ID_HW_RSA+0xffffffff7bf374e3>
    7080:	00000300 	.inst	0x00000300 ; undefined
    7084:	08da0000 	.inst	0x08da0000 ; undefined
    7088:	011c0000 	.inst	0x011c0000 ; undefined
    708c:	770a0350 	.inst	0x770a0350 ; undefined
    7090:	51011c22 	sub	w2, w1, #0x47
    7094:	1c008402 	ldr	s2, 8114 <_stack_size+0x7114>
    7098:	32015201 	orr	w1, w16, #0x800fffff
    709c:	1d000000 	.inst	0x1d000000 ; undefined
    70a0:	00000439 	.inst	0x00000439 ; undefined
    70a4:	030050dc 	.inst	0x030050dc ; undefined
    70a8:	00000000 	.inst	0x00000000 ; undefined
    70ac:	00000740 	.inst	0x00000740 ; undefined
    70b0:	4a1ef701 	.inst	0x4a1ef701 ; undefined
    70b4:	06000004 	.inst	0x06000004 ; undefined
    70b8:	007032f2 	.inst	0x007032f2 ; undefined
    70bc:	40190000 	.inst	0x40190000 ; undefined
    70c0:	1a000007 	adc	w7, w0, w0
    70c4:	00000456 	.inst	0x00000456 ; undefined
    70c8:	1b789102 	.inst	0x1b789102 ; undefined
    70cc:	030050f0 	.inst	0x030050f0 ; undefined
    70d0:	00000000 	.inst	0x00000000 ; undefined
    70d4:	000008da 	.inst	0x000008da ; undefined
    70d8:	0350011c 	.inst	0x0350011c ; undefined
    70dc:	1c22970a 	ldr	s10, 4c3bc <_stack_size+0x4b3bc>
    70e0:	84025101 	.inst	0x84025101 ; undefined
    70e4:	52011c00 	eor	w0, w0, #0x8000007f
    70e8:	00003201 	.inst	0x00003201 ; undefined
    70ec:	08130000 	stxrb	w19, w0, [x0]
    70f0:	00000555 	.inst	0x00000555 ; undefined
    70f4:	0001261f 	.inst	0x0001261f ; undefined
    70f8:	03ed2000 	.inst	0x03ed2000 ; undefined
    70fc:	4a010000 	eor	w0, w0, w1
    7100:	0000003b 	.inst	0x0000003b ; undefined
    7104:	03005120 	.inst	0x03005120 ; undefined
    7108:	00000000 	.inst	0x00000000 ; undefined
    710c:	000000f8 	.inst	0x000000f8 ; undefined
    7110:	00000000 	.inst	0x00000000 ; undefined
    7114:	06459c01 	.inst	0x06459c01 ; undefined
    7118:	72210000 	ands	w0, w0, #0x80000000
    711c:	01007465 	.inst	0x01007465 ; undefined
    7120:	00003b4c 	.inst	0x00003b4c ; undefined
    7124:	007f2200 	.inst	0x007f2200 ; undefined
    7128:	1f862200 	.inst	0x1f862200 ; undefined
    712c:	4d010000 	.inst	0x4d010000 ; undefined
    7130:	00000057 	.inst	0x00000057 ; undefined
    7134:	ce230300 	.inst	0xce230300 ; undefined
    7138:	0100001e 	.inst	0x0100001e ; undefined
    713c:	0006454e 	.inst	0x0006454e ; undefined
    7140:	60030a00 	.inst	0x60030a00 ; undefined
    7144:	000300c2 	.inst	0x000300c2 ; undefined
    7148:	9f000000 	.inst	0x9f000000 ; undefined
    714c:	000c6e23 	.inst	0x000c6e23 ; undefined
    7150:	ee4f0100 	.inst	0xee4f0100 ; undefined
    7154:	02000003 	.inst	0x02000003 ; undefined
    7158:	3c247091 	.inst	0x3c247091 ; undefined
    715c:	00030051 	.inst	0x00030051 ; undefined
    7160:	ff000000 	.inst	0xff000000 ; undefined
    7164:	d8000008 	prfm	plil1keep, 7164 <_stack_size+0x6164>
    7168:	1c000005 	ldr	s5, 7168 <_stack_size+0x6168>
    716c:	32015001 	orr	w1, w0, #0x800fffff
    7170:	0251011c 	.inst	0x0251011c ; undefined
    7174:	25000084 	.inst	0x25000084 ; undefined
    7178:	030051a4 	.inst	0x030051a4 ; undefined
    717c:	00000000 	.inst	0x00000000 ; undefined
    7180:	00000919 	.inst	0x00000919 ; undefined
    7184:	0051d424 	.inst	0x0051d424 ; undefined
    7188:	00000003 	.inst	0x00000003 ; undefined
    718c:	00092400 	.inst	0x00092400 ; undefined
    7190:	00061100 	.inst	0x00061100 ; undefined
    7194:	50011c00 	adr	x0, 9516 <_stack_size+0x8516>
    7198:	1c008402 	ldr	s2, 8218 <_stack_size+0x7218>
    719c:	0a035101 	and	w1, w8, w3, lsl #20
    71a0:	011c0300 	.inst	0x011c0300 ; undefined
    71a4:	80850352 	.inst	0x80850352 ; undefined
    71a8:	53011c08 	ubfx	w8, w0, #1, #7
    71ac:	00709102 	.inst	0x00709102 ; undefined
    71b0:	0051e424 	.inst	0x0051e424 ; undefined
    71b4:	00000003 	.inst	0x00000003 ; undefined
    71b8:	00046300 	.inst	0x00046300 ; undefined
    71bc:	00062a00 	.inst	0x00062a00 ; undefined
    71c0:	50011c00 	adr	x0, 9542 <_stack_size+0x8542>
    71c4:	07f08503 	.inst	0x07f08503 ; undefined
    71c8:	520c2500 	eor	w0, w8, #0x3ff00000
    71cc:	00000300 	.inst	0x00000300 ; undefined
    71d0:	09530000 	.inst	0x09530000 ; undefined
    71d4:	14250000 	b	9471d4 <_stack_size+0x9461d4>
    71d8:	00030052 	.inst	0x00030052 ; undefined
    71dc:	5e000000 	sha1c	q0, s0, v0.4s
    71e0:	00000009 	.inst	0x00000009 ; undefined
    71e4:	00490813 	.inst	0x00490813 ; undefined
    71e8:	c5200000 	.inst	0xc5200000 ; undefined
    71ec:	01000004 	.inst	0x01000004 ; undefined
    71f0:	00003b91 	.inst	0x00003b91 ; undefined
    71f4:	00521800 	.inst	0x00521800 ; undefined
    71f8:	00000003 	.inst	0x00000003 ; undefined
    71fc:	00016000 	.inst	0x00016000 ; undefined
    7200:	00000000 	.inst	0x00000000 ; undefined
    7204:	729c0100 	movk	w0, #0xe008
    7208:	21000008 	.inst	0x21000008 ; undefined
    720c:	00746572 	.inst	0x00746572 ; undefined
    7210:	003b9301 	.inst	0x003b9301 ; NYI
    7214:	801e0000 	.inst	0x801e0000 ; undefined
    7218:	c0260000 	.inst	0xc0260000 ; undefined
    721c:	0100001d 	.inst	0x0100001d ; undefined
    7220:	00087294 	.inst	0x00087294 ; undefined
    7224:	01d40000 	.inst	0x01d40000 ; undefined
    7228:	1ebc2680 	.inst	0x1ebc2680 ; undefined
    722c:	95010000 	bl	404722c <_stack_base+0x1039aac>
    7230:	00000645 	.inst	0x00000645 ; undefined
    7234:	8001d558 	.inst	0x8001d558 ; undefined
    7238:	001f8623 	.inst	0x001f8623 ; undefined
    723c:	57970100 	.inst	0x57970100 ; undefined
    7240:	02000000 	.inst	0x02000000 ; undefined
    7244:	0c166c91 	.inst	0x0c166c91 ; undefined
    7248:	0100001e 	.inst	0x0100001e ; undefined
    724c:	00005798 	.inst	0x00005798 ; undefined
    7250:	00811a00 	.inst	0x00811a00 ; undefined
    7254:	1a3b1600 	.inst	0x1a3b1600 ; undefined
    7258:	99010000 	.inst	0x99010000 ; undefined
    725c:	00000057 	.inst	0x00000057 ; undefined
    7260:	00008150 	.inst	0x00008150 ; undefined
    7264:	001ece26 	.inst	0x001ece26 ; undefined
    7268:	459a0100 	.inst	0x459a0100 ; undefined
    726c:	00000006 	.inst	0x00000006 ; undefined
    7270:	23000300 	.inst	0x23000300 ; undefined
    7274:	00000c6e 	.inst	0x00000c6e ; undefined
    7278:	03ee9b01 	.inst	0x03ee9b01 ; undefined
    727c:	91020000 	add	x0, x0, #0x80
    7280:	1c5f1670 	ldr	s16, c554c <_stack_size+0xc454c>
    7284:	9c010000 	ldr	q0, 9284 <_stack_size+0x8284>
    7288:	00000878 	.inst	0x00000878 ; undefined
    728c:	00008186 	.inst	0x00008186 ; undefined
    7290:	01006927 	.inst	0x01006927 ; undefined
    7294:	00003b9d 	.inst	0x00003b9d ; undefined
    7298:	90280000 	adrp	x0, 50007000 <MPIDR_EL1_U+0x10007000>
    729c:	2d000007 	stp	s7, s0, [x0]
    72a0:	29000008 	stp	w8, w0, [x0]
    72a4:	0000008f 	.inst	0x0000008f ; undefined
    72a8:	003bb901 	.inst	0x003bb901 ; NYI
    72ac:	07150000 	.inst	0x07150000 ; undefined
    72b0:	002a0000 	.inst	0x002a0000 ; NYI
    72b4:	0053642b 	.inst	0x0053642b ; undefined
    72b8:	00000003 	.inst	0x00000003 ; undefined
    72bc:	00001400 	.inst	0x00001400 ; undefined
    72c0:	00000000 	.inst	0x00000000 ; undefined
    72c4:	00075c00 	.inst	0x00075c00 ; undefined
    72c8:	073c2c00 	.inst	0x073c2c00 ; undefined
    72cc:	00060000 	.inst	0x00060000 ; undefined
    72d0:	0000003b 	.inst	0x0000003b ; undefined
    72d4:	00000740 	.inst	0x00000740 ; undefined
    72d8:	00087e2d 	.inst	0x00087e2d ; undefined
    72dc:	1b002a00 	madd	w0, w16, w0, w10
    72e0:	03005370 	.inst	0x03005370 ; undefined
    72e4:	00000000 	.inst	0x00000000 ; undefined
    72e8:	00000969 	.inst	0x00000969 ; undefined
    72ec:	0950011c 	.inst	0x0950011c ; undefined
    72f0:	00a13803 	.inst	0x00a13803 ; undefined
    72f4:	00000003 	.inst	0x00000003 ; undefined
    72f8:	24000000 	.inst	0x24000000 ; undefined
    72fc:	0300529c 	.inst	0x0300529c ; undefined
    7300:	00000000 	.inst	0x00000000 ; undefined
    7304:	00000982 	.inst	0x00000982 ; undefined
    7308:	00000788 	.inst	0x00000788 ; undefined
    730c:	0950011c 	.inst	0x0950011c ; undefined
    7310:	00a11803 	.inst	0x00a11803 ; undefined
    7314:	00000003 	.inst	0x00000003 ; undefined
    7318:	51011c00 	sub	w0, w0, #0x47
    731c:	243d4803 	.inst	0x243d4803 ; undefined
    7320:	0252011c 	.inst	0x0252011c ; undefined
    7324:	24004008 	.inst	0x24004008 ; undefined
    7328:	030052ac 	.inst	0x030052ac ; undefined
    732c:	00000000 	.inst	0x00000000 ; undefined
    7330:	000009a4 	.inst	0x000009a4 ; undefined
    7334:	000007a1 	.inst	0x000007a1 ; undefined
    7338:	0350011c 	.inst	0x0350011c ; undefined
    733c:	00243d48 	.inst	0x00243d48 ; NYI
    7340:	0052cc24 	.inst	0x0052cc24 ; undefined
    7344:	00000003 	.inst	0x00000003 ; undefined
    7348:	0009b500 	.inst	0x0009b500 ; undefined
    734c:	0007c700 	.inst	0x0007c700 ; undefined
    7350:	50011c00 	adr	x0, 96d2 <_stack_size+0x86d2>
    7354:	243d4803 	.inst	0x243d4803 ; undefined
    7358:	0251011c 	.inst	0x0251011c ; undefined
    735c:	011c0085 	.inst	0x011c0085 ; undefined
    7360:	3d480352 	ldr	b18, [x26,#512]
    7364:	e8240024 	.inst	0xe8240024 ; undefined
    7368:	00030052 	.inst	0x00030052 ; undefined
    736c:	82000000 	.inst	0x82000000 ; undefined
    7370:	f3000009 	.inst	0xf3000009 ; undefined
    7374:	1c000007 	ldr	s7, 7374 <_stack_size+0x6374>
    7378:	03095001 	.inst	0x03095001 ; undefined
    737c:	0300a158 	.inst	0x0300a158 ; undefined
    7380:	00000000 	.inst	0x00000000 ; undefined
    7384:	0351011c 	.inst	0x0351011c ; undefined
    7388:	1c243d48 	ldr	s8, 4fb30 <_stack_size+0x4eb30>
    738c:	08025201 	stxrb	w2, w1, [x16]
    7390:	20240040 	.inst	0x20240040 ; undefined
    7394:	00030053 	.inst	0x00030053 ; undefined
    7398:	24000000 	.inst	0x24000000 ; undefined
    739c:	18000009 	ldr	w9, 739c <_stack_size+0x639c>
    73a0:	1c000008 	ldr	s8, 73a0 <_stack_size+0x63a0>
    73a4:	48035001 	stxrh	w3, w1, [x0]
    73a8:	011c243d 	.inst	0x011c243d ; undefined
    73ac:	70910253 	adr	x19, fffffffffff293f7 <SMC_ID_HW_RSA+0xffffffff7bf194f0>
    73b0:	0254011c 	.inst	0x0254011c ; undefined
    73b4:	1b000084 	madd	w4, w4, w0, w0
    73b8:	03005334 	.inst	0x03005334 ; undefined
    73bc:	00000000 	.inst	0x00000000 ; undefined
    73c0:	00000463 	.inst	0x00000463 ; undefined
    73c4:	0250011c 	.inst	0x0250011c ; undefined
    73c8:	00000483 	.inst	0x00000483 ; undefined
    73cc:	00527424 	.inst	0x00527424 ; undefined
    73d0:	00000003 	.inst	0x00000003 ; undefined
    73d4:	0009d900 	.inst	0x0009d900 ; undefined
    73d8:	00084500 	.inst	0x00084500 ; undefined
    73dc:	50011c00 	adr	x0, 975e <_stack_size+0x875e>
    73e0:	006c9102 	.inst	0x006c9102 ; undefined
    73e4:	00535424 	.inst	0x00535424 ; undefined
    73e8:	00000003 	.inst	0x00000003 ; undefined
    73ec:	0009ee00 	.inst	0x0009ee00 ; undefined
    73f0:	00085d00 	.inst	0x00085d00 ; undefined
    73f4:	50011c00 	adr	x0, 9776 <_stack_size+0x8776>
    73f8:	006c9102 	.inst	0x006c9102 ; undefined
    73fc:	0053601b 	.inst	0x0053601b ; undefined
    7400:	00000003 	.inst	0x00000003 ; undefined
    7404:	000a0300 	.inst	0x000a0300 ; undefined
    7408:	50011c00 	adr	x0, 978a <_stack_size+0x878a>
    740c:	006c9102 	.inst	0x006c9102 ; undefined
    7410:	df081300 	.inst	0xdf081300 ; undefined
    7414:	13000002 	sbfx	w2, w0, #0, #1
    7418:	00031c08 	.inst	0x00031c08 ; undefined
    741c:	84081300 	.inst	0x84081300 ; undefined
    7420:	1f000008 	fmadd	s8, s0, s0, s0
    7424:	00000889 	.inst	0x00000889 ; undefined
    7428:	07080102 	.inst	0x07080102 ; undefined
    742c:	23000001 	.inst	0x23000001 ; undefined
    7430:	00001d46 	.inst	0x00001d46 ; undefined
    7434:	00903801 	.inst	0x00903801 ; undefined
    7438:	03090000 	.inst	0x03090000 ; undefined
    743c:	0300c160 	.inst	0x0300c160 ; undefined
    7440:	00000000 	.inst	0x00000000 ; undefined
    7444:	0005062e 	.inst	0x0005062e ; undefined
    7448:	57320100 	.inst	0x57320100 ; undefined
    744c:	09000000 	.inst	0x09000000 ; undefined
    7450:	00a37403 	.inst	0x00a37403 ; undefined
    7454:	00000003 	.inst	0x00000003 ; undefined
    7458:	1ce22e00 	ldr	s0, fffffffffffcba18 <SMC_ID_HW_RSA+0xffffffff7bfbbb11>
    745c:	33010000 	bfi	w0, w0, #31, #1
    7460:	00000386 	.inst	0x00000386 ; undefined
    7464:	c2600309 	.inst	0xc2600309 ; undefined
    7468:	00000300 	.inst	0x00000300 ; undefined
    746c:	782f0000 	ldaddh	w15, w0, [x0]
    7470:	01000005 	.inst	0x01000005 ; undefined
    7474:	00003b2c 	.inst	0x00003b2c ; undefined
    7478:	139f2c00 	extr	w0, w0, wzr, #11
    747c:	26070000 	.inst	0x26070000 ; undefined
    7480:	00000070 	.inst	0x00000070 ; undefined
    7484:	000008f9 	.inst	0x000008f9 ; undefined
    7488:	0000702d 	.inst	0x0000702d ; undefined
    748c:	08f92d00 	.inst	0x08f92d00 ; undefined
    7490:	702d0000 	adr	x0, 61493 <_stack_size+0x60493>
    7494:	00000000 	.inst	0x00000000 ; undefined
    7498:	00700813 	.inst	0x00700813 ; undefined
    749c:	ab2c0000 	adds	x0, x0, w12, uxtb
    74a0:	07000014 	.inst	0x07000014 ; undefined
    74a4:	00003b2e 	.inst	0x00003b2e ; undefined
    74a8:	00091900 	.inst	0x00091900 ; undefined
    74ac:	00572d00 	.inst	0x00572d00 ; undefined
    74b0:	452d0000 	.inst	0x452d0000 ; undefined
    74b4:	00000006 	.inst	0x00000006 ; undefined
    74b8:	001c9f30 	.inst	0x001c9f30 ; undefined
    74bc:	3b220900 	.inst	0x3b220900 ; undefined
    74c0:	2c000000 	stnp	s0, s0, [x0]
    74c4:	00001a17 	.inst	0x00001a17 ; undefined
    74c8:	003b2008 	.inst	0x003b2008 ; NYI
    74cc:	094d0000 	.inst	0x094d0000 ; undefined
    74d0:	ec2d0000 	.inst	0xec2d0000 ; undefined
    74d4:	2d000003 	stp	s3, s0, [x0]
    74d8:	00000057 	.inst	0x00000057 ; undefined
    74dc:	0003ec2d 	.inst	0x0003ec2d ; undefined
    74e0:	094d2d00 	.inst	0x094d2d00 ; undefined
    74e4:	492d0000 	.inst	0x492d0000 ; undefined
    74e8:	00000000 	.inst	0x00000000 ; undefined
    74ec:	03ee0813 	.inst	0x03ee0813 ; undefined
    74f0:	fa300000 	.inst	0xfa300000 ; undefined
    74f4:	0a00001b 	and	w27, w0, w0
    74f8:	00003b22 	.inst	0x00003b22 ; undefined
    74fc:	1ddf3000 	.inst	0x1ddf3000 ; undefined
    7500:	210b0000 	.inst	0x210b0000 ; undefined
    7504:	0000003b 	.inst	0x0000003b ; undefined
    7508:	001b3231 	.inst	0x001b3231 ; undefined
    750c:	3c000600 	str	b0, [x16],#0
    7510:	3b00001b 	.inst	0x3b00001b ; undefined
    7514:	82000000 	.inst	0x82000000 ; undefined
    7518:	2d000009 	stp	s9, s0, [x0]
    751c:	0000087e 	.inst	0x0000087e ; undefined
    7520:	0dc43200 	ld3	{v0.b-v2.b}[4], [x16], x4
    7524:	590c0000 	.inst	0x590c0000 ; undefined
    7528:	0000099d 	.inst	0x0000099d ; undefined
    752c:	00087e2d 	.inst	0x00087e2d ; undefined
    7530:	099d2d00 	.inst	0x099d2d00 ; undefined
    7534:	572d0000 	.inst	0x572d0000 ; undefined
    7538:	00000000 	.inst	0x00000000 ; undefined
    753c:	09a30813 	.inst	0x09a30813 ; undefined
    7540:	29330000 	stp	w0, w0, [x0,#-104]
    7544:	0000008f 	.inst	0x0000008f ; undefined
    7548:	003bb901 	.inst	0x003bb901 ; NYI
    754c:	09b50000 	.inst	0x09b50000 ; undefined
    7550:	002a0000 	.inst	0x002a0000 ; NYI
    7554:	001c472c 	.inst	0x001c472c ; undefined
    7558:	3b220d00 	.inst	0x3b220d00 ; undefined
    755c:	d9000000 	.inst	0xd9000000 ; undefined
    7560:	2d000009 	stp	s9, s0, [x0]
    7564:	00000057 	.inst	0x00000057 ; undefined
    7568:	0000572d 	.inst	0x0000572d ; undefined
    756c:	00572d00 	.inst	0x00572d00 ; undefined
    7570:	572d0000 	.inst	0x572d0000 ; undefined
    7574:	00000000 	.inst	0x00000000 ; undefined
    7578:	001a7d2c 	.inst	0x001a7d2c ; undefined
    757c:	3b220b00 	.inst	0x3b220b00 ; undefined
    7580:	ee000000 	.inst	0xee000000 ; undefined
    7584:	2d000009 	stp	s9, s0, [x0]
    7588:	00000423 	.inst	0x00000423 ; undefined
    758c:	1b732c00 	.inst	0x1b732c00 ; undefined
    7590:	23090000 	.inst	0x23090000 ; undefined
    7594:	0000003b 	.inst	0x0000003b ; undefined
    7598:	00000a03 	.inst	0x00000a03 ; undefined
    759c:	0004232d 	.inst	0x0004232d ; undefined
    75a0:	3a340000 	.inst	0x3a340000 ; undefined
    75a4:	0a00001e 	and	w30, w0, w0
    75a8:	00003b23 	.inst	0x00003b23 ; undefined
    75ac:	04232d00 	.inst	0x04232d00 ; undefined
    75b0:	00000000 	.inst	0x00000000 ; undefined
    75b4:	00000af3 	.inst	0x00000af3 ; undefined
    75b8:	1bbc0004 	.inst	0x1bbc0004 ; undefined
    75bc:	01080000 	.inst	0x01080000 ; undefined
    75c0:	00000189 	.inst	0x00000189 ; undefined
    75c4:	001fa701 	.inst	0x001fa701 ; undefined
    75c8:	00537800 	.inst	0x00537800 ; undefined
    75cc:	00000003 	.inst	0x00000003 ; undefined
    75d0:	00036c00 	.inst	0x00036c00 ; undefined
    75d4:	00000000 	.inst	0x00000000 ; undefined
    75d8:	00256700 	.inst	0x00256700 ; NYI
    75dc:	06010200 	.inst	0x06010200 ; undefined
    75e0:	00000100 	.inst	0x00000100 ; undefined
    75e4:	2b050202 	adds	w2, w16, w5
    75e8:	03000000 	.inst	0x03000000 ; undefined
    75ec:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    75f0:	08020074 	stxrb	w2, w20, [x3]
    75f4:	0000a905 	.inst	0x0000a905 ; undefined
    75f8:	08010200 	stxrb	w1, w0, [x16]
    75fc:	000000fe 	.inst	0x000000fe ; undefined
    7600:	31070202 	adds	w2, w16, #0x1c0
    7604:	02000001 	.inst	0x02000001 ; undefined
    7608:	01160704 	.inst	0x01160704 ; undefined
    760c:	08020000 	stxrb	w2, w0, [x0]
    7610:	00011107 	.inst	0x00011107 ; undefined
    7614:	00850400 	.inst	0x00850400 ; undefined
    7618:	7a020000 	sbcs	w0, w0, w2
    761c:	0000005a 	.inst	0x0000005a ; undefined
    7620:	00060404 	.inst	0x00060404 ; undefined
    7624:	450d0300 	.inst	0x450d0300 ; undefined
    7628:	04000000 	.inst	0x04000000 ; undefined
    762c:	0000003f 	.inst	0x0000003f ; undefined
    7630:	00531103 	.inst	0x00531103 ; undefined
    7634:	08020000 	stxrb	w2, w0, [x0]
    7638:	00010c07 	.inst	0x00010c07 ; undefined
    763c:	05080200 	.inst	0x05080200 ; undefined
    7640:	000000a4 	.inst	0x000000a4 ; undefined
    7644:	19040405 	.inst	0x19040405 ; undefined
    7648:	000000c9 	.inst	0x000000c9 ; undefined
    764c:	0008a406 	.inst	0x0008a406 ; undefined
    7650:	8b060000 	add	x0, x0, x6
    7654:	0100000a 	.inst	0x0100000a ; undefined
    7658:	000a9606 	.inst	0x000a9606 ; undefined
    765c:	68060200 	.inst	0x68060200 ; undefined
    7660:	03000008 	.inst	0x03000008 ; undefined
    7664:	00091306 	.inst	0x00091306 ; undefined
    7668:	1c060400 	ldr	s0, 136e8 <_stack_size+0x126e8>
    766c:	05000009 	.inst	0x05000009 ; undefined
    7670:	00092506 	.inst	0x00092506 ; undefined
    7674:	2e060600 	.inst	0x2e060600 ; undefined
    7678:	07000009 	.inst	0x07000009 ; undefined
    767c:	0a0d0400 	and	w0, w0, w13, lsl #1
    7680:	22040000 	.inst	0x22040000 ; undefined
    7684:	00000090 	.inst	0x00000090 ; undefined
    7688:	00039607 	.inst	0x00039607 ; undefined
    768c:	2f051000 	.inst	0x2f051000 ; undefined
    7690:	00000123 	.inst	0x00000123 ; undefined
    7694:	0013d308 	.inst	0x0013d308 ; undefined
    7698:	53300500 	.inst	0x53300500 ; undefined
    769c:	00000000 	.inst	0x00000000 ; undefined
    76a0:	00033c08 	.inst	0x00033c08 ; undefined
    76a4:	53310500 	.inst	0x53310500 ; undefined
    76a8:	04000000 	.inst	0x04000000 ; undefined
    76ac:	00085a08 	.inst	0x00085a08 ; undefined
    76b0:	53320500 	.inst	0x53320500 ; undefined
    76b4:	08000000 	stxrb	w0, w0, [x0]
    76b8:	00042709 	.inst	0x00042709 ; undefined
    76bc:	53340500 	.inst	0x53340500 ; undefined
    76c0:	04000000 	.inst	0x04000000 ; undefined
    76c4:	090c1f01 	.inst	0x090c1f01 ; undefined
    76c8:	000005b7 	.inst	0x000005b7 ; undefined
    76cc:	00533505 	.inst	0x00533505 ; undefined
    76d0:	1f040000 	fmadd	s0, s0, s4, s0
    76d4:	04000c00 	.inst	0x04000c00 ; undefined
    76d8:	000003be 	.inst	0x000003be ; undefined
    76dc:	00d43605 	.inst	0x00d43605 ; undefined
    76e0:	08020000 	stxrb	w2, w0, [x0]
    76e4:	00059d07 	.inst	0x00059d07 ; undefined
    76e8:	00450a00 	.inst	0x00450a00 ; undefined
    76ec:	01450000 	.inst	0x01450000 ; undefined
    76f0:	2e0b0000 	ext	v0.8b, v0.8b, v11.8b, #0
    76f4:	ff000001 	.inst	0xff000001 ; undefined
    76f8:	1bde0700 	.inst	0x1bde0700 ; undefined
    76fc:	06100000 	.inst	0x06100000 ; undefined
    7700:	00018225 	.inst	0x00018225 ; undefined
    7704:	1d530800 	.inst	0x1d530800 ; undefined
    7708:	26060000 	.inst	0x26060000 ; undefined
    770c:	00000053 	.inst	0x00000053 ; undefined
    7710:	1b960800 	.inst	0x1b960800 ; undefined
    7714:	27060000 	.inst	0x27060000 ; undefined
    7718:	00000053 	.inst	0x00000053 ; undefined
    771c:	1e540804 	.inst	0x1e540804 ; undefined
    7720:	28060000 	stnp	w0, w0, [x0,#48]
    7724:	00000053 	.inst	0x00000053 ; undefined
    7728:	1c660808 	ldr	s8, d3828 <_stack_size+0xd2828>
    772c:	29060000 	stp	w0, w0, [x0,#48]
    7730:	00000053 	.inst	0x00000053 ; undefined
    7734:	f904000c 	str	x12, [x0,#2048]
    7738:	06000019 	.inst	0x06000019 ; undefined
    773c:	0001452a 	.inst	0x0001452a ; undefined
    7740:	21280c00 	.inst	0x21280c00 ; undefined
    7744:	04000000 	.inst	0x04000000 ; undefined
    7748:	01db9a06 	.inst	0x01db9a06 ; undefined
    774c:	70080000 	adr	x0, 1774f <_stack_size+0x1674f>
    7750:	0600001c 	.inst	0x0600001c ; undefined
    7754:	0001359b 	.inst	0x0001359b ; undefined
    7758:	110d0000 	add	w0, w0, #0x340
    775c:	0600001d 	.inst	0x0600001d ; undefined
    7760:	0000539c 	.inst	0x0000539c ; undefined
    7764:	0d010000 	.inst	0x0d010000 ; undefined
    7768:	00001ec6 	.inst	0x00001ec6 ; undefined
    776c:	01db9d06 	.inst	0x01db9d06 ; undefined
    7770:	01040000 	.inst	0x01040000 ; undefined
    7774:	001bde0d 	.inst	0x001bde0d ; undefined
    7778:	829e0600 	.inst	0x829e0600 ; undefined
    777c:	f0000001 	adrp	x1, a000 <_stack_size+0x9000>
    7780:	1c830d02 	ldr	s2, fffffffffff0d920 <SMC_ID_HW_RSA+0xffffffff7befda19>
    7784:	9f060000 	.inst	0x9f060000 ; undefined
    7788:	00000135 	.inst	0x00000135 ; undefined
    778c:	0a000300 	and	w0, w24, w0
    7790:	00000045 	.inst	0x00000045 ; undefined
    7794:	000001ec 	.inst	0x000001ec ; undefined
    7798:	00012e0e 	.inst	0x00012e0e ; undefined
    779c:	0001eb00 	.inst	0x0001eb00 ; undefined
    77a0:	001ed504 	.inst	0x001ed504 ; undefined
    77a4:	8da00600 	.inst	0x8da00600 ; undefined
    77a8:	0f000001 	.inst	0x0f000001 ; undefined
    77ac:	00001f49 	.inst	0x00001f49 ; undefined
    77b0:	10240104 	adr	x4, 4f7d0 <_stack_size+0x4e7d0>
    77b4:	06000002 	.inst	0x06000002 ; undefined
    77b8:	00001f01 	.inst	0x00001f01 ; undefined
    77bc:	1f2d0600 	fnmadd	s0, s16, s13, s1
    77c0:	00010000 	.inst	0x00010000 ; undefined
    77c4:	001f2004 	.inst	0x001f2004 ; undefined
    77c8:	f7270100 	.inst	0xf7270100 ; undefined
    77cc:	10000001 	adr	x1, 77cc <_stack_size+0x67cc>
    77d0:	00001f06 	.inst	0x00001f06 ; undefined
    77d4:	37011e01 	tbnz	w1, #0, 9b94 <_stack_size+0x8b94>
    77d8:	01000000 	.inst	0x01000000 ; undefined
    77dc:	0000025d 	.inst	0x0000025d ; undefined
    77e0:	0013d311 	.inst	0x0013d311 ; undefined
    77e4:	011e0100 	.inst	0x011e0100 ; undefined
    77e8:	00000210 	.inst	0x00000210 ; undefined
    77ec:	72747012 	.inst	0x72747012 ; undefined
    77f0:	011e0100 	.inst	0x011e0100 ; undefined
    77f4:	0000025d 	.inst	0x0000025d ; undefined
    77f8:	001f8b11 	.inst	0x001f8b11 ; undefined
    77fc:	011e0100 	.inst	0x011e0100 ; undefined
    7800:	00000263 	.inst	0x00000263 ; undefined
    7804:	001f1911 	.inst	0x001f1911 ; undefined
    7808:	011e0100 	.inst	0x011e0100 ; undefined
    780c:	00000269 	.inst	0x00000269 ; undefined
    7810:	23081300 	.inst	0x23081300 ; undefined
    7814:	13000001 	sbfx	w1, w0, #0, #1
    7818:	0000c908 	.inst	0x0000c908 ; undefined
    781c:	53081300 	ubfiz	w0, w24, #24, #5
    7820:	14000000 	b	7820 <_stack_size+0x6820>
    7824:	00001f90 	.inst	0x00001f90 ; undefined
    7828:	00376f01 	.inst	0x00376f01 ; NYI
    782c:	b9010000 	str	w0, [x0,#256]
    7830:	15000002 	b	4007838 <_stack_base+0xffa0b8>
    7834:	000013d3 	.inst	0x000013d3 ; undefined
    7838:	02106f01 	.inst	0x02106f01 ; undefined
    783c:	8b160000 	add	x0, x0, x22
    7840:	0100001f 	.inst	0x0100001f ; undefined
    7844:	0000c971 	.inst	0x0000c971 ; undefined
    7848:	1f191600 	fmadd	s0, s16, s25, s5
    784c:	72010000 	ands	w0, w0, #0x80000000
    7850:	00000053 	.inst	0x00000053 ; undefined
    7854:	72747017 	.inst	0x72747017 ; undefined
    7858:	5d730100 	.inst	0x5d730100 ; undefined
    785c:	18000002 	ldr	w2, 785c <_stack_size+0x685c>
    7860:	00000e22 	.inst	0x00000e22 ; undefined
    7864:	000002d0 	.inst	0x000002d0 ; undefined
    7868:	00001f90 	.inst	0x00001f90 ; undefined
    786c:	02c90a00 	.inst	0x02c90a00 ; undefined
    7870:	02c90000 	.inst	0x02c90000 ; undefined
    7874:	2e0b0000 	ext	v0.8b, v0.8b, v11.8b, #0
    7878:	16000001 	b	fffffffff800787c <SMC_ID_HW_RSA+0xffffffff73ff7975>
    787c:	08010200 	stxrb	w1, w0, [x16]
    7880:	00000107 	.inst	0x00000107 ; undefined
    7884:	0002b919 	.inst	0x0002b919 ; undefined
    7888:	1f341400 	fnmadd	s0, s0, s20, s5
    788c:	ad010000 	stp	q0, q0, [x0,#32]
    7890:	00000037 	.inst	0x00000037 ; undefined
    7894:	00032a01 	.inst	0x00032a01 ; undefined
    7898:	13d31500 	.inst	0x13d31500 ; undefined
    789c:	ad010000 	stp	q0, q0, [x0,#32]
    78a0:	00000210 	.inst	0x00000210 ; undefined
    78a4:	001f8615 	.inst	0x001f8615 ; undefined
    78a8:	69ad0100 	.inst	0x69ad0100 ; undefined
    78ac:	16000002 	b	fffffffff80078b4 <SMC_ID_HW_RSA+0xffffffff73ff79ad>
    78b0:	00001f8b 	.inst	0x00001f8b ; undefined
    78b4:	00c9af01 	.inst	0x00c9af01 ; undefined
    78b8:	19160000 	.inst	0x19160000 ; undefined
    78bc:	0100001f 	.inst	0x0100001f ; undefined
    78c0:	000053b0 	.inst	0x000053b0 ; undefined
    78c4:	74701700 	.inst	0x74701700 ; undefined
    78c8:	b1010072 	adds	x18, x3, #0x40
    78cc:	0000025d 	.inst	0x0000025d ; undefined
    78d0:	000e2218 	.inst	0x000e2218 ; undefined
    78d4:	00033a00 	.inst	0x00033a00 ; undefined
    78d8:	001f3400 	.inst	0x001f3400 ; undefined
    78dc:	c90a0000 	.inst	0xc90a0000 ; undefined
    78e0:	3a000002 	adcs	w2, w0, w0
    78e4:	0b000003 	add	w3, w0, w0
    78e8:	0000012e 	.inst	0x0000012e ; undefined
    78ec:	2a190014 	orr	w20, w0, w25
    78f0:	1a000003 	adc	w3, w0, w0
    78f4:	00001f54 	.inst	0x00001f54 ; undefined
    78f8:	0037ec01 	.inst	0x0037ec01 ; NYI
    78fc:	53780000 	.inst	0x53780000 ; undefined
    7900:	00000300 	.inst	0x00000300 ; undefined
    7904:	011c0000 	.inst	0x011c0000 ; undefined
    7908:	00000000 	.inst	0x00000000 ; undefined
    790c:	9c010000 	ldr	q0, 990c <_stack_size+0x890c>
    7910:	00000559 	.inst	0x00000559 ; undefined
    7914:	001f8b1b 	.inst	0x001f8b1b ; undefined
    7918:	c9ec0100 	.inst	0xc9ec0100 ; undefined
    791c:	a9000000 	stp	x0, x0, [x0]
    7920:	1b000081 	madd	w1, w4, w0, w0
    7924:	00001f19 	.inst	0x00001f19 ; undefined
    7928:	0053ec01 	.inst	0x0053ec01 ; undefined
    792c:	82310000 	.inst	0x82310000 ; undefined
    7930:	6c1c0000 	stnp	d0, d0, [x0,#448]
    7934:	01006e65 	.inst	0x01006e65 ; undefined
    7938:	000053ec 	.inst	0x000053ec ; undefined
    793c:	00829000 	.inst	0x00829000 ; undefined
    7940:	73641c00 	.inst	0x73641c00 ; undefined
    7944:	ec010074 	.inst	0xec010074 ; undefined
    7948:	00000559 	.inst	0x00000559 ; undefined
    794c:	000082ef 	.inst	0x000082ef ; undefined
    7950:	7465721d 	.inst	0x7465721d ; undefined
    7954:	37ee0100 	tbnz	w0, #29, 3974 <_stack_size+0x2974>
    7958:	4e000000 	tbl	v0.16b, {v0.16b}, v0.16b
    795c:	1e000083 	.inst	0x1e000083 ; undefined
    7960:	0000098f 	.inst	0x0000098f ; undefined
    7964:	0053ef01 	.inst	0x0053ef01 ; undefined
    7968:	83e90000 	.inst	0x83e90000 ; undefined
    796c:	691e0000 	.inst	0x691e0000 ; undefined
    7970:	0100001f 	.inst	0x0100001f ; undefined
    7974:	000053f0 	.inst	0x000053f0 ; undefined
    7978:	00845600 	.inst	0x00845600 ; undefined
    797c:	0e6a1f00 	bic	v0.8b, v24.8b, v10.8b
    7980:	f1010000 	subs	x0, x0, #0x40
    7984:	0000055f 	.inst	0x0000055f ; undefined
    7988:	7c809103 	.inst	0x7c809103 ; undefined
    798c:	0053ac20 	.inst	0x0053ac20 ; undefined
    7990:	00000003 	.inst	0x00000003 ; undefined
    7994:	000a6b00 	.inst	0x000a6b00 ; undefined
    7998:	0003f700 	.inst	0x0003f700 ; undefined
    799c:	50012100 	adr	x0, 9dbe <_stack_size+0x8dbe>
    79a0:	a1780309 	.inst	0xa1780309 ; undefined
    79a4:	00000300 	.inst	0x00000300 ; undefined
    79a8:	20000000 	.inst	0x20000000 ; undefined
    79ac:	030053b4 	.inst	0x030053b4 ; undefined
    79b0:	00000000 	.inst	0x00000000 ; undefined
    79b4:	00000a88 	.inst	0x00000a88 ; undefined
    79b8:	0000040f 	.inst	0x0000040f ; undefined
    79bc:	02500121 	.inst	0x02500121 ; undefined
    79c0:	20000086 	.inst	0x20000086 ; undefined
    79c4:	030053bc 	.inst	0x030053bc ; undefined
    79c8:	00000000 	.inst	0x00000000 ; undefined
    79cc:	00000a6b 	.inst	0x00000a6b ; undefined
    79d0:	00000427 	.inst	0x00000427 ; undefined
    79d4:	02500121 	.inst	0x02500121 ; undefined
    79d8:	20000083 	.inst	0x20000083 ; undefined
    79dc:	030053c4 	.inst	0x030053c4 ; undefined
    79e0:	00000000 	.inst	0x00000000 ; undefined
    79e4:	00000a88 	.inst	0x00000a88 ; undefined
    79e8:	0000043f 	.inst	0x0000043f ; undefined
    79ec:	02500121 	.inst	0x02500121 ; undefined
    79f0:	20000087 	.inst	0x20000087 ; undefined
    79f4:	030053cc 	.inst	0x030053cc ; undefined
    79f8:	00000000 	.inst	0x00000000 ; undefined
    79fc:	00000a6b 	.inst	0x00000a6b ; undefined
    7a00:	00000457 	.inst	0x00000457 ; undefined
    7a04:	02500121 	.inst	0x02500121 ; undefined
    7a08:	20000083 	.inst	0x20000083 ; undefined
    7a0c:	030053d4 	.inst	0x030053d4 ; undefined
    7a10:	00000000 	.inst	0x00000000 ; undefined
    7a14:	00000a88 	.inst	0x00000a88 ; undefined
    7a18:	0000046f 	.inst	0x0000046f ; undefined
    7a1c:	02500121 	.inst	0x02500121 ; undefined
    7a20:	20000084 	.inst	0x20000084 ; undefined
    7a24:	030053dc 	.inst	0x030053dc ; undefined
    7a28:	00000000 	.inst	0x00000000 ; undefined
    7a2c:	00000a6b 	.inst	0x00000a6b ; undefined
    7a30:	00000487 	.inst	0x00000487 ; undefined
    7a34:	02500121 	.inst	0x02500121 ; undefined
    7a38:	20000083 	.inst	0x20000083 ; undefined
    7a3c:	030053e4 	.inst	0x030053e4 ; undefined
    7a40:	00000000 	.inst	0x00000000 ; undefined
    7a44:	00000a88 	.inst	0x00000a88 ; undefined
    7a48:	0000049f 	.inst	0x0000049f ; undefined
    7a4c:	02500121 	.inst	0x02500121 ; undefined
    7a50:	20000085 	.inst	0x20000085 ; undefined
    7a54:	030053f0 	.inst	0x030053f0 ; undefined
    7a58:	00000000 	.inst	0x00000000 ; undefined
    7a5c:	00000a6b 	.inst	0x00000a6b ; undefined
    7a60:	000004be 	.inst	0x000004be ; undefined
    7a64:	09500121 	.inst	0x09500121 ; undefined
    7a68:	009d4803 	.inst	0x009d4803 ; undefined
    7a6c:	00000003 	.inst	0x00000003 ; undefined
    7a70:	1c200000 	ldr	s0, 47a70 <_stack_size+0x46a70>
    7a74:	00030054 	.inst	0x00030054 ; undefined
    7a78:	9a000000 	adc	x0, x0, x0
    7a7c:	d600000a 	.inst	0xd600000a ; undefined
    7a80:	21000004 	.inst	0x21000004 ; undefined
    7a84:	86025001 	.inst	0x86025001 ; undefined
    7a88:	44200000 	.inst	0x44200000 ; undefined
    7a8c:	00030054 	.inst	0x00030054 ; undefined
    7a90:	ab000000 	adds	x0, x0, x0
    7a94:	0200000a 	.inst	0x0200000a ; undefined
    7a98:	21000005 	.inst	0x21000005 ; undefined
    7a9c:	30015001 	adr	x1, a49d <_stack_size+0x949d>
    7aa0:	05510121 	.inst	0x05510121 ; undefined
    7aa4:	00870083 	.inst	0x00870083 ; undefined
    7aa8:	52012122 	eor	w2, w9, #0x800000ff
    7aac:	01213101 	.inst	0x01213101 ; undefined
    7ab0:	80910353 	.inst	0x80910353 ; undefined
    7ab4:	6420007c 	.inst	0x6420007c ; undefined
    7ab8:	00030054 	.inst	0x00030054 ; undefined
    7abc:	d5000000 	msr	s0_0_c0_c0_0, x0
    7ac0:	3300000a 	bfxil	w10, w0, #0, #1
    7ac4:	21000005 	.inst	0x21000005 ; undefined
    7ac8:	850e5001 	.inst	0x850e5001 ; undefined
    7acc:	0c008600 	st2	{v0.4h, v1.4h}, [x16]
    7ad0:	ffffffff 	.inst	0xffffffff ; undefined
    7ad4:	00841c1a 	.inst	0x00841c1a ; undefined
    7ad8:	51012122 	sub	w2, w9, #0x48
    7adc:	7c809103 	.inst	0x7c809103 ; undefined
    7ae0:	02520121 	.inst	0x02520121 ; undefined
    7ae4:	22000086 	.inst	0x22000086 ; undefined
    7ae8:	03005488 	.inst	0x03005488 ; undefined
    7aec:	00000000 	.inst	0x00000000 ; undefined
    7af0:	00000aab 	.inst	0x00000aab ; undefined
    7af4:	01500121 	.inst	0x01500121 ; undefined
    7af8:	51012130 	sub	w16, w9, #0x48
    7afc:	21008702 	.inst	0x21008702 ; undefined
    7b00:	83025201 	.inst	0x83025201 ; undefined
    7b04:	53012100 	ubfx	w0, w8, #1, #8
    7b08:	00008502 	.inst	0x00008502 ; undefined
    7b0c:	45081300 	.inst	0x45081300 ; undefined
    7b10:	0a000000 	and	w0, w0, w0
    7b14:	00000045 	.inst	0x00000045 ; undefined
    7b18:	00000570 	.inst	0x00000570 ; undefined
    7b1c:	00012e0e 	.inst	0x00012e0e ; undefined
    7b20:	0001ff00 	.inst	0x0001ff00 ; undefined
    7b24:	001bfa23 	.inst	0x001bfa23 ; undefined
    7b28:	37840100 	tbnz	w0, #16, fffffffffffffb48 <SMC_ID_HW_RSA+0xffffffff7bfefc41>
    7b2c:	94000000 	bl	7b2c <_stack_size+0x6b2c>
    7b30:	00030054 	.inst	0x00030054 ; undefined
    7b34:	1c000000 	ldr	s0, 7b34 <_stack_size+0x6b34>
    7b38:	00000001 	.inst	0x00000001 ; undefined
    7b3c:	01000000 	.inst	0x01000000 ; undefined
    7b40:	0007cd9c 	.inst	0x0007cd9c ; undefined
    7b44:	65722400 	.inst	0x65722400 ; undefined
    7b48:	86010074 	.inst	0x86010074 ; undefined
    7b4c:	00000037 	.inst	0x00000037 ; undefined
    7b50:	026f25ff 	.inst	0x026f25ff ; undefined
    7b54:	54980000 	b.eq	fffffffffff37b54 <SMC_ID_HW_RSA+0xffffffff7bf27c4d>
    7b58:	00000300 	.inst	0x00000300 ; undefined
    7b5c:	07c00000 	.inst	0x07c00000 ; undefined
    7b60:	88010000 	stxr	w1, w0, [x0]
    7b64:	00027f26 	.inst	0x00027f26 ; undefined
    7b68:	c0270000 	.inst	0xc0270000 ; undefined
    7b6c:	28000007 	stnp	w7, w0, [x0]
    7b70:	0000028a 	.inst	0x0000028a ; undefined
    7b74:	000084cb 	.inst	0x000084cb ; undefined
    7b78:	00029528 	.inst	0x00029528 ; undefined
    7b7c:	00852900 	.inst	0x00852900 ; undefined
    7b80:	02a02800 	.inst	0x02a02800 ; undefined
    7b84:	85720000 	.inst	0x85720000 ; undefined
    7b88:	ab290000 	adds	x0, x0, w9, uxtb
    7b8c:	09000002 	.inst	0x09000002 ; undefined
    7b90:	009b7003 	.inst	0x009b7003 ; undefined
    7b94:	00000003 	.inst	0x00000003 ; undefined
    7b98:	021b2a00 	.inst	0x021b2a00 ; undefined
    7b9c:	54a80000 	b.eq	fffffffffff57b9c <SMC_ID_HW_RSA+0xffffffff7bf47c95>
    7ba0:	00000300 	.inst	0x00000300 ; undefined
    7ba4:	08100000 	stxrb	w16, w0, [x0]
    7ba8:	75010000 	.inst	0x75010000 ; undefined
    7bac:	00000624 	.inst	0x00000624 ; undefined
    7bb0:	00022c26 	.inst	0x00022c26 ; undefined
    7bb4:	502b0000 	adr	x0, 5dbb6 <_stack_size+0x5cbb6>
    7bb8:	06000002 	.inst	0x06000002 ; undefined
    7bbc:	007b78f2 	.inst	0x007b78f2 ; undefined
    7bc0:	442b0000 	.inst	0x442b0000 ; undefined
    7bc4:	06000002 	.inst	0x06000002 ; undefined
    7bc8:	007b6ff2 	.inst	0x007b6ff2 ; undefined
    7bcc:	382c0000 	ldaddb	w12, w0, [x0]
    7bd0:	72000002 	ands	w2, w0, #0x1
    7bd4:	00000085 	.inst	0x00000085 ; undefined
    7bd8:	0054e820 	.inst	0x0054e820 ; undefined
    7bdc:	00000003 	.inst	0x00000003 ; undefined
    7be0:	000a6b00 	.inst	0x000a6b00 ; undefined
    7be4:	00064300 	.inst	0x00064300 ; undefined
    7be8:	50012100 	adr	x0, a00a <_stack_size+0x900a>
    7bec:	9b700309 	.inst	0x9b700309 ; undefined
    7bf0:	00000300 	.inst	0x00000300 ; undefined
    7bf4:	20000000 	.inst	0x20000000 ; undefined
    7bf8:	030054f8 	.inst	0x030054f8 ; undefined
    7bfc:	00000000 	.inst	0x00000000 ; undefined
    7c00:	00000a6b 	.inst	0x00000a6b ; undefined
    7c04:	0000065b 	.inst	0x0000065b ; undefined
    7c08:	02500121 	.inst	0x02500121 ; undefined
    7c0c:	20000085 	.inst	0x20000085 ; undefined
    7c10:	03005500 	.inst	0x03005500 ; undefined
    7c14:	00000000 	.inst	0x00000000 ; undefined
    7c18:	00000a88 	.inst	0x00000a88 ; undefined
    7c1c:	00000672 	.inst	0x00000672 ; undefined
    7c20:	01500121 	.inst	0x01500121 ; undefined
    7c24:	08200030 	.inst	0x08200030 ; undefined
    7c28:	00030055 	.inst	0x00030055 ; undefined
    7c2c:	6b000000 	subs	w0, w0, w0
    7c30:	8a00000a 	and	x10, x0, x0
    7c34:	21000006 	.inst	0x21000006 ; undefined
    7c38:	84025001 	.inst	0x84025001 ; undefined
    7c3c:	14200000 	b	807c3c <_stack_size+0x806c3c>
    7c40:	00030055 	.inst	0x00030055 ; undefined
    7c44:	6b000000 	subs	w0, w0, w0
    7c48:	a900000a 	stp	x10, x0, [x0]
    7c4c:	21000006 	.inst	0x21000006 ; undefined
    7c50:	03095001 	.inst	0x03095001 ; undefined
    7c54:	0300a190 	.inst	0x0300a190 ; undefined
    7c58:	00000000 	.inst	0x00000000 ; undefined
    7c5c:	55202000 	.inst	0x55202000 ; undefined
    7c60:	00000300 	.inst	0x00000300 ; undefined
    7c64:	0a6b0000 	bic	w0, w0, w11, lsr #0
    7c68:	06c80000 	.inst	0x06c80000 ; undefined
    7c6c:	01210000 	.inst	0x01210000 ; undefined
    7c70:	a0030950 	.inst	0xa0030950 ; undefined
    7c74:	000300a1 	.inst	0x000300a1 ; undefined
    7c78:	00000000 	.inst	0x00000000 ; undefined
    7c7c:	00552820 	.inst	0x00552820 ; undefined
    7c80:	00000003 	.inst	0x00000003 ; undefined
    7c84:	000a6b00 	.inst	0x000a6b00 ; undefined
    7c88:	0006e000 	.inst	0x0006e000 ; undefined
    7c8c:	50012100 	adr	x0, a0ae <_stack_size+0x90ae>
    7c90:	00008502 	.inst	0x00008502 ; undefined
    7c94:	0055302d 	.inst	0x0055302d ; undefined
    7c98:	00000003 	.inst	0x00000003 ; undefined
    7c9c:	000a8800 	.inst	0x000a8800 ; undefined
    7ca0:	55382000 	.inst	0x55382000 ; undefined
    7ca4:	00000300 	.inst	0x00000300 ; undefined
    7ca8:	0a6b0000 	bic	w0, w0, w11, lsr #0
    7cac:	07050000 	.inst	0x07050000 ; undefined
    7cb0:	01210000 	.inst	0x01210000 ; undefined
    7cb4:	00840250 	.inst	0x00840250 ; undefined
    7cb8:	55442000 	.inst	0x55442000 ; undefined
    7cbc:	00000300 	.inst	0x00000300 ; undefined
    7cc0:	0a6b0000 	bic	w0, w0, w11, lsr #0
    7cc4:	07240000 	.inst	0x07240000 ; undefined
    7cc8:	01210000 	.inst	0x01210000 ; undefined
    7ccc:	a8030950 	stnp	x16, x2, [x10,#48]
    7cd0:	000300a1 	.inst	0x000300a1 ; undefined
    7cd4:	00000000 	.inst	0x00000000 ; undefined
    7cd8:	00554c20 	.inst	0x00554c20 ; undefined
    7cdc:	00000003 	.inst	0x00000003 ; undefined
    7ce0:	000a6b00 	.inst	0x000a6b00 ; undefined
    7ce4:	00073c00 	.inst	0x00073c00 ; undefined
    7ce8:	50012100 	adr	x0, a10a <_stack_size+0x910a>
    7cec:	00008502 	.inst	0x00008502 ; undefined
    7cf0:	0055542d 	.inst	0x0055542d ; undefined
    7cf4:	00000003 	.inst	0x00000003 ; undefined
    7cf8:	000a8800 	.inst	0x000a8800 ; undefined
    7cfc:	555c2000 	.inst	0x555c2000 ; undefined
    7d00:	00000300 	.inst	0x00000300 ; undefined
    7d04:	0a6b0000 	bic	w0, w0, w11, lsr #0
    7d08:	07610000 	.inst	0x07610000 ; undefined
    7d0c:	01210000 	.inst	0x01210000 ; undefined
    7d10:	00840250 	.inst	0x00840250 ; undefined
    7d14:	55682000 	.inst	0x55682000 ; undefined
    7d18:	00000300 	.inst	0x00000300 ; undefined
    7d1c:	0a6b0000 	bic	w0, w0, w11, lsr #0
    7d20:	07800000 	.inst	0x07800000 ; undefined
    7d24:	01210000 	.inst	0x01210000 ; undefined
    7d28:	b8030950 	sttr	w16, [x10,#48]
    7d2c:	000300a1 	.inst	0x000300a1 ; undefined
    7d30:	00000000 	.inst	0x00000000 ; undefined
    7d34:	00557020 	.inst	0x00557020 ; undefined
    7d38:	00000003 	.inst	0x00000003 ; undefined
    7d3c:	000a6b00 	.inst	0x000a6b00 ; undefined
    7d40:	00079800 	.inst	0x00079800 ; undefined
    7d44:	50012100 	adr	x0, a166 <_stack_size+0x9166>
    7d48:	00008502 	.inst	0x00008502 ; undefined
    7d4c:	0055782d 	.inst	0x0055782d ; undefined
    7d50:	00000003 	.inst	0x00000003 ; undefined
    7d54:	000a8800 	.inst	0x000a8800 ; undefined
    7d58:	55802000 	.inst	0x55802000 ; undefined
    7d5c:	00000300 	.inst	0x00000300 ; undefined
    7d60:	0a6b0000 	bic	w0, w0, w11, lsr #0
    7d64:	07bd0000 	.inst	0x07bd0000 ; undefined
    7d68:	01210000 	.inst	0x01210000 ; undefined
    7d6c:	00840250 	.inst	0x00840250 ; undefined
    7d70:	55a42e00 	.inst	0x55a42e00 ; undefined
    7d74:	00000300 	.inst	0x00000300 ; undefined
    7d78:	033f0000 	.inst	0x033f0000 ; undefined
    7d7c:	00000000 	.inst	0x00000000 ; undefined
    7d80:	1e3a2300 	fcmp	s24, s26
    7d84:	c3010000 	.inst	0xc3010000 ; undefined
    7d88:	00000037 	.inst	0x00000037 ; undefined
    7d8c:	030055b0 	.inst	0x030055b0 ; undefined
    7d90:	00000000 	.inst	0x00000000 ; undefined
    7d94:	00000134 	.inst	0x00000134 ; undefined
    7d98:	00000000 	.inst	0x00000000 ; undefined
    7d9c:	0a4a9c01 	.inst	0x0a4a9c01 ; undefined
    7da0:	741b0000 	.inst	0x741b0000 ; undefined
    7da4:	0100001f 	.inst	0x0100001f ; undefined
    7da8:	000269c3 	.inst	0x000269c3 ; undefined
    7dac:	0085bb00 	.inst	0x0085bb00 ; undefined
    7db0:	65722400 	.inst	0x65722400 ; undefined
    7db4:	c5010074 	.inst	0xc5010074 ; undefined
    7db8:	00000037 	.inst	0x00000037 ; undefined
    7dbc:	02d525ff 	.inst	0x02d525ff ; undefined
    7dc0:	55b40000 	.inst	0x55b40000 ; undefined
    7dc4:	00000300 	.inst	0x00000300 ; undefined
    7dc8:	08500000 	ldxrb	w0, [x0]
    7dcc:	c7010000 	.inst	0xc7010000 ; undefined
    7dd0:	0002e526 	.inst	0x0002e526 ; undefined
    7dd4:	f02c0000 	adrp	x0, 5800a000 <MPIDR_EL1_U+0x1800a000>
    7dd8:	43000002 	.inst	0x43000002 ; undefined
    7ddc:	27000086 	.inst	0x27000086 ; undefined
    7de0:	00000850 	.inst	0x00000850 ; undefined
    7de4:	0002fb28 	.inst	0x0002fb28 ; undefined
    7de8:	0086cb00 	.inst	0x0086cb00 ; undefined
    7dec:	03062800 	.inst	0x03062800 ; undefined
    7df0:	87290000 	.inst	0x87290000 ; undefined
    7df4:	11280000 	add	w0, w0, #0xa00
    7df8:	72000003 	ands	w3, w0, #0x1
    7dfc:	29000087 	stp	w7, w0, [x4]
    7e00:	0000031c 	.inst	0x0000031c ; undefined
    7e04:	9b880309 	.inst	0x9b880309 ; undefined
    7e08:	00000300 	.inst	0x00000300 ; undefined
    7e0c:	1b2a0000 	.inst	0x1b2a0000 ; undefined
    7e10:	c8000002 	stxr	w0, x2, [x0]
    7e14:	00030055 	.inst	0x00030055 ; undefined
    7e18:	a0000000 	.inst	0xa0000000 ; undefined
    7e1c:	01000008 	.inst	0x01000008 ; undefined
    7e20:	000899b3 	.inst	0x000899b3 ; undefined
    7e24:	022c2600 	.inst	0x022c2600 ; undefined
    7e28:	2b000000 	adds	w0, w0, w0
    7e2c:	00000250 	.inst	0x00000250 ; undefined
    7e30:	7dedf206 	.inst	0x7dedf206 ; undefined
    7e34:	2b000000 	adds	w0, w0, w0
    7e38:	00000244 	.inst	0x00000244 ; undefined
    7e3c:	7de4f206 	.inst	0x7de4f206 ; undefined
    7e40:	2c000000 	stnp	s0, s0, [x0]
    7e44:	00000238 	.inst	0x00000238 ; undefined
    7e48:	00008772 	.inst	0x00008772 ; undefined
    7e4c:	56142000 	.inst	0x56142000 ; undefined
    7e50:	00000300 	.inst	0x00000300 ; undefined
    7e54:	0a6b0000 	bic	w0, w0, w11, lsr #0
    7e58:	08b80000 	.inst	0x08b80000 ; undefined
    7e5c:	01210000 	.inst	0x01210000 ; undefined
    7e60:	88030950 	stxr	w3, w16, [x10]
    7e64:	0003009b 	.inst	0x0003009b ; undefined
    7e68:	00000000 	.inst	0x00000000 ; undefined
    7e6c:	00562420 	.inst	0x00562420 ; undefined
    7e70:	00000003 	.inst	0x00000003 ; undefined
    7e74:	000a6b00 	.inst	0x000a6b00 ; undefined
    7e78:	0008d000 	.inst	0x0008d000 ; undefined
    7e7c:	50012100 	adr	x0, a29e <_stack_size+0x929e>
    7e80:	00008502 	.inst	0x00008502 ; undefined
    7e84:	00562c20 	.inst	0x00562c20 ; undefined
    7e88:	00000003 	.inst	0x00000003 ; undefined
    7e8c:	000a8800 	.inst	0x000a8800 ; undefined
    7e90:	0008e700 	.inst	0x0008e700 ; undefined
    7e94:	50012100 	adr	x0, a2b6 <_stack_size+0x92b6>
    7e98:	20003001 	.inst	0x20003001 ; undefined
    7e9c:	03005634 	.inst	0x03005634 ; undefined
    7ea0:	00000000 	.inst	0x00000000 ; undefined
    7ea4:	00000a6b 	.inst	0x00000a6b ; undefined
    7ea8:	000008ff 	.inst	0x000008ff ; undefined
    7eac:	02500121 	.inst	0x02500121 ; undefined
    7eb0:	20000084 	.inst	0x20000084 ; undefined
    7eb4:	03005640 	.inst	0x03005640 ; undefined
    7eb8:	00000000 	.inst	0x00000000 ; undefined
    7ebc:	00000a6b 	.inst	0x00000a6b ; undefined
    7ec0:	0000091e 	.inst	0x0000091e ; undefined
    7ec4:	09500121 	.inst	0x09500121 ; undefined
    7ec8:	00a19003 	.inst	0x00a19003 ; undefined
    7ecc:	00000003 	.inst	0x00000003 ; undefined
    7ed0:	4c200000 	.inst	0x4c200000 ; undefined
    7ed4:	00030056 	.inst	0x00030056 ; undefined
    7ed8:	6b000000 	subs	w0, w0, w0
    7edc:	3d00000a 	str	b10, [x0]
    7ee0:	21000009 	.inst	0x21000009 ; undefined
    7ee4:	03095001 	.inst	0x03095001 ; undefined
    7ee8:	0300a1a0 	.inst	0x0300a1a0 ; undefined
    7eec:	00000000 	.inst	0x00000000 ; undefined
    7ef0:	56542000 	.inst	0x56542000 ; undefined
    7ef4:	00000300 	.inst	0x00000300 ; undefined
    7ef8:	0a6b0000 	bic	w0, w0, w11, lsr #0
    7efc:	09550000 	.inst	0x09550000 ; undefined
    7f00:	01210000 	.inst	0x01210000 ; undefined
    7f04:	00850250 	.inst	0x00850250 ; undefined
    7f08:	565c2d00 	.inst	0x565c2d00 ; undefined
    7f0c:	00000300 	.inst	0x00000300 ; undefined
    7f10:	0a880000 	and	w0, w0, w8, asr #0
    7f14:	64200000 	.inst	0x64200000 ; undefined
    7f18:	00030056 	.inst	0x00030056 ; undefined
    7f1c:	6b000000 	subs	w0, w0, w0
    7f20:	7a00000a 	sbcs	w10, w0, w0
    7f24:	21000009 	.inst	0x21000009 ; undefined
    7f28:	84025001 	.inst	0x84025001 ; undefined
    7f2c:	70200000 	adr	x0, 47f2f <_stack_size+0x46f2f>
    7f30:	00030056 	.inst	0x00030056 ; undefined
    7f34:	6b000000 	subs	w0, w0, w0
    7f38:	9900000a 	.inst	0x9900000a ; undefined
    7f3c:	21000009 	.inst	0x21000009 ; undefined
    7f40:	03095001 	.inst	0x03095001 ; undefined
    7f44:	0300a1a8 	.inst	0x0300a1a8 ; undefined
    7f48:	00000000 	.inst	0x00000000 ; undefined
    7f4c:	56782000 	.inst	0x56782000 ; undefined
    7f50:	00000300 	.inst	0x00000300 ; undefined
    7f54:	0a6b0000 	bic	w0, w0, w11, lsr #0
    7f58:	09b10000 	.inst	0x09b10000 ; undefined
    7f5c:	01210000 	.inst	0x01210000 ; undefined
    7f60:	00850250 	.inst	0x00850250 ; undefined
    7f64:	56802d00 	.inst	0x56802d00 ; undefined
    7f68:	00000300 	.inst	0x00000300 ; undefined
    7f6c:	0a880000 	and	w0, w0, w8, asr #0
    7f70:	88200000 	stxp	w0, w0, w0, [x0]
    7f74:	00030056 	.inst	0x00030056 ; undefined
    7f78:	6b000000 	subs	w0, w0, w0
    7f7c:	d600000a 	.inst	0xd600000a ; undefined
    7f80:	21000009 	.inst	0x21000009 ; undefined
    7f84:	84025001 	.inst	0x84025001 ; undefined
    7f88:	94200000 	bl	807f88 <_stack_size+0x806f88>
    7f8c:	00030056 	.inst	0x00030056 ; undefined
    7f90:	6b000000 	subs	w0, w0, w0
    7f94:	f500000a 	.inst	0xf500000a ; undefined
    7f98:	21000009 	.inst	0x21000009 ; undefined
    7f9c:	03095001 	.inst	0x03095001 ; undefined
    7fa0:	0300a1b8 	.inst	0x0300a1b8 ; undefined
    7fa4:	00000000 	.inst	0x00000000 ; undefined
    7fa8:	569c2000 	.inst	0x569c2000 ; undefined
    7fac:	00000300 	.inst	0x00000300 ; undefined
    7fb0:	0a6b0000 	bic	w0, w0, w11, lsr #0
    7fb4:	0a0d0000 	and	w0, w0, w13
    7fb8:	01210000 	.inst	0x01210000 ; undefined
    7fbc:	00850250 	.inst	0x00850250 ; undefined
    7fc0:	56a42d00 	.inst	0x56a42d00 ; undefined
    7fc4:	00000300 	.inst	0x00000300 ; undefined
    7fc8:	0a880000 	and	w0, w0, w8, asr #0
    7fcc:	ac200000 	stnp	q0, q0, [x0,#-1024]
    7fd0:	00030056 	.inst	0x00030056 ; undefined
    7fd4:	6b000000 	subs	w0, w0, w0
    7fd8:	3200000a 	orr	w10, w0, #0x1
    7fdc:	2100000a 	.inst	0x2100000a ; undefined
    7fe0:	84025001 	.inst	0x84025001 ; undefined
    7fe4:	d82f0000 	prfm	pldl1keep, 65fe4 <_stack_size+0x64fe4>
    7fe8:	00030056 	.inst	0x00030056 ; undefined
    7fec:	3f000000 	.inst	0x3f000000 ; undefined
    7ff0:	21000003 	.inst	0x21000003 ; undefined
    7ff4:	48035301 	stxrh	w3, w1, [x24]
    7ff8:	0000243d 	.inst	0x0000243d ; undefined
    7ffc:	61300000 	.inst	0x61300000 ; undefined
    8000:	05000019 	.inst	0x05000019 ; undefined
    8004:	00025d44 	.inst	0x00025d44 ; undefined
    8008:	19903000 	.inst	0x19903000 ; undefined
    800c:	45050000 	.inst	0x45050000 ; undefined
    8010:	0000025d 	.inst	0x0000025d ; undefined
    8014:	001ce230 	.inst	0x001ce230 ; undefined
    8018:	ec210700 	.inst	0xec210700 ; undefined
    801c:	31000001 	adds	w1, w0, #0x0
    8020:	00000563 	.inst	0x00000563 ; undefined
    8024:	7d012c08 	str	h8, [x0,#150]
    8028:	3200000a 	orr	w10, w0, #0x1
    802c:	00000a7d 	.inst	0x00000a7d ; undefined
    8030:	83081300 	.inst	0x83081300 ; undefined
    8034:	1900000a 	.inst	0x1900000a ; undefined
    8038:	000002c9 	.inst	0x000002c9 ; undefined
    803c:	000a3431 	.inst	0x000a3431 ; undefined
    8040:	012e0800 	.inst	0x012e0800 ; undefined
    8044:	00000a9a 	.inst	0x00000a9a ; undefined
    8048:	00005332 	.inst	0x00005332 ; undefined
    804c:	7e330000 	.inst	0x7e330000 ; undefined
    8050:	0400000b 	.inst	0x0400000b ; undefined
    8054:	000aab34 	.inst	0x000aab34 ; undefined
    8058:	00c93200 	.inst	0x00c93200 ; undefined
    805c:	34000000 	cbz	w0, 805c <_stack_size+0x705c>
    8060:	00000896 	.inst	0x00000896 ; undefined
    8064:	00373304 	.inst	0x00373304 ; NYI
    8068:	0acf0000 	and	w0, w0, w15, ror #0
    806c:	77320000 	.inst	0x77320000 ; undefined
    8070:	32000000 	orr	w0, w0, #0x1
    8074:	00000077 	.inst	0x00000077 ; undefined
    8078:	00007732 	.inst	0x00007732 ; undefined
    807c:	0acf3200 	and	w0, w16, w15, ror #12
    8080:	13000000 	sbfx	w0, w0, #0, #1
    8084:	00006c08 	.inst	0x00006c08 ; undefined
    8088:	0cc63400 	.inst	0x0cc63400 ; undefined
    808c:	53090000 	ubfiz	w0, w0, #23, #1
    8090:	00000077 	.inst	0x00000077 ; undefined
    8094:	00000af4 	.inst	0x00000af4 ; undefined
    8098:	000af432 	.inst	0x000af432 ; undefined
    809c:	0af43200 	bic	w0, w16, w20, ror #12
    80a0:	77320000 	.inst	0x77320000 ; undefined
    80a4:	00000000 	.inst	0x00000000 ; undefined
    80a8:	55000835 	.inst	0x55000835 ; undefined
    80ac:	04000007 	.inst	0x04000007 ; undefined
    80b0:	001e8f00 	.inst	0x001e8f00 ; undefined
    80b4:	89010800 	.inst	0x89010800 ; undefined
    80b8:	01000001 	.inst	0x01000001 ; undefined
    80bc:	00002031 	.inst	0x00002031 ; undefined
    80c0:	030056e4 	.inst	0x030056e4 ; undefined
    80c4:	00000000 	.inst	0x00000000 ; undefined
    80c8:	0000020c 	.inst	0x0000020c ; undefined
    80cc:	00000000 	.inst	0x00000000 ; undefined
    80d0:	000027b1 	.inst	0x000027b1 ; undefined
    80d4:	16070402 	b	fffffffff81c90dc <SMC_ID_HW_RSA+0xffffffff741b91d5>
    80d8:	02000001 	.inst	0x02000001 ; undefined
    80dc:	01000601 	.inst	0x01000601 ; undefined
    80e0:	02020000 	.inst	0x02020000 ; undefined
    80e4:	00002b05 	.inst	0x00002b05 ; undefined
    80e8:	05040300 	.inst	0x05040300 ; undefined
    80ec:	00746e69 	.inst	0x00746e69 ; undefined
    80f0:	a9050802 	stp	x2, x2, [x0,#80]
    80f4:	02000000 	.inst	0x02000000 ; undefined
    80f8:	00fe0801 	.inst	0x00fe0801 ; undefined
    80fc:	02020000 	.inst	0x02020000 ; undefined
    8100:	00013107 	.inst	0x00013107 ; undefined
    8104:	07080200 	.inst	0x07080200 ; undefined
    8108:	00000111 	.inst	0x00000111 ; undefined
    810c:	00008504 	.inst	0x00008504 ; undefined
    8110:	5a7a0200 	.inst	0x5a7a0200 ; undefined
    8114:	04000000 	.inst	0x04000000 ; undefined
    8118:	00000604 	.inst	0x00000604 ; undefined
    811c:	004c0d03 	.inst	0x004c0d03 ; undefined
    8120:	3f040000 	.inst	0x3f040000 ; undefined
    8124:	03000000 	.inst	0x03000000 ; undefined
    8128:	00002911 	.inst	0x00002911 ; undefined
    812c:	07080200 	.inst	0x07080200 ; undefined
    8130:	0000010c 	.inst	0x0000010c ; undefined
    8134:	a4050802 	.inst	0xa4050802 ; undefined
    8138:	05000000 	.inst	0x05000000 ; undefined
    813c:	000020d6 	.inst	0x000020d6 ; undefined
    8140:	d3570904 	ubfiz	x4, x8, #41, #3
    8144:	06000000 	.inst	0x06000000 ; undefined
    8148:	0000214c 	.inst	0x0000214c ; undefined
    814c:	209f0600 	.inst	0x209f0600 ; undefined
    8150:	06010000 	.inst	0x06010000 ; undefined
    8154:	000020b4 	.inst	0x000020b4 ; undefined
    8158:	21850602 	.inst	0x21850602 ; undefined
    815c:	06030000 	.inst	0x06030000 ; undefined
    8160:	0000211b 	.inst	0x0000211b ; undefined
    8164:	20ed0604 	.inst	0x20ed0604 ; undefined
    8168:	06050000 	.inst	0x06050000 ; undefined
    816c:	00002134 	.inst	0x00002134 ; undefined
    8170:	21070606 	.inst	0x21070606 ; undefined
    8174:	06070000 	.inst	0x06070000 ; undefined
    8178:	0000219c 	.inst	0x0000219c ; undefined
    817c:	96070008 	bl	fffffffff81c819c <SMC_ID_HW_RSA+0xffffffff741b8295>
    8180:	10000003 	adr	x3, 8180 <_stack_size+0x7180>
    8184:	01222f04 	.inst	0x01222f04 ; undefined
    8188:	d3080000 	.inst	0xd3080000 ; undefined
    818c:	04000013 	.inst	0x04000013 ; undefined
    8190:	00002930 	.inst	0x00002930 ; undefined
    8194:	3c080000 	stur	b0, [x0,#128]
    8198:	04000003 	.inst	0x04000003 ; undefined
    819c:	00002931 	.inst	0x00002931 ; undefined
    81a0:	5a080400 	.inst	0x5a080400 ; undefined
    81a4:	04000008 	.inst	0x04000008 ; undefined
    81a8:	00002932 	.inst	0x00002932 ; undefined
    81ac:	27090800 	.inst	0x27090800 ; undefined
    81b0:	04000004 	.inst	0x04000004 ; undefined
    81b4:	00002934 	.inst	0x00002934 ; undefined
    81b8:	1f010400 	fmadd	s0, s0, s1, s1
    81bc:	05b7090c 	.inst	0x05b7090c ; undefined
    81c0:	35040000 	cbnz	w0, 101c0 <_stack_size+0xf1c0>
    81c4:	00000029 	.inst	0x00000029 ; undefined
    81c8:	0c001f04 	.inst	0x0c001f04 ; undefined
    81cc:	03be0400 	.inst	0x03be0400 ; undefined
    81d0:	36040000 	tbz	w0, #0, 1d0 <MPIDR_EL1_AFF3_LSB+0x1b0>
    81d4:	000000d3 	.inst	0x000000d3 ; undefined
    81d8:	0018ca0a 	.inst	0x0018ca0a ; undefined
    81dc:	04040000 	.inst	0x04040000 ; undefined
    81e0:	00017838 	.inst	0x00017838 ; undefined
    81e4:	05b10800 	.inst	0x05b10800 ; undefined
    81e8:	39040000 	strb	w0, [x0,#256]
    81ec:	00000029 	.inst	0x00000029 ; undefined
    81f0:	03240800 	.inst	0x03240800 ; undefined
    81f4:	3a040000 	adcs	w0, w0, w4
    81f8:	00000029 	.inst	0x00000029 ; undefined
    81fc:	05b70804 	.inst	0x05b70804 ; undefined
    8200:	3b040000 	.inst	0x3b040000 ; undefined
    8204:	00000178 	.inst	0x00000178 ; undefined
    8208:	17e50808 	b	ffffffffff94a228 <SMC_ID_HW_RSA+0xffffffff7b93a321>
    820c:	3c040000 	stur	b0, [x0,#64]
    8210:	0000018f 	.inst	0x0000018f ; undefined
    8214:	0cb00b10 	.inst	0x0cb00b10 ; undefined
    8218:	3d040000 	str	b0, [x0,#256]
    821c:	0000019f 	.inst	0x0000019f ; undefined
    8220:	0c000300 	st4	{v0.8b-v3.8b}, [x24]
    8224:	0000004c 	.inst	0x0000004c ; undefined
    8228:	00000188 	.inst	0x00000188 ; undefined
    822c:	0001880d 	.inst	0x0001880d ; undefined
    8230:	02000700 	.inst	0x02000700 ; undefined
    8234:	059d0708 	.inst	0x059d0708 ; undefined
    8238:	220c0000 	.inst	0x220c0000 ; undefined
    823c:	9f000001 	.inst	0x9f000001 ; undefined
    8240:	0d000001 	st1	{v1.b}[0], [x0]
    8244:	00000188 	.inst	0x00000188 ; undefined
    8248:	4c0c002e 	.inst	0x4c0c002e ; undefined
    824c:	af000000 	.inst	0xaf000000 ; undefined
    8250:	0d000001 	st1	{v1.b}[0], [x0]
    8254:	00000188 	.inst	0x00000188 ; undefined
    8258:	120400ff 	and	wsp, w7, #0x10000000
    825c:	04000004 	.inst	0x04000004 ; undefined
    8260:	00012d3e 	.inst	0x00012d3e ; undefined
    8264:	1bde0700 	.inst	0x1bde0700 ; undefined
    8268:	05100000 	.inst	0x05100000 ; undefined
    826c:	0001f725 	.inst	0x0001f725 ; undefined
    8270:	1d530800 	.inst	0x1d530800 ; undefined
    8274:	26050000 	.inst	0x26050000 ; undefined
    8278:	00000029 	.inst	0x00000029 ; undefined
    827c:	1b960800 	.inst	0x1b960800 ; undefined
    8280:	27050000 	.inst	0x27050000 ; undefined
    8284:	00000029 	.inst	0x00000029 ; undefined
    8288:	1e540804 	.inst	0x1e540804 ; undefined
    828c:	28050000 	stnp	w0, w0, [x0,#40]
    8290:	00000029 	.inst	0x00000029 ; undefined
    8294:	1c660808 	ldr	s8, d4394 <_stack_size+0xd3394>
    8298:	29050000 	stp	w0, w0, [x0,#40]
    829c:	00000029 	.inst	0x00000029 ; undefined
    82a0:	f904000c 	str	x12, [x0,#2048]
    82a4:	05000019 	.inst	0x05000019 ; undefined
    82a8:	0001ba2a 	.inst	0x0001ba2a ; undefined
    82ac:	21280a00 	.inst	0x21280a00 ; undefined
    82b0:	04000000 	.inst	0x04000000 ; undefined
    82b4:	02509a05 	.inst	0x02509a05 ; undefined
    82b8:	70080000 	adr	x0, 182bb <_stack_size+0x172bb>
    82bc:	0500001c 	.inst	0x0500001c ; undefined
    82c0:	00019f9b 	.inst	0x00019f9b ; undefined
    82c4:	110b0000 	add	w0, w0, #0x2c0
    82c8:	0500001d 	.inst	0x0500001d ; undefined
    82cc:	0000299c 	.inst	0x0000299c ; undefined
    82d0:	0b010000 	add	w0, w0, w1
    82d4:	00001ec6 	.inst	0x00001ec6 ; undefined
    82d8:	02509d05 	.inst	0x02509d05 ; undefined
    82dc:	01040000 	.inst	0x01040000 ; undefined
    82e0:	001bde0b 	.inst	0x001bde0b ; undefined
    82e4:	f79e0500 	.inst	0xf79e0500 ; undefined
    82e8:	f0000001 	adrp	x1, b000 <_stack_size+0xa000>
    82ec:	1c830b02 	ldr	s2, fffffffffff0e44c <SMC_ID_HW_RSA+0xffffffff7befe545>
    82f0:	9f050000 	.inst	0x9f050000 ; undefined
    82f4:	0000019f 	.inst	0x0000019f ; undefined
    82f8:	0c000300 	st4	{v0.8b-v3.8b}, [x24]
    82fc:	0000004c 	.inst	0x0000004c ; undefined
    8300:	00000261 	.inst	0x00000261 ; undefined
    8304:	0001880e 	.inst	0x0001880e ; undefined
    8308:	0001eb00 	.inst	0x0001eb00 ; undefined
    830c:	001ed504 	.inst	0x001ed504 ; undefined
    8310:	02a00500 	.inst	0x02a00500 ; undefined
    8314:	0f000002 	.inst	0x0f000002 ; undefined
    8318:	00002091 	.inst	0x00002091 ; undefined
    831c:	003e4201 	.inst	0x003e4201 ; NYI
    8320:	93010000 	.inst	0x93010000 ; undefined
    8324:	10000002 	adr	x2, 8324 <_stack_size+0x7324>
    8328:	00000e94 	.inst	0x00000e94 ; undefined
    832c:	00294201 	.inst	0x00294201 ; NYI
    8330:	64110000 	.inst	0x64110000 ; undefined
    8334:	01007473 	.inst	0x01007473 ; undefined
    8338:	00029342 	.inst	0x00029342 ; undefined
    833c:	08120000 	stxrb	w18, w0, [x0]
    8340:	001f900f 	.inst	0x001f900f ; undefined
    8344:	3e5b0100 	.inst	0x3e5b0100 ; undefined
    8348:	01000000 	.inst	0x01000000 ; undefined
    834c:	00000300 	.inst	0x00000300 ; undefined
    8350:	00200710 	.inst	0x00200710 ; NYI
    8354:	295b0100 	ldp	w0, w0, [x8,#216]
    8358:	13000000 	sbfx	w0, w0, #0, #1
    835c:	000019ae 	.inst	0x000019ae ; undefined
    8360:	03005d01 	.inst	0x03005d01 ; undefined
    8364:	19130000 	.inst	0x19130000 ; undefined
    8368:	0100001f 	.inst	0x0100001f ; undefined
    836c:	0000295e 	.inst	0x0000295e ; undefined
    8370:	74701400 	.inst	0x74701400 ; undefined
    8374:	5f010072 	.inst	0x5f010072 ; undefined
    8378:	00000306 	.inst	0x00000306 ; undefined
    837c:	00113013 	.inst	0x00113013 ; undefined
    8380:	29600100 	ldp	w0, w0, [x8,#-256]
    8384:	13000000 	sbfx	w0, w0, #0, #1
    8388:	000013c5 	.inst	0x000013c5 ; undefined
    838c:	00296101 	.inst	0x00296101 ; NYI
    8390:	72140000 	ands	w0, w0, #0x1000
    8394:	01007465 	.inst	0x01007465 ; undefined
    8398:	00003e62 	.inst	0x00003e62 ; undefined
    839c:	0e221500 	srhadd	v0.8b, v8.8b, v2.8b
    83a0:	03230000 	.inst	0x03230000 ; undefined
    83a4:	1f900000 	.inst	0x1f900000 ; undefined
    83a8:	16000000 	b	fffffffff80083a8 <SMC_ID_HW_RSA+0xffffffff73ff84a1>
    83ac:	00012208 	.inst	0x00012208 ; undefined
    83b0:	0c081600 	.inst	0x0c081600 ; undefined
    83b4:	02000003 	.inst	0x02000003 ; undefined
    83b8:	01070801 	.inst	0x01070801 ; undefined
    83bc:	0c0c0000 	.inst	0x0c0c0000 ; undefined
    83c0:	23000003 	.inst	0x23000003 ; undefined
    83c4:	0d000003 	st1	{v3.b}[0], [x0]
    83c8:	00000188 	.inst	0x00000188 ; undefined
    83cc:	13170016 	sbfiz	w22, w0, #9, #1
    83d0:	0f000003 	.inst	0x0f000003 ; undefined
    83d4:	00001f34 	.inst	0x00001f34 ; undefined
    83d8:	003eab01 	.inst	0x003eab01 ; NYI
    83dc:	7d010000 	str	h0, [x0,#128]
    83e0:	10000003 	adr	x3, 83e0 <_stack_size+0x73e0>
    83e4:	00002007 	.inst	0x00002007 ; undefined
    83e8:	0029ab01 	.inst	0x0029ab01 ; NYI
    83ec:	86100000 	.inst	0x86100000 ; undefined
    83f0:	0100001f 	.inst	0x0100001f ; undefined
    83f4:	00037dab 	.inst	0x00037dab ; undefined
    83f8:	19ae1300 	.inst	0x19ae1300 ; undefined
    83fc:	ad010000 	stp	q0, q0, [x0,#32]
    8400:	00000300 	.inst	0x00000300 ; undefined
    8404:	001f1913 	.inst	0x001f1913 ; undefined
    8408:	29ae0100 	stp	w0, w0, [x8,#-144]!
    840c:	14000000 	b	840c <_stack_size+0x740c>
    8410:	00727470 	.inst	0x00727470 ; undefined
    8414:	0306af01 	.inst	0x0306af01 ; undefined
    8418:	22150000 	.inst	0x22150000 ; undefined
    841c:	9300000e 	.inst	0x9300000e ; undefined
    8420:	34000003 	cbz	w3, 8420 <_stack_size+0x7420>
    8424:	0000001f 	.inst	0x0000001f ; undefined
    8428:	00290816 	.inst	0x00290816 ; NYI
    842c:	0c0c0000 	.inst	0x0c0c0000 ; undefined
    8430:	93000003 	.inst	0x93000003 ; undefined
    8434:	0d000003 	st1	{v3.b}[0], [x0]
    8438:	00000188 	.inst	0x00000188 ; undefined
    843c:	83170014 	.inst	0x83170014 ; undefined
    8440:	18000003 	ldr	w3, 8440 <_stack_size+0x7440>
    8444:	00002012 	.inst	0x00002012 ; undefined
    8448:	003eeb01 	.inst	0x003eeb01 ; NYI
    844c:	56e40000 	.inst	0x56e40000 ; undefined
    8450:	00000300 	.inst	0x00000300 ; undefined
    8454:	01080000 	.inst	0x01080000 ; undefined
    8458:	00000000 	.inst	0x00000000 ; undefined
    845c:	9c010000 	ldr	q0, a45c <_stack_size+0x945c>
    8460:	000004c4 	.inst	0x000004c4 ; undefined
    8464:	000e9419 	.inst	0x000e9419 ; undefined
    8468:	29eb0100 	ldp	w0, w0, [x8,#-168]!
    846c:	bb000000 	.inst	0xbb000000 ; undefined
    8470:	1a000087 	adc	w7, w4, w0
    8474:	006e656c 	.inst	0x006e656c ; undefined
    8478:	0029eb01 	.inst	0x0029eb01 ; NYI
    847c:	88780000 	ldxp	w0, w0, [x0]
    8480:	641a0000 	.inst	0x641a0000 ; undefined
    8484:	01007473 	.inst	0x01007473 ; undefined
    8488:	000306eb 	.inst	0x000306eb ; undefined
    848c:	0088b100 	.inst	0x0088b100 ; undefined
    8490:	65721b00 	.inst	0x65721b00 ; undefined
    8494:	ed010074 	.inst	0xed010074 ; undefined
    8498:	0000003e 	.inst	0x0000003e ; undefined
    849c:	000088ea 	.inst	0x000088ea ; undefined
    84a0:	0021601c 	.inst	0x0021601c ; NYI
    84a4:	29ee0100 	ldp	w0, w0, [x8,#-144]!
    84a8:	35000000 	cbnz	w0, 84a8 <_stack_size+0x74a8>
    84ac:	1c000089 	ldr	s9, 84bc <_stack_size+0x74bc>
    84b0:	000020ca 	.inst	0x000020ca ; undefined
    84b4:	0029ef01 	.inst	0x0029ef01 ; NYI
    84b8:	89a50000 	.inst	0x89a50000 ; undefined
    84bc:	701b0000 	adr	x0, 3e4bf <_stack_size+0x3d4bf>
    84c0:	01007274 	.inst	0x01007274 ; undefined
    84c4:	000306f0 	.inst	0x000306f0 ; undefined
    84c8:	008a1400 	.inst	0x008a1400 ; undefined
    84cc:	026c1d00 	.inst	0x026c1d00 ; undefined
    84d0:	57080000 	.inst	0x57080000 ; undefined
    84d4:	00000300 	.inst	0x00000300 ; undefined
    84d8:	08e00000 	.inst	0x08e00000 ; undefined
    84dc:	f6010000 	.inst	0xf6010000 ; undefined
    84e0:	00000455 	.inst	0x00000455 ; undefined
    84e4:	0002871e 	.inst	0x0002871e ; undefined
    84e8:	027c1f00 	.inst	0x027c1f00 ; undefined
    84ec:	8a700000 	bic	x0, x0, x16, lsr #0
    84f0:	74200000 	.inst	0x74200000 ; undefined
    84f4:	00030057 	.inst	0x00030057 ; undefined
    84f8:	e7000000 	.inst	0xe7000000 ; undefined
    84fc:	00000006 	.inst	0x00000006 ; undefined
    8500:	00026c21 	.inst	0x00026c21 ; undefined
    8504:	00579000 	.inst	0x00579000 ; undefined
    8508:	00000003 	.inst	0x00000003 ; undefined
    850c:	00001800 	.inst	0x00001800 ; undefined
    8510:	00000000 	.inst	0x00000000 ; undefined
    8514:	01030100 	.inst	0x01030100 ; undefined
    8518:	000004a3 	.inst	0x000004a3 ; undefined
    851c:	0002871f 	.inst	0x0002871f ; undefined
    8520:	008b2f00 	.inst	0x008b2f00 ; undefined
    8524:	027c1f00 	.inst	0x027c1f00 ; undefined
    8528:	8b520000 	add	x0, x0, x18, lsr #0
    852c:	a4220000 	.inst	0xa4220000 ; undefined
    8530:	00030057 	.inst	0x00030057 ; undefined
    8534:	e7000000 	.inst	0xe7000000 ; undefined
    8538:	23000006 	.inst	0x23000006 ; undefined
    853c:	85025001 	.inst	0x85025001 ; undefined
    8540:	51012300 	sub	w0, w24, #0x48
    8544:	23008402 	.inst	0x23008402 ; undefined
    8548:	30015301 	adr	x1, afa9 <_stack_size+0x9fa9>
    854c:	34220000 	cbz	w0, 4c54c <_stack_size+0x4b54c>
    8550:	00030057 	.inst	0x00030057 ; undefined
    8554:	17000000 	b	fffffffffc008554 <SMC_ID_HW_RSA+0xffffffff77ff864d>
    8558:	23000007 	.inst	0x23000007 ; undefined
    855c:	84025001 	.inst	0x84025001 ; undefined
    8560:	51012300 	sub	w0, w24, #0x48
    8564:	23008802 	.inst	0x23008802 ; undefined
    8568:	86025201 	.inst	0x86025201 ; undefined
    856c:	24000000 	.inst	0x24000000 ; undefined
    8570:	00001ddf 	.inst	0x00001ddf ; undefined
    8574:	003e7d01 	.inst	0x003e7d01 ; NYI
    8578:	57ec0000 	.inst	0x57ec0000 ; undefined
    857c:	00000300 	.inst	0x00000300 ; undefined
    8580:	00a40000 	.inst	0x00a40000 ; undefined
    8584:	00000000 	.inst	0x00000000 ; undefined
    8588:	9c010000 	ldr	q0, a588 <_stack_size+0x9588>
    858c:	000005a9 	.inst	0x000005a9 ; undefined
    8590:	7465721b 	.inst	0x7465721b ; undefined
    8594:	3e7f0100 	.inst	0x3e7f0100 ; undefined
    8598:	9d000000 	.inst	0x9d000000 ; undefined
    859c:	2500008b 	.inst	0x2500008b ; undefined
    85a0:	80010069 	.inst	0x80010069 ; undefined
    85a4:	00000029 	.inst	0x00000029 ; undefined
    85a8:	02952601 	.inst	0x02952601 ; undefined
    85ac:	57f00000 	.inst	0x57f00000 ; undefined
    85b0:	00000300 	.inst	0x00000300 ; undefined
    85b4:	09300000 	.inst	0x09300000 ; undefined
    85b8:	84010000 	.inst	0x84010000 ; undefined
    85bc:	0002a527 	.inst	0x0002a527 ; undefined
    85c0:	30280000 	adr	x0, 585c1 <_stack_size+0x575c1>
    85c4:	29000009 	stp	w9, w0, [x0]
    85c8:	000002b0 	.inst	0x000002b0 ; undefined
    85cc:	0002bb29 	.inst	0x0002bb29 ; undefined
    85d0:	02c62900 	.inst	0x02c62900 ; undefined
    85d4:	d12a0000 	sub	x0, x0, #0xa80
    85d8:	d7000002 	.inst	0xd7000002 ; undefined
    85dc:	2a00008b 	orr	w11, w4, w0
    85e0:	000002dc 	.inst	0x000002dc ; undefined
    85e4:	00008c51 	.inst	0x00008c51 ; undefined
    85e8:	0002e72a 	.inst	0x0002e72a ; undefined
    85ec:	008c8b00 	.inst	0x008c8b00 ; undefined
    85f0:	02f22b00 	.inst	0x02f22b00 ; undefined
    85f4:	03090000 	.inst	0x03090000 ; undefined
    85f8:	03009ba0 	.inst	0x03009ba0 ; undefined
    85fc:	00000000 	.inst	0x00000000 ; undefined
    8600:	00582c2c 	.inst	0x00582c2c ; undefined
    8604:	00000003 	.inst	0x00000003 ; undefined
    8608:	00073600 	.inst	0x00073600 ; undefined
    860c:	00057900 	.inst	0x00057900 ; undefined
    8610:	50012300 	adr	x0, aa72 <_stack_size+0x9a72>
    8614:	9ba00309 	umaddl	x9, w24, w0, x0
    8618:	00000300 	.inst	0x00000300 ; undefined
    861c:	01230000 	.inst	0x01230000 ; undefined
    8620:	00300151 	.inst	0x00300151 ; NYI
    8624:	0058482c 	.inst	0x0058482c ; undefined
    8628:	00000003 	.inst	0x00000003 ; undefined
    862c:	00039800 	.inst	0x00039800 ; undefined
    8630:	00059100 	.inst	0x00059100 ; undefined
    8634:	52012300 	eor	w0, w24, #0x800000ff
    8638:	00008302 	.inst	0x00008302 ; undefined
    863c:	00588022 	.inst	0x00588022 ; undefined
    8640:	00000003 	.inst	0x00000003 ; undefined
    8644:	00071700 	.inst	0x00071700 ; undefined
    8648:	52012300 	eor	w0, w24, #0x800000ff
    864c:	04000a03 	.inst	0x04000a03 ; undefined
    8650:	00000000 	.inst	0x00000000 ; undefined
    8654:	001a7d24 	.inst	0x001a7d24 ; undefined
    8658:	3ebd0100 	.inst	0x3ebd0100 ; undefined
    865c:	90000000 	adrp	x0, 8000 <_stack_size+0x7000>
    8660:	00030058 	.inst	0x00030058 ; undefined
    8664:	60000000 	.inst	0x60000000 ; undefined
    8668:	00000000 	.inst	0x00000000 ; undefined
    866c:	01000000 	.inst	0x01000000 ; undefined
    8670:	00067e9c 	.inst	0x00067e9c ; undefined
    8674:	216a1900 	.inst	0x216a1900 ; undefined
    8678:	bd010000 	str	s0, [x0,#256]
    867c:	0000037d 	.inst	0x0000037d ; undefined
    8680:	00008cd6 	.inst	0x00008cd6 ; undefined
    8684:	7465721b 	.inst	0x7465721b ; undefined
    8688:	3ebf0100 	.inst	0x3ebf0100 ; undefined
    868c:	22000000 	.inst	0x22000000 ; undefined
    8690:	1400008d 	b	88c4 <_stack_size+0x78c4>
    8694:	c0010069 	.inst	0xc0010069 ; undefined
    8698:	00000029 	.inst	0x00000029 ; undefined
    869c:	00032826 	.inst	0x00032826 ; undefined
    86a0:	00589400 	.inst	0x00589400 ; undefined
    86a4:	00000003 	.inst	0x00000003 ; undefined
    86a8:	00097000 	.inst	0x00097000 ; undefined
    86ac:	27c20100 	.inst	0x27c20100 ; undefined
    86b0:	00000338 	.inst	0x00000338 ; undefined
    86b4:	03431f00 	.inst	0x03431f00 ; undefined
    86b8:	8d470000 	.inst	0x8d470000 ; undefined
    86bc:	70280000 	adr	x0, 586bf <_stack_size+0x576bf>
    86c0:	2a000009 	orr	w9, w0, w0
    86c4:	0000034e 	.inst	0x0000034e ; undefined
    86c8:	00008d93 	.inst	0x00008d93 ; undefined
    86cc:	0003592a 	.inst	0x0003592a ; undefined
    86d0:	008db600 	.inst	0x008db600 ; undefined
    86d4:	03642d00 	.inst	0x03642d00 ; undefined
    86d8:	00000000 	.inst	0x00000000 ; undefined
    86dc:	6f2b0003 	.inst	0x6f2b0003 ; undefined
    86e0:	09000003 	.inst	0x09000003 ; undefined
    86e4:	009bb803 	.inst	0x009bb803 ; undefined
    86e8:	00000003 	.inst	0x00000003 ; undefined
    86ec:	58bc2c00 	ldr	x0, fffffffffff80c6c <SMC_ID_HW_RSA+0xffffffff7bf70d65>
    86f0:	00000300 	.inst	0x00000300 ; undefined
    86f4:	07360000 	.inst	0x07360000 ; undefined
    86f8:	06660000 	.inst	0x06660000 ; undefined
    86fc:	01230000 	.inst	0x01230000 ; undefined
    8700:	b8030950 	sttr	w16, [x10,#48]
    8704:	0003009b 	.inst	0x0003009b ; undefined
    8708:	23000000 	.inst	0x23000000 ; undefined
    870c:	30015101 	adr	x1, b12d <_stack_size+0xa12d>
    8710:	58d82200 	ldr	x0, fffffffffffb8b50 <SMC_ID_HW_RSA+0xffffffff7bfa8c49>
    8714:	00000300 	.inst	0x00000300 ; undefined
    8718:	03980000 	.inst	0x03980000 ; undefined
    871c:	01230000 	.inst	0x01230000 ; undefined
    8720:	3d480352 	ldr	b18, [x26,#512]
    8724:	00000024 	.inst	0x00000024 ; undefined
    8728:	11e42e00 	.inst	0x11e42e00 ; undefined
    872c:	26060000 	.inst	0x26060000 ; undefined
    8730:	00000029 	.inst	0x00000029 ; undefined
    8734:	000f5a2e 	.inst	0x000f5a2e ; undefined
    8738:	29270600 	stp	w0, w1, [x16,#-200]
    873c:	2e000000 	ext	v0.8b, v0.8b, v0.8b, #0
    8740:	00000fc2 	.inst	0x00000fc2 ; undefined
    8744:	00292806 	.inst	0x00292806 ; NYI
    8748:	4c0c0000 	.inst	0x4c0c0000 ; undefined
    874c:	b0000000 	adrp	x0, 9000 <_stack_size+0x8000>
    8750:	0e000006 	tbl	v6.8b, {v0.16b}, v0.8b
    8754:	00000188 	.inst	0x00000188 ; undefined
    8758:	2e000fff 	.inst	0x2e000fff ; undefined
    875c:	00000eeb 	.inst	0x00000eeb ; undefined
    8760:	069f2a06 	.inst	0x069f2a06 ; undefined
    8764:	612e0000 	.inst	0x612e0000 ; undefined
    8768:	04000019 	.inst	0x04000019 ; undefined
    876c:	00030044 	.inst	0x00030044 ; undefined
    8770:	18922e00 	ldr	w0, fffffffffff2cd30 <SMC_ID_HW_RSA+0xffffffff7bf1ce29>
    8774:	46040000 	.inst	0x46040000 ; undefined
    8778:	00000300 	.inst	0x00000300 ; undefined
    877c:	0018c12e 	.inst	0x0018c12e ; undefined
    8780:	af490400 	.inst	0xaf490400 ; undefined
    8784:	2e000001 	ext	v1.8b, v0.8b, v0.8b, #0
    8788:	00001ce2 	.inst	0x00001ce2 ; undefined
    878c:	02612107 	.inst	0x02612107 ; undefined
    8790:	b72f0000 	tbnz	x0, #37, 6790 <_stack_size+0x5790>
    8794:	06000010 	.inst	0x06000010 ; undefined
    8798:	00003e37 	.inst	0x00003e37 ; undefined
    879c:	00070b00 	.inst	0x00070b00 ; undefined
    87a0:	00773000 	.inst	0x00773000 ; undefined
    87a4:	0b300000 	add	w0, w0, w16, uxtb
    87a8:	30000007 	adr	x7, 87a9 <_stack_size+0x77a9>
    87ac:	00000077 	.inst	0x00000077 ; undefined
    87b0:	00071130 	.inst	0x00071130 ; undefined
    87b4:	08160000 	stxrb	w22, w0, [x0]
    87b8:	0000006c 	.inst	0x0000006c ; undefined
    87bc:	00770816 	.inst	0x00770816 ; undefined
    87c0:	c62f0000 	.inst	0xc62f0000 ; undefined
    87c4:	0800000c 	stxrb	w0, w12, [x0]
    87c8:	00007753 	.inst	0x00007753 ; undefined
    87cc:	00073600 	.inst	0x00073600 ; undefined
    87d0:	02933000 	.inst	0x02933000 ; undefined
    87d4:	93300000 	.inst	0x93300000 ; undefined
    87d8:	30000002 	adr	x2, 87d9 <_stack_size+0x77d9>
    87dc:	00000077 	.inst	0x00000077 ; undefined
    87e0:	20273100 	.inst	0x20273100 ; undefined
    87e4:	2f0a0000 	.inst	0x2f0a0000 ; undefined
    87e8:	00074d01 	.inst	0x00074d01 ; undefined
    87ec:	074d3000 	.inst	0x074d3000 ; undefined
    87f0:	77300000 	.inst	0x77300000 ; undefined
    87f4:	00000000 	.inst	0x00000000 ; undefined
    87f8:	07530816 	.inst	0x07530816 ; undefined
    87fc:	0c170000 	.inst	0x0c170000 ; undefined
    8800:	00000003 	.inst	0x00000003 ; undefined
    8804:	0000031b 	.inst	0x0000031b ; undefined
    8808:	21160004 	.inst	0x21160004 ; undefined
    880c:	01080000 	.inst	0x01080000 ; undefined
    8810:	00000189 	.inst	0x00000189 ; undefined
    8814:	0021b301 	.inst	0x0021b301 ; NYI
    8818:	0058f000 	.inst	0x0058f000 ; undefined
    881c:	00000003 	.inst	0x00000003 ; undefined
    8820:	00009800 	.inst	0x00009800 ; undefined
    8824:	00000000 	.inst	0x00000000 ; undefined
    8828:	002a1f00 	.inst	0x002a1f00 ; NYI
    882c:	06010200 	.inst	0x06010200 ; undefined
    8830:	00000100 	.inst	0x00000100 ; undefined
    8834:	2b050202 	adds	w2, w16, w5
    8838:	03000000 	.inst	0x03000000 ; undefined
    883c:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    8840:	08020074 	stxrb	w2, w20, [x3]
    8844:	0000a905 	.inst	0x0000a905 ; undefined
    8848:	08010200 	stxrb	w1, w0, [x16]
    884c:	000000fe 	.inst	0x000000fe ; undefined
    8850:	31070202 	adds	w2, w16, #0x1c0
    8854:	02000001 	.inst	0x02000001 ; undefined
    8858:	01160704 	.inst	0x01160704 ; undefined
    885c:	08020000 	stxrb	w2, w0, [x0]
    8860:	00011107 	.inst	0x00011107 ; undefined
    8864:	00850400 	.inst	0x00850400 ; undefined
    8868:	7a020000 	sbcs	w0, w0, w2
    886c:	0000005a 	.inst	0x0000005a ; undefined
    8870:	00003f04 	.inst	0x00003f04 ; undefined
    8874:	53110300 	ubfiz	w0, w24, #15, #1
    8878:	02000000 	.inst	0x02000000 ; undefined
    887c:	010c0708 	.inst	0x010c0708 ; undefined
    8880:	08020000 	stxrb	w2, w0, [x0]
    8884:	0000a405 	.inst	0x0000a405 ; undefined
    8888:	1bde0500 	.inst	0x1bde0500 ; undefined
    888c:	04100000 	.inst	0x04100000 ; undefined
    8890:	0000c225 	.inst	0x0000c225 ; undefined
    8894:	1d530600 	.inst	0x1d530600 ; undefined
    8898:	26040000 	.inst	0x26040000 ; undefined
    889c:	00000053 	.inst	0x00000053 ; undefined
    88a0:	1b960600 	.inst	0x1b960600 ; undefined
    88a4:	27040000 	.inst	0x27040000 ; undefined
    88a8:	00000053 	.inst	0x00000053 ; undefined
    88ac:	1e540604 	.inst	0x1e540604 ; undefined
    88b0:	28040000 	stnp	w0, w0, [x0,#32]
    88b4:	00000053 	.inst	0x00000053 ; undefined
    88b8:	1c660608 	ldr	s8, d4978 <_stack_size+0xd3978>
    88bc:	29040000 	stp	w0, w0, [x0,#32]
    88c0:	00000053 	.inst	0x00000053 ; undefined
    88c4:	f904000c 	str	x12, [x0,#2048]
    88c8:	04000019 	.inst	0x04000019 ; undefined
    88cc:	0000852a 	.inst	0x0000852a ; undefined
    88d0:	00450700 	.inst	0x00450700 ; undefined
    88d4:	00dd0000 	.inst	0x00dd0000 ; undefined
    88d8:	dd080000 	.inst	0xdd080000 ; undefined
    88dc:	ff000000 	.inst	0xff000000 ; undefined
    88e0:	07080200 	.inst	0x07080200 ; undefined
    88e4:	0000059d 	.inst	0x0000059d ; undefined
    88e8:	00212809 	.inst	0x00212809 ; NYI
    88ec:	04040000 	.inst	0x04040000 ; undefined
    88f0:	0001329a 	.inst	0x0001329a ; undefined
    88f4:	1c700600 	ldr	s0, e89b4 <_stack_size+0xe79b4>
    88f8:	9b040000 	madd	x0, x0, x4, x0
    88fc:	000000cd 	.inst	0x000000cd ; undefined
    8900:	1d110a00 	.inst	0x1d110a00 ; undefined
    8904:	9c040000 	ldr	q0, 10904 <_stack_size+0xf904>
    8908:	00000053 	.inst	0x00000053 ; undefined
    890c:	c60a0100 	.inst	0xc60a0100 ; undefined
    8910:	0400001e 	.inst	0x0400001e ; undefined
    8914:	0001329d 	.inst	0x0001329d ; undefined
    8918:	0a010400 	and	w0, w0, w1, lsl #1
    891c:	00001bde 	.inst	0x00001bde ; undefined
    8920:	00c29e04 	.inst	0x00c29e04 ; undefined
    8924:	02f00000 	.inst	0x02f00000 ; undefined
    8928:	001c830a 	.inst	0x001c830a ; undefined
    892c:	cd9f0400 	.inst	0xcd9f0400 ; undefined
    8930:	00000000 	.inst	0x00000000 ; undefined
    8934:	45070003 	.inst	0x45070003 ; undefined
    8938:	43000000 	.inst	0x43000000 ; undefined
    893c:	0b000001 	add	w1, w0, w0
    8940:	000000dd 	.inst	0x000000dd ; undefined
    8944:	040001eb 	.inst	0x040001eb ; undefined
    8948:	00001ed5 	.inst	0x00001ed5 ; undefined
    894c:	00e4a004 	.inst	0x00e4a004 ; undefined
    8950:	96050000 	bl	fffffffff8148950 <SMC_ID_HW_RSA+0xffffffff74138a49>
    8954:	10000003 	adr	x3, 8954 <_stack_size+0x7954>
    8958:	019d2f05 	.inst	0x019d2f05 ; undefined
    895c:	d3060000 	.inst	0xd3060000 ; undefined
    8960:	05000013 	.inst	0x05000013 ; undefined
    8964:	00005330 	.inst	0x00005330 ; undefined
    8968:	3c060000 	stur	b0, [x0,#96]
    896c:	05000003 	.inst	0x05000003 ; undefined
    8970:	00005331 	.inst	0x00005331 ; undefined
    8974:	5a060400 	.inst	0x5a060400 ; undefined
    8978:	05000008 	.inst	0x05000008 ; undefined
    897c:	00005332 	.inst	0x00005332 ; undefined
    8980:	270c0800 	.inst	0x270c0800 ; undefined
    8984:	05000004 	.inst	0x05000004 ; undefined
    8988:	00005334 	.inst	0x00005334 ; undefined
    898c:	1f010400 	fmadd	s0, s0, s1, s1
    8990:	05b70c0c 	.inst	0x05b70c0c ; undefined
    8994:	35050000 	cbnz	w0, 12994 <_stack_size+0x11994>
    8998:	00000053 	.inst	0x00000053 ; undefined
    899c:	0c001f04 	.inst	0x0c001f04 ; undefined
    89a0:	03be0400 	.inst	0x03be0400 ; undefined
    89a4:	36050000 	tbz	w0, #0, 29a4 <_stack_size+0x19a4>
    89a8:	0000014e 	.inst	0x0000014e ; undefined
    89ac:	0022120d 	.inst	0x0022120d ; NYI
    89b0:	37390100 	tbnz	w0, #7, a9d0 <_stack_size+0x99d0>
    89b4:	01000000 	.inst	0x01000000 ; undefined
    89b8:	000001da 	.inst	0x000001da ; undefined
    89bc:	7473640e 	.inst	0x7473640e ; undefined
    89c0:	da390100 	.inst	0xda390100 ; undefined
    89c4:	0e000001 	tbl	v1.8b, {v0.16b}, v0.8b
    89c8:	00637273 	.inst	0x00637273 ; undefined
    89cc:	01da3901 	.inst	0x01da3901 ; undefined
    89d0:	860f0000 	.inst	0x860f0000 ; undefined
    89d4:	0100001f 	.inst	0x0100001f ; undefined
    89d8:	00005339 	.inst	0x00005339 ; undefined
    89dc:	08100000 	stxrb	w16, w0, [x0]
    89e0:	001c9f11 	.inst	0x001c9f11 ; undefined
    89e4:	37460100 	tbnz	w0, #8, 4a04 <_stack_size+0x3a04>
    89e8:	f0000000 	adrp	x0, b000 <_stack_size+0xa000>
    89ec:	00030058 	.inst	0x00030058 ; undefined
    89f0:	48000000 	stxrh	w0, w0, [x0]
    89f4:	00000000 	.inst	0x00000000 ; undefined
    89f8:	01000000 	.inst	0x01000000 ; undefined
    89fc:	00024c9c 	.inst	0x00024c9c ; undefined
    8a00:	74701200 	.inst	0x74701200 ; undefined
    8a04:	48010072 	stxrh	w1, w18, [x3]
    8a08:	0000024c 	.inst	0x0000024c ; undefined
    8a0c:	00008dd9 	.inst	0x00008dd9 ; undefined
    8a10:	0001a813 	.inst	0x0001a813 ; undefined
    8a14:	0058fc00 	.inst	0x0058fc00 ; undefined
    8a18:	00000003 	.inst	0x00000003 ; undefined
    8a1c:	0009b000 	.inst	0x0009b000 ; undefined
    8a20:	144a0100 	b	1288e20 <MPIDR_EL1_MT+0x288e20>
    8a24:	000001ce 	.inst	0x000001ce ; undefined
    8a28:	00008dfc 	.inst	0x00008dfc ; undefined
    8a2c:	0001c314 	.inst	0x0001c314 ; undefined
    8a30:	008e4600 	.inst	0x008e4600 ; undefined
    8a34:	01b81500 	.inst	0x01b81500 ; undefined
    8a38:	24160000 	.inst	0x24160000 ; undefined
    8a3c:	00030059 	.inst	0x00030059 ; undefined
    8a40:	03000000 	.inst	0x03000000 ; undefined
    8a44:	17000003 	b	fffffffffc008a50 <SMC_ID_HW_RSA+0xffffffff77ff8b49>
    8a48:	83025201 	.inst	0x83025201 ; undefined
    8a4c:	00000000 	.inst	0x00000000 ; undefined
    8a50:	019d0818 	.inst	0x019d0818 ; undefined
    8a54:	73110000 	.inst	0x73110000 ; undefined
    8a58:	0100001b 	.inst	0x0100001b ; undefined
    8a5c:	0000374d 	.inst	0x0000374d ; undefined
    8a60:	00593800 	.inst	0x00593800 ; undefined
    8a64:	00000003 	.inst	0x00000003 ; undefined
    8a68:	00005000 	.inst	0x00005000 ; undefined
    8a6c:	00000000 	.inst	0x00000000 ; undefined
    8a70:	dc9c0100 	.inst	0xdc9c0100 ; undefined
    8a74:	19000002 	.inst	0x19000002 ; undefined
    8a78:	00001f74 	.inst	0x00001f74 ; undefined
    8a7c:	02dc4d01 	.inst	0x02dc4d01 ; undefined
    8a80:	8e690000 	.inst	0x8e690000 ; undefined
    8a84:	70120000 	adr	x0, 2ca87 <_stack_size+0x2ba87>
    8a88:	01007274 	.inst	0x01007274 ; undefined
    8a8c:	00024c4f 	.inst	0x00024c4f ; undefined
    8a90:	008ecb00 	.inst	0x008ecb00 ; undefined
    8a94:	01a81300 	.inst	0x01a81300 ; undefined
    8a98:	59440000 	.inst	0x59440000 ; undefined
    8a9c:	00000300 	.inst	0x00000300 ; undefined
    8aa0:	09f00000 	.inst	0x09f00000 ; undefined
    8aa4:	52010000 	eor	w0, w0, #0x80000000
    8aa8:	0001ce14 	.inst	0x0001ce14 ; undefined
    8aac:	008eee00 	.inst	0x008eee00 ; undefined
    8ab0:	01c31400 	.inst	0x01c31400 ; undefined
    8ab4:	8f390000 	.inst	0x8f390000 ; undefined
    8ab8:	b81a0000 	stur	w0, [x0,#-96]
    8abc:	00000001 	.inst	0x00000001 ; undefined
    8ac0:	16000300 	b	fffffffff80096c0 <SMC_ID_HW_RSA+0xffffffff73ff97b9>
    8ac4:	03005970 	.inst	0x03005970 ; undefined
    8ac8:	00000000 	.inst	0x00000000 ; undefined
    8acc:	00000303 	.inst	0x00000303 ; undefined
    8ad0:	03500117 	.inst	0x03500117 ; undefined
    8ad4:	17243d48 	b	fffffffffc917ff4 <SMC_ID_HW_RSA+0xffffffff789080ed>
    8ad8:	83025201 	.inst	0x83025201 ; undefined
    8adc:	00000000 	.inst	0x00000000 ; undefined
    8ae0:	00530818 	.inst	0x00530818 ; undefined
    8ae4:	e21b0000 	.inst	0xe21b0000 ; undefined
    8ae8:	0600001c 	.inst	0x0600001c ; undefined
    8aec:	00014321 	.inst	0x00014321 ; undefined
    8af0:	19611b00 	.inst	0x19611b00 ; undefined
    8af4:	44050000 	.inst	0x44050000 ; undefined
    8af8:	0000024c 	.inst	0x0000024c ; undefined
    8afc:	0019901b 	.inst	0x0019901b ; undefined
    8b00:	4c450500 	.inst	0x4c450500 ; undefined
    8b04:	1c000002 	ldr	s2, 8b04 <_stack_size+0x7b04>
    8b08:	00000cc6 	.inst	0x00000cc6 ; undefined
    8b0c:	006c5307 	.inst	0x006c5307 ; undefined
    8b10:	da1d0000 	sbc	x0, x0, x29
    8b14:	1d000001 	.inst	0x1d000001 ; undefined
    8b18:	000001da 	.inst	0x000001da ; undefined
    8b1c:	00006c1d 	.inst	0x00006c1d ; undefined
    8b20:	af000000 	.inst	0xaf000000 ; undefined
    8b24:	04000000 	.inst	0x04000000 ; undefined
    8b28:	00229800 	.inst	0x00229800 ; NYI
    8b2c:	89010800 	.inst	0x89010800 ; undefined
    8b30:	01000001 	.inst	0x01000001 ; undefined
    8b34:	0000223c 	.inst	0x0000223c ; undefined
    8b38:	03005988 	.inst	0x03005988 ; undefined
    8b3c:	00000000 	.inst	0x00000000 ; undefined
    8b40:	00000018 	.inst	0x00000018 ; undefined
    8b44:	00000000 	.inst	0x00000000 ; undefined
    8b48:	00002be7 	.inst	0x00002be7 ; undefined
    8b4c:	00060102 	.inst	0x00060102 ; undefined
    8b50:	02000001 	.inst	0x02000001 ; undefined
    8b54:	002b0502 	.inst	0x002b0502 ; NYI
    8b58:	04030000 	.inst	0x04030000 ; undefined
    8b5c:	746e6905 	.inst	0x746e6905 ; undefined
    8b60:	05080200 	.inst	0x05080200 ; undefined
    8b64:	000000a9 	.inst	0x000000a9 ; undefined
    8b68:	fe080102 	.inst	0xfe080102 ; undefined
    8b6c:	02000000 	.inst	0x02000000 ; undefined
    8b70:	01310702 	.inst	0x01310702 ; undefined
    8b74:	04020000 	.inst	0x04020000 ; undefined
    8b78:	00011607 	.inst	0x00011607 ; undefined
    8b7c:	07080200 	.inst	0x07080200 ; undefined
    8b80:	00000111 	.inst	0x00000111 ; undefined
    8b84:	00008504 	.inst	0x00008504 ; undefined
    8b88:	5a7a0200 	.inst	0x5a7a0200 ; undefined
    8b8c:	04000000 	.inst	0x04000000 ; undefined
    8b90:	0000003f 	.inst	0x0000003f ; undefined
    8b94:	00531103 	.inst	0x00531103 ; undefined
    8b98:	08020000 	stxrb	w2, w0, [x0]
    8b9c:	00010c07 	.inst	0x00010c07 ; undefined
    8ba0:	05080200 	.inst	0x05080200 ; undefined
    8ba4:	000000a4 	.inst	0x000000a4 ; undefined
    8ba8:	00222605 	.inst	0x00222605 ; NYI
    8bac:	372d0100 	tbnz	w0, #5, 2bcc <_stack_size+0x1bcc>
    8bb0:	88000000 	stxr	w0, w0, [x0]
    8bb4:	00030059 	.inst	0x00030059 ; undefined
    8bb8:	18000000 	ldr	w0, 8bb8 <_stack_size+0x7bb8>
    8bbc:	00000000 	.inst	0x00000000 ; undefined
    8bc0:	01000000 	.inst	0x01000000 ; undefined
    8bc4:	6176069c 	.inst	0x6176069c ; undefined
    8bc8:	2d01006c 	stp	s12, s0, [x3,#8]
    8bcc:	0000006c 	.inst	0x0000006c ; undefined
    8bd0:	00008f5c 	.inst	0x00008f5c ; undefined
    8bd4:	04160000 	.inst	0x04160000 ; undefined
    8bd8:	00040000 	.inst	0x00040000 ; undefined
    8bdc:	000022f6 	.inst	0x000022f6 ; undefined
    8be0:	01890108 	.inst	0x01890108 ; undefined
    8be4:	be010000 	.inst	0xbe010000 ; undefined
    8be8:	a0000022 	.inst	0xa0000022 ; undefined
    8bec:	00030059 	.inst	0x00030059 ; undefined
    8bf0:	6c000000 	stnp	d0, d0, [x0]
    8bf4:	00000001 	.inst	0x00000001 ; undefined
    8bf8:	44000000 	.inst	0x44000000 ; undefined
    8bfc:	0200002d 	.inst	0x0200002d ; undefined
    8c00:	01000601 	.inst	0x01000601 ; undefined
    8c04:	02020000 	.inst	0x02020000 ; undefined
    8c08:	00002b05 	.inst	0x00002b05 ; undefined
    8c0c:	05040300 	.inst	0x05040300 ; undefined
    8c10:	00746e69 	.inst	0x00746e69 ; undefined
    8c14:	a9050802 	stp	x2, x2, [x0,#80]
    8c18:	02000000 	.inst	0x02000000 ; undefined
    8c1c:	00fe0801 	.inst	0x00fe0801 ; undefined
    8c20:	02020000 	.inst	0x02020000 ; undefined
    8c24:	00013107 	.inst	0x00013107 ; undefined
    8c28:	07040200 	.inst	0x07040200 ; undefined
    8c2c:	00000116 	.inst	0x00000116 ; undefined
    8c30:	11070802 	add	w2, w0, #0x1c2
    8c34:	04000001 	.inst	0x04000001 ; undefined
    8c38:	00000085 	.inst	0x00000085 ; undefined
    8c3c:	005a7a02 	.inst	0x005a7a02 ; undefined
    8c40:	04040000 	.inst	0x04040000 ; undefined
    8c44:	03000006 	.inst	0x03000006 ; undefined
    8c48:	0000450d 	.inst	0x0000450d ; undefined
    8c4c:	003f0400 	.inst	0x003f0400 ; NYI
    8c50:	11030000 	add	w0, w0, #0xc0
    8c54:	00000053 	.inst	0x00000053 ; undefined
    8c58:	0c070802 	.inst	0x0c070802 ; undefined
    8c5c:	02000001 	.inst	0x02000001 ; undefined
    8c60:	00a40508 	.inst	0x00a40508 ; undefined
    8c64:	96040000 	bl	fffffffff8108c64 <SMC_ID_HW_RSA+0xffffffff740f8d5d>
    8c68:	03000022 	.inst	0x03000022 ; undefined
    8c6c:	00006c15 	.inst	0x00006c15 ; undefined
    8c70:	234c0500 	.inst	0x234c0500 ; undefined
    8c74:	2b010000 	adds	w0, w0, w1
    8c78:	00000077 	.inst	0x00000077 ; undefined
    8c7c:	0000cd01 	.inst	0x0000cd01 ; undefined
    8c80:	22a90600 	.inst	0x22a90600 ; undefined
    8c84:	2b010000 	adds	w0, w0, w1
    8c88:	00000053 	.inst	0x00000053 ; undefined
    8c8c:	00234506 	.inst	0x00234506 ; NYI
    8c90:	532b0100 	.inst	0x532b0100 ; undefined
    8c94:	07000000 	.inst	0x07000000 ; undefined
    8c98:	00002331 	.inst	0x00002331 ; undefined
    8c9c:	00772d01 	.inst	0x00772d01 ; undefined
    8ca0:	05000000 	.inst	0x05000000 ; undefined
    8ca4:	0000229b 	.inst	0x0000229b ; undefined
    8ca8:	00905a01 	.inst	0x00905a01 ; undefined
    8cac:	ff010000 	.inst	0xff010000 ; undefined
    8cb0:	06000000 	.inst	0x06000000 ; undefined
    8cb4:	000022a9 	.inst	0x000022a9 ; undefined
    8cb8:	00775a01 	.inst	0x00775a01 ; undefined
    8cbc:	b1060000 	adds	x0, x0, #0x180
    8cc0:	01000010 	.inst	0x01000010 ; undefined
    8cc4:	0000775a 	.inst	0x0000775a ; undefined
    8cc8:	233b0700 	.inst	0x233b0700 ; undefined
    8ccc:	5c010000 	ldr	d0, accc <_stack_size+0x9ccc>
    8cd0:	00000090 	.inst	0x00000090 ; undefined
    8cd4:	009b0800 	.inst	0x009b0800 ; undefined
    8cd8:	59a00000 	.inst	0x59a00000 ; undefined
    8cdc:	00000300 	.inst	0x00000300 ; undefined
    8ce0:	00480000 	.inst	0x00480000 ; undefined
    8ce4:	00000000 	.inst	0x00000000 ; undefined
    8ce8:	9c010000 	ldr	q0, ace8 <_stack_size+0x9ce8>
    8cec:	00000130 	.inst	0x00000130 ; undefined
    8cf0:	0000ab09 	.inst	0x0000ab09 ; undefined
    8cf4:	008f9500 	.inst	0x008f9500 ; undefined
    8cf8:	00b60a00 	.inst	0x00b60a00 ; undefined
    8cfc:	51010000 	sub	w0, w0, #0x40
    8d00:	0000c10b 	.inst	0x0000c10b ; undefined
    8d04:	9b080000 	madd	x0, x0, x8, x0
    8d08:	e8000000 	.inst	0xe8000000 ; undefined
    8d0c:	00030059 	.inst	0x00030059 ; undefined
    8d10:	14000000 	b	8d10 <_stack_size+0x7d10>
    8d14:	00000000 	.inst	0x00000000 ; undefined
    8d18:	01000000 	.inst	0x01000000 ; undefined
    8d1c:	0001719c 	.inst	0x0001719c ; undefined
    8d20:	00ab0900 	.inst	0x00ab0900 ; undefined
    8d24:	8fe30000 	.inst	0x8fe30000 ; undefined
    8d28:	b6090000 	tbz	x0, #33, ad28 <_stack_size+0x9d28>
    8d2c:	45000000 	.inst	0x45000000 ; undefined
    8d30:	0c000090 	st4	{v16.8b-v19.8b}, [x4]
    8d34:	000000c1 	.inst	0x000000c1 ; undefined
    8d38:	59fc0d00 	.inst	0x59fc0d00 ; undefined
    8d3c:	00000300 	.inst	0x00000300 ; undefined
    8d40:	00ff0000 	.inst	0x00ff0000 ; undefined
    8d44:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    8d48:	000022b1 	.inst	0x000022b1 ; undefined
    8d4c:	00774b01 	.inst	0x00774b01 ; undefined
    8d50:	59fc0000 	.inst	0x59fc0000 ; undefined
    8d54:	00000300 	.inst	0x00000300 ; undefined
    8d58:	003c0000 	.inst	0x003c0000 ; NYI
    8d5c:	00000000 	.inst	0x00000000 ; undefined
    8d60:	9c010000 	ldr	q0, ad60 <_stack_size+0x9d60>
    8d64:	000001a2 	.inst	0x000001a2 ; undefined
    8d68:	0022a90f 	.inst	0x0022a90f ; NYI
    8d6c:	774b0100 	.inst	0x774b0100 ; undefined
    8d70:	7e000000 	.inst	0x7e000000 ; undefined
    8d74:	00000090 	.inst	0x00000090 ; undefined
    8d78:	0000cd08 	.inst	0x0000cd08 ; undefined
    8d7c:	005a3800 	.inst	0x005a3800 ; undefined
    8d80:	00000003 	.inst	0x00000003 ; undefined
    8d84:	00002c00 	.inst	0x00002c00 ; undefined
    8d88:	00000000 	.inst	0x00000000 ; undefined
    8d8c:	119c0100 	.inst	0x119c0100 ; undefined
    8d90:	09000002 	.inst	0x09000002 ; undefined
    8d94:	000000dd 	.inst	0x000000dd ; undefined
    8d98:	000090e0 	.inst	0x000090e0 ; undefined
    8d9c:	0000e809 	.inst	0x0000e809 ; undefined
    8da0:	00912e00 	.inst	0x00912e00 ; undefined
    8da4:	00f30c00 	.inst	0x00f30c00 ; undefined
    8da8:	10000000 	adr	x0, 8da8 <_stack_size+0x7da8>
    8dac:	03005a44 	.inst	0x03005a44 ; undefined
    8db0:	00000000 	.inst	0x00000000 ; undefined
    8db4:	00000014 	.inst	0x00000014 ; undefined
    8db8:	00000000 	.inst	0x00000000 ; undefined
    8dbc:	0000e809 	.inst	0x0000e809 ; undefined
    8dc0:	00916700 	.inst	0x00916700 ; undefined
    8dc4:	00dd0900 	.inst	0x00dd0900 ; undefined
    8dc8:	918d0000 	.inst	0x918d0000 ; undefined
    8dcc:	44100000 	.inst	0x44100000 ; undefined
    8dd0:	0003005a 	.inst	0x0003005a ; undefined
    8dd4:	14000000 	b	8dd4 <_stack_size+0x7dd4>
    8dd8:	00000000 	.inst	0x00000000 ; undefined
    8ddc:	0b000000 	add	w0, w0, w0
    8de0:	000000f3 	.inst	0x000000f3 ; undefined
    8de4:	11000000 	add	w0, w0, #0x0
    8de8:	00000c84 	.inst	0x00000c84 ; undefined
    8dec:	5a647a01 	.inst	0x5a647a01 ; undefined
    8df0:	00000300 	.inst	0x00000300 ; undefined
    8df4:	00500000 	.inst	0x00500000 ; undefined
    8df8:	00000000 	.inst	0x00000000 ; undefined
    8dfc:	9c010000 	ldr	q0, adfc <_stack_size+0x9dfc>
    8e00:	00000313 	.inst	0x00000313 ; undefined
    8e04:	0022a90f 	.inst	0x0022a90f ; NYI
    8e08:	777a0100 	.inst	0x777a0100 ; undefined
    8e0c:	c5000000 	.inst	0xc5000000 ; undefined
    8e10:	0f000091 	.inst	0x0f000091 ; undefined
    8e14:	00002316 	.inst	0x00002316 ; undefined
    8e18:	00537a01 	.inst	0x00537a01 ; undefined
    8e1c:	92370000 	and	x0, x0, #0x20000000200
    8e20:	31120000 	adds	w0, w0, #0x480
    8e24:	01000023 	.inst	0x01000023 ; undefined
    8e28:	0000777c 	.inst	0x0000777c ; undefined
    8e2c:	00929900 	.inst	0x00929900 ; undefined
    8e30:	009b1300 	.inst	0x009b1300 ; undefined
    8e34:	5a680000 	.inst	0x5a680000 ; undefined
    8e38:	00000300 	.inst	0x00000300 ; undefined
    8e3c:	0a300000 	bic	w0, w0, w16
    8e40:	84010000 	.inst	0x84010000 ; undefined
    8e44:	000002aa 	.inst	0x000002aa ; undefined
    8e48:	0000b609 	.inst	0x0000b609 ; undefined
    8e4c:	00929900 	.inst	0x00929900 ; undefined
    8e50:	00ab0900 	.inst	0x00ab0900 ; undefined
    8e54:	930f0000 	.inst	0x930f0000 ; undefined
    8e58:	30140000 	adr	x0, 30e59 <_stack_size+0x2fe59>
    8e5c:	0c00000a 	st4	{v10.8b-v13.8b}, [x0]
    8e60:	000000c1 	.inst	0x000000c1 ; undefined
    8e64:	5ab01500 	.inst	0x5ab01500 ; undefined
    8e68:	00000300 	.inst	0x00000300 ; undefined
    8e6c:	00ff0000 	.inst	0x00ff0000 ; undefined
    8e70:	01160000 	.inst	0x01160000 ; undefined
    8e74:	01f30751 	.inst	0x01f30751 ; undefined
    8e78:	69930a51 	.inst	0x69930a51 ; undefined
    8e7c:	0000001e 	.inst	0x0000001e ; undefined
    8e80:	0000cd17 	.inst	0x0000cd17 ; undefined
    8e84:	005a7400 	.inst	0x005a7400 ; undefined
    8e88:	00000003 	.inst	0x00000003 ; undefined
    8e8c:	00002800 	.inst	0x00002800 ; undefined
    8e90:	00000000 	.inst	0x00000000 ; undefined
    8e94:	09870100 	.inst	0x09870100 ; undefined
    8e98:	000000e8 	.inst	0x000000e8 ; undefined
    8e9c:	00009381 	.inst	0x00009381 ; undefined
    8ea0:	0000dd09 	.inst	0x0000dd09 ; undefined
    8ea4:	0093ab00 	.inst	0x0093ab00 ; undefined
    8ea8:	5a741000 	.inst	0x5a741000 ; undefined
    8eac:	00000300 	.inst	0x00000300 ; undefined
    8eb0:	00280000 	.inst	0x00280000 ; NYI
    8eb4:	00000000 	.inst	0x00000000 ; undefined
    8eb8:	f3180000 	.inst	0xf3180000 ; undefined
    8ebc:	e4000000 	.inst	0xe4000000 ; undefined
    8ec0:	14000093 	b	910c <_stack_size+0x810c>
    8ec4:	00000a70 	.inst	0x00000a70 ; undefined
    8ec8:	0000e809 	.inst	0x0000e809 ; undefined
    8ecc:	00940800 	.inst	0x00940800 ; undefined
    8ed0:	00dd0900 	.inst	0x00dd0900 ; undefined
    8ed4:	94320000 	bl	c88ed4 <_stack_size+0xc87ed4>
    8ed8:	70140000 	adr	x0, 30edb <_stack_size+0x2fedb>
    8edc:	0b00000a 	add	w10, w0, w0
    8ee0:	000000f3 	.inst	0x000000f3 ; undefined
    8ee4:	00000000 	.inst	0x00000000 ; undefined
    8ee8:	0b071900 	add	w0, w8, w7, lsl #6
    8eec:	89010000 	.inst	0x89010000 ; undefined
    8ef0:	03005ab4 	.inst	0x03005ab4 ; undefined
    8ef4:	00000000 	.inst	0x00000000 ; undefined
    8ef8:	00000058 	.inst	0x00000058 ; undefined
    8efc:	00000000 	.inst	0x00000000 ; undefined
    8f00:	a90f9c01 	stp	x1, x7, [x0,#248]
    8f04:	01000022 	.inst	0x01000022 ; undefined
    8f08:	00007789 	.inst	0x00007789 ; undefined
    8f0c:	00946b00 	.inst	0x00946b00 ; undefined
    8f10:	23230f00 	.inst	0x23230f00 ; undefined
    8f14:	89010000 	.inst	0x89010000 ; undefined
    8f18:	00000053 	.inst	0x00000053 ; undefined
    8f1c:	000094dd 	.inst	0x000094dd ; undefined
    8f20:	00233112 	.inst	0x00233112 ; NYI
    8f24:	778b0100 	.inst	0x778b0100 ; undefined
    8f28:	3f000000 	.inst	0x3f000000 ; undefined
    8f2c:	13000095 	sbfx	w21, w4, #0, #1
    8f30:	0000009b 	.inst	0x0000009b ; undefined
    8f34:	03005ab8 	.inst	0x03005ab8 ; undefined
    8f38:	00000000 	.inst	0x00000000 ; undefined
    8f3c:	00000aa0 	.inst	0x00000aa0 ; undefined
    8f40:	03b09101 	.inst	0x03b09101 ; undefined
    8f44:	b6090000 	tbz	x0, #33, af44 <_stack_size+0x9f44>
    8f48:	3f000000 	.inst	0x3f000000 ; undefined
    8f4c:	09000095 	.inst	0x09000095 ; undefined
    8f50:	000000ab 	.inst	0x000000ab ; undefined
    8f54:	000095ad 	.inst	0x000095ad ; undefined
    8f58:	000aa014 	.inst	0x000aa014 ; undefined
    8f5c:	00c10c00 	.inst	0x00c10c00 ; undefined
    8f60:	15000000 	b	4008f60 <_stack_base+0xffb7e0>
    8f64:	03005b08 	.inst	0x03005b08 ; undefined
    8f68:	00000000 	.inst	0x00000000 ; undefined
    8f6c:	000000ff 	.inst	0x000000ff ; undefined
    8f70:	0f510116 	.inst	0x0f510116 ; undefined
    8f74:	335101f3 	.inst	0x335101f3 ; undefined
    8f78:	5101f324 	sub	w4, w25, #0x7c
    8f7c:	f324321c 	.inst	0xf324321c ; undefined
    8f80:	001c5101 	.inst	0x001c5101 ; undefined
    8f84:	cd170000 	.inst	0xcd170000 ; undefined
    8f88:	c4000000 	.inst	0xc4000000 ; undefined
    8f8c:	0003005a 	.inst	0x0003005a ; undefined
    8f90:	28000000 	stnp	w0, w0, [x0]
    8f94:	00000000 	.inst	0x00000000 ; undefined
    8f98:	01000000 	.inst	0x01000000 ; undefined
    8f9c:	00e80994 	.inst	0x00e80994 ; undefined
    8fa0:	961f0000 	bl	fffffffff87c8fa0 <SMC_ID_HW_RSA+0xffffffff747b9099>
    8fa4:	dd090000 	.inst	0xdd090000 ; undefined
    8fa8:	47000000 	.inst	0x47000000 ; undefined
    8fac:	10000096 	adr	x22, 8fbc <_stack_size+0x7fbc>
    8fb0:	03005ac4 	.inst	0x03005ac4 ; undefined
    8fb4:	00000000 	.inst	0x00000000 ; undefined
    8fb8:	00000028 	.inst	0x00000028 ; undefined
    8fbc:	00000000 	.inst	0x00000000 ; undefined
    8fc0:	0000f318 	.inst	0x0000f318 ; undefined
    8fc4:	00968000 	.inst	0x00968000 ; undefined
    8fc8:	0ae01400 	bic	w0, w0, w0, ror #5
    8fcc:	e8090000 	.inst	0xe8090000 ; undefined
    8fd0:	a4000000 	.inst	0xa4000000 ; undefined
    8fd4:	09000096 	.inst	0x09000096 ; undefined
    8fd8:	000000dd 	.inst	0x000000dd ; undefined
    8fdc:	000096cc 	.inst	0x000096cc ; undefined
    8fe0:	000ae014 	.inst	0x000ae014 ; undefined
    8fe4:	00f30b00 	.inst	0x00f30b00 ; undefined
	...
    8ff0:	000010c3 	.inst	0x000010c3 ; undefined
    8ff4:	24580004 	.inst	0x24580004 ; undefined
    8ff8:	01080000 	.inst	0x01080000 ; undefined
    8ffc:	00000189 	.inst	0x00000189 ; undefined
    9000:	0024b601 	.inst	0x0024b601 ; NYI
    9004:	005b0c00 	.inst	0x005b0c00 ; undefined
    9008:	00000003 	.inst	0x00000003 ; undefined
    900c:	0006c800 	.inst	0x0006c800 ; undefined
    9010:	00000000 	.inst	0x00000000 ; undefined
    9014:	002f2300 	.inst	0x002f2300 ; NYI
    9018:	07040200 	.inst	0x07040200 ; undefined
    901c:	00000116 	.inst	0x00000116 ; undefined
    9020:	00060102 	.inst	0x00060102 ; undefined
    9024:	02000001 	.inst	0x02000001 ; undefined
    9028:	002b0502 	.inst	0x002b0502 ; NYI
    902c:	04030000 	.inst	0x04030000 ; undefined
    9030:	746e6905 	.inst	0x746e6905 ; undefined
    9034:	05080200 	.inst	0x05080200 ; undefined
    9038:	000000a9 	.inst	0x000000a9 ; undefined
    903c:	fe080102 	.inst	0xfe080102 ; undefined
    9040:	02000000 	.inst	0x02000000 ; undefined
    9044:	01310702 	.inst	0x01310702 ; undefined
    9048:	08020000 	stxrb	w2, w0, [x0]
    904c:	00011107 	.inst	0x00011107 ; undefined
    9050:	00850400 	.inst	0x00850400 ; undefined
    9054:	7a020000 	sbcs	w0, w0, w2
    9058:	0000005a 	.inst	0x0000005a ; undefined
    905c:	00060404 	.inst	0x00060404 ; undefined
    9060:	4c0d0300 	.inst	0x4c0d0300 ; undefined
    9064:	04000000 	.inst	0x04000000 ; undefined
    9068:	0000003f 	.inst	0x0000003f ; undefined
    906c:	00291103 	.inst	0x00291103 ; NYI
    9070:	08020000 	stxrb	w2, w0, [x0]
    9074:	00010c07 	.inst	0x00010c07 ; undefined
    9078:	05080200 	.inst	0x05080200 ; undefined
    907c:	000000a4 	.inst	0x000000a4 ; undefined
    9080:	00229604 	.inst	0x00229604 ; NYI
    9084:	6c150300 	stnp	d0, d0, [x24,#336]
    9088:	05000000 	.inst	0x05000000 ; undefined
    908c:	c2310404 	.inst	0xc2310404 ; undefined
    9090:	06000000 	.inst	0x06000000 ; undefined
    9094:	004c4c44 	.inst	0x004c4c44 ; undefined
    9098:	00773404 	.inst	0x00773404 ; undefined
    909c:	08040000 	stxrb	w4, w0, [x0]
    90a0:	8e070018 	.inst	0x8e070018 ; undefined
    90a4:	04000023 	.inst	0x04000023 ; undefined
    90a8:	00007735 	.inst	0x00007735 ; undefined
    90ac:	00180400 	.inst	0x00180400 ; undefined
    90b0:	04050000 	.inst	0x04050000 ; undefined
    90b4:	00e93904 	.inst	0x00e93904 ; undefined
    90b8:	52060000 	eor	w0, w0, #0x4000000
    90bc:	04004442 	.inst	0x04004442 ; undefined
    90c0:	0000773c 	.inst	0x0000773c ; undefined
    90c4:	18080400 	ldr	w0, 19144 <_stack_size+0x18144>
    90c8:	238e0700 	.inst	0x238e0700 ; undefined
    90cc:	3d040000 	str	b0, [x0,#256]
    90d0:	00000077 	.inst	0x00000077 ; undefined
    90d4:	00001804 	.inst	0x00001804 ; undefined
    90d8:	04040500 	.inst	0x04040500 ; undefined
    90dc:	00011041 	.inst	0x00011041 ; undefined
    90e0:	48540600 	ldxrh	w0, [x16]
    90e4:	44040044 	.inst	0x44040044 ; undefined
    90e8:	00000077 	.inst	0x00000077 ; undefined
    90ec:	00180804 	.inst	0x00180804 ; undefined
    90f0:	00238e07 	.inst	0x00238e07 ; NYI
    90f4:	77450400 	.inst	0x77450400 ; undefined
    90f8:	04000000 	.inst	0x04000000 ; undefined
    90fc:	00000018 	.inst	0x00000018 ; undefined
    9100:	00245108 	.inst	0x00245108 ; NYI
    9104:	2e040400 	.inst	0x2e040400 ; undefined
    9108:	00000149 	.inst	0x00000149 ; undefined
    910c:	00262309 	.inst	0x00262309 ; NYI
    9110:	77300400 	.inst	0x77300400 ; undefined
    9114:	09000000 	.inst	0x09000000 ; undefined
    9118:	00002529 	.inst	0x00002529 ; undefined
    911c:	009b3704 	.inst	0x009b3704 ; undefined
    9120:	31090000 	adds	w0, w0, #0x240
    9124:	04000025 	.inst	0x04000025 ; undefined
    9128:	0000c23f 	.inst	0x0000c23f ; undefined
    912c:	25390900 	.inst	0x25390900 ; undefined
    9130:	47040000 	.inst	0x47040000 ; undefined
    9134:	000000e9 	.inst	0x000000e9 ; undefined
    9138:	24520400 	.inst	0x24520400 ; undefined
    913c:	49040000 	.inst	0x49040000 ; undefined
    9140:	00000110 	.inst	0x00000110 ; undefined
    9144:	4e040405 	dup	v5.4s, v0.s[0]
    9148:	0000017b 	.inst	0x0000017b ; undefined
    914c:	4d4c4406 	.inst	0x4d4c4406 ; undefined
    9150:	77510400 	.inst	0x77510400 ; undefined
    9154:	04000000 	.inst	0x04000000 ; undefined
    9158:	07001808 	.inst	0x07001808 ; undefined
    915c:	0000238e 	.inst	0x0000238e ; undefined
    9160:	00775204 	.inst	0x00775204 ; undefined
    9164:	18040000 	ldr	w0, 11164 <_stack_size+0x10164>
    9168:	05000000 	.inst	0x05000000 ; undefined
    916c:	cf550404 	.inst	0xcf550404 ; undefined
    9170:	07000001 	.inst	0x07000001 ; undefined
    9174:	0000261e 	.inst	0x0000261e ; undefined
    9178:	00775804 	.inst	0x00775804 ; undefined
    917c:	01040000 	.inst	0x01040000 ; undefined
    9180:	0f07001f 	.inst	0x0f07001f ; undefined
    9184:	04000026 	.inst	0x04000026 ; undefined
    9188:	00007759 	.inst	0x00007759 ; undefined
    918c:	1e010400 	.inst	0x1e010400 ; undefined
    9190:	23f90700 	.inst	0x23f90700 ; undefined
    9194:	5a040000 	sbc	w0, w0, w4
    9198:	00000077 	.inst	0x00000077 ; undefined
    919c:	001d0104 	.inst	0x001d0104 ; undefined
    91a0:	00248407 	.inst	0x00248407 ; NYI
    91a4:	775b0400 	.inst	0x775b0400 ; undefined
    91a8:	04000000 	.inst	0x04000000 ; undefined
    91ac:	07001c01 	.inst	0x07001c01 ; undefined
    91b0:	0000238e 	.inst	0x0000238e ; undefined
    91b4:	00775c04 	.inst	0x00775c04 ; undefined
    91b8:	1c040000 	ldr	s0, 111b8 <_stack_size+0x101b8>
    91bc:	08000000 	stxrb	w0, w0, [x0]
    91c0:	0000249f 	.inst	0x0000249f ; undefined
    91c4:	fd4b0404 	ldr	d4, [x0,#5640]
    91c8:	09000001 	.inst	0x09000001 ; undefined
    91cc:	00002623 	.inst	0x00002623 ; undefined
    91d0:	00774d04 	.inst	0x00774d04 ; undefined
    91d4:	29090000 	stp	w0, w0, [x0,#72]
    91d8:	04000025 	.inst	0x04000025 ; undefined
    91dc:	00015453 	.inst	0x00015453 ; undefined
    91e0:	25310900 	.inst	0x25310900 ; undefined
    91e4:	5d040000 	.inst	0x5d040000 ; undefined
    91e8:	0000017b 	.inst	0x0000017b ; undefined
    91ec:	24a00400 	.inst	0x24a00400 ; undefined
    91f0:	5f040000 	.inst	0x5f040000 ; undefined
    91f4:	000001cf 	.inst	0x000001cf ; undefined
    91f8:	64040405 	.inst	0x64040405 ; undefined
    91fc:	0000025c 	.inst	0x0000025c ; undefined
    9200:	00247a07 	.inst	0x00247a07 ; NYI
    9204:	77670400 	.inst	0x77670400 ; undefined
    9208:	04000000 	.inst	0x04000000 ; undefined
    920c:	06001f01 	.inst	0x06001f01 ; undefined
    9210:	00444949 	.inst	0x00444949 ; undefined
    9214:	00776904 	.inst	0x00776904 ; undefined
    9218:	03040000 	.inst	0x03040000 ; undefined
    921c:	db07001c 	.inst	0xdb07001c ; undefined
    9220:	04000023 	.inst	0x04000023 ; undefined
    9224:	0000776f 	.inst	0x0000776f ; undefined
    9228:	1a020400 	.inst	0x1a020400 ; undefined
    922c:	25af0700 	.inst	0x25af0700 ; undefined
    9230:	70040000 	adr	x0, 11233 <_stack_size+0x10233>
    9234:	00000077 	.inst	0x00000077 ; undefined
    9238:	00180204 	.inst	0x00180204 ; undefined
    923c:	0023e507 	.inst	0x0023e507 ; NYI
    9240:	77730400 	.inst	0x77730400 ; undefined
    9244:	04000000 	.inst	0x04000000 ; undefined
    9248:	00000018 	.inst	0x00000018 ; undefined
    924c:	76040405 	.inst	0x76040405 ; undefined
    9250:	000002ce 	.inst	0x000002ce ; undefined
    9254:	00242707 	.inst	0x00242707 ; NYI
    9258:	77790400 	.inst	0x77790400 ; undefined
    925c:	04000000 	.inst	0x04000000 ; undefined
    9260:	07001f01 	.inst	0x07001f01 ; undefined
    9264:	00002515 	.inst	0x00002515 ; undefined
    9268:	00777e04 	.inst	0x00777e04 ; undefined
    926c:	01040000 	.inst	0x01040000 ; undefined
    9270:	e807001e 	.inst	0xe807001e ; undefined
    9274:	04000025 	.inst	0x04000025 ; undefined
    9278:	00007780 	.inst	0x00007780 ; undefined
    927c:	1d010400 	.inst	0x1d010400 ; undefined
    9280:	25d10700 	.inst	0x25d10700 ; undefined
    9284:	82040000 	.inst	0x82040000 ; undefined
    9288:	00000077 	.inst	0x00000077 ; undefined
    928c:	001c0104 	.inst	0x001c0104 ; undefined
    9290:	0023db07 	.inst	0x0023db07 ; NYI
    9294:	77830400 	.inst	0x77830400 ; undefined
    9298:	04000000 	.inst	0x04000000 ; undefined
    929c:	07001a02 	.inst	0x07001a02 ; undefined
    92a0:	000023f4 	.inst	0x000023f4 ; undefined
    92a4:	00778404 	.inst	0x00778404 ; undefined
    92a8:	02040000 	.inst	0x02040000 ; undefined
    92ac:	e5070018 	.inst	0xe5070018 ; undefined
    92b0:	04000023 	.inst	0x04000023 ; undefined
    92b4:	0000778a 	.inst	0x0000778a ; undefined
    92b8:	00180400 	.inst	0x00180400 ; undefined
    92bc:	94080000 	bl	2092bc <_stack_size+0x2082bc>
    92c0:	04000025 	.inst	0x04000025 ; undefined
    92c4:	02fc6104 	.inst	0x02fc6104 ; undefined
    92c8:	23090000 	.inst	0x23090000 ; undefined
    92cc:	04000026 	.inst	0x04000026 ; undefined
    92d0:	00007763 	.inst	0x00007763 ; undefined
    92d4:	25290900 	.inst	0x25290900 ; undefined
    92d8:	74040000 	.inst	0x74040000 ; undefined
    92dc:	00000208 	.inst	0x00000208 ; undefined
    92e0:	00253109 	.inst	0x00253109 ; NYI
    92e4:	5c8b0400 	ldr	d0, fffffffffff1f364 <SMC_ID_HW_RSA+0xffffffff7bf0f45d>
    92e8:	00000002 	.inst	0x00000002 ; undefined
    92ec:	00259504 	.inst	0x00259504 ; NYI
    92f0:	ce8d0400 	.inst	0xce8d0400 ; undefined
    92f4:	05000002 	.inst	0x05000002 ; undefined
    92f8:	79920404 	ldrsh	x4, [x0,#2306]
    92fc:	06000003 	.inst	0x06000003 ; undefined
    9300:	00534c57 	.inst	0x00534c57 ; undefined
    9304:	00779504 	.inst	0x00779504 ; undefined
    9308:	02040000 	.inst	0x02040000 ; undefined
    930c:	5306001e 	ubfiz	w30, w0, #26, #1
    9310:	04005054 	.inst	0x04005054 ; undefined
    9314:	0000779a 	.inst	0x0000779a ; undefined
    9318:	1d010400 	.inst	0x1d010400 ; undefined
    931c:	45500600 	.inst	0x45500600 ; undefined
    9320:	9d04004e 	.inst	0x9d04004e ; undefined
    9324:	00000077 	.inst	0x00000077 ; undefined
    9328:	001c0104 	.inst	0x001c0104 ; undefined
    932c:	53504506 	.inst	0x53504506 ; undefined
    9330:	779e0400 	.inst	0x779e0400 ; undefined
    9334:	04000000 	.inst	0x04000000 ; undefined
    9338:	06001a02 	.inst	0x06001a02 ; undefined
    933c:	004b5242 	.inst	0x004b5242 ; undefined
    9340:	0077a304 	.inst	0x0077a304 ; undefined
    9344:	01040000 	.inst	0x01040000 ; undefined
    9348:	47070019 	.inst	0x47070019 ; undefined
    934c:	04000026 	.inst	0x04000026 ; undefined
    9350:	000077a6 	.inst	0x000077a6 ; undefined
    9354:	18010400 	ldr	w0, b3d4 <_stack_size+0xa3d4>
    9358:	238e0700 	.inst	0x238e0700 ; undefined
    935c:	a7040000 	.inst	0xa7040000 ; undefined
    9360:	00000077 	.inst	0x00000077 ; undefined
    9364:	00001804 	.inst	0x00001804 ; undefined
    9368:	24440800 	.inst	0x24440800 ; undefined
    936c:	04040000 	.inst	0x04040000 ; undefined
    9370:	00039c8f 	.inst	0x00039c8f ; undefined
    9374:	26230900 	.inst	0x26230900 ; undefined
    9378:	91040000 	add	x0, x0, #0x100
    937c:	00000077 	.inst	0x00000077 ; undefined
    9380:	00236509 	.inst	0x00236509 ; NYI
    9384:	07a80400 	.inst	0x07a80400 ; undefined
    9388:	00000003 	.inst	0x00000003 ; undefined
    938c:	00244504 	.inst	0x00244504 ; NYI
    9390:	79aa0400 	ldrsh	x0, [x0,#5378]
    9394:	05000003 	.inst	0x05000003 ; undefined
    9398:	fbaf0404 	.inst	0xfbaf0404 ; undefined
    939c:	06000003 	.inst	0x06000003 ; undefined
    93a0:	00525444 	.inst	0x00525444 ; undefined
    93a4:	0077b204 	.inst	0x0077b204 ; undefined
    93a8:	01040000 	.inst	0x01040000 ; undefined
    93ac:	5206001f 	eor	wsp, w0, #0x4000000
    93b0:	04005354 	.inst	0x04005354 ; undefined
    93b4:	000077b5 	.inst	0x000077b5 ; undefined
    93b8:	1e010400 	.inst	0x1e010400 ; undefined
    93bc:	23db0700 	.inst	0x23db0700 ; undefined
    93c0:	b8040000 	stur	w0, [x0,#64]
    93c4:	00000077 	.inst	0x00000077 ; undefined
    93c8:	001c0204 	.inst	0x001c0204 ; undefined
    93cc:	0023e507 	.inst	0x0023e507 ; NYI
    93d0:	77b90400 	.inst	0x77b90400 ; undefined
    93d4:	04000000 	.inst	0x04000000 ; undefined
    93d8:	0700011b 	.inst	0x0700011b ; undefined
    93dc:	0000247f 	.inst	0x0000247f ; undefined
    93e0:	0077ba04 	.inst	0x0077ba04 ; undefined
    93e4:	01040000 	.inst	0x01040000 ; undefined
    93e8:	08000000 	stxrb	w0, w0, [x0]
    93ec:	000023b7 	.inst	0x000023b7 ; undefined
    93f0:	1eac0404 	.inst	0x1eac0404 ; undefined
    93f4:	09000004 	.inst	0x09000004 ; undefined
    93f8:	00002623 	.inst	0x00002623 ; undefined
    93fc:	0077ae04 	.inst	0x0077ae04 ; undefined
    9400:	65090000 	.inst	0x65090000 ; undefined
    9404:	04000023 	.inst	0x04000023 ; undefined
    9408:	0003a7bb 	.inst	0x0003a7bb ; undefined
    940c:	b8040000 	stur	w0, [x0,#64]
    9410:	04000023 	.inst	0x04000023 ; undefined
    9414:	0003fbbd 	.inst	0x0003fbbd ; undefined
    9418:	04040500 	.inst	0x04040500 ; undefined
    941c:	0004b4c2 	.inst	0x0004b4c2 ; undefined
    9420:	52440600 	.inst	0x52440600 ; undefined
    9424:	77c50400 	.inst	0x77c50400 ; undefined
    9428:	04000000 	.inst	0x04000000 ; undefined
    942c:	06001f01 	.inst	0x06001f01 ; undefined
    9430:	0400454f 	.inst	0x0400454f ; undefined
    9434:	000077c9 	.inst	0x000077c9 ; undefined
    9438:	1e010400 	.inst	0x1e010400 ; undefined
    943c:	45500600 	.inst	0x45500600 ; undefined
    9440:	77ce0400 	.inst	0x77ce0400 ; undefined
    9444:	04000000 	.inst	0x04000000 ; undefined
    9448:	06001d01 	.inst	0x06001d01 ; undefined
    944c:	04004546 	.inst	0x04004546 ; undefined
    9450:	000077cf 	.inst	0x000077cf ; undefined
    9454:	1c010400 	ldr	s0, b4d4 <_stack_size+0xa4d4>
    9458:	49420600 	.inst	0x49420600 ; undefined
    945c:	77d00400 	.inst	0x77d00400 ; undefined
    9460:	04000000 	.inst	0x04000000 ; undefined
    9464:	07001b01 	.inst	0x07001b01 ; undefined
    9468:	000023b2 	.inst	0x000023b2 ; undefined
    946c:	0077d104 	.inst	0x0077d104 ; undefined
    9470:	01040000 	.inst	0x01040000 ; undefined
    9474:	6c07001a 	stnp	d26, d0, [x0,#112]
    9478:	04000023 	.inst	0x04000023 ; undefined
    947c:	000077d4 	.inst	0x000077d4 ; undefined
    9480:	19010400 	.inst	0x19010400 ; undefined
    9484:	46520600 	.inst	0x46520600 ; undefined
    9488:	d7040045 	.inst	0xd7040045 ; undefined
    948c:	00000077 	.inst	0x00000077 ; undefined
    9490:	00180104 	.inst	0x00180104 ; undefined
    9494:	00238e07 	.inst	0x00238e07 ; NYI
    9498:	77d90400 	.inst	0x77d90400 ; undefined
    949c:	04000000 	.inst	0x04000000 ; undefined
    94a0:	00000018 	.inst	0x00000018 ; undefined
    94a4:	00249208 	.inst	0x00249208 ; NYI
    94a8:	bf040400 	.inst	0xbf040400 ; undefined
    94ac:	000004d7 	.inst	0x000004d7 ; undefined
    94b0:	00262309 	.inst	0x00262309 ; NYI
    94b4:	77c10400 	.inst	0x77c10400 ; undefined
    94b8:	09000000 	.inst	0x09000000 ; undefined
    94bc:	00002365 	.inst	0x00002365 ; undefined
    94c0:	0429da04 	.inst	0x0429da04 ; undefined
    94c4:	04000000 	.inst	0x04000000 ; undefined
    94c8:	00002493 	.inst	0x00002493 ; undefined
    94cc:	04b4dc04 	.inst	0x04b4dc04 ; undefined
    94d0:	04050000 	.inst	0x04050000 ; undefined
    94d4:	0553e104 	.inst	0x0553e104 ; undefined
    94d8:	97070000 	bl	fffffffffc1c94d8 <SMC_ID_HW_RSA+0xffffffff781b95d1>
    94dc:	04000023 	.inst	0x04000023 ; undefined
    94e0:	000077e5 	.inst	0x000077e5 ; undefined
    94e4:	1f010400 	fmadd	s0, s0, s1, s1
    94e8:	23db0700 	.inst	0x23db0700 ; undefined
    94ec:	e7040000 	.inst	0xe7040000 ; undefined
    94f0:	00000077 	.inst	0x00000077 ; undefined
    94f4:	001c0304 	.inst	0x001c0304 ; undefined
    94f8:	53544306 	.inst	0x53544306 ; undefined
    94fc:	77e80400 	.inst	0x77e80400 ; undefined
    9500:	04000000 	.inst	0x04000000 ; undefined
    9504:	06001b01 	.inst	0x06001b01 ; undefined
    9508:	00525344 	.inst	0x00525344 ; undefined
    950c:	0077eb04 	.inst	0x0077eb04 ; undefined
    9510:	01040000 	.inst	0x01040000 ; undefined
    9514:	5206001a 	eor	w26, w0, #0x4000000
    9518:	ee040049 	.inst	0xee040049 ; undefined
    951c:	00000077 	.inst	0x00000077 ; undefined
    9520:	00190104 	.inst	0x00190104 ; undefined
    9524:	44434406 	.inst	0x44434406 ; undefined
    9528:	77f10400 	.inst	0x77f10400 ; undefined
    952c:	04000000 	.inst	0x04000000 ; undefined
    9530:	07001801 	.inst	0x07001801 ; undefined
    9534:	000023e5 	.inst	0x000023e5 ; undefined
    9538:	0077f404 	.inst	0x0077f404 ; undefined
    953c:	18040000 	ldr	w0, 1153c <_stack_size+0x1053c>
    9540:	08000000 	stxrb	w0, w0, [x0]
    9544:	00002406 	.inst	0x00002406 ; undefined
    9548:	76de0404 	.inst	0x76de0404 ; undefined
    954c:	09000005 	.inst	0x09000005 ; undefined
    9550:	00002623 	.inst	0x00002623 ; undefined
    9554:	0077e004 	.inst	0x0077e004 ; undefined
    9558:	65090000 	.inst	0x65090000 ; undefined
    955c:	04000023 	.inst	0x04000023 ; undefined
    9560:	0004e2f6 	.inst	0x0004e2f6 ; undefined
    9564:	07040000 	.inst	0x07040000 ; undefined
    9568:	04000024 	.inst	0x04000024 ; undefined
    956c:	000553f8 	.inst	0x000553f8 ; undefined
    9570:	04040500 	.inst	0x04040500 ; undefined
    9574:	0005aafd 	.inst	0x0005aafd ; undefined
    9578:	43530a00 	.inst	0x43530a00 ; undefined
    957c:	00040052 	.inst	0x00040052 ; undefined
    9580:	00007701 	.inst	0x00007701 ; undefined
    9584:	18080400 	ldr	w0, 19604 <_stack_size+0x18604>
    9588:	238e0b00 	.inst	0x238e0b00 ; undefined
    958c:	01040000 	.inst	0x01040000 ; undefined
    9590:	00007701 	.inst	0x00007701 ; undefined
    9594:	00180400 	.inst	0x00180400 ; undefined
    9598:	71080000 	subs	w0, w0, #0x200
    959c:	04000023 	.inst	0x04000023 ; undefined
    95a0:	05cefa04 	.inst	0x05cefa04 ; undefined
    95a4:	23090000 	.inst	0x23090000 ; undefined
    95a8:	04000026 	.inst	0x04000026 ; undefined
    95ac:	000077fc 	.inst	0x000077fc ; undefined
    95b0:	23650c00 	.inst	0x23650c00 ; undefined
    95b4:	02040000 	.inst	0x02040000 ; undefined
    95b8:	00058101 	.inst	0x00058101 ; undefined
    95bc:	720d0000 	ands	w0, w0, #0x80000
    95c0:	04000023 	.inst	0x04000023 ; undefined
    95c4:	05aa0104 	.inst	0x05aa0104 ; undefined
    95c8:	200e0000 	.inst	0x200e0000 ; undefined
    95cc:	20000025 	.inst	0x20000025 ; undefined
    95d0:	50010704 	adr	x4, b6b2 <_stack_size+0xa6b2>
    95d4:	0f000006 	.inst	0x0f000006 ; undefined
    95d8:	00002419 	.inst	0x00002419 ; undefined
    95dc:	49010904 	.inst	0x49010904 ; undefined
    95e0:	00000001 	.inst	0x00000001 ; undefined
    95e4:	0025890f 	.inst	0x0025890f ; NYI
    95e8:	010a0400 	.inst	0x010a0400 ; undefined
    95ec:	000001fd 	.inst	0x000001fd ; undefined
    95f0:	256c0f04 	.inst	0x256c0f04 ; undefined
    95f4:	0b040000 	add	w0, w0, w4
    95f8:	0002fc01 	.inst	0x0002fc01 ; undefined
    95fc:	c90f0800 	.inst	0xc90f0800 ; undefined
    9600:	04000025 	.inst	0x04000025 ; undefined
    9604:	039c010c 	.inst	0x039c010c ; undefined
    9608:	0f0c0000 	.inst	0x0f0c0000 ; undefined
    960c:	0000250d 	.inst	0x0000250d ; undefined
    9610:	1e010d04 	.inst	0x1e010d04 ; undefined
    9614:	10000004 	adr	x4, 9614 <_stack_size+0x8614>
    9618:	0025d60f 	.inst	0x0025d60f ; NYI
    961c:	010e0400 	.inst	0x010e0400 ; undefined
    9620:	000004d7 	.inst	0x000004d7 ; undefined
    9624:	254d0f14 	.inst	0x254d0f14 ; undefined
    9628:	0f040000 	.inst	0x0f040000 ; undefined
    962c:	00057601 	.inst	0x00057601 ; undefined
    9630:	8a0f1800 	and	x0, x0, x15, lsl #6
    9634:	04000024 	.inst	0x04000024 ; undefined
    9638:	05ce0110 	.inst	0x05ce0110 ; undefined
    963c:	001c0000 	.inst	0x001c0000 ; undefined
    9640:	0025210d 	.inst	0x0025210d ; NYI
    9644:	01120400 	.inst	0x01120400 ; undefined
    9648:	000005da 	.inst	0x000005da ; undefined
    964c:	00260510 	.inst	0x00260510 ; NYI
    9650:	20010c00 	.inst	0x20010c00 ; undefined
    9654:	0000068d 	.inst	0x0000068d ; undefined
    9658:	002a5311 	.inst	0x002a5311 ; NYI
    965c:	77210100 	.inst	0x77210100 ; undefined
    9660:	00000000 	.inst	0x00000000 ; undefined
    9664:	00261511 	.inst	0x00261511 ; NYI
    9668:	77220100 	.inst	0x77220100 ; undefined
    966c:	04000000 	.inst	0x04000000 ; undefined
    9670:	00241311 	.inst	0x00241311 ; NYI
    9674:	77230100 	.inst	0x77230100 ; undefined
    9678:	08000000 	stxrb	w0, w0, [x0]
    967c:	26381200 	.inst	0x26381200 ; undefined
    9680:	83010000 	.inst	0x83010000 ; undefined
    9684:	0006bb03 	.inst	0x0006bb03 ; undefined
    9688:	25f81300 	.inst	0x25f81300 ; undefined
    968c:	83010000 	.inst	0x83010000 ; undefined
    9690:	0000003e 	.inst	0x0000003e ; undefined
    9694:	67657214 	.inst	0x67657214 ; undefined
    9698:	77830100 	.inst	0x77830100 ; undefined
    969c:	13000000 	sbfx	w0, w0, #0, #1
    96a0:	00001dbb 	.inst	0x00001dbb ; undefined
    96a4:	004c8301 	.inst	0x004c8301 ; undefined
    96a8:	15000000 	b	40096a8 <_stack_base+0xffbf28>
    96ac:	000023a4 	.inst	0x000023a4 ; undefined
    96b0:	004c8801 	.inst	0x004c8801 ; undefined
    96b4:	e2030000 	.inst	0xe2030000 ; undefined
    96b8:	13000006 	sbfx	w6, w0, #0, #1
    96bc:	000025f8 	.inst	0x000025f8 ; undefined
    96c0:	003e8801 	.inst	0x003e8801 ; NYI
    96c4:	72140000 	ands	w0, w0, #0x1000
    96c8:	01006765 	.inst	0x01006765 ; undefined
    96cc:	00007788 	.inst	0x00007788 ; undefined
    96d0:	e7160000 	.inst	0xe7160000 ; undefined
    96d4:	01000007 	.inst	0x01000007 ; undefined
    96d8:	fc0101cb 	stur	d11, [x14,#16]
    96dc:	17000006 	b	fffffffffc0096f4 <SMC_ID_HW_RSA+0xffffffff77ff97ed>
    96e0:	000023fe 	.inst	0x000023fe ; undefined
    96e4:	fc01cb01 	.inst	0xfc01cb01 ; undefined
    96e8:	00000006 	.inst	0x00000006 ; undefined
    96ec:	004c0818 	.inst	0x004c0818 ; undefined
    96f0:	34160000 	cbz	w0, 356f0 <_stack_size+0x346f0>
    96f4:	0100000a 	.inst	0x0100000a ; undefined
    96f8:	1c010202 	ldr	s2, b738 <_stack_size+0xa738>
    96fc:	17000007 	b	fffffffffc009718 <SMC_ID_HW_RSA+0xffffffff77ff9811>
    9700:	00001e34 	.inst	0x00001e34 ; undefined
    9704:	29020201 	stp	w1, w0, [x16,#16]
    9708:	00000000 	.inst	0x00000000 ; undefined
    970c:	00247019 	.inst	0x00247019 ; NYI
    9710:	0c900100 	st4	{v0.8b-v3.8b}, [x8], x16
    9714:	0003005b 	.inst	0x0003005b ; undefined
    9718:	74000000 	.inst	0x74000000 ; undefined
    971c:	00000000 	.inst	0x00000000 ; undefined
    9720:	01000000 	.inst	0x01000000 ; undefined
    9724:	00075d9c 	.inst	0x00075d9c ; undefined
    9728:	288b1a00 	stp	w0, w6, [x16],#88
    972c:	92010000 	and	x0, x0, #0x8000000080000000
    9730:	00000029 	.inst	0x00000029 ; undefined
    9734:	00009705 	.inst	0x00009705 ; undefined
    9738:	005b2c1b 	.inst	0x005b2c1b ; undefined
    973c:	00000003 	.inst	0x00000003 ; undefined
    9740:	00105d00 	.inst	0x00105d00 ; undefined
    9744:	50011c00 	adr	x0, bac6 <_stack_size+0xaac6>
    9748:	00640802 	.inst	0x00640802 ; undefined
    974c:	25ee1900 	.inst	0x25ee1900 ; undefined
    9750:	c2010000 	.inst	0xc2010000 ; undefined
    9754:	03005b80 	.inst	0x03005b80 ; undefined
    9758:	00000000 	.inst	0x00000000 ; undefined
    975c:	000000a4 	.inst	0x000000a4 ; undefined
    9760:	00000000 	.inst	0x00000000 ; undefined
    9764:	099a9c01 	.inst	0x099a9c01 ; undefined
    9768:	f81d0000 	stur	x0, [x0,#-48]
    976c:	01000025 	.inst	0x01000025 ; undefined
    9770:	00003ec2 	.inst	0x00003ec2 ; undefined
    9774:	00972800 	.inst	0x00972800 ; undefined
    9778:	25c41d00 	.inst	0x25c41d00 ; undefined
    977c:	c2010000 	.inst	0xc2010000 ; undefined
    9780:	00000077 	.inst	0x00000077 ; undefined
    9784:	00009761 	.inst	0x00009761 ; undefined
    9788:	00255f1a 	.inst	0x00255f1a ; NYI
    978c:	29c40100 	ldp	w0, w0, [x8,#32]!
    9790:	9a000000 	adc	x0, x0, x0
    9794:	1e000097 	.inst	0x1e000097 ; undefined
    9798:	0000068d 	.inst	0x0000068d ; undefined
    979c:	03005b90 	.inst	0x03005b90 ; undefined
    97a0:	00000000 	.inst	0x00000000 ; undefined
    97a4:	00000b10 	.inst	0x00000b10 ; undefined
    97a8:	07d6c601 	.inst	0x07d6c601 ; undefined
    97ac:	af1f0000 	.inst	0xaf1f0000 ; undefined
    97b0:	83000006 	.inst	0x83000006 ; undefined
    97b4:	06a4207f 	.inst	0x06a4207f ; undefined
    97b8:	21030000 	.inst	0x21030000 ; undefined
    97bc:	00000699 	.inst	0x00000699 ; undefined
    97c0:	5001f304 	adr	x4, d622 <_stack_size+0xc622>
    97c4:	8d1e009f 	.inst	0x8d1e009f ; undefined
    97c8:	98000006 	ldrsw	x6, 97c8 <_stack_size+0x87c8>
    97cc:	0003005b 	.inst	0x0003005b ; undefined
    97d0:	80000000 	.inst	0x80000000 ; undefined
    97d4:	0100000b 	.inst	0x0100000b ; undefined
    97d8:	000804c8 	.inst	0x000804c8 ; undefined
    97dc:	06af2000 	.inst	0x06af2000 ; undefined
    97e0:	20000000 	.inst	0x20000000 ; undefined
    97e4:	000006a4 	.inst	0x000006a4 ; undefined
    97e8:	06992101 	.inst	0x06992101 ; undefined
    97ec:	f3040000 	.inst	0xf3040000 ; undefined
    97f0:	009f5001 	.inst	0x009f5001 ; undefined
    97f4:	00068d1e 	.inst	0x00068d1e ; undefined
    97f8:	005ba000 	.inst	0x005ba000 ; undefined
    97fc:	00000003 	.inst	0x00000003 ; undefined
    9800:	000bd000 	.inst	0x000bd000 ; undefined
    9804:	32ca0100 	.inst	0x32ca0100 ; undefined
    9808:	20000008 	.inst	0x20000008 ; undefined
    980c:	000006af 	.inst	0x000006af ; undefined
    9810:	06a42003 	.inst	0x06a42003 ; undefined
    9814:	21040000 	.inst	0x21040000 ; undefined
    9818:	00000699 	.inst	0x00000699 ; undefined
    981c:	5001f304 	adr	x4, d67e <_stack_size+0xc67e>
    9820:	8d1e009f 	.inst	0x8d1e009f ; undefined
    9824:	ac000006 	stnp	q6, q0, [x0]
    9828:	0003005b 	.inst	0x0003005b ; undefined
    982c:	20000000 	.inst	0x20000000 ; undefined
    9830:	0100000c 	.inst	0x0100000c ; undefined
    9834:	000860cb 	.inst	0x000860cb ; undefined
    9838:	06af2000 	.inst	0x06af2000 ; undefined
    983c:	20070000 	.inst	0x20070000 ; undefined
    9840:	000006a4 	.inst	0x000006a4 ; undefined
    9844:	06992102 	.inst	0x06992102 ; undefined
    9848:	f3040000 	.inst	0xf3040000 ; undefined
    984c:	009f5001 	.inst	0x009f5001 ; undefined
    9850:	00068d1e 	.inst	0x00068d1e ; undefined
    9854:	005bc400 	.inst	0x005bc400 ; undefined
    9858:	00000003 	.inst	0x00000003 ; undefined
    985c:	000c8000 	.inst	0x000c8000 ; undefined
    9860:	8ec70100 	.inst	0x8ec70100 ; undefined
    9864:	20000008 	.inst	0x20000008 ; undefined
    9868:	000006af 	.inst	0x000006af ; undefined
    986c:	06a42000 	.inst	0x06a42000 ; undefined
    9870:	21000000 	.inst	0x21000000 ; undefined
    9874:	00000699 	.inst	0x00000699 ; undefined
    9878:	5001f304 	adr	x4, d6da <_stack_size+0xc6da>
    987c:	8d22009f 	.inst	0x8d22009f ; undefined
    9880:	fc000006 	stur	d6, [x0]
    9884:	0003005b 	.inst	0x0003005b ; undefined
    9888:	04000000 	.inst	0x04000000 ; undefined
    988c:	00000000 	.inst	0x00000000 ; undefined
    9890:	01000000 	.inst	0x01000000 ; undefined
    9894:	0008c0c9 	.inst	0x0008c0c9 ; undefined
    9898:	06af2000 	.inst	0x06af2000 ; undefined
    989c:	20030000 	.inst	0x20030000 ; undefined
    98a0:	000006a4 	.inst	0x000006a4 ; undefined
    98a4:	06992103 	.inst	0x06992103 ; undefined
    98a8:	f3040000 	.inst	0xf3040000 ; undefined
    98ac:	009f5001 	.inst	0x009f5001 ; undefined
    98b0:	00068d1e 	.inst	0x00068d1e ; undefined
    98b4:	005c0800 	.inst	0x005c0800 ; undefined
    98b8:	00000003 	.inst	0x00000003 ; undefined
    98bc:	000cb000 	.inst	0x000cb000 ; undefined
    98c0:	f1cd0100 	.inst	0xf1cd0100 ; undefined
    98c4:	23000008 	.inst	0x23000008 ; undefined
    98c8:	000006af 	.inst	0x000006af ; undefined
    98cc:	000097e6 	.inst	0x000097e6 ; undefined
    98d0:	0006a420 	.inst	0x0006a420 ; undefined
    98d4:	99210000 	.inst	0x99210000 ; undefined
    98d8:	04000006 	.inst	0x04000006 ; undefined
    98dc:	9f5001f3 	.inst	0x9f5001f3 ; undefined
    98e0:	068d2200 	.inst	0x068d2200 ; undefined
    98e4:	5c0c0000 	ldr	d0, 218e4 <_stack_size+0x208e4>
    98e8:	00000300 	.inst	0x00000300 ; undefined
    98ec:	00040000 	.inst	0x00040000 ; undefined
    98f0:	00000000 	.inst	0x00000000 ; undefined
    98f4:	cc010000 	.inst	0xcc010000 ; undefined
    98f8:	00000924 	.inst	0x00000924 ; undefined
    98fc:	0006af1f 	.inst	0x0006af1f ; undefined
    9900:	207f8300 	.inst	0x207f8300 ; undefined
    9904:	000006a4 	.inst	0x000006a4 ; undefined
    9908:	06992103 	.inst	0x06992103 ; undefined
    990c:	f3040000 	.inst	0xf3040000 ; undefined
    9910:	009f5001 	.inst	0x009f5001 ; undefined
    9914:	00068d1e 	.inst	0x00068d1e ; undefined
    9918:	005c1000 	.inst	0x005c1000 ; undefined
    991c:	00000003 	.inst	0x00000003 ; undefined
    9920:	000ce000 	.inst	0x000ce000 ; undefined
    9924:	6bce0100 	.inst	0x6bce0100 ; undefined
    9928:	21000009 	.inst	0x21000009 ; undefined
    992c:	000006af 	.inst	0x000006af ; undefined
    9930:	5101f319 	sub	w25, w24, #0x7c
    9934:	047a2433 	.inst	0x047a2433 ; undefined
    9938:	f7220494 	.inst	0xf7220494 ; undefined
    993c:	5101f329 	sub	w9, w25, #0x7c
    9940:	29f72434 	ldp	w20, w9, [x1,#-72]!
    9944:	3800f71b 	strb	w27, [x24],#15
    9948:	a4209f25 	.inst	0xa4209f25 ; undefined
    994c:	01000006 	.inst	0x01000006 ; undefined
    9950:	00069921 	.inst	0x00069921 ; undefined
    9954:	01f30400 	.inst	0x01f30400 ; undefined
    9958:	24009f50 	.inst	0x24009f50 ; undefined
    995c:	0000068d 	.inst	0x0000068d ; undefined
    9960:	03005c1c 	.inst	0x03005c1c ; undefined
    9964:	00000000 	.inst	0x00000000 ; undefined
    9968:	00000004 	.inst	0x00000004 ; undefined
    996c:	00000000 	.inst	0x00000000 ; undefined
    9970:	af20cf01 	.inst	0xaf20cf01 ; undefined
    9974:	03000006 	.inst	0x03000006 ; undefined
    9978:	0006a420 	.inst	0x0006a420 ; undefined
    997c:	99210300 	.inst	0x99210300 ; undefined
    9980:	04000006 	.inst	0x04000006 ; undefined
    9984:	9f5001f3 	.inst	0x9f5001f3 ; undefined
    9988:	55250000 	.inst	0x55250000 ; undefined
    998c:	01000025 	.inst	0x01000025 ; undefined
    9990:	00003ed2 	.inst	0x00003ed2 ; undefined
    9994:	005c2400 	.inst	0x005c2400 ; undefined
    9998:	00000003 	.inst	0x00000003 ; undefined
    999c:	00004c00 	.inst	0x00004c00 ; undefined
    99a0:	00000000 	.inst	0x00000000 ; undefined
    99a4:	2d9c0100 	stp	s0, s0, [x8,#224]!
    99a8:	1d00000a 	.inst	0x1d00000a ; undefined
    99ac:	000025f8 	.inst	0x000025f8 ; undefined
    99b0:	003ed201 	.inst	0x003ed201 ; NYI
    99b4:	98320000 	ldrsw	x0, 6d9b4 <_stack_size+0x6c9b4>
    99b8:	63260000 	.inst	0x63260000 ; undefined
    99bc:	2dd20100 	ldp	s0, s0, [x8,#144]!
    99c0:	0100000a 	.inst	0x0100000a ; undefined
    99c4:	06bb2251 	.inst	0x06bb2251 ; undefined
    99c8:	5c580000 	ldr	d0, b99c8 <_stack_size+0xb89c8>
    99cc:	00000300 	.inst	0x00000300 ; undefined
    99d0:	00040000 	.inst	0x00040000 ; undefined
    99d4:	00000000 	.inst	0x00000000 ; undefined
    99d8:	d4010000 	.inst	0xd4010000 ; undefined
    99dc:	00000a01 	.inst	0x00000a01 ; undefined
    99e0:	0006d620 	.inst	0x0006d620 ; undefined
    99e4:	cb210500 	sub	x0, x8, w1, uxtb #1
    99e8:	04000006 	.inst	0x04000006 ; undefined
    99ec:	9f5001f3 	.inst	0x9f5001f3 ; undefined
    99f0:	068d2700 	.inst	0x068d2700 ; undefined
    99f4:	5c600000 	ldr	d0, c99f4 <_stack_size+0xc89f4>
    99f8:	00000300 	.inst	0x00000300 ; undefined
    99fc:	0d100000 	.inst	0x0d100000 ; undefined
    9a00:	d6010000 	.inst	0xd6010000 ; undefined
    9a04:	0006af21 	.inst	0x0006af21 ; undefined
    9a08:	20510100 	.inst	0x20510100 ; undefined
    9a0c:	000006a4 	.inst	0x000006a4 ; undefined
    9a10:	06992100 	.inst	0x06992100 ; undefined
    9a14:	f3040000 	.inst	0xf3040000 ; undefined
    9a18:	009f5001 	.inst	0x009f5001 ; undefined
    9a1c:	08010200 	stxrb	w1, w0, [x16]
    9a20:	00000107 	.inst	0x00000107 ; undefined
    9a24:	00264c25 	.inst	0x00264c25 ; NYI
    9a28:	3eda0100 	.inst	0x3eda0100 ; undefined
    9a2c:	70000000 	adr	x0, 9a2f <_stack_size+0x8a2f>
    9a30:	0003005c 	.inst	0x0003005c ; undefined
    9a34:	8c000000 	.inst	0x8c000000 ; undefined
    9a38:	00000000 	.inst	0x00000000 ; undefined
    9a3c:	01000000 	.inst	0x01000000 ; undefined
    9a40:	000af89c 	.inst	0x000af89c ; undefined
    9a44:	25f81d00 	.inst	0x25f81d00 ; undefined
    9a48:	da010000 	sbc	x0, x0, x1
    9a4c:	0000003e 	.inst	0x0000003e ; undefined
    9a50:	0000986b 	.inst	0x0000986b ; undefined
    9a54:	0023ef1d 	.inst	0x0023ef1d ; NYI
    9a58:	90da0100 	adrp	x0, ffffffffb4029000 <SMC_ID_HW_RSA+0xffffffff300190f9>
    9a5c:	a4000000 	.inst	0xa4000000 ; undefined
    9a60:	22000098 	.inst	0x22000098 ; undefined
    9a64:	000006bb 	.inst	0x000006bb ; undefined
    9a68:	03005ca8 	.inst	0x03005ca8 ; undefined
    9a6c:	00000000 	.inst	0x00000000 ; undefined
    9a70:	00000004 	.inst	0x00000004 ; undefined
    9a74:	00000000 	.inst	0x00000000 ; undefined
    9a78:	0aa1dd01 	.inst	0x0aa1dd01 ; undefined
    9a7c:	d6230000 	.inst	0xd6230000 ; undefined
    9a80:	dd000006 	.inst	0xdd000006 ; undefined
    9a84:	23000098 	.inst	0x23000098 ; undefined
    9a88:	000006cb 	.inst	0x000006cb ; undefined
    9a8c:	00009901 	.inst	0x00009901 ; undefined
    9a90:	06bb2200 	.inst	0x06bb2200 ; undefined
    9a94:	5cb00000 	ldr	d0, fffffffffff69a94 <SMC_ID_HW_RSA+0xffffffff7bf59b8d>
    9a98:	00000300 	.inst	0x00000300 ; undefined
    9a9c:	000c0000 	.inst	0x000c0000 ; undefined
    9aa0:	00000000 	.inst	0x00000000 ; undefined
    9aa4:	e3010000 	.inst	0xe3010000 ; undefined
    9aa8:	00000acf 	.inst	0x00000acf ; undefined
    9aac:	0006d623 	.inst	0x0006d623 ; undefined
    9ab0:	00992700 	.inst	0x00992700 ; undefined
    9ab4:	06cb2300 	.inst	0x06cb2300 ; undefined
    9ab8:	994b0000 	.inst	0x994b0000 ; undefined
    9abc:	24000000 	.inst	0x24000000 ; undefined
    9ac0:	000006bb 	.inst	0x000006bb ; undefined
    9ac4:	03005cc0 	.inst	0x03005cc0 ; undefined
    9ac8:	00000000 	.inst	0x00000000 ; undefined
    9acc:	00000030 	.inst	0x00000030 ; undefined
    9ad0:	00000000 	.inst	0x00000000 ; undefined
    9ad4:	d620e001 	.inst	0xd620e001 ; undefined
    9ad8:	05000006 	.inst	0x05000006 ; undefined
    9adc:	0006cb21 	.inst	0x0006cb21 ; undefined
    9ae0:	01f30400 	.inst	0x01f30400 ; undefined
    9ae4:	00009f50 	.inst	0x00009f50 ; undefined
    9ae8:	00257728 	.inst	0x00257728 ; NYI
    9aec:	fce60100 	.inst	0xfce60100 ; undefined
    9af0:	0003005c 	.inst	0x0003005c ; undefined
    9af4:	1c000000 	ldr	s0, 9af4 <_stack_size+0x8af4>
    9af8:	00000000 	.inst	0x00000000 ; undefined
    9afc:	01000000 	.inst	0x01000000 ; undefined
    9b00:	242d289c 	.inst	0x242d289c ; undefined
    9b04:	f1010000 	subs	x0, x0, #0x40
    9b08:	03005d18 	.inst	0x03005d18 ; undefined
    9b0c:	00000000 	.inst	0x00000000 ; undefined
    9b10:	00000014 	.inst	0x00000014 ; undefined
    9b14:	00000000 	.inst	0x00000000 ; undefined
    9b18:	29199c01 	stp	w1, w7, [x0,#204]
    9b1c:	01000026 	.inst	0x01000026 ; undefined
    9b20:	005d2cf9 	.inst	0x005d2cf9 ; undefined
    9b24:	00000003 	.inst	0x00000003 ; undefined
    9b28:	00002400 	.inst	0x00002400 ; undefined
    9b2c:	00000000 	.inst	0x00000000 ; undefined
    9b30:	559c0100 	.inst	0x559c0100 ; undefined
    9b34:	2900000b 	stp	w11, w0, [x0]
    9b38:	0000237e 	.inst	0x0000237e ; undefined
    9b3c:	003ef901 	.inst	0x003ef901 ; NYI
    9b40:	50010000 	adr	x0, bb42 <_stack_size+0xab42>
    9b44:	25b62a00 	.inst	0x25b62a00 ; undefined
    9b48:	21010000 	.inst	0x21010000 ; undefined
    9b4c:	00003e01 	.inst	0x00003e01 ; undefined
    9b50:	005d5000 	.inst	0x005d5000 ; undefined
    9b54:	00000003 	.inst	0x00000003 ; undefined
    9b58:	0000f400 	.inst	0x0000f400 ; undefined
    9b5c:	00000000 	.inst	0x00000000 ; undefined
    9b60:	029c0100 	.inst	0x029c0100 ; undefined
    9b64:	2b00000c 	adds	w12, w0, w0
    9b68:	0000246b 	.inst	0x0000246b ; undefined
    9b6c:	02012101 	.inst	0x02012101 ; undefined
    9b70:	7100000c 	subs	w12, w0, #0x0
    9b74:	2b000099 	adds	w25, w4, w0
    9b78:	000024b0 	.inst	0x000024b0 ; undefined
    9b7c:	3e012101 	.inst	0x3e012101 ; undefined
    9b80:	e6000000 	.inst	0xe6000000 ; undefined
    9b84:	2b000099 	adds	w25, w4, w0
    9b88:	0000251b 	.inst	0x0000251b ; undefined
    9b8c:	08012101 	stxrb	w1, w1, [x8]
    9b90:	5b00000c 	.inst	0x5b00000c ; undefined
    9b94:	2c00009a 	stnp	s26, s0, [x4]
    9b98:	00001e34 	.inst	0x00001e34 ; undefined
    9b9c:	3e012501 	.inst	0x3e012501 ; undefined
    9ba0:	d0000000 	adrp	x0, b000 <_stack_size+0xa000>
    9ba4:	2c00009a 	stnp	s26, s0, [x4]
    9ba8:	00002413 	.inst	0x00002413 ; undefined
    9bac:	3e012501 	.inst	0x3e012501 ; undefined
    9bb0:	06000000 	.inst	0x06000000 ; undefined
    9bb4:	2d00009b 	stp	s27, s0, [x4]
    9bb8:	01006863 	.inst	0x01006863 ; undefined
    9bbc:	004c0126 	.inst	0x004c0126 ; undefined
    9bc0:	91020000 	add	x0, x0, #0x80
    9bc4:	5d7c2e7f 	.inst	0x5d7c2e7f ; undefined
    9bc8:	00000300 	.inst	0x00000300 ; undefined
    9bcc:	106e0000 	adr	x0, e5bcc <_stack_size+0xe4bcc>
    9bd0:	0bed0000 	.inst	0x0bed0000 ; undefined
    9bd4:	011c0000 	.inst	0x011c0000 ; undefined
    9bd8:	7f910250 	.inst	0x7f910250 ; undefined
    9bdc:	5dcc1b00 	.inst	0x5dcc1b00 ; undefined
    9be0:	00000300 	.inst	0x00000300 ; undefined
    9be4:	106e0000 	adr	x0, e5be4 <_stack_size+0xe4be4>
    9be8:	011c0000 	.inst	0x011c0000 ; undefined
    9bec:	7f910250 	.inst	0x7f910250 ; undefined
    9bf0:	08180000 	stxrb	w24, w0, [x0]
    9bf4:	0000003e 	.inst	0x0000003e ; undefined
    9bf8:	00770818 	.inst	0x00770818 ; undefined
    9bfc:	562a0000 	.inst	0x562a0000 ; undefined
    9c00:	01000023 	.inst	0x01000023 ; undefined
    9c04:	004c014e 	.inst	0x004c014e ; undefined
    9c08:	5e440000 	.inst	0x5e440000 ; undefined
    9c0c:	00000300 	.inst	0x00000300 ; undefined
    9c10:	008c0000 	.inst	0x008c0000 ; undefined
    9c14:	00000000 	.inst	0x00000000 ; undefined
    9c18:	9c010000 	ldr	q0, bc18 <_stack_size+0xac18>
    9c1c:	00000c94 	.inst	0x00000c94 ; undefined
    9c20:	0023c42f 	.inst	0x0023c42f ; NYI
    9c24:	01500100 	.inst	0x01500100 ; undefined
    9c28:	00000c94 	.inst	0x00000c94 ; undefined
    9c2c:	2c7f9102 	ldnp	s2, s4, [x8,#-4]
    9c30:	0000239c 	.inst	0x0000239c ; undefined
    9c34:	29015101 	stp	w1, w20, [x8,#8]
    9c38:	64000000 	.inst	0x64000000 ; undefined
    9c3c:	3000009b 	adr	x27, 9c4d <_stack_size+0x8c4d>
    9c40:	0000016b 	.inst	0x0000016b ; undefined
    9c44:	3e015501 	.inst	0x3e015501 ; undefined
    9c48:	61000000 	.inst	0x61000000 ; undefined
    9c4c:	3100000c 	adds	w12, w0, #0x0
    9c50:	5e702e00 	sqsub	h0, h16, h16
    9c54:	00000300 	.inst	0x00000300 ; undefined
    9c58:	10840000 	adr	x0, fffffffffff11c58 <SMC_ID_HW_RSA+0xffffffff7bf01d51>
    9c5c:	0c790000 	.inst	0x0c790000 ; undefined
    9c60:	011c0000 	.inst	0x011c0000 ; undefined
    9c64:	00830250 	.inst	0x00830250 ; undefined
    9c68:	5e743200 	.inst	0x5e743200 ; undefined
    9c6c:	00000300 	.inst	0x00000300 ; undefined
    9c70:	109e0000 	adr	x0, fffffffffff45c70 <SMC_ID_HW_RSA+0xffffffff7bf35d69>
    9c74:	a8320000 	stnp	x0, x0, [x0,#-224]
    9c78:	0003005e 	.inst	0x0003005e ; undefined
    9c7c:	b0000000 	adrp	x0, a000 <_stack_size+0x9000>
    9c80:	00000010 	.inst	0x00000010 ; undefined
    9c84:	00004c33 	.inst	0x00004c33 ; undefined
    9c88:	24662a00 	.inst	0x24662a00 ; undefined
    9c8c:	6c010000 	stnp	d0, d0, [x0,#16]
    9c90:	00003e01 	.inst	0x00003e01 ; undefined
    9c94:	005ed000 	.inst	0x005ed000 ; undefined
    9c98:	00000003 	.inst	0x00000003 ; undefined
    9c9c:	0000e400 	.inst	0x0000e400 ; undefined
    9ca0:	00000000 	.inst	0x00000000 ; undefined
    9ca4:	369c0100 	tbz	w0, #19, 1cc4 <_stack_size+0xcc4>
    9ca8:	2b00000d 	adds	w13, w0, w0
    9cac:	0000246b 	.inst	0x0000246b ; undefined
    9cb0:	02016c01 	.inst	0x02016c01 ; undefined
    9cb4:	9b00000c 	madd	x12, x0, x0, x0
    9cb8:	2b00009b 	adds	w27, w4, w0
    9cbc:	000024b0 	.inst	0x000024b0 ; undefined
    9cc0:	3e016c01 	.inst	0x3e016c01 ; undefined
    9cc4:	10000000 	adr	x0, 9cc4 <_stack_size+0x8cc4>
    9cc8:	2c00009c 	stnp	s28, s0, [x4]
    9ccc:	00001e34 	.inst	0x00001e34 ; undefined
    9cd0:	3e017001 	.inst	0x3e017001 ; undefined
    9cd4:	85000000 	.inst	0x85000000 ; undefined
    9cd8:	2c00009c 	stnp	s28, s0, [x4]
    9cdc:	00002413 	.inst	0x00002413 ; undefined
    9ce0:	3e017001 	.inst	0x3e017001 ; undefined
    9ce4:	bb000000 	.inst	0xbb000000 ; undefined
    9ce8:	2d00009c 	stp	s28, s0, [x4]
    9cec:	01006863 	.inst	0x01006863 ; undefined
    9cf0:	004c0171 	.inst	0x004c0171 ; undefined
    9cf4:	91020000 	add	x0, x0, #0x80
    9cf8:	5ef82e7f 	sqsub	d31, d19, d24
    9cfc:	00000300 	.inst	0x00000300 ; undefined
    9d00:	106e0000 	adr	x0, e5d00 <_stack_size+0xe4d00>
    9d04:	0d210000 	.inst	0x0d210000 ; undefined
    9d08:	011c0000 	.inst	0x011c0000 ; undefined
    9d0c:	7f910250 	.inst	0x7f910250 ; undefined
    9d10:	5f481b00 	.inst	0x5f481b00 ; undefined
    9d14:	00000300 	.inst	0x00000300 ; undefined
    9d18:	106e0000 	adr	x0, e5d18 <_stack_size+0xe4d18>
    9d1c:	011c0000 	.inst	0x011c0000 ; undefined
    9d20:	7f910250 	.inst	0x7f910250 ; undefined
    9d24:	cf2a0000 	.inst	0xcf2a0000 ; undefined
    9d28:	01000023 	.inst	0x01000023 ; undefined
    9d2c:	003e0198 	.inst	0x003e0198 ; NYI
    9d30:	5fb40000 	.inst	0x5fb40000 ; undefined
    9d34:	00000300 	.inst	0x00000300 ; undefined
    9d38:	00ec0000 	.inst	0x00ec0000 ; undefined
    9d3c:	00000000 	.inst	0x00000000 ; undefined
    9d40:	9c010000 	ldr	q0, bd40 <_stack_size+0xad40>
    9d44:	00000dd3 	.inst	0x00000dd3 ; undefined
    9d48:	00246b2b 	.inst	0x00246b2b ; NYI
    9d4c:	01980100 	.inst	0x01980100 ; undefined
    9d50:	00000c02 	.inst	0x00000c02 ; undefined
    9d54:	00009d19 	.inst	0x00009d19 ; undefined
    9d58:	0024b02b 	.inst	0x0024b02b ; NYI
    9d5c:	01980100 	.inst	0x01980100 ; undefined
    9d60:	0000003e 	.inst	0x0000003e ; undefined
    9d64:	00009d8e 	.inst	0x00009d8e ; undefined
    9d68:	001e342c 	.inst	0x001e342c ; undefined
    9d6c:	019c0100 	.inst	0x019c0100 ; undefined
    9d70:	0000003e 	.inst	0x0000003e ; undefined
    9d74:	00009e03 	.inst	0x00009e03 ; undefined
    9d78:	0024132c 	.inst	0x0024132c ; NYI
    9d7c:	019c0100 	.inst	0x019c0100 ; undefined
    9d80:	0000003e 	.inst	0x0000003e ; undefined
    9d84:	00009e39 	.inst	0x00009e39 ; undefined
    9d88:	0068632d 	.inst	0x0068632d ; undefined
    9d8c:	4c019d01 	.inst	0x4c019d01 ; undefined
    9d90:	02000000 	.inst	0x02000000 ; undefined
    9d94:	dc2e7f91 	.inst	0xdc2e7f91 ; undefined
    9d98:	0003005f 	.inst	0x0003005f ; undefined
    9d9c:	6e000000 	ext	v0.16b, v0.16b, v0.16b, #0
    9da0:	be000010 	.inst	0xbe000010 ; undefined
    9da4:	1c00000d 	ldr	s13, 9da4 <_stack_size+0x8da4>
    9da8:	91025001 	add	x1, x0, #0x94
    9dac:	2c1b007f 	stnp	s31, s0, [x3,#216]
    9db0:	00030060 	.inst	0x00030060 ; undefined
    9db4:	6e000000 	ext	v0.16b, v0.16b, v0.16b, #0
    9db8:	1c000010 	ldr	s16, 9db8 <_stack_size+0x8db8>
    9dbc:	91025001 	add	x1, x0, #0x94
    9dc0:	3400007f 	cbz	wzr, 9dcc <_stack_size+0x8dcc>
    9dc4:	000006e2 	.inst	0x000006e2 ; undefined
    9dc8:	030060a0 	.inst	0x030060a0 ; undefined
    9dcc:	00000000 	.inst	0x00000000 ; undefined
    9dd0:	00000030 	.inst	0x00000030 ; undefined
    9dd4:	00000000 	.inst	0x00000000 ; undefined
    9dd8:	0df89c01 	.inst	0x0df89c01 ; undefined
    9ddc:	ef230000 	.inst	0xef230000 ; undefined
    9de0:	97000006 	bl	fffffffffc009df8 <SMC_ID_HW_RSA+0xffffffff77ff9ef1>
    9de4:	0000009e 	.inst	0x0000009e ; undefined
    9de8:	00056335 	.inst	0x00056335 ; undefined
    9dec:	01d80100 	.inst	0x01d80100 ; undefined
    9df0:	030060d0 	.inst	0x030060d0 ; undefined
    9df4:	00000000 	.inst	0x00000000 ; undefined
    9df8:	00000068 	.inst	0x00000068 ; undefined
    9dfc:	00000000 	.inst	0x00000000 ; undefined
    9e00:	0e799c01 	mul	v1.4h, v0.4h, v25.4h
    9e04:	63360000 	.inst	0x63360000 ; undefined
    9e08:	d8010068 	prfm	plil1keep, be14 <_stack_size+0xae14>
    9e0c:	000e7901 	.inst	0x000e7901 ; undefined
    9e10:	009ed000 	.inst	0x009ed000 ; undefined
    9e14:	68633700 	.inst	0x68633700 ; undefined
    9e18:	e1010038 	.inst	0xe1010038 ; undefined
    9e1c:	00004c01 	.inst	0x00004c01 ; undefined
    9e20:	009f0600 	.inst	0x009f0600 ; undefined
    9e24:	06e23800 	.inst	0x06e23800 ; undefined
    9e28:	60e00000 	.inst	0x60e00000 ; undefined
    9e2c:	00000300 	.inst	0x00000300 ; undefined
    9e30:	0d400000 	ld1	{v0.b}[0], [x0]
    9e34:	e7010000 	.inst	0xe7010000 ; undefined
    9e38:	000e5301 	.inst	0x000e5301 ; undefined
    9e3c:	06ef3900 	.inst	0x06ef3900 ; undefined
    9e40:	3a000000 	adcs	w0, w0, w0
    9e44:	000006e2 	.inst	0x000006e2 ; undefined
    9e48:	030060f8 	.inst	0x030060f8 ; undefined
    9e4c:	00000000 	.inst	0x00000000 ; undefined
    9e50:	00000018 	.inst	0x00000018 ; undefined
    9e54:	00000000 	.inst	0x00000000 ; undefined
    9e58:	2101ea01 	.inst	0x2101ea01 ; undefined
    9e5c:	000006ef 	.inst	0x000006ef ; undefined
    9e60:	9e15f206 	.inst	0x9e15f206 ; undefined
    9e64:	00000000 	.inst	0x00000000 ; undefined
    9e68:	7f081800 	.inst	0x7f081800 ; undefined
    9e6c:	3b00000e 	.inst	0x3b00000e ; undefined
    9e70:	00000a2d 	.inst	0x00000a2d ; undefined
    9e74:	0025de35 	.inst	0x0025de35 ; NYI
    9e78:	01ef0100 	.inst	0x01ef0100 ; undefined
    9e7c:	03006138 	.inst	0x03006138 ; undefined
    9e80:	00000000 	.inst	0x00000000 ; undefined
    9e84:	00000060 	.inst	0x00000060 ; undefined
    9e88:	00000000 	.inst	0x00000000 ; undefined
    9e8c:	0ef19c01 	.inst	0x0ef19c01 ; undefined
    9e90:	763c0000 	.inst	0x763c0000 ; undefined
    9e94:	01006c61 	.inst	0x01006c61 ; undefined
    9e98:	007701ef 	.inst	0x007701ef ; undefined
    9e9c:	50010000 	adr	x0, be9e <_stack_size+0xae9e>
    9ea0:	6e656c36 	umin	v22.8h, v1.8h, v5.8h
    9ea4:	01ef0100 	.inst	0x01ef0100 ; undefined
    9ea8:	00000077 	.inst	0x00000077 ; undefined
    9eac:	00009f3c 	.inst	0x00009f3c ; undefined
    9eb0:	00686337 	.inst	0x00686337 ; undefined
    9eb4:	4c01f701 	.inst	0x4c01f701 ; undefined
    9eb8:	72000000 	ands	w0, w0, #0x1
    9ebc:	3d00009f 	str	b31, [x4]
    9ec0:	000006e2 	.inst	0x000006e2 ; undefined
    9ec4:	03006168 	.inst	0x03006168 ; undefined
    9ec8:	00000000 	.inst	0x00000000 ; undefined
    9ecc:	00000d70 	.inst	0x00000d70 ; undefined
    9ed0:	2101fd01 	.inst	0x2101fd01 ; undefined
    9ed4:	000006ef 	.inst	0x000006ef ; undefined
    9ed8:	9eb0f206 	.inst	0x9eb0f206 ; undefined
    9edc:	00000000 	.inst	0x00000000 ; undefined
    9ee0:	07023400 	.inst	0x07023400 ; undefined
    9ee4:	61980000 	.inst	0x61980000 ; undefined
    9ee8:	00000300 	.inst	0x00000300 ; undefined
    9eec:	00080000 	.inst	0x00080000 ; undefined
    9ef0:	00000000 	.inst	0x00000000 ; undefined
    9ef4:	9c010000 	ldr	q0, bef4 <_stack_size+0xaef4>
    9ef8:	00000f30 	.inst	0x00000f30 ; undefined
    9efc:	00070f23 	.inst	0x00070f23 ; undefined
    9f00:	009ff100 	.inst	0x009ff100 ; undefined
    9f04:	61a03e00 	.inst	0x61a03e00 ; undefined
    9f08:	00000300 	.inst	0x00000300 ; undefined
    9f0c:	0e840000 	.inst	0x0e840000 ; undefined
    9f10:	011c0000 	.inst	0x011c0000 ; undefined
    9f14:	01f30350 	.inst	0x01f30350 ; undefined
    9f18:	51011c50 	sub	w16, w2, #0x47
    9f1c:	00003801 	.inst	0x00003801 ; undefined
    9f20:	00202735 	.inst	0x00202735 ; NYI
    9f24:	020e0100 	.inst	0x020e0100 ; undefined
    9f28:	030061a0 	.inst	0x030061a0 ; undefined
    9f2c:	00000000 	.inst	0x00000000 ; undefined
    9f30:	00000034 	.inst	0x00000034 ; undefined
    9f34:	00000000 	.inst	0x00000000 ; undefined
    9f38:	10019c01 	adr	x1, d2b8 <_stack_size+0xc2b8>
    9f3c:	73360000 	.inst	0x73360000 ; undefined
    9f40:	01007274 	.inst	0x01007274 ; undefined
    9f44:	0e79020e 	saddl	v14.4s, v16.4h, v25.4h
    9f48:	a02a0000 	.inst	0xa02a0000 ; undefined
    9f4c:	342b0000 	cbz	w0, 5ff4c <_stack_size+0x5ef4c>
    9f50:	0100001e 	.inst	0x0100001e ; undefined
    9f54:	0077020e 	.inst	0x0077020e ; undefined
    9f58:	a0630000 	.inst	0xa0630000 ; undefined
    9f5c:	023f0000 	.inst	0x023f0000 ; undefined
    9f60:	b8000007 	stur	w7, [x0]
    9f64:	00030061 	.inst	0x00030061 ; undefined
    9f68:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    9f6c:	00000000 	.inst	0x00000000 ; undefined
    9f70:	01000000 	.inst	0x01000000 ; undefined
    9f74:	0fad0211 	.inst	0x0fad0211 ; undefined
    9f78:	0f230000 	.inst	0x0f230000 ; undefined
    9f7c:	af000007 	.inst	0xaf000007 ; undefined
    9f80:	1b0000a0 	madd	w0, w5, w0, w0
    9f84:	030061c4 	.inst	0x030061c4 ; undefined
    9f88:	00000000 	.inst	0x00000000 ; undefined
    9f8c:	00000e84 	.inst	0x00000e84 ; undefined
    9f90:	0250011c 	.inst	0x0250011c ; undefined
    9f94:	011c0083 	.inst	0x011c0083 ; undefined
    9f98:	00380151 	.inst	0x00380151 ; NYI
    9f9c:	61ac2e00 	.inst	0x61ac2e00 ; undefined
    9fa0:	00000300 	.inst	0x00000300 ; undefined
    9fa4:	0df80000 	ld2	{v0.b, v1.b}[0], [x0], x24
    9fa8:	0fc60000 	.inst	0x0fc60000 ; undefined
    9fac:	011c0000 	.inst	0x011c0000 ; undefined
    9fb0:	01f30350 	.inst	0x01f30350 ; undefined
    9fb4:	b82e0050 	ldadd	w14, w16, [x2]
    9fb8:	00030061 	.inst	0x00030061 ; undefined
    9fbc:	f8000000 	stur	x0, [x0]
    9fc0:	e500000d 	.inst	0xe500000d ; undefined
    9fc4:	1c00000f 	ldr	s15, 9fc4 <_stack_size+0x8fc4>
    9fc8:	03095001 	.inst	0x03095001 ; undefined
    9fcc:	03009f00 	.inst	0x03009f00 ; undefined
    9fd0:	00000000 	.inst	0x00000000 ; undefined
    9fd4:	61d43e00 	.inst	0x61d43e00 ; undefined
    9fd8:	00000300 	.inst	0x00000300 ; undefined
    9fdc:	0df80000 	ld2	{v0.b, v1.b}[0], [x0], x24
    9fe0:	011c0000 	.inst	0x011c0000 ; undefined
    9fe4:	58030950 	ldr	x16, 1010c <_stack_size+0xf10c>
    9fe8:	0003009e 	.inst	0x0003009e ; undefined
    9fec:	00000000 	.inst	0x00000000 ; undefined
    9ff0:	065c4000 	.inst	0x065c4000 ; undefined
    9ff4:	10110000 	adr	x0, 2bff4 <_stack_size+0x2aff4>
    9ff8:	11410000 	add	w0, w0, #0x40, lsl #12
    9ffc:	01000010 	.inst	0x01000010 ; undefined
    a000:	07080200 	.inst	0x07080200 ; undefined
    a004:	0000059d 	.inst	0x0000059d ; undefined
    a008:	00263342 	.inst	0x00263342 ; NYI
    a00c:	2d790100 	ldp	s0, s0, [x8,#-56]
    a010:	09000010 	.inst	0x09000010 ; undefined
    a014:	009bd003 	.inst	0x009bd003 ; undefined
    a018:	00000003 	.inst	0x00000003 ; undefined
    a01c:	10013b00 	adr	x0, c77c <_stack_size+0xb77c>
    a020:	fd430000 	ldr	d0, [x0,#1536]
    a024:	01000025 	.inst	0x01000025 ; undefined
    a028:	0010471e 	.inst	0x0010471e ; undefined
    a02c:	78030900 	sttrh	w0, [x8,#48]
    a030:	000300a3 	.inst	0x000300a3 ; undefined
    a034:	18000000 	ldr	w0, a034 <_stack_size+0x9034>
    a038:	00104d08 	.inst	0x00104d08 ; undefined
    a03c:	06503300 	.inst	0x06503300 ; undefined
    a040:	de440000 	.inst	0xde440000 ; undefined
    a044:	01000004 	.inst	0x01000004 ; undefined
    a048:	00003e74 	.inst	0x00003e74 ; undefined
    a04c:	25a54500 	.inst	0x25a54500 ; undefined
    a050:	45050000 	.inst	0x45050000 ; undefined
    a054:	0000106e 	.inst	0x0000106e ; undefined
    a058:	00002946 	.inst	0x00002946 ; undefined
    a05c:	41470000 	.inst	0x41470000 ; undefined
    a060:	04000025 	.inst	0x04000025 ; undefined
    a064:	003e012a 	.inst	0x003e012a ; NYI
    a068:	10840000 	adr	x0, fffffffffff12068 <SMC_ID_HW_RSA+0xffffffff7bf02161>
    a06c:	fc460000 	ldur	d0, [x0,#96]
    a070:	00000006 	.inst	0x00000006 ; undefined
    a074:	00234c48 	.inst	0x00234c48 ; NYI
    a078:	772b0600 	.inst	0x772b0600 ; undefined
    a07c:	9e000000 	.inst	0x9e000000 ; undefined
    a080:	46000010 	.inst	0x46000010 ; undefined
    a084:	00000077 	.inst	0x00000077 ; undefined
    a088:	00002946 	.inst	0x00002946 ; undefined
    a08c:	6b300000 	subs	w0, w0, w16, uxtb
    a090:	01000001 	.inst	0x01000001 ; undefined
    a094:	003e0155 	.inst	0x003e0155 ; NYI
    a098:	10b00000 	adr	x0, fffffffffff6a098 <SMC_ID_HW_RSA+0xffffffff7bf5a191>
    a09c:	00310000 	.inst	0x00310000 ; NYI
    a0a0:	00229b49 	.inst	0x00229b49 ; NYI
    a0a4:	902c0600 	adrp	x0, 580ca000 <MPIDR_EL1_U+0x180ca000>
    a0a8:	46000000 	.inst	0x46000000 ; undefined
    a0ac:	00000077 	.inst	0x00000077 ; undefined
    a0b0:	00007746 	.inst	0x00007746 ; undefined
    a0b4:	83000000 	.inst	0x83000000 ; undefined
    a0b8:	04000000 	.inst	0x04000000 ; undefined
    a0bc:	0028aa00 	.inst	0x0028aa00 ; NYI
    a0c0:	89010800 	.inst	0x89010800 ; undefined
    a0c4:	01000001 	.inst	0x01000001 ; undefined
    a0c8:	00002669 	.inst	0x00002669 ; undefined
    a0cc:	00003241 	.inst	0x00003241 ; undefined
    a0d0:	00060102 	.inst	0x00060102 ; undefined
    a0d4:	02000001 	.inst	0x02000001 ; undefined
    a0d8:	002b0502 	.inst	0x002b0502 ; NYI
    a0dc:	04030000 	.inst	0x04030000 ; undefined
    a0e0:	746e6905 	.inst	0x746e6905 ; undefined
    a0e4:	05080200 	.inst	0x05080200 ; undefined
    a0e8:	000000a9 	.inst	0x000000a9 ; undefined
    a0ec:	fe080102 	.inst	0xfe080102 ; undefined
    a0f0:	02000000 	.inst	0x02000000 ; undefined
    a0f4:	01310702 	.inst	0x01310702 ; undefined
    a0f8:	04020000 	.inst	0x04020000 ; undefined
    a0fc:	00011607 	.inst	0x00011607 ; undefined
    a100:	07080200 	.inst	0x07080200 ; undefined
    a104:	00000111 	.inst	0x00000111 ; undefined
    a108:	00003f04 	.inst	0x00003f04 ; undefined
    a10c:	43110200 	.inst	0x43110200 ; undefined
    a110:	02000000 	.inst	0x02000000 ; undefined
    a114:	010c0708 	.inst	0x010c0708 ; undefined
    a118:	08020000 	stxrb	w2, w0, [x0]
    a11c:	0000a405 	.inst	0x0000a405 ; undefined
    a120:	26560500 	.inst	0x26560500 ; undefined
    a124:	40010000 	.inst	0x40010000 ; undefined
    a128:	00000075 	.inst	0x00000075 ; undefined
    a12c:	00350806 	.inst	0x00350806 ; NYI
    a130:	61050000 	.inst	0x61050000 ; undefined
    a134:	01000026 	.inst	0x01000026 ; undefined
    a138:	00005141 	.inst	0x00005141 ; undefined
    a13c:	07c60000 	.inst	0x07c60000 ; undefined
    a140:	00040000 	.inst	0x00040000 ; undefined
    a144:	000028f1 	.inst	0x000028f1 ; undefined
    a148:	01890108 	.inst	0x01890108 ; undefined
    a14c:	e0010000 	.inst	0xe0010000 ; undefined
    a150:	d4000026 	.inst	0xd4000026 ; undefined
    a154:	00030061 	.inst	0x00030061 ; undefined
    a158:	60000000 	.inst	0x60000000 ; undefined
    a15c:	00000001 	.inst	0x00000001 ; undefined
    a160:	11000000 	add	w0, w0, #0x0
    a164:	02000033 	.inst	0x02000033 ; undefined
    a168:	01000601 	.inst	0x01000601 ; undefined
    a16c:	02020000 	.inst	0x02020000 ; undefined
    a170:	00002b05 	.inst	0x00002b05 ; undefined
    a174:	05040300 	.inst	0x05040300 ; undefined
    a178:	00746e69 	.inst	0x00746e69 ; undefined
    a17c:	a9050802 	stp	x2, x2, [x0,#80]
    a180:	02000000 	.inst	0x02000000 ; undefined
    a184:	00fe0801 	.inst	0x00fe0801 ; undefined
    a188:	02020000 	.inst	0x02020000 ; undefined
    a18c:	00013107 	.inst	0x00013107 ; undefined
    a190:	07040200 	.inst	0x07040200 ; undefined
    a194:	00000116 	.inst	0x00000116 ; undefined
    a198:	11070802 	add	w2, w0, #0x1c2
    a19c:	04000001 	.inst	0x04000001 ; undefined
    a1a0:	00000604 	.inst	0x00000604 ; undefined
    a1a4:	00450d02 	.inst	0x00450d02 ; undefined
    a1a8:	3f040000 	.inst	0x3f040000 ; undefined
    a1ac:	02000000 	.inst	0x02000000 ; undefined
    a1b0:	00005311 	.inst	0x00005311 ; undefined
    a1b4:	07080200 	.inst	0x07080200 ; undefined
    a1b8:	0000010c 	.inst	0x0000010c ; undefined
    a1bc:	a4050802 	.inst	0xa4050802 ; undefined
    a1c0:	05000000 	.inst	0x05000000 ; undefined
    a1c4:	ac310304 	stnp	q4, q0, [x24,#-480]
    a1c8:	06000000 	.inst	0x06000000 ; undefined
    a1cc:	004c4c44 	.inst	0x004c4c44 ; undefined
    a1d0:	006c3403 	.inst	0x006c3403 ; undefined
    a1d4:	08040000 	stxrb	w4, w0, [x0]
    a1d8:	8e070018 	.inst	0x8e070018 ; undefined
    a1dc:	03000023 	.inst	0x03000023 ; undefined
    a1e0:	00006c35 	.inst	0x00006c35 ; undefined
    a1e4:	00180400 	.inst	0x00180400 ; undefined
    a1e8:	04050000 	.inst	0x04050000 ; undefined
    a1ec:	00d33903 	.inst	0x00d33903 ; undefined
    a1f0:	52060000 	eor	w0, w0, #0x4000000
    a1f4:	03004442 	.inst	0x03004442 ; undefined
    a1f8:	00006c3c 	.inst	0x00006c3c ; undefined
    a1fc:	18080400 	ldr	w0, 1a27c <_stack_size+0x1927c>
    a200:	238e0700 	.inst	0x238e0700 ; undefined
    a204:	3d030000 	str	b0, [x0,#192]
    a208:	0000006c 	.inst	0x0000006c ; undefined
    a20c:	00001804 	.inst	0x00001804 ; undefined
    a210:	03040500 	.inst	0x03040500 ; undefined
    a214:	0000fa41 	.inst	0x0000fa41 ; undefined
    a218:	48540600 	ldxrh	w0, [x16]
    a21c:	44030044 	.inst	0x44030044 ; undefined
    a220:	0000006c 	.inst	0x0000006c ; undefined
    a224:	00180804 	.inst	0x00180804 ; undefined
    a228:	00238e07 	.inst	0x00238e07 ; NYI
    a22c:	6c450300 	ldnp	d0, d0, [x24,#80]
    a230:	04000000 	.inst	0x04000000 ; undefined
    a234:	00000018 	.inst	0x00000018 ; undefined
    a238:	00245108 	.inst	0x00245108 ; NYI
    a23c:	2e030400 	.inst	0x2e030400 ; undefined
    a240:	00000133 	.inst	0x00000133 ; undefined
    a244:	00262309 	.inst	0x00262309 ; NYI
    a248:	6c300300 	stnp	d0, d0, [x24,#-256]
    a24c:	09000000 	.inst	0x09000000 ; undefined
    a250:	00002529 	.inst	0x00002529 ; undefined
    a254:	00853703 	.inst	0x00853703 ; undefined
    a258:	31090000 	adds	w0, w0, #0x240
    a25c:	03000025 	.inst	0x03000025 ; undefined
    a260:	0000ac3f 	.inst	0x0000ac3f ; undefined
    a264:	25390900 	.inst	0x25390900 ; undefined
    a268:	47030000 	.inst	0x47030000 ; undefined
    a26c:	000000d3 	.inst	0x000000d3 ; undefined
    a270:	24520400 	.inst	0x24520400 ; undefined
    a274:	49030000 	.inst	0x49030000 ; undefined
    a278:	000000fa 	.inst	0x000000fa ; undefined
    a27c:	4e030405 	dup	v5.16b, v0.b[1]
    a280:	00000165 	.inst	0x00000165 ; undefined
    a284:	4d4c4406 	.inst	0x4d4c4406 ; undefined
    a288:	6c510300 	ldnp	d0, d0, [x24,#272]
    a28c:	04000000 	.inst	0x04000000 ; undefined
    a290:	07001808 	.inst	0x07001808 ; undefined
    a294:	0000238e 	.inst	0x0000238e ; undefined
    a298:	006c5203 	.inst	0x006c5203 ; undefined
    a29c:	18040000 	ldr	w0, 1229c <_stack_size+0x1129c>
    a2a0:	05000000 	.inst	0x05000000 ; undefined
    a2a4:	b9550304 	ldr	w4, [x24,#5376]
    a2a8:	07000001 	.inst	0x07000001 ; undefined
    a2ac:	0000261e 	.inst	0x0000261e ; undefined
    a2b0:	006c5803 	.inst	0x006c5803 ; undefined
    a2b4:	01040000 	.inst	0x01040000 ; undefined
    a2b8:	0f07001f 	.inst	0x0f07001f ; undefined
    a2bc:	03000026 	.inst	0x03000026 ; undefined
    a2c0:	00006c59 	.inst	0x00006c59 ; undefined
    a2c4:	1e010400 	.inst	0x1e010400 ; undefined
    a2c8:	23f90700 	.inst	0x23f90700 ; undefined
    a2cc:	5a030000 	sbc	w0, w0, w3
    a2d0:	0000006c 	.inst	0x0000006c ; undefined
    a2d4:	001d0104 	.inst	0x001d0104 ; undefined
    a2d8:	00248407 	.inst	0x00248407 ; NYI
    a2dc:	6c5b0300 	ldnp	d0, d0, [x24,#432]
    a2e0:	04000000 	.inst	0x04000000 ; undefined
    a2e4:	07001c01 	.inst	0x07001c01 ; undefined
    a2e8:	0000238e 	.inst	0x0000238e ; undefined
    a2ec:	006c5c03 	.inst	0x006c5c03 ; undefined
    a2f0:	1c040000 	ldr	s0, 122f0 <_stack_size+0x112f0>
    a2f4:	08000000 	stxrb	w0, w0, [x0]
    a2f8:	0000249f 	.inst	0x0000249f ; undefined
    a2fc:	e74b0304 	.inst	0xe74b0304 ; undefined
    a300:	09000001 	.inst	0x09000001 ; undefined
    a304:	00002623 	.inst	0x00002623 ; undefined
    a308:	006c4d03 	.inst	0x006c4d03 ; undefined
    a30c:	29090000 	stp	w0, w0, [x0,#72]
    a310:	03000025 	.inst	0x03000025 ; undefined
    a314:	00013e53 	.inst	0x00013e53 ; undefined
    a318:	25310900 	.inst	0x25310900 ; undefined
    a31c:	5d030000 	.inst	0x5d030000 ; undefined
    a320:	00000165 	.inst	0x00000165 ; undefined
    a324:	24a00400 	.inst	0x24a00400 ; undefined
    a328:	5f030000 	.inst	0x5f030000 ; undefined
    a32c:	000001b9 	.inst	0x000001b9 ; undefined
    a330:	64030405 	.inst	0x64030405 ; undefined
    a334:	00000246 	.inst	0x00000246 ; undefined
    a338:	00247a07 	.inst	0x00247a07 ; NYI
    a33c:	6c670300 	ldnp	d0, d0, [x24,#-400]
    a340:	04000000 	.inst	0x04000000 ; undefined
    a344:	06001f01 	.inst	0x06001f01 ; undefined
    a348:	00444949 	.inst	0x00444949 ; undefined
    a34c:	006c6903 	.inst	0x006c6903 ; undefined
    a350:	03040000 	.inst	0x03040000 ; undefined
    a354:	db07001c 	.inst	0xdb07001c ; undefined
    a358:	03000023 	.inst	0x03000023 ; undefined
    a35c:	00006c6f 	.inst	0x00006c6f ; undefined
    a360:	1a020400 	.inst	0x1a020400 ; undefined
    a364:	25af0700 	.inst	0x25af0700 ; undefined
    a368:	70030000 	adr	x0, 1036b <_stack_size+0xf36b>
    a36c:	0000006c 	.inst	0x0000006c ; undefined
    a370:	00180204 	.inst	0x00180204 ; undefined
    a374:	0023e507 	.inst	0x0023e507 ; NYI
    a378:	6c730300 	ldnp	d0, d0, [x24,#-208]
    a37c:	04000000 	.inst	0x04000000 ; undefined
    a380:	00000018 	.inst	0x00000018 ; undefined
    a384:	76030405 	.inst	0x76030405 ; undefined
    a388:	000002b8 	.inst	0x000002b8 ; undefined
    a38c:	00242707 	.inst	0x00242707 ; NYI
    a390:	6c790300 	ldnp	d0, d0, [x24,#-112]
    a394:	04000000 	.inst	0x04000000 ; undefined
    a398:	07001f01 	.inst	0x07001f01 ; undefined
    a39c:	00002515 	.inst	0x00002515 ; undefined
    a3a0:	006c7e03 	.inst	0x006c7e03 ; undefined
    a3a4:	01040000 	.inst	0x01040000 ; undefined
    a3a8:	e807001e 	.inst	0xe807001e ; undefined
    a3ac:	03000025 	.inst	0x03000025 ; undefined
    a3b0:	00006c80 	.inst	0x00006c80 ; undefined
    a3b4:	1d010400 	.inst	0x1d010400 ; undefined
    a3b8:	25d10700 	.inst	0x25d10700 ; undefined
    a3bc:	82030000 	.inst	0x82030000 ; undefined
    a3c0:	0000006c 	.inst	0x0000006c ; undefined
    a3c4:	001c0104 	.inst	0x001c0104 ; undefined
    a3c8:	0023db07 	.inst	0x0023db07 ; NYI
    a3cc:	6c830300 	stp	d0, d0, [x24],#48
    a3d0:	04000000 	.inst	0x04000000 ; undefined
    a3d4:	07001a02 	.inst	0x07001a02 ; undefined
    a3d8:	000023f4 	.inst	0x000023f4 ; undefined
    a3dc:	006c8403 	.inst	0x006c8403 ; undefined
    a3e0:	02040000 	.inst	0x02040000 ; undefined
    a3e4:	e5070018 	.inst	0xe5070018 ; undefined
    a3e8:	03000023 	.inst	0x03000023 ; undefined
    a3ec:	00006c8a 	.inst	0x00006c8a ; undefined
    a3f0:	00180400 	.inst	0x00180400 ; undefined
    a3f4:	94080000 	bl	20a3f4 <_stack_size+0x2093f4>
    a3f8:	04000025 	.inst	0x04000025 ; undefined
    a3fc:	02e66103 	.inst	0x02e66103 ; undefined
    a400:	23090000 	.inst	0x23090000 ; undefined
    a404:	03000026 	.inst	0x03000026 ; undefined
    a408:	00006c63 	.inst	0x00006c63 ; undefined
    a40c:	25290900 	.inst	0x25290900 ; undefined
    a410:	74030000 	.inst	0x74030000 ; undefined
    a414:	000001f2 	.inst	0x000001f2 ; undefined
    a418:	00253109 	.inst	0x00253109 ; NYI
    a41c:	468b0300 	.inst	0x468b0300 ; undefined
    a420:	00000002 	.inst	0x00000002 ; undefined
    a424:	00259504 	.inst	0x00259504 ; NYI
    a428:	b88d0300 	ldursw	x0, [x24,#208]
    a42c:	05000002 	.inst	0x05000002 ; undefined
    a430:	63920304 	.inst	0x63920304 ; undefined
    a434:	06000003 	.inst	0x06000003 ; undefined
    a438:	00534c57 	.inst	0x00534c57 ; undefined
    a43c:	006c9503 	.inst	0x006c9503 ; undefined
    a440:	02040000 	.inst	0x02040000 ; undefined
    a444:	5306001e 	ubfiz	w30, w0, #26, #1
    a448:	03005054 	.inst	0x03005054 ; undefined
    a44c:	00006c9a 	.inst	0x00006c9a ; undefined
    a450:	1d010400 	.inst	0x1d010400 ; undefined
    a454:	45500600 	.inst	0x45500600 ; undefined
    a458:	9d03004e 	.inst	0x9d03004e ; undefined
    a45c:	0000006c 	.inst	0x0000006c ; undefined
    a460:	001c0104 	.inst	0x001c0104 ; undefined
    a464:	53504506 	.inst	0x53504506 ; undefined
    a468:	6c9e0300 	stp	d0, d0, [x24],#480
    a46c:	04000000 	.inst	0x04000000 ; undefined
    a470:	06001a02 	.inst	0x06001a02 ; undefined
    a474:	004b5242 	.inst	0x004b5242 ; undefined
    a478:	006ca303 	.inst	0x006ca303 ; undefined
    a47c:	01040000 	.inst	0x01040000 ; undefined
    a480:	47070019 	.inst	0x47070019 ; undefined
    a484:	03000026 	.inst	0x03000026 ; undefined
    a488:	00006ca6 	.inst	0x00006ca6 ; undefined
    a48c:	18010400 	ldr	w0, c50c <_stack_size+0xb50c>
    a490:	238e0700 	.inst	0x238e0700 ; undefined
    a494:	a7030000 	.inst	0xa7030000 ; undefined
    a498:	0000006c 	.inst	0x0000006c ; undefined
    a49c:	00001804 	.inst	0x00001804 ; undefined
    a4a0:	24440800 	.inst	0x24440800 ; undefined
    a4a4:	03040000 	.inst	0x03040000 ; undefined
    a4a8:	0003868f 	.inst	0x0003868f ; undefined
    a4ac:	26230900 	.inst	0x26230900 ; undefined
    a4b0:	91030000 	add	x0, x0, #0xc0
    a4b4:	0000006c 	.inst	0x0000006c ; undefined
    a4b8:	00236509 	.inst	0x00236509 ; NYI
    a4bc:	f1a80300 	.inst	0xf1a80300 ; undefined
    a4c0:	00000002 	.inst	0x00000002 ; undefined
    a4c4:	00244504 	.inst	0x00244504 ; NYI
    a4c8:	63aa0300 	.inst	0x63aa0300 ; undefined
    a4cc:	05000003 	.inst	0x05000003 ; undefined
    a4d0:	e5af0304 	.inst	0xe5af0304 ; undefined
    a4d4:	06000003 	.inst	0x06000003 ; undefined
    a4d8:	00525444 	.inst	0x00525444 ; undefined
    a4dc:	006cb203 	.inst	0x006cb203 ; undefined
    a4e0:	01040000 	.inst	0x01040000 ; undefined
    a4e4:	5206001f 	eor	wsp, w0, #0x4000000
    a4e8:	03005354 	.inst	0x03005354 ; undefined
    a4ec:	00006cb5 	.inst	0x00006cb5 ; undefined
    a4f0:	1e010400 	.inst	0x1e010400 ; undefined
    a4f4:	23db0700 	.inst	0x23db0700 ; undefined
    a4f8:	b8030000 	stur	w0, [x0,#48]
    a4fc:	0000006c 	.inst	0x0000006c ; undefined
    a500:	001c0204 	.inst	0x001c0204 ; undefined
    a504:	0023e507 	.inst	0x0023e507 ; NYI
    a508:	6cb90300 	stp	d0, d0, [x24],#-112
    a50c:	04000000 	.inst	0x04000000 ; undefined
    a510:	0700011b 	.inst	0x0700011b ; undefined
    a514:	0000247f 	.inst	0x0000247f ; undefined
    a518:	006cba03 	.inst	0x006cba03 ; undefined
    a51c:	01040000 	.inst	0x01040000 ; undefined
    a520:	08000000 	stxrb	w0, w0, [x0]
    a524:	000023b7 	.inst	0x000023b7 ; undefined
    a528:	08ac0304 	.inst	0x08ac0304 ; undefined
    a52c:	09000004 	.inst	0x09000004 ; undefined
    a530:	00002623 	.inst	0x00002623 ; undefined
    a534:	006cae03 	.inst	0x006cae03 ; undefined
    a538:	65090000 	.inst	0x65090000 ; undefined
    a53c:	03000023 	.inst	0x03000023 ; undefined
    a540:	000391bb 	.inst	0x000391bb ; undefined
    a544:	b8040000 	stur	w0, [x0,#64]
    a548:	03000023 	.inst	0x03000023 ; undefined
    a54c:	0003e5bd 	.inst	0x0003e5bd ; undefined
    a550:	03040500 	.inst	0x03040500 ; undefined
    a554:	00049ec2 	.inst	0x00049ec2 ; undefined
    a558:	52440600 	.inst	0x52440600 ; undefined
    a55c:	6cc50300 	ldp	d0, d0, [x24],#80
    a560:	04000000 	.inst	0x04000000 ; undefined
    a564:	06001f01 	.inst	0x06001f01 ; undefined
    a568:	0300454f 	.inst	0x0300454f ; undefined
    a56c:	00006cc9 	.inst	0x00006cc9 ; undefined
    a570:	1e010400 	.inst	0x1e010400 ; undefined
    a574:	45500600 	.inst	0x45500600 ; undefined
    a578:	6cce0300 	ldp	d0, d0, [x24],#224
    a57c:	04000000 	.inst	0x04000000 ; undefined
    a580:	06001d01 	.inst	0x06001d01 ; undefined
    a584:	03004546 	.inst	0x03004546 ; undefined
    a588:	00006ccf 	.inst	0x00006ccf ; undefined
    a58c:	1c010400 	ldr	s0, c60c <_stack_size+0xb60c>
    a590:	49420600 	.inst	0x49420600 ; undefined
    a594:	6cd00300 	ldp	d0, d0, [x24],#256
    a598:	04000000 	.inst	0x04000000 ; undefined
    a59c:	07001b01 	.inst	0x07001b01 ; undefined
    a5a0:	000023b2 	.inst	0x000023b2 ; undefined
    a5a4:	006cd103 	.inst	0x006cd103 ; undefined
    a5a8:	01040000 	.inst	0x01040000 ; undefined
    a5ac:	6c07001a 	stnp	d26, d0, [x0,#112]
    a5b0:	03000023 	.inst	0x03000023 ; undefined
    a5b4:	00006cd4 	.inst	0x00006cd4 ; undefined
    a5b8:	19010400 	.inst	0x19010400 ; undefined
    a5bc:	46520600 	.inst	0x46520600 ; undefined
    a5c0:	d7030045 	.inst	0xd7030045 ; undefined
    a5c4:	0000006c 	.inst	0x0000006c ; undefined
    a5c8:	00180104 	.inst	0x00180104 ; undefined
    a5cc:	00238e07 	.inst	0x00238e07 ; NYI
    a5d0:	6cd90300 	ldp	d0, d0, [x24],#400
    a5d4:	04000000 	.inst	0x04000000 ; undefined
    a5d8:	00000018 	.inst	0x00000018 ; undefined
    a5dc:	00249208 	.inst	0x00249208 ; NYI
    a5e0:	bf030400 	.inst	0xbf030400 ; undefined
    a5e4:	000004c1 	.inst	0x000004c1 ; undefined
    a5e8:	00262309 	.inst	0x00262309 ; NYI
    a5ec:	6cc10300 	ldp	d0, d0, [x24],#16
    a5f0:	09000000 	.inst	0x09000000 ; undefined
    a5f4:	00002365 	.inst	0x00002365 ; undefined
    a5f8:	0413da03 	.inst	0x0413da03 ; undefined
    a5fc:	04000000 	.inst	0x04000000 ; undefined
    a600:	00002493 	.inst	0x00002493 ; undefined
    a604:	049edc03 	.inst	0x049edc03 ; undefined
    a608:	04050000 	.inst	0x04050000 ; undefined
    a60c:	053de103 	.inst	0x053de103 ; undefined
    a610:	97070000 	bl	fffffffffc1ca610 <SMC_ID_HW_RSA+0xffffffff781ba709>
    a614:	03000023 	.inst	0x03000023 ; undefined
    a618:	00006ce5 	.inst	0x00006ce5 ; undefined
    a61c:	1f010400 	fmadd	s0, s0, s1, s1
    a620:	23db0700 	.inst	0x23db0700 ; undefined
    a624:	e7030000 	.inst	0xe7030000 ; undefined
    a628:	0000006c 	.inst	0x0000006c ; undefined
    a62c:	001c0304 	.inst	0x001c0304 ; undefined
    a630:	53544306 	.inst	0x53544306 ; undefined
    a634:	6ce80300 	ldp	d0, d0, [x24],#-384
    a638:	04000000 	.inst	0x04000000 ; undefined
    a63c:	06001b01 	.inst	0x06001b01 ; undefined
    a640:	00525344 	.inst	0x00525344 ; undefined
    a644:	006ceb03 	.inst	0x006ceb03 ; undefined
    a648:	01040000 	.inst	0x01040000 ; undefined
    a64c:	5206001a 	eor	w26, w0, #0x4000000
    a650:	ee030049 	.inst	0xee030049 ; undefined
    a654:	0000006c 	.inst	0x0000006c ; undefined
    a658:	00190104 	.inst	0x00190104 ; undefined
    a65c:	44434406 	.inst	0x44434406 ; undefined
    a660:	6cf10300 	ldp	d0, d0, [x24],#-240
    a664:	04000000 	.inst	0x04000000 ; undefined
    a668:	07001801 	.inst	0x07001801 ; undefined
    a66c:	000023e5 	.inst	0x000023e5 ; undefined
    a670:	006cf403 	.inst	0x006cf403 ; undefined
    a674:	18040000 	ldr	w0, 12674 <_stack_size+0x11674>
    a678:	08000000 	stxrb	w0, w0, [x0]
    a67c:	00002406 	.inst	0x00002406 ; undefined
    a680:	60de0304 	.inst	0x60de0304 ; undefined
    a684:	09000005 	.inst	0x09000005 ; undefined
    a688:	00002623 	.inst	0x00002623 ; undefined
    a68c:	006ce003 	.inst	0x006ce003 ; undefined
    a690:	65090000 	.inst	0x65090000 ; undefined
    a694:	03000023 	.inst	0x03000023 ; undefined
    a698:	0004ccf6 	.inst	0x0004ccf6 ; undefined
    a69c:	07040000 	.inst	0x07040000 ; undefined
    a6a0:	03000024 	.inst	0x03000024 ; undefined
    a6a4:	00053df8 	.inst	0x00053df8 ; undefined
    a6a8:	03040500 	.inst	0x03040500 ; undefined
    a6ac:	000594fd 	.inst	0x000594fd ; undefined
    a6b0:	43530a00 	.inst	0x43530a00 ; undefined
    a6b4:	00030052 	.inst	0x00030052 ; undefined
    a6b8:	00006c01 	.inst	0x00006c01 ; undefined
    a6bc:	18080400 	ldr	w0, 1a73c <_stack_size+0x1973c>
    a6c0:	238e0b00 	.inst	0x238e0b00 ; undefined
    a6c4:	01030000 	.inst	0x01030000 ; undefined
    a6c8:	00006c01 	.inst	0x00006c01 ; undefined
    a6cc:	00180400 	.inst	0x00180400 ; undefined
    a6d0:	71080000 	subs	w0, w0, #0x200
    a6d4:	04000023 	.inst	0x04000023 ; undefined
    a6d8:	05b8fa03 	.inst	0x05b8fa03 ; undefined
    a6dc:	23090000 	.inst	0x23090000 ; undefined
    a6e0:	03000026 	.inst	0x03000026 ; undefined
    a6e4:	00006cfc 	.inst	0x00006cfc ; undefined
    a6e8:	23650c00 	.inst	0x23650c00 ; undefined
    a6ec:	02030000 	.inst	0x02030000 ; undefined
    a6f0:	00056b01 	.inst	0x00056b01 ; undefined
    a6f4:	720d0000 	ands	w0, w0, #0x80000
    a6f8:	03000023 	.inst	0x03000023 ; undefined
    a6fc:	05940104 	.inst	0x05940104 ; undefined
    a700:	200e0000 	.inst	0x200e0000 ; undefined
    a704:	20000025 	.inst	0x20000025 ; undefined
    a708:	3a010703 	.inst	0x3a010703 ; undefined
    a70c:	0f000006 	.inst	0x0f000006 ; undefined
    a710:	00002419 	.inst	0x00002419 ; undefined
    a714:	33010903 	bfxil	w3, w8, #1, #2
    a718:	00000001 	.inst	0x00000001 ; undefined
    a71c:	0025890f 	.inst	0x0025890f ; NYI
    a720:	010a0300 	.inst	0x010a0300 ; undefined
    a724:	000001e7 	.inst	0x000001e7 ; undefined
    a728:	256c0f04 	.inst	0x256c0f04 ; undefined
    a72c:	0b030000 	add	w0, w0, w3
    a730:	0002e601 	.inst	0x0002e601 ; undefined
    a734:	c90f0800 	.inst	0xc90f0800 ; undefined
    a738:	03000025 	.inst	0x03000025 ; undefined
    a73c:	0386010c 	.inst	0x0386010c ; undefined
    a740:	0f0c0000 	.inst	0x0f0c0000 ; undefined
    a744:	0000250d 	.inst	0x0000250d ; undefined
    a748:	08010d03 	stxrb	w1, w3, [x8]
    a74c:	10000004 	adr	x4, a74c <_stack_size+0x974c>
    a750:	0025d60f 	.inst	0x0025d60f ; NYI
    a754:	010e0300 	.inst	0x010e0300 ; undefined
    a758:	000004c1 	.inst	0x000004c1 ; undefined
    a75c:	254d0f14 	.inst	0x254d0f14 ; undefined
    a760:	0f030000 	.inst	0x0f030000 ; undefined
    a764:	00056001 	.inst	0x00056001 ; undefined
    a768:	8a0f1800 	and	x0, x0, x15, lsl #6
    a76c:	03000024 	.inst	0x03000024 ; undefined
    a770:	05b80110 	.inst	0x05b80110 ; undefined
    a774:	001c0000 	.inst	0x001c0000 ; undefined
    a778:	0025210d 	.inst	0x0025210d ; NYI
    a77c:	01120300 	.inst	0x01120300 ; undefined
    a780:	000005c4 	.inst	0x000005c4 ; undefined
    a784:	00254110 	.inst	0x00254110 ; NYI
    a788:	37650100 	tbnz	w0, #12, 47a8 <_stack_size+0x37a8>
    a78c:	01000000 	.inst	0x01000000 ; undefined
    a790:	00000661 	.inst	0x00000661 ; undefined
    a794:	00686311 	.inst	0x00686311 ; undefined
    a798:	06616501 	.inst	0x06616501 ; undefined
    a79c:	12000000 	and	w0, w0, #0x1
    a7a0:	00004508 	.inst	0x00004508 ; undefined
    a7a4:	26c51300 	.inst	0x26c51300 ; undefined
    a7a8:	32010000 	orr	w0, w0, #0x80000000
    a7ac:	00000037 	.inst	0x00000037 ; undefined
    a7b0:	030061d4 	.inst	0x030061d4 ; undefined
    a7b4:	00000000 	.inst	0x00000000 ; undefined
    a7b8:	0000009c 	.inst	0x0000009c ; undefined
    a7bc:	00000000 	.inst	0x00000000 ; undefined
    a7c0:	06ec9c01 	.inst	0x06ec9c01 ; undefined
    a7c4:	b0140000 	adrp	x0, 2800b000 <_stack_base+0x24ffd880>
    a7c8:	01000024 	.inst	0x01000024 ; undefined
    a7cc:	00003732 	.inst	0x00003732 ; undefined
    a7d0:	00a0e800 	.inst	0x00a0e800 ; undefined
    a7d4:	251b1500 	.inst	0x251b1500 ; undefined
    a7d8:	32010000 	orr	w0, w0, #0x80000000
    a7dc:	000006ec 	.inst	0x000006ec ; undefined
    a7e0:	63165101 	.inst	0x63165101 ; undefined
    a7e4:	34010068 	cbz	w8, c7f0 <_stack_size+0xb7f0>
    a7e8:	00000045 	.inst	0x00000045 ; undefined
    a7ec:	70165701 	adr	x1, 372cf <_stack_size+0x362cf>
    a7f0:	01006477 	.inst	0x01006477 ; undefined
    a7f4:	0006f235 	.inst	0x0006f235 ; undefined
    a7f8:	70910200 	adr	x0, fffffffffff2c83b <SMC_ID_HW_RSA+0xffffffff7bf1c934>
    a7fc:	01006917 	.inst	0x01006917 ; undefined
    a800:	00003736 	.inst	0x00003736 ; undefined
    a804:	00a14a00 	.inst	0x00a14a00 ; undefined
    a808:	06461800 	.inst	0x06461800 ; undefined
    a80c:	62080000 	.inst	0x62080000 ; undefined
    a810:	00000300 	.inst	0x00000300 ; undefined
    a814:	0da00000 	st2	{v0.b, v1.b}[0], [x0], x0
    a818:	3a010000 	adcs	w0, w0, w1
    a81c:	00065619 	.inst	0x00065619 ; undefined
    a820:	e2f20600 	.inst	0xe2f20600 ; undefined
    a824:	000000a7 	.inst	0x000000a7 ; undefined
    a828:	08120000 	stxrb	w18, w0, [x0]
    a82c:	0000006c 	.inst	0x0000006c ; undefined
    a830:	0000451a 	.inst	0x0000451a ; undefined
    a834:	00070200 	.inst	0x00070200 ; undefined
    a838:	07021b00 	.inst	0x07021b00 ; undefined
    a83c:	000a0000 	.inst	0x000a0000 ; undefined
    a840:	9d070802 	.inst	0x9d070802 ; undefined
    a844:	13000005 	sbfx	w5, w0, #0, #1
    a848:	000026d2 	.inst	0x000026d2 ; undefined
    a84c:	00374b01 	.inst	0x00374b01 ; NYI
    a850:	62700000 	.inst	0x62700000 ; undefined
    a854:	00000300 	.inst	0x00000300 ; undefined
    a858:	009c0000 	.inst	0x009c0000 ; undefined
    a85c:	00000000 	.inst	0x00000000 ; undefined
    a860:	9c010000 	ldr	q0, c860 <_stack_size+0xb860>
    a864:	0000078e 	.inst	0x0000078e ; undefined
    a868:	0024b014 	.inst	0x0024b014 ; NYI
    a86c:	374b0100 	tbnz	w0, #9, 1088c <_stack_size+0xf88c>
    a870:	a6000000 	.inst	0xa6000000 ; undefined
    a874:	150000a1 	b	400aaf8 <_stack_base+0xffd378>
    a878:	0000251b 	.inst	0x0000251b ; undefined
    a87c:	06ec4b01 	.inst	0x06ec4b01 ; undefined
    a880:	51010000 	sub	w0, w0, #0x40
    a884:	00686316 	.inst	0x00686316 ; undefined
    a888:	00454d01 	.inst	0x00454d01 ; undefined
    a88c:	57010000 	.inst	0x57010000 ; undefined
    a890:	64777016 	.inst	0x64777016 ; undefined
    a894:	f24e0100 	ands	x0, x8, #0x4000000000000
    a898:	02000006 	.inst	0x02000006 ; undefined
    a89c:	69177091 	.inst	0x69177091 ; undefined
    a8a0:	374f0100 	tbnz	w0, #9, 88c0 <_stack_size+0x78c0>
    a8a4:	08000000 	stxrb	w0, w0, [x0]
    a8a8:	180000a2 	ldr	w2, a8bc <_stack_size+0x98bc>
    a8ac:	00000646 	.inst	0x00000646 ; undefined
    a8b0:	030062a4 	.inst	0x030062a4 ; undefined
    a8b4:	00000000 	.inst	0x00000000 ; undefined
    a8b8:	00000dd0 	.inst	0x00000dd0 ; undefined
    a8bc:	56195301 	.inst	0x56195301 ; undefined
    a8c0:	06000006 	.inst	0x06000006 ; undefined
    a8c4:	00a884f2 	.inst	0x00a884f2 ; undefined
    a8c8:	00000000 	.inst	0x00000000 ; undefined
    a8cc:	0006461c 	.inst	0x0006461c ; undefined
    a8d0:	00630c00 	.inst	0x00630c00 ; undefined
    a8d4:	00000003 	.inst	0x00000003 ; undefined
    a8d8:	00002800 	.inst	0x00002800 ; undefined
    a8dc:	00000000 	.inst	0x00000000 ; undefined
    a8e0:	b39c0100 	.inst	0xb39c0100 ; undefined
    a8e4:	1d000007 	.inst	0x1d000007 ; undefined
    a8e8:	00000656 	.inst	0x00000656 ; undefined
    a8ec:	0000a264 	.inst	0x0000a264 ; undefined
    a8f0:	25fd1e00 	.inst	0x25fd1e00 ; undefined
    a8f4:	1c010000 	ldr	s0, c8f4 <_stack_size+0xb8f4>
    a8f8:	000007be 	.inst	0x000007be ; undefined
    a8fc:	07c40812 	.inst	0x07c40812 ; undefined
    a900:	3a1f0000 	adcs	w0, w0, wzr
    a904:	00000006 	.inst	0x00000006 ; undefined
    a908:	000014a8 	.inst	0x000014a8 ; undefined
    a90c:	2abb0004 	orn	w4, w0, w27, asr #0
    a910:	01080000 	.inst	0x01080000 ; undefined
    a914:	00000189 	.inst	0x00000189 ; undefined
    a918:	0027e101 	.inst	0x0027e101 ; NYI
    a91c:	00034700 	.inst	0x00034700 ; undefined
    a920:	00633400 	.inst	0x00633400 ; undefined
    a924:	00000003 	.inst	0x00000003 ; undefined
    a928:	00183000 	.inst	0x00183000 ; undefined
    a92c:	00000000 	.inst	0x00000000 ; undefined
    a930:	00344f00 	.inst	0x00344f00 ; NYI
    a934:	06010200 	.inst	0x06010200 ; undefined
    a938:	00000100 	.inst	0x00000100 ; undefined
    a93c:	2b050202 	adds	w2, w16, w5
    a940:	03000000 	.inst	0x03000000 ; undefined
    a944:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    a948:	08020074 	stxrb	w2, w20, [x3]
    a94c:	0000a905 	.inst	0x0000a905 ; undefined
    a950:	08010200 	stxrb	w1, w0, [x16]
    a954:	000000fe 	.inst	0x000000fe ; undefined
    a958:	31070202 	adds	w2, w16, #0x1c0
    a95c:	02000001 	.inst	0x02000001 ; undefined
    a960:	01160704 	.inst	0x01160704 ; undefined
    a964:	08020000 	stxrb	w2, w0, [x0]
    a968:	00011107 	.inst	0x00011107 ; undefined
    a96c:	00850400 	.inst	0x00850400 ; undefined
    a970:	7a020000 	sbcs	w0, w0, w2
    a974:	0000005e 	.inst	0x0000005e ; undefined
    a978:	00060404 	.inst	0x00060404 ; undefined
    a97c:	490d0300 	.inst	0x490d0300 ; undefined
    a980:	04000000 	.inst	0x04000000 ; undefined
    a984:	0000003f 	.inst	0x0000003f ; undefined
    a988:	00571103 	.inst	0x00571103 ; undefined
    a98c:	f5040000 	.inst	0xf5040000 ; undefined
    a990:	03000002 	.inst	0x03000002 ; undefined
    a994:	00009113 	.inst	0x00009113 ; undefined
    a998:	07080200 	.inst	0x07080200 ; undefined
    a99c:	0000010c 	.inst	0x0000010c ; undefined
    a9a0:	a4050802 	.inst	0xa4050802 ; undefined
    a9a4:	04000000 	.inst	0x04000000 ; undefined
    a9a8:	00002296 	.inst	0x00002296 ; undefined
    a9ac:	00701503 	.inst	0x00701503 ; undefined
    a9b0:	c1050000 	.inst	0xc1050000 ; undefined
    a9b4:	ba000000 	adcs	x0, x0, x0
    a9b8:	06000000 	.inst	0x06000000 ; undefined
    a9bc:	000000ba 	.inst	0x000000ba ; undefined
    a9c0:	08020007 	stxrb	w2, w7, [x0]
    a9c4:	00059d07 	.inst	0x00059d07 ; undefined
    a9c8:	08010200 	stxrb	w1, w0, [x16]
    a9cc:	00000107 	.inst	0x00000107 ; undefined
    a9d0:	6b080807 	subs	w7, w0, w8, lsl #2
    a9d4:	01000027 	.inst	0x01000027 ; undefined
    a9d8:	00f8014f 	.inst	0x00f8014f ; undefined
    a9dc:	a5090000 	.inst	0xa5090000 ; undefined
    a9e0:	0100000a 	.inst	0x0100000a ; undefined
    a9e4:	0000f84f 	.inst	0x0000f84f ; undefined
    a9e8:	09790900 	.inst	0x09790900 ; undefined
    a9ec:	4f010000 	.inst	0x4f010000 ; undefined
    a9f0:	000000f8 	.inst	0x000000f8 ; undefined
    a9f4:	001e3409 	.inst	0x001e3409 ; undefined
    a9f8:	f84f0100 	ldur	x0, [x8,#240]
    a9fc:	00000000 	.inst	0x00000000 ; undefined
    aa00:	0000570a 	.inst	0x0000570a ; undefined
    aa04:	29cb0b00 	ldp	w0, w2, [x24,#88]!
    aa08:	d3010000 	.inst	0xd3010000 ; undefined
    aa0c:	7a0c0103 	sbcs	w3, w8, w12
    aa10:	01000016 	.inst	0x01000016 ; undefined
    aa14:	003b03f8 	.inst	0x003b03f8 ; NYI
    aa18:	30010000 	adr	x0, ca19 <_stack_size+0xba19>
    aa1c:	0d000001 	st1	{v1.b}[0], [x0]
    aa20:	000015bb 	.inst	0x000015bb ; undefined
    aa24:	7b03f801 	.inst	0x7b03f801 ; undefined
    aa28:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    aa2c:	00002aac 	.inst	0x00002aac ; undefined
    aa30:	7b03fa01 	.inst	0x7b03fa01 ; undefined
    aa34:	00000000 	.inst	0x00000000 ; undefined
    aa38:	0028620f 	.inst	0x0028620f ; NYI
    aa3c:	04040100 	.inst	0x04040100 ; undefined
    aa40:	0000009f 	.inst	0x0000009f ; undefined
    aa44:	03006334 	.inst	0x03006334 ; undefined
    aa48:	00000000 	.inst	0x00000000 ; undefined
    aa4c:	000000a8 	.inst	0x000000a8 ; undefined
    aa50:	00000000 	.inst	0x00000000 ; undefined
    aa54:	01d89c01 	.inst	0x01d89c01 ; undefined
    aa58:	74100000 	.inst	0x74100000 ; undefined
    aa5c:	0100706d 	.inst	0x0100706d ; undefined
    aa60:	00570406 	.inst	0x00570406 ; undefined
    aa64:	a29a0000 	.inst	0xa29a0000 ; undefined
    aa68:	58110000 	ldr	x0, 2ca68 <_stack_size+0x2ba68>
    aa6c:	00030063 	.inst	0x00030063 ; undefined
    aa70:	0f000000 	.inst	0x0f000000 ; undefined
    aa74:	7e000014 	.inst	0x7e000014 ; undefined
    aa78:	12000001 	and	w1, w0, #0x1
    aa7c:	30015001 	adr	x1, d47d <_stack_size+0xc47d>
    aa80:	01510112 	.inst	0x01510112 ; undefined
    aa84:	6c110031 	stnp	d17, d0, [x1,#272]
    aa88:	00030063 	.inst	0x00030063 ; undefined
    aa8c:	25000000 	.inst	0x25000000 ; undefined
    aa90:	9d000014 	.inst	0x9d000014 ; undefined
    aa94:	12000001 	and	w1, w0, #0x1
    aa98:	03095001 	.inst	0x03095001 ; undefined
    aa9c:	0300a1d0 	.inst	0x0300a1d0 ; undefined
    aaa0:	00000000 	.inst	0x00000000 ; undefined
    aaa4:	63b01100 	.inst	0x63b01100 ; undefined
    aaa8:	00000300 	.inst	0x00000300 ; undefined
    aaac:	14250000 	b	94aaac <_stack_size+0x949aac>
    aab0:	01bc0000 	.inst	0x01bc0000 ; undefined
    aab4:	01120000 	.inst	0x01120000 ; undefined
    aab8:	08030950 	stxrb	w3, w16, [x10]
    aabc:	000300a2 	.inst	0x000300a2 ; undefined
    aac0:	00000000 	.inst	0x00000000 ; undefined
    aac4:	0063cc13 	.inst	0x0063cc13 ; undefined
    aac8:	00000003 	.inst	0x00000003 ; undefined
    aacc:	00143b00 	.inst	0x00143b00 ; undefined
    aad0:	50011200 	adr	x0, cd12 <_stack_size+0xbd12>
    aad4:	a1f80309 	.inst	0xa1f80309 ; undefined
    aad8:	00000300 	.inst	0x00000300 ; undefined
    aadc:	00000000 	.inst	0x00000000 ; undefined
    aae0:	0000ca14 	.inst	0x0000ca14 ; undefined
    aae4:	0063dc00 	.inst	0x0063dc00 ; undefined
    aae8:	00000003 	.inst	0x00000003 ; undefined
    aaec:	00001800 	.inst	0x00001800 ; undefined
    aaf0:	00000000 	.inst	0x00000000 ; undefined
    aaf4:	099c0100 	.inst	0x099c0100 ; undefined
    aaf8:	15000002 	b	400ab00 <_stack_base+0xffd380>
    aafc:	000000d6 	.inst	0x000000d6 ; undefined
    ab00:	e1155001 	.inst	0xe1155001 ; undefined
    ab04:	01000000 	.inst	0x01000000 ; undefined
    ab08:	00ec1551 	.inst	0x00ec1551 ; undefined
    ab0c:	52010000 	eor	w0, w0, #0x80000000
    ab10:	13241600 	.inst	0x13241600 ; undefined
    ab14:	55010000 	.inst	0x55010000 ; undefined
    ab18:	0000003b 	.inst	0x0000003b ; undefined
    ab1c:	030063f4 	.inst	0x030063f4 ; undefined
    ab20:	00000000 	.inst	0x00000000 ; undefined
    ab24:	00000074 	.inst	0x00000074 ; undefined
    ab28:	00000000 	.inst	0x00000000 ; undefined
    ab2c:	028a9c01 	.inst	0x028a9c01 ; undefined
    ab30:	a5170000 	.inst	0xa5170000 ; undefined
    ab34:	0100000a 	.inst	0x0100000a ; undefined
    ab38:	0000f855 	.inst	0x0000f855 ; undefined
    ab3c:	00a2e800 	.inst	0x00a2e800 ; undefined
    ab40:	09791800 	.inst	0x09791800 ; undefined
    ab44:	55010000 	.inst	0x55010000 ; undefined
    ab48:	000000f8 	.inst	0x000000f8 ; undefined
    ab4c:	34185101 	cbz	w1, 3b56c <_stack_size+0x3a56c>
    ab50:	0100001e 	.inst	0x0100001e ; undefined
    ab54:	0000f856 	.inst	0x0000f856 ; undefined
    ab58:	17520100 	b	fffffffffd48af58 <SMC_ID_HW_RSA+0xffffffff7947b051>
    ab5c:	00000b4b 	.inst	0x00000b4b ; undefined
    ab60:	00575601 	.inst	0x00575601 ; undefined
    ab64:	a3210000 	.inst	0xa3210000 ; undefined
    ab68:	ca190000 	eor	x0, x0, x25
    ab6c:	14000000 	b	ab6c <_stack_size+0x9b6c>
    ab70:	00030064 	.inst	0x00030064 ; undefined
    ab74:	24000000 	.inst	0x24000000 ; undefined
    ab78:	00000000 	.inst	0x00000000 ; undefined
    ab7c:	01000000 	.inst	0x01000000 ; undefined
    ab80:	00ec1a59 	.inst	0x00ec1a59 ; undefined
    ab84:	e11a0000 	.inst	0xe11a0000 ; undefined
    ab88:	1a000000 	adc	w0, w0, w0
    ab8c:	000000d6 	.inst	0x000000d6 ; undefined
    ab90:	a51b0000 	.inst	0xa51b0000 ; undefined
    ab94:	01000025 	.inst	0x01000025 ; undefined
    ab98:	00646864 	.inst	0x00646864 ; undefined
    ab9c:	00000003 	.inst	0x00000003 ; undefined
    aba0:	00002c00 	.inst	0x00002c00 ; undefined
    aba4:	00000000 	.inst	0x00000000 ; undefined
    aba8:	b79c0100 	tbnz	x0, #51, 2bc8 <_stack_size+0x1bc8>
    abac:	17000002 	b	fffffffffc00abb4 <SMC_ID_HW_RSA+0xffffffff77ffacad>
    abb0:	0000239e 	.inst	0x0000239e ; undefined
    abb4:	00576401 	.inst	0x00576401 ; undefined
    abb8:	a36d0000 	.inst	0xa36d0000 ; undefined
    abbc:	1b000000 	madd	w0, w0, w0, w0
    abc0:	00002893 	.inst	0x00002893 ; undefined
    abc4:	64946a01 	.inst	0x64946a01 ; undefined
    abc8:	00000300 	.inst	0x00000300 ; undefined
    abcc:	00180000 	.inst	0x00180000 ; undefined
    abd0:	00000000 	.inst	0x00000000 ; undefined
    abd4:	9c010000 	ldr	q0, cbd4 <_stack_size+0xbbd4>
    abd8:	00000300 	.inst	0x00000300 ; undefined
    abdc:	000aa518 	.inst	0x000aa518 ; undefined
    abe0:	f86a0100 	ldaddl	x10, x0, [x8]
    abe4:	01000000 	.inst	0x01000000 ; undefined
    abe8:	278a1750 	.inst	0x278a1750 ; undefined
    abec:	6a010000 	ands	w0, w0, w1
    abf0:	000000f8 	.inst	0x000000f8 ; undefined
    abf4:	0000a3b7 	.inst	0x0000a3b7 ; undefined
    abf8:	0028a217 	.inst	0x0028a217 ; NYI
    abfc:	f86b0100 	ldaddl	x11, x0, [x8]
    ac00:	f0000000 	adrp	x0, d000 <_stack_size+0xc000>
    ac04:	000000a3 	.inst	0x000000a3 ; undefined
    ac08:	0028ac16 	.inst	0x0028ac16 ; NYI
    ac0c:	7b700100 	.inst	0x7b700100 ; undefined
    ac10:	ac000000 	stnp	q0, q0, [x0]
    ac14:	00030064 	.inst	0x00030064 ; undefined
    ac18:	40000000 	.inst	0x40000000 ; undefined
    ac1c:	00000000 	.inst	0x00000000 ; undefined
    ac20:	01000000 	.inst	0x01000000 ; undefined
    ac24:	0003319c 	.inst	0x0003319c ; undefined
    ac28:	61761c00 	.inst	0x61761c00 ; undefined
    ac2c:	7001006c 	adr	x12, cc3b <_stack_size+0xbc3b>
    ac30:	00000331 	.inst	0x00000331 ; undefined
    ac34:	0000a429 	.inst	0x0000a429 ; undefined
    ac38:	007b1d00 	.inst	0x007b1d00 ; undefined
    ac3c:	461e0000 	.inst	0x461e0000 ; undefined
    ac40:	01000029 	.inst	0x01000029 ; undefined
    ac44:	0064ec85 	.inst	0x0064ec85 ; undefined
    ac48:	00000003 	.inst	0x00000003 ; undefined
    ac4c:	00008c00 	.inst	0x00008c00 ; undefined
    ac50:	00000000 	.inst	0x00000000 ; undefined
    ac54:	ad9c0100 	stp	q0, q0, [x8,#896]!
    ac58:	1f000003 	fmadd	s3, s0, s0, s0
    ac5c:	000028d3 	.inst	0x000028d3 ; undefined
    ac60:	007b8701 	.inst	0x007b8701 ; undefined
    ac64:	a4760000 	.inst	0xa4760000 ; undefined
    ac68:	da200000 	.inst	0xda200000 ; undefined
    ac6c:	01000028 	.inst	0x01000028 ; undefined
    ac70:	00007b87 	.inst	0x00007b87 ; undefined
    ac74:	69210000 	.inst	0x69210000 ; undefined
    ac78:	7b880100 	.inst	0x7b880100 ; undefined
    ac7c:	ae000000 	.inst	0xae000000 ; undefined
    ac80:	200000a4 	.inst	0x200000a4 ; undefined
    ac84:	00002331 	.inst	0x00002331 ; undefined
    ac88:	007b8901 	.inst	0x007b8901 ; undefined
    ac8c:	22000000 	.inst	0x22000000 ; undefined
    ac90:	000000dc 	.inst	0x000000dc ; undefined
    ac94:	00578a01 	.inst	0x00578a01 ; undefined
    ac98:	20230000 	.inst	0x20230000 ; undefined
    ac9c:	00030065 	.inst	0x00030065 ; undefined
    aca0:	0f000000 	.inst	0x0f000000 ; undefined
    aca4:	23000014 	.inst	0x23000014 ; undefined
    aca8:	03006560 	.inst	0x03006560 ; undefined
    acac:	00000000 	.inst	0x00000000 ; undefined
    acb0:	00001454 	.inst	0x00001454 ; undefined
    acb4:	27591b00 	.inst	0x27591b00 ; undefined
    acb8:	cd010000 	.inst	0xcd010000 ; undefined
    acbc:	03006578 	.inst	0x03006578 ; undefined
    acc0:	00000000 	.inst	0x00000000 ; undefined
    acc4:	00000548 	.inst	0x00000548 ; undefined
    acc8:	00000000 	.inst	0x00000000 ; undefined
    accc:	05579c01 	.inst	0x05579c01 ; undefined
    acd0:	a6170000 	.inst	0xa6170000 ; undefined
    acd4:	01000029 	.inst	0x01000029 ; undefined
    acd8:	000557cd 	.inst	0x000557cd ; undefined
    acdc:	00a51a00 	.inst	0x00a51a00 ; undefined
    ace0:	293e1700 	stp	w0, w5, [x24,#-16]
    ace4:	cd010000 	.inst	0xcd010000 ; undefined
    ace8:	00000557 	.inst	0x00000557 ; undefined
    acec:	0000a579 	.inst	0x0000a579 ; undefined
    acf0:	0029f717 	.inst	0x0029f717 ; NYI
    acf4:	57cd0100 	.inst	0x57cd0100 ; undefined
    acf8:	d8000000 	prfm	pldl1keep, acf8 <_stack_size+0x9cf8>
    acfc:	240000a5 	.inst	0x240000a5 ; undefined
    ad00:	d8010069 	prfm	plil1strm, cd0c <_stack_size+0xbd0c>
    ad04:	0000055d 	.inst	0x0000055d ; undefined
    ad08:	7fac9103 	fmulx	s3, s8, v12.s[1]
    ad0c:	706d7424 	adr	x4, e5b93 <_stack_size+0xe4b93>
    ad10:	5dd80100 	.inst	0x5dd80100 ; undefined
    ad14:	03000005 	.inst	0x03000005 ; undefined
    ad18:	257fb091 	.inst	0x257fb091 ; undefined
    ad1c:	000029c2 	.inst	0x000029c2 ; undefined
    ad20:	055dd801 	.inst	0x055dd801 ; undefined
    ad24:	91030000 	add	x0, x0, #0xc0
    ad28:	55257fb4 	.inst	0x55257fb4 ; undefined
    ad2c:	01000029 	.inst	0x01000029 ; undefined
    ad30:	00055dd8 	.inst	0x00055dd8 ; undefined
    ad34:	b8910300 	ldursw	x0, [x24,#-240]
    ad38:	2846257f 	ldnp	wzr, w9, [x11,#48]
    ad3c:	d9010000 	.inst	0xd9010000 ; undefined
    ad40:	00000562 	.inst	0x00000562 ; undefined
    ad44:	7fbc9103 	fmulx	s3, s8, v28.s[1]
    ad48:	00291e25 	.inst	0x00291e25 ; NYI
    ad4c:	62d90100 	.inst	0x62d90100 ; undefined
    ad50:	02000005 	.inst	0x02000005 ; undefined
    ad54:	36254091 	tbz	w17, #4, 5564 <_stack_size+0x4564>
    ad58:	01000029 	.inst	0x01000029 ; undefined
    ad5c:	000562da 	.inst	0x000562da ; undefined
    ad60:	44910200 	.inst	0x44910200 ; undefined
    ad64:	00297325 	.inst	0x00297325 ; NYI
    ad68:	62da0100 	.inst	0x62da0100 ; undefined
    ad6c:	02000005 	.inst	0x02000005 ; undefined
    ad70:	7c254891 	str	h17, [x4,w5,uxtw]
    ad74:	01000029 	.inst	0x01000029 ; undefined
    ad78:	000562da 	.inst	0x000562da ; undefined
    ad7c:	4c910200 	st4	{v0.16b-v3.16b}, [x16], x17
    ad80:	00298525 	.inst	0x00298525 ; NYI
    ad84:	62da0100 	.inst	0x62da0100 ; undefined
    ad88:	02000005 	.inst	0x02000005 ; undefined
    ad8c:	58255091 	ldr	x17, 5579c <_stack_size+0x5479c>
    ad90:	0100002a 	.inst	0x0100002a ; undefined
    ad94:	00055ddb 	.inst	0x00055ddb ; undefined
    ad98:	54910200 	b.eq	fffffffffff2cdd8 <SMC_ID_HW_RSA+0xffffffff7bf1ced1>
    ad9c:	002a7925 	.inst	0x002a7925 ; NYI
    ada0:	5ddb0100 	.inst	0x5ddb0100 ; undefined
    ada4:	02000005 	.inst	0x02000005 ; undefined
    ada8:	01255891 	.inst	0x01255891 ; undefined
    adac:	01000029 	.inst	0x01000029 ; undefined
    adb0:	000562dc 	.inst	0x000562dc ; undefined
    adb4:	5c910200 	ldr	d0, fffffffffff2cdf4 <SMC_ID_HW_RSA+0xffffffff7bf1ceed>
    adb8:	00277825 	.inst	0x00277825 ; NYI
    adbc:	62dc0100 	.inst	0x62dc0100 ; undefined
    adc0:	02000005 	.inst	0x02000005 ; undefined
    adc4:	81256091 	.inst	0x81256091 ; undefined
    adc8:	01000027 	.inst	0x01000027 ; undefined
    adcc:	000562dc 	.inst	0x000562dc ; undefined
    add0:	64910200 	.inst	0x64910200 ; undefined
    add4:	00290a25 	.inst	0x00290a25 ; NYI
    add8:	62dc0100 	.inst	0x62dc0100 ; undefined
    addc:	02000005 	.inst	0x02000005 ; undefined
    ade0:	95256891 	bl	4965024 <_stack_base+0x19578a4>
    ade4:	01000027 	.inst	0x01000027 ; undefined
    ade8:	000562dd 	.inst	0x000562dd ; undefined
    adec:	6c910200 	stp	d0, d0, [x16],#272
    adf0:	00279e25 	.inst	0x00279e25 ; NYI
    adf4:	62dd0100 	.inst	0x62dd0100 ; undefined
    adf8:	02000005 	.inst	0x02000005 ; undefined
    adfc:	a7257091 	.inst	0xa7257091 ; undefined
    ae00:	01000027 	.inst	0x01000027 ; undefined
    ae04:	000562dd 	.inst	0x000562dd ; undefined
    ae08:	74910200 	.inst	0x74910200 ; undefined
    ae0c:	0027b025 	.inst	0x0027b025 ; NYI
    ae10:	62dd0100 	.inst	0x62dd0100 ; undefined
    ae14:	02000005 	.inst	0x02000005 ; undefined
    ae18:	4a257891 	eon	w17, w4, w5, lsl #30
    ae1c:	0100002a 	.inst	0x0100002a ; undefined
    ae20:	000562de 	.inst	0x000562de ; undefined
    ae24:	7c910200 	.inst	0x7c910200 ; undefined
    ae28:	002a8626 	.inst	0x002a8626 ; NYI
    ae2c:	70f70100 	adr	x0, ffffffffffff8e4f <SMC_ID_HW_RSA+0xffffffff7bfe8f48>
    ae30:	00030066 	.inst	0x00030066 ; undefined
    ae34:	23000000 	.inst	0x23000000 ; undefined
    ae38:	0300664c 	.inst	0x0300664c ; undefined
    ae3c:	00000000 	.inst	0x00000000 ; undefined
    ae40:	0000145b 	.inst	0x0000145b ; undefined
    ae44:	0066f423 	.inst	0x0066f423 ; undefined
    ae48:	00000003 	.inst	0x00000003 ; undefined
    ae4c:	00145b00 	.inst	0x00145b00 ; undefined
    ae50:	68282300 	.inst	0x68282300 ; undefined
    ae54:	00000300 	.inst	0x00000300 ; undefined
    ae58:	145b0000 	b	16cae58 <MPIDR_EL1_MT+0x6cae58>
    ae5c:	27000000 	.inst	0x27000000 ; undefined
    ae60:	00003b08 	.inst	0x00003b08 ; undefined
    ae64:	003b1d00 	.inst	0x003b1d00 ; NYI
    ae68:	571d0000 	.inst	0x571d0000 ; undefined
    ae6c:	28000000 	stnp	w0, w0, [x0]
    ae70:	00002a18 	.inst	0x00002a18 ; undefined
    ae74:	c0018101 	.inst	0xc0018101 ; undefined
    ae78:	0003006a 	.inst	0x0003006a ; undefined
    ae7c:	48000000 	stxrh	w0, w0, [x0]
    ae80:	00000005 	.inst	0x00000005 ; undefined
    ae84:	01000000 	.inst	0x01000000 ; undefined
    ae88:	00072b9c 	.inst	0x00072b9c ; undefined
    ae8c:	29ec2900 	ldp	w0, w10, [x8,#-160]!
    ae90:	81010000 	.inst	0x81010000 ; undefined
    ae94:	00055701 	.inst	0x00055701 ; undefined
    ae98:	00a63700 	.inst	0x00a63700 ; undefined
    ae9c:	2a702900 	orn	w0, w8, w16, lsr #10
    aea0:	81010000 	.inst	0x81010000 ; undefined
    aea4:	00055701 	.inst	0x00055701 ; undefined
    aea8:	00a69600 	.inst	0x00a69600 ; undefined
    aeac:	29f72900 	ldp	w0, w10, [x8,#-72]!
    aeb0:	81010000 	.inst	0x81010000 ; undefined
    aeb4:	00005701 	.inst	0x00005701 ; undefined
    aeb8:	00a6f500 	.inst	0x00a6f500 ; undefined
    aebc:	00692a00 	.inst	0x00692a00 ; undefined
    aec0:	5d018c01 	.inst	0x5d018c01 ; undefined
    aec4:	03000005 	.inst	0x03000005 ; undefined
    aec8:	2a7fac91 	.inst	0x2a7fac91 ; undefined
    aecc:	00706d74 	.inst	0x00706d74 ; undefined
    aed0:	5d018c01 	.inst	0x5d018c01 ; undefined
    aed4:	03000005 	.inst	0x03000005 ; undefined
    aed8:	2b7fb091 	.inst	0x2b7fb091 ; undefined
    aedc:	000029c2 	.inst	0x000029c2 ; undefined
    aee0:	5d018c01 	.inst	0x5d018c01 ; undefined
    aee4:	03000005 	.inst	0x03000005 ; undefined
    aee8:	2b7fb491 	.inst	0x2b7fb491 ; undefined
    aeec:	00002955 	.inst	0x00002955 ; undefined
    aef0:	5d018c01 	.inst	0x5d018c01 ; undefined
    aef4:	03000005 	.inst	0x03000005 ; undefined
    aef8:	2b7fb891 	.inst	0x2b7fb891 ; undefined
    aefc:	00002846 	.inst	0x00002846 ; undefined
    af00:	62018d01 	.inst	0x62018d01 ; undefined
    af04:	03000005 	.inst	0x03000005 ; undefined
    af08:	2b7fbc91 	.inst	0x2b7fbc91 ; undefined
    af0c:	0000291e 	.inst	0x0000291e ; undefined
    af10:	62018d01 	.inst	0x62018d01 ; undefined
    af14:	02000005 	.inst	0x02000005 ; undefined
    af18:	362b4091 	tbz	w17, #5, 11728 <_stack_size+0x10728>
    af1c:	01000029 	.inst	0x01000029 ; undefined
    af20:	0562018e 	.inst	0x0562018e ; undefined
    af24:	91020000 	add	x0, x0, #0x80
    af28:	29732b44 	ldp	w4, w10, [x26,#-104]
    af2c:	8e010000 	.inst	0x8e010000 ; undefined
    af30:	00056201 	.inst	0x00056201 ; undefined
    af34:	48910200 	.inst	0x48910200 ; undefined
    af38:	00297c2b 	.inst	0x00297c2b ; NYI
    af3c:	018e0100 	.inst	0x018e0100 ; undefined
    af40:	00000562 	.inst	0x00000562 ; undefined
    af44:	2b4c9102 	.inst	0x2b4c9102 ; undefined
    af48:	00002985 	.inst	0x00002985 ; undefined
    af4c:	62018e01 	.inst	0x62018e01 ; undefined
    af50:	02000005 	.inst	0x02000005 ; undefined
    af54:	f52b5091 	.inst	0xf52b5091 ; undefined
    af58:	01000028 	.inst	0x01000028 ; undefined
    af5c:	055d018f 	.inst	0x055d018f ; undefined
    af60:	91020000 	add	x0, x0, #0x80
    af64:	28c52b54 	ldp	w20, w10, [x26],#40
    af68:	8f010000 	.inst	0x8f010000 ; undefined
    af6c:	00055d01 	.inst	0x00055d01 ; undefined
    af70:	58910200 	ldr	x0, fffffffffff2cfb0 <SMC_ID_HW_RSA+0xffffffff7bf1d0a9>
    af74:	0029012b 	.inst	0x0029012b ; NYI
    af78:	01900100 	.inst	0x01900100 ; undefined
    af7c:	00000562 	.inst	0x00000562 ; undefined
    af80:	2b5c9102 	.inst	0x2b5c9102 ; undefined
    af84:	00002778 	.inst	0x00002778 ; undefined
    af88:	62019001 	.inst	0x62019001 ; undefined
    af8c:	02000005 	.inst	0x02000005 ; undefined
    af90:	812b6091 	.inst	0x812b6091 ; undefined
    af94:	01000027 	.inst	0x01000027 ; undefined
    af98:	05620190 	.inst	0x05620190 ; undefined
    af9c:	91020000 	add	x0, x0, #0x80
    afa0:	290a2b64 	stp	w4, w10, [x27,#80]
    afa4:	90010000 	adrp	x0, 200a000 <MPIDR_EL1_MT+0x100a000>
    afa8:	00056201 	.inst	0x00056201 ; undefined
    afac:	68910200 	.inst	0x68910200 ; undefined
    afb0:	0027952b 	.inst	0x0027952b ; NYI
    afb4:	01910100 	.inst	0x01910100 ; undefined
    afb8:	00000562 	.inst	0x00000562 ; undefined
    afbc:	2b6c9102 	.inst	0x2b6c9102 ; undefined
    afc0:	0000279e 	.inst	0x0000279e ; undefined
    afc4:	62019101 	.inst	0x62019101 ; undefined
    afc8:	02000005 	.inst	0x02000005 ; undefined
    afcc:	a72b7091 	.inst	0xa72b7091 ; undefined
    afd0:	01000027 	.inst	0x01000027 ; undefined
    afd4:	05620191 	.inst	0x05620191 ; undefined
    afd8:	91020000 	add	x0, x0, #0x80
    afdc:	27b02b74 	.inst	0x27b02b74 ; undefined
    afe0:	91010000 	add	x0, x0, #0x40
    afe4:	00056201 	.inst	0x00056201 ; undefined
    afe8:	78910200 	ldursh	x0, [x16,#-240]
    afec:	0028b72b 	.inst	0x0028b72b ; NYI
    aff0:	01920100 	.inst	0x01920100 ; undefined
    aff4:	00000562 	.inst	0x00000562 ; undefined
    aff8:	2c7c9102 	ldnp	s2, s4, [x8,#-28]
    affc:	00002a86 	.inst	0x00002a86 ; undefined
    b000:	b801ab01 	sttr	w1, [x24,#26]
    b004:	0003006b 	.inst	0x0003006b ; undefined
    b008:	23000000 	.inst	0x23000000 ; undefined
    b00c:	03006b94 	.inst	0x03006b94 ; undefined
    b010:	00000000 	.inst	0x00000000 ; undefined
    b014:	0000145b 	.inst	0x0000145b ; undefined
    b018:	006c3c23 	.inst	0x006c3c23 ; undefined
    b01c:	00000003 	.inst	0x00000003 ; undefined
    b020:	00145b00 	.inst	0x00145b00 ; undefined
    b024:	6d702300 	ldp	d0, d8, [x24,#-256]
    b028:	00000300 	.inst	0x00000300 ; undefined
    b02c:	145b0000 	b	16cb02c <MPIDR_EL1_MT+0x6cb02c>
    b030:	28000000 	stnp	w0, w0, [x0]
    b034:	000029da 	.inst	0x000029da ; undefined
    b038:	08022d01 	stxrb	w2, w1, [x8]
    b03c:	00030070 	.inst	0x00030070 ; undefined
    b040:	b0000000 	adrp	x0, c000 <_stack_size+0xb000>
    b044:	00000000 	.inst	0x00000000 ; undefined
    b048:	01000000 	.inst	0x01000000 ; undefined
    b04c:	00077a9c 	.inst	0x00077a9c ; undefined
    b050:	27c22900 	.inst	0x27c22900 ; undefined
    b054:	2d010000 	stp	s0, s0, [x0,#8]
    b058:	00007b02 	.inst	0x00007b02 ; undefined
    b05c:	00a75400 	.inst	0x00a75400 ; undefined
    b060:	29fe2d00 	ldp	w0, w11, [x8,#-16]!
    b064:	2f010000 	.inst	0x2f010000 ; undefined
    b068:	00007b02 	.inst	0x00007b02 ; undefined
    b06c:	00a7a000 	.inst	0x00a7a000 ; undefined
    b070:	29992d00 	stp	w0, w11, [x8,#200]!
    b074:	2f010000 	.inst	0x2f010000 ; undefined
    b078:	00007b02 	.inst	0x00007b02 ; undefined
    b07c:	00a7dd00 	.inst	0x00a7dd00 ; undefined
    b080:	532e0000 	.inst	0x532e0000 ; undefined
    b084:	01000028 	.inst	0x01000028 ; undefined
    b088:	70b80255 	adr	x21, fffffffffff7b0d3 <SMC_ID_HW_RSA+0xffffffff7bf6b1cc>
    b08c:	00000300 	.inst	0x00000300 ; undefined
    b090:	00840000 	.inst	0x00840000 ; undefined
    b094:	00000000 	.inst	0x00000000 ; undefined
    b098:	9c010000 	ldr	q0, d098 <_stack_size+0xc098>
    b09c:	000007d5 	.inst	0x000007d5 ; undefined
    b0a0:	00283b2f 	.inst	0x00283b2f ; NYI
    b0a4:	025a0100 	.inst	0x025a0100 ; undefined
    b0a8:	00000057 	.inst	0x00000057 ; undefined
    b0ac:	2b2f0100 	adds	w0, w8, w15, uxtb
    b0b0:	0100002a 	.inst	0x0100002a ; undefined
    b0b4:	0057025b 	.inst	0x0057025b ; undefined
    b0b8:	01000000 	.inst	0x01000000 ; undefined
    b0bc:	00288730 	.inst	0x00288730 ; NYI
    b0c0:	025d0100 	.inst	0x025d0100 ; undefined
    b0c4:	00000057 	.inst	0x00000057 ; undefined
    b0c8:	10000000 	adr	x0, b0c8 <_stack_size+0xa0c8>
    b0cc:	0027c730 	.inst	0x0027c730 ; NYI
    b0d0:	025f0100 	.inst	0x025f0100 ; undefined
    b0d4:	00000057 	.inst	0x00000057 ; undefined
    b0d8:	10000000 	adr	x0, b0d8 <_stack_size+0xa0d8>
    b0dc:	28e12e00 	ldp	w0, w11, [x16],#-248
    b0e0:	7e010000 	.inst	0x7e010000 ; undefined
    b0e4:	00713c02 	.inst	0x00713c02 ; undefined
    b0e8:	00000003 	.inst	0x00000003 ; undefined
    b0ec:	00009000 	.inst	0x00009000 ; undefined
    b0f0:	00000000 	.inst	0x00000000 ; undefined
    b0f4:	049c0100 	.inst	0x049c0100 ; undefined
    b0f8:	2d000008 	stp	s8, s0, [x0]
    b0fc:	00002743 	.inst	0x00002743 ; undefined
    b100:	57028001 	.inst	0x57028001 ; undefined
    b104:	27000000 	.inst	0x27000000 ; undefined
    b108:	000000a8 	.inst	0x000000a8 ; undefined
    b10c:	002a3831 	.inst	0x002a3831 ; NYI
    b110:	02ab0100 	.inst	0x02ab0100 ; undefined
    b114:	0000003b 	.inst	0x0000003b ; undefined
    b118:	030071cc 	.inst	0x030071cc ; undefined
    b11c:	00000000 	.inst	0x00000000 ; undefined
    b120:	00000030 	.inst	0x00000030 ; undefined
    b124:	00000000 	.inst	0x00000000 ; undefined
    b128:	08379c01 	.inst	0x08379c01 ; undefined
    b12c:	a5290000 	.inst	0xa5290000 ; undefined
    b130:	0100000a 	.inst	0x0100000a ; undefined
    b134:	00f802ab 	.inst	0x00f802ab ; undefined
    b138:	a85e0000 	ldnp	x0, x0, [x0,#480]
    b13c:	28000000 	stnp	w0, w0, [x0]
    b140:	00000c61 	.inst	0x00000c61 ; undefined
    b144:	fc032e01 	str	d1, [x16,#50]!
    b148:	00030071 	.inst	0x00030071 ; undefined
    b14c:	58000000 	ldr	x0, b14c <_stack_size+0xa14c>
    b150:	00000000 	.inst	0x00000000 ; undefined
    b154:	01000000 	.inst	0x01000000 ; undefined
    b158:	0008929c 	.inst	0x0008929c ; undefined
    b15c:	73643200 	.inst	0x73643200 ; undefined
    b160:	2e010074 	ext	v20.8b, v3.8b, v1.8b, #0
    b164:	0000c803 	.inst	0x0000c803 ; undefined
    b168:	00a8c100 	.inst	0x00a8c100 ; undefined
    b16c:	1e342900 	fadd	s0, s8, s20
    b170:	2e010000 	ext	v0.8b, v0.8b, v1.8b, #0
    b174:	00007b03 	.inst	0x00007b03 ; undefined
    b178:	00a92300 	.inst	0x00a92300 ; undefined
    b17c:	1f863300 	.inst	0x1f863300 ; undefined
    b180:	2e010000 	ext	v0.8b, v0.8b, v1.8b, #0
    b184:	00007b03 	.inst	0x00007b03 ; undefined
    b188:	10520100 	adr	x0, af1a8 <_stack_size+0xae1a8>
    b18c:	30010069 	adr	x9, d199 <_stack_size+0xc199>
    b190:	00007b03 	.inst	0x00007b03 ; undefined
    b194:	00a95c00 	.inst	0x00a95c00 ; undefined
    b198:	fd340000 	str	d0, [x0,#26624]
    b19c:	54000000 	b.eq	b19c <_stack_size+0xa19c>
    b1a0:	00030072 	.inst	0x00030072 ; undefined
    b1a4:	38000000 	sturb	w0, [x0]
    b1a8:	00000000 	.inst	0x00000000 ; undefined
    b1ac:	01000000 	.inst	0x01000000 ; undefined
    b1b0:	0106149c 	.inst	0x0106149c ; undefined
    b1b4:	728c0000 	movk	w0, #0x6000
    b1b8:	00000300 	.inst	0x00000300 ; undefined
    b1bc:	00080000 	.inst	0x00080000 ; undefined
    b1c0:	00000000 	.inst	0x00000000 ; undefined
    b1c4:	9c010000 	ldr	q0, d1c4 <_stack_size+0xc1c4>
    b1c8:	000008d7 	.inst	0x000008d7 ; undefined
    b1cc:	00011735 	.inst	0x00011735 ; undefined
    b1d0:	00a9da00 	.inst	0x00a9da00 ; undefined
    b1d4:	01233600 	.inst	0x01233600 ; undefined
    b1d8:	aa130000 	orr	x0, x0, x19
    b1dc:	28000000 	stnp	w0, w0, [x0]
    b1e0:	0000287a 	.inst	0x0000287a ; undefined
    b1e4:	94045001 	bl	11f1e8 <_stack_size+0x11e1e8>
    b1e8:	00030072 	.inst	0x00030072 ; undefined
    b1ec:	38000000 	sturb	w0, [x0]
    b1f0:	00000000 	.inst	0x00000000 ; undefined
    b1f4:	01000000 	.inst	0x01000000 ; undefined
    b1f8:	00090e9c 	.inst	0x00090e9c ; undefined
    b1fc:	00fd3700 	.inst	0x00fd3700 ; undefined
    b200:	72940000 	movk	w0, #0xa000
    b204:	00000300 	.inst	0x00000300 ; undefined
    b208:	00340000 	.inst	0x00340000 ; NYI
    b20c:	00000000 	.inst	0x00000000 ; undefined
    b210:	52010000 	eor	w0, w0, #0x80000000
    b214:	8a280004 	bic	x4, x0, x8
    b218:	01000003 	.inst	0x01000003 ; undefined
    b21c:	72cc042e 	.inst	0x72cc042e ; undefined
    b220:	00000300 	.inst	0x00000300 ; undefined
    b224:	007c0000 	.inst	0x007c0000 ; undefined
    b228:	00000000 	.inst	0x00000000 ; undefined
    b22c:	9c010000 	ldr	q0, d22c <_stack_size+0xc22c>
    b230:	0000099c 	.inst	0x0000099c ; undefined
    b234:	00292938 	.inst	0x00292938 ; NYI
    b238:	04300100 	.inst	0x04300100 ; undefined
    b23c:	00000943 	.inst	0x00000943 ; undefined
    b240:	00008639 	.inst	0x00008639 ; undefined
    b244:	00863900 	.inst	0x00863900 ; undefined
    b248:	11000000 	add	w0, w0, #0x0
    b24c:	030072e8 	.inst	0x030072e8 ; undefined
    b250:	00000000 	.inst	0x00000000 ; undefined
    b254:	00001425 	.inst	0x00001425 ; undefined
    b258:	00000962 	.inst	0x00000962 ; undefined
    b25c:	09500112 	.inst	0x09500112 ; undefined
    b260:	009bf803 	.inst	0x009bf803 ; undefined
    b264:	00000003 	.inst	0x00000003 ; undefined
    b268:	10230000 	adr	x0, 51268 <_stack_size+0x50268>
    b26c:	00030073 	.inst	0x00030073 ; undefined
    b270:	30000000 	adr	x0, b271 <_stack_size+0xa271>
    b274:	11000001 	add	w1, w0, #0x0
    b278:	03007328 	.inst	0x03007328 ; undefined
    b27c:	00000000 	.inst	0x00000000 ; undefined
    b280:	00001462 	.inst	0x00001462 ; undefined
    b284:	0000098e 	.inst	0x0000098e ; undefined
    b288:	09500112 	.inst	0x09500112 ; undefined
    b28c:	009c1003 	.inst	0x009c1003 ; undefined
    b290:	00000003 	.inst	0x00000003 ; undefined
    b294:	44230000 	.inst	0x44230000 ; undefined
    b298:	00030073 	.inst	0x00030073 ; undefined
    b29c:	d7000000 	.inst	0xd7000000 ; undefined
    b2a0:	00000008 	.inst	0x00000008 ; undefined
    b2a4:	00105231 	.inst	0x00105231 ; undefined
    b2a8:	02b80100 	.inst	0x02b80100 ; undefined
    b2ac:	0000007b 	.inst	0x0000007b ; undefined
    b2b0:	03007348 	.inst	0x03007348 ; undefined
    b2b4:	00000000 	.inst	0x00000000 ; undefined
    b2b8:	000000cc 	.inst	0x000000cc ; undefined
    b2bc:	00000000 	.inst	0x00000000 ; undefined
    b2c0:	0aee9c01 	.inst	0x0aee9c01 ; undefined
    b2c4:	73320000 	.inst	0x73320000 ; undefined
    b2c8:	b8010031 	stur	w17, [x1,#16]
    b2cc:	0000c802 	.inst	0x0000c802 ; undefined
    b2d0:	00aa8500 	.inst	0x00aa8500 ; undefined
    b2d4:	32733200 	.inst	0x32733200 ; undefined
    b2d8:	02b80100 	.inst	0x02b80100 ; undefined
    b2dc:	000000c8 	.inst	0x000000c8 ; undefined
    b2e0:	0000aae4 	.inst	0x0000aae4 ; undefined
    b2e4:	001f8629 	.inst	0x001f8629 ; undefined
    b2e8:	02b80100 	.inst	0x02b80100 ; undefined
    b2ec:	0000007b 	.inst	0x0000007b ; undefined
    b2f0:	0000ab43 	.inst	0x0000ab43 ; undefined
    b2f4:	01006910 	.inst	0x01006910 ; undefined
    b2f8:	005702ba 	.inst	0x005702ba ; undefined
    b2fc:	aba20000 	.inst	0xaba20000 ; undefined
    b300:	6a100000 	ands	w0, w0, w16
    b304:	02ba0100 	.inst	0x02ba0100 ; undefined
    b308:	00000057 	.inst	0x00000057 ; undefined
    b30c:	0000abc5 	.inst	0x0000abc5 ; undefined
    b310:	0100722a 	.inst	0x0100722a ; undefined
    b314:	005702ba 	.inst	0x005702ba ; undefined
    b318:	91020000 	add	x0, x0, #0x80
    b31c:	3170107c 	adds	w28, w3, #0xc04, lsl #12
    b320:	02bb0100 	.inst	0x02bb0100 ; undefined
    b324:	00000aee 	.inst	0x00000aee ; undefined
    b328:	0000ac10 	.inst	0x0000ac10 ; undefined
    b32c:	00327010 	.inst	0x00327010 ; NYI
    b330:	ee02bb01 	.inst	0xee02bb01 ; undefined
    b334:	4900000a 	.inst	0x4900000a ; undefined
    b338:	2d0000ac 	stp	s12, s0, [x5]
    b33c:	00000882 	.inst	0x00000882 ; undefined
    b340:	c102bc01 	.inst	0xc102bc01 ; undefined
    b344:	82000000 	.inst	0x82000000 ; undefined
    b348:	2d0000ac 	stp	s12, s0, [x5]
    b34c:	000027b9 	.inst	0x000027b9 ; undefined
    b350:	3b02be01 	.inst	0x3b02be01 ; undefined
    b354:	cd000000 	.inst	0xcd000000 ; undefined
    b358:	3a0000ac 	adcs	w12, w5, w0
    b35c:	0000179d 	.inst	0x0000179d ; undefined
    b360:	3b02cc01 	.inst	0x3b02cc01 ; undefined
    b364:	65000000 	.inst	0x65000000 ; undefined
    b368:	3b00000a 	.inst	0x3b00000a ; undefined
    b36c:	736c2300 	.inst	0x736c2300 ; undefined
    b370:	00000300 	.inst	0x00000300 ; undefined
    b374:	145b0000 	b	16cb374 <MPIDR_EL1_MT+0x6cb374>
    b378:	74110000 	.inst	0x74110000 ; undefined
    b37c:	00030073 	.inst	0x00030073 ; undefined
    b380:	74000000 	.inst	0x74000000 ; undefined
    b384:	8a000014 	and	x20, x0, x0
    b388:	1200000a 	and	w10, w0, #0x1
    b38c:	91025001 	add	x1, x0, #0x94
    b390:	e811007c 	.inst	0xe811007c ; undefined
    b394:	00030073 	.inst	0x00030073 ; undefined
    b398:	62000000 	.inst	0x62000000 ; undefined
    b39c:	a9000014 	stp	x20, x0, [x0]
    b3a0:	1200000a 	and	w10, w0, #0x1
    b3a4:	03095001 	.inst	0x03095001 ; undefined
    b3a8:	0300a218 	.inst	0x0300a218 ; undefined
    b3ac:	00000000 	.inst	0x00000000 ; undefined
    b3b0:	73f01100 	.inst	0x73f01100 ; undefined
    b3b4:	00000300 	.inst	0x00000300 ; undefined
    b3b8:	14860000 	b	218b3b8 <MPIDR_EL1_MT+0x118b3b8>
    b3bc:	0ac10000 	and	w0, w0, w1, ror #0
    b3c0:	01120000 	.inst	0x01120000 ; undefined
    b3c4:	00840250 	.inst	0x00840250 ; undefined
    b3c8:	73fc1100 	.inst	0x73fc1100 ; undefined
    b3cc:	00000300 	.inst	0x00000300 ; undefined
    b3d0:	14620000 	b	188b3d0 <MPIDR_EL1_MT+0x88b3d0>
    b3d4:	0ae00000 	bic	w0, w0, w0, ror #0
    b3d8:	01120000 	.inst	0x01120000 ; undefined
    b3dc:	58030950 	ldr	x16, 11504 <_stack_size+0x10504>
    b3e0:	0003009e 	.inst	0x0003009e ; undefined
    b3e4:	00000000 	.inst	0x00000000 ; undefined
    b3e8:	00741423 	.inst	0x00741423 ; undefined
    b3ec:	00000003 	.inst	0x00000003 ; undefined
    b3f0:	00090e00 	.inst	0x00090e00 ; undefined
    b3f4:	08270000 	.inst	0x08270000 ; undefined
    b3f8:	000000c1 	.inst	0x000000c1 ; undefined
    b3fc:	000cc631 	.inst	0x000cc631 ; undefined
    b400:	02ef0100 	.inst	0x02ef0100 ; undefined
    b404:	0000007b 	.inst	0x0000007b ; undefined
    b408:	03007414 	.inst	0x03007414 ; undefined
    b40c:	00000000 	.inst	0x00000000 ; undefined
    b410:	00000254 	.inst	0x00000254 ; undefined
    b414:	00000000 	.inst	0x00000000 ; undefined
    b418:	0dcf9c01 	.inst	0x0dcf9c01 ; undefined
    b41c:	64320000 	.inst	0x64320000 ; undefined
    b420:	01007473 	.inst	0x01007473 ; undefined
    b424:	00c802ef 	.inst	0x00c802ef ; undefined
    b428:	ad1a0000 	stp	q0, q0, [x0,#832]
    b42c:	73320000 	.inst	0x73320000 ; undefined
    b430:	01006372 	.inst	0x01006372 ; undefined
    b434:	00c802ef 	.inst	0x00c802ef ; undefined
    b438:	ad790000 	ldp	q0, q0, [x0,#-224]
    b43c:	86290000 	.inst	0x86290000 ; undefined
    b440:	0100001f 	.inst	0x0100001f ; undefined
    b444:	007b02ef 	.inst	0x007b02ef ; undefined
    b448:	ae270000 	.inst	0xae270000 ; undefined
    b44c:	692a0000 	.inst	0x692a0000 ; undefined
    b450:	02f10100 	.inst	0x02f10100 ; undefined
    b454:	00000562 	.inst	0x00000562 ; undefined
    b458:	2a749102 	.inst	0x2a749102 ; undefined
    b45c:	f101006a 	subs	x10, x3, #0x40
    b460:	00056202 	.inst	0x00056202 ; undefined
    b464:	78910200 	ldursh	x0, [x16,#-240]
    b468:	0100722a 	.inst	0x0100722a ; undefined
    b46c:	056202f1 	.inst	0x056202f1 ; undefined
    b470:	91020000 	add	x0, x0, #0x80
    b474:	74643c7c 	.inst	0x74643c7c ; undefined
    b478:	00000300 	.inst	0x00000300 ; undefined
    b47c:	002c0000 	.inst	0x002c0000 ; NYI
    b480:	00000000 	.inst	0x00000000 ; undefined
    b484:	0ba90000 	.inst	0x0ba90000 ; undefined
    b488:	9d3a0000 	.inst	0x9d3a0000 ; undefined
    b48c:	01000017 	.inst	0x01000017 ; undefined
    b490:	003b02cc 	.inst	0x003b02cc ; NYI
    b494:	0b940000 	add	w0, w0, w20, asr #0
    b498:	003b0000 	.inst	0x003b0000 ; NYI
    b49c:	00746c13 	.inst	0x00746c13 ; undefined
    b4a0:	00000003 	.inst	0x00000003 ; undefined
    b4a4:	00147400 	.inst	0x00147400 ; undefined
    b4a8:	50011200 	adr	x0, d6ea <_stack_size+0xc6ea>
    b4ac:	007c9102 	.inst	0x007c9102 ; undefined
    b4b0:	75a01100 	.inst	0x75a01100 ; undefined
    b4b4:	00000300 	.inst	0x00000300 ; undefined
    b4b8:	14620000 	b	188b4b8 <MPIDR_EL1_MT+0x88b4b8>
    b4bc:	0bc80000 	.inst	0x0bc80000 ; undefined
    b4c0:	01120000 	.inst	0x01120000 ; undefined
    b4c4:	78030950 	sttrh	w16, [x10,#48]
    b4c8:	000300a2 	.inst	0x000300a2 ; undefined
    b4cc:	00000000 	.inst	0x00000000 ; undefined
    b4d0:	0075ac11 	.inst	0x0075ac11 ; undefined
    b4d4:	00000003 	.inst	0x00000003 ; undefined
    b4d8:	00146200 	.inst	0x00146200 ; undefined
    b4dc:	000be700 	.inst	0x000be700 ; undefined
    b4e0:	50011200 	adr	x0, d722 <_stack_size+0xc722>
    b4e4:	a2480309 	.inst	0xa2480309 ; undefined
    b4e8:	00000300 	.inst	0x00000300 ; undefined
    b4ec:	11000000 	add	w0, w0, #0x0
    b4f0:	030075b4 	.inst	0x030075b4 ; undefined
    b4f4:	00000000 	.inst	0x00000000 ; undefined
    b4f8:	00001486 	.inst	0x00001486 ; undefined
    b4fc:	00000bff 	.inst	0x00000bff ; undefined
    b500:	02500112 	.inst	0x02500112 ; undefined
    b504:	11000086 	add	w6, w4, #0x0
    b508:	030075bc 	.inst	0x030075bc ; undefined
    b50c:	00000000 	.inst	0x00000000 ; undefined
    b510:	00001462 	.inst	0x00001462 ; undefined
    b514:	00000c17 	.inst	0x00000c17 ; undefined
    b518:	02500112 	.inst	0x02500112 ; undefined
    b51c:	11000088 	add	w8, w4, #0x0
    b520:	030075c8 	.inst	0x030075c8 ; undefined
    b524:	00000000 	.inst	0x00000000 ; undefined
    b528:	00001462 	.inst	0x00001462 ; undefined
    b52c:	00000c36 	.inst	0x00000c36 ; undefined
    b530:	09500112 	.inst	0x09500112 ; undefined
    b534:	00a25803 	.inst	0x00a25803 ; undefined
    b538:	00000003 	.inst	0x00000003 ; undefined
    b53c:	d0110000 	adrp	x0, 2200d000 <_stack_base+0x1efff880>
    b540:	00030075 	.inst	0x00030075 ; undefined
    b544:	86000000 	.inst	0x86000000 ; undefined
    b548:	4e000014 	tbl	v20.16b, {v0.16b}, v0.16b
    b54c:	1200000c 	and	w12, w0, #0x1
    b550:	87025001 	.inst	0x87025001 ; undefined
    b554:	d8110000 	prfm	pldl1keep, 2d554 <_stack_size+0x2c554>
    b558:	00030075 	.inst	0x00030075 ; undefined
    b55c:	62000000 	.inst	0x62000000 ; undefined
    b560:	66000014 	.inst	0x66000014 ; undefined
    b564:	1200000c 	and	w12, w0, #0x1
    b568:	88025001 	stxr	w2, w1, [x0]
    b56c:	e4110000 	.inst	0xe4110000 ; undefined
    b570:	00030075 	.inst	0x00030075 ; undefined
    b574:	62000000 	.inst	0x62000000 ; undefined
    b578:	85000014 	.inst	0x85000014 ; undefined
    b57c:	1200000c 	and	w12, w0, #0x1
    b580:	03095001 	.inst	0x03095001 ; undefined
    b584:	0300a268 	.inst	0x0300a268 ; undefined
    b588:	00000000 	.inst	0x00000000 ; undefined
    b58c:	75ec1100 	.inst	0x75ec1100 ; undefined
    b590:	00000300 	.inst	0x00000300 ; undefined
    b594:	14860000 	b	218b594 <MPIDR_EL1_MT+0x118b594>
    b598:	0c9d0000 	st4	{v0.8b-v3.8b}, [x0], x29
    b59c:	01120000 	.inst	0x01120000 ; undefined
    b5a0:	00830250 	.inst	0x00830250 ; undefined
    b5a4:	75f41100 	.inst	0x75f41100 ; undefined
    b5a8:	00000300 	.inst	0x00000300 ; undefined
    b5ac:	14620000 	b	188b5ac <MPIDR_EL1_MT+0x88b5ac>
    b5b0:	0cb50000 	.inst	0x0cb50000 ; undefined
    b5b4:	01120000 	.inst	0x01120000 ; undefined
    b5b8:	00880250 	.inst	0x00880250 ; undefined
    b5bc:	76101100 	.inst	0x76101100 ; undefined
    b5c0:	00000300 	.inst	0x00000300 ; undefined
    b5c4:	14620000 	b	188b5c4 <MPIDR_EL1_MT+0x88b5c4>
    b5c8:	0cd40000 	ld4	{v0.8b-v3.8b}, [x0], x20
    b5cc:	01120000 	.inst	0x01120000 ; undefined
    b5d0:	28030950 	stnp	w16, w2, [x10,#24]
    b5d4:	000300a2 	.inst	0x000300a2 ; undefined
    b5d8:	00000000 	.inst	0x00000000 ; undefined
    b5dc:	00761c11 	.inst	0x00761c11 ; undefined
    b5e0:	00000003 	.inst	0x00000003 ; undefined
    b5e4:	00146200 	.inst	0x00146200 ; undefined
    b5e8:	000cf300 	.inst	0x000cf300 ; undefined
    b5ec:	50011200 	adr	x0, d82e <_stack_size+0xc82e>
    b5f0:	a2480309 	.inst	0xa2480309 ; undefined
    b5f4:	00000300 	.inst	0x00000300 ; undefined
    b5f8:	11000000 	add	w0, w0, #0x0
    b5fc:	03007624 	.inst	0x03007624 ; undefined
    b600:	00000000 	.inst	0x00000000 ; undefined
    b604:	00001486 	.inst	0x00001486 ; undefined
    b608:	00000d0b 	.inst	0x00000d0b ; undefined
    b60c:	02500112 	.inst	0x02500112 ; undefined
    b610:	11000086 	add	w6, w4, #0x0
    b614:	0300762c 	.inst	0x0300762c ; undefined
    b618:	00000000 	.inst	0x00000000 ; undefined
    b61c:	00001462 	.inst	0x00001462 ; undefined
    b620:	00000d23 	.inst	0x00000d23 ; undefined
    b624:	02500112 	.inst	0x02500112 ; undefined
    b628:	11000084 	add	w4, w4, #0x0
    b62c:	03007638 	.inst	0x03007638 ; undefined
    b630:	00000000 	.inst	0x00000000 ; undefined
    b634:	00001462 	.inst	0x00001462 ; undefined
    b638:	00000d42 	.inst	0x00000d42 ; undefined
    b63c:	09500112 	.inst	0x09500112 ; undefined
    b640:	00a25803 	.inst	0x00a25803 ; undefined
    b644:	00000003 	.inst	0x00000003 ; undefined
    b648:	40110000 	.inst	0x40110000 ; undefined
    b64c:	00030076 	.inst	0x00030076 ; undefined
    b650:	86000000 	.inst	0x86000000 ; undefined
    b654:	5a000014 	sbc	w20, w0, w0
    b658:	1200000d 	and	w13, w0, #0x1
    b65c:	87025001 	.inst	0x87025001 ; undefined
    b660:	48110000 	stxrh	w17, w0, [x0]
    b664:	00030076 	.inst	0x00030076 ; undefined
    b668:	62000000 	.inst	0x62000000 ; undefined
    b66c:	72000014 	ands	w20, w0, #0x1
    b670:	1200000d 	and	w13, w0, #0x1
    b674:	84025001 	.inst	0x84025001 ; undefined
    b678:	54110000 	b.eq	2d678 <_stack_size+0x2c678>
    b67c:	00030076 	.inst	0x00030076 ; undefined
    b680:	62000000 	.inst	0x62000000 ; undefined
    b684:	91000014 	add	x20, x0, #0x0
    b688:	1200000d 	and	w13, w0, #0x1
    b68c:	03095001 	.inst	0x03095001 ; undefined
    b690:	0300a268 	.inst	0x0300a268 ; undefined
    b694:	00000000 	.inst	0x00000000 ; undefined
    b698:	765c1100 	.inst	0x765c1100 ; undefined
    b69c:	00000300 	.inst	0x00000300 ; undefined
    b6a0:	14860000 	b	218b6a0 <MPIDR_EL1_MT+0x118b6a0>
    b6a4:	0da90000 	st2	{v0.b, v1.b}[0], [x0], x9
    b6a8:	01120000 	.inst	0x01120000 ; undefined
    b6ac:	00830250 	.inst	0x00830250 ; undefined
    b6b0:	76641100 	.inst	0x76641100 ; undefined
    b6b4:	00000300 	.inst	0x00000300 ; undefined
    b6b8:	14620000 	b	188b6b8 <MPIDR_EL1_MT+0x88b6b8>
    b6bc:	0dc10000 	ld1	{v0.b}[0], [x0], x1
    b6c0:	01120000 	.inst	0x01120000 ; undefined
    b6c4:	00840250 	.inst	0x00840250 ; undefined
    b6c8:	76682300 	.inst	0x76682300 ; undefined
    b6cc:	00000300 	.inst	0x00000300 ; undefined
    b6d0:	090e0000 	.inst	0x090e0000 ; undefined
    b6d4:	31000000 	adds	w0, w0, #0x0
    b6d8:	000012c8 	.inst	0x000012c8 ; undefined
    b6dc:	57033d01 	.inst	0x57033d01 ; undefined
    b6e0:	68000000 	.inst	0x68000000 ; undefined
    b6e4:	00030076 	.inst	0x00030076 ; undefined
    b6e8:	34000000 	cbz	w0, b6e8 <_stack_size+0xa6e8>
    b6ec:	00000000 	.inst	0x00000000 ; undefined
    b6f0:	01000000 	.inst	0x01000000 ; undefined
    b6f4:	000e309c 	.inst	0x000e309c ; undefined
    b6f8:	146c2900 	b	1b15af8 <MPIDR_EL1_MT+0xb15af8>
    b6fc:	3d010000 	str	b0, [x0,#64]
    b700:	00005703 	.inst	0x00005703 ; undefined
    b704:	00aecf00 	.inst	0x00aecf00 ; undefined
    b708:	656c3200 	.inst	0x656c3200 ; undefined
    b70c:	3d01006e 	str	b14, [x3,#64]
    b710:	00005703 	.inst	0x00005703 ; undefined
    b714:	00af3100 	.inst	0x00af3100 ; undefined
    b718:	00691000 	.inst	0x00691000 ; undefined
    b71c:	3b033f01 	.inst	0x3b033f01 ; undefined
    b720:	7d000000 	str	h0, [x0]
    b724:	2d0000af 	stp	s15, s0, [x5]
    b728:	000012d8 	.inst	0x000012d8 ; undefined
    b72c:	57034001 	.inst	0x57034001 ; undefined
    b730:	e8000000 	.inst	0xe8000000 ; undefined
    b734:	000000af 	.inst	0x000000af ; undefined
    b738:	000dc428 	.inst	0x000dc428 ; undefined
    b73c:	034d0100 	.inst	0x034d0100 ; undefined
    b740:	0300769c 	.inst	0x0300769c ; undefined
    b744:	00000000 	.inst	0x00000000 ; undefined
    b748:	00000124 	.inst	0x00000124 ; undefined
    b74c:	00000000 	.inst	0x00000000 ; undefined
    b750:	0ffc9c01 	.inst	0x0ffc9c01 ; undefined
    b754:	73320000 	.inst	0x73320000 ; undefined
    b758:	01007274 	.inst	0x01007274 ; undefined
    b75c:	0ffc034d 	.inst	0x0ffc034d ; undefined
    b760:	b0330000 	adrp	x0, 6600c000 <MPIDR_EL1_U+0x2600c000>
    b764:	62320000 	.inst	0x62320000 ; undefined
    b768:	01006675 	.inst	0x01006675 ; undefined
    b76c:	1007034d 	adr	x13, 197d4 <_stack_size+0x187d4>
    b770:	b0950000 	adrp	x0, ffffffff2a00c000 <SMC_ID_HW_RSA+0xfffffffea5ffc0f9>
    b774:	5a290000 	.inst	0x5a290000 ; undefined
    b778:	01000008 	.inst	0x01000008 ; undefined
    b77c:	0057034d 	.inst	0x0057034d ; undefined
    b780:	b11d0000 	adds	x0, x0, #0x740
    b784:	69100000 	.inst	0x69100000 ; undefined
    b788:	034f0100 	.inst	0x034f0100 ; undefined
    b78c:	00000057 	.inst	0x00000057 ; undefined
    b790:	0000b1a5 	.inst	0x0000b1a5 ; undefined
    b794:	72747010 	.inst	0x72747010 ; undefined
    b798:	03500100 	.inst	0x03500100 ; undefined
    b79c:	00000aee 	.inst	0x00000aee ; undefined
    b7a0:	0000b22c 	.inst	0x0000b22c ; undefined
    b7a4:	000e223d 	.inst	0x000e223d ; undefined
    b7a8:	00100e00 	.inst	0x00100e00 ; undefined
    b7ac:	28030900 	stnp	w0, w2, [x8,#24]
    b7b0:	0003009c 	.inst	0x0003009c ; undefined
    b7b4:	23000000 	.inst	0x23000000 ; undefined
    b7b8:	030076bc 	.inst	0x030076bc ; undefined
    b7bc:	00000000 	.inst	0x00000000 ; undefined
    b7c0:	00001462 	.inst	0x00001462 ; undefined
    b7c4:	0076d811 	.inst	0x0076d811 ; undefined
    b7c8:	00000003 	.inst	0x00000003 ; undefined
    b7cc:	00146200 	.inst	0x00146200 ; undefined
    b7d0:	000edb00 	.inst	0x000edb00 ; undefined
    b7d4:	50011200 	adr	x0, da16 <_stack_size+0xca16>
    b7d8:	a2b00309 	.inst	0xa2b00309 ; undefined
    b7dc:	00000300 	.inst	0x00000300 ; undefined
    b7e0:	11000000 	add	w0, w0, #0x0
    b7e4:	030076f4 	.inst	0x030076f4 ; undefined
    b7e8:	00000000 	.inst	0x00000000 ; undefined
    b7ec:	00001486 	.inst	0x00001486 ; undefined
    b7f0:	00000ef3 	.inst	0x00000ef3 ; undefined
    b7f4:	02500112 	.inst	0x02500112 ; undefined
    b7f8:	11000085 	add	w5, w4, #0x0
    b7fc:	03007700 	.inst	0x03007700 ; undefined
    b800:	00000000 	.inst	0x00000000 ; undefined
    b804:	00001462 	.inst	0x00001462 ; undefined
    b808:	00000f12 	.inst	0x00000f12 ; undefined
    b80c:	09500112 	.inst	0x09500112 ; undefined
    b810:	009d4803 	.inst	0x009d4803 ; undefined
    b814:	00000003 	.inst	0x00000003 ; undefined
    b818:	0c230000 	.inst	0x0c230000 ; undefined
    b81c:	00030077 	.inst	0x00030077 ; undefined
    b820:	98000000 	ldrsw	x0, b820 <_stack_size+0xa820>
    b824:	11000014 	add	w20, w0, #0x0
    b828:	03007724 	.inst	0x03007724 ; undefined
    b82c:	00000000 	.inst	0x00000000 ; undefined
    b830:	00001462 	.inst	0x00001462 ; undefined
    b834:	00000f37 	.inst	0x00000f37 ; undefined
    b838:	02500112 	.inst	0x02500112 ; undefined
    b83c:	11000087 	add	w7, w4, #0x0
    b840:	03007740 	.inst	0x03007740 ; undefined
    b844:	00000000 	.inst	0x00000000 ; undefined
    b848:	00001462 	.inst	0x00001462 ; undefined
    b84c:	00000f4f 	.inst	0x00000f4f ; undefined
    b850:	02500112 	.inst	0x02500112 ; undefined
    b854:	11000089 	add	w9, w4, #0x0
    b858:	0300774c 	.inst	0x0300774c ; undefined
    b85c:	00000000 	.inst	0x00000000 ; undefined
    b860:	00001498 	.inst	0x00001498 ; undefined
    b864:	00000f6c 	.inst	0x00000f6c ; undefined
    b868:	02500112 	.inst	0x02500112 ; undefined
    b86c:	01120084 	.inst	0x01120084 ; undefined
    b870:	00380151 	.inst	0x00380151 ; NYI
    b874:	00775811 	.inst	0x00775811 ; undefined
    b878:	00000003 	.inst	0x00000003 ; undefined
    b87c:	00146200 	.inst	0x00146200 ; undefined
    b880:	000f8b00 	.inst	0x000f8b00 ; undefined
    b884:	50011200 	adr	x0, dac6 <_stack_size+0xcac6>
    b888:	a2a00309 	.inst	0xa2a00309 ; undefined
    b88c:	00000300 	.inst	0x00000300 ; undefined
    b890:	11000000 	add	w0, w0, #0x0
    b894:	03007764 	.inst	0x03007764 ; undefined
    b898:	00000000 	.inst	0x00000000 ; undefined
    b89c:	00001498 	.inst	0x00001498 ; undefined
    b8a0:	00000fa2 	.inst	0x00000fa2 ; undefined
    b8a4:	01510112 	.inst	0x01510112 ; undefined
    b8a8:	78110032 	sturh	w18, [x1,#-240]
    b8ac:	00030077 	.inst	0x00030077 ; undefined
    b8b0:	62000000 	.inst	0x62000000 ; undefined
    b8b4:	c1000014 	.inst	0xc1000014 ; undefined
    b8b8:	1200000f 	and	w15, w0, #0x1
    b8bc:	03095001 	.inst	0x03095001 ; undefined
    b8c0:	03009e58 	.inst	0x03009e58 ; undefined
    b8c4:	00000000 	.inst	0x00000000 ; undefined
    b8c8:	77983e00 	.inst	0x77983e00 ; undefined
    b8cc:	00000300 	.inst	0x00000300 ; undefined
    b8d0:	14620000 	b	188b8d0 <MPIDR_EL1_MT+0x88b8d0>
    b8d4:	0fe00000 	.inst	0x0fe00000 ; undefined
    b8d8:	01120000 	.inst	0x01120000 ; undefined
    b8dc:	58030950 	ldr	x16, 11a04 <_stack_size+0x10a04>
    b8e0:	0003009e 	.inst	0x0003009e ; undefined
    b8e4:	00000000 	.inst	0x00000000 ; undefined
    b8e8:	0077b43f 	.inst	0x0077b43f ; undefined
    b8ec:	00000003 	.inst	0x00000003 ; undefined
    b8f0:	00146200 	.inst	0x00146200 ; undefined
    b8f4:	50011200 	adr	x0, db36 <_stack_size+0xcb36>
    b8f8:	a2980309 	.inst	0xa2980309 ; undefined
    b8fc:	00000300 	.inst	0x00000300 ; undefined
    b900:	00000000 	.inst	0x00000000 ; undefined
    b904:	10020827 	adr	x7, fa08 <_stack_size+0xea08>
    b908:	c10a0000 	.inst	0xc10a0000 ; undefined
    b90c:	27000000 	.inst	0x27000000 ; undefined
    b910:	00100d08 	.inst	0x00100d08 ; undefined
    b914:	aa0a4000 	orr	x0, x0, x10, lsl #16
    b918:	28000000 	stnp	w0, w0, [x0]
    b91c:	00000cd2 	.inst	0x00000cd2 ; undefined
    b920:	c0037401 	.inst	0xc0037401 ; undefined
    b924:	00030077 	.inst	0x00030077 ; undefined
    b928:	a0000000 	.inst	0xa0000000 ; undefined
    b92c:	00000000 	.inst	0x00000000 ; undefined
    b930:	01000000 	.inst	0x01000000 ; undefined
    b934:	0010bc9c 	.inst	0x0010bc9c ; undefined
    b938:	29b02b00 	stp	w0, w10, [x24,#-128]!
    b93c:	76010000 	.inst	0x76010000 ; undefined
    b940:	00007b03 	.inst	0x00007b03 ; undefined
    b944:	78910200 	ldursh	x0, [x16,#-240]
    b948:	0100692a 	.inst	0x0100692a ; undefined
    b94c:	03310377 	.inst	0x03310377 ; undefined
    b950:	91020000 	add	x0, x0, #0x80
    b954:	006a2a74 	.inst	0x006a2a74 ; undefined
    b958:	31037701 	adds	w1, w24, #0xdd
    b95c:	02000003 	.inst	0x02000003 ; undefined
    b960:	9d3a7091 	.inst	0x9d3a7091 ; undefined
    b964:	01000017 	.inst	0x01000017 ; undefined
    b968:	003b02cc 	.inst	0x003b02cc ; NYI
    b96c:	106c0000 	adr	x0, e396c <_stack_size+0xe296c>
    b970:	003b0000 	.inst	0x003b0000 ; NYI
    b974:	00273d2d 	.inst	0x00273d2d ; NYI
    b978:	03800100 	.inst	0x03800100 ; undefined
    b97c:	0000007b 	.inst	0x0000007b ; undefined
    b980:	0000b2b4 	.inst	0x0000b2b4 ; undefined
    b984:	0077d011 	.inst	0x0077d011 ; undefined
    b988:	00000003 	.inst	0x00000003 ; undefined
    b98c:	00147400 	.inst	0x00147400 ; undefined
    b990:	00109400 	.inst	0x00109400 ; undefined
    b994:	50011200 	adr	x0, dbd6 <_stack_size+0xcbd6>
    b998:	00789102 	.inst	0x00789102 ; undefined
    b99c:	0077e423 	.inst	0x0077e423 ; undefined
    b9a0:	00000003 	.inst	0x00000003 ; undefined
    b9a4:	00090e00 	.inst	0x00090e00 ; undefined
    b9a8:	781c2300 	sturh	w0, [x24,#-62]
    b9ac:	00000300 	.inst	0x00000300 ; undefined
    b9b0:	090e0000 	.inst	0x090e0000 ; undefined
    b9b4:	58230000 	ldr	x0, 519b4 <_stack_size+0x509b4>
    b9b8:	00030078 	.inst	0x00030078 ; undefined
    b9bc:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    b9c0:	00000009 	.inst	0x00000009 ; undefined
    b9c4:	00298e41 	.inst	0x00298e41 ; NYI
    b9c8:	038d0100 	.inst	0x038d0100 ; undefined
    b9cc:	0000007b 	.inst	0x0000007b ; undefined
    b9d0:	03007860 	.inst	0x03007860 ; undefined
    b9d4:	00000000 	.inst	0x00000000 ; undefined
    b9d8:	00000140 	.inst	0x00000140 ; undefined
    b9dc:	00000000 	.inst	0x00000000 ; undefined
    b9e0:	12259c01 	and	w1, w0, #0xf807f807
    b9e4:	d42d0000 	brk	#0x6800
    b9e8:	01000027 	.inst	0x01000027 ; undefined
    b9ec:	007b038e 	.inst	0x007b038e ; undefined
    b9f0:	b2ff0000 	.inst	0xb2ff0000 ; undefined
    b9f4:	092d0000 	.inst	0x092d0000 ; undefined
    b9f8:	0100002a 	.inst	0x0100002a ; undefined
    b9fc:	007b038e 	.inst	0x007b038e ; undefined
    ba00:	b36b0000 	bfi	x0, x0, #21, #1
    ba04:	652d0000 	.inst	0x652d0000 ; undefined
    ba08:	01000029 	.inst	0x01000029 ; undefined
    ba0c:	007b038f 	.inst	0x007b038f ; undefined
    ba10:	b3ad0000 	.inst	0xb3ad0000 ; undefined
    ba14:	4b2d0000 	sub	w0, w0, w13, uxtb
    ba18:	01000027 	.inst	0x01000027 ; undefined
    ba1c:	007b038f 	.inst	0x007b038f ; undefined
    ba20:	b4300000 	cbz	x0, 6ba20 <_stack_size+0x6aa20>
    ba24:	74230000 	.inst	0x74230000 ; undefined
    ba28:	00030078 	.inst	0x00030078 ; undefined
    ba2c:	13000000 	sbfx	w0, w0, #0, #1
    ba30:	23000010 	.inst	0x23000010 ; undefined
    ba34:	0300787c 	.inst	0x0300787c ; undefined
    ba38:	00000000 	.inst	0x00000000 ; undefined
    ba3c:	00001013 	.inst	0x00001013 ; undefined
    ba40:	00792c11 	.inst	0x00792c11 ; undefined
    ba44:	00000003 	.inst	0x00000003 ; undefined
    ba48:	00146200 	.inst	0x00146200 ; undefined
    ba4c:	00115700 	.inst	0x00115700 ; undefined
    ba50:	50011200 	adr	x0, dc92 <_stack_size+0xcc92>
    ba54:	a2b80309 	.inst	0xa2b80309 ; undefined
    ba58:	00000300 	.inst	0x00000300 ; undefined
    ba5c:	11000000 	add	w0, w0, #0x0
    ba60:	03007934 	.inst	0x03007934 ; undefined
    ba64:	00000000 	.inst	0x00000000 ; undefined
    ba68:	00001486 	.inst	0x00001486 ; undefined
    ba6c:	0000116f 	.inst	0x0000116f ; undefined
    ba70:	02500112 	.inst	0x02500112 ; undefined
    ba74:	11000085 	add	w5, w4, #0x0
    ba78:	03007940 	.inst	0x03007940 ; undefined
    ba7c:	00000000 	.inst	0x00000000 ; undefined
    ba80:	00001462 	.inst	0x00001462 ; undefined
    ba84:	0000118e 	.inst	0x0000118e ; undefined
    ba88:	09500112 	.inst	0x09500112 ; undefined
    ba8c:	009d4803 	.inst	0x009d4803 ; undefined
    ba90:	00000003 	.inst	0x00000003 ; undefined
    ba94:	54110000 	b.eq	2da94 <_stack_size+0x2ca94>
    ba98:	00030079 	.inst	0x00030079 ; undefined
    ba9c:	62000000 	.inst	0x62000000 ; undefined
    baa0:	ad000014 	stp	q20, q0, [x0]
    baa4:	12000011 	and	w17, w0, #0x1
    baa8:	03095001 	.inst	0x03095001 ; undefined
    baac:	0300a2d0 	.inst	0x0300a2d0 ; undefined
    bab0:	00000000 	.inst	0x00000000 ; undefined
    bab4:	795c1100 	ldrh	w0, [x8,#3592]
    bab8:	00000300 	.inst	0x00000300 ; undefined
    babc:	14860000 	b	218babc <MPIDR_EL1_MT+0x118babc>
    bac0:	11c50000 	.inst	0x11c50000 ; undefined
    bac4:	01120000 	.inst	0x01120000 ; undefined
    bac8:	00840250 	.inst	0x00840250 ; undefined
    bacc:	79681100 	ldrh	w0, [x8,#5128]
    bad0:	00000300 	.inst	0x00000300 ; undefined
    bad4:	14620000 	b	188bad4 <MPIDR_EL1_MT+0x88bad4>
    bad8:	11e40000 	.inst	0x11e40000 ; undefined
    badc:	01120000 	.inst	0x01120000 ; undefined
    bae0:	48030950 	stxrh	w3, w16, [x10]
    bae4:	0003009d 	.inst	0x0003009d ; undefined
    bae8:	00000000 	.inst	0x00000000 ; undefined
    baec:	00797c23 	.inst	0x00797c23 ; undefined
    baf0:	00000003 	.inst	0x00000003 ; undefined
    baf4:	00146200 	.inst	0x00146200 ; undefined
    baf8:	79841100 	ldrsh	x0, [x8,#520]
    bafc:	00000300 	.inst	0x00000300 ; undefined
    bb00:	14860000 	b	218bb00 <MPIDR_EL1_MT+0x118bb00>
    bb04:	12090000 	and	w0, w0, #0x800000
    bb08:	01120000 	.inst	0x01120000 ; undefined
    bb0c:	00830250 	.inst	0x00830250 ; undefined
    bb10:	79901300 	ldrsh	x0, [x24,#2056]
    bb14:	00000300 	.inst	0x00000300 ; undefined
    bb18:	14620000 	b	188bb18 <MPIDR_EL1_MT+0x88bb18>
    bb1c:	01120000 	.inst	0x01120000 ; undefined
    bb20:	48030950 	stxrh	w3, w16, [x10]
    bb24:	0003009d 	.inst	0x0003009d ; undefined
    bb28:	00000000 	.inst	0x00000000 ; undefined
    bb2c:	0ca43100 	.inst	0x0ca43100 ; undefined
    bb30:	e2010000 	.inst	0xe2010000 ; undefined
    bb34:	00003b03 	.inst	0x00003b03 ; undefined
    bb38:	0079a000 	.inst	0x0079a000 ; undefined
    bb3c:	00000003 	.inst	0x00000003 ; undefined
    bb40:	0000a000 	.inst	0x0000a000 ; undefined
    bb44:	00000000 	.inst	0x00000000 ; undefined
    bb48:	759c0100 	.inst	0x759c0100 ; undefined
    bb4c:	29000012 	stp	w18, w0, [x0]
    bb50:	00000aa5 	.inst	0x00000aa5 ; undefined
    bb54:	5703e201 	.inst	0x5703e201 ; undefined
    bb58:	b3000000 	.inst	0xb3000000 ; undefined
    bb5c:	2b0000b4 	adds	w20, w5, w0
    bb60:	00002913 	.inst	0x00002913 ; undefined
    bb64:	7503e401 	.inst	0x7503e401 ; undefined
    bb68:	02000012 	.inst	0x02000012 ; undefined
    bb6c:	69107091 	.inst	0x69107091 ; undefined
    bb70:	03e40100 	.inst	0x03e40100 ; undefined
    bb74:	00000057 	.inst	0x00000057 ; undefined
    bb78:	0000b4ff 	.inst	0x0000b4ff ; undefined
    bb7c:	00570500 	.inst	0x00570500 ; undefined
    bb80:	12850000 	mov	w0, #0xffffd7ff            	// #-10241
    bb84:	ba060000 	adcs	x0, x0, x6
    bb88:	03000000 	.inst	0x03000000 ; undefined
    bb8c:	14c13100 	b	3057f8c <_stack_base+0x4a80c>
    bb90:	55010000 	.inst	0x55010000 ; undefined
    bb94:	00003b04 	.inst	0x00003b04 ; undefined
    bb98:	007a4000 	.inst	0x007a4000 ; undefined
    bb9c:	00000003 	.inst	0x00000003 ; undefined
    bba0:	00003c00 	.inst	0x00003c00 ; undefined
    bba4:	00000000 	.inst	0x00000000 ; undefined
    bba8:	e29c0100 	.inst	0xe29c0100 ; undefined
    bbac:	29000012 	stp	w18, w0, [x0]
    bbb0:	00000aa5 	.inst	0x00000aa5 ; undefined
    bbb4:	57045501 	.inst	0x57045501 ; undefined
    bbb8:	23000000 	.inst	0x23000000 ; undefined
    bbbc:	320000b5 	orr	w21, w5, #0x1
    bbc0:	00616566 	.inst	0x00616566 ; undefined
    bbc4:	57045501 	.inst	0x57045501 ; undefined
    bbc8:	82000000 	.inst	0x82000000 ; undefined
    bbcc:	230000b5 	.inst	0x230000b5 ; undefined
    bbd0:	03007a54 	.inst	0x03007a54 ; undefined
    bbd4:	00000000 	.inst	0x00000000 ; undefined
    bbd8:	00001013 	.inst	0x00001013 ; undefined
    bbdc:	007a7c23 	.inst	0x007a7c23 ; undefined
    bbe0:	00000003 	.inst	0x00000003 ; undefined
    bbe4:	00090e00 	.inst	0x00090e00 ; undefined
    bbe8:	63310000 	.inst	0x63310000 ; undefined
    bbec:	0100002a 	.inst	0x0100002a ; undefined
    bbf0:	003b045d 	.inst	0x003b045d ; NYI
    bbf4:	7a7c0000 	.inst	0x7a7c0000 ; undefined
    bbf8:	00000300 	.inst	0x00000300 ; undefined
    bbfc:	00600000 	.inst	0x00600000 ; undefined
    bc00:	00000000 	.inst	0x00000000 ; undefined
    bc04:	9c010000 	ldr	q0, dc04 <_stack_size+0xcc04>
    bc08:	0000134c 	.inst	0x0000134c ; undefined
    bc0c:	000aa529 	.inst	0x000aa529 ; undefined
    bc10:	045d0100 	.inst	0x045d0100 ; undefined
    bc14:	00000057 	.inst	0x00000057 ; undefined
    bc18:	0000b5e1 	.inst	0x0000b5e1 ; undefined
    bc1c:	61656632 	.inst	0x61656632 ; undefined
    bc20:	045d0100 	.inst	0x045d0100 ; undefined
    bc24:	00000057 	.inst	0x00000057 ; undefined
    bc28:	0000b640 	.inst	0x0000b640 ; undefined
    bc2c:	007a9023 	.inst	0x007a9023 ; undefined
    bc30:	00000003 	.inst	0x00000003 ; undefined
    bc34:	00101300 	.inst	0x00101300 ; undefined
    bc38:	7aa42300 	.inst	0x7aa42300 ; undefined
    bc3c:	00000300 	.inst	0x00000300 ; undefined
    bc40:	10130000 	adr	x0, 31c40 <_stack_size+0x30c40>
    bc44:	dc230000 	.inst	0xdc230000 ; undefined
    bc48:	0003007a 	.inst	0x0003007a ; undefined
    bc4c:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    bc50:	00000009 	.inst	0x00000009 ; undefined
    bc54:	0029b531 	.inst	0x0029b531 ; NYI
    bc58:	04690100 	.inst	0x04690100 ; undefined
    bc5c:	0000003b 	.inst	0x0000003b ; undefined
    bc60:	03007adc 	.inst	0x03007adc ; undefined
    bc64:	00000000 	.inst	0x00000000 ; undefined
    bc68:	00000060 	.inst	0x00000060 ; undefined
    bc6c:	00000000 	.inst	0x00000000 ; undefined
    bc70:	13b69c01 	.inst	0x13b69c01 ; undefined
    bc74:	a5290000 	.inst	0xa5290000 ; undefined
    bc78:	0100000a 	.inst	0x0100000a ; undefined
    bc7c:	00570469 	.inst	0x00570469 ; undefined
    bc80:	b69f0000 	tbz	x0, #51, 9c80 <_stack_size+0x8c80>
    bc84:	66320000 	.inst	0x66320000 ; undefined
    bc88:	01006165 	.inst	0x01006165 ; undefined
    bc8c:	00570469 	.inst	0x00570469 ; undefined
    bc90:	b6fe0000 	tbz	x0, #63, 7c90 <_stack_size+0x6c90>
    bc94:	f0230000 	adrp	x0, 4600e000 <MPIDR_EL1_U+0x600e000>
    bc98:	0003007a 	.inst	0x0003007a ; undefined
    bc9c:	13000000 	sbfx	w0, w0, #0, #1
    bca0:	23000010 	.inst	0x23000010 ; undefined
    bca4:	03007b04 	.inst	0x03007b04 ; undefined
    bca8:	00000000 	.inst	0x00000000 ; undefined
    bcac:	00001013 	.inst	0x00001013 ; undefined
    bcb0:	007b3c23 	.inst	0x007b3c23 ; undefined
    bcb4:	00000003 	.inst	0x00000003 ; undefined
    bcb8:	00090e00 	.inst	0x00090e00 ; undefined
    bcbc:	9a310000 	.inst	0x9a310000 ; undefined
    bcc0:	01000006 	.inst	0x01000006 ; undefined
    bcc4:	003b0475 	.inst	0x003b0475 ; NYI
    bcc8:	7b3c0000 	.inst	0x7b3c0000 ; undefined
    bccc:	00000300 	.inst	0x00000300 ; undefined
    bcd0:	00280000 	.inst	0x00280000 ; NYI
    bcd4:	00000000 	.inst	0x00000000 ; undefined
    bcd8:	9c010000 	ldr	q0, dcd8 <_stack_size+0xccd8>
    bcdc:	000013f9 	.inst	0x000013f9 ; undefined
    bce0:	72747332 	.inst	0x72747332 ; undefined
    bce4:	04750100 	.inst	0x04750100 ; undefined
    bce8:	00000ffc 	.inst	0x00000ffc ; undefined
    bcec:	0000b75d 	.inst	0x0000b75d ; undefined
    bcf0:	00239e2d 	.inst	0x00239e2d ; NYI
    bcf4:	04770100 	.inst	0x04770100 ; undefined
    bcf8:	0000003b 	.inst	0x0000003b ; undefined
    bcfc:	0000b7bb 	.inst	0x0000b7bb ; undefined
    bd00:	04ef2200 	.inst	0x04ef2200 ; undefined
    bd04:	26040000 	.inst	0x26040000 ; undefined
    bd08:	0000003b 	.inst	0x0000003b ; undefined
    bd0c:	0000dc22 	.inst	0x0000dc22 ; undefined
    bd10:	578a0100 	.inst	0x578a0100 ; undefined
    bd14:	42000000 	.inst	0x42000000 ; undefined
    bd18:	00000c84 	.inst	0x00000c84 ; undefined
    bd1c:	14252d05 	b	957130 <_stack_size+0x956130>
    bd20:	7b390000 	.inst	0x7b390000 ; undefined
    bd24:	39000000 	strb	w0, [x0]
    bd28:	00000057 	.inst	0x00000057 ; undefined
    bd2c:	073c4300 	.inst	0x073c4300 ; undefined
    bd30:	23060000 	.inst	0x23060000 ; undefined
    bd34:	0000003b 	.inst	0x0000003b ; undefined
    bd38:	0000143b 	.inst	0x0000143b ; undefined
    bd3c:	000ffc39 	.inst	0x000ffc39 ; undefined
    bd40:	44003b00 	.inst	0x44003b00 ; undefined
    bd44:	00001b32 	.inst	0x00001b32 ; undefined
    bd48:	1b3c0007 	.inst	0x1b3c0007 ; undefined
    bd4c:	003b0000 	.inst	0x003b0000 ; NYI
    bd50:	14540000 	b	150bd50 <MPIDR_EL1_MT+0x50bd50>
    bd54:	fc390000 	.inst	0xfc390000 ; undefined
    bd58:	0000000f 	.inst	0x0000000f ; undefined
    bd5c:	0000ce45 	.inst	0x0000ce45 ; undefined
    bd60:	45500800 	.inst	0x45500800 ; undefined
    bd64:	0000016b 	.inst	0x0000016b ; undefined
    bd68:	63385508 	.inst	0x63385508 ; undefined
    bd6c:	09000005 	.inst	0x09000005 ; undefined
    bd70:	1474012c 	b	1d0c220 <MPIDR_EL1_MT+0xd0c220>
    bd74:	fc390000 	.inst	0xfc390000 ; undefined
    bd78:	0000000f 	.inst	0x0000000f ; undefined
    bd7c:	00179d3a 	.inst	0x00179d3a ; undefined
    bd80:	02cc0100 	.inst	0x02cc0100 ; undefined
    bd84:	0000003b 	.inst	0x0000003b ; undefined
    bd88:	00001486 	.inst	0x00001486 ; undefined
    bd8c:	3438003b 	cbz	w27, 7bd90 <_stack_size+0x7ad90>
    bd90:	0900000a 	.inst	0x0900000a ; undefined
    bd94:	1498012e 	b	260c24c <MPIDR_EL1_MT+0x160c24c>
    bd98:	57390000 	.inst	0x57390000 ; undefined
    bd9c:	00000000 	.inst	0x00000000 ; undefined
    bda0:	0025de46 	.inst	0x0025de46 ; NYI
    bda4:	012d0900 	.inst	0x012d0900 ; undefined
    bda8:	00005739 	.inst	0x00005739 ; undefined
    bdac:	00573900 	.inst	0x00573900 ; undefined
    bdb0:	00000000 	.inst	0x00000000 ; undefined
    bdb4:	0000067f 	.inst	0x0000067f ; undefined
    bdb8:	2edb0004 	.inst	0x2edb0004 ; undefined
    bdbc:	01080000 	.inst	0x01080000 ; undefined
    bdc0:	00000189 	.inst	0x00000189 ; undefined
    bdc4:	002ac701 	.inst	0x002ac701 ; NYI
    bdc8:	00034700 	.inst	0x00034700 ; undefined
    bdcc:	007b6400 	.inst	0x007b6400 ; undefined
    bdd0:	00000003 	.inst	0x00000003 ; undefined
    bdd4:	00022800 	.inst	0x00022800 ; undefined
    bdd8:	00000000 	.inst	0x00000000 ; undefined
    bddc:	003acf00 	.inst	0x003acf00 ; NYI
    bde0:	06010200 	.inst	0x06010200 ; undefined
    bde4:	00000100 	.inst	0x00000100 ; undefined
    bde8:	2b050202 	adds	w2, w16, w5
    bdec:	03000000 	.inst	0x03000000 ; undefined
    bdf0:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    bdf4:	08020074 	stxrb	w2, w20, [x3]
    bdf8:	0000a905 	.inst	0x0000a905 ; undefined
    bdfc:	08010200 	stxrb	w1, w0, [x16]
    be00:	000000fe 	.inst	0x000000fe ; undefined
    be04:	31070202 	adds	w2, w16, #0x1c0
    be08:	02000001 	.inst	0x02000001 ; undefined
    be0c:	01160704 	.inst	0x01160704 ; undefined
    be10:	08020000 	stxrb	w2, w0, [x0]
    be14:	00011107 	.inst	0x00011107 ; undefined
    be18:	00850400 	.inst	0x00850400 ; undefined
    be1c:	7a020000 	sbcs	w0, w0, w2
    be20:	0000005e 	.inst	0x0000005e ; undefined
    be24:	00060404 	.inst	0x00060404 ; undefined
    be28:	490d0300 	.inst	0x490d0300 ; undefined
    be2c:	04000000 	.inst	0x04000000 ; undefined
    be30:	0000003f 	.inst	0x0000003f ; undefined
    be34:	00571103 	.inst	0x00571103 ; undefined
    be38:	40040000 	.inst	0x40040000 ; undefined
    be3c:	03000000 	.inst	0x03000000 ; undefined
    be40:	00003b12 	.inst	0x00003b12 ; undefined
    be44:	07080200 	.inst	0x07080200 ; undefined
    be48:	0000010c 	.inst	0x0000010c ; undefined
    be4c:	a4050802 	.inst	0xa4050802 ; undefined
    be50:	02000000 	.inst	0x02000000 ; undefined
    be54:	059d0708 	.inst	0x059d0708 ; undefined
    be58:	dc050000 	.inst	0xdc050000 ; undefined
    be5c:	0400000c 	.inst	0x0400000c ; undefined
    be60:	00d11b04 	.inst	0x00d11b04 ; undefined
    be64:	47060000 	.inst	0x47060000 ; undefined
    be68:	0000000c 	.inst	0x0000000c ; undefined
    be6c:	000cf206 	.inst	0x000cf206 ; undefined
    be70:	fd060100 	str	d0, [x8,#3072]
    be74:	0200000c 	.inst	0x0200000c ; undefined
    be78:	000d0806 	.inst	0x000d0806 ; undefined
    be7c:	13060300 	sbfiz	w0, w24, #26, #1
    be80:	0400000d 	.inst	0x0400000d ; undefined
    be84:	0c760400 	.inst	0x0c760400 ; undefined
    be88:	21040000 	.inst	0x21040000 ; undefined
    be8c:	000000a6 	.inst	0x000000a6 ; undefined
    be90:	000c6e07 	.inst	0x000c6e07 ; undefined
    be94:	23041000 	.inst	0x23041000 ; undefined
    be98:	00000101 	.inst	0x00000101 ; undefined
    be9c:	0013d308 	.inst	0x0013d308 ; undefined
    bea0:	d1240400 	sub	x0, x0, #0x901
    bea4:	00000000 	.inst	0x00000000 ; undefined
    bea8:	79656b09 	ldrh	w9, [x24,#4788]
    beac:	01250400 	.inst	0x01250400 ; undefined
    beb0:	08000001 	stxrb	w0, w1, [x0]
    beb4:	04080a00 	.inst	0x04080a00 ; undefined
    beb8:	00000c8b 	.inst	0x00000c8b ; undefined
    bebc:	00dc2604 	.inst	0x00dc2604 ; undefined
    bec0:	170b0000 	b	fffffffffc2cbec0 <SMC_ID_HW_RSA+0xffffffff782bbfb9>
    bec4:	0100001a 	.inst	0x0100001a ; undefined
    bec8:	00003b3d 	.inst	0x00003b3d ; undefined
    becc:	007b6400 	.inst	0x007b6400 ; undefined
    bed0:	00000003 	.inst	0x00000003 ; undefined
    bed4:	00022800 	.inst	0x00022800 ; undefined
    bed8:	00000000 	.inst	0x00000000 ; undefined
    bedc:	ef9c0100 	.inst	0xef9c0100 ; undefined
    bee0:	0c000004 	st4	{v4.8b-v7.8b}, [x0]
    bee4:	00002a9f 	.inst	0x00002a9f ; undefined
    bee8:	01013d01 	.inst	0x01013d01 ; undefined
    beec:	b8060000 	stur	w0, [x0,#96]
    bef0:	be0c0000 	.inst	0xbe0c0000 ; undefined
    bef4:	0100002a 	.inst	0x0100002a ; undefined
    bef8:	0000573d 	.inst	0x0000573d ; undefined
    befc:	00b88e00 	.inst	0x00b88e00 ; undefined
    bf00:	2b2f0c00 	adds	w0, w0, w15, uxtb #3
    bf04:	3d010000 	str	b0, [x0,#64]
    bf08:	00000101 	.inst	0x00000101 ; undefined
    bf0c:	0000b929 	.inst	0x0000b929 ; undefined
    bf10:	000c6c0c 	.inst	0x000c6c0c ; undefined
    bf14:	ef3d0100 	.inst	0xef3d0100 ; undefined
    bf18:	c7000004 	.inst	0xc7000004 ; undefined
    bf1c:	0c0000b9 	st4	{v25.8b-v28.8b}, [x5]
    bf20:	00002a8e 	.inst	0x00002a8e ; undefined
    bf24:	00493d01 	.inst	0x00493d01 ; undefined
    bf28:	ba780000 	.inst	0xba780000 ; undefined
    bf2c:	720d0000 	ands	w0, w0, #0x80000
    bf30:	01007465 	.inst	0x01007465 ; undefined
    bf34:	00003b3f 	.inst	0x00003b3f ; undefined
    bf38:	00baea00 	.inst	0x00baea00 ; undefined
    bf3c:	6d740e00 	ldp	d0, d3, [x16,#-192]
    bf40:	40010070 	.inst	0x40010070 ; undefined
    bf44:	000004f5 	.inst	0x000004f5 ; undefined
    bf48:	0f7c9102 	.inst	0x0f7c9102 ; undefined
    bf4c:	00002b3b 	.inst	0x00002b3b ; undefined
    bf50:	04fa4101 	.inst	0x04fa4101 ; undefined
    bf54:	030a0000 	.inst	0x030a0000 ; undefined
    bf58:	0300c760 	.inst	0x0300c760 ; undefined
    bf5c:	00000000 	.inst	0x00000000 ; undefined
    bf60:	2b410f9f 	cmn	w28, w1, lsr #3
    bf64:	42010000 	.inst	0x42010000 ; undefined
    bf68:	000004fa 	.inst	0x000004fa ; undefined
    bf6c:	c660030a 	.inst	0xc660030a ; undefined
    bf70:	00000300 	.inst	0x00000300 ; undefined
    bf74:	109f0000 	adr	x0, fffffffffff49f74 <SMC_ID_HW_RSA+0xffffffff7bf3a06d>
    bf78:	03007bc8 	.inst	0x03007bc8 ; undefined
    bf7c:	00000000 	.inst	0x00000000 ; undefined
    bf80:	00000551 	.inst	0x00000551 ; undefined
    bf84:	000001e8 	.inst	0x000001e8 ; undefined
    bf88:	02500111 	.inst	0x02500111 ; undefined
    bf8c:	01110088 	.inst	0x01110088 ; undefined
    bf90:	ff080251 	.inst	0xff080251 ; undefined
    bf94:	03520111 	.inst	0x03520111 ; undefined
    bf98:	0001000a 	.inst	0x0001000a ; undefined
    bf9c:	007bd810 	.inst	0x007bd810 ; undefined
    bfa0:	00000003 	.inst	0x00000003 ; undefined
    bfa4:	00055100 	.inst	0x00055100 ; undefined
    bfa8:	00020e00 	.inst	0x00020e00 ; undefined
    bfac:	50011100 	adr	x0, e1ce <_stack_size+0xd1ce>
    bfb0:	11008902 	add	w2, w8, #0x22
    bfb4:	91045101 	add	x1, x8, #0x114
    bfb8:	1104947c 	add	w28, w3, #0x125
    bfbc:	08025201 	stxrb	w2, w1, [x16]
    bfc0:	e4100020 	.inst	0xe4100020 ; undefined
    bfc4:	0003007b 	.inst	0x0003007b ; undefined
    bfc8:	6c000000 	stnp	d0, d0, [x0]
    bfcc:	2f000005 	.inst	0x2f000005 ; undefined
    bfd0:	11000002 	add	w2, w0, #0x0
    bfd4:	84025001 	.inst	0x84025001 ; undefined
    bfd8:	51011100 	sub	w0, w8, #0x44
    bfdc:	84008605 	.inst	0x84008605 ; undefined
    bfe0:	10002200 	adr	x0, c420 <_stack_size+0xb420>
    bfe4:	03007bf0 	.inst	0x03007bf0 ; undefined
    bfe8:	00000000 	.inst	0x00000000 ; undefined
    bfec:	0000056c 	.inst	0x0000056c ; undefined
    bff0:	0000024e 	.inst	0x0000024e ; undefined
    bff4:	02500111 	.inst	0x02500111 ; undefined
    bff8:	01110083 	.inst	0x01110083 ; undefined
    bffc:	80830351 	.inst	0x80830351 ; undefined
    c000:	fc100002 	stur	d2, [x0,#-256]
    c004:	0003007b 	.inst	0x0003007b ; undefined
    c008:	6c000000 	stnp	d0, d0, [x0]
    c00c:	6d000005 	stp	d5, d0, [x0]
    c010:	11000002 	add	w2, w0, #0x0
    c014:	88025001 	stxr	w2, w1, [x0]
    c018:	51011100 	sub	w0, w8, #0x44
    c01c:	02808803 	.inst	0x02808803 ; undefined
    c020:	7c081000 	stur	h0, [x0,#129]
    c024:	00000300 	.inst	0x00000300 ; undefined
    c028:	056c0000 	.inst	0x056c0000 ; undefined
    c02c:	028b0000 	.inst	0x028b0000 ; undefined
    c030:	01110000 	.inst	0x01110000 ; undefined
    c034:	00890250 	.inst	0x00890250 ; undefined
    c038:	02510111 	.inst	0x02510111 ; undefined
    c03c:	10002089 	adr	x9, c44c <_stack_size+0xb44c>
    c040:	03007c20 	.inst	0x03007c20 ; undefined
    c044:	00000000 	.inst	0x00000000 ; undefined
    c048:	00000582 	.inst	0x00000582 ; undefined
    c04c:	000002ba 	.inst	0x000002ba ; undefined
    c050:	02500111 	.inst	0x02500111 ; undefined
    c054:	01110084 	.inst	0x01110084 ; undefined
    c058:	00860251 	.inst	0x00860251 ; undefined
    c05c:	02520111 	.inst	0x02520111 ; undefined
    c060:	01110089 	.inst	0x01110089 ; undefined
    c064:	11300153 	add	w19, w10, #0xc00
    c068:	87025401 	.inst	0x87025401 ; undefined
    c06c:	78100000 	sturh	w0, [x0,#-256]
    c070:	0003007c 	.inst	0x0003007c ; undefined
    c074:	b7000000 	tbnz	x0, #32, c074 <_stack_size+0xb074>
    c078:	e5000005 	.inst	0xe5000005 ; undefined
    c07c:	11000002 	add	w2, w0, #0x0
    c080:	03095001 	.inst	0x03095001 ; undefined
    c084:	0300a2e8 	.inst	0x0300a2e8 ; undefined
    c088:	00000000 	.inst	0x00000000 ; undefined
    c08c:	02510111 	.inst	0x02510111 ; undefined
    c090:	01110089 	.inst	0x01110089 ; undefined
    c094:	20080252 	.inst	0x20080252 ; undefined
    c098:	7c881000 	.inst	0x7c881000 ; undefined
    c09c:	00000300 	.inst	0x00000300 ; undefined
    c0a0:	05e40000 	.inst	0x05e40000 ; undefined
    c0a4:	03090000 	.inst	0x03090000 ; undefined
    c0a8:	01110000 	.inst	0x01110000 ; undefined
    c0ac:	00830250 	.inst	0x00830250 ; undefined
    c0b0:	02510111 	.inst	0x02510111 ; undefined
    c0b4:	01110085 	.inst	0x01110085 ; undefined
    c0b8:	00880252 	.inst	0x00880252 ; undefined
    c0bc:	7ca01000 	.inst	0x7ca01000 ; undefined
    c0c0:	00000300 	.inst	0x00000300 ; undefined
    c0c4:	06130000 	.inst	0x06130000 ; undefined
    c0c8:	032e0000 	.inst	0x032e0000 ; undefined
    c0cc:	01110000 	.inst	0x01110000 ; undefined
    c0d0:	20030950 	.inst	0x20030950 ; undefined
    c0d4:	000300a3 	.inst	0x000300a3 ; undefined
    c0d8:	11000000 	add	w0, w0, #0x0
    c0dc:	88025101 	stxr	w2, w1, [x8]
    c0e0:	b0100000 	adrp	x0, 2000d000 <_stack_base+0x1cfff880>
    c0e4:	0003007c 	.inst	0x0003007c ; undefined
    c0e8:	2a000000 	orr	w0, w0, w0
    c0ec:	52000006 	eor	w6, w0, #0x1
    c0f0:	11000003 	add	w3, w0, #0x0
    c0f4:	89025001 	.inst	0x89025001 ; undefined
    c0f8:	51011100 	sub	w0, w8, #0x44
    c0fc:	11008802 	add	w2, w0, #0x22
    c100:	08025201 	stxrb	w2, w1, [x16]
    c104:	e8100020 	.inst	0xe8100020 ; undefined
    c108:	0003007c 	.inst	0x0003007c ; undefined
    c10c:	b7000000 	tbnz	x0, #32, c10c <_stack_size+0xb10c>
    c110:	7e000005 	.inst	0x7e000005 ; undefined
    c114:	11000003 	add	w3, w0, #0x0
    c118:	03095001 	.inst	0x03095001 ; undefined
    c11c:	0300a330 	.inst	0x0300a330 ; undefined
    c120:	00000000 	.inst	0x00000000 ; undefined
    c124:	03510111 	.inst	0x03510111 ; undefined
    c128:	1102808a 	add	w10, w4, #0xa0
    c12c:	08025201 	stxrb	w2, w1, [x16]
    c130:	04100020 	.inst	0x04100020 ; undefined
    c134:	0003007d 	.inst	0x0003007d ; undefined
    c138:	b7000000 	tbnz	x0, #32, c138 <_stack_size+0xb138>
    c13c:	a9000005 	stp	x5, x0, [x0]
    c140:	11000003 	add	w3, w0, #0x0
    c144:	03095001 	.inst	0x03095001 ; undefined
    c148:	0300a340 	.inst	0x0300a340 ; undefined
    c14c:	00000000 	.inst	0x00000000 ; undefined
    c150:	02510111 	.inst	0x02510111 ; undefined
    c154:	0111008a 	.inst	0x0111008a ; undefined
    c158:	20080252 	.inst	0x20080252 ; undefined
    c15c:	7d0c1000 	str	h0, [x0,#1544]
    c160:	00000300 	.inst	0x00000300 ; undefined
    c164:	06490000 	.inst	0x06490000 ; undefined
    c168:	03c10000 	.inst	0x03c10000 ; undefined
    c16c:	01110000 	.inst	0x01110000 ; undefined
    c170:	00850250 	.inst	0x00850250 ; undefined
    c174:	7d181000 	str	h0, [x0,#3080]
    c178:	00000300 	.inst	0x00000300 ; undefined
    c17c:	06490000 	.inst	0x06490000 ; undefined
    c180:	03e00000 	.inst	0x03e00000 ; undefined
    c184:	01110000 	.inst	0x01110000 ; undefined
    c188:	50030950 	adr	x16, 122b2 <_stack_size+0x112b2>
    c18c:	000300a3 	.inst	0x000300a3 ; undefined
    c190:	00000000 	.inst	0x00000000 ; undefined
    c194:	007d2010 	.inst	0x007d2010 ; undefined
    c198:	00000003 	.inst	0x00000003 ; undefined
    c19c:	00065b00 	.inst	0x00065b00 ; undefined
    c1a0:	0003f800 	.inst	0x0003f800 ; undefined
    c1a4:	50011100 	adr	x0, e3c6 <_stack_size+0xd3c6>
    c1a8:	00008902 	.inst	0x00008902 ; undefined
    c1ac:	007d2810 	.inst	0x007d2810 ; undefined
    c1b0:	00000003 	.inst	0x00000003 ; undefined
    c1b4:	00064900 	.inst	0x00064900 ; undefined
    c1b8:	00041000 	.inst	0x00041000 ; undefined
    c1bc:	50011100 	adr	x0, e3de <_stack_size+0xd3de>
    c1c0:	00008602 	.inst	0x00008602 ; undefined
    c1c4:	007d3010 	.inst	0x007d3010 ; undefined
    c1c8:	00000003 	.inst	0x00000003 ; undefined
    c1cc:	00065b00 	.inst	0x00065b00 ; undefined
    c1d0:	00042800 	.inst	0x00042800 ; undefined
    c1d4:	50011100 	adr	x0, e3f6 <_stack_size+0xd3f6>
    c1d8:	00008802 	.inst	0x00008802 ; undefined
    c1dc:	007d3810 	.inst	0x007d3810 ; undefined
    c1e0:	00000003 	.inst	0x00000003 ; undefined
    c1e4:	00064900 	.inst	0x00064900 ; undefined
    c1e8:	00044000 	.inst	0x00044000 ; undefined
    c1ec:	50011100 	adr	x0, e40e <_stack_size+0xd40e>
    c1f0:	00008602 	.inst	0x00008602 ; undefined
    c1f4:	007d4010 	.inst	0x007d4010 ; undefined
    c1f8:	00000003 	.inst	0x00000003 ; undefined
    c1fc:	00065b00 	.inst	0x00065b00 ; undefined
    c200:	00045800 	.inst	0x00045800 ; undefined
    c204:	50011100 	adr	x0, e426 <_stack_size+0xd426>
    c208:	00200802 	.inst	0x00200802 ; NYI
    c20c:	007d4c10 	.inst	0x007d4c10 ; undefined
    c210:	00000003 	.inst	0x00000003 ; undefined
    c214:	00064900 	.inst	0x00064900 ; undefined
    c218:	00047700 	.inst	0x00047700 ; undefined
    c21c:	50011100 	adr	x0, e43e <_stack_size+0xd43e>
    c220:	a3600309 	.inst	0xa3600309 ; undefined
    c224:	00000300 	.inst	0x00000300 ; undefined
    c228:	10000000 	adr	x0, c228 <_stack_size+0xb228>
    c22c:	03007d54 	.inst	0x03007d54 ; undefined
    c230:	00000000 	.inst	0x00000000 ; undefined
    c234:	0000065b 	.inst	0x0000065b ; undefined
    c238:	0000048f 	.inst	0x0000048f ; undefined
    c23c:	02500111 	.inst	0x02500111 ; undefined
    c240:	10000084 	adr	x4, c250 <_stack_size+0xb250>
    c244:	03007d5c 	.inst	0x03007d5c ; undefined
    c248:	00000000 	.inst	0x00000000 ; undefined
    c24c:	00000649 	.inst	0x00000649 ; undefined
    c250:	000004a7 	.inst	0x000004a7 ; undefined
    c254:	02500111 	.inst	0x02500111 ; undefined
    c258:	10000085 	adr	x5, c268 <_stack_size+0xb268>
    c25c:	03007d70 	.inst	0x03007d70 ; undefined
    c260:	00000000 	.inst	0x00000000 ; undefined
    c264:	0000066d 	.inst	0x0000066d ; undefined
    c268:	000004c6 	.inst	0x000004c6 ; undefined
    c26c:	09500111 	.inst	0x09500111 ; undefined
    c270:	00a2f803 	.inst	0x00a2f803 ; undefined
    c274:	00000003 	.inst	0x00000003 ; undefined
    c278:	84120000 	.inst	0x84120000 ; undefined
    c27c:	0003007d 	.inst	0x0003007d ; undefined
    c280:	b7000000 	tbnz	x0, #32, c280 <_stack_size+0xb280>
    c284:	11000005 	add	w5, w0, #0x0
    c288:	03095001 	.inst	0x03095001 ; undefined
    c28c:	0300a310 	.inst	0x0300a310 ; undefined
    c290:	00000000 	.inst	0x00000000 ; undefined
    c294:	02510111 	.inst	0x02510111 ; undefined
    c298:	01110088 	.inst	0x01110088 ; undefined
    c29c:	000a0352 	.inst	0x000a0352 ; undefined
    c2a0:	13000001 	sbfx	w1, w0, #0, #1
    c2a4:	00010308 	.inst	0x00010308 ; undefined
    c2a8:	00571400 	.inst	0x00571400 ; undefined
    c2ac:	08130000 	stxrb	w19, w0, [x0]
    c2b0:	00000049 	.inst	0x00000049 ; undefined
    c2b4:	00051015 	.inst	0x00051015 ; undefined
    c2b8:	00051000 	.inst	0x00051000 ; undefined
    c2bc:	009f1600 	.inst	0x009f1600 ; undefined
    c2c0:	00ff0000 	.inst	0x00ff0000 ; undefined
    c2c4:	07080102 	.inst	0x07080102 ; undefined
    c2c8:	17000001 	b	fffffffffc00c2cc <SMC_ID_HW_RSA+0xffffffff77ffc3c5>
    c2cc:	00002b24 	.inst	0x00002b24 ; undefined
    c2d0:	05002a01 	.inst	0x05002a01 ; undefined
    c2d4:	03090000 	.inst	0x03090000 ; undefined
    c2d8:	0300c660 	.inst	0x0300c660 ; undefined
    c2dc:	00000000 	.inst	0x00000000 ; undefined
    c2e0:	00051015 	.inst	0x00051015 ; undefined
    c2e4:	00053c00 	.inst	0x00053c00 ; undefined
    c2e8:	009f1600 	.inst	0x009f1600 ; undefined
    c2ec:	001f0000 	.inst	0x001f0000 ; undefined
    c2f0:	002aa517 	.inst	0x002aa517 ; NYI
    c2f4:	2c2b0100 	stnp	s0, s0, [x8,#-168]
    c2f8:	09000005 	.inst	0x09000005 ; undefined
    c2fc:	00c76003 	.inst	0x00c76003 ; undefined
    c300:	00000003 	.inst	0x00000003 ; undefined
    c304:	0c611800 	.inst	0x0c611800 ; undefined
    c308:	54050000 	b.eq	16308 <_stack_size+0x15308>
    c30c:	0000056c 	.inst	0x0000056c ; undefined
    c310:	00010119 	.inst	0x00010119 ; undefined
    c314:	007b1900 	.inst	0x007b1900 ; undefined
    c318:	7b190000 	.inst	0x7b190000 ; undefined
    c31c:	00000000 	.inst	0x00000000 ; undefined
    c320:	00008f18 	.inst	0x00008f18 ; undefined
    c324:	824e0600 	.inst	0x824e0600 ; undefined
    c328:	19000005 	.inst	0x19000005 ; undefined
    c32c:	0000007b 	.inst	0x0000007b ; undefined
    c330:	00007b19 	.inst	0x00007b19 ; undefined
    c334:	7b1a0000 	.inst	0x7b1a0000 ; undefined
    c338:	0700000d 	.inst	0x0700000d ; undefined
    c33c:	00003b3b 	.inst	0x00003b3b ; undefined
    c340:	0005ab00 	.inst	0x0005ab00 ; undefined
    c344:	05ab1900 	.inst	0x05ab1900 ; undefined
    c348:	86190000 	.inst	0x86190000 ; undefined
    c34c:	19000000 	.inst	0x19000000 ; undefined
    c350:	000005ab 	.inst	0x000005ab ; undefined
    c354:	0005b119 	.inst	0x0005b119 ; undefined
    c358:	00701900 	.inst	0x00701900 ; undefined
    c35c:	13000000 	sbfx	w0, w0, #0, #1
    c360:	00007008 	.inst	0x00007008 ; undefined
    c364:	7b081300 	.inst	0x7b081300 ; undefined
    c368:	18000000 	ldr	w0, c368 <_stack_size+0xb368>
    c36c:	00000dc4 	.inst	0x00000dc4 ; undefined
    c370:	05d25905 	.inst	0x05d25905 ; undefined
    c374:	d2190000 	eor	x0, x0, #0x8000000080
    c378:	19000005 	.inst	0x19000005 ; undefined
    c37c:	000005dd 	.inst	0x000005dd ; undefined
    c380:	00005719 	.inst	0x00005719 ; undefined
    c384:	08130000 	stxrb	w19, w0, [x0]
    c388:	000005d8 	.inst	0x000005d8 ; undefined
    c38c:	0005101b 	.inst	0x0005101b ; undefined
    c390:	e3081300 	.inst	0xe3081300 ; undefined
    c394:	1c000005 	ldr	s5, c394 <_stack_size+0xb394>
    c398:	002ab31a 	.inst	0x002ab31a ; NYI
    c39c:	3b230800 	.inst	0x3b230800 ; undefined
    c3a0:	03000000 	.inst	0x03000000 ; undefined
    c3a4:	19000006 	.inst	0x19000006 ; undefined
    c3a8:	00000603 	.inst	0x00000603 ; undefined
    c3ac:	00060819 	.inst	0x00060819 ; undefined
    c3b0:	06031900 	.inst	0x06031900 ; undefined
    c3b4:	1b000000 	madd	w0, w0, w0, w0
    c3b8:	00000057 	.inst	0x00000057 ; undefined
    c3bc:	060e0813 	.inst	0x060e0813 ; undefined
    c3c0:	031b0000 	.inst	0x031b0000 ; undefined
    c3c4:	1d000001 	.inst	0x1d000001 ; undefined
    c3c8:	00002027 	.inst	0x00002027 ; undefined
    c3cc:	2a012f09 	orr	w9, w24, w1, lsl #11
    c3d0:	19000006 	.inst	0x19000006 ; undefined
    c3d4:	000005d2 	.inst	0x000005d2 ; undefined
    c3d8:	00007b19 	.inst	0x00007b19 ; undefined
    c3dc:	521a0000 	eor	w0, w0, #0x40
    c3e0:	05000010 	.inst	0x05000010 ; undefined
    c3e4:	00007b52 	.inst	0x00007b52 ; undefined
    c3e8:	00064900 	.inst	0x00064900 ; undefined
    c3ec:	01011900 	.inst	0x01011900 ; undefined
    c3f0:	01190000 	.inst	0x01190000 ; undefined
    c3f4:	19000001 	.inst	0x19000001 ; undefined
    c3f8:	0000007b 	.inst	0x0000007b ; undefined
    c3fc:	05631d00 	.inst	0x05631d00 ; undefined
    c400:	2c090000 	stnp	s0, s0, [x0,#72]
    c404:	00065b01 	.inst	0x00065b01 ; undefined
    c408:	05d21900 	.inst	0x05d21900 ; undefined
    c40c:	1d000000 	.inst	0x1d000000 ; undefined
    c410:	00000a34 	.inst	0x00000a34 ; undefined
    c414:	6d012e09 	stp	d9, d11, [x16,#16]
    c418:	19000006 	.inst	0x19000006 ; undefined
    c41c:	00000057 	.inst	0x00000057 ; undefined
    c420:	1b321e00 	.inst	0x1b321e00 ; undefined
    c424:	000a0000 	.inst	0x000a0000 ; undefined
    c428:	00001b3c 	.inst	0x00001b3c ; undefined
    c42c:	0000003b 	.inst	0x0000003b ; undefined
    c430:	0005d219 	.inst	0x0005d219 ; undefined
    c434:	b9000000 	str	w0, [x0]
    c438:	02000000 	.inst	0x02000000 ; undefined
    c43c:	00307000 	.inst	0x00307000 ; NYI
    c440:	0c010800 	.inst	0x0c010800 ; undefined
    c444:	0000003d 	.inst	0x0000003d ; undefined
    c448:	00030080 	.inst	0x00030080 ; undefined
    c44c:	84000000 	.inst	0x84000000 ; undefined
    c450:	00030097 	.inst	0x00030097 ; undefined
    c454:	2f000000 	.inst	0x2f000000 ; undefined
    c458:	656d6f68 	.inst	0x656d6f68 ; undefined
    c45c:	64652f31 	.inst	0x64652f31 ; undefined
    c460:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    c464:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    c468:	68742f68 	.inst	0x68742f68 ; undefined
    c46c:	742f726f 	.inst	0x742f726f ; undefined
    c470:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    c474:	312e382d 	adds	w13, w1, #0xb8e
    c478:	4554442f 	.inst	0x4554442f ; undefined
    c47c:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    c480:	646f6374 	.inst	0x646f6374 ; undefined
    c484:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    c488:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    c48c:	6372732f 	.inst	0x6372732f ; undefined
    c490:	6372612f 	.inst	0x6372612f ; undefined
    c494:	65722f68 	.inst	0x65722f68 ; undefined
    c498:	2f746573 	.inst	0x2f746573 ; undefined
    c49c:	746f6f62 	.inst	0x746f6f62 ; undefined
    c4a0:	74636576 	.inst	0x74636576 ; undefined
    c4a4:	762f726f 	.inst	0x762f726f ; undefined
    c4a8:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
    c4ac:	532e7372 	.inst	0x532e7372 ; undefined
    c4b0:	6f682f00 	.inst	0x6f682f00 ; undefined
    c4b4:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
    c4b8:	73696465 	.inst	0x73696465 ; undefined
    c4bc:	735f6e6f 	.inst	0x735f6e6f ; undefined
    c4c0:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
    c4c4:	726f6874 	.inst	0x726f6874 ; undefined
    c4c8:	7572742f 	.inst	0x7572742f ; undefined
    c4cc:	382d6b6e 	strb	w14, [x27,x13]
    c4d0:	442f312e 	.inst	0x442f312e ; undefined
    c4d4:	425f4554 	.inst	0x425f4554 ; undefined
    c4d8:	63746f6f 	.inst	0x63746f6f ; undefined
    c4dc:	2f65646f 	.inst	0x2f65646f ; undefined
    c4e0:	006e6962 	.inst	0x006e6962 ; undefined
    c4e4:	20554e47 	.inst	0x20554e47 ; undefined
    c4e8:	32205341 	orr	w1, w26, #0x1fffff
    c4ec:	2e34322e 	usubw	v14.8h, v17.8h, v20.8b
    c4f0:	80010030 	.inst	0x80010030 ; undefined
    c4f4:	000000b7 	.inst	0x000000b7 ; undefined
    c4f8:	30840002 	adr	x2, fffffffffff144f9 <SMC_ID_HW_RSA+0xffffffff7bf045f2>
    c4fc:	01080000 	.inst	0x01080000 ; undefined
    c500:	00003dfb 	.inst	0x00003dfb ; undefined
    c504:	03009800 	.inst	0x03009800 ; undefined
    c508:	00000000 	.inst	0x00000000 ; undefined
    c50c:	030099b0 	.inst	0x030099b0 ; undefined
    c510:	00000000 	.inst	0x00000000 ; undefined
    c514:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    c518:	652f3165 	.inst	0x652f3165 ; undefined
    c51c:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    c520:	68735f6e 	.inst	0x68735f6e ; undefined
    c524:	742f6869 	.inst	0x742f6869 ; undefined
    c528:	2f726f68 	.inst	0x2f726f68 ; undefined
    c52c:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    c530:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    c534:	54442f31 	.inst	0x54442f31 ; undefined
    c538:	6f425f45 	.inst	0x6f425f45 ; undefined
    c53c:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    c540:	622f6564 	.inst	0x622f6564 ; undefined
    c544:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    c548:	72732f2e 	.inst	0x72732f2e ; undefined
    c54c:	72612f63 	.inst	0x72612f63 ; undefined
    c550:	722f6863 	ands	w3, w3, #0xfffe0fff
    c554:	74657365 	.inst	0x74657365 ; undefined
    c558:	6f6f622f 	umlsl2	v15.4s, v17.8h, v15.h[2]
    c55c:	63657674 	.inst	0x63657674 ; undefined
    c560:	2f726f74 	.inst	0x2f726f74 ; undefined
    c564:	68636163 	.inst	0x68636163 ; undefined
    c568:	00532e65 	.inst	0x00532e65 ; undefined
    c56c:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    c570:	652f3165 	.inst	0x652f3165 ; undefined
    c574:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    c578:	68735f6e 	.inst	0x68735f6e ; undefined
    c57c:	742f6869 	.inst	0x742f6869 ; undefined
    c580:	2f726f68 	.inst	0x2f726f68 ; undefined
    c584:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    c588:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    c58c:	54442f31 	.inst	0x54442f31 ; undefined
    c590:	6f425f45 	.inst	0x6f425f45 ; undefined
    c594:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    c598:	622f6564 	.inst	0x622f6564 ; undefined
    c59c:	47006e69 	.inst	0x47006e69 ; undefined
    c5a0:	4120554e 	.inst	0x4120554e ; undefined
    c5a4:	2e322053 	usubl	v19.8h, v2.8b, v18.8b
    c5a8:	302e3432 	adr	x18, 68c2d <_stack_size+0x67c2d>
    c5ac:	ba800100 	.inst	0xba800100 ; undefined
    c5b0:	02000000 	.inst	0x02000000 ; undefined
    c5b4:	00309800 	.inst	0x00309800 ; NYI
    c5b8:	f6010800 	.inst	0xf6010800 ; undefined
    c5bc:	b000003e 	adrp	x30, 11000 <_stack_size+0x10000>
    c5c0:	00030099 	.inst	0x00030099 ; undefined
    c5c4:	30000000 	adr	x0, c5c5 <_stack_size+0xb5c5>
    c5c8:	0003009a 	.inst	0x0003009a ; undefined
    c5cc:	2f000000 	.inst	0x2f000000 ; undefined
    c5d0:	656d6f68 	.inst	0x656d6f68 ; undefined
    c5d4:	64652f31 	.inst	0x64652f31 ; undefined
    c5d8:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    c5dc:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    c5e0:	68742f68 	.inst	0x68742f68 ; undefined
    c5e4:	742f726f 	.inst	0x742f726f ; undefined
    c5e8:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    c5ec:	312e382d 	adds	w13, w1, #0xb8e
    c5f0:	4554442f 	.inst	0x4554442f ; undefined
    c5f4:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    c5f8:	646f6374 	.inst	0x646f6374 ; undefined
    c5fc:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    c600:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    c604:	6372732f 	.inst	0x6372732f ; undefined
    c608:	6372612f 	.inst	0x6372612f ; undefined
    c60c:	65722f68 	.inst	0x65722f68 ; undefined
    c610:	2f746573 	.inst	0x2f746573 ; undefined
    c614:	746f6f62 	.inst	0x746f6f62 ; undefined
    c618:	74636576 	.inst	0x74636576 ; undefined
    c61c:	732f726f 	.inst	0x732f726f ; undefined
    c620:	635f636d 	.inst	0x635f636d ; undefined
    c624:	2e6c6c61 	umin	v1.4h, v3.4h, v12.4h
    c628:	682f0053 	.inst	0x682f0053 ; undefined
    c62c:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    c630:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    c634:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    c638:	68696873 	.inst	0x68696873 ; undefined
    c63c:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    c640:	72742f72 	.inst	0x72742f72 ; undefined
    c644:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    c648:	2f312e38 	.inst	0x2f312e38 ; undefined
    c64c:	5f455444 	shl	d4, d2, #5
    c650:	746f6f42 	.inst	0x746f6f42 ; undefined
    c654:	65646f63 	.inst	0x65646f63 ; undefined
    c658:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    c65c:	554e4700 	.inst	0x554e4700 ; undefined
    c660:	20534120 	.inst	0x20534120 ; undefined
    c664:	34322e32 	cbz	w18, 70c28 <_stack_size+0x6fc28>
    c668:	0100302e 	.inst	0x0100302e ; undefined
    c66c:	Address 0x000000000000c66c is out of bounds.


Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
       0:	10001101 	adr	x1, 220 <MPIDR_EL1_AFF3_LSB+0x200>
       4:	12011106 	and	w6, w8, #0x8000000f
       8:	1b080301 	madd	w1, w24, w8, w0
       c:	13082508 	sbfx	w8, w8, #8, #2
      10:	00000005 	.inst	0x00000005 ; undefined
      14:	25011101 	.inst	0x25011101 ; undefined
      18:	030b130e 	.inst	0x030b130e ; undefined
      1c:	1201110e 	and	w14, w8, #0x8000000f
      20:	00171007 	.inst	0x00171007 ; undefined
      24:	00240200 	.inst	0x00240200 ; NYI
      28:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
      2c:	00000e03 	.inst	0x00000e03 ; undefined
      30:	0b002403 	add	w3, w0, w0, lsl #9
      34:	030b3e0b 	.inst	0x030b3e0b ; undefined
      38:	04000008 	.inst	0x04000008 ; undefined
      3c:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
      40:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
      44:	00001349 	.inst	0x00001349 ; undefined
      48:	03012e05 	.inst	0x03012e05 ; undefined
      4c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
      50:	4919270b 	.inst	0x4919270b ; undefined
      54:	010b2013 	.inst	0x010b2013 ; undefined
      58:	06000013 	.inst	0x06000013 ; undefined
      5c:	08030034 	stxrb	w3, w20, [x1]
      60:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
      64:	00001349 	.inst	0x00001349 ; undefined
      68:	03012e07 	.inst	0x03012e07 ; undefined
      6c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
      70:	2019270b 	.inst	0x2019270b ; undefined
      74:	0013010b 	.inst	0x0013010b ; undefined
      78:	00050800 	.inst	0x00050800 ; undefined
      7c:	0b3a0803 	add	w3, w0, w26, uxtb #2
      80:	13490b3b 	.inst	0x13490b3b ; undefined
      84:	2e090000 	ext	v0.8b, v0.8b, v9.8b, #0
      88:	03193f01 	.inst	0x03193f01 ; undefined
      8c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
      90:	2013490b 	.inst	0x2013490b ; undefined
      94:	0a00000b 	and	w11, w0, w0
      98:	00000018 	.inst	0x00000018 ; undefined
      9c:	4900350b 	.inst	0x4900350b ; undefined
      a0:	0c000013 	st4	{v19.8b-v22.8b}, [x0]
      a4:	193f002e 	.inst	0x193f002e ; undefined
      a8:	0b3a0e03 	add	w3, w16, w26, uxtb #3
      ac:	1927053b 	.inst	0x1927053b ; undefined
      b0:	00000b20 	.inst	0x00000b20 ; undefined
      b4:	0300340d 	.inst	0x0300340d ; undefined
      b8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
      bc:	0013490b 	.inst	0x0013490b ; undefined
      c0:	002e0e00 	.inst	0x002e0e00 ; NYI
      c4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
      c8:	19270b3b 	.inst	0x19270b3b ; undefined
      cc:	0b201349 	add	w9, w26, w0, uxtb #4
      d0:	2e0f0000 	ext	v0.8b, v0.8b, v15.8b, #0
      d4:	03193f01 	.inst	0x03193f01 ; undefined
      d8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
      dc:	1119270b 	add	w11, w24, #0x649
      e0:	40071201 	.inst	0x40071201 ; undefined
      e4:	19429718 	.inst	0x19429718 ; undefined
      e8:	00001301 	.inst	0x00001301 ; undefined
      ec:	3f012e10 	.inst	0x3f012e10 ; undefined
      f0:	3a0e0319 	adcs	w25, w24, w14
      f4:	3c0b3b0b 	.inst	0x3c0b3b0b ; undefined
      f8:	00130119 	.inst	0x00130119 ; undefined
      fc:	00341100 	.inst	0x00341100 ; NYI
     100:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     104:	13490b3b 	.inst	0x13490b3b ; undefined
     108:	193c193f 	.inst	0x193c193f ; undefined
     10c:	89120000 	.inst	0x89120000 ; undefined
     110:	11000182 	add	w2, w12, #0x0
     114:	19429501 	.inst	0x19429501 ; undefined
     118:	00001331 	.inst	0x00001331 ; undefined
     11c:	03000513 	.inst	0x03000513 ; undefined
     120:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     124:	0213490b 	.inst	0x0213490b ; undefined
     128:	14000017 	b	184 <MPIDR_EL1_AFF3_LSB+0x164>
     12c:	193f012e 	.inst	0x193f012e ; undefined
     130:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     134:	19270b3b 	.inst	0x19270b3b ; undefined
     138:	1301193c 	sbfx	w28, w9, #1, #6
     13c:	05150000 	.inst	0x05150000 ; undefined
     140:	00134900 	.inst	0x00134900 ; undefined
     144:	00341600 	.inst	0x00341600 ; NYI
     148:	0b3a0803 	add	w3, w0, w26, uxtb #2
     14c:	13490b3b 	.inst	0x13490b3b ; undefined
     150:	00000b1c 	.inst	0x00000b1c ; undefined
     154:	03003417 	.inst	0x03003417 ; undefined
     158:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     15c:	1c13490b 	ldr	s11, 26a7c <_stack_size+0x25a7c>
     160:	1800000b 	ldr	w11, 160 <MPIDR_EL1_AFF3_LSB+0x140>
     164:	1331001d 	.inst	0x1331001d ; undefined
     168:	07120111 	.inst	0x07120111 ; undefined
     16c:	0b590b58 	add	w24, w26, w25, lsr #2
     170:	89190000 	.inst	0x89190000 ; undefined
     174:	11010182 	add	w2, w12, #0x40
     178:	00133101 	.inst	0x00133101 ; undefined
     17c:	828a1a00 	.inst	0x828a1a00 ; undefined
     180:	18020001 	ldr	w1, 4180 <_stack_size+0x3180>
     184:	00184291 	.inst	0x00184291 ; undefined
     188:	000f1b00 	.inst	0x000f1b00 ; undefined
     18c:	13490b0b 	.inst	0x13490b0b ; undefined
     190:	341c0000 	cbz	w0, 38190 <_stack_size+0x37190>
     194:	3a0e0300 	adcs	w0, w24, w14
     198:	490b3b0b 	.inst	0x490b3b0b ; undefined
     19c:	00170213 	.inst	0x00170213 ; undefined
     1a0:	011d1d00 	.inst	0x011d1d00 ; undefined
     1a4:	01111331 	.inst	0x01111331 ; undefined
     1a8:	0b580712 	add	w18, w24, w24, lsr #1
     1ac:	13010559 	sbfx	w25, w10, #1, #1
     1b0:	0b1e0000 	add	w0, w0, w30
     1b4:	12011101 	and	w1, w8, #0x8000000f
     1b8:	1f000007 	fmadd	s7, s0, s0, s0
     1bc:	13310034 	.inst	0x13310034 ; undefined
     1c0:	00001702 	.inst	0x00001702 ; undefined
     1c4:	31000520 	adds	w0, w9, #0x1
     1c8:	00170213 	.inst	0x00170213 ; undefined
     1cc:	00342100 	.inst	0x00342100 ; NYI
     1d0:	00001331 	.inst	0x00001331 ; undefined
     1d4:	01828922 	.inst	0x01828922 ; undefined
     1d8:	31011100 	adds	w0, w8, #0x44
     1dc:	23000013 	.inst	0x23000013 ; undefined
     1e0:	1331011d 	.inst	0x1331011d ; undefined
     1e4:	07120111 	.inst	0x07120111 ; undefined
     1e8:	0b590b58 	add	w24, w26, w25, lsr #2
     1ec:	00001301 	.inst	0x00001301 ; undefined
     1f0:	31011d24 	adds	w4, w9, #0x47
     1f4:	12011113 	and	w19, w8, #0x8000000f
     1f8:	590b5807 	.inst	0x590b5807 ; undefined
     1fc:	2500000b 	.inst	0x2500000b ; undefined
     200:	193f012e 	.inst	0x193f012e ; undefined
     204:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     208:	1927053b 	.inst	0x1927053b ; undefined
     20c:	07120111 	.inst	0x07120111 ; undefined
     210:	42971840 	.inst	0x42971840 ; undefined
     214:	00130119 	.inst	0x00130119 ; undefined
     218:	012e2600 	.inst	0x012e2600 ; undefined
     21c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     220:	053b0b3a 	.inst	0x053b0b3a ; undefined
     224:	1301193c 	sbfx	w28, w9, #1, #6
     228:	34270000 	cbz	w0, 4e228 <_stack_size+0x4d228>
     22c:	3a0e0300 	adcs	w0, w24, w14
     230:	49053b0b 	.inst	0x49053b0b ; undefined
     234:	28000013 	stnp	w19, w0, [x0]
     238:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
     23c:	053b0b3a 	.inst	0x053b0b3a ; undefined
     240:	17021349 	b	fffffffffc084f64 <SMC_ID_HW_RSA+0xffffffff7807505d>
     244:	2e290000 	uaddl	v0.8h, v0.8b, v9.8b
     248:	11133100 	add	w0, w8, #0x4cc
     24c:	40071201 	.inst	0x40071201 ; undefined
     250:	19429718 	.inst	0x19429718 ; undefined
     254:	2e2a0000 	uaddl	v0.8h, v0.8b, v10.8b
     258:	03193f01 	.inst	0x03193f01 ; undefined
     25c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     260:	3c13490b 	.inst	0x3c13490b ; undefined
     264:	00130119 	.inst	0x00130119 ; undefined
     268:	012e2b00 	.inst	0x012e2b00 ; undefined
     26c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     270:	053b0b3a 	.inst	0x053b0b3a ; undefined
     274:	0000193c 	.inst	0x0000193c ; undefined
     278:	01110100 	.inst	0x01110100 ; undefined
     27c:	0b130e25 	add	w5, w17, w19, lsl #3
     280:	0e1b0e03 	dup	v3.8b, w16
     284:	07120111 	.inst	0x07120111 ; undefined
     288:	00001710 	.inst	0x00001710 ; undefined
     28c:	0b002402 	add	w2, w0, w0, lsl #9
     290:	030b3e0b 	.inst	0x030b3e0b ; undefined
     294:	0300000e 	.inst	0x0300000e ; undefined
     298:	0b0b0024 	add	w4, w1, w11
     29c:	08030b3e 	stxrb	w3, w30, [x25]
     2a0:	16040000 	b	fffffffff81002a0 <SMC_ID_HW_RSA+0xffffffff740f0399>
     2a4:	3a0e0300 	adcs	w0, w24, w14
     2a8:	490b3b0b 	.inst	0x490b3b0b ; undefined
     2ac:	05000013 	.inst	0x05000013 ; undefined
     2b0:	0e030104 	tbl	v4.8b, {v8.16b}, v3.8b
     2b4:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
     2b8:	13010b3b 	sbfx	w27, w25, #1, #2
     2bc:	28060000 	stnp	w0, w0, [x0,#48]
     2c0:	1c0e0300 	ldr	s0, 1c320 <_stack_size+0x1b320>
     2c4:	0700000d 	.inst	0x0700000d ; undefined
     2c8:	13490101 	.inst	0x13490101 ; undefined
     2cc:	00001301 	.inst	0x00001301 ; undefined
     2d0:	49002108 	.inst	0x49002108 ; undefined
     2d4:	000b2f13 	.inst	0x000b2f13 ; undefined
     2d8:	01130900 	.inst	0x01130900 ; undefined
     2dc:	0b0b0e03 	add	w3, w16, w11, lsl #3
     2e0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     2e4:	00001301 	.inst	0x00001301 ; undefined
     2e8:	03000d0a 	.inst	0x03000d0a ; undefined
     2ec:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     2f0:	3813490b 	sttrb	w11, [x8,#-204]
     2f4:	0b00000b 	add	w11, w0, w0
     2f8:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
     2fc:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     300:	0b0b1349 	add	w9, w26, w11, lsl #4
     304:	0b0c0b0d 	add	w13, w24, w12, lsl #2
     308:	00000b38 	.inst	0x00000b38 ; undefined
     30c:	0301130c 	.inst	0x0301130c ; undefined
     310:	3a050b0e 	.inst	0x3a050b0e ; undefined
     314:	010b3b0b 	.inst	0x010b3b0b ; undefined
     318:	0d000013 	st1	{v19.b}[0], [x0]
     31c:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
     320:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     324:	05381349 	.inst	0x05381349 ; undefined
     328:	2e0e0000 	ext	v0.8b, v0.8b, v14.8b, #0
     32c:	3a0e0300 	adcs	w0, w24, w14
     330:	490b3b0b 	.inst	0x490b3b0b ; undefined
     334:	000b2013 	.inst	0x000b2013 ; undefined
     338:	002e0f00 	.inst	0x002e0f00 ; NYI
     33c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     340:	19270b3b 	.inst	0x19270b3b ; undefined
     344:	00000b20 	.inst	0x00000b20 ; undefined
     348:	3f012e10 	.inst	0x3f012e10 ; undefined
     34c:	3a0e0319 	adcs	w25, w24, w14
     350:	270b3b0b 	.inst	0x270b3b0b ; undefined
     354:	12011119 	and	w25, w8, #0x8000000f
     358:	97184007 	bl	fffffffffc610374 <SMC_ID_HW_RSA+0xffffffff7860046d>
     35c:	13011942 	sbfx	w2, w10, #1, #6
     360:	34110000 	cbz	w0, 22360 <_stack_size+0x21360>
     364:	3a080300 	adcs	w0, w24, w8
     368:	490b3b0b 	.inst	0x490b3b0b ; undefined
     36c:	00170213 	.inst	0x00170213 ; undefined
     370:	011d1200 	.inst	0x011d1200 ; undefined
     374:	01521331 	.inst	0x01521331 ; undefined
     378:	0b581755 	add	w21, w26, w24, lsr #5
     37c:	13010b59 	sbfx	w25, w26, #1, #2
     380:	89130000 	.inst	0x89130000 ; undefined
     384:	11000182 	add	w2, w12, #0x0
     388:	00133101 	.inst	0x00133101 ; undefined
     38c:	82891400 	.inst	0x82891400 ; undefined
     390:	01110101 	.inst	0x01110101 ; undefined
     394:	13011331 	sbfx	w17, w25, #1, #4
     398:	8a150000 	and	x0, x0, x21
     39c:	02000182 	.inst	0x02000182 ; undefined
     3a0:	18429118 	ldr	w24, 855c0 <_stack_size+0x845c0>
     3a4:	1d160000 	.inst	0x1d160000 ; undefined
     3a8:	11133100 	add	w0, w8, #0x4cc
     3ac:	58071201 	ldr	x1, e5ec <_stack_size+0xd5ec>
     3b0:	000b590b 	.inst	0x000b590b ; undefined
     3b4:	82891700 	.inst	0x82891700 ; undefined
     3b8:	01110001 	.inst	0x01110001 ; undefined
     3bc:	00184293 	.inst	0x00184293 ; undefined
     3c0:	00341800 	.inst	0x00341800 ; NYI
     3c4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     3c8:	13490b3b 	.inst	0x13490b3b ; undefined
     3cc:	1802193f 	ldr	wzr, 46f0 <_stack_size+0x36f0>
     3d0:	34190000 	cbz	w0, 323d0 <_stack_size+0x313d0>
     3d4:	3a0e0300 	adcs	w0, w24, w14
     3d8:	490b3b0b 	.inst	0x490b3b0b ; undefined
     3dc:	3c193f13 	str	b19, [x24,#-109]!
     3e0:	1a000019 	adc	w25, w0, w0
     3e4:	0b0b000f 	add	w15, w0, w11
     3e8:	00001349 	.inst	0x00001349 ; undefined
     3ec:	3f002e1b 	.inst	0x3f002e1b ; undefined
     3f0:	3a0e0319 	adcs	w25, w24, w14
     3f4:	270b3b0b 	.inst	0x270b3b0b ; undefined
     3f8:	3c134919 	.inst	0x3c134919 ; undefined
     3fc:	1c000019 	ldr	s25, 3fc <MPIDR_EL1_AFF3_LSB+0x3dc>
     400:	193f012e 	.inst	0x193f012e ; undefined
     404:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     408:	19270b3b 	.inst	0x19270b3b ; undefined
     40c:	193c1349 	.inst	0x193c1349 ; undefined
     410:	00001301 	.inst	0x00001301 ; undefined
     414:	4900051d 	.inst	0x4900051d ; undefined
     418:	1e000013 	.inst	0x1e000013 ; undefined
     41c:	00000018 	.inst	0x00000018 ; undefined
     420:	4900261f 	.inst	0x4900261f ; undefined
     424:	20000013 	.inst	0x20000013 ; undefined
     428:	193f002e 	.inst	0x193f002e ; undefined
     42c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     430:	19270b3b 	.inst	0x19270b3b ; undefined
     434:	0000193c 	.inst	0x0000193c ; undefined
     438:	3f012e21 	.inst	0x3f012e21 ; undefined
     43c:	3a0e0319 	adcs	w25, w24, w14
     440:	27053b0b 	.inst	0x27053b0b ; undefined
     444:	00193c19 	.inst	0x00193c19 ; undefined
     448:	11010000 	add	w0, w0, #0x40
     44c:	130e2501 	sbfiz	w1, w8, #18, #10
     450:	110e030b 	add	w11, w24, #0x380
     454:	10071201 	adr	x1, e694 <_stack_size+0xd694>
     458:	02000017 	.inst	0x02000017 ; undefined
     45c:	0b0b0024 	add	w4, w1, w11
     460:	0e030b3e 	.inst	0x0e030b3e ; undefined
     464:	24030000 	.inst	0x24030000 ; undefined
     468:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     46c:	0008030b 	.inst	0x0008030b ; undefined
     470:	00160400 	.inst	0x00160400 ; undefined
     474:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     478:	13490b3b 	.inst	0x13490b3b ; undefined
     47c:	2e050000 	ext	v0.8b, v0.8b, v5.8b, #0
     480:	3a0e0301 	adcs	w1, w24, w14
     484:	270b3b0b 	.inst	0x270b3b0b ; undefined
     488:	11134919 	add	w25, w8, #0x4d2
     48c:	40071201 	.inst	0x40071201 ; undefined
     490:	19429718 	.inst	0x19429718 ; undefined
     494:	00001301 	.inst	0x00001301 ; undefined
     498:	03000506 	.inst	0x03000506 ; undefined
     49c:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
     4a0:	0213490b 	.inst	0x0213490b ; undefined
     4a4:	07000017 	.inst	0x07000017 ; undefined
     4a8:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
     4ac:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     4b0:	17021349 	b	fffffffffc0851d4 <SMC_ID_HW_RSA+0xffffffff780752cd>
     4b4:	34080000 	cbz	w0, 104b4 <_stack_size+0xf4b4>
     4b8:	3a080300 	adcs	w0, w24, w8
     4bc:	490b3b0b 	.inst	0x490b3b0b ; undefined
     4c0:	00170213 	.inst	0x00170213 ; undefined
     4c4:	012e0900 	.inst	0x012e0900 ; undefined
     4c8:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     4cc:	19270b3b 	.inst	0x19270b3b ; undefined
     4d0:	13010b20 	sbfx	w0, w25, #1, #2
     4d4:	340a0000 	cbz	w0, 144d4 <_stack_size+0x134d4>
     4d8:	3a0e0300 	adcs	w0, w24, w14
     4dc:	490b3b0b 	.inst	0x490b3b0b ; undefined
     4e0:	0b000013 	add	w19, w0, w0
     4e4:	08030034 	stxrb	w3, w20, [x1]
     4e8:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     4ec:	00001349 	.inst	0x00001349 ; undefined
     4f0:	3f012e0c 	.inst	0x3f012e0c ; undefined
     4f4:	3a0e0319 	adcs	w25, w24, w14
     4f8:	270b3b0b 	.inst	0x270b3b0b ; undefined
     4fc:	11134919 	add	w25, w8, #0x4d2
     500:	40071201 	.inst	0x40071201 ; undefined
     504:	19429718 	.inst	0x19429718 ; undefined
     508:	00001301 	.inst	0x00001301 ; undefined
     50c:	31011d0d 	adds	w13, w8, #0x47
     510:	55015213 	.inst	0x55015213 ; undefined
     514:	590b5817 	.inst	0x590b5817 ; undefined
     518:	0e00000b 	tbl	v11.8b, {v0.16b}, v0.8b
     51c:	1755010b 	b	fffffffffd540948 <SMC_ID_HW_RSA+0xffffffff79530a41>
     520:	340f0000 	cbz	w0, 1e520 <_stack_size+0x1d520>
     524:	1c133100 	ldr	s0, 26b44 <_stack_size+0x25b44>
     528:	10000006 	adr	x6, 528 <MPIDR_EL1_AFF3_LSB+0x508>
     52c:	13310034 	.inst	0x13310034 ; undefined
     530:	00001702 	.inst	0x00001702 ; undefined
     534:	01828911 	.inst	0x01828911 ; undefined
     538:	31011101 	adds	w1, w8, #0x44
     53c:	00130113 	.inst	0x00130113 ; undefined
     540:	828a1200 	.inst	0x828a1200 ; undefined
     544:	18020001 	ldr	w1, 4544 <_stack_size+0x3544>
     548:	00184291 	.inst	0x00184291 ; undefined
     54c:	82891300 	.inst	0x82891300 ; undefined
     550:	01110101 	.inst	0x01110101 ; undefined
     554:	00001331 	.inst	0x00001331 ; undefined
     558:	0b000f14 	add	w20, w24, w0, lsl #3
     55c:	0013490b 	.inst	0x0013490b ; undefined
     560:	01011500 	.inst	0x01011500 ; undefined
     564:	13011349 	sbfx	w9, w26, #1, #4
     568:	21160000 	.inst	0x21160000 ; undefined
     56c:	2f134900 	.inst	0x2f134900 ; undefined
     570:	1700000b 	b	fffffffffc00059c <SMC_ID_HW_RSA+0xffffffff77ff0695>
     574:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
     578:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     57c:	18021349 	ldr	w9, 47e4 <_stack_size+0x37e4>
     580:	01000000 	.inst	0x01000000 ; undefined
     584:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
     588:	0e030b13 	.inst	0x0e030b13 ; undefined
     58c:	01110e1b 	.inst	0x01110e1b ; undefined
     590:	17100712 	b	fffffffffc4021d8 <SMC_ID_HW_RSA+0xffffffff783f22d1>
     594:	16020000 	b	fffffffff8080594 <SMC_ID_HW_RSA+0xffffffff7407068d>
     598:	3a0e0300 	adcs	w0, w24, w14
     59c:	490b3b0b 	.inst	0x490b3b0b ; undefined
     5a0:	03000013 	.inst	0x03000013 ; undefined
     5a4:	0b0b0024 	add	w4, w1, w11
     5a8:	0e030b3e 	.inst	0x0e030b3e ; undefined
     5ac:	24040000 	.inst	0x24040000 ; undefined
     5b0:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     5b4:	0008030b 	.inst	0x0008030b ; undefined
     5b8:	01130500 	.inst	0x01130500 ; undefined
     5bc:	0b0b0e03 	add	w3, w16, w11, lsl #3
     5c0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     5c4:	00001301 	.inst	0x00001301 ; undefined
     5c8:	03000d06 	.inst	0x03000d06 ; undefined
     5cc:	3813490e 	sttrb	w14, [x8,#-204]
     5d0:	0019340b 	.inst	0x0019340b ; undefined
     5d4:	000f0700 	.inst	0x000f0700 ; undefined
     5d8:	00000b0b 	.inst	0x00000b0b ; undefined
     5dc:	03012e08 	.inst	0x03012e08 ; undefined
     5e0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     5e4:	4919270b 	.inst	0x4919270b ; undefined
     5e8:	010b2013 	.inst	0x010b2013 ; undefined
     5ec:	09000013 	.inst	0x09000013 ; undefined
     5f0:	08030005 	stxrb	w3, w5, [x0]
     5f4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     5f8:	00001349 	.inst	0x00001349 ; undefined
     5fc:	0300050a 	.inst	0x0300050a ; undefined
     600:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     604:	0013490b 	.inst	0x0013490b ; undefined
     608:	00340b00 	.inst	0x00340b00 ; NYI
     60c:	0b3a0803 	add	w3, w0, w26, uxtb #2
     610:	13490b3b 	.inst	0x13490b3b ; undefined
     614:	340c0000 	cbz	w0, 18614 <_stack_size+0x17614>
     618:	3a0e0300 	adcs	w0, w24, w14
     61c:	490b3b0b 	.inst	0x490b3b0b ; undefined
     620:	000a1c13 	.inst	0x000a1c13 ; undefined
     624:	00340d00 	.inst	0x00340d00 ; NYI
     628:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     62c:	13490b3b 	.inst	0x13490b3b ; undefined
     630:	0b0e0000 	add	w0, w0, w14
     634:	0f000001 	.inst	0x0f000001 ; undefined
     638:	0b0b000f 	add	w15, w0, w11
     63c:	00001349 	.inst	0x00001349 ; undefined
     640:	49010110 	.inst	0x49010110 ; undefined
     644:	00130113 	.inst	0x00130113 ; undefined
     648:	00211100 	.inst	0x00211100 ; NYI
     64c:	0b2f1349 	add	w9, w26, w15, uxtb #4
     650:	26120000 	.inst	0x26120000 ; undefined
     654:	00134900 	.inst	0x00134900 ; undefined
     658:	012e1300 	.inst	0x012e1300 ; undefined
     65c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     660:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     664:	13491927 	.inst	0x13491927 ; undefined
     668:	13010b20 	sbfx	w0, w25, #1, #2
     66c:	2e140000 	ext	v0.8b, v0.8b, v20.8b, #0
     670:	11133101 	add	w1, w8, #0x4cc
     674:	40071201 	.inst	0x40071201 ; undefined
     678:	19429718 	.inst	0x19429718 ; undefined
     67c:	00001301 	.inst	0x00001301 ; undefined
     680:	31000515 	adds	w21, w8, #0x1
     684:	00170213 	.inst	0x00170213 ; undefined
     688:	00051600 	.inst	0x00051600 ; undefined
     68c:	18021331 	ldr	w17, 48f0 <_stack_size+0x38f0>
     690:	34170000 	cbz	w0, 2e690 <_stack_size+0x2d690>
     694:	02133100 	.inst	0x02133100 ; undefined
     698:	18000017 	ldr	w23, 698 <MPIDR_EL1_AFF3_LSB+0x678>
     69c:	13310005 	.inst	0x13310005 ; undefined
     6a0:	00000b1c 	.inst	0x00000b1c ; undefined
     6a4:	55010b19 	.inst	0x55010b19 ; undefined
     6a8:	1a000017 	adc	w23, w0, w0
     6ac:	193f012e 	.inst	0x193f012e ; undefined
     6b0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     6b4:	19270b3b 	.inst	0x19270b3b ; undefined
     6b8:	01111349 	.inst	0x01111349 ; undefined
     6bc:	18400712 	ldr	w18, 8079c <_stack_size+0x7f79c>
     6c0:	01194297 	.inst	0x01194297 ; undefined
     6c4:	1b000013 	madd	w19, w0, w0, w0
     6c8:	08030005 	stxrb	w3, w5, [x0]
     6cc:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     6d0:	17021349 	b	fffffffffc0853f4 <SMC_ID_HW_RSA+0xffffffff780754ed>
     6d4:	341c0000 	cbz	w0, 386d4 <_stack_size+0x376d4>
     6d8:	3a080300 	adcs	w0, w24, w8
     6dc:	490b3b0b 	.inst	0x490b3b0b ; undefined
     6e0:	00180213 	.inst	0x00180213 ; undefined
     6e4:	82891d00 	.inst	0x82891d00 ; undefined
     6e8:	01110101 	.inst	0x01110101 ; undefined
     6ec:	13011331 	sbfx	w17, w25, #1, #4
     6f0:	8a1e0000 	and	x0, x0, x30
     6f4:	02000182 	.inst	0x02000182 ; undefined
     6f8:	18429118 	ldr	w24, 85918 <_stack_size+0x84918>
     6fc:	891f0000 	.inst	0x891f0000 ; undefined
     700:	11010182 	add	w2, w12, #0x40
     704:	00133101 	.inst	0x00133101 ; undefined
     708:	00342000 	.inst	0x00342000 ; NYI
     70c:	0b3a0803 	add	w3, w0, w26, uxtb #2
     710:	13490b3b 	.inst	0x13490b3b ; undefined
     714:	00001702 	.inst	0x00001702 ; undefined
     718:	03003421 	.inst	0x03003421 ; undefined
     71c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     720:	0213490b 	.inst	0x0213490b ; undefined
     724:	22000017 	.inst	0x22000017 ; undefined
     728:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
     72c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     730:	18021349 	ldr	w9, 4998 <_stack_size+0x3998>
     734:	0a230000 	bic	w0, w0, w3
     738:	3a0e0300 	adcs	w0, w24, w14
     73c:	11053b0b 	add	w11, w24, #0x14e
     740:	24000001 	.inst	0x24000001 ; undefined
     744:	0e03000a 	tbl	v10.8b, {v0.16b}, v3.8b
     748:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     74c:	0a250000 	bic	w0, w0, w5
     750:	3a080300 	adcs	w0, w24, w8
     754:	11053b0b 	add	w11, w24, #0x14e
     758:	26000001 	.inst	0x26000001 ; undefined
     75c:	1331011d 	.inst	0x1331011d ; undefined
     760:	07120111 	.inst	0x07120111 ; undefined
     764:	05590b58 	.inst	0x05590b58 ; undefined
     768:	00001301 	.inst	0x00001301 ; undefined
     76c:	11010b27 	add	w7, w25, #0x42
     770:	00071201 	.inst	0x00071201 ; undefined
     774:	00342800 	.inst	0x00342800 ; NYI
     778:	18021331 	ldr	w17, 49dc <_stack_size+0x39dc>
     77c:	0b290000 	add	w0, w0, w9, uxtb
     780:	01175501 	.inst	0x01175501 ; undefined
     784:	2a000013 	orr	w19, w0, w0
     788:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
     78c:	053b0b3a 	.inst	0x053b0b3a ; undefined
     790:	17021349 	b	fffffffffc0854b4 <SMC_ID_HW_RSA+0xffffffff780755ad>
     794:	182b0000 	ldr	w0, 56794 <_stack_size+0x55794>
     798:	2c000000 	stnp	s0, s0, [x0]
     79c:	1331011d 	.inst	0x1331011d ; undefined
     7a0:	17550152 	b	fffffffffd540ce8 <SMC_ID_HW_RSA+0xffffffff79530de1>
     7a4:	0b590b58 	add	w24, w26, w25, lsr #2
     7a8:	2e2d0000 	uaddl	v0.8h, v0.8b, v13.8b
     7ac:	03193f01 	.inst	0x03193f01 ; undefined
     7b0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     7b4:	3c192705 	str	b5, [x24],#-110
     7b8:	00130119 	.inst	0x00130119 ; undefined
     7bc:	00052e00 	.inst	0x00052e00 ; undefined
     7c0:	00001349 	.inst	0x00001349 ; undefined
     7c4:	3f012e2f 	.inst	0x3f012e2f ; undefined
     7c8:	3a0e0319 	adcs	w25, w24, w14
     7cc:	270b3b0b 	.inst	0x270b3b0b ; undefined
     7d0:	3c134919 	.inst	0x3c134919 ; undefined
     7d4:	00000019 	.inst	0x00000019 ; undefined
     7d8:	25011101 	.inst	0x25011101 ; undefined
     7dc:	030b130e 	.inst	0x030b130e ; undefined
     7e0:	1201110e 	and	w14, w8, #0x8000000f
     7e4:	00171007 	.inst	0x00171007 ; undefined
     7e8:	00240200 	.inst	0x00240200 ; NYI
     7ec:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     7f0:	00000e03 	.inst	0x00000e03 ; undefined
     7f4:	0b002403 	add	w3, w0, w0, lsl #9
     7f8:	030b3e0b 	.inst	0x030b3e0b ; undefined
     7fc:	04000008 	.inst	0x04000008 ; undefined
     800:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
     804:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     808:	00001349 	.inst	0x00001349 ; undefined
     80c:	03011305 	.inst	0x03011305 ; undefined
     810:	3a0b0b0e 	.inst	0x3a0b0b0e ; undefined
     814:	010b3b0b 	.inst	0x010b3b0b ; undefined
     818:	06000013 	.inst	0x06000013 ; undefined
     81c:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
     820:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     824:	0b381349 	add	w9, w26, w24, uxtb #4
     828:	01070000 	.inst	0x01070000 ; undefined
     82c:	01134901 	.inst	0x01134901 ; undefined
     830:	08000013 	stxrb	w0, w19, [x0]
     834:	13490021 	.inst	0x13490021 ; undefined
     838:	00000b2f 	.inst	0x00000b2f ; undefined
     83c:	03000d09 	.inst	0x03000d09 ; undefined
     840:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     844:	0b13490b 	add	w11, w8, w19, lsl #18
     848:	0c0b0d0b 	.inst	0x0c0b0d0b ; undefined
     84c:	000b380b 	.inst	0x000b380b ; undefined
     850:	000d0a00 	.inst	0x000d0a00 ; undefined
     854:	0b3a0803 	add	w3, w0, w26, uxtb #2
     858:	13490b3b 	.inst	0x13490b3b ; undefined
     85c:	00000b38 	.inst	0x00000b38 ; undefined
     860:	0b01130b 	add	w11, w24, w1, lsl #4
     864:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
     868:	0013010b 	.inst	0x0013010b ; undefined
     86c:	000f0c00 	.inst	0x000f0c00 ; undefined
     870:	13490b0b 	.inst	0x13490b0b ; undefined
     874:	040d0000 	.inst	0x040d0000 ; undefined
     878:	3a0b0b01 	.inst	0x3a0b0b01 ; undefined
     87c:	010b3b0b 	.inst	0x010b3b0b ; undefined
     880:	0e000013 	tbl	v19.8b, {v0.16b}, v0.8b
     884:	0e030028 	tbl	v8.8b, {v1.16b}, v3.8b
     888:	00000d1c 	.inst	0x00000d1c ; undefined
     88c:	3f012e0f 	.inst	0x3f012e0f ; undefined
     890:	3a0e0319 	adcs	w25, w24, w14
     894:	270b3b0b 	.inst	0x270b3b0b ; undefined
     898:	010b2019 	.inst	0x010b2019 ; undefined
     89c:	10000013 	adr	x19, 89c <MPIDR_EL1_AFF3_LSB+0x87c>
     8a0:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
     8a4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     8a8:	00001349 	.inst	0x00001349 ; undefined
     8ac:	03003411 	.inst	0x03003411 ; undefined
     8b0:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
     8b4:	0013490b 	.inst	0x0013490b ; undefined
     8b8:	010b1200 	.inst	0x010b1200 ; undefined
     8bc:	2e130000 	ext	v0.8b, v0.8b, v19.8b, #0
     8c0:	03193f01 	.inst	0x03193f01 ; undefined
     8c4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     8c8:	3c13490b 	.inst	0x3c13490b ; undefined
     8cc:	14000019 	b	930 <MPIDR_EL1_AFF3_LSB+0x910>
     8d0:	00000018 	.inst	0x00000018 ; undefined
     8d4:	49003515 	.inst	0x49003515 ; undefined
     8d8:	16000013 	b	fffffffff8000924 <SMC_ID_HW_RSA+0xffffffff73ff0a1d>
     8dc:	193f002e 	.inst	0x193f002e ; undefined
     8e0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     8e4:	0b20053b 	add	w27, w9, w0, uxtb #1
     8e8:	2e170000 	ext	v0.8b, v0.8b, v23.8b, #0
     8ec:	03193f01 	.inst	0x03193f01 ; undefined
     8f0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     8f4:	49192705 	.inst	0x49192705 ; undefined
     8f8:	010b2013 	.inst	0x010b2013 ; undefined
     8fc:	18000013 	ldr	w19, 8fc <MPIDR_EL1_AFF3_LSB+0x8dc>
     900:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
     904:	053b0b3a 	.inst	0x053b0b3a ; undefined
     908:	00001349 	.inst	0x00001349 ; undefined
     90c:	31012e19 	adds	w25, w16, #0x4b
     910:	12011113 	and	w19, w8, #0x8000000f
     914:	97184007 	bl	fffffffffc610930 <SMC_ID_HW_RSA+0xffffffff78600a29>
     918:	13011942 	sbfx	w2, w10, #1, #6
     91c:	051a0000 	.inst	0x051a0000 ; undefined
     920:	02133100 	.inst	0x02133100 ; undefined
     924:	1b000017 	madd	w23, w0, w0, w0
     928:	13310034 	.inst	0x13310034 ; undefined
     92c:	00001702 	.inst	0x00001702 ; undefined
     930:	11010b1c 	add	w28, w24, #0x42
     934:	01071201 	.inst	0x01071201 ; undefined
     938:	1d000013 	.inst	0x1d000013 ; undefined
     93c:	1347012e 	.inst	0x1347012e ; undefined
     940:	13010b20 	sbfx	w0, w25, #1, #2
     944:	891e0000 	.inst	0x891e0000 ; undefined
     948:	11010182 	add	w2, w12, #0x40
     94c:	00133101 	.inst	0x00133101 ; undefined
     950:	828a1f00 	.inst	0x828a1f00 ; undefined
     954:	18020001 	ldr	w1, 4954 <_stack_size+0x3954>
     958:	00184291 	.inst	0x00184291 ; undefined
     95c:	010b2000 	.inst	0x010b2000 ; undefined
     960:	13011755 	sbfx	w21, w26, #1, #5
     964:	0b210000 	add	w0, w0, w1, uxtb
     968:	00175501 	.inst	0x00175501 ; undefined
     96c:	00342200 	.inst	0x00342200 ; NYI
     970:	00001331 	.inst	0x00001331 ; undefined
     974:	01828923 	.inst	0x01828923 ; undefined
     978:	31011101 	adds	w1, w8, #0x44
     97c:	00130113 	.inst	0x00130113 ; undefined
     980:	82892400 	.inst	0x82892400 ; undefined
     984:	01110101 	.inst	0x01110101 ; undefined
     988:	31194295 	adds	w21, w20, #0x650
     98c:	25000013 	.inst	0x25000013 ; undefined
     990:	00018289 	.inst	0x00018289 ; undefined
     994:	13310111 	.inst	0x13310111 ; undefined
     998:	2e260000 	uaddl	v0.8h, v0.8b, v6.8b
     99c:	03193f01 	.inst	0x03193f01 ; undefined
     9a0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     9a4:	1113490b 	add	w11, w8, #0x4d2
     9a8:	40071201 	.inst	0x40071201 ; undefined
     9ac:	19429718 	.inst	0x19429718 ; undefined
     9b0:	00001301 	.inst	0x00001301 ; undefined
     9b4:	03003427 	.inst	0x03003427 ; undefined
     9b8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     9bc:	0213490b 	.inst	0x0213490b ; undefined
     9c0:	28000017 	stnp	w23, w0, [x0]
     9c4:	00018289 	.inst	0x00018289 ; undefined
     9c8:	42950111 	.inst	0x42950111 ; undefined
     9cc:	00133119 	.inst	0x00133119 ; undefined
     9d0:	012e2900 	.inst	0x012e2900 ; undefined
     9d4:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     9d8:	053b0b3a 	.inst	0x053b0b3a ; undefined
     9dc:	13491927 	.inst	0x13491927 ; undefined
     9e0:	07120111 	.inst	0x07120111 ; undefined
     9e4:	42971840 	.inst	0x42971840 ; undefined
     9e8:	00130119 	.inst	0x00130119 ; undefined
     9ec:	00052a00 	.inst	0x00052a00 ; undefined
     9f0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     9f4:	1349053b 	.inst	0x1349053b ; undefined
     9f8:	00001702 	.inst	0x00001702 ; undefined
     9fc:	0300052b 	.inst	0x0300052b ; undefined
     a00:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
     a04:	02134905 	.inst	0x02134905 ; undefined
     a08:	2c000017 	stnp	s23, s0, [x0]
     a0c:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
     a10:	053b0b3a 	.inst	0x053b0b3a ; undefined
     a14:	17021349 	b	fffffffffc085738 <SMC_ID_HW_RSA+0xffffffff78075831>
     a18:	1d2d0000 	.inst	0x1d2d0000 ; undefined
     a1c:	11133101 	add	w1, w8, #0x4cc
     a20:	58071201 	ldr	x1, ec60 <_stack_size+0xdc60>
     a24:	0105590b 	.inst	0x0105590b ; undefined
     a28:	2e000013 	ext	v19.8b, v0.8b, v0.8b, #0
     a2c:	193f012e 	.inst	0x193f012e ; undefined
     a30:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     a34:	1927053b 	.inst	0x1927053b ; undefined
     a38:	07120111 	.inst	0x07120111 ; undefined
     a3c:	42971840 	.inst	0x42971840 ; undefined
     a40:	00130119 	.inst	0x00130119 ; undefined
     a44:	00342f00 	.inst	0x00342f00 ; NYI
     a48:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     a4c:	1349053b 	.inst	0x1349053b ; undefined
     a50:	34300000 	cbz	w0, 60a50 <_stack_size+0x5fa50>
     a54:	3a080300 	adcs	w0, w24, w8
     a58:	49053b0b 	.inst	0x49053b0b ; undefined
     a5c:	000b1c13 	.inst	0x000b1c13 ; undefined
     a60:	011d3100 	.inst	0x011d3100 ; undefined
     a64:	01521331 	.inst	0x01521331 ; undefined
     a68:	0b581755 	add	w21, w26, w24, lsr #5
     a6c:	13010559 	sbfx	w25, w10, #1, #1
     a70:	34320000 	cbz	w0, 64a70 <_stack_size+0x63a70>
     a74:	3a0e0300 	adcs	w0, w24, w14
     a78:	49053b0b 	.inst	0x49053b0b ; undefined
     a7c:	000b1c13 	.inst	0x000b1c13 ; undefined
     a80:	002e3300 	.inst	0x002e3300 ; NYI
     a84:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     a88:	053b0b3a 	.inst	0x053b0b3a ; undefined
     a8c:	01111927 	.inst	0x01111927 ; undefined
     a90:	18400712 	ldr	w18, 80b70 <_stack_size+0x7fb70>
     a94:	00194297 	.inst	0x00194297 ; undefined
     a98:	00343400 	.inst	0x00343400 ; NYI
     a9c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     aa0:	13490b3b 	.inst	0x13490b3b ; undefined
     aa4:	00001802 	.inst	0x00001802 ; undefined
     aa8:	03003435 	.inst	0x03003435 ; undefined
     aac:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     ab0:	1c13490b 	ldr	s11, 273d0 <_stack_size+0x263d0>
     ab4:	36000006 	tbz	w6, #0, ab4 <MPIDR_EL1_AFF3_LSB+0xa94>
     ab8:	13490026 	.inst	0x13490026 ; undefined
     abc:	34370000 	cbz	w0, 6eabc <_stack_size+0x6dabc>
     ac0:	3a0e0300 	adcs	w0, w24, w14
     ac4:	490b3b0b 	.inst	0x490b3b0b ; undefined
     ac8:	3c193f13 	str	b19, [x24,#-109]!
     acc:	38000019 	sturb	w25, [x0]
     ad0:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
     ad4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     ad8:	193f1349 	.inst	0x193f1349 ; undefined
     adc:	00001802 	.inst	0x00001802 ; undefined
     ae0:	3f012e39 	.inst	0x3f012e39 ; undefined
     ae4:	3a0e0319 	adcs	w25, w24, w14
     ae8:	490b3b0b 	.inst	0x490b3b0b ; undefined
     aec:	01193c13 	.inst	0x01193c13 ; undefined
     af0:	3a000013 	adcs	w19, w0, w0
     af4:	193f012e 	.inst	0x193f012e ; undefined
     af8:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     afc:	1927053b 	.inst	0x1927053b ; undefined
     b00:	1301193c 	sbfx	w28, w9, #1, #6
     b04:	053b0000 	.inst	0x053b0000 ; undefined
     b08:	00134900 	.inst	0x00134900 ; undefined
     b0c:	002e3c00 	.inst	0x002e3c00 ; NYI
     b10:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     b14:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     b18:	193c1927 	.inst	0x193c1927 ; undefined
     b1c:	2e3d0000 	uaddl	v0.8h, v0.8b, v29.8b
     b20:	03193f01 	.inst	0x03193f01 ; undefined
     b24:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     b28:	3c19270b 	str	b11, [x24],#-110
     b2c:	00000019 	.inst	0x00000019 ; undefined
     b30:	25011101 	.inst	0x25011101 ; undefined
     b34:	030b130e 	.inst	0x030b130e ; undefined
     b38:	1201110e 	and	w14, w8, #0x8000000f
     b3c:	00171007 	.inst	0x00171007 ; undefined
     b40:	00240200 	.inst	0x00240200 ; NYI
     b44:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     b48:	00000e03 	.inst	0x00000e03 ; undefined
     b4c:	0b002403 	add	w3, w0, w0, lsl #9
     b50:	030b3e0b 	.inst	0x030b3e0b ; undefined
     b54:	04000008 	.inst	0x04000008 ; undefined
     b58:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
     b5c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     b60:	00001349 	.inst	0x00001349 ; undefined
     b64:	03010405 	.inst	0x03010405 ; undefined
     b68:	3a0b0b0e 	.inst	0x3a0b0b0e ; undefined
     b6c:	010b3b0b 	.inst	0x010b3b0b ; undefined
     b70:	06000013 	.inst	0x06000013 ; undefined
     b74:	0e030028 	tbl	v8.8b, {v1.16b}, v3.8b
     b78:	00000d1c 	.inst	0x00000d1c ; undefined
     b7c:	03011307 	.inst	0x03011307 ; undefined
     b80:	3a0b0b0e 	.inst	0x3a0b0b0e ; undefined
     b84:	010b3b0b 	.inst	0x010b3b0b ; undefined
     b88:	08000013 	stxrb	w0, w19, [x0]
     b8c:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
     b90:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     b94:	0b381349 	add	w9, w26, w24, uxtb #4
     b98:	0d090000 	.inst	0x0d090000 ; undefined
     b9c:	3a080300 	adcs	w0, w24, w8
     ba0:	490b3b0b 	.inst	0x490b3b0b ; undefined
     ba4:	000b3813 	.inst	0x000b3813 ; undefined
     ba8:	000f0a00 	.inst	0x000f0a00 ; undefined
     bac:	00000b0b 	.inst	0x00000b0b ; undefined
     bb0:	3f012e0b 	.inst	0x3f012e0b ; undefined
     bb4:	3a0e0319 	adcs	w25, w24, w14
     bb8:	270b3b0b 	.inst	0x270b3b0b ; undefined
     bbc:	11134919 	add	w25, w8, #0x4d2
     bc0:	40071201 	.inst	0x40071201 ; undefined
     bc4:	19429718 	.inst	0x19429718 ; undefined
     bc8:	00001301 	.inst	0x00001301 ; undefined
     bcc:	0300050c 	.inst	0x0300050c ; undefined
     bd0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     bd4:	0213490b 	.inst	0x0213490b ; undefined
     bd8:	0d000017 	st1	{v23.b}[0], [x0]
     bdc:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
     be0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     be4:	18021349 	ldr	w9, 4e4c <_stack_size+0x3e4c>
     be8:	340e0000 	cbz	w0, 1cbe8 <_stack_size+0x1bbe8>
     bec:	3a0e0300 	adcs	w0, w24, w14
     bf0:	490b3b0b 	.inst	0x490b3b0b ; undefined
     bf4:	00170213 	.inst	0x00170213 ; undefined
     bf8:	012e0f00 	.inst	0x012e0f00 ; undefined
     bfc:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     c00:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     c04:	193c1349 	.inst	0x193c1349 ; undefined
     c08:	00001301 	.inst	0x00001301 ; undefined
     c0c:	00001810 	.inst	0x00001810 ; undefined
     c10:	82891100 	.inst	0x82891100 ; undefined
     c14:	01110001 	.inst	0x01110001 ; undefined
     c18:	00001331 	.inst	0x00001331 ; undefined
     c1c:	01828912 	.inst	0x01828912 ; undefined
     c20:	31011101 	adds	w1, w8, #0x44
     c24:	00130113 	.inst	0x00130113 ; undefined
     c28:	828a1300 	.inst	0x828a1300 ; undefined
     c2c:	18020001 	ldr	w1, 4c2c <_stack_size+0x3c2c>
     c30:	00184291 	.inst	0x00184291 ; undefined
     c34:	82891400 	.inst	0x82891400 ; undefined
     c38:	01110101 	.inst	0x01110101 ; undefined
     c3c:	00001331 	.inst	0x00001331 ; undefined
     c40:	49002615 	.inst	0x49002615 ; undefined
     c44:	16000013 	b	fffffffff8000c90 <SMC_ID_HW_RSA+0xffffffff73ff0d89>
     c48:	0b0b000f 	add	w15, w0, w11
     c4c:	00001349 	.inst	0x00001349 ; undefined
     c50:	49010117 	.inst	0x49010117 ; undefined
     c54:	00130113 	.inst	0x00130113 ; undefined
     c58:	00211800 	.inst	0x00211800 ; NYI
     c5c:	0b2f1349 	add	w9, w26, w15, uxtb #4
     c60:	35190000 	cbnz	w0, 32c60 <_stack_size+0x31c60>
     c64:	00134900 	.inst	0x00134900 ; undefined
     c68:	002e1a00 	.inst	0x002e1a00 ; NYI
     c6c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     c70:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     c74:	193c1927 	.inst	0x193c1927 ; undefined
     c78:	2e1b0000 	ext	v0.8b, v0.8b, v27.8b, #0
     c7c:	03193f01 	.inst	0x03193f01 ; undefined
     c80:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     c84:	4919270b 	.inst	0x4919270b ; undefined
     c88:	01193c13 	.inst	0x01193c13 ; undefined
     c8c:	1c000013 	ldr	s19, c8c <MPIDR_EL1_AFF3_LSB+0xc6c>
     c90:	13490005 	.inst	0x13490005 ; undefined
     c94:	2e1d0000 	ext	v0.8b, v0.8b, v29.8b, #0
     c98:	03193f01 	.inst	0x03193f01 ; undefined
     c9c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     ca0:	3c19270b 	str	b11, [x24],#-110
     ca4:	00130119 	.inst	0x00130119 ; undefined
     ca8:	012e1e00 	.inst	0x012e1e00 ; undefined
     cac:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     cb0:	053b0b3a 	.inst	0x053b0b3a ; undefined
     cb4:	193c1927 	.inst	0x193c1927 ; undefined
     cb8:	00001301 	.inst	0x00001301 ; undefined
     cbc:	01110100 	.inst	0x01110100 ; undefined
     cc0:	0b130e25 	add	w5, w17, w19, lsl #3
     cc4:	17100e03 	b	fffffffffc4044d0 <SMC_ID_HW_RSA+0xffffffff783f45c9>
     cc8:	24020000 	.inst	0x24020000 ; undefined
     ccc:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     cd0:	000e030b 	.inst	0x000e030b ; undefined
     cd4:	00240300 	.inst	0x00240300 ; NYI
     cd8:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     cdc:	00000803 	.inst	0x00000803 ; undefined
     ce0:	01110100 	.inst	0x01110100 ; undefined
     ce4:	0b130e25 	add	w5, w17, w19, lsl #3
     ce8:	01110e03 	.inst	0x01110e03 ; undefined
     cec:	17100712 	b	fffffffffc402934 <SMC_ID_HW_RSA+0xffffffff783f2a2d>
     cf0:	24020000 	.inst	0x24020000 ; undefined
     cf4:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     cf8:	000e030b 	.inst	0x000e030b ; undefined
     cfc:	00240300 	.inst	0x00240300 ; NYI
     d00:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     d04:	00000803 	.inst	0x00000803 ; undefined
     d08:	03001604 	.inst	0x03001604 ; undefined
     d0c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     d10:	0013490b 	.inst	0x0013490b ; undefined
     d14:	01040500 	.inst	0x01040500 ; undefined
     d18:	0b0b0e03 	add	w3, w16, w11, lsl #3
     d1c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     d20:	00001301 	.inst	0x00001301 ; undefined
     d24:	03002806 	.inst	0x03002806 ; undefined
     d28:	000d1c0e 	.inst	0x000d1c0e ; undefined
     d2c:	01130700 	.inst	0x01130700 ; undefined
     d30:	0b0b0e03 	add	w3, w16, w11, lsl #3
     d34:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     d38:	00001301 	.inst	0x00001301 ; undefined
     d3c:	03000d08 	.inst	0x03000d08 ; undefined
     d40:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     d44:	3813490b 	sttrb	w11, [x8,#-204]
     d48:	0900000b 	.inst	0x0900000b ; undefined
     d4c:	0803000d 	stxrb	w3, w13, [x0]
     d50:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     d54:	0b381349 	add	w9, w26, w24, uxtb #4
     d58:	010a0000 	.inst	0x010a0000 ; undefined
     d5c:	01134901 	.inst	0x01134901 ; undefined
     d60:	0b000013 	add	w19, w0, w0
     d64:	13490021 	.inst	0x13490021 ; undefined
     d68:	00000b2f 	.inst	0x00000b2f ; undefined
     d6c:	03012e0c 	.inst	0x03012e0c ; undefined
     d70:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     d74:	49192705 	.inst	0x49192705 ; undefined
     d78:	010b2013 	.inst	0x010b2013 ; undefined
     d7c:	0d000013 	st1	{v19.b}[0], [x0]
     d80:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
     d84:	053b0b3a 	.inst	0x053b0b3a ; undefined
     d88:	00001349 	.inst	0x00001349 ; undefined
     d8c:	0300340e 	.inst	0x0300340e ; undefined
     d90:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     d94:	00134905 	.inst	0x00134905 ; undefined
     d98:	00340f00 	.inst	0x00340f00 ; NYI
     d9c:	0b3a0803 	add	w3, w0, w26, uxtb #2
     da0:	1349053b 	.inst	0x1349053b ; undefined
     da4:	0f100000 	.inst	0x0f100000 ; undefined
     da8:	490b0b00 	.inst	0x490b0b00 ; undefined
     dac:	11000013 	add	w19, w0, #0x0
     db0:	13490035 	.inst	0x13490035 ; undefined
     db4:	2e120000 	ext	v0.8b, v0.8b, v18.8b, #0
     db8:	11133101 	add	w1, w8, #0x4cc
     dbc:	40071201 	.inst	0x40071201 ; undefined
     dc0:	19429718 	.inst	0x19429718 ; undefined
     dc4:	00001301 	.inst	0x00001301 ; undefined
     dc8:	31003413 	adds	w19, w0, #0xd
     dcc:	00180213 	.inst	0x00180213 ; undefined
     dd0:	00341400 	.inst	0x00341400 ; NYI
     dd4:	17021331 	b	fffffffffc085a98 <SMC_ID_HW_RSA+0xffffffff78075b91>
     dd8:	05150000 	.inst	0x05150000 ; undefined
     ddc:	02133100 	.inst	0x02133100 ; undefined
     de0:	16000018 	b	fffffffff8000e40 <SMC_ID_HW_RSA+0xffffffff73ff0f39>
     de4:	00018289 	.inst	0x00018289 ; undefined
     de8:	13310111 	.inst	0x13310111 ; undefined
     dec:	89170000 	.inst	0x89170000 ; undefined
     df0:	11010182 	add	w2, w12, #0x40
     df4:	01133101 	.inst	0x01133101 ; undefined
     df8:	18000013 	ldr	w19, df8 <MPIDR_EL1_AFF3_LSB+0xdd8>
     dfc:	0001828a 	.inst	0x0001828a ; undefined
     e00:	42911802 	.inst	0x42911802 ; undefined
     e04:	19000018 	.inst	0x19000018 ; undefined
     e08:	193f012e 	.inst	0x193f012e ; undefined
     e0c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     e10:	19270b3b 	.inst	0x19270b3b ; undefined
     e14:	01111349 	.inst	0x01111349 ; undefined
     e18:	18400712 	ldr	w18, 80ef8 <_stack_size+0x7fef8>
     e1c:	01194297 	.inst	0x01194297 ; undefined
     e20:	1a000013 	adc	w19, w0, w0
     e24:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
     e28:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     e2c:	17021349 	b	fffffffffc085b50 <SMC_ID_HW_RSA+0xffffffff78075c49>
     e30:	051b0000 	.inst	0x051b0000 ; undefined
     e34:	3a080300 	adcs	w0, w24, w8
     e38:	490b3b0b 	.inst	0x490b3b0b ; undefined
     e3c:	00170213 	.inst	0x00170213 ; undefined
     e40:	00341c00 	.inst	0x00341c00 ; NYI
     e44:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     e48:	13490b3b 	.inst	0x13490b3b ; undefined
     e4c:	193c193f 	.inst	0x193c193f ; undefined
     e50:	341d0000 	cbz	w0, 3ae50 <_stack_size+0x39e50>
     e54:	490e0300 	.inst	0x490e0300 ; undefined
     e58:	02193413 	.inst	0x02193413 ; undefined
     e5c:	1e000018 	.inst	0x1e000018 ; undefined
     e60:	00018289 	.inst	0x00018289 ; undefined
     e64:	42950111 	.inst	0x42950111 ; undefined
     e68:	00133119 	.inst	0x00133119 ; undefined
     e6c:	82891f00 	.inst	0x82891f00 ; undefined
     e70:	01110101 	.inst	0x01110101 ; undefined
     e74:	00001331 	.inst	0x00001331 ; undefined
     e78:	49002620 	.inst	0x49002620 ; undefined
     e7c:	21000013 	.inst	0x21000013 ; undefined
     e80:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
     e84:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     e88:	18021349 	ldr	w9, 50f0 <_stack_size+0x40f0>
     e8c:	2e220000 	uaddl	v0.8h, v0.8b, v2.8b
     e90:	03193f01 	.inst	0x03193f01 ; undefined
     e94:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     e98:	3c19270b 	str	b11, [x24],#-110
     e9c:	00130119 	.inst	0x00130119 ; undefined
     ea0:	00052300 	.inst	0x00052300 ; undefined
     ea4:	00001349 	.inst	0x00001349 ; undefined
     ea8:	3f002e24 	.inst	0x3f002e24 ; undefined
     eac:	3a0e0319 	adcs	w25, w24, w14
     eb0:	270b3b0b 	.inst	0x270b3b0b ; undefined
     eb4:	00193c19 	.inst	0x00193c19 ; undefined
     eb8:	012e2500 	.inst	0x012e2500 ; undefined
     ebc:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     ec0:	053b0b3a 	.inst	0x053b0b3a ; undefined
     ec4:	193c1927 	.inst	0x193c1927 ; undefined
     ec8:	00001301 	.inst	0x00001301 ; undefined
     ecc:	00002626 	.inst	0x00002626 ; undefined
     ed0:	000f2700 	.inst	0x000f2700 ; undefined
     ed4:	00000b0b 	.inst	0x00000b0b ; undefined
     ed8:	01110100 	.inst	0x01110100 ; undefined
     edc:	0b130e25 	add	w5, w17, w19, lsl #3
     ee0:	01110e03 	.inst	0x01110e03 ; undefined
     ee4:	17100712 	b	fffffffffc402b2c <SMC_ID_HW_RSA+0xffffffff783f2c25>
     ee8:	24020000 	.inst	0x24020000 ; undefined
     eec:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     ef0:	000e030b 	.inst	0x000e030b ; undefined
     ef4:	00240300 	.inst	0x00240300 ; NYI
     ef8:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     efc:	00000803 	.inst	0x00000803 ; undefined
     f00:	03001604 	.inst	0x03001604 ; undefined
     f04:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     f08:	0013490b 	.inst	0x0013490b ; undefined
     f0c:	01040500 	.inst	0x01040500 ; undefined
     f10:	0b0b0e03 	add	w3, w16, w11, lsl #3
     f14:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     f18:	00001301 	.inst	0x00001301 ; undefined
     f1c:	03002806 	.inst	0x03002806 ; undefined
     f20:	000d1c0e 	.inst	0x000d1c0e ; undefined
     f24:	01130700 	.inst	0x01130700 ; undefined
     f28:	0b3a050b 	add	w11, w8, w26, uxtb #1
     f2c:	13010b3b 	sbfx	w27, w25, #1, #2
     f30:	0d080000 	.inst	0x0d080000 ; undefined
     f34:	3a0e0300 	adcs	w0, w24, w14
     f38:	490b3b0b 	.inst	0x490b3b0b ; undefined
     f3c:	000b3813 	.inst	0x000b3813 ; undefined
     f40:	01010900 	.inst	0x01010900 ; undefined
     f44:	13011349 	sbfx	w9, w26, #1, #4
     f48:	210a0000 	.inst	0x210a0000 ; undefined
     f4c:	2f134900 	.inst	0x2f134900 ; undefined
     f50:	0b00000b 	add	w11, w0, w0
     f54:	0b0b0113 	add	w19, w8, w11
     f58:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     f5c:	00001301 	.inst	0x00001301 ; undefined
     f60:	03000d0c 	.inst	0x03000d0c ; undefined
     f64:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
     f68:	3813490b 	sttrb	w11, [x8,#-204]
     f6c:	0d00000b 	st1	{v11.b}[0], [x0]
     f70:	0b0b000f 	add	w15, w0, w11
     f74:	00001349 	.inst	0x00001349 ; undefined
     f78:	4900260e 	.inst	0x4900260e ; undefined
     f7c:	0f000013 	.inst	0x0f000013 ; undefined
     f80:	0e03002e 	tbl	v14.8b, {v1.16b}, v3.8b
     f84:	053b0b3a 	.inst	0x053b0b3a ; undefined
     f88:	13491927 	.inst	0x13491927 ; undefined
     f8c:	00000b20 	.inst	0x00000b20 ; undefined
     f90:	03012e10 	.inst	0x03012e10 ; undefined
     f94:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     f98:	49192705 	.inst	0x49192705 ; undefined
     f9c:	010b2013 	.inst	0x010b2013 ; undefined
     fa0:	11000013 	add	w19, w0, #0x0
     fa4:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
     fa8:	053b0b3a 	.inst	0x053b0b3a ; undefined
     fac:	00001349 	.inst	0x00001349 ; undefined
     fb0:	03003412 	.inst	0x03003412 ; undefined
     fb4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     fb8:	00134905 	.inst	0x00134905 ; undefined
     fbc:	012e1300 	.inst	0x012e1300 ; undefined
     fc0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     fc4:	1927053b 	.inst	0x1927053b ; undefined
     fc8:	13010b20 	sbfx	w0, w25, #1, #2
     fcc:	2e140000 	ext	v0.8b, v0.8b, v20.8b, #0
     fd0:	3a0e0300 	adcs	w0, w24, w14
     fd4:	27053b0b 	.inst	0x27053b0b ; undefined
     fd8:	000b2019 	.inst	0x000b2019 ; undefined
     fdc:	00211500 	.inst	0x00211500 ; NYI
     fe0:	052f1349 	.inst	0x052f1349 ; undefined
     fe4:	34160000 	cbz	w0, 2cfe4 <_stack_size+0x2bfe4>
     fe8:	3a080300 	adcs	w0, w24, w8
     fec:	49053b0b 	.inst	0x49053b0b ; undefined
     ff0:	17000013 	b	fffffffffc00103c <SMC_ID_HW_RSA+0xffffffff77ff1135>
     ff4:	08030005 	stxrb	w3, w5, [x0]
     ff8:	053b0b3a 	.inst	0x053b0b3a ; undefined
     ffc:	00001349 	.inst	0x00001349 ; undefined
    1000:	31002e18 	adds	w24, w16, #0xb
    1004:	12011113 	and	w19, w8, #0x8000000f
    1008:	97184007 	bl	fffffffffc611024 <SMC_ID_HW_RSA+0xffffffff7860111d>
    100c:	00001942 	.inst	0x00001942 ; undefined
    1010:	03012e19 	.inst	0x03012e19 ; undefined
    1014:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1018:	49192705 	.inst	0x49192705 ; undefined
    101c:	12011113 	and	w19, w8, #0x8000000f
    1020:	97184007 	bl	fffffffffc61103c <SMC_ID_HW_RSA+0xffffffff78601135>
    1024:	13011942 	sbfx	w2, w10, #1, #6
    1028:	051a0000 	.inst	0x051a0000 ; undefined
    102c:	3a0e0300 	adcs	w0, w24, w14
    1030:	49053b0b 	.inst	0x49053b0b ; undefined
    1034:	00170213 	.inst	0x00170213 ; undefined
    1038:	012e1b00 	.inst	0x012e1b00 ; undefined
    103c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1040:	1927053b 	.inst	0x1927053b ; undefined
    1044:	07120111 	.inst	0x07120111 ; undefined
    1048:	42971840 	.inst	0x42971840 ; undefined
    104c:	00130119 	.inst	0x00130119 ; undefined
    1050:	00051c00 	.inst	0x00051c00 ; undefined
    1054:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1058:	1349053b 	.inst	0x1349053b ; undefined
    105c:	00001802 	.inst	0x00001802 ; undefined
    1060:	0182891d 	.inst	0x0182891d ; undefined
    1064:	31011101 	adds	w1, w8, #0x44
    1068:	00130113 	.inst	0x00130113 ; undefined
    106c:	828a1e00 	.inst	0x828a1e00 ; undefined
    1070:	18020001 	ldr	w1, 5070 <_stack_size+0x4070>
    1074:	00184291 	.inst	0x00184291 ; undefined
    1078:	82891f00 	.inst	0x82891f00 ; undefined
    107c:	01110101 	.inst	0x01110101 ; undefined
    1080:	00001331 	.inst	0x00001331 ; undefined
    1084:	3f012e20 	.inst	0x3f012e20 ; undefined
    1088:	3a0e0319 	adcs	w25, w24, w14
    108c:	270b3b0b 	.inst	0x270b3b0b ; undefined
    1090:	11134919 	add	w25, w8, #0x4d2
    1094:	40071201 	.inst	0x40071201 ; undefined
    1098:	19429718 	.inst	0x19429718 ; undefined
    109c:	00001301 	.inst	0x00001301 ; undefined
    10a0:	03000521 	.inst	0x03000521 ; undefined
    10a4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    10a8:	0213490b 	.inst	0x0213490b ; undefined
    10ac:	22000017 	.inst	0x22000017 ; undefined
    10b0:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    10b4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    10b8:	17021349 	b	fffffffffc085ddc <SMC_ID_HW_RSA+0xffffffff78075ed5>
    10bc:	0a230000 	bic	w0, w0, w3
    10c0:	3a0e0300 	adcs	w0, w24, w14
    10c4:	110b3b0b 	add	w11, w24, #0x2ce
    10c8:	24000001 	.inst	0x24000001 ; undefined
    10cc:	00018289 	.inst	0x00018289 ; undefined
    10d0:	13310111 	.inst	0x13310111 ; undefined
    10d4:	2e250000 	uaddl	v0.8h, v0.8b, v5.8b
    10d8:	11133101 	add	w1, w8, #0x4cc
    10dc:	40071201 	.inst	0x40071201 ; undefined
    10e0:	19429718 	.inst	0x19429718 ; undefined
    10e4:	00001301 	.inst	0x00001301 ; undefined
    10e8:	31003426 	adds	w6, w1, #0xd
    10ec:	00170213 	.inst	0x00170213 ; undefined
    10f0:	00342700 	.inst	0x00342700 ; NYI
    10f4:	18021331 	ldr	w17, 5358 <_stack_size+0x4358>
    10f8:	05280000 	.inst	0x05280000 ; undefined
    10fc:	1c133100 	ldr	s0, 2771c <_stack_size+0x2671c>
    1100:	2900000b 	stp	w11, w0, [x0]
    1104:	13310005 	.inst	0x13310005 ; undefined
    1108:	0000051c 	.inst	0x0000051c ; undefined
    110c:	31011d2a 	adds	w10, w9, #0x47
    1110:	55015213 	.inst	0x55015213 ; undefined
    1114:	590b5817 	.inst	0x590b5817 ; undefined
    1118:	00130105 	.inst	0x00130105 ; undefined
    111c:	00052b00 	.inst	0x00052b00 ; undefined
    1120:	18021331 	ldr	w17, 5384 <_stack_size+0x4384>
    1124:	0b2c0000 	add	w0, w0, w12, uxtb
    1128:	00175501 	.inst	0x00175501 ; undefined
    112c:	012e2d00 	.inst	0x012e2d00 ; undefined
    1130:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    1134:	053b0b3a 	.inst	0x053b0b3a ; undefined
    1138:	13491927 	.inst	0x13491927 ; undefined
    113c:	07120111 	.inst	0x07120111 ; undefined
    1140:	42971840 	.inst	0x42971840 ; undefined
    1144:	00130119 	.inst	0x00130119 ; undefined
    1148:	00342e00 	.inst	0x00342e00 ; NYI
    114c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1150:	1349053b 	.inst	0x1349053b ; undefined
    1154:	00001702 	.inst	0x00001702 ; undefined
    1158:	03000a2f 	.inst	0x03000a2f ; undefined
    115c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1160:	00011105 	.inst	0x00011105 ; undefined
    1164:	00343000 	.inst	0x00343000 ; NYI
    1168:	0b3a0803 	add	w3, w0, w26, uxtb #2
    116c:	1349053b 	.inst	0x1349053b ; undefined
    1170:	00001702 	.inst	0x00001702 ; undefined
    1174:	31000531 	adds	w17, w9, #0x1
    1178:	00170213 	.inst	0x00170213 ; undefined
    117c:	001d3200 	.inst	0x001d3200 ; undefined
    1180:	01111331 	.inst	0x01111331 ; undefined
    1184:	0b580712 	add	w18, w24, w24, lsr #1
    1188:	00000559 	.inst	0x00000559 ; undefined
    118c:	31001d33 	adds	w19, w9, #0x7
    1190:	55015213 	.inst	0x55015213 ; undefined
    1194:	590b5817 	.inst	0x590b5817 ; undefined
    1198:	34000005 	cbz	w5, 1198 <_stack_size+0x198>
    119c:	1331011d 	.inst	0x1331011d ; undefined
    11a0:	17550152 	b	fffffffffd5416e8 <SMC_ID_HW_RSA+0xffffffff795317e1>
    11a4:	05590b58 	.inst	0x05590b58 ; undefined
    11a8:	05350000 	.inst	0x05350000 ; undefined
    11ac:	3a080300 	adcs	w0, w24, w8
    11b0:	49053b0b 	.inst	0x49053b0b ; undefined
    11b4:	00170213 	.inst	0x00170213 ; undefined
    11b8:	011d3600 	.inst	0x011d3600 ; undefined
    11bc:	01111331 	.inst	0x01111331 ; undefined
    11c0:	0b580712 	add	w18, w24, w24, lsr #1
    11c4:	13010559 	sbfx	w25, w10, #1, #1
    11c8:	34370000 	cbz	w0, 6f1c8 <_stack_size+0x6e1c8>
    11cc:	3a0e0300 	adcs	w0, w24, w14
    11d0:	490b3b0b 	.inst	0x490b3b0b ; undefined
    11d4:	38000013 	sturb	w19, [x0]
    11d8:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    11dc:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    11e0:	193f1349 	.inst	0x193f1349 ; undefined
    11e4:	00001802 	.inst	0x00001802 ; undefined
    11e8:	3f012e39 	.inst	0x3f012e39 ; undefined
    11ec:	3a0e0319 	adcs	w25, w24, w14
    11f0:	270b3b0b 	.inst	0x270b3b0b ; undefined
    11f4:	3c134919 	.inst	0x3c134919 ; undefined
    11f8:	00130119 	.inst	0x00130119 ; undefined
    11fc:	00053a00 	.inst	0x00053a00 ; undefined
    1200:	00001349 	.inst	0x00001349 ; undefined
    1204:	3f002e3b 	.inst	0x3f002e3b ; undefined
    1208:	3a0e0319 	adcs	w25, w24, w14
    120c:	270b3b0b 	.inst	0x270b3b0b ; undefined
    1210:	00193c19 	.inst	0x00193c19 ; undefined
    1214:	012e3c00 	.inst	0x012e3c00 ; undefined
    1218:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    121c:	053b0b3a 	.inst	0x053b0b3a ; undefined
    1220:	193c1927 	.inst	0x193c1927 ; undefined
    1224:	00001301 	.inst	0x00001301 ; undefined
    1228:	0b000f3d 	add	w29, w25, w0, lsl #3
    122c:	0000000b 	.inst	0x0000000b ; undefined
    1230:	25011101 	.inst	0x25011101 ; undefined
    1234:	030b130e 	.inst	0x030b130e ; undefined
    1238:	1201110e 	and	w14, w8, #0x8000000f
    123c:	00171007 	.inst	0x00171007 ; undefined
    1240:	00240200 	.inst	0x00240200 ; NYI
    1244:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
    1248:	00000e03 	.inst	0x00000e03 ; undefined
    124c:	0b002403 	add	w3, w0, w0, lsl #9
    1250:	030b3e0b 	.inst	0x030b3e0b ; undefined
    1254:	04000008 	.inst	0x04000008 ; undefined
    1258:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
    125c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1260:	00001349 	.inst	0x00001349 ; undefined
    1264:	0b000f05 	add	w5, w24, w0, lsl #3
    1268:	0013490b 	.inst	0x0013490b ; undefined
    126c:	012e0600 	.inst	0x012e0600 ; undefined
    1270:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    1274:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1278:	13491927 	.inst	0x13491927 ; undefined
    127c:	07120111 	.inst	0x07120111 ; undefined
    1280:	42971840 	.inst	0x42971840 ; undefined
    1284:	00130119 	.inst	0x00130119 ; undefined
    1288:	00340700 	.inst	0x00340700 ; NYI
    128c:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1290:	13490b3b 	.inst	0x13490b3b ; undefined
    1294:	00000b1c 	.inst	0x00000b1c ; undefined
    1298:	03003408 	.inst	0x03003408 ; undefined
    129c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    12a0:	1c13490b 	ldr	s11, 27bc0 <_stack_size+0x26bc0>
    12a4:	09000006 	.inst	0x09000006 ; undefined
    12a8:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    12ac:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    12b0:	00001349 	.inst	0x00001349 ; undefined
    12b4:	0300340a 	.inst	0x0300340a ; undefined
    12b8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    12bc:	0213490b 	.inst	0x0213490b ; undefined
    12c0:	0b000017 	add	w23, w0, w0
    12c4:	0111010b 	.inst	0x0111010b ; undefined
    12c8:	13010712 	sbfx	w18, w24, #1, #1
    12cc:	2e0c0000 	ext	v0.8b, v0.8b, v12.8b, #0
    12d0:	03193f01 	.inst	0x03193f01 ; undefined
    12d4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    12d8:	3c13490b 	.inst	0x3c13490b ; undefined
    12dc:	00130119 	.inst	0x00130119 ; undefined
    12e0:	00180d00 	.inst	0x00180d00 ; undefined
    12e4:	890e0000 	.inst	0x890e0000 ; undefined
    12e8:	11000182 	add	w2, w12, #0x0
    12ec:	00133101 	.inst	0x00133101 ; undefined
    12f0:	82890f00 	.inst	0x82890f00 ; undefined
    12f4:	01110101 	.inst	0x01110101 ; undefined
    12f8:	13011331 	sbfx	w17, w25, #1, #4
    12fc:	8a100000 	and	x0, x0, x16
    1300:	02000182 	.inst	0x02000182 ; undefined
    1304:	18429118 	ldr	w24, 86524 <_stack_size+0x85524>
    1308:	89110000 	.inst	0x89110000 ; undefined
    130c:	11010182 	add	w2, w12, #0x40
    1310:	00133101 	.inst	0x00133101 ; undefined
    1314:	010b1200 	.inst	0x010b1200 ; undefined
    1318:	07120111 	.inst	0x07120111 ; undefined
    131c:	2e130000 	ext	v0.8b, v0.8b, v19.8b, #0
    1320:	03193f01 	.inst	0x03193f01 ; undefined
    1324:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1328:	49192705 	.inst	0x49192705 ; undefined
    132c:	12011113 	and	w19, w8, #0x8000000f
    1330:	97184007 	bl	fffffffffc61134c <SMC_ID_HW_RSA+0xffffffff78601445>
    1334:	13011942 	sbfx	w2, w10, #1, #6
    1338:	05140000 	.inst	0x05140000 ; undefined
    133c:	3a0e0300 	adcs	w0, w24, w14
    1340:	49053b0b 	.inst	0x49053b0b ; undefined
    1344:	00170213 	.inst	0x00170213 ; undefined
    1348:	00051500 	.inst	0x00051500 ; undefined
    134c:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1350:	1349053b 	.inst	0x1349053b ; undefined
    1354:	00001702 	.inst	0x00001702 ; undefined
    1358:	03003416 	.inst	0x03003416 ; undefined
    135c:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    1360:	02134905 	.inst	0x02134905 ; undefined
    1364:	17000017 	b	fffffffffc0013c0 <SMC_ID_HW_RSA+0xffffffff77ff14b9>
    1368:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    136c:	053b0b3a 	.inst	0x053b0b3a ; undefined
    1370:	18021349 	ldr	w9, 55d8 <_stack_size+0x45d8>
    1374:	35180000 	cbnz	w0, 31374 <_stack_size+0x30374>
    1378:	00134900 	.inst	0x00134900 ; undefined
    137c:	00051900 	.inst	0x00051900 ; undefined
    1380:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1384:	13490b3b 	.inst	0x13490b3b ; undefined
    1388:	00001702 	.inst	0x00001702 ; undefined
    138c:	0300341a 	.inst	0x0300341a ; undefined
    1390:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1394:	0213490b 	.inst	0x0213490b ; undefined
    1398:	1b000018 	madd	w24, w0, w0, w0
    139c:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    13a0:	053b0b3a 	.inst	0x053b0b3a ; undefined
    13a4:	17021349 	b	fffffffffc0860c8 <SMC_ID_HW_RSA+0xffffffff780761c1>
    13a8:	891c0000 	.inst	0x891c0000 ; undefined
    13ac:	11000182 	add	w2, w12, #0x0
    13b0:	19429501 	.inst	0x19429501 ; undefined
    13b4:	00001331 	.inst	0x00001331 ; undefined
    13b8:	3f002e1d 	.inst	0x3f002e1d ; undefined
    13bc:	3a0e0319 	adcs	w25, w24, w14
    13c0:	270b3b0b 	.inst	0x270b3b0b ; undefined
    13c4:	00193c19 	.inst	0x00193c19 ; undefined
    13c8:	012e1e00 	.inst	0x012e1e00 ; undefined
    13cc:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    13d0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    13d4:	13491927 	.inst	0x13491927 ; undefined
    13d8:	1301193c 	sbfx	w28, w9, #1, #6
    13dc:	051f0000 	.inst	0x051f0000 ; undefined
    13e0:	00134900 	.inst	0x00134900 ; undefined
    13e4:	11010000 	add	w0, w0, #0x40
    13e8:	130e2501 	sbfiz	w1, w8, #18, #10
    13ec:	110e030b 	add	w11, w24, #0x380
    13f0:	10071201 	adr	x1, f630 <_stack_size+0xe630>
    13f4:	02000017 	.inst	0x02000017 ; undefined
    13f8:	0b0b0024 	add	w4, w1, w11
    13fc:	0e030b3e 	.inst	0x0e030b3e ; undefined
    1400:	24030000 	.inst	0x24030000 ; undefined
    1404:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
    1408:	0008030b 	.inst	0x0008030b ; undefined
    140c:	00160400 	.inst	0x00160400 ; undefined
    1410:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1414:	13490b3b 	.inst	0x13490b3b ; undefined
    1418:	2e050000 	ext	v0.8b, v0.8b, v5.8b, #0
    141c:	3a0e0301 	adcs	w1, w24, w14
    1420:	27053b0b 	.inst	0x27053b0b ; undefined
    1424:	11134919 	add	w25, w8, #0x4d2
    1428:	40071201 	.inst	0x40071201 ; undefined
    142c:	19429718 	.inst	0x19429718 ; undefined
    1430:	00001301 	.inst	0x00001301 ; undefined
    1434:	03000506 	.inst	0x03000506 ; undefined
    1438:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    143c:	02134905 	.inst	0x02134905 ; undefined
    1440:	07000017 	.inst	0x07000017 ; undefined
    1444:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    1448:	053b0b3a 	.inst	0x053b0b3a ; undefined
    144c:	17021349 	b	fffffffffc086170 <SMC_ID_HW_RSA+0xffffffff78076269>
    1450:	34080000 	cbz	w0, 11450 <_stack_size+0x10450>
    1454:	3a080300 	adcs	w0, w24, w8
    1458:	49053b0b 	.inst	0x49053b0b ; undefined
    145c:	00170213 	.inst	0x00170213 ; undefined
    1460:	82890900 	.inst	0x82890900 ; undefined
    1464:	01110001 	.inst	0x01110001 ; undefined
    1468:	00001331 	.inst	0x00001331 ; undefined
    146c:	0b000f0a 	add	w10, w24, w0, lsl #3
    1470:	0013490b 	.inst	0x0013490b ; undefined
    1474:	012e0b00 	.inst	0x012e0b00 ; undefined
    1478:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    147c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1480:	13491927 	.inst	0x13491927 ; undefined
    1484:	07120111 	.inst	0x07120111 ; undefined
    1488:	42971840 	.inst	0x42971840 ; undefined
    148c:	00130119 	.inst	0x00130119 ; undefined
    1490:	00050c00 	.inst	0x00050c00 ; undefined
    1494:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1498:	13490b3b 	.inst	0x13490b3b ; undefined
    149c:	00001702 	.inst	0x00001702 ; undefined
    14a0:	0300340d 	.inst	0x0300340d ; undefined
    14a4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    14a8:	0213490b 	.inst	0x0213490b ; undefined
    14ac:	0e000017 	tbl	v23.8b, {v0.16b}, v0.8b
    14b0:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    14b4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    14b8:	061c1349 	.inst	0x061c1349 ; undefined
    14bc:	340f0000 	cbz	w0, 1f4bc <_stack_size+0x1e4bc>
    14c0:	3a0e0300 	adcs	w0, w24, w14
    14c4:	490b3b0b 	.inst	0x490b3b0b ; undefined
    14c8:	00180213 	.inst	0x00180213 ; undefined
    14cc:	00341000 	.inst	0x00341000 ; NYI
    14d0:	0b3a0803 	add	w3, w0, w26, uxtb #2
    14d4:	13490b3b 	.inst	0x13490b3b ; undefined
    14d8:	2e110000 	ext	v0.8b, v0.8b, v17.8b, #0
    14dc:	03193f01 	.inst	0x03193f01 ; undefined
    14e0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    14e4:	3c13490b 	.inst	0x3c13490b ; undefined
    14e8:	00130119 	.inst	0x00130119 ; undefined
    14ec:	00181200 	.inst	0x00181200 ; undefined
    14f0:	01130000 	.inst	0x01130000 ; undefined
    14f4:	01134901 	.inst	0x01134901 ; undefined
    14f8:	14000013 	b	1544 <_stack_size+0x544>
    14fc:	13490021 	.inst	0x13490021 ; undefined
    1500:	00000b2f 	.inst	0x00000b2f ; undefined
    1504:	3f012e15 	.inst	0x3f012e15 ; undefined
    1508:	3a0e0319 	adcs	w25, w24, w14
    150c:	27053b0b 	.inst	0x27053b0b ; undefined
    1510:	11134919 	add	w25, w8, #0x4d2
    1514:	40071201 	.inst	0x40071201 ; undefined
    1518:	19429718 	.inst	0x19429718 ; undefined
    151c:	00001301 	.inst	0x00001301 ; undefined
    1520:	03003416 	.inst	0x03003416 ; undefined
    1524:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1528:	1c134905 	ldr	s5, 27e48 <_stack_size+0x26e48>
    152c:	17000006 	b	fffffffffc001544 <SMC_ID_HW_RSA+0xffffffff77ff163d>
    1530:	193f012e 	.inst	0x193f012e ; undefined
    1534:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1538:	1927053b 	.inst	0x1927053b ; undefined
    153c:	07120111 	.inst	0x07120111 ; undefined
    1540:	42971840 	.inst	0x42971840 ; undefined
    1544:	00130119 	.inst	0x00130119 ; undefined
    1548:	00051800 	.inst	0x00051800 ; undefined
    154c:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1550:	1349053b 	.inst	0x1349053b ; undefined
    1554:	00001702 	.inst	0x00001702 ; undefined
    1558:	03003419 	.inst	0x03003419 ; undefined
    155c:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    1560:	1c134905 	ldr	s5, 27e80 <_stack_size+0x26e80>
    1564:	1a00000b 	adc	w11, w0, w0
    1568:	01018289 	.inst	0x01018289 ; undefined
    156c:	42950111 	.inst	0x42950111 ; undefined
    1570:	00133119 	.inst	0x00133119 ; undefined
    1574:	828a1b00 	.inst	0x828a1b00 ; undefined
    1578:	18020001 	ldr	w1, 5578 <_stack_size+0x4578>
    157c:	00184291 	.inst	0x00184291 ; undefined
    1580:	012e1c00 	.inst	0x012e1c00 ; undefined
    1584:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    1588:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    158c:	13491927 	.inst	0x13491927 ; undefined
    1590:	1301193c 	sbfx	w28, w9, #1, #6
    1594:	051d0000 	.inst	0x051d0000 ; undefined
    1598:	00134900 	.inst	0x00134900 ; undefined
    159c:	002e1e00 	.inst	0x002e1e00 ; NYI
    15a0:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    15a4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    15a8:	193c1927 	.inst	0x193c1927 ; undefined
    15ac:	01000000 	.inst	0x01000000 ; undefined
    15b0:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
    15b4:	0e030b13 	.inst	0x0e030b13 ; undefined
    15b8:	07120111 	.inst	0x07120111 ; undefined
    15bc:	00001710 	.inst	0x00001710 ; undefined
    15c0:	0b002402 	add	w2, w0, w0, lsl #9
    15c4:	030b3e0b 	.inst	0x030b3e0b ; undefined
    15c8:	0300000e 	.inst	0x0300000e ; undefined
    15cc:	0b0b0024 	add	w4, w1, w11
    15d0:	08030b3e 	stxrb	w3, w30, [x25]
    15d4:	16040000 	b	fffffffff81015d4 <SMC_ID_HW_RSA+0xffffffff740f16cd>
    15d8:	3a0e0300 	adcs	w0, w24, w14
    15dc:	490b3b0b 	.inst	0x490b3b0b ; undefined
    15e0:	05000013 	.inst	0x05000013 ; undefined
    15e4:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
    15e8:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    15ec:	13491927 	.inst	0x13491927 ; undefined
    15f0:	07120111 	.inst	0x07120111 ; undefined
    15f4:	42971840 	.inst	0x42971840 ; undefined
    15f8:	00130119 	.inst	0x00130119 ; undefined
    15fc:	00050600 	.inst	0x00050600 ; undefined
    1600:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1604:	13490b3b 	.inst	0x13490b3b ; undefined
    1608:	00001702 	.inst	0x00001702 ; undefined
    160c:	03003407 	.inst	0x03003407 ; undefined
    1610:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    1614:	0213490b 	.inst	0x0213490b ; undefined
    1618:	08000017 	stxrb	w0, w23, [x0]
    161c:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    1620:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1624:	17021349 	b	fffffffffc086348 <SMC_ID_HW_RSA+0xffffffff78076441>
    1628:	2e090000 	ext	v0.8b, v0.8b, v9.8b, #0
    162c:	03193f01 	.inst	0x03193f01 ; undefined
    1630:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1634:	1119270b 	add	w11, w24, #0x649
    1638:	40071201 	.inst	0x40071201 ; undefined
    163c:	19429718 	.inst	0x19429718 ; undefined
    1640:	00001301 	.inst	0x00001301 ; undefined
    1644:	0182890a 	.inst	0x0182890a ; undefined
    1648:	95011100 	bl	4045a48 <_stack_base+0x10382c8>
    164c:	13311942 	.inst	0x13311942 ; undefined
    1650:	2e0b0000 	ext	v0.8b, v0.8b, v11.8b, #0
    1654:	03193f01 	.inst	0x03193f01 ; undefined
    1658:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    165c:	4919270b 	.inst	0x4919270b ; undefined
    1660:	12011113 	and	w19, w8, #0x8000000f
    1664:	97184007 	bl	fffffffffc611680 <SMC_ID_HW_RSA+0xffffffff78601779>
    1668:	13011942 	sbfx	w2, w10, #1, #6
    166c:	050c0000 	.inst	0x050c0000 ; undefined
    1670:	3a080300 	adcs	w0, w24, w8
    1674:	490b3b0b 	.inst	0x490b3b0b ; undefined
    1678:	00170213 	.inst	0x00170213 ; undefined
    167c:	000a0d00 	.inst	0x000a0d00 ; undefined
    1680:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1684:	01110b3b 	.inst	0x01110b3b ; undefined
    1688:	890e0000 	.inst	0x890e0000 ; undefined
    168c:	11010182 	add	w2, w12, #0x40
    1690:	01133101 	.inst	0x01133101 ; undefined
    1694:	0f000013 	.inst	0x0f000013 ; undefined
    1698:	0001828a 	.inst	0x0001828a ; undefined
    169c:	42911802 	.inst	0x42911802 ; undefined
    16a0:	10000018 	adr	x24, 16a0 <_stack_size+0x6a0>
    16a4:	01018289 	.inst	0x01018289 ; undefined
    16a8:	13310111 	.inst	0x13310111 ; undefined
    16ac:	0f110000 	.inst	0x0f110000 ; undefined
    16b0:	490b0b00 	.inst	0x490b0b00 ; undefined
    16b4:	12000013 	and	w19, w0, #0x1
    16b8:	193f002e 	.inst	0x193f002e ; undefined
    16bc:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    16c0:	19270b3b 	.inst	0x19270b3b ; undefined
    16c4:	0000193c 	.inst	0x0000193c ; undefined
    16c8:	3f012e13 	.inst	0x3f012e13 ; undefined
    16cc:	3a0e0319 	adcs	w25, w24, w14
    16d0:	270b3b0b 	.inst	0x270b3b0b ; undefined
    16d4:	00193c19 	.inst	0x00193c19 ; undefined
    16d8:	00051400 	.inst	0x00051400 ; undefined
    16dc:	00001349 	.inst	0x00001349 ; undefined
    16e0:	01110100 	.inst	0x01110100 ; undefined
    16e4:	0b130e25 	add	w5, w17, w19, lsl #3
    16e8:	0e1b0e03 	dup	v3.8b, w16
    16ec:	07120111 	.inst	0x07120111 ; undefined
    16f0:	00001710 	.inst	0x00001710 ; undefined
    16f4:	0b002402 	add	w2, w0, w0, lsl #9
    16f8:	030b3e0b 	.inst	0x030b3e0b ; undefined
    16fc:	0300000e 	.inst	0x0300000e ; undefined
    1700:	0b0b0024 	add	w4, w1, w11
    1704:	08030b3e 	stxrb	w3, w30, [x25]
    1708:	04040000 	.inst	0x04040000 ; undefined
    170c:	0b0e0301 	add	w1, w24, w14
    1710:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    1714:	0013010b 	.inst	0x0013010b ; undefined
    1718:	00280500 	.inst	0x00280500 ; NYI
    171c:	0d1c0e03 	.inst	0x0d1c0e03 ; undefined
    1720:	16060000 	b	fffffffff8181720 <SMC_ID_HW_RSA+0xffffffff74171819>
    1724:	3a0e0300 	adcs	w0, w24, w14
    1728:	490b3b0b 	.inst	0x490b3b0b ; undefined
    172c:	07000013 	.inst	0x07000013 ; undefined
    1730:	0e030113 	tbl	v19.8b, {v8.16b}, v3.8b
    1734:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
    1738:	13010b3b 	sbfx	w27, w25, #1, #2
    173c:	0d080000 	.inst	0x0d080000 ; undefined
    1740:	3a0e0300 	adcs	w0, w24, w14
    1744:	490b3b0b 	.inst	0x490b3b0b ; undefined
    1748:	000b3813 	.inst	0x000b3813 ; undefined
    174c:	000d0900 	.inst	0x000d0900 ; undefined
    1750:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1754:	13490b3b 	.inst	0x13490b3b ; undefined
    1758:	0b0d0b0b 	add	w11, w24, w13, lsl #2
    175c:	0b380b0c 	add	w12, w24, w24, uxtb #2
    1760:	130a0000 	sbfiz	w0, w0, #22, #1
    1764:	0b0e0301 	add	w1, w24, w14
    1768:	3b0b3a05 	.inst	0x3b0b3a05 ; undefined
    176c:	0013010b 	.inst	0x0013010b ; undefined
    1770:	000d0b00 	.inst	0x000d0b00 ; undefined
    1774:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1778:	13490b3b 	.inst	0x13490b3b ; undefined
    177c:	00000538 	.inst	0x00000538 ; undefined
    1780:	4901010c 	.inst	0x4901010c ; undefined
    1784:	00130113 	.inst	0x00130113 ; undefined
    1788:	00210d00 	.inst	0x00210d00 ; NYI
    178c:	0b2f1349 	add	w9, w26, w15, uxtb #4
    1790:	2e0e0000 	ext	v0.8b, v0.8b, v14.8b, #0
    1794:	03193f01 	.inst	0x03193f01 ; undefined
    1798:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    179c:	1119270b 	add	w11, w24, #0x649
    17a0:	40071201 	.inst	0x40071201 ; undefined
    17a4:	19429718 	.inst	0x19429718 ; undefined
    17a8:	00001301 	.inst	0x00001301 ; undefined
    17ac:	0300050f 	.inst	0x0300050f ; undefined
    17b0:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    17b4:	0213490b 	.inst	0x0213490b ; undefined
    17b8:	10000017 	adr	x23, 17b8 <_stack_size+0x7b8>
    17bc:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
    17c0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    17c4:	17021349 	b	fffffffffc0864e8 <SMC_ID_HW_RSA+0xffffffff780765e1>
    17c8:	89110000 	.inst	0x89110000 ; undefined
    17cc:	11010182 	add	w2, w12, #0x40
    17d0:	19429501 	.inst	0x19429501 ; undefined
    17d4:	13011331 	sbfx	w17, w25, #1, #4
    17d8:	8a120000 	and	x0, x0, x18
    17dc:	02000182 	.inst	0x02000182 ; undefined
    17e0:	18429118 	ldr	w24, 86a00 <_stack_size+0x85a00>
    17e4:	89130000 	.inst	0x89130000 ; undefined
    17e8:	11010182 	add	w2, w12, #0x40
    17ec:	19429501 	.inst	0x19429501 ; undefined
    17f0:	00001331 	.inst	0x00001331 ; undefined
    17f4:	0b000f14 	add	w20, w24, w0, lsl #3
    17f8:	0013490b 	.inst	0x0013490b ; undefined
    17fc:	00261500 	.inst	0x00261500 ; NYI
    1800:	00001349 	.inst	0x00001349 ; undefined
    1804:	03003416 	.inst	0x03003416 ; undefined
    1808:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    180c:	0013490b 	.inst	0x0013490b ; undefined
    1810:	00341700 	.inst	0x00341700 ; NYI
    1814:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1818:	13490b3b 	.inst	0x13490b3b ; undefined
    181c:	00001702 	.inst	0x00001702 ; undefined
    1820:	01828918 	.inst	0x01828918 ; undefined
    1824:	31011101 	adds	w1, w8, #0x44
    1828:	00130113 	.inst	0x00130113 ; undefined
    182c:	82891900 	.inst	0x82891900 ; undefined
    1830:	01110001 	.inst	0x01110001 ; undefined
    1834:	00001331 	.inst	0x00001331 ; undefined
    1838:	3f012e1a 	.inst	0x3f012e1a ; undefined
    183c:	3a0e0319 	adcs	w25, w24, w14
    1840:	270b3b0b 	.inst	0x270b3b0b ; undefined
    1844:	11134919 	add	w25, w8, #0x4d2
    1848:	40071201 	.inst	0x40071201 ; undefined
    184c:	19429718 	.inst	0x19429718 ; undefined
    1850:	00001301 	.inst	0x00001301 ; undefined
    1854:	0300341b 	.inst	0x0300341b ; undefined
    1858:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    185c:	0213490b 	.inst	0x0213490b ; undefined
    1860:	1c000017 	ldr	s23, 1860 <_stack_size+0x860>
    1864:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    1868:	19341349 	.inst	0x19341349 ; undefined
    186c:	00001802 	.inst	0x00001802 ; undefined
    1870:	0182891d 	.inst	0x0182891d ; undefined
    1874:	31011101 	adds	w1, w8, #0x44
    1878:	1e000013 	.inst	0x1e000013 ; undefined
    187c:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    1880:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1884:	193f1349 	.inst	0x193f1349 ; undefined
    1888:	00001802 	.inst	0x00001802 ; undefined
    188c:	0300341f 	.inst	0x0300341f ; undefined
    1890:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1894:	3f13490b 	.inst	0x3f13490b ; undefined
    1898:	00193c19 	.inst	0x00193c19 ; undefined
    189c:	012e2000 	.inst	0x012e2000 ; undefined
    18a0:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    18a4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    18a8:	13491927 	.inst	0x13491927 ; undefined
    18ac:	1301193c 	sbfx	w28, w9, #1, #6
    18b0:	05210000 	.inst	0x05210000 ; undefined
    18b4:	00134900 	.inst	0x00134900 ; undefined
    18b8:	00182200 	.inst	0x00182200 ; undefined
    18bc:	2e230000 	uaddl	v0.8h, v0.8b, v3.8b
    18c0:	03193f00 	.inst	0x03193f00 ; undefined
    18c4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    18c8:	3c19270b 	str	b11, [x24],#-110
    18cc:	24000019 	.inst	0x24000019 ; undefined
    18d0:	193f012e 	.inst	0x193f012e ; undefined
    18d4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    18d8:	1927053b 	.inst	0x1927053b ; undefined
    18dc:	1301193c 	sbfx	w28, w9, #1, #6
    18e0:	2e250000 	uaddl	v0.8h, v0.8b, v5.8b
    18e4:	03193f01 	.inst	0x03193f01 ; undefined
    18e8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    18ec:	3c192705 	str	b5, [x24],#-110
    18f0:	00000019 	.inst	0x00000019 ; undefined
    18f4:	25011101 	.inst	0x25011101 ; undefined
    18f8:	030b130e 	.inst	0x030b130e ; undefined
    18fc:	110e1b0e 	add	w14, w24, #0x386
    1900:	10071201 	adr	x1, fb40 <_stack_size+0xeb40>
    1904:	02000017 	.inst	0x02000017 ; undefined
    1908:	0b0b0024 	add	w4, w1, w11
    190c:	0e030b3e 	.inst	0x0e030b3e ; undefined
    1910:	24030000 	.inst	0x24030000 ; undefined
    1914:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
    1918:	0008030b 	.inst	0x0008030b ; undefined
    191c:	00160400 	.inst	0x00160400 ; undefined
    1920:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1924:	13490b3b 	.inst	0x13490b3b ; undefined
    1928:	01050000 	.inst	0x01050000 ; undefined
    192c:	01134901 	.inst	0x01134901 ; undefined
    1930:	06000013 	.inst	0x06000013 ; undefined
    1934:	13490021 	.inst	0x13490021 ; undefined
    1938:	00000b2f 	.inst	0x00000b2f ; undefined
    193c:	03010407 	.inst	0x03010407 ; undefined
    1940:	3a0b0b0e 	.inst	0x3a0b0b0e ; undefined
    1944:	010b3b0b 	.inst	0x010b3b0b ; undefined
    1948:	08000013 	stxrb	w0, w19, [x0]
    194c:	0e030028 	tbl	v8.8b, {v1.16b}, v3.8b
    1950:	00000d1c 	.inst	0x00000d1c ; undefined
    1954:	03011309 	.inst	0x03011309 ; undefined
    1958:	3a0b0b0e 	.inst	0x3a0b0b0e ; undefined
    195c:	010b3b0b 	.inst	0x010b3b0b ; undefined
    1960:	0a000013 	and	w19, w0, w0
    1964:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
    1968:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    196c:	0b381349 	add	w9, w26, w24, uxtb #4
    1970:	130b0000 	sbfiz	w0, w0, #21, #1
    1974:	0b0e0301 	add	w1, w24, w14
    1978:	3b0b3a05 	.inst	0x3b0b3a05 ; undefined
    197c:	0013010b 	.inst	0x0013010b ; undefined
    1980:	000d0c00 	.inst	0x000d0c00 ; undefined
    1984:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1988:	13490b3b 	.inst	0x13490b3b ; undefined
    198c:	00000538 	.inst	0x00000538 ; undefined
    1990:	4900210d 	.inst	0x4900210d ; undefined
    1994:	00052f13 	.inst	0x00052f13 ; undefined
    1998:	000d0e00 	.inst	0x000d0e00 ; undefined
    199c:	0b3a0803 	add	w3, w0, w26, uxtb #2
    19a0:	13490b3b 	.inst	0x13490b3b ; undefined
    19a4:	00000b38 	.inst	0x00000b38 ; undefined
    19a8:	0b000f0f 	add	w15, w24, w0, lsl #3
    19ac:	1000000b 	adr	x11, 19ac <_stack_size+0x9ac>
    19b0:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
    19b4:	053b0b3a 	.inst	0x053b0b3a ; undefined
    19b8:	13491927 	.inst	0x13491927 ; undefined
    19bc:	13010b20 	sbfx	w0, w25, #1, #2
    19c0:	05110000 	.inst	0x05110000 ; undefined
    19c4:	3a0e0300 	adcs	w0, w24, w14
    19c8:	49053b0b 	.inst	0x49053b0b ; undefined
    19cc:	12000013 	and	w19, w0, #0x1
    19d0:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    19d4:	053b0b3a 	.inst	0x053b0b3a ; undefined
    19d8:	00001349 	.inst	0x00001349 ; undefined
    19dc:	0b000f13 	add	w19, w24, w0, lsl #3
    19e0:	0013490b 	.inst	0x0013490b ; undefined
    19e4:	012e1400 	.inst	0x012e1400 ; undefined
    19e8:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    19ec:	19270b3b 	.inst	0x19270b3b ; undefined
    19f0:	01111349 	.inst	0x01111349 ; undefined
    19f4:	18400712 	ldr	w18, 81ad4 <_stack_size+0x80ad4>
    19f8:	01194297 	.inst	0x01194297 ; undefined
    19fc:	15000013 	b	4001a48 <_stack_base+0xff42c8>
    1a00:	08030005 	stxrb	w3, w5, [x0]
    1a04:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1a08:	17021349 	b	fffffffffc08672c <SMC_ID_HW_RSA+0xffffffff78076825>
    1a0c:	34160000 	cbz	w0, 2da0c <_stack_size+0x2ca0c>
    1a10:	3a0e0300 	adcs	w0, w24, w14
    1a14:	490b3b0b 	.inst	0x490b3b0b ; undefined
    1a18:	00170213 	.inst	0x00170213 ; undefined
    1a1c:	011d1700 	.inst	0x011d1700 ; undefined
    1a20:	01521331 	.inst	0x01521331 ; undefined
    1a24:	0b581755 	add	w21, w26, w24, lsr #5
    1a28:	13010b59 	sbfx	w25, w26, #1, #2
    1a2c:	05180000 	.inst	0x05180000 ; undefined
    1a30:	02133100 	.inst	0x02133100 ; undefined
    1a34:	19000017 	.inst	0x19000017 ; undefined
    1a38:	1755010b 	b	fffffffffd541e64 <SMC_ID_HW_RSA+0xffffffff79531f5d>
    1a3c:	341a0000 	cbz	w0, 35a3c <_stack_size+0x34a3c>
    1a40:	02133100 	.inst	0x02133100 ; undefined
    1a44:	1b000018 	madd	w24, w0, w0, w0
    1a48:	01018289 	.inst	0x01018289 ; undefined
    1a4c:	13310111 	.inst	0x13310111 ; undefined
    1a50:	8a1c0000 	and	x0, x0, x28
    1a54:	02000182 	.inst	0x02000182 ; undefined
    1a58:	18429118 	ldr	w24, 86c78 <_stack_size+0x85c78>
    1a5c:	1d1d0000 	.inst	0x1d1d0000 ; undefined
    1a60:	52133101 	eor	w1, w8, #0x3ffe000
    1a64:	58175501 	ldr	x1, 30504 <_stack_size+0x2f504>
    1a68:	000b590b 	.inst	0x000b590b ; undefined
    1a6c:	00051e00 	.inst	0x00051e00 ; undefined
    1a70:	18021331 	ldr	w17, 5cd4 <_stack_size+0x4cd4>
    1a74:	261f0000 	.inst	0x261f0000 ; undefined
    1a78:	00134900 	.inst	0x00134900 ; undefined
    1a7c:	012e2000 	.inst	0x012e2000 ; undefined
    1a80:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    1a84:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1a88:	13491927 	.inst	0x13491927 ; undefined
    1a8c:	07120111 	.inst	0x07120111 ; undefined
    1a90:	42971840 	.inst	0x42971840 ; undefined
    1a94:	00130119 	.inst	0x00130119 ; undefined
    1a98:	00342100 	.inst	0x00342100 ; NYI
    1a9c:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1aa0:	13490b3b 	.inst	0x13490b3b ; undefined
    1aa4:	00001702 	.inst	0x00001702 ; undefined
    1aa8:	03003422 	.inst	0x03003422 ; undefined
    1aac:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1ab0:	1c13490b 	ldr	s11, 283d0 <_stack_size+0x273d0>
    1ab4:	23000005 	.inst	0x23000005 ; undefined
    1ab8:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    1abc:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1ac0:	18021349 	ldr	w9, 5d28 <_stack_size+0x4d28>
    1ac4:	89240000 	.inst	0x89240000 ; undefined
    1ac8:	11010182 	add	w2, w12, #0x40
    1acc:	01133101 	.inst	0x01133101 ; undefined
    1ad0:	25000013 	.inst	0x25000013 ; undefined
    1ad4:	00018289 	.inst	0x00018289 ; undefined
    1ad8:	13310111 	.inst	0x13310111 ; undefined
    1adc:	34260000 	cbz	w0, 4dadc <_stack_size+0x4cadc>
    1ae0:	3a0e0300 	adcs	w0, w24, w14
    1ae4:	490b3b0b 	.inst	0x490b3b0b ; undefined
    1ae8:	00061c13 	.inst	0x00061c13 ; undefined
    1aec:	00342700 	.inst	0x00342700 ; NYI
    1af0:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1af4:	13490b3b 	.inst	0x13490b3b ; undefined
    1af8:	00000b1c 	.inst	0x00000b1c ; undefined
    1afc:	55010b28 	.inst	0x55010b28 ; undefined
    1b00:	00130117 	.inst	0x00130117 ; undefined
    1b04:	012e2900 	.inst	0x012e2900 ; undefined
    1b08:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    1b0c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1b10:	193c1349 	.inst	0x193c1349 ; undefined
    1b14:	00001301 	.inst	0x00001301 ; undefined
    1b18:	0000182a 	.inst	0x0000182a ; undefined
    1b1c:	010b2b00 	.inst	0x010b2b00 ; undefined
    1b20:	07120111 	.inst	0x07120111 ; undefined
    1b24:	00001301 	.inst	0x00001301 ; undefined
    1b28:	3f012e2c 	.inst	0x3f012e2c ; undefined
    1b2c:	3a0e0319 	adcs	w25, w24, w14
    1b30:	270b3b0b 	.inst	0x270b3b0b ; undefined
    1b34:	3c134919 	.inst	0x3c134919 ; undefined
    1b38:	00130119 	.inst	0x00130119 ; undefined
    1b3c:	00052d00 	.inst	0x00052d00 ; undefined
    1b40:	00001349 	.inst	0x00001349 ; undefined
    1b44:	0300342e 	.inst	0x0300342e ; undefined
    1b48:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1b4c:	3f13490b 	.inst	0x3f13490b ; undefined
    1b50:	00180219 	.inst	0x00180219 ; undefined
    1b54:	00342f00 	.inst	0x00342f00 ; NYI
    1b58:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1b5c:	13490b3b 	.inst	0x13490b3b ; undefined
    1b60:	193c193f 	.inst	0x193c193f ; undefined
    1b64:	2e300000 	uaddl	v0.8h, v0.8b, v16.8b
    1b68:	03193f00 	.inst	0x03193f00 ; undefined
    1b6c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1b70:	4919270b 	.inst	0x4919270b ; undefined
    1b74:	00193c13 	.inst	0x00193c13 ; undefined
    1b78:	012e3100 	.inst	0x012e3100 ; undefined
    1b7c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    1b80:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1b84:	19270e6e 	.inst	0x19270e6e ; undefined
    1b88:	193c1349 	.inst	0x193c1349 ; undefined
    1b8c:	00001301 	.inst	0x00001301 ; undefined
    1b90:	3f012e32 	.inst	0x3f012e32 ; undefined
    1b94:	3a0e0319 	adcs	w25, w24, w14
    1b98:	270b3b0b 	.inst	0x270b3b0b ; undefined
    1b9c:	01193c19 	.inst	0x01193c19 ; undefined
    1ba0:	33000013 	bfxil	w19, w0, #0, #1
    1ba4:	00000026 	.inst	0x00000026 ; undefined
    1ba8:	3f012e34 	.inst	0x3f012e34 ; undefined
    1bac:	3a0e0319 	adcs	w25, w24, w14
    1bb0:	270b3b0b 	.inst	0x270b3b0b ; undefined
    1bb4:	3c134919 	.inst	0x3c134919 ; undefined
    1bb8:	00000019 	.inst	0x00000019 ; undefined
    1bbc:	25011101 	.inst	0x25011101 ; undefined
    1bc0:	030b130e 	.inst	0x030b130e ; undefined
    1bc4:	1201110e 	and	w14, w8, #0x8000000f
    1bc8:	00171007 	.inst	0x00171007 ; undefined
    1bcc:	00240200 	.inst	0x00240200 ; NYI
    1bd0:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
    1bd4:	00000e03 	.inst	0x00000e03 ; undefined
    1bd8:	0b002403 	add	w3, w0, w0, lsl #9
    1bdc:	030b3e0b 	.inst	0x030b3e0b ; undefined
    1be0:	04000008 	.inst	0x04000008 ; undefined
    1be4:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
    1be8:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1bec:	00001349 	.inst	0x00001349 ; undefined
    1bf0:	0b010405 	add	w5, w0, w1, lsl #1
    1bf4:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    1bf8:	0013010b 	.inst	0x0013010b ; undefined
    1bfc:	00280600 	.inst	0x00280600 ; NYI
    1c00:	0d1c0e03 	.inst	0x0d1c0e03 ; undefined
    1c04:	13070000 	sbfiz	w0, w0, #25, #1
    1c08:	0b0e0301 	add	w1, w24, w14
    1c0c:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    1c10:	0013010b 	.inst	0x0013010b ; undefined
    1c14:	000d0800 	.inst	0x000d0800 ; undefined
    1c18:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1c1c:	13490b3b 	.inst	0x13490b3b ; undefined
    1c20:	00000b38 	.inst	0x00000b38 ; undefined
    1c24:	03000d09 	.inst	0x03000d09 ; undefined
    1c28:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1c2c:	0b13490b 	add	w11, w8, w19, lsl #18
    1c30:	0c0b0d0b 	.inst	0x0c0b0d0b ; undefined
    1c34:	000b380b 	.inst	0x000b380b ; undefined
    1c38:	01010a00 	.inst	0x01010a00 ; undefined
    1c3c:	13011349 	sbfx	w9, w26, #1, #4
    1c40:	210b0000 	.inst	0x210b0000 ; undefined
    1c44:	2f134900 	.inst	0x2f134900 ; undefined
    1c48:	0c00000b 	st4	{v11.8b-v14.8b}, [x0]
    1c4c:	0e030113 	tbl	v19.8b, {v8.16b}, v3.8b
    1c50:	0b3a050b 	add	w11, w8, w26, uxtb #1
    1c54:	13010b3b 	sbfx	w27, w25, #1, #2
    1c58:	0d0d0000 	.inst	0x0d0d0000 ; undefined
    1c5c:	3a0e0300 	adcs	w0, w24, w14
    1c60:	490b3b0b 	.inst	0x490b3b0b ; undefined
    1c64:	00053813 	.inst	0x00053813 ; undefined
    1c68:	00210e00 	.inst	0x00210e00 ; NYI
    1c6c:	052f1349 	.inst	0x052f1349 ; undefined
    1c70:	040f0000 	.inst	0x040f0000 ; undefined
    1c74:	0b0e0301 	add	w1, w24, w14
    1c78:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    1c7c:	0013010b 	.inst	0x0013010b ; undefined
    1c80:	012e1000 	.inst	0x012e1000 ; undefined
    1c84:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1c88:	1927053b 	.inst	0x1927053b ; undefined
    1c8c:	0b201349 	add	w9, w26, w0, uxtb #4
    1c90:	00001301 	.inst	0x00001301 ; undefined
    1c94:	03000511 	.inst	0x03000511 ; undefined
    1c98:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1c9c:	00134905 	.inst	0x00134905 ; undefined
    1ca0:	00051200 	.inst	0x00051200 ; undefined
    1ca4:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1ca8:	1349053b 	.inst	0x1349053b ; undefined
    1cac:	0f130000 	.inst	0x0f130000 ; undefined
    1cb0:	490b0b00 	.inst	0x490b0b00 ; undefined
    1cb4:	14000013 	b	1d00 <_stack_size+0xd00>
    1cb8:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
    1cbc:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1cc0:	13491927 	.inst	0x13491927 ; undefined
    1cc4:	13010b20 	sbfx	w0, w25, #1, #2
    1cc8:	05150000 	.inst	0x05150000 ; undefined
    1ccc:	3a0e0300 	adcs	w0, w24, w14
    1cd0:	490b3b0b 	.inst	0x490b3b0b ; undefined
    1cd4:	16000013 	b	fffffffff8001d20 <SMC_ID_HW_RSA+0xffffffff73ff1e19>
    1cd8:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    1cdc:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1ce0:	00001349 	.inst	0x00001349 ; undefined
    1ce4:	03003417 	.inst	0x03003417 ; undefined
    1ce8:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    1cec:	0013490b 	.inst	0x0013490b ; undefined
    1cf0:	00341800 	.inst	0x00341800 ; NYI
    1cf4:	13490e03 	.inst	0x13490e03 ; undefined
    1cf8:	0e1c1934 	uzp1	v20.8b, v9.8b, v28.8b
    1cfc:	26190000 	.inst	0x26190000 ; undefined
    1d00:	00134900 	.inst	0x00134900 ; undefined
    1d04:	012e1a00 	.inst	0x012e1a00 ; undefined
    1d08:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1d0c:	19270b3b 	.inst	0x19270b3b ; undefined
    1d10:	01111349 	.inst	0x01111349 ; undefined
    1d14:	18400712 	ldr	w18, 81df4 <_stack_size+0x80df4>
    1d18:	01194297 	.inst	0x01194297 ; undefined
    1d1c:	1b000013 	madd	w19, w0, w0, w0
    1d20:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
    1d24:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1d28:	17021349 	b	fffffffffc086a4c <SMC_ID_HW_RSA+0xffffffff78076b45>
    1d2c:	051c0000 	.inst	0x051c0000 ; undefined
    1d30:	3a080300 	adcs	w0, w24, w8
    1d34:	490b3b0b 	.inst	0x490b3b0b ; undefined
    1d38:	00170213 	.inst	0x00170213 ; undefined
    1d3c:	00341d00 	.inst	0x00341d00 ; NYI
    1d40:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1d44:	13490b3b 	.inst	0x13490b3b ; undefined
    1d48:	00001702 	.inst	0x00001702 ; undefined
    1d4c:	0300341e 	.inst	0x0300341e ; undefined
    1d50:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1d54:	0213490b 	.inst	0x0213490b ; undefined
    1d58:	1f000017 	fmadd	s23, s0, s0, s0
    1d5c:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    1d60:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1d64:	18021349 	ldr	w9, 5fcc <_stack_size+0x4fcc>
    1d68:	89200000 	.inst	0x89200000 ; undefined
    1d6c:	11010182 	add	w2, w12, #0x40
    1d70:	01133101 	.inst	0x01133101 ; undefined
    1d74:	21000013 	.inst	0x21000013 ; undefined
    1d78:	0001828a 	.inst	0x0001828a ; undefined
    1d7c:	42911802 	.inst	0x42911802 ; undefined
    1d80:	22000018 	.inst	0x22000018 ; undefined
    1d84:	01018289 	.inst	0x01018289 ; undefined
    1d88:	13310111 	.inst	0x13310111 ; undefined
    1d8c:	2e230000 	uaddl	v0.8h, v0.8b, v3.8b
    1d90:	03193f01 	.inst	0x03193f01 ; undefined
    1d94:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1d98:	4919270b 	.inst	0x4919270b ; undefined
    1d9c:	12011113 	and	w19, w8, #0x8000000f
    1da0:	97184007 	bl	fffffffffc611dbc <SMC_ID_HW_RSA+0xffffffff78601eb5>
    1da4:	13011942 	sbfx	w2, w10, #1, #6
    1da8:	34240000 	cbz	w0, 49da8 <_stack_size+0x48da8>
    1dac:	3a080300 	adcs	w0, w24, w8
    1db0:	490b3b0b 	.inst	0x490b3b0b ; undefined
    1db4:	000b1c13 	.inst	0x000b1c13 ; undefined
    1db8:	011d2500 	.inst	0x011d2500 ; undefined
    1dbc:	01521331 	.inst	0x01521331 ; undefined
    1dc0:	0b581755 	add	w21, w26, w24, lsr #5
    1dc4:	00000b59 	.inst	0x00000b59 ; undefined
    1dc8:	31000526 	adds	w6, w9, #0x1
    1dcc:	000b1c13 	.inst	0x000b1c13 ; undefined
    1dd0:	010b2700 	.inst	0x010b2700 ; undefined
    1dd4:	00001755 	.inst	0x00001755 ; undefined
    1dd8:	31003428 	adds	w8, w1, #0xd
    1ddc:	00170213 	.inst	0x00170213 ; undefined
    1de0:	00342900 	.inst	0x00342900 ; NYI
    1de4:	18021331 	ldr	w17, 6048 <_stack_size+0x5048>
    1de8:	1d2a0000 	.inst	0x1d2a0000 ; undefined
    1dec:	52133101 	eor	w1, w8, #0x3ffe000
    1df0:	58175501 	ldr	x1, 30890 <_stack_size+0x2f890>
    1df4:	010b590b 	.inst	0x010b590b ; undefined
    1df8:	2b000013 	adds	w19, w0, w0
    1dfc:	13310005 	.inst	0x13310005 ; undefined
    1e00:	00001802 	.inst	0x00001802 ; undefined
    1e04:	3100052c 	adds	w12, w9, #0x1
    1e08:	00170213 	.inst	0x00170213 ; undefined
    1e0c:	82892d00 	.inst	0x82892d00 ; undefined
    1e10:	01110001 	.inst	0x01110001 ; undefined
    1e14:	00001331 	.inst	0x00001331 ; undefined
    1e18:	0182892e 	.inst	0x0182892e ; undefined
    1e1c:	95011100 	bl	404621c <_stack_base+0x1038a9c>
    1e20:	13311942 	.inst	0x13311942 ; undefined
    1e24:	892f0000 	.inst	0x892f0000 ; undefined
    1e28:	11010182 	add	w2, w12, #0x40
    1e2c:	19429501 	.inst	0x19429501 ; undefined
    1e30:	00001331 	.inst	0x00001331 ; undefined
    1e34:	03003430 	.inst	0x03003430 ; undefined
    1e38:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1e3c:	3f13490b 	.inst	0x3f13490b ; undefined
    1e40:	00193c19 	.inst	0x00193c19 ; undefined
    1e44:	012e3100 	.inst	0x012e3100 ; undefined
    1e48:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    1e4c:	053b0b3a 	.inst	0x053b0b3a ; undefined
    1e50:	193c1927 	.inst	0x193c1927 ; undefined
    1e54:	00001301 	.inst	0x00001301 ; undefined
    1e58:	49000532 	.inst	0x49000532 ; undefined
    1e5c:	33000013 	bfxil	w19, w0, #0, #1
    1e60:	193f012e 	.inst	0x193f012e ; undefined
    1e64:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1e68:	19270b3b 	.inst	0x19270b3b ; undefined
    1e6c:	1301193c 	sbfx	w28, w9, #1, #6
    1e70:	2e340000 	uaddl	v0.8h, v0.8b, v20.8b
    1e74:	03193f01 	.inst	0x03193f01 ; undefined
    1e78:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1e7c:	4919270b 	.inst	0x4919270b ; undefined
    1e80:	01193c13 	.inst	0x01193c13 ; undefined
    1e84:	35000013 	cbnz	w19, 1e84 <_stack_size+0xe84>
    1e88:	0b0b000f 	add	w15, w0, w11
    1e8c:	01000000 	.inst	0x01000000 ; undefined
    1e90:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
    1e94:	0e030b13 	.inst	0x0e030b13 ; undefined
    1e98:	07120111 	.inst	0x07120111 ; undefined
    1e9c:	00001710 	.inst	0x00001710 ; undefined
    1ea0:	0b002402 	add	w2, w0, w0, lsl #9
    1ea4:	030b3e0b 	.inst	0x030b3e0b ; undefined
    1ea8:	0300000e 	.inst	0x0300000e ; undefined
    1eac:	0b0b0024 	add	w4, w1, w11
    1eb0:	08030b3e 	stxrb	w3, w30, [x25]
    1eb4:	16040000 	b	fffffffff8101eb4 <SMC_ID_HW_RSA+0xffffffff740f1fad>
    1eb8:	3a0e0300 	adcs	w0, w24, w14
    1ebc:	490b3b0b 	.inst	0x490b3b0b ; undefined
    1ec0:	05000013 	.inst	0x05000013 ; undefined
    1ec4:	0e030104 	tbl	v4.8b, {v8.16b}, v3.8b
    1ec8:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
    1ecc:	13010b3b 	sbfx	w27, w25, #1, #2
    1ed0:	28060000 	stnp	w0, w0, [x0,#48]
    1ed4:	1c0e0300 	ldr	s0, 1df34 <_stack_size+0x1cf34>
    1ed8:	0700000d 	.inst	0x0700000d ; undefined
    1edc:	0e030113 	tbl	v19.8b, {v8.16b}, v3.8b
    1ee0:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
    1ee4:	13010b3b 	sbfx	w27, w25, #1, #2
    1ee8:	0d080000 	.inst	0x0d080000 ; undefined
    1eec:	3a0e0300 	adcs	w0, w24, w14
    1ef0:	490b3b0b 	.inst	0x490b3b0b ; undefined
    1ef4:	000b3813 	.inst	0x000b3813 ; undefined
    1ef8:	000d0900 	.inst	0x000d0900 ; undefined
    1efc:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1f00:	13490b3b 	.inst	0x13490b3b ; undefined
    1f04:	0b0d0b0b 	add	w11, w24, w13, lsl #2
    1f08:	0b380b0c 	add	w12, w24, w24, uxtb #2
    1f0c:	130a0000 	sbfiz	w0, w0, #22, #1
    1f10:	0b0e0301 	add	w1, w24, w14
    1f14:	3b0b3a05 	.inst	0x3b0b3a05 ; undefined
    1f18:	0013010b 	.inst	0x0013010b ; undefined
    1f1c:	000d0b00 	.inst	0x000d0b00 ; undefined
    1f20:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1f24:	13490b3b 	.inst	0x13490b3b ; undefined
    1f28:	00000538 	.inst	0x00000538 ; undefined
    1f2c:	4901010c 	.inst	0x4901010c ; undefined
    1f30:	00130113 	.inst	0x00130113 ; undefined
    1f34:	00210d00 	.inst	0x00210d00 ; NYI
    1f38:	0b2f1349 	add	w9, w26, w15, uxtb #4
    1f3c:	210e0000 	.inst	0x210e0000 ; undefined
    1f40:	2f134900 	.inst	0x2f134900 ; undefined
    1f44:	0f000005 	.inst	0x0f000005 ; undefined
    1f48:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
    1f4c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1f50:	13491927 	.inst	0x13491927 ; undefined
    1f54:	13010b20 	sbfx	w0, w25, #1, #2
    1f58:	05100000 	.inst	0x05100000 ; undefined
    1f5c:	3a0e0300 	adcs	w0, w24, w14
    1f60:	490b3b0b 	.inst	0x490b3b0b ; undefined
    1f64:	11000013 	add	w19, w0, #0x0
    1f68:	08030005 	stxrb	w3, w5, [x0]
    1f6c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1f70:	00001349 	.inst	0x00001349 ; undefined
    1f74:	0b000f12 	add	w18, w24, w0, lsl #3
    1f78:	1300000b 	sbfx	w11, w0, #0, #1
    1f7c:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    1f80:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1f84:	00001349 	.inst	0x00001349 ; undefined
    1f88:	03003414 	.inst	0x03003414 ; undefined
    1f8c:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    1f90:	0013490b 	.inst	0x0013490b ; undefined
    1f94:	00341500 	.inst	0x00341500 ; NYI
    1f98:	13490e03 	.inst	0x13490e03 ; undefined
    1f9c:	0e1c1934 	uzp1	v20.8b, v9.8b, v28.8b
    1fa0:	0f160000 	.inst	0x0f160000 ; undefined
    1fa4:	490b0b00 	.inst	0x490b0b00 ; undefined
    1fa8:	17000013 	b	fffffffffc001ff4 <SMC_ID_HW_RSA+0xffffffff77ff20ed>
    1fac:	13490026 	.inst	0x13490026 ; undefined
    1fb0:	2e180000 	ext	v0.8b, v0.8b, v24.8b, #0
    1fb4:	3a0e0301 	adcs	w1, w24, w14
    1fb8:	270b3b0b 	.inst	0x270b3b0b ; undefined
    1fbc:	11134919 	add	w25, w8, #0x4d2
    1fc0:	40071201 	.inst	0x40071201 ; undefined
    1fc4:	19429718 	.inst	0x19429718 ; undefined
    1fc8:	00001301 	.inst	0x00001301 ; undefined
    1fcc:	03000519 	.inst	0x03000519 ; undefined
    1fd0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1fd4:	0213490b 	.inst	0x0213490b ; undefined
    1fd8:	1a000017 	adc	w23, w0, w0
    1fdc:	08030005 	stxrb	w3, w5, [x0]
    1fe0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1fe4:	17021349 	b	fffffffffc086d08 <SMC_ID_HW_RSA+0xffffffff78076e01>
    1fe8:	341b0000 	cbz	w0, 37fe8 <_stack_size+0x36fe8>
    1fec:	3a080300 	adcs	w0, w24, w8
    1ff0:	490b3b0b 	.inst	0x490b3b0b ; undefined
    1ff4:	00170213 	.inst	0x00170213 ; undefined
    1ff8:	00341c00 	.inst	0x00341c00 ; NYI
    1ffc:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2000:	13490b3b 	.inst	0x13490b3b ; undefined
    2004:	00001702 	.inst	0x00001702 ; undefined
    2008:	31011d1d 	adds	w29, w8, #0x47
    200c:	55015213 	.inst	0x55015213 ; undefined
    2010:	590b5817 	.inst	0x590b5817 ; undefined
    2014:	0013010b 	.inst	0x0013010b ; undefined
    2018:	00051e00 	.inst	0x00051e00 ; undefined
    201c:	00001331 	.inst	0x00001331 ; undefined
    2020:	3100051f 	cmn	w8, #0x1
    2024:	00170213 	.inst	0x00170213 ; undefined
    2028:	82892000 	.inst	0x82892000 ; undefined
    202c:	01110001 	.inst	0x01110001 ; undefined
    2030:	00001331 	.inst	0x00001331 ; undefined
    2034:	31011d21 	adds	w1, w9, #0x47
    2038:	12011113 	and	w19, w8, #0x8000000f
    203c:	590b5807 	.inst	0x590b5807 ; undefined
    2040:	00130105 	.inst	0x00130105 ; undefined
    2044:	82892200 	.inst	0x82892200 ; undefined
    2048:	01110101 	.inst	0x01110101 ; undefined
    204c:	00001331 	.inst	0x00001331 ; undefined
    2050:	01828a23 	.inst	0x01828a23 ; undefined
    2054:	91180200 	add	x0, x16, #0x600
    2058:	00001842 	.inst	0x00001842 ; undefined
    205c:	3f012e24 	.inst	0x3f012e24 ; undefined
    2060:	3a0e0319 	adcs	w25, w24, w14
    2064:	270b3b0b 	.inst	0x270b3b0b ; undefined
    2068:	11134919 	add	w25, w8, #0x4d2
    206c:	40071201 	.inst	0x40071201 ; undefined
    2070:	19429718 	.inst	0x19429718 ; undefined
    2074:	00001301 	.inst	0x00001301 ; undefined
    2078:	03003425 	.inst	0x03003425 ; undefined
    207c:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    2080:	1c13490b 	ldr	s11, 289a0 <_stack_size+0x279a0>
    2084:	2600000b 	.inst	0x2600000b ; undefined
    2088:	1331011d 	.inst	0x1331011d ; undefined
    208c:	17550152 	b	fffffffffd5425d4 <SMC_ID_HW_RSA+0xffffffff795326cd>
    2090:	0b590b58 	add	w24, w26, w25, lsr #2
    2094:	05270000 	.inst	0x05270000 ; undefined
    2098:	1c133100 	ldr	s0, 286b8 <_stack_size+0x276b8>
    209c:	2800000b 	stnp	w11, w0, [x0]
    20a0:	1755010b 	b	fffffffffd5424cc <SMC_ID_HW_RSA+0xffffffff795325c5>
    20a4:	34290000 	cbz	w0, 540a4 <_stack_size+0x530a4>
    20a8:	00133100 	.inst	0x00133100 ; undefined
    20ac:	00342a00 	.inst	0x00342a00 ; NYI
    20b0:	17021331 	b	fffffffffc086d74 <SMC_ID_HW_RSA+0xffffffff78076e6d>
    20b4:	342b0000 	cbz	w0, 580b4 <_stack_size+0x570b4>
    20b8:	02133100 	.inst	0x02133100 ; undefined
    20bc:	2c000018 	stnp	s24, s0, [x0]
    20c0:	01018289 	.inst	0x01018289 ; undefined
    20c4:	13310111 	.inst	0x13310111 ; undefined
    20c8:	00001301 	.inst	0x00001301 ; undefined
    20cc:	3100342d 	adds	w13, w1, #0xd
    20d0:	00061c13 	.inst	0x00061c13 ; undefined
    20d4:	00342e00 	.inst	0x00342e00 ; NYI
    20d8:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    20dc:	13490b3b 	.inst	0x13490b3b ; undefined
    20e0:	193c193f 	.inst	0x193c193f ; undefined
    20e4:	2e2f0000 	uaddl	v0.8h, v0.8b, v15.8b
    20e8:	03193f01 	.inst	0x03193f01 ; undefined
    20ec:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    20f0:	4919270b 	.inst	0x4919270b ; undefined
    20f4:	01193c13 	.inst	0x01193c13 ; undefined
    20f8:	30000013 	adr	x19, 20f9 <_stack_size+0x10f9>
    20fc:	13490005 	.inst	0x13490005 ; undefined
    2100:	2e310000 	uaddl	v0.8h, v0.8b, v17.8b
    2104:	03193f01 	.inst	0x03193f01 ; undefined
    2108:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    210c:	3c192705 	str	b5, [x24],#-110
    2110:	00130119 	.inst	0x00130119 ; undefined
    2114:	11010000 	add	w0, w0, #0x40
    2118:	130e2501 	sbfiz	w1, w8, #18, #10
    211c:	110e030b 	add	w11, w24, #0x380
    2120:	10071201 	adr	x1, 10360 <_stack_size+0xf360>
    2124:	02000017 	.inst	0x02000017 ; undefined
    2128:	0b0b0024 	add	w4, w1, w11
    212c:	0e030b3e 	.inst	0x0e030b3e ; undefined
    2130:	24030000 	.inst	0x24030000 ; undefined
    2134:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
    2138:	0008030b 	.inst	0x0008030b ; undefined
    213c:	00160400 	.inst	0x00160400 ; undefined
    2140:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2144:	13490b3b 	.inst	0x13490b3b ; undefined
    2148:	13050000 	sbfiz	w0, w0, #27, #1
    214c:	0b0e0301 	add	w1, w24, w14
    2150:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    2154:	0013010b 	.inst	0x0013010b ; undefined
    2158:	000d0600 	.inst	0x000d0600 ; undefined
    215c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2160:	13490b3b 	.inst	0x13490b3b ; undefined
    2164:	00000b38 	.inst	0x00000b38 ; undefined
    2168:	49010107 	.inst	0x49010107 ; undefined
    216c:	00130113 	.inst	0x00130113 ; undefined
    2170:	00210800 	.inst	0x00210800 ; NYI
    2174:	0b2f1349 	add	w9, w26, w15, uxtb #4
    2178:	13090000 	sbfiz	w0, w0, #23, #1
    217c:	0b0e0301 	add	w1, w24, w14
    2180:	3b0b3a05 	.inst	0x3b0b3a05 ; undefined
    2184:	0013010b 	.inst	0x0013010b ; undefined
    2188:	000d0a00 	.inst	0x000d0a00 ; undefined
    218c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2190:	13490b3b 	.inst	0x13490b3b ; undefined
    2194:	00000538 	.inst	0x00000538 ; undefined
    2198:	4900210b 	.inst	0x4900210b ; undefined
    219c:	00052f13 	.inst	0x00052f13 ; undefined
    21a0:	000d0c00 	.inst	0x000d0c00 ; undefined
    21a4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    21a8:	13490b3b 	.inst	0x13490b3b ; undefined
    21ac:	0b0d0b0b 	add	w11, w24, w13, lsl #2
    21b0:	0b380b0c 	add	w12, w24, w24, uxtb #2
    21b4:	2e0d0000 	ext	v0.8b, v0.8b, v13.8b, #0
    21b8:	3a0e0301 	adcs	w1, w24, w14
    21bc:	270b3b0b 	.inst	0x270b3b0b ; undefined
    21c0:	20134919 	.inst	0x20134919 ; undefined
    21c4:	0013010b 	.inst	0x0013010b ; undefined
    21c8:	00050e00 	.inst	0x00050e00 ; undefined
    21cc:	0b3a0803 	add	w3, w0, w26, uxtb #2
    21d0:	13490b3b 	.inst	0x13490b3b ; undefined
    21d4:	050f0000 	.inst	0x050f0000 ; undefined
    21d8:	3a0e0300 	adcs	w0, w24, w14
    21dc:	490b3b0b 	.inst	0x490b3b0b ; undefined
    21e0:	10000013 	adr	x19, 21e0 <_stack_size+0x11e0>
    21e4:	0b0b000f 	add	w15, w0, w11
    21e8:	2e110000 	ext	v0.8b, v0.8b, v17.8b, #0
    21ec:	03193f01 	.inst	0x03193f01 ; undefined
    21f0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    21f4:	4919270b 	.inst	0x4919270b ; undefined
    21f8:	12011113 	and	w19, w8, #0x8000000f
    21fc:	97184007 	bl	fffffffffc612218 <SMC_ID_HW_RSA+0xffffffff78602311>
    2200:	13011942 	sbfx	w2, w10, #1, #6
    2204:	34120000 	cbz	w0, 26204 <_stack_size+0x25204>
    2208:	3a080300 	adcs	w0, w24, w8
    220c:	490b3b0b 	.inst	0x490b3b0b ; undefined
    2210:	00170213 	.inst	0x00170213 ; undefined
    2214:	011d1300 	.inst	0x011d1300 ; undefined
    2218:	01521331 	.inst	0x01521331 ; undefined
    221c:	0b581755 	add	w21, w26, w24, lsr #5
    2220:	00000b59 	.inst	0x00000b59 ; undefined
    2224:	31000514 	adds	w20, w8, #0x1
    2228:	00170213 	.inst	0x00170213 ; undefined
    222c:	00051500 	.inst	0x00051500 ; undefined
    2230:	00001331 	.inst	0x00001331 ; undefined
    2234:	01828916 	.inst	0x01828916 ; undefined
    2238:	31011101 	adds	w1, w8, #0x44
    223c:	17000013 	b	fffffffffc002288 <SMC_ID_HW_RSA+0xffffffff77ff2381>
    2240:	0001828a 	.inst	0x0001828a ; undefined
    2244:	42911802 	.inst	0x42911802 ; undefined
    2248:	18000018 	ldr	w24, 2248 <_stack_size+0x1248>
    224c:	0b0b000f 	add	w15, w0, w11
    2250:	00001349 	.inst	0x00001349 ; undefined
    2254:	03000519 	.inst	0x03000519 ; undefined
    2258:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    225c:	0213490b 	.inst	0x0213490b ; undefined
    2260:	1a000017 	adc	w23, w0, w0
    2264:	13310005 	.inst	0x13310005 ; undefined
    2268:	0000061c 	.inst	0x0000061c ; undefined
    226c:	0300341b 	.inst	0x0300341b ; undefined
    2270:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2274:	3f13490b 	.inst	0x3f13490b ; undefined
    2278:	00193c19 	.inst	0x00193c19 ; undefined
    227c:	012e1c00 	.inst	0x012e1c00 ; undefined
    2280:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    2284:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2288:	13491927 	.inst	0x13491927 ; undefined
    228c:	0000193c 	.inst	0x0000193c ; undefined
    2290:	4900051d 	.inst	0x4900051d ; undefined
    2294:	00000013 	.inst	0x00000013 ; undefined
    2298:	25011101 	.inst	0x25011101 ; undefined
    229c:	030b130e 	.inst	0x030b130e ; undefined
    22a0:	1201110e 	and	w14, w8, #0x8000000f
    22a4:	00171007 	.inst	0x00171007 ; undefined
    22a8:	00240200 	.inst	0x00240200 ; NYI
    22ac:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
    22b0:	00000e03 	.inst	0x00000e03 ; undefined
    22b4:	0b002403 	add	w3, w0, w0, lsl #9
    22b8:	030b3e0b 	.inst	0x030b3e0b ; undefined
    22bc:	04000008 	.inst	0x04000008 ; undefined
    22c0:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
    22c4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    22c8:	00001349 	.inst	0x00001349 ; undefined
    22cc:	3f012e05 	.inst	0x3f012e05 ; undefined
    22d0:	3a0e0319 	adcs	w25, w24, w14
    22d4:	270b3b0b 	.inst	0x270b3b0b ; undefined
    22d8:	11134919 	add	w25, w8, #0x4d2
    22dc:	40071201 	.inst	0x40071201 ; undefined
    22e0:	19429718 	.inst	0x19429718 ; undefined
    22e4:	05060000 	.inst	0x05060000 ; undefined
    22e8:	3a080300 	adcs	w0, w24, w8
    22ec:	490b3b0b 	.inst	0x490b3b0b ; undefined
    22f0:	00170213 	.inst	0x00170213 ; undefined
    22f4:	11010000 	add	w0, w0, #0x40
    22f8:	130e2501 	sbfiz	w1, w8, #18, #10
    22fc:	110e030b 	add	w11, w24, #0x380
    2300:	10071201 	adr	x1, 10540 <_stack_size+0xf540>
    2304:	02000017 	.inst	0x02000017 ; undefined
    2308:	0b0b0024 	add	w4, w1, w11
    230c:	0e030b3e 	.inst	0x0e030b3e ; undefined
    2310:	24030000 	.inst	0x24030000 ; undefined
    2314:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
    2318:	0008030b 	.inst	0x0008030b ; undefined
    231c:	00160400 	.inst	0x00160400 ; undefined
    2320:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2324:	13490b3b 	.inst	0x13490b3b ; undefined
    2328:	2e050000 	ext	v0.8b, v0.8b, v5.8b, #0
    232c:	03193f01 	.inst	0x03193f01 ; undefined
    2330:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2334:	4919270b 	.inst	0x4919270b ; undefined
    2338:	010b2013 	.inst	0x010b2013 ; undefined
    233c:	06000013 	.inst	0x06000013 ; undefined
    2340:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
    2344:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2348:	00001349 	.inst	0x00001349 ; undefined
    234c:	03003407 	.inst	0x03003407 ; undefined
    2350:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2354:	0013490b 	.inst	0x0013490b ; undefined
    2358:	012e0800 	.inst	0x012e0800 ; undefined
    235c:	01111331 	.inst	0x01111331 ; undefined
    2360:	18400712 	ldr	w18, 82440 <_stack_size+0x81440>
    2364:	01194297 	.inst	0x01194297 ; undefined
    2368:	09000013 	.inst	0x09000013 ; undefined
    236c:	13310005 	.inst	0x13310005 ; undefined
    2370:	00001702 	.inst	0x00001702 ; undefined
    2374:	3100050a 	adds	w10, w8, #0x1
    2378:	00180213 	.inst	0x00180213 ; undefined
    237c:	00340b00 	.inst	0x00340b00 ; NYI
    2380:	00001331 	.inst	0x00001331 ; undefined
    2384:	3100340c 	adds	w12, w0, #0xd
    2388:	000b1c13 	.inst	0x000b1c13 ; undefined
    238c:	82890d00 	.inst	0x82890d00 ; undefined
    2390:	01110001 	.inst	0x01110001 ; undefined
    2394:	31194295 	adds	w21, w20, #0x650
    2398:	0e000013 	tbl	v19.8b, {v0.16b}, v0.8b
    239c:	193f012e 	.inst	0x193f012e ; undefined
    23a0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    23a4:	19270b3b 	.inst	0x19270b3b ; undefined
    23a8:	01111349 	.inst	0x01111349 ; undefined
    23ac:	18400712 	ldr	w18, 8248c <_stack_size+0x8148c>
    23b0:	01194297 	.inst	0x01194297 ; undefined
    23b4:	0f000013 	.inst	0x0f000013 ; undefined
    23b8:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
    23bc:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    23c0:	17021349 	b	fffffffffc0870e4 <SMC_ID_HW_RSA+0xffffffff780771dd>
    23c4:	0b100000 	add	w0, w0, w16
    23c8:	12011101 	and	w1, w8, #0x8000000f
    23cc:	11000007 	add	w7, w0, #0x0
    23d0:	193f012e 	.inst	0x193f012e ; undefined
    23d4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    23d8:	19270b3b 	.inst	0x19270b3b ; undefined
    23dc:	07120111 	.inst	0x07120111 ; undefined
    23e0:	42971840 	.inst	0x42971840 ; undefined
    23e4:	00130119 	.inst	0x00130119 ; undefined
    23e8:	00341200 	.inst	0x00341200 ; NYI
    23ec:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    23f0:	13490b3b 	.inst	0x13490b3b ; undefined
    23f4:	00001702 	.inst	0x00001702 ; undefined
    23f8:	31011d13 	adds	w19, w8, #0x47
    23fc:	55015213 	.inst	0x55015213 ; undefined
    2400:	590b5817 	.inst	0x590b5817 ; undefined
    2404:	0013010b 	.inst	0x0013010b ; undefined
    2408:	010b1400 	.inst	0x010b1400 ; undefined
    240c:	00001755 	.inst	0x00001755 ; undefined
    2410:	01828915 	.inst	0x01828915 ; undefined
    2414:	31011101 	adds	w1, w8, #0x44
    2418:	16000013 	b	fffffffff8002464 <SMC_ID_HW_RSA+0xffffffff73ff255d>
    241c:	0001828a 	.inst	0x0001828a ; undefined
    2420:	42911802 	.inst	0x42911802 ; undefined
    2424:	17000018 	b	fffffffffc002484 <SMC_ID_HW_RSA+0xffffffff77ff257d>
    2428:	1331011d 	.inst	0x1331011d ; undefined
    242c:	07120111 	.inst	0x07120111 ; undefined
    2430:	0b590b58 	add	w24, w26, w25, lsr #2
    2434:	34180000 	cbz	w0, 32434 <_stack_size+0x31434>
    2438:	02133100 	.inst	0x02133100 ; undefined
    243c:	19000017 	.inst	0x19000017 ; undefined
    2440:	193f012e 	.inst	0x193f012e ; undefined
    2444:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2448:	19270b3b 	.inst	0x19270b3b ; undefined
    244c:	07120111 	.inst	0x07120111 ; undefined
    2450:	42971840 	.inst	0x42971840 ; undefined
    2454:	00000019 	.inst	0x00000019 ; undefined
    2458:	25011101 	.inst	0x25011101 ; undefined
    245c:	030b130e 	.inst	0x030b130e ; undefined
    2460:	1201110e 	and	w14, w8, #0x8000000f
    2464:	00171007 	.inst	0x00171007 ; undefined
    2468:	00240200 	.inst	0x00240200 ; NYI
    246c:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
    2470:	00000e03 	.inst	0x00000e03 ; undefined
    2474:	0b002403 	add	w3, w0, w0, lsl #9
    2478:	030b3e0b 	.inst	0x030b3e0b ; undefined
    247c:	04000008 	.inst	0x04000008 ; undefined
    2480:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
    2484:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2488:	00001349 	.inst	0x00001349 ; undefined
    248c:	0b011305 	add	w5, w24, w1, lsl #4
    2490:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    2494:	0013010b 	.inst	0x0013010b ; undefined
    2498:	000d0600 	.inst	0x000d0600 ; undefined
    249c:	0b3a0803 	add	w3, w0, w26, uxtb #2
    24a0:	13490b3b 	.inst	0x13490b3b ; undefined
    24a4:	0b0d0b0b 	add	w11, w24, w13, lsl #2
    24a8:	0b380b0c 	add	w12, w24, w24, uxtb #2
    24ac:	0d070000 	.inst	0x0d070000 ; undefined
    24b0:	3a0e0300 	adcs	w0, w24, w14
    24b4:	490b3b0b 	.inst	0x490b3b0b ; undefined
    24b8:	0d0b0b13 	.inst	0x0d0b0b13 ; undefined
    24bc:	380b0c0b 	strb	w11, [x0,#176]!
    24c0:	0800000b 	stxrb	w0, w11, [x0]
    24c4:	0e030117 	tbl	v23.8b, {v8.16b}, v3.8b
    24c8:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
    24cc:	13010b3b 	sbfx	w27, w25, #1, #2
    24d0:	0d090000 	.inst	0x0d090000 ; undefined
    24d4:	3a0e0300 	adcs	w0, w24, w14
    24d8:	490b3b0b 	.inst	0x490b3b0b ; undefined
    24dc:	0a000013 	and	w19, w0, w0
    24e0:	0803000d 	stxrb	w3, w13, [x0]
    24e4:	053b0b3a 	.inst	0x053b0b3a ; undefined
    24e8:	0b0b1349 	add	w9, w26, w11, lsl #4
    24ec:	0b0c0b0d 	add	w13, w24, w12, lsl #2
    24f0:	00000b38 	.inst	0x00000b38 ; undefined
    24f4:	03000d0b 	.inst	0x03000d0b ; undefined
    24f8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    24fc:	0b134905 	add	w5, w8, w19, lsl #18
    2500:	0c0b0d0b 	.inst	0x0c0b0d0b ; undefined
    2504:	000b380b 	.inst	0x000b380b ; undefined
    2508:	000d0c00 	.inst	0x000d0c00 ; undefined
    250c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2510:	1349053b 	.inst	0x1349053b ; undefined
    2514:	160d0000 	b	fffffffff8342514 <SMC_ID_HW_RSA+0xffffffff7433260d>
    2518:	3a0e0300 	adcs	w0, w24, w14
    251c:	49053b0b 	.inst	0x49053b0b ; undefined
    2520:	0e000013 	tbl	v19.8b, {v0.16b}, v0.8b
    2524:	0e030113 	tbl	v19.8b, {v8.16b}, v3.8b
    2528:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
    252c:	1301053b 	sbfx	w27, w9, #1, #1
    2530:	0d0f0000 	.inst	0x0d0f0000 ; undefined
    2534:	3a0e0300 	adcs	w0, w24, w14
    2538:	49053b0b 	.inst	0x49053b0b ; undefined
    253c:	000b3813 	.inst	0x000b3813 ; undefined
    2540:	01131000 	.inst	0x01131000 ; undefined
    2544:	0b0b0e03 	add	w3, w16, w11, lsl #3
    2548:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    254c:	00001301 	.inst	0x00001301 ; undefined
    2550:	03000d11 	.inst	0x03000d11 ; undefined
    2554:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2558:	3813490b 	sttrb	w11, [x8,#-204]
    255c:	1200000b 	and	w11, w0, #0x1
    2560:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
    2564:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2568:	0b201927 	.inst	0x0b201927 ; undefined
    256c:	00001301 	.inst	0x00001301 ; undefined
    2570:	03000513 	.inst	0x03000513 ; undefined
    2574:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2578:	0013490b 	.inst	0x0013490b ; undefined
    257c:	00051400 	.inst	0x00051400 ; undefined
    2580:	0b3a0803 	add	w3, w0, w26, uxtb #2
    2584:	13490b3b 	.inst	0x13490b3b ; undefined
    2588:	2e150000 	ext	v0.8b, v0.8b, v21.8b, #0
    258c:	3a0e0301 	adcs	w1, w24, w14
    2590:	270b3b0b 	.inst	0x270b3b0b ; undefined
    2594:	20134919 	.inst	0x20134919 ; undefined
    2598:	0013010b 	.inst	0x0013010b ; undefined
    259c:	012e1600 	.inst	0x012e1600 ; undefined
    25a0:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    25a4:	053b0b3a 	.inst	0x053b0b3a ; undefined
    25a8:	0b201927 	.inst	0x0b201927 ; undefined
    25ac:	00001301 	.inst	0x00001301 ; undefined
    25b0:	03000517 	.inst	0x03000517 ; undefined
    25b4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    25b8:	00134905 	.inst	0x00134905 ; undefined
    25bc:	000f1800 	.inst	0x000f1800 ; undefined
    25c0:	13490b0b 	.inst	0x13490b0b ; undefined
    25c4:	2e190000 	ext	v0.8b, v0.8b, v25.8b, #0
    25c8:	03193f01 	.inst	0x03193f01 ; undefined
    25cc:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    25d0:	1119270b 	add	w11, w24, #0x649
    25d4:	40071201 	.inst	0x40071201 ; undefined
    25d8:	19429718 	.inst	0x19429718 ; undefined
    25dc:	00001301 	.inst	0x00001301 ; undefined
    25e0:	0300341a 	.inst	0x0300341a ; undefined
    25e4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    25e8:	0213490b 	.inst	0x0213490b ; undefined
    25ec:	1b000017 	madd	w23, w0, w0, w0
    25f0:	01018289 	.inst	0x01018289 ; undefined
    25f4:	13310111 	.inst	0x13310111 ; undefined
    25f8:	8a1c0000 	and	x0, x0, x28
    25fc:	02000182 	.inst	0x02000182 ; undefined
    2600:	18429118 	ldr	w24, 87820 <_stack_size+0x86820>
    2604:	051d0000 	.inst	0x051d0000 ; undefined
    2608:	3a0e0300 	adcs	w0, w24, w14
    260c:	490b3b0b 	.inst	0x490b3b0b ; undefined
    2610:	00170213 	.inst	0x00170213 ; undefined
    2614:	011d1e00 	.inst	0x011d1e00 ; undefined
    2618:	01521331 	.inst	0x01521331 ; undefined
    261c:	0b581755 	add	w21, w26, w24, lsr #5
    2620:	13010b59 	sbfx	w25, w26, #1, #2
    2624:	051f0000 	.inst	0x051f0000 ; undefined
    2628:	1c133100 	ldr	s0, 28c48 <_stack_size+0x27c48>
    262c:	2000000d 	.inst	0x2000000d ; undefined
    2630:	13310005 	.inst	0x13310005 ; undefined
    2634:	00000b1c 	.inst	0x00000b1c ; undefined
    2638:	31000521 	adds	w1, w9, #0x1
    263c:	00180213 	.inst	0x00180213 ; undefined
    2640:	011d2200 	.inst	0x011d2200 ; undefined
    2644:	01111331 	.inst	0x01111331 ; undefined
    2648:	0b580712 	add	w18, w24, w24, lsr #1
    264c:	13010b59 	sbfx	w25, w26, #1, #2
    2650:	05230000 	.inst	0x05230000 ; undefined
    2654:	02133100 	.inst	0x02133100 ; undefined
    2658:	24000017 	.inst	0x24000017 ; undefined
    265c:	1331011d 	.inst	0x1331011d ; undefined
    2660:	07120111 	.inst	0x07120111 ; undefined
    2664:	0b590b58 	add	w24, w26, w25, lsr #2
    2668:	2e250000 	uaddl	v0.8h, v0.8b, v5.8b
    266c:	03193f01 	.inst	0x03193f01 ; undefined
    2670:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2674:	4919270b 	.inst	0x4919270b ; undefined
    2678:	12011113 	and	w19, w8, #0x8000000f
    267c:	97184007 	bl	fffffffffc612698 <SMC_ID_HW_RSA+0xffffffff78602791>
    2680:	13011942 	sbfx	w2, w10, #1, #6
    2684:	05260000 	.inst	0x05260000 ; undefined
    2688:	3a080300 	adcs	w0, w24, w8
    268c:	490b3b0b 	.inst	0x490b3b0b ; undefined
    2690:	00180213 	.inst	0x00180213 ; undefined
    2694:	011d2700 	.inst	0x011d2700 ; undefined
    2698:	01521331 	.inst	0x01521331 ; undefined
    269c:	0b581755 	add	w21, w26, w24, lsr #5
    26a0:	00000b59 	.inst	0x00000b59 ; undefined
    26a4:	3f002e28 	.inst	0x3f002e28 ; undefined
    26a8:	3a0e0319 	adcs	w25, w24, w14
    26ac:	270b3b0b 	.inst	0x270b3b0b ; undefined
    26b0:	12011119 	and	w25, w8, #0x8000000f
    26b4:	97184007 	bl	fffffffffc6126d0 <SMC_ID_HW_RSA+0xffffffff786027c9>
    26b8:	00001942 	.inst	0x00001942 ; undefined
    26bc:	03000529 	.inst	0x03000529 ; undefined
    26c0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    26c4:	0213490b 	.inst	0x0213490b ; undefined
    26c8:	2a000018 	orr	w24, w0, w0
    26cc:	193f012e 	.inst	0x193f012e ; undefined
    26d0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    26d4:	1927053b 	.inst	0x1927053b ; undefined
    26d8:	01111349 	.inst	0x01111349 ; undefined
    26dc:	18400712 	ldr	w18, 827bc <_stack_size+0x817bc>
    26e0:	01194297 	.inst	0x01194297 ; undefined
    26e4:	2b000013 	adds	w19, w0, w0
    26e8:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
    26ec:	053b0b3a 	.inst	0x053b0b3a ; undefined
    26f0:	17021349 	b	fffffffffc087414 <SMC_ID_HW_RSA+0xffffffff7807750d>
    26f4:	342c0000 	cbz	w0, 5a6f4 <_stack_size+0x596f4>
    26f8:	3a0e0300 	adcs	w0, w24, w14
    26fc:	49053b0b 	.inst	0x49053b0b ; undefined
    2700:	00170213 	.inst	0x00170213 ; undefined
    2704:	00342d00 	.inst	0x00342d00 ; NYI
    2708:	0b3a0803 	add	w3, w0, w26, uxtb #2
    270c:	1349053b 	.inst	0x1349053b ; undefined
    2710:	00001802 	.inst	0x00001802 ; undefined
    2714:	0182892e 	.inst	0x0182892e ; undefined
    2718:	31011101 	adds	w1, w8, #0x44
    271c:	00130113 	.inst	0x00130113 ; undefined
    2720:	00342f00 	.inst	0x00342f00 ; NYI
    2724:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2728:	1349053b 	.inst	0x1349053b ; undefined
    272c:	00001802 	.inst	0x00001802 ; undefined
    2730:	3f012e30 	.inst	0x3f012e30 ; undefined
    2734:	3a0e0319 	adcs	w25, w24, w14
    2738:	49053b0b 	.inst	0x49053b0b ; undefined
    273c:	01193c13 	.inst	0x01193c13 ; undefined
    2740:	31000013 	adds	w19, w0, #0x0
    2744:	00000018 	.inst	0x00000018 ; undefined
    2748:	01828932 	.inst	0x01828932 ; undefined
    274c:	31011100 	adds	w0, w8, #0x44
    2750:	33000013 	bfxil	w19, w0, #0, #1
    2754:	13490035 	.inst	0x13490035 ; undefined
    2758:	2e340000 	uaddl	v0.8h, v0.8b, v20.8b
    275c:	11133101 	add	w1, w8, #0x4cc
    2760:	40071201 	.inst	0x40071201 ; undefined
    2764:	19429718 	.inst	0x19429718 ; undefined
    2768:	00001301 	.inst	0x00001301 ; undefined
    276c:	3f012e35 	.inst	0x3f012e35 ; undefined
    2770:	3a0e0319 	adcs	w25, w24, w14
    2774:	27053b0b 	.inst	0x27053b0b ; undefined
    2778:	12011119 	and	w25, w8, #0x8000000f
    277c:	97184007 	bl	fffffffffc612798 <SMC_ID_HW_RSA+0xffffffff78602891>
    2780:	13011942 	sbfx	w2, w10, #1, #6
    2784:	05360000 	.inst	0x05360000 ; undefined
    2788:	3a080300 	adcs	w0, w24, w8
    278c:	49053b0b 	.inst	0x49053b0b ; undefined
    2790:	00170213 	.inst	0x00170213 ; undefined
    2794:	00343700 	.inst	0x00343700 ; NYI
    2798:	0b3a0803 	add	w3, w0, w26, uxtb #2
    279c:	1349053b 	.inst	0x1349053b ; undefined
    27a0:	00001702 	.inst	0x00001702 ; undefined
    27a4:	31011d38 	adds	w24, w9, #0x47
    27a8:	55015213 	.inst	0x55015213 ; undefined
    27ac:	590b5817 	.inst	0x590b5817 ; undefined
    27b0:	00130105 	.inst	0x00130105 ; undefined
    27b4:	00053900 	.inst	0x00053900 ; undefined
    27b8:	00001331 	.inst	0x00001331 ; undefined
    27bc:	31011d3a 	adds	w26, w9, #0x47
    27c0:	12011113 	and	w19, w8, #0x8000000f
    27c4:	590b5807 	.inst	0x590b5807 ; undefined
    27c8:	3b000005 	.inst	0x3b000005 ; undefined
    27cc:	13490026 	.inst	0x13490026 ; undefined
    27d0:	053c0000 	.inst	0x053c0000 ; undefined
    27d4:	3a080300 	adcs	w0, w24, w8
    27d8:	49053b0b 	.inst	0x49053b0b ; undefined
    27dc:	00180213 	.inst	0x00180213 ; undefined
    27e0:	011d3d00 	.inst	0x011d3d00 ; undefined
    27e4:	01521331 	.inst	0x01521331 ; undefined
    27e8:	0b581755 	add	w21, w26, w24, lsr #5
    27ec:	00000559 	.inst	0x00000559 ; undefined
    27f0:	0182893e 	.inst	0x0182893e ; undefined
    27f4:	95011101 	bl	4046bf8 <_stack_base+0x1039478>
    27f8:	13311942 	.inst	0x13311942 ; undefined
    27fc:	1d3f0000 	.inst	0x1d3f0000 ; undefined
    2800:	11133101 	add	w1, w8, #0x4cc
    2804:	58071201 	ldr	x1, 10a44 <_stack_size+0xfa44>
    2808:	0105590b 	.inst	0x0105590b ; undefined
    280c:	40000013 	.inst	0x40000013 ; undefined
    2810:	13490101 	.inst	0x13490101 ; undefined
    2814:	00001301 	.inst	0x00001301 ; undefined
    2818:	49002141 	.inst	0x49002141 ; undefined
    281c:	000b2f13 	.inst	0x000b2f13 ; undefined
    2820:	00344200 	.inst	0x00344200 ; NYI
    2824:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2828:	13490b3b 	.inst	0x13490b3b ; undefined
    282c:	00001802 	.inst	0x00001802 ; undefined
    2830:	03003443 	.inst	0x03003443 ; undefined
    2834:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2838:	3f13490b 	.inst	0x3f13490b ; undefined
    283c:	00180219 	.inst	0x00180219 ; undefined
    2840:	00344400 	.inst	0x00344400 ; NYI
    2844:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2848:	13490b3b 	.inst	0x13490b3b ; undefined
    284c:	193c193f 	.inst	0x193c193f ; undefined
    2850:	2e450000 	.inst	0x2e450000 ; undefined
    2854:	03193f01 	.inst	0x03193f01 ; undefined
    2858:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    285c:	3c19270b 	str	b11, [x24],#-110
    2860:	00130119 	.inst	0x00130119 ; undefined
    2864:	00054600 	.inst	0x00054600 ; undefined
    2868:	00001349 	.inst	0x00001349 ; undefined
    286c:	3f012e47 	.inst	0x3f012e47 ; undefined
    2870:	3a0e0319 	adcs	w25, w24, w14
    2874:	27053b0b 	.inst	0x27053b0b ; undefined
    2878:	3c134919 	.inst	0x3c134919 ; undefined
    287c:	00130119 	.inst	0x00130119 ; undefined
    2880:	012e4800 	.inst	0x012e4800 ; undefined
    2884:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    2888:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    288c:	13491927 	.inst	0x13491927 ; undefined
    2890:	1301193c 	sbfx	w28, w9, #1, #6
    2894:	2e490000 	.inst	0x2e490000 ; undefined
    2898:	03193f01 	.inst	0x03193f01 ; undefined
    289c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    28a0:	4919270b 	.inst	0x4919270b ; undefined
    28a4:	00193c13 	.inst	0x00193c13 ; undefined
    28a8:	11010000 	add	w0, w0, #0x40
    28ac:	130e2501 	sbfiz	w1, w8, #18, #10
    28b0:	100e030b 	adr	x11, 1e910 <_stack_size+0x1d910>
    28b4:	02000017 	.inst	0x02000017 ; undefined
    28b8:	0b0b0024 	add	w4, w1, w11
    28bc:	0e030b3e 	.inst	0x0e030b3e ; undefined
    28c0:	24030000 	.inst	0x24030000 ; undefined
    28c4:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
    28c8:	0008030b 	.inst	0x0008030b ; undefined
    28cc:	00160400 	.inst	0x00160400 ; undefined
    28d0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    28d4:	13490b3b 	.inst	0x13490b3b ; undefined
    28d8:	34050000 	cbz	w0, c8d8 <_stack_size+0xb8d8>
    28dc:	3a0e0300 	adcs	w0, w24, w14
    28e0:	490b3b0b 	.inst	0x490b3b0b ; undefined
    28e4:	06000013 	.inst	0x06000013 ; undefined
    28e8:	0b0b000f 	add	w15, w0, w11
    28ec:	00001349 	.inst	0x00001349 ; undefined
    28f0:	01110100 	.inst	0x01110100 ; undefined
    28f4:	0b130e25 	add	w5, w17, w19, lsl #3
    28f8:	01110e03 	.inst	0x01110e03 ; undefined
    28fc:	17100712 	b	fffffffffc404544 <SMC_ID_HW_RSA+0xffffffff783f463d>
    2900:	24020000 	.inst	0x24020000 ; undefined
    2904:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
    2908:	000e030b 	.inst	0x000e030b ; undefined
    290c:	00240300 	.inst	0x00240300 ; NYI
    2910:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
    2914:	00000803 	.inst	0x00000803 ; undefined
    2918:	03001604 	.inst	0x03001604 ; undefined
    291c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2920:	0013490b 	.inst	0x0013490b ; undefined
    2924:	01130500 	.inst	0x01130500 ; undefined
    2928:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
    292c:	13010b3b 	sbfx	w27, w25, #1, #2
    2930:	0d060000 	.inst	0x0d060000 ; undefined
    2934:	3a080300 	adcs	w0, w24, w8
    2938:	490b3b0b 	.inst	0x490b3b0b ; undefined
    293c:	0d0b0b13 	.inst	0x0d0b0b13 ; undefined
    2940:	380b0c0b 	strb	w11, [x0,#176]!
    2944:	0700000b 	.inst	0x0700000b ; undefined
    2948:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
    294c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2950:	0b0b1349 	add	w9, w26, w11, lsl #4
    2954:	0b0c0b0d 	add	w13, w24, w12, lsl #2
    2958:	00000b38 	.inst	0x00000b38 ; undefined
    295c:	03011708 	.inst	0x03011708 ; undefined
    2960:	3a0b0b0e 	.inst	0x3a0b0b0e ; undefined
    2964:	010b3b0b 	.inst	0x010b3b0b ; undefined
    2968:	09000013 	.inst	0x09000013 ; undefined
    296c:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
    2970:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2974:	00001349 	.inst	0x00001349 ; undefined
    2978:	03000d0a 	.inst	0x03000d0a ; undefined
    297c:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    2980:	0b134905 	add	w5, w8, w19, lsl #18
    2984:	0c0b0d0b 	.inst	0x0c0b0d0b ; undefined
    2988:	000b380b 	.inst	0x000b380b ; undefined
    298c:	000d0b00 	.inst	0x000d0b00 ; undefined
    2990:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2994:	1349053b 	.inst	0x1349053b ; undefined
    2998:	0b0d0b0b 	add	w11, w24, w13, lsl #2
    299c:	0b380b0c 	add	w12, w24, w24, uxtb #2
    29a0:	0d0c0000 	.inst	0x0d0c0000 ; undefined
    29a4:	3a0e0300 	adcs	w0, w24, w14
    29a8:	49053b0b 	.inst	0x49053b0b ; undefined
    29ac:	0d000013 	st1	{v19.b}[0], [x0]
    29b0:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
    29b4:	053b0b3a 	.inst	0x053b0b3a ; undefined
    29b8:	00001349 	.inst	0x00001349 ; undefined
    29bc:	0301130e 	.inst	0x0301130e ; undefined
    29c0:	3a0b0b0e 	.inst	0x3a0b0b0e ; undefined
    29c4:	01053b0b 	.inst	0x01053b0b ; undefined
    29c8:	0f000013 	.inst	0x0f000013 ; undefined
    29cc:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
    29d0:	053b0b3a 	.inst	0x053b0b3a ; undefined
    29d4:	0b381349 	add	w9, w26, w24, uxtb #4
    29d8:	2e100000 	ext	v0.8b, v0.8b, v16.8b, #0
    29dc:	03193f01 	.inst	0x03193f01 ; undefined
    29e0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    29e4:	4919270b 	.inst	0x4919270b ; undefined
    29e8:	010b2013 	.inst	0x010b2013 ; undefined
    29ec:	11000013 	add	w19, w0, #0x0
    29f0:	08030005 	stxrb	w3, w5, [x0]
    29f4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    29f8:	00001349 	.inst	0x00001349 ; undefined
    29fc:	0b000f12 	add	w18, w24, w0, lsl #3
    2a00:	0013490b 	.inst	0x0013490b ; undefined
    2a04:	012e1300 	.inst	0x012e1300 ; undefined
    2a08:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    2a0c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2a10:	13491927 	.inst	0x13491927 ; undefined
    2a14:	07120111 	.inst	0x07120111 ; undefined
    2a18:	42971840 	.inst	0x42971840 ; undefined
    2a1c:	00130119 	.inst	0x00130119 ; undefined
    2a20:	00051400 	.inst	0x00051400 ; undefined
    2a24:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2a28:	13490b3b 	.inst	0x13490b3b ; undefined
    2a2c:	00001702 	.inst	0x00001702 ; undefined
    2a30:	03000515 	.inst	0x03000515 ; undefined
    2a34:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2a38:	0213490b 	.inst	0x0213490b ; undefined
    2a3c:	16000018 	b	fffffffff8002a9c <SMC_ID_HW_RSA+0xffffffff73ff2b95>
    2a40:	08030034 	stxrb	w3, w20, [x1]
    2a44:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2a48:	18021349 	ldr	w9, 6cb0 <_stack_size+0x5cb0>
    2a4c:	34170000 	cbz	w0, 30a4c <_stack_size+0x2fa4c>
    2a50:	3a080300 	adcs	w0, w24, w8
    2a54:	490b3b0b 	.inst	0x490b3b0b ; undefined
    2a58:	00170213 	.inst	0x00170213 ; undefined
    2a5c:	011d1800 	.inst	0x011d1800 ; undefined
    2a60:	01521331 	.inst	0x01521331 ; undefined
    2a64:	0b581755 	add	w21, w26, w24, lsr #5
    2a68:	00000b59 	.inst	0x00000b59 ; undefined
    2a6c:	31000519 	adds	w25, w8, #0x1
    2a70:	00180213 	.inst	0x00180213 ; undefined
    2a74:	01011a00 	.inst	0x01011a00 ; undefined
    2a78:	13011349 	sbfx	w9, w26, #1, #4
    2a7c:	211b0000 	.inst	0x211b0000 ; undefined
    2a80:	2f134900 	.inst	0x2f134900 ; undefined
    2a84:	1c00000b 	ldr	s11, 2a84 <_stack_size+0x1a84>
    2a88:	1331012e 	.inst	0x1331012e ; undefined
    2a8c:	07120111 	.inst	0x07120111 ; undefined
    2a90:	42971840 	.inst	0x42971840 ; undefined
    2a94:	00130119 	.inst	0x00130119 ; undefined
    2a98:	00051d00 	.inst	0x00051d00 ; undefined
    2a9c:	17021331 	b	fffffffffc087760 <SMC_ID_HW_RSA+0xffffffff78077859>
    2aa0:	341e0000 	cbz	w0, 3eaa0 <_stack_size+0x3daa0>
    2aa4:	3a0e0300 	adcs	w0, w24, w14
    2aa8:	490b3b0b 	.inst	0x490b3b0b ; undefined
    2aac:	3c193f13 	str	b19, [x24,#-109]!
    2ab0:	1f000019 	fmadd	s25, s0, s0, s0
    2ab4:	13490035 	.inst	0x13490035 ; undefined
    2ab8:	01000000 	.inst	0x01000000 ; undefined
    2abc:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
    2ac0:	0e030b13 	.inst	0x0e030b13 ; undefined
    2ac4:	01110e1b 	.inst	0x01110e1b ; undefined
    2ac8:	17100712 	b	fffffffffc404710 <SMC_ID_HW_RSA+0xffffffff783f4809>
    2acc:	24020000 	.inst	0x24020000 ; undefined
    2ad0:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
    2ad4:	000e030b 	.inst	0x000e030b ; undefined
    2ad8:	00240300 	.inst	0x00240300 ; NYI
    2adc:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
    2ae0:	00000803 	.inst	0x00000803 ; undefined
    2ae4:	03001604 	.inst	0x03001604 ; undefined
    2ae8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2aec:	0013490b 	.inst	0x0013490b ; undefined
    2af0:	01010500 	.inst	0x01010500 ; undefined
    2af4:	13011349 	sbfx	w9, w26, #1, #4
    2af8:	21060000 	.inst	0x21060000 ; undefined
    2afc:	2f134900 	.inst	0x2f134900 ; undefined
    2b00:	0700000b 	.inst	0x0700000b ; undefined
    2b04:	0b0b000f 	add	w15, w0, w11
    2b08:	2e080000 	ext	v0.8b, v0.8b, v8.8b, #0
    2b0c:	03193f01 	.inst	0x03193f01 ; undefined
    2b10:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2b14:	2019270b 	.inst	0x2019270b ; undefined
    2b18:	0013010b 	.inst	0x0013010b ; undefined
    2b1c:	00050900 	.inst	0x00050900 ; undefined
    2b20:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2b24:	13490b3b 	.inst	0x13490b3b ; undefined
    2b28:	260a0000 	.inst	0x260a0000 ; undefined
    2b2c:	00134900 	.inst	0x00134900 ; undefined
    2b30:	002e0b00 	.inst	0x002e0b00 ; NYI
    2b34:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    2b38:	053b0b3a 	.inst	0x053b0b3a ; undefined
    2b3c:	0b201927 	.inst	0x0b201927 ; undefined
    2b40:	2e0c0000 	ext	v0.8b, v0.8b, v12.8b, #0
    2b44:	03193f01 	.inst	0x03193f01 ; undefined
    2b48:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2b4c:	49192705 	.inst	0x49192705 ; undefined
    2b50:	010b2013 	.inst	0x010b2013 ; undefined
    2b54:	0d000013 	st1	{v19.b}[0], [x0]
    2b58:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
    2b5c:	053b0b3a 	.inst	0x053b0b3a ; undefined
    2b60:	00001349 	.inst	0x00001349 ; undefined
    2b64:	0300340e 	.inst	0x0300340e ; undefined
    2b68:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2b6c:	00134905 	.inst	0x00134905 ; undefined
    2b70:	012e0f00 	.inst	0x012e0f00 ; undefined
    2b74:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2b78:	1927053b 	.inst	0x1927053b ; undefined
    2b7c:	01111349 	.inst	0x01111349 ; undefined
    2b80:	18400712 	ldr	w18, 82c60 <_stack_size+0x81c60>
    2b84:	01194297 	.inst	0x01194297 ; undefined
    2b88:	10000013 	adr	x19, 2b88 <_stack_size+0x1b88>
    2b8c:	08030034 	stxrb	w3, w20, [x1]
    2b90:	053b0b3a 	.inst	0x053b0b3a ; undefined
    2b94:	17021349 	b	fffffffffc0878b8 <SMC_ID_HW_RSA+0xffffffff780779b1>
    2b98:	89110000 	.inst	0x89110000 ; undefined
    2b9c:	11010182 	add	w2, w12, #0x40
    2ba0:	01133101 	.inst	0x01133101 ; undefined
    2ba4:	12000013 	and	w19, w0, #0x1
    2ba8:	0001828a 	.inst	0x0001828a ; undefined
    2bac:	42911802 	.inst	0x42911802 ; undefined
    2bb0:	13000018 	sbfx	w24, w0, #0, #1
    2bb4:	01018289 	.inst	0x01018289 ; undefined
    2bb8:	13310111 	.inst	0x13310111 ; undefined
    2bbc:	2e140000 	ext	v0.8b, v0.8b, v20.8b, #0
    2bc0:	11133101 	add	w1, w8, #0x4cc
    2bc4:	40071201 	.inst	0x40071201 ; undefined
    2bc8:	19429718 	.inst	0x19429718 ; undefined
    2bcc:	00001301 	.inst	0x00001301 ; undefined
    2bd0:	31000515 	adds	w21, w8, #0x1
    2bd4:	00180213 	.inst	0x00180213 ; undefined
    2bd8:	012e1600 	.inst	0x012e1600 ; undefined
    2bdc:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    2be0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2be4:	13491927 	.inst	0x13491927 ; undefined
    2be8:	07120111 	.inst	0x07120111 ; undefined
    2bec:	42971840 	.inst	0x42971840 ; undefined
    2bf0:	00130119 	.inst	0x00130119 ; undefined
    2bf4:	00051700 	.inst	0x00051700 ; undefined
    2bf8:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2bfc:	13490b3b 	.inst	0x13490b3b ; undefined
    2c00:	00001702 	.inst	0x00001702 ; undefined
    2c04:	03000518 	.inst	0x03000518 ; undefined
    2c08:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2c0c:	0213490b 	.inst	0x0213490b ; undefined
    2c10:	19000018 	.inst	0x19000018 ; undefined
    2c14:	1331011d 	.inst	0x1331011d ; undefined
    2c18:	07120111 	.inst	0x07120111 ; undefined
    2c1c:	0b590b58 	add	w24, w26, w25, lsr #2
    2c20:	051a0000 	.inst	0x051a0000 ; undefined
    2c24:	00133100 	.inst	0x00133100 ; undefined
    2c28:	012e1b00 	.inst	0x012e1b00 ; undefined
    2c2c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    2c30:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2c34:	01111927 	.inst	0x01111927 ; undefined
    2c38:	18400712 	ldr	w18, 82d18 <_stack_size+0x81d18>
    2c3c:	01194297 	.inst	0x01194297 ; undefined
    2c40:	1c000013 	ldr	s19, 2c40 <_stack_size+0x1c40>
    2c44:	08030005 	stxrb	w3, w5, [x0]
    2c48:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2c4c:	17021349 	b	fffffffffc087970 <SMC_ID_HW_RSA+0xffffffff78077a69>
    2c50:	351d0000 	cbnz	w0, 3cc50 <_stack_size+0x3bc50>
    2c54:	00134900 	.inst	0x00134900 ; undefined
    2c58:	012e1e00 	.inst	0x012e1e00 ; undefined
    2c5c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    2c60:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2c64:	07120111 	.inst	0x07120111 ; undefined
    2c68:	42971840 	.inst	0x42971840 ; undefined
    2c6c:	00130119 	.inst	0x00130119 ; undefined
    2c70:	00341f00 	.inst	0x00341f00 ; NYI
    2c74:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2c78:	13490b3b 	.inst	0x13490b3b ; undefined
    2c7c:	00001702 	.inst	0x00001702 ; undefined
    2c80:	03003420 	.inst	0x03003420 ; undefined
    2c84:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2c88:	1c13490b 	ldr	s11, 295a8 <_stack_size+0x285a8>
    2c8c:	2100000b 	.inst	0x2100000b ; undefined
    2c90:	08030034 	stxrb	w3, w20, [x1]
    2c94:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2c98:	17021349 	b	fffffffffc0879bc <SMC_ID_HW_RSA+0xffffffff78077ab5>
    2c9c:	34220000 	cbz	w0, 46c9c <_stack_size+0x45c9c>
    2ca0:	3a0e0300 	adcs	w0, w24, w14
    2ca4:	490b3b0b 	.inst	0x490b3b0b ; undefined
    2ca8:	3c193f13 	str	b19, [x24,#-109]!
    2cac:	23000019 	.inst	0x23000019 ; undefined
    2cb0:	00018289 	.inst	0x00018289 ; undefined
    2cb4:	13310111 	.inst	0x13310111 ; undefined
    2cb8:	34240000 	cbz	w0, 4acb8 <_stack_size+0x49cb8>
    2cbc:	3a080300 	adcs	w0, w24, w8
    2cc0:	490b3b0b 	.inst	0x490b3b0b ; undefined
    2cc4:	00180213 	.inst	0x00180213 ; undefined
    2cc8:	00342500 	.inst	0x00342500 ; NYI
    2ccc:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2cd0:	13490b3b 	.inst	0x13490b3b ; undefined
    2cd4:	00001802 	.inst	0x00001802 ; undefined
    2cd8:	03000a26 	.inst	0x03000a26 ; undefined
    2cdc:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2ce0:	0001110b 	.inst	0x0001110b ; undefined
    2ce4:	000f2700 	.inst	0x000f2700 ; undefined
    2ce8:	13490b0b 	.inst	0x13490b0b ; undefined
    2cec:	2e280000 	uaddl	v0.8h, v0.8b, v8.8b
    2cf0:	03193f01 	.inst	0x03193f01 ; undefined
    2cf4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2cf8:	11192705 	add	w5, w24, #0x649
    2cfc:	40071201 	.inst	0x40071201 ; undefined
    2d00:	19429718 	.inst	0x19429718 ; undefined
    2d04:	00001301 	.inst	0x00001301 ; undefined
    2d08:	03000529 	.inst	0x03000529 ; undefined
    2d0c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2d10:	02134905 	.inst	0x02134905 ; undefined
    2d14:	2a000017 	orr	w23, w0, w0
    2d18:	08030034 	stxrb	w3, w20, [x1]
    2d1c:	053b0b3a 	.inst	0x053b0b3a ; undefined
    2d20:	18021349 	ldr	w9, 6f88 <_stack_size+0x5f88>
    2d24:	342b0000 	cbz	w0, 58d24 <_stack_size+0x57d24>
    2d28:	3a0e0300 	adcs	w0, w24, w14
    2d2c:	49053b0b 	.inst	0x49053b0b ; undefined
    2d30:	00180213 	.inst	0x00180213 ; undefined
    2d34:	000a2c00 	.inst	0x000a2c00 ; undefined
    2d38:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2d3c:	0111053b 	.inst	0x0111053b ; undefined
    2d40:	342d0000 	cbz	w0, 5cd40 <_stack_size+0x5bd40>
    2d44:	3a0e0300 	adcs	w0, w24, w14
    2d48:	49053b0b 	.inst	0x49053b0b ; undefined
    2d4c:	00170213 	.inst	0x00170213 ; undefined
    2d50:	012e2e00 	.inst	0x012e2e00 ; undefined
    2d54:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    2d58:	053b0b3a 	.inst	0x053b0b3a ; undefined
    2d5c:	07120111 	.inst	0x07120111 ; undefined
    2d60:	42971840 	.inst	0x42971840 ; undefined
    2d64:	00130119 	.inst	0x00130119 ; undefined
    2d68:	00342f00 	.inst	0x00342f00 ; NYI
    2d6c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2d70:	1349053b 	.inst	0x1349053b ; undefined
    2d74:	0000051c 	.inst	0x0000051c ; undefined
    2d78:	03003430 	.inst	0x03003430 ; undefined
    2d7c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2d80:	1c134905 	ldr	s5, 296a0 <_stack_size+0x286a0>
    2d84:	31000006 	adds	w6, w0, #0x0
    2d88:	193f012e 	.inst	0x193f012e ; undefined
    2d8c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2d90:	1927053b 	.inst	0x1927053b ; undefined
    2d94:	01111349 	.inst	0x01111349 ; undefined
    2d98:	18400712 	ldr	w18, 82e78 <_stack_size+0x81e78>
    2d9c:	01194297 	.inst	0x01194297 ; undefined
    2da0:	32000013 	orr	w19, w0, #0x1
    2da4:	08030005 	stxrb	w3, w5, [x0]
    2da8:	053b0b3a 	.inst	0x053b0b3a ; undefined
    2dac:	17021349 	b	fffffffffc087ad0 <SMC_ID_HW_RSA+0xffffffff78077bc9>
    2db0:	05330000 	.inst	0x05330000 ; undefined
    2db4:	3a0e0300 	adcs	w0, w24, w14
    2db8:	49053b0b 	.inst	0x49053b0b ; undefined
    2dbc:	00180213 	.inst	0x00180213 ; undefined
    2dc0:	002e3400 	.inst	0x002e3400 ; NYI
    2dc4:	01111331 	.inst	0x01111331 ; undefined
    2dc8:	18400712 	ldr	w18, 82ea8 <_stack_size+0x81ea8>
    2dcc:	00194297 	.inst	0x00194297 ; undefined
    2dd0:	00053500 	.inst	0x00053500 ; undefined
    2dd4:	17021331 	b	fffffffffc087a98 <SMC_ID_HW_RSA+0xffffffff78077b91>
    2dd8:	34360000 	cbz	w0, 6edd8 <_stack_size+0x6ddd8>
    2ddc:	02133100 	.inst	0x02133100 ; undefined
    2de0:	37000017 	tbnz	w23, #0, 2de0 <_stack_size+0x1de0>
    2de4:	1331001d 	.inst	0x1331001d ; undefined
    2de8:	07120111 	.inst	0x07120111 ; undefined
    2dec:	05590b58 	.inst	0x05590b58 ; undefined
    2df0:	2e380000 	uaddl	v0.8h, v0.8b, v24.8b
    2df4:	03193f01 	.inst	0x03193f01 ; undefined
    2df8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2dfc:	3c192705 	str	b5, [x24],#-110
    2e00:	00130119 	.inst	0x00130119 ; undefined
    2e04:	00053900 	.inst	0x00053900 ; undefined
    2e08:	00001349 	.inst	0x00001349 ; undefined
    2e0c:	3f012e3a 	.inst	0x3f012e3a ; undefined
    2e10:	3a0e0319 	adcs	w25, w24, w14
    2e14:	49053b0b 	.inst	0x49053b0b ; undefined
    2e18:	01193c13 	.inst	0x01193c13 ; undefined
    2e1c:	3b000013 	.inst	0x3b000013 ; undefined
    2e20:	00000018 	.inst	0x00000018 ; undefined
    2e24:	11010b3c 	add	w28, w25, #0x42
    2e28:	01071201 	.inst	0x01071201 ; undefined
    2e2c:	3d000013 	str	b19, [x0]
    2e30:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    2e34:	19341349 	.inst	0x19341349 ; undefined
    2e38:	00001802 	.inst	0x00001802 ; undefined
    2e3c:	0182893e 	.inst	0x0182893e ; undefined
    2e40:	95011101 	bl	4047244 <_stack_base+0x1039ac4>
    2e44:	13311942 	.inst	0x13311942 ; undefined
    2e48:	00001301 	.inst	0x00001301 ; undefined
    2e4c:	0182893f 	.inst	0x0182893f ; undefined
    2e50:	95011101 	bl	4047254 <_stack_base+0x1039ad4>
    2e54:	13311942 	.inst	0x13311942 ; undefined
    2e58:	26400000 	.inst	0x26400000 ; undefined
    2e5c:	41000000 	.inst	0x41000000 ; undefined
    2e60:	193f012e 	.inst	0x193f012e ; undefined
    2e64:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2e68:	1349053b 	.inst	0x1349053b ; undefined
    2e6c:	07120111 	.inst	0x07120111 ; undefined
    2e70:	42971840 	.inst	0x42971840 ; undefined
    2e74:	00130119 	.inst	0x00130119 ; undefined
    2e78:	012e4200 	.inst	0x012e4200 ; undefined
    2e7c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    2e80:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2e84:	193c1927 	.inst	0x193c1927 ; undefined
    2e88:	00001301 	.inst	0x00001301 ; undefined
    2e8c:	3f012e43 	.inst	0x3f012e43 ; undefined
    2e90:	3a0e0319 	adcs	w25, w24, w14
    2e94:	270b3b0b 	.inst	0x270b3b0b ; undefined
    2e98:	3c134919 	.inst	0x3c134919 ; undefined
    2e9c:	00130119 	.inst	0x00130119 ; undefined
    2ea0:	012e4400 	.inst	0x012e4400 ; undefined
    2ea4:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    2ea8:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2eac:	19270e6e 	.inst	0x19270e6e ; undefined
    2eb0:	193c1349 	.inst	0x193c1349 ; undefined
    2eb4:	00001301 	.inst	0x00001301 ; undefined
    2eb8:	3f002e45 	.inst	0x3f002e45 ; undefined
    2ebc:	3a0e0319 	adcs	w25, w24, w14
    2ec0:	270b3b0b 	.inst	0x270b3b0b ; undefined
    2ec4:	00193c19 	.inst	0x00193c19 ; undefined
    2ec8:	012e4600 	.inst	0x012e4600 ; undefined
    2ecc:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    2ed0:	053b0b3a 	.inst	0x053b0b3a ; undefined
    2ed4:	193c1927 	.inst	0x193c1927 ; undefined
    2ed8:	01000000 	.inst	0x01000000 ; undefined
    2edc:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
    2ee0:	0e030b13 	.inst	0x0e030b13 ; undefined
    2ee4:	01110e1b 	.inst	0x01110e1b ; undefined
    2ee8:	17100712 	b	fffffffffc404b30 <SMC_ID_HW_RSA+0xffffffff783f4c29>
    2eec:	24020000 	.inst	0x24020000 ; undefined
    2ef0:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
    2ef4:	000e030b 	.inst	0x000e030b ; undefined
    2ef8:	00240300 	.inst	0x00240300 ; NYI
    2efc:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
    2f00:	00000803 	.inst	0x00000803 ; undefined
    2f04:	03001604 	.inst	0x03001604 ; undefined
    2f08:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2f0c:	0013490b 	.inst	0x0013490b ; undefined
    2f10:	01040500 	.inst	0x01040500 ; undefined
    2f14:	0b0b0e03 	add	w3, w16, w11, lsl #3
    2f18:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2f1c:	00001301 	.inst	0x00001301 ; undefined
    2f20:	03002806 	.inst	0x03002806 ; undefined
    2f24:	000d1c0e 	.inst	0x000d1c0e ; undefined
    2f28:	01130700 	.inst	0x01130700 ; undefined
    2f2c:	0b0b0e03 	add	w3, w16, w11, lsl #3
    2f30:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2f34:	00001301 	.inst	0x00001301 ; undefined
    2f38:	03000d08 	.inst	0x03000d08 ; undefined
    2f3c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    2f40:	3813490b 	sttrb	w11, [x8,#-204]
    2f44:	0900000b 	.inst	0x0900000b ; undefined
    2f48:	0803000d 	stxrb	w3, w13, [x0]
    2f4c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2f50:	0b381349 	add	w9, w26, w24, uxtb #4
    2f54:	0f0a0000 	.inst	0x0f0a0000 ; undefined
    2f58:	000b0b00 	.inst	0x000b0b00 ; undefined
    2f5c:	012e0b00 	.inst	0x012e0b00 ; undefined
    2f60:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    2f64:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2f68:	13491927 	.inst	0x13491927 ; undefined
    2f6c:	07120111 	.inst	0x07120111 ; undefined
    2f70:	42971840 	.inst	0x42971840 ; undefined
    2f74:	00130119 	.inst	0x00130119 ; undefined
    2f78:	00050c00 	.inst	0x00050c00 ; undefined
    2f7c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    2f80:	13490b3b 	.inst	0x13490b3b ; undefined
    2f84:	00001702 	.inst	0x00001702 ; undefined
    2f88:	0300340d 	.inst	0x0300340d ; undefined
    2f8c:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    2f90:	0213490b 	.inst	0x0213490b ; undefined
    2f94:	0e000017 	tbl	v23.8b, {v0.16b}, v0.8b
    2f98:	08030034 	stxrb	w3, w20, [x1]
    2f9c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    2fa0:	18021349 	ldr	w9, 7208 <_stack_size+0x6208>
    2fa4:	340f0000 	cbz	w0, 20fa4 <_stack_size+0x1ffa4>
    2fa8:	3a0e0300 	adcs	w0, w24, w14
    2fac:	490b3b0b 	.inst	0x490b3b0b ; undefined
    2fb0:	00180213 	.inst	0x00180213 ; undefined
    2fb4:	82891000 	.inst	0x82891000 ; undefined
    2fb8:	01110101 	.inst	0x01110101 ; undefined
    2fbc:	13011331 	sbfx	w17, w25, #1, #4
    2fc0:	8a110000 	and	x0, x0, x17
    2fc4:	02000182 	.inst	0x02000182 ; undefined
    2fc8:	18429118 	ldr	w24, 881e8 <_stack_size+0x871e8>
    2fcc:	89120000 	.inst	0x89120000 ; undefined
    2fd0:	11010182 	add	w2, w12, #0x40
    2fd4:	00133101 	.inst	0x00133101 ; undefined
    2fd8:	000f1300 	.inst	0x000f1300 ; undefined
    2fdc:	13490b0b 	.inst	0x13490b0b ; undefined
    2fe0:	35140000 	cbnz	w0, 2afe0 <_stack_size+0x29fe0>
    2fe4:	00134900 	.inst	0x00134900 ; undefined
    2fe8:	01011500 	.inst	0x01011500 ; undefined
    2fec:	13011349 	sbfx	w9, w26, #1, #4
    2ff0:	21160000 	.inst	0x21160000 ; undefined
    2ff4:	2f134900 	.inst	0x2f134900 ; undefined
    2ff8:	1700000b 	b	fffffffffc003024 <SMC_ID_HW_RSA+0xffffffff77ff311d>
    2ffc:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    3000:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    3004:	193f1349 	.inst	0x193f1349 ; undefined
    3008:	00001802 	.inst	0x00001802 ; undefined
    300c:	3f012e18 	.inst	0x3f012e18 ; undefined
    3010:	3a0e0319 	adcs	w25, w24, w14
    3014:	270b3b0b 	.inst	0x270b3b0b ; undefined
    3018:	01193c19 	.inst	0x01193c19 ; undefined
    301c:	19000013 	.inst	0x19000013 ; undefined
    3020:	13490005 	.inst	0x13490005 ; undefined
    3024:	2e1a0000 	ext	v0.8b, v0.8b, v26.8b, #0
    3028:	03193f01 	.inst	0x03193f01 ; undefined
    302c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    3030:	4919270b 	.inst	0x4919270b ; undefined
    3034:	01193c13 	.inst	0x01193c13 ; undefined
    3038:	1b000013 	madd	w19, w0, w0, w0
    303c:	13490026 	.inst	0x13490026 ; undefined
    3040:	261c0000 	.inst	0x261c0000 ; undefined
    3044:	1d000000 	.inst	0x1d000000 ; undefined
    3048:	193f012e 	.inst	0x193f012e ; undefined
    304c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    3050:	1927053b 	.inst	0x1927053b ; undefined
    3054:	1301193c 	sbfx	w28, w9, #1, #6
    3058:	2e1e0000 	ext	v0.8b, v0.8b, v30.8b, #0
    305c:	03193f01 	.inst	0x03193f01 ; undefined
    3060:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    3064:	270e6e0b 	.inst	0x270e6e0b ; undefined
    3068:	3c134919 	.inst	0x3c134919 ; undefined
    306c:	00000019 	.inst	0x00000019 ; undefined
    3070:	10001101 	adr	x1, 3290 <_stack_size+0x2290>
    3074:	12011106 	and	w6, w8, #0x8000000f
    3078:	1b080301 	madd	w1, w24, w8, w0
    307c:	13082508 	sbfx	w8, w8, #8, #2
    3080:	00000005 	.inst	0x00000005 ; undefined
    3084:	10001101 	adr	x1, 32a4 <_stack_size+0x22a4>
    3088:	12011106 	and	w6, w8, #0x8000000f
    308c:	1b080301 	madd	w1, w24, w8, w0
    3090:	13082508 	sbfx	w8, w8, #8, #2
    3094:	00000005 	.inst	0x00000005 ; undefined
    3098:	10001101 	adr	x1, 32b8 <_stack_size+0x22b8>
    309c:	12011106 	and	w6, w8, #0x8000000f
    30a0:	1b080301 	madd	w1, w24, w8, w0
    30a4:	13082508 	sbfx	w8, w8, #8, #2
    30a8:	00000005 	.inst	0x00000005 ; undefined

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
   0:	0000002c 	.inst	0x0000002c ; undefined
   4:	00000002 	.inst	0x00000002 ; undefined
   8:	00080000 	.inst	0x00080000 ; undefined
   c:	00000000 	.word	0x00000000
  10:	03000000 	.word	0x03000000
  14:	00000000 	.word	0x00000000
  18:	00000038 	.word	0x00000038
	...
  30:	0000002c 	.word	0x0000002c
  34:	00bb0002 	.word	0x00bb0002
  38:	00080000 	.word	0x00080000
  3c:	00000000 	.word	0x00000000
  40:	03000038 	.word	0x03000038
  44:	00000000 	.word	0x00000000
  48:	000002ec 	.word	0x000002ec
	...
  60:	0000002c 	.word	0x0000002c
  64:	0a6c0002 	.word	0x0a6c0002
  68:	00080000 	.word	0x00080000
  6c:	00000000 	.word	0x00000000
  70:	03000324 	.word	0x03000324
  74:	00000000 	.word	0x00000000
  78:	00000134 	.word	0x00000134
	...
  90:	0000002c 	.word	0x0000002c
  94:	0fa10002 	.word	0x0fa10002
  98:	00080000 	.word	0x00080000
  9c:	00000000 	.word	0x00000000
  a0:	03000458 	.word	0x03000458
  a4:	00000000 	.word	0x00000000
  a8:	00000140 	.word	0x00000140
	...
  c0:	0000002c 	.word	0x0000002c
  c4:	11bc0002 	.word	0x11bc0002
  c8:	00080000 	.word	0x00080000
  cc:	00000000 	.word	0x00000000
  d0:	03000598 	.word	0x03000598
  d4:	00000000 	.word	0x00000000
  d8:	00000bc8 	.word	0x00000bc8
	...
  f0:	0000002c 	.word	0x0000002c
  f4:	1a5e0002 	.word	0x1a5e0002
  f8:	00080000 	.word	0x00080000
  fc:	00000000 	.word	0x00000000
 100:	03001160 	.word	0x03001160
 104:	00000000 	.word	0x00000000
 108:	00000c00 	.word	0x00000c00
	...
 120:	0000002c 	.word	0x0000002c
 124:	2c520002 	.word	0x2c520002
 128:	00080000 	.word	0x00080000
 12c:	00000000 	.word	0x00000000
 130:	03001d60 	.word	0x03001d60
 134:	00000000 	.word	0x00000000
 138:	00000248 	.word	0x00000248
	...
 150:	0000001c 	.word	0x0000001c
 154:	300c0002 	.word	0x300c0002
 158:	00080000 	.word	0x00080000
	...
 170:	0000002c 	.word	0x0000002c
 174:	306c0002 	.word	0x306c0002
 178:	00080000 	.word	0x00080000
 17c:	00000000 	.word	0x00000000
 180:	03001fa8 	.word	0x03001fa8
 184:	00000000 	.word	0x00000000
 188:	000006c4 	.word	0x000006c4
	...
 1a0:	0000002c 	.word	0x0000002c
 1a4:	39a40002 	.word	0x39a40002
 1a8:	00080000 	.word	0x00080000
 1ac:	00000000 	.word	0x00000000
 1b0:	0300266c 	.word	0x0300266c
 1b4:	00000000 	.word	0x00000000
 1b8:	0000154c 	.word	0x0000154c
	...
 1d0:	0000002c 	.word	0x0000002c
 1d4:	51970002 	.word	0x51970002
 1d8:	00080000 	.word	0x00080000
 1dc:	00000000 	.word	0x00000000
 1e0:	03003bb8 	.word	0x03003bb8
 1e4:	00000000 	.word	0x00000000
 1e8:	000004f8 	.word	0x000004f8
	...
 200:	0000002c 	.word	0x0000002c
 204:	59c90002 	.word	0x59c90002
 208:	00080000 	.word	0x00080000
 20c:	00000000 	.word	0x00000000
 210:	030040b0 	.word	0x030040b0
 214:	00000000 	.word	0x00000000
 218:	00000c84 	.word	0x00000c84
	...
 230:	0000002c 	.word	0x0000002c
 234:	64970002 	.word	0x64970002
 238:	00080000 	.word	0x00080000
 23c:	00000000 	.word	0x00000000
 240:	03004d34 	.word	0x03004d34
 244:	00000000 	.word	0x00000000
 248:	00000140 	.word	0x00000140
	...
 260:	0000002c 	.word	0x0000002c
 264:	66610002 	.word	0x66610002
 268:	00080000 	.word	0x00080000
 26c:	00000000 	.word	0x00000000
 270:	03004e74 	.word	0x03004e74
 274:	00000000 	.word	0x00000000
 278:	00000200 	.word	0x00000200
	...
 290:	0000002c 	.word	0x0000002c
 294:	6b9f0002 	.word	0x6b9f0002
 298:	00080000 	.word	0x00080000
 29c:	00000000 	.word	0x00000000
 2a0:	03005074 	.word	0x03005074
 2a4:	00000000 	.word	0x00000000
 2a8:	00000304 	.word	0x00000304
	...
 2c0:	0000002c 	.word	0x0000002c
 2c4:	75b40002 	.word	0x75b40002
 2c8:	00080000 	.word	0x00080000
 2cc:	00000000 	.word	0x00000000
 2d0:	03005378 	.word	0x03005378
 2d4:	00000000 	.word	0x00000000
 2d8:	0000036c 	.word	0x0000036c
	...
 2f0:	0000002c 	.word	0x0000002c
 2f4:	80ab0002 	.word	0x80ab0002
 2f8:	00080000 	.word	0x00080000
 2fc:	00000000 	.word	0x00000000
 300:	030056e4 	.word	0x030056e4
 304:	00000000 	.word	0x00000000
 308:	0000020c 	.word	0x0000020c
	...
 320:	0000002c 	.word	0x0000002c
 324:	88040002 	.word	0x88040002
 328:	00080000 	.word	0x00080000
 32c:	00000000 	.word	0x00000000
 330:	030058f0 	.word	0x030058f0
 334:	00000000 	.word	0x00000000
 338:	00000098 	.word	0x00000098
	...
 350:	0000002c 	.word	0x0000002c
 354:	8b230002 	.word	0x8b230002
 358:	00080000 	.word	0x00080000
 35c:	00000000 	.word	0x00000000
 360:	03005988 	.word	0x03005988
 364:	00000000 	.word	0x00000000
 368:	00000018 	.word	0x00000018
	...
 380:	0000002c 	.word	0x0000002c
 384:	8bd60002 	.word	0x8bd60002
 388:	00080000 	.word	0x00080000
 38c:	00000000 	.word	0x00000000
 390:	030059a0 	.word	0x030059a0
 394:	00000000 	.word	0x00000000
 398:	0000016c 	.word	0x0000016c
	...
 3b0:	0000002c 	.word	0x0000002c
 3b4:	8ff00002 	.word	0x8ff00002
 3b8:	00080000 	.word	0x00080000
 3bc:	00000000 	.word	0x00000000
 3c0:	03005b0c 	.word	0x03005b0c
 3c4:	00000000 	.word	0x00000000
 3c8:	000006c8 	.word	0x000006c8
	...
 3e0:	0000001c 	.word	0x0000001c
 3e4:	a0b70002 	.word	0xa0b70002
 3e8:	00080000 	.word	0x00080000
	...
 400:	0000002c 	.word	0x0000002c
 404:	a13e0002 	.word	0xa13e0002
 408:	00080000 	.word	0x00080000
 40c:	00000000 	.word	0x00000000
 410:	030061d4 	.word	0x030061d4
 414:	00000000 	.word	0x00000000
 418:	00000160 	.word	0x00000160
	...
 430:	0000002c 	.word	0x0000002c
 434:	a9080002 	.word	0xa9080002
 438:	00080000 	.word	0x00080000
 43c:	00000000 	.word	0x00000000
 440:	03006334 	.word	0x03006334
 444:	00000000 	.word	0x00000000
 448:	00001830 	.word	0x00001830
	...
 460:	0000002c 	.word	0x0000002c
 464:	bdb40002 	.word	0xbdb40002
 468:	00080000 	.word	0x00080000
 46c:	00000000 	.word	0x00000000
 470:	03007b64 	.word	0x03007b64
 474:	00000000 	.word	0x00000000
 478:	00000228 	.word	0x00000228
	...
 490:	0000002c 	.word	0x0000002c
 494:	c4370002 	.word	0xc4370002
 498:	00080000 	.word	0x00080000
 49c:	00000000 	.word	0x00000000
 4a0:	03008000 	.word	0x03008000
 4a4:	00000000 	.word	0x00000000
 4a8:	00001784 	.word	0x00001784
	...
 4c0:	0000002c 	.word	0x0000002c
 4c4:	c4f40002 	.word	0xc4f40002
 4c8:	00080000 	.word	0x00080000
 4cc:	00000000 	.word	0x00000000
 4d0:	03009800 	.word	0x03009800
 4d4:	00000000 	.word	0x00000000
 4d8:	000001b0 	.word	0x000001b0
	...
 4f0:	0000002c 	.word	0x0000002c
 4f4:	c5af0002 	.word	0xc5af0002
 4f8:	00080000 	.word	0x00080000
 4fc:	00000000 	.word	0x00000000
 500:	030099b0 	.word	0x030099b0
 504:	00000000 	.word	0x00000000
 508:	00000080 	.word	0x00000080
	...

Disassembly of section .debug_loc:

0000000000000000 <.debug_loc>:
       0:	00000014 	.inst	0x00000014 ; undefined
       4:	00000000 	.inst	0x00000000 ; undefined
       8:	0000003f 	.inst	0x0000003f ; undefined
       c:	00000000 	.inst	0x00000000 ; undefined
      10:	3f500001 	.inst	0x3f500001 ; undefined
      14:	00000000 	.inst	0x00000000 ; undefined
      18:	54000000 	b.eq	18 <MPIDR_EL1_AFF2_LSB+0x8>
      1c:	00000000 	.inst	0x00000000 ; undefined
      20:	04000000 	.inst	0x04000000 ; undefined
      24:	5001f300 	adr	x0, 3e86 <_stack_size+0x2e86>
      28:	0000009f 	.inst	0x0000009f ; undefined
	...
      38:	00001400 	.inst	0x00001400 ; undefined
      3c:	00000000 	.inst	0x00000000 ; undefined
      40:	00003f00 	.inst	0x00003f00 ; undefined
      44:	00000000 	.inst	0x00000000 ; undefined
      48:	51000100 	sub	w0, w8, #0x0
      4c:	0000003f 	.inst	0x0000003f ; undefined
      50:	00000000 	.inst	0x00000000 ; undefined
      54:	00000054 	.inst	0x00000054 ; undefined
      58:	00000000 	.inst	0x00000000 ; undefined
      5c:	01f30004 	.inst	0x01f30004 ; undefined
      60:	00009f51 	.inst	0x00009f51 ; undefined
	...
      70:	00540000 	.inst	0x00540000 ; undefined
      74:	00000000 	.inst	0x00000000 ; undefined
      78:	005c0000 	.inst	0x005c0000 ; undefined
      7c:	00000000 	.inst	0x00000000 ; undefined
      80:	00020000 	.inst	0x00020000 ; undefined
      84:	005c9f30 	.inst	0x005c9f30 ; undefined
      88:	00000000 	.inst	0x00000000 ; undefined
      8c:	00600000 	.inst	0x00600000 ; undefined
      90:	00000000 	.inst	0x00000000 ; undefined
      94:	00050000 	.inst	0x00050000 ; undefined
      98:	21340070 	.inst	0x21340070 ; undefined
      9c:	0000609f 	.inst	0x0000609f ; undefined
      a0:	00000000 	.inst	0x00000000 ; undefined
      a4:	00007800 	.inst	0x00007800 ; undefined
      a8:	00000000 	.inst	0x00000000 ; undefined
      ac:	50000100 	adr	x0, ce <MPIDR_EL1_AFF3_LSB+0xae>
	...
      c0:	0000005c 	.inst	0x0000005c ; undefined
      c4:	00000000 	.inst	0x00000000 ; undefined
      c8:	00000060 	.inst	0x00000060 ; undefined
      cc:	00000000 	.inst	0x00000000 ; undefined
      d0:	00500001 	.inst	0x00500001 ; undefined
	...
      e0:	5c000000 	ldr	d0, e0 <MPIDR_EL1_AFF3_LSB+0xc0>
      e4:	00000000 	.inst	0x00000000 ; undefined
      e8:	60000000 	.inst	0x60000000 ; undefined
      ec:	00000000 	.inst	0x00000000 ; undefined
      f0:	05000000 	.inst	0x05000000 ; undefined
      f4:	34007000 	cbz	w0, ef4 <MPIDR_EL1_AFF3_LSB+0xed4>
      f8:	00609f21 	.inst	0x00609f21 ; undefined
      fc:	00000000 	.inst	0x00000000 ; undefined
     100:	00780000 	.inst	0x00780000 ; undefined
     104:	00000000 	.inst	0x00000000 ; undefined
     108:	00010000 	.inst	0x00010000 ; undefined
     10c:	00000050 	.inst	0x00000050 ; undefined
	...
     11c:	00008800 	.inst	0x00008800 ; undefined
     120:	00000000 	.inst	0x00000000 ; undefined
     124:	00009c00 	.inst	0x00009c00 ; undefined
     128:	00000000 	.inst	0x00000000 ; undefined
     12c:	50000100 	adr	x0, 14e <MPIDR_EL1_AFF3_LSB+0x12e>
     130:	0000009c 	.inst	0x0000009c ; undefined
     134:	00000000 	.inst	0x00000000 ; undefined
     138:	000000d8 	.inst	0x000000d8 ; undefined
     13c:	00000000 	.inst	0x00000000 ; undefined
     140:	d8630001 	prfm	pldl1strm, c6140 <_stack_size+0xc5140>
     144:	00000000 	.inst	0x00000000 ; undefined
     148:	dc000000 	.inst	0xdc000000 ; undefined
     14c:	00000000 	.inst	0x00000000 ; undefined
     150:	04000000 	.inst	0x04000000 ; undefined
     154:	5001f300 	adr	x0, 3fb6 <_stack_size+0x2fb6>
     158:	0000dc9f 	.inst	0x0000dc9f ; undefined
     15c:	00000000 	.inst	0x00000000 ; undefined
     160:	00010c00 	.inst	0x00010c00 ; undefined
     164:	00000000 	.inst	0x00000000 ; undefined
     168:	63000100 	.inst	0x63000100 ; undefined
     16c:	0000010c 	.inst	0x0000010c ; undefined
     170:	00000000 	.inst	0x00000000 ; undefined
     174:	00000110 	.inst	0x00000110 ; undefined
     178:	00000000 	.inst	0x00000000 ; undefined
     17c:	01f30004 	.inst	0x01f30004 ; undefined
     180:	01109f50 	.inst	0x01109f50 ; undefined
     184:	00000000 	.inst	0x00000000 ; undefined
     188:	026c0000 	.inst	0x026c0000 ; undefined
     18c:	00000000 	.inst	0x00000000 ; undefined
     190:	00010000 	.inst	0x00010000 ; undefined
     194:	00026c63 	.inst	0x00026c63 ; undefined
     198:	00000000 	.inst	0x00000000 ; undefined
     19c:	00027000 	.inst	0x00027000 ; undefined
     1a0:	00000000 	.inst	0x00000000 ; undefined
     1a4:	f3000400 	.inst	0xf3000400 ; undefined
     1a8:	009f5001 	.inst	0x009f5001 ; undefined
	...
     1b8:	88000000 	stxr	w0, w0, [x0]
     1bc:	00000000 	.inst	0x00000000 ; undefined
     1c0:	98000000 	ldrsw	x0, 1c0 <MPIDR_EL1_AFF3_LSB+0x1a0>
     1c4:	00000000 	.inst	0x00000000 ; undefined
     1c8:	02000000 	.inst	0x02000000 ; undefined
     1cc:	989f3000 	ldrsw	x0, fffffffffff3e7cc <SMC_ID_HW_RSA+0xffffffff7bf2e8c5>
     1d0:	00000000 	.inst	0x00000000 ; undefined
     1d4:	9c000000 	ldr	q0, 1d4 <MPIDR_EL1_AFF3_LSB+0x1b4>
     1d8:	00000000 	.inst	0x00000000 ; undefined
     1dc:	07000000 	.inst	0x07000000 ; undefined
     1e0:	0a008400 	.inst	0x0a008400 ; undefined
     1e4:	9f211000 	.inst	0x9f211000 ; undefined
     1e8:	0000009c 	.inst	0x0000009c ; undefined
     1ec:	00000000 	.inst	0x00000000 ; undefined
     1f0:	000000b4 	.inst	0x000000b4 ; undefined
     1f4:	00000000 	.inst	0x00000000 ; undefined
     1f8:	b4500001 	cbz	x1, a01f8 <_stack_size+0x9f1f8>
     1fc:	00000000 	.inst	0x00000000 ; undefined
     200:	d8000000 	prfm	pldl1keep, 200 <MPIDR_EL1_AFF3_LSB+0x1e0>
     204:	00000000 	.inst	0x00000000 ; undefined
     208:	07000000 	.inst	0x07000000 ; undefined
     20c:	0a008400 	.inst	0x0a008400 ; undefined
     210:	9f211000 	.inst	0x9f211000 ; undefined
     214:	000000dc 	.inst	0x000000dc ; undefined
     218:	00000000 	.inst	0x00000000 ; undefined
     21c:	0000010c 	.inst	0x0000010c ; undefined
     220:	00000000 	.inst	0x00000000 ; undefined
     224:	00840007 	.inst	0x00840007 ; undefined
     228:	2110000a 	.inst	0x2110000a ; undefined
     22c:	0001109f 	.inst	0x0001109f ; undefined
     230:	00000000 	.inst	0x00000000 ; undefined
     234:	00026c00 	.inst	0x00026c00 ; undefined
     238:	00000000 	.inst	0x00000000 ; undefined
     23c:	84000700 	.inst	0x84000700 ; undefined
     240:	10000a00 	adr	x0, 380 <MPIDR_EL1_AFF3_LSB+0x360>
     244:	00009f21 	.inst	0x00009f21 ; undefined
	...
     254:	00880000 	.inst	0x00880000 ; undefined
     258:	00000000 	.inst	0x00000000 ; undefined
     25c:	00dc0000 	.inst	0x00dc0000 ; undefined
     260:	00000000 	.inst	0x00000000 ; undefined
     264:	00020000 	.inst	0x00020000 ; undefined
     268:	00dc9f30 	.inst	0x00dc9f30 ; undefined
     26c:	00000000 	.inst	0x00000000 ; undefined
     270:	01100000 	.inst	0x01100000 ; undefined
     274:	00000000 	.inst	0x00000000 ; undefined
     278:	00020000 	.inst	0x00020000 ; undefined
     27c:	01109f34 	.inst	0x01109f34 ; undefined
     280:	00000000 	.inst	0x00000000 ; undefined
     284:	02700000 	.inst	0x02700000 ; undefined
     288:	00000000 	.inst	0x00000000 ; undefined
     28c:	00020000 	.inst	0x00020000 ; undefined
     290:	00009f30 	.inst	0x00009f30 ; undefined
	...
     2a0:	00980000 	.inst	0x00980000 ; undefined
     2a4:	00000000 	.inst	0x00000000 ; undefined
     2a8:	00d80000 	.inst	0x00d80000 ; undefined
     2ac:	00000000 	.inst	0x00000000 ; undefined
     2b0:	00010000 	.inst	0x00010000 ; undefined
     2b4:	0000dc64 	.inst	0x0000dc64 ; undefined
     2b8:	00000000 	.inst	0x00000000 ; undefined
     2bc:	00010c00 	.inst	0x00010c00 ; undefined
     2c0:	00000000 	.inst	0x00000000 ; undefined
     2c4:	64000100 	.inst	0x64000100 ; undefined
     2c8:	00000110 	.inst	0x00000110 ; undefined
     2cc:	00000000 	.inst	0x00000000 ; undefined
     2d0:	0000026c 	.inst	0x0000026c ; undefined
     2d4:	00000000 	.inst	0x00000000 ; undefined
     2d8:	00640001 	.inst	0x00640001 ; undefined
	...
     2e8:	98000000 	ldrsw	x0, 2e8 <MPIDR_EL1_AFF3_LSB+0x2c8>
     2ec:	00000000 	.inst	0x00000000 ; undefined
     2f0:	9c000000 	ldr	q0, 2f0 <MPIDR_EL1_AFF3_LSB+0x2d0>
     2f4:	00000000 	.inst	0x00000000 ; undefined
     2f8:	07000000 	.inst	0x07000000 ; undefined
     2fc:	0a008400 	.inst	0x0a008400 ; undefined
     300:	9f211000 	.inst	0x9f211000 ; undefined
     304:	0000009c 	.inst	0x0000009c ; undefined
     308:	00000000 	.inst	0x00000000 ; undefined
     30c:	000000b4 	.inst	0x000000b4 ; undefined
     310:	00000000 	.inst	0x00000000 ; undefined
     314:	b4500001 	cbz	x1, a0314 <_stack_size+0x9f314>
     318:	00000000 	.inst	0x00000000 ; undefined
     31c:	d8000000 	prfm	pldl1keep, 31c <MPIDR_EL1_AFF3_LSB+0x2fc>
     320:	00000000 	.inst	0x00000000 ; undefined
     324:	07000000 	.inst	0x07000000 ; undefined
     328:	0a008400 	.inst	0x0a008400 ; undefined
     32c:	9f211000 	.inst	0x9f211000 ; undefined
     330:	000000dc 	.inst	0x000000dc ; undefined
     334:	00000000 	.inst	0x00000000 ; undefined
     338:	0000010c 	.inst	0x0000010c ; undefined
     33c:	00000000 	.inst	0x00000000 ; undefined
     340:	00840007 	.inst	0x00840007 ; undefined
     344:	2110000a 	.inst	0x2110000a ; undefined
     348:	0001109f 	.inst	0x0001109f ; undefined
     34c:	00000000 	.inst	0x00000000 ; undefined
     350:	00026c00 	.inst	0x00026c00 ; undefined
     354:	00000000 	.inst	0x00000000 ; undefined
     358:	84000700 	.inst	0x84000700 ; undefined
     35c:	10000a00 	adr	x0, 49c <MPIDR_EL1_AFF3_LSB+0x47c>
     360:	00009f21 	.inst	0x00009f21 ; undefined
	...
     370:	00c40000 	.inst	0x00c40000 ; undefined
     374:	00000000 	.inst	0x00000000 ; undefined
     378:	00c80000 	.inst	0x00c80000 ; undefined
     37c:	00000000 	.inst	0x00000000 ; undefined
     380:	00010000 	.inst	0x00010000 ; undefined
     384:	00000050 	.inst	0x00000050 ; undefined
	...
     394:	0000dc00 	.inst	0x0000dc00 ; undefined
     398:	00000000 	.inst	0x00000000 ; undefined
     39c:	00010c00 	.inst	0x00010c00 ; undefined
     3a0:	00000000 	.inst	0x00000000 ; undefined
     3a4:	84000b00 	.inst	0x84000b00 ; undefined
     3a8:	effb0b00 	.inst	0xeffb0b00 ; undefined
     3ac:	10000a1a 	adr	x26, 4ec <MPIDR_EL1_AFF3_LSB+0x4cc>
     3b0:	00009f21 	.inst	0x00009f21 ; undefined
	...
     3c0:	01100000 	.inst	0x01100000 ; undefined
     3c4:	00000000 	.inst	0x00000000 ; undefined
     3c8:	013c0000 	.inst	0x013c0000 ; undefined
     3cc:	00000000 	.inst	0x00000000 ; undefined
     3d0:	00020000 	.inst	0x00020000 ; undefined
     3d4:	013c9f30 	.inst	0x013c9f30 ; undefined
     3d8:	00000000 	.inst	0x00000000 ; undefined
     3dc:	01980000 	.inst	0x01980000 ; undefined
     3e0:	00000000 	.inst	0x00000000 ; undefined
     3e4:	00060000 	.inst	0x00060000 ; undefined
     3e8:	0100000c 	.inst	0x0100000c ; undefined
     3ec:	01989f80 	.inst	0x01989f80 ; undefined
     3f0:	00000000 	.inst	0x00000000 ; undefined
     3f4:	02640000 	.inst	0x02640000 ; undefined
     3f8:	00000000 	.inst	0x00000000 ; undefined
     3fc:	00060000 	.inst	0x00060000 ; undefined
     400:	0110000c 	.inst	0x0110000c ; undefined
     404:	00009f80 	.inst	0x00009f80 ; undefined
	...
     414:	01100000 	.inst	0x01100000 ; undefined
     418:	00000000 	.inst	0x00000000 ; undefined
     41c:	01c80000 	.inst	0x01c80000 ; undefined
     420:	00000000 	.inst	0x00000000 ; undefined
     424:	00020000 	.inst	0x00020000 ; undefined
     428:	01d89f30 	.inst	0x01d89f30 ; undefined
     42c:	00000000 	.inst	0x00000000 ; undefined
     430:	01f00000 	.inst	0x01f00000 ; undefined
     434:	00000000 	.inst	0x00000000 ; undefined
     438:	00010000 	.inst	0x00010000 ; undefined
     43c:	0001f451 	.inst	0x0001f451 ; undefined
     440:	00000000 	.inst	0x00000000 ; undefined
     444:	00025800 	.inst	0x00025800 ; undefined
     448:	00000000 	.inst	0x00000000 ; undefined
     44c:	51000100 	sub	w0, w8, #0x0
	...
     460:	00000110 	.inst	0x00000110 ; undefined
     464:	00000000 	.inst	0x00000000 ; undefined
     468:	00000240 	.inst	0x00000240 ; undefined
     46c:	00000000 	.inst	0x00000000 ; undefined
     470:	9f300002 	.inst	0x9f300002 ; undefined
	...
     484:	000001d8 	.inst	0x000001d8 ; undefined
     488:	00000000 	.inst	0x00000000 ; undefined
     48c:	000001e0 	.inst	0x000001e0 ; undefined
     490:	00000000 	.inst	0x00000000 ; undefined
     494:	00710006 	.inst	0x00710006 ; undefined
     498:	9f210076 	.inst	0x9f210076 ; undefined
     49c:	000001e0 	.inst	0x000001e0 ; undefined
     4a0:	00000000 	.inst	0x00000000 ; undefined
     4a4:	000001f0 	.inst	0x000001f0 ; undefined
     4a8:	00000000 	.inst	0x00000000 ; undefined
     4ac:	f4520001 	.inst	0xf4520001 ; undefined
     4b0:	00000001 	.inst	0x00000001 ; undefined
     4b4:	fc000000 	stur	d0, [x0]
     4b8:	00000001 	.inst	0x00000001 ; undefined
     4bc:	07000000 	.inst	0x07000000 ; undefined
     4c0:	0a007100 	and	w0, w8, w0, lsl #28
     4c4:	9f210445 	.inst	0x9f210445 ; undefined
     4c8:	000001fc 	.inst	0x000001fc ; undefined
     4cc:	00000000 	.inst	0x00000000 ; undefined
     4d0:	00000210 	.inst	0x00000210 ; undefined
     4d4:	00000000 	.inst	0x00000000 ; undefined
     4d8:	10520001 	adr	x1, a44d8 <_stack_size+0xa34d8>
     4dc:	00000002 	.inst	0x00000002 ; undefined
     4e0:	1c000000 	ldr	s0, 4e0 <MPIDR_EL1_AFF3_LSB+0x4c0>
     4e4:	00000002 	.inst	0x00000002 ; undefined
     4e8:	06000000 	.inst	0x06000000 ; undefined
     4ec:	76007100 	.inst	0x76007100 ; undefined
     4f0:	1c9f2100 	ldr	s0, fffffffffff3e910 <SMC_ID_HW_RSA+0xffffffff7bf2ea09>
     4f4:	00000002 	.inst	0x00000002 ; undefined
     4f8:	54000000 	b.eq	4f8 <MPIDR_EL1_AFF3_LSB+0x4d8>
     4fc:	00000002 	.inst	0x00000002 ; undefined
     500:	01000000 	.inst	0x01000000 ; undefined
     504:	00005200 	.inst	0x00005200 ; undefined
	...
     514:	01980000 	.inst	0x01980000 ; undefined
     518:	00000000 	.inst	0x00000000 ; undefined
     51c:	01c80000 	.inst	0x01c80000 ; undefined
     520:	00000000 	.inst	0x00000000 ; undefined
     524:	00020000 	.inst	0x00020000 ; undefined
     528:	01c89f30 	.inst	0x01c89f30 ; undefined
     52c:	00000000 	.inst	0x00000000 ; undefined
     530:	025f0000 	.inst	0x025f0000 ; undefined
     534:	00000000 	.inst	0x00000000 ; undefined
     538:	00010000 	.inst	0x00010000 ; undefined
     53c:	0000005d 	.inst	0x0000005d ; undefined
	...
     54c:	0001c800 	.inst	0x0001c800 ; undefined
     550:	00000000 	.inst	0x00000000 ; undefined
     554:	0001d800 	.inst	0x0001d800 ; undefined
     558:	00000000 	.inst	0x00000000 ; undefined
     55c:	30000200 	adr	x0, 59d <MPIDR_EL1_AFF3_LSB+0x57d>
     560:	0001d89f 	.inst	0x0001d89f ; undefined
     564:	00000000 	.inst	0x00000000 ; undefined
     568:	00024000 	.inst	0x00024000 ; undefined
     56c:	00000000 	.inst	0x00000000 ; undefined
     570:	50000100 	adr	x0, 592 <MPIDR_EL1_AFF3_LSB+0x572>
	...
     584:	00000110 	.inst	0x00000110 ; undefined
     588:	00000000 	.inst	0x00000000 ; undefined
     58c:	000001c8 	.inst	0x000001c8 ; undefined
     590:	00000000 	.inst	0x00000000 ; undefined
     594:	000c0006 	.inst	0x000c0006 ; undefined
     598:	9f800100 	.inst	0x9f800100 ; undefined
     59c:	000001c8 	.inst	0x000001c8 ; undefined
     5a0:	00000000 	.inst	0x00000000 ; undefined
     5a4:	00000234 	.inst	0x00000234 ; undefined
     5a8:	00000000 	.inst	0x00000000 ; undefined
     5ac:	807e0007 	.inst	0x807e0007 ; undefined
     5b0:	088084a0 	stlrb	w0, [x5]
     5b4:	0002349f 	.inst	0x0002349f ; undefined
     5b8:	00000000 	.inst	0x00000000 ; undefined
     5bc:	00025f00 	.inst	0x00025f00 ; undefined
     5c0:	00000000 	.inst	0x00000000 ; undefined
     5c4:	7e000700 	.inst	0x7e000700 ; undefined
     5c8:	80848080 	.inst	0x80848080 ; undefined
     5cc:	00009f08 	.inst	0x00009f08 ; undefined
	...
     5dc:	01100000 	.inst	0x01100000 ; undefined
     5e0:	00000000 	.inst	0x00000000 ; undefined
     5e4:	02640000 	.inst	0x02640000 ; undefined
     5e8:	00000000 	.inst	0x00000000 ; undefined
     5ec:	00030000 	.inst	0x00030000 ; undefined
     5f0:	009fff08 	.inst	0x009fff08 ; undefined
	...
     600:	1c000000 	ldr	s0, 600 <MPIDR_EL1_AFF3_LSB+0x5e0>
     604:	00000001 	.inst	0x00000001 ; undefined
     608:	64000000 	.inst	0x64000000 ; undefined
     60c:	00000002 	.inst	0x00000002 ; undefined
     610:	04000000 	.inst	0x04000000 ; undefined
     614:	25200a00 	.inst	0x25200a00 ; undefined
     618:	0000009f 	.inst	0x0000009f ; undefined
	...
     628:	00024000 	.inst	0x00024000 ; undefined
     62c:	00000000 	.inst	0x00000000 ; undefined
     630:	00024400 	.inst	0x00024400 ; undefined
     634:	00000000 	.inst	0x00000000 ; undefined
     638:	50000100 	adr	x0, 65a <MPIDR_EL1_AFF3_LSB+0x63a>
	...
     64c:	00000240 	.inst	0x00000240 ; undefined
     650:	00000000 	.inst	0x00000000 ; undefined
     654:	00000244 	.inst	0x00000244 ; undefined
     658:	00000000 	.inst	0x00000000 ; undefined
     65c:	00700005 	.inst	0x00700005 ; undefined
     660:	449f2131 	.inst	0x449f2131 ; undefined
     664:	00000002 	.inst	0x00000002 ; undefined
     668:	5c000000 	ldr	d0, 668 <MPIDR_EL1_AFF3_LSB+0x648>
     66c:	00000002 	.inst	0x00000002 ; undefined
     670:	01000000 	.inst	0x01000000 ; undefined
     674:	00005000 	.inst	0x00005000 ; undefined
	...
     684:	02700000 	.inst	0x02700000 ; undefined
     688:	00000000 	.inst	0x00000000 ; undefined
     68c:	02a00000 	.inst	0x02a00000 ; undefined
     690:	00000000 	.inst	0x00000000 ; undefined
     694:	00020000 	.inst	0x00020000 ; undefined
     698:	02a09f30 	.inst	0x02a09f30 ; undefined
     69c:	00000000 	.inst	0x00000000 ; undefined
     6a0:	02d40000 	.inst	0x02d40000 ; undefined
     6a4:	00000000 	.inst	0x00000000 ; undefined
     6a8:	00020000 	.inst	0x00020000 ; undefined
     6ac:	00009f35 	.inst	0x00009f35 ; undefined
	...
     6bc:	02780000 	.inst	0x02780000 ; undefined
     6c0:	00000000 	.inst	0x00000000 ; undefined
     6c4:	027c0000 	.inst	0x027c0000 ; undefined
     6c8:	00000000 	.inst	0x00000000 ; undefined
     6cc:	00010000 	.inst	0x00010000 ; undefined
     6d0:	00000050 	.inst	0x00000050 ; undefined
	...
     6e0:	00027800 	.inst	0x00027800 ; undefined
     6e4:	00000000 	.inst	0x00000000 ; undefined
     6e8:	00027c00 	.inst	0x00027c00 ; undefined
     6ec:	00000000 	.inst	0x00000000 ; undefined
     6f0:	70000700 	adr	x0, 7d3 <MPIDR_EL1_AFF3_LSB+0x7b3>
     6f4:	efff0b00 	.inst	0xefff0b00 ; undefined
     6f8:	027c9f1a 	.inst	0x027c9f1a ; undefined
     6fc:	00000000 	.inst	0x00000000 ; undefined
     700:	02940000 	.inst	0x02940000 ; undefined
     704:	00000000 	.inst	0x00000000 ; undefined
     708:	00010000 	.inst	0x00010000 ; undefined
     70c:	00000050 	.inst	0x00000050 ; undefined
	...
     71c:	0002a000 	.inst	0x0002a000 ; undefined
     720:	00000000 	.inst	0x00000000 ; undefined
     724:	0002d000 	.inst	0x0002d000 ; undefined
     728:	00000000 	.inst	0x00000000 ; undefined
     72c:	63000100 	.inst	0x63000100 ; undefined
	...
     740:	000002a0 	.inst	0x000002a0 ; undefined
     744:	00000000 	.inst	0x00000000 ; undefined
     748:	000002a8 	.inst	0x000002a8 ; undefined
     74c:	00000000 	.inst	0x00000000 ; undefined
     750:	00830006 	.inst	0x00830006 ; undefined
     754:	9f1afa09 	.inst	0x9f1afa09 ; undefined
     758:	000002a8 	.inst	0x000002a8 ; undefined
     75c:	00000000 	.inst	0x00000000 ; undefined
     760:	000002c0 	.inst	0x000002c0 ; undefined
     764:	00000000 	.inst	0x00000000 ; undefined
     768:	c0500001 	.inst	0xc0500001 ; undefined
     76c:	00000002 	.inst	0x00000002 ; undefined
     770:	d0000000 	adrp	x0, 2000 <_stack_size+0x1000>
     774:	00000002 	.inst	0x00000002 ; undefined
     778:	06000000 	.inst	0x06000000 ; undefined
     77c:	09008300 	.inst	0x09008300 ; undefined
     780:	009f1afa 	.inst	0x009f1afa ; undefined
	...
     798:	a4000000 	.inst	0xa4000000 ; undefined
     79c:	00000000 	.inst	0x00000000 ; undefined
     7a0:	03000000 	.inst	0x03000000 ; undefined
     7a4:	9fff0800 	.inst	0x9fff0800 ; undefined
     7a8:	000000a4 	.inst	0x000000a4 ; undefined
     7ac:	00000000 	.inst	0x00000000 ; undefined
     7b0:	000000a8 	.inst	0x000000a8 ; undefined
     7b4:	00000000 	.inst	0x00000000 ; undefined
     7b8:	a8500001 	ldnp	x1, x0, [x0,#256]
     7bc:	00000000 	.inst	0x00000000 ; undefined
     7c0:	cc000000 	.inst	0xcc000000 ; undefined
     7c4:	00000000 	.inst	0x00000000 ; undefined
     7c8:	01000000 	.inst	0x01000000 ; undefined
     7cc:	00cc6400 	.inst	0x00cc6400 ; undefined
     7d0:	00000000 	.inst	0x00000000 ; undefined
     7d4:	00d00000 	.inst	0x00d00000 ; undefined
     7d8:	00000000 	.inst	0x00000000 ; undefined
     7dc:	00010000 	.inst	0x00010000 ; undefined
     7e0:	0000d050 	.inst	0x0000d050 ; undefined
     7e4:	00000000 	.inst	0x00000000 ; undefined
     7e8:	00010800 	.inst	0x00010800 ; undefined
     7ec:	00000000 	.inst	0x00000000 ; undefined
     7f0:	64000100 	.inst	0x64000100 ; undefined
     7f4:	00000108 	.inst	0x00000108 ; undefined
     7f8:	00000000 	.inst	0x00000000 ; undefined
     7fc:	00000110 	.inst	0x00000110 ; undefined
     800:	00000000 	.inst	0x00000000 ; undefined
     804:	ff080003 	.inst	0xff080003 ; undefined
     808:	0001109f 	.inst	0x0001109f ; undefined
     80c:	00000000 	.inst	0x00000000 ; undefined
     810:	00013400 	.inst	0x00013400 ; undefined
     814:	00000000 	.inst	0x00000000 ; undefined
     818:	64000100 	.inst	0x64000100 ; undefined
	...
     834:	0000002c 	.inst	0x0000002c ; undefined
     838:	00000000 	.inst	0x00000000 ; undefined
     83c:	2c500001 	ldnp	s1, s0, [x0,#128]
     840:	00000000 	.inst	0x00000000 ; undefined
     844:	34000000 	cbz	w0, 844 <MPIDR_EL1_AFF3_LSB+0x824>
     848:	00000000 	.inst	0x00000000 ; undefined
     84c:	01000000 	.inst	0x01000000 ; undefined
     850:	00385000 	.inst	0x00385000 ; NYI
     854:	00000000 	.inst	0x00000000 ; undefined
     858:	00400000 	.inst	0x00400000 ; undefined
     85c:	00000000 	.inst	0x00000000 ; undefined
     860:	00010000 	.inst	0x00010000 ; undefined
     864:	00000050 	.inst	0x00000050 ; undefined
	...
     87c:	00000c00 	.inst	0x00000c00 ; undefined
     880:	00000000 	.inst	0x00000000 ; undefined
     884:	51000100 	sub	w0, w8, #0x0
     888:	0000000c 	.inst	0x0000000c ; undefined
     88c:	00000000 	.inst	0x00000000 ; undefined
     890:	00000014 	.inst	0x00000014 ; undefined
     894:	00000000 	.inst	0x00000000 ; undefined
     898:	01710003 	.inst	0x01710003 ; undefined
     89c:	0000149f 	.inst	0x0000149f ; undefined
     8a0:	00000000 	.inst	0x00000000 ; undefined
     8a4:	00004000 	.inst	0x00004000 ; undefined
     8a8:	00000000 	.inst	0x00000000 ; undefined
     8ac:	f3000400 	.inst	0xf3000400 ; undefined
     8b0:	009f5101 	.inst	0x009f5101 ; undefined
	...
     8c0:	04000000 	.inst	0x04000000 ; undefined
     8c4:	00000000 	.inst	0x00000000 ; undefined
     8c8:	14000000 	b	8c8 <MPIDR_EL1_AFF3_LSB+0x8a8>
     8cc:	00000000 	.inst	0x00000000 ; undefined
     8d0:	02000000 	.inst	0x02000000 ; undefined
     8d4:	149f3000 	b	27cc8d4 <MPIDR_EL1_MT+0x17cc8d4>
     8d8:	00000000 	.inst	0x00000000 ; undefined
     8dc:	30000000 	adr	x0, 8dd <MPIDR_EL1_AFF3_LSB+0x8bd>
     8e0:	00000000 	.inst	0x00000000 ; undefined
     8e4:	01000000 	.inst	0x01000000 ; undefined
     8e8:	00385300 	.inst	0x00385300 ; NYI
     8ec:	00000000 	.inst	0x00000000 ; undefined
     8f0:	00400000 	.inst	0x00400000 ; undefined
     8f4:	00000000 	.inst	0x00000000 ; undefined
     8f8:	00020000 	.inst	0x00020000 ; undefined
     8fc:	00009f30 	.inst	0x00009f30 ; undefined
	...
     90c:	00040000 	.inst	0x00040000 ; undefined
     910:	00000000 	.inst	0x00000000 ; undefined
     914:	00140000 	.inst	0x00140000 ; undefined
     918:	00000000 	.inst	0x00000000 ; undefined
     91c:	00020000 	.inst	0x00020000 ; undefined
     920:	00149f31 	.inst	0x00149f31 ; undefined
     924:	00000000 	.inst	0x00000000 ; undefined
     928:	001c0000 	.inst	0x001c0000 ; undefined
     92c:	00000000 	.inst	0x00000000 ; undefined
     930:	000a0000 	.inst	0x000a0000 ; undefined
     934:	085101f3 	ldxrb	w19, [x15]
     938:	00711aff 	.inst	0x00711aff ; undefined
     93c:	001c9f1c 	.inst	0x001c9f1c ; undefined
     940:	00000000 	.inst	0x00000000 ; undefined
     944:	002c0000 	.inst	0x002c0000 ; NYI
     948:	00000000 	.inst	0x00000000 ; undefined
     94c:	000b0000 	.inst	0x000b0000 ; undefined
     950:	f3200071 	.inst	0xf3200071 ; undefined
     954:	ff085101 	.inst	0xff085101 ; undefined
     958:	389f221a 	ldursb	x26, [x16,#-14]
     95c:	00000000 	.inst	0x00000000 ; undefined
     960:	40000000 	.inst	0x40000000 ; undefined
     964:	00000000 	.inst	0x00000000 ; undefined
     968:	02000000 	.inst	0x02000000 ; undefined
     96c:	009f3100 	.inst	0x009f3100 ; undefined
	...
     97c:	40000000 	.inst	0x40000000 ; undefined
     980:	00000000 	.inst	0x00000000 ; undefined
     984:	70000000 	adr	x0, 987 <MPIDR_EL1_AFF3_LSB+0x967>
     988:	00000000 	.inst	0x00000000 ; undefined
     98c:	01000000 	.inst	0x01000000 ; undefined
     990:	00705000 	.inst	0x00705000 ; undefined
     994:	00000000 	.inst	0x00000000 ; undefined
     998:	00dc0000 	.inst	0x00dc0000 ; undefined
     99c:	00000000 	.inst	0x00000000 ; undefined
     9a0:	00010000 	.inst	0x00010000 ; undefined
     9a4:	0000dc66 	.inst	0x0000dc66 ; undefined
     9a8:	00000000 	.inst	0x00000000 ; undefined
     9ac:	0000f400 	.inst	0x0000f400 ; undefined
     9b0:	00000000 	.inst	0x00000000 ; undefined
     9b4:	86000300 	.inst	0x86000300 ; undefined
     9b8:	00f49f7f 	.inst	0x00f49f7f ; undefined
     9bc:	00000000 	.inst	0x00000000 ; undefined
     9c0:	01080000 	.inst	0x01080000 ; undefined
     9c4:	00000000 	.inst	0x00000000 ; undefined
     9c8:	00010000 	.inst	0x00010000 ; undefined
     9cc:	00011c66 	.inst	0x00011c66 ; undefined
     9d0:	00000000 	.inst	0x00000000 ; undefined
     9d4:	00012c00 	.inst	0x00012c00 ; undefined
     9d8:	00000000 	.inst	0x00000000 ; undefined
     9dc:	66000100 	.inst	0x66000100 ; undefined
     9e0:	0000012c 	.inst	0x0000012c ; undefined
     9e4:	00000000 	.inst	0x00000000 ; undefined
     9e8:	00000140 	.inst	0x00000140 ; undefined
     9ec:	00000000 	.inst	0x00000000 ; undefined
     9f0:	01f30004 	.inst	0x01f30004 ; undefined
     9f4:	00009f50 	.inst	0x00009f50 ; undefined
	...
     a04:	00400000 	.inst	0x00400000 ; undefined
     a08:	00000000 	.inst	0x00000000 ; undefined
     a0c:	00700000 	.inst	0x00700000 ; undefined
     a10:	00000000 	.inst	0x00000000 ; undefined
     a14:	00010000 	.inst	0x00010000 ; undefined
     a18:	00007051 	.inst	0x00007051 ; undefined
     a1c:	00000000 	.inst	0x00000000 ; undefined
     a20:	00010c00 	.inst	0x00010c00 ; undefined
     a24:	00000000 	.inst	0x00000000 ; undefined
     a28:	67000100 	.inst	0x67000100 ; undefined
     a2c:	0000010c 	.inst	0x0000010c ; undefined
     a30:	00000000 	.inst	0x00000000 ; undefined
     a34:	0000011c 	.inst	0x0000011c ; undefined
     a38:	00000000 	.inst	0x00000000 ; undefined
     a3c:	01f30004 	.inst	0x01f30004 ; undefined
     a40:	011c9f51 	.inst	0x011c9f51 ; undefined
     a44:	00000000 	.inst	0x00000000 ; undefined
     a48:	01300000 	.inst	0x01300000 ; undefined
     a4c:	00000000 	.inst	0x00000000 ; undefined
     a50:	00010000 	.inst	0x00010000 ; undefined
     a54:	00013067 	.inst	0x00013067 ; undefined
     a58:	00000000 	.inst	0x00000000 ; undefined
     a5c:	00014000 	.inst	0x00014000 ; undefined
     a60:	00000000 	.inst	0x00000000 ; undefined
     a64:	f3000400 	.inst	0xf3000400 ; undefined
     a68:	009f5101 	.inst	0x009f5101 ; undefined
	...
     a78:	40000000 	.inst	0x40000000 ; undefined
     a7c:	00000000 	.inst	0x00000000 ; undefined
     a80:	70000000 	adr	x0, a83 <MPIDR_EL1_AFF3_LSB+0xa63>
     a84:	00000000 	.inst	0x00000000 ; undefined
     a88:	01000000 	.inst	0x01000000 ; undefined
     a8c:	00705200 	.inst	0x00705200 ; undefined
     a90:	00000000 	.inst	0x00000000 ; undefined
     a94:	010c0000 	.inst	0x010c0000 ; undefined
     a98:	00000000 	.inst	0x00000000 ; undefined
     a9c:	00010000 	.inst	0x00010000 ; undefined
     aa0:	00010c68 	.inst	0x00010c68 ; undefined
     aa4:	00000000 	.inst	0x00000000 ; undefined
     aa8:	00011c00 	.inst	0x00011c00 ; undefined
     aac:	00000000 	.inst	0x00000000 ; undefined
     ab0:	f3000400 	.inst	0xf3000400 ; undefined
     ab4:	1c9f5201 	ldr	s1, fffffffffff3f4f4 <SMC_ID_HW_RSA+0xffffffff7bf2f5ed>
     ab8:	00000001 	.inst	0x00000001 ; undefined
     abc:	30000000 	adr	x0, abd <MPIDR_EL1_AFF3_LSB+0xa9d>
     ac0:	00000001 	.inst	0x00000001 ; undefined
     ac4:	01000000 	.inst	0x01000000 ; undefined
     ac8:	01306800 	.inst	0x01306800 ; undefined
     acc:	00000000 	.inst	0x00000000 ; undefined
     ad0:	01400000 	.inst	0x01400000 ; undefined
     ad4:	00000000 	.inst	0x00000000 ; undefined
     ad8:	00040000 	.inst	0x00040000 ; undefined
     adc:	9f5201f3 	.inst	0x9f5201f3 ; undefined
	...
     af0:	00000060 	.inst	0x00000060 ; undefined
     af4:	00000000 	.inst	0x00000000 ; undefined
     af8:	00000070 	.inst	0x00000070 ; undefined
     afc:	00000000 	.inst	0x00000000 ; undefined
     b00:	70510001 	adr	x1, a2b03 <_stack_size+0xa1b03>
     b04:	00000000 	.inst	0x00000000 ; undefined
     b08:	c4000000 	.inst	0xc4000000 ; undefined
     b0c:	00000000 	.inst	0x00000000 ; undefined
     b10:	01000000 	.inst	0x01000000 ; undefined
     b14:	00c46700 	.inst	0x00c46700 ; undefined
     b18:	00000000 	.inst	0x00000000 ; undefined
     b1c:	010c0000 	.inst	0x010c0000 ; undefined
     b20:	00000000 	.inst	0x00000000 ; undefined
     b24:	00030000 	.inst	0x00030000 ; undefined
     b28:	0c9f7f87 	st1	{v7.1d}, [x28], #8
     b2c:	00000001 	.inst	0x00000001 ; undefined
     b30:	1c000000 	ldr	s0, b30 <MPIDR_EL1_AFF3_LSB+0xb10>
     b34:	00000001 	.inst	0x00000001 ; undefined
     b38:	06000000 	.inst	0x06000000 ; undefined
     b3c:	5101f300 	sub	w0, w24, #0x7c
     b40:	1c9f1c31 	ldr	s17, fffffffffff3eec4 <SMC_ID_HW_RSA+0xffffffff7bf2efbd>
     b44:	00000001 	.inst	0x00000001 ; undefined
     b48:	30000000 	adr	x0, b49 <MPIDR_EL1_AFF3_LSB+0xb29>
     b4c:	00000001 	.inst	0x00000001 ; undefined
     b50:	03000000 	.inst	0x03000000 ; undefined
     b54:	9f7f8700 	.inst	0x9f7f8700 ; undefined
     b58:	00000130 	.inst	0x00000130 ; undefined
     b5c:	00000000 	.inst	0x00000000 ; undefined
     b60:	00000140 	.inst	0x00000140 ; undefined
     b64:	00000000 	.inst	0x00000000 ; undefined
     b68:	01f30006 	.inst	0x01f30006 ; undefined
     b6c:	9f1c3151 	.inst	0x9f1c3151 ; undefined
	...
     b80:	000000c4 	.inst	0x000000c4 ; undefined
     b84:	00000000 	.inst	0x00000000 ; undefined
     b88:	000000d8 	.inst	0x000000d8 ; undefined
     b8c:	00000000 	.inst	0x00000000 ; undefined
     b90:	ff090003 	.inst	0xff090003 ; undefined
     b94:	0000d89f 	.inst	0x0000d89f ; undefined
     b98:	00000000 	.inst	0x00000000 ; undefined
     b9c:	0000fc00 	.inst	0x0000fc00 ; undefined
     ba0:	00000000 	.inst	0x00000000 ; undefined
     ba4:	52000100 	eor	w0, w8, #0x1
     ba8:	000000fc 	.inst	0x000000fc ; undefined
     bac:	00000000 	.inst	0x00000000 ; undefined
     bb0:	0000011c 	.inst	0x0000011c ; undefined
     bb4:	00000000 	.inst	0x00000000 ; undefined
     bb8:	00720004 	.inst	0x00720004 ; undefined
     bbc:	011c9f20 	.inst	0x011c9f20 ; undefined
     bc0:	00000000 	.inst	0x00000000 ; undefined
     bc4:	01400000 	.inst	0x01400000 ; undefined
     bc8:	00000000 	.inst	0x00000000 ; undefined
     bcc:	00030000 	.inst	0x00030000 ; undefined
     bd0:	009fff09 	.inst	0x009fff09 ; undefined
	...
     be0:	60000000 	.inst	0x60000000 ; undefined
     be4:	00000000 	.inst	0x00000000 ; undefined
     be8:	70000000 	adr	x0, beb <MPIDR_EL1_AFF3_LSB+0xbcb>
     bec:	00000000 	.inst	0x00000000 ; undefined
     bf0:	02000000 	.inst	0x02000000 ; undefined
     bf4:	709f3000 	adr	x0, fffffffffff3f1f7 <SMC_ID_HW_RSA+0xffffffff7bf2f2f0>
     bf8:	00000000 	.inst	0x00000000 ; undefined
     bfc:	b0000000 	adrp	x0, 1000 <_stack_size>
     c00:	00000000 	.inst	0x00000000 ; undefined
     c04:	01000000 	.inst	0x01000000 ; undefined
     c08:	00006900 	.inst	0x00006900 ; undefined
	...
     c18:	00800000 	.inst	0x00800000 ; undefined
     c1c:	00000000 	.inst	0x00000000 ; undefined
     c20:	00880000 	.inst	0x00880000 ; undefined
     c24:	00000000 	.inst	0x00000000 ; undefined
     c28:	00020000 	.inst	0x00020000 ; undefined
     c2c:	00889f30 	.inst	0x00889f30 ; undefined
     c30:	00000000 	.inst	0x00000000 ; undefined
     c34:	00980000 	.inst	0x00980000 ; undefined
     c38:	00000000 	.inst	0x00000000 ; undefined
     c3c:	00050000 	.inst	0x00050000 ; undefined
     c40:	1c007138 	ldr	s24, 1a64 <_stack_size+0xa64>
     c44:	0000989f 	.inst	0x0000989f ; undefined
     c48:	00000000 	.inst	0x00000000 ; undefined
     c4c:	00009c00 	.inst	0x00009c00 ; undefined
     c50:	00000000 	.inst	0x00000000 ; undefined
     c54:	37000500 	tbnz	w0, #0, cf4 <MPIDR_EL1_AFF3_LSB+0xcd4>
     c58:	9f1c0071 	.inst	0x9f1c0071 ; undefined
	...
     c74:	00000084 	.inst	0x00000084 ; undefined
     c78:	00000000 	.inst	0x00000000 ; undefined
     c7c:	84500001 	.inst	0x84500001 ; undefined
     c80:	00000000 	.inst	0x00000000 ; undefined
     c84:	88000000 	stxr	w0, w0, [x0]
     c88:	00000000 	.inst	0x00000000 ; undefined
     c8c:	04000000 	.inst	0x04000000 ; undefined
     c90:	5001f300 	adr	x0, 4af2 <_stack_size+0x3af2>
     c94:	0000889f 	.inst	0x0000889f ; undefined
     c98:	00000000 	.inst	0x00000000 ; undefined
     c9c:	0000a000 	.inst	0x0000a000 ; undefined
     ca0:	00000000 	.inst	0x00000000 ; undefined
     ca4:	50000100 	adr	x0, cc6 <MPIDR_EL1_AFF3_LSB+0xca6>
     ca8:	000000a0 	.inst	0x000000a0 ; undefined
     cac:	00000000 	.inst	0x00000000 ; undefined
     cb0:	000000a4 	.inst	0x000000a4 ; undefined
     cb4:	00000000 	.inst	0x00000000 ; undefined
     cb8:	01f30004 	.inst	0x01f30004 ; undefined
     cbc:	00a49f50 	.inst	0x00a49f50 ; undefined
     cc0:	00000000 	.inst	0x00000000 ; undefined
     cc4:	00e00000 	.inst	0x00e00000 ; undefined
     cc8:	00000000 	.inst	0x00000000 ; undefined
     ccc:	00010000 	.inst	0x00010000 ; undefined
     cd0:	00000050 	.inst	0x00000050 ; undefined
	...
     ce8:	00004400 	.inst	0x00004400 ; undefined
     cec:	00000000 	.inst	0x00000000 ; undefined
     cf0:	51000100 	sub	w0, w8, #0x0
     cf4:	00000044 	.inst	0x00000044 ; undefined
     cf8:	00000000 	.inst	0x00000000 ; undefined
     cfc:	00000058 	.inst	0x00000058 ; undefined
     d00:	00000000 	.inst	0x00000000 ; undefined
     d04:	58510001 	ldr	x1, a2d04 <_stack_size+0xa1d04>
     d08:	00000000 	.inst	0x00000000 ; undefined
     d0c:	5c000000 	ldr	d0, d0c <MPIDR_EL1_AFF3_LSB+0xcec>
     d10:	00000000 	.inst	0x00000000 ; undefined
     d14:	01000000 	.inst	0x01000000 ; undefined
     d18:	00a45400 	.inst	0x00a45400 ; undefined
     d1c:	00000000 	.inst	0x00000000 ; undefined
     d20:	00c00000 	.inst	0x00c00000 ; undefined
     d24:	00000000 	.inst	0x00000000 ; undefined
     d28:	00010000 	.inst	0x00010000 ; undefined
     d2c:	0000c051 	.inst	0x0000c051 ; undefined
     d30:	00000000 	.inst	0x00000000 ; undefined
     d34:	0000cc00 	.inst	0x0000cc00 ; undefined
     d38:	00000000 	.inst	0x00000000 ; undefined
     d3c:	f3000500 	.inst	0xf3000500 ; undefined
     d40:	9f1f5101 	.inst	0x9f1f5101 ; undefined
     d44:	000000cc 	.inst	0x000000cc ; undefined
     d48:	00000000 	.inst	0x00000000 ; undefined
     d4c:	000000d0 	.inst	0x000000d0 ; undefined
     d50:	00000000 	.inst	0x00000000 ; undefined
     d54:	d0510001 	adrp	x1, a2002000 <SMC_ID_HW_RSA+0x1dff20f9>
     d58:	00000000 	.inst	0x00000000 ; undefined
     d5c:	e0000000 	.inst	0xe0000000 ; undefined
     d60:	00000000 	.inst	0x00000000 ; undefined
     d64:	04000000 	.inst	0x04000000 ; undefined
     d68:	5101f300 	sub	w0, w24, #0x7c
     d6c:	0000009f 	.inst	0x0000009f ; undefined
	...
     d84:	00000800 	.inst	0x00000800 ; undefined
     d88:	00000000 	.inst	0x00000000 ; undefined
     d8c:	08000300 	stxrb	w0, w0, [x24]
     d90:	00089f20 	.inst	0x00089f20 ; undefined
     d94:	00000000 	.inst	0x00000000 ; undefined
     d98:	00240000 	.inst	0x00240000 ; NYI
     d9c:	00000000 	.inst	0x00000000 ; undefined
     da0:	00020000 	.inst	0x00020000 ; undefined
     da4:	00249f4f 	.inst	0x00249f4f ; NYI
     da8:	00000000 	.inst	0x00000000 ; undefined
     dac:	002c0000 	.inst	0x002c0000 ; NYI
     db0:	00000000 	.inst	0x00000000 ; undefined
     db4:	00010000 	.inst	0x00010000 ; undefined
     db8:	00002c55 	.inst	0x00002c55 ; undefined
     dbc:	00000000 	.inst	0x00000000 ; undefined
     dc0:	00004400 	.inst	0x00004400 ; undefined
     dc4:	00000000 	.inst	0x00000000 ; undefined
     dc8:	75000300 	.inst	0x75000300 ; undefined
     dcc:	00449f01 	.inst	0x00449f01 ; undefined
     dd0:	00000000 	.inst	0x00000000 ; undefined
     dd4:	00540000 	.inst	0x00540000 ; undefined
     dd8:	00000000 	.inst	0x00000000 ; undefined
     ddc:	00010000 	.inst	0x00010000 ; undefined
     de0:	00005455 	.inst	0x00005455 ; undefined
     de4:	00000000 	.inst	0x00000000 ; undefined
     de8:	00006800 	.inst	0x00006800 ; undefined
     dec:	00000000 	.inst	0x00000000 ; undefined
     df0:	53000100 	ubfx	w0, w8, #0, #1
     df4:	0000006c 	.inst	0x0000006c ; undefined
     df8:	00000000 	.inst	0x00000000 ; undefined
     dfc:	00000070 	.inst	0x00000070 ; undefined
     e00:	00000000 	.inst	0x00000000 ; undefined
     e04:	7e740003 	.inst	0x7e740003 ; undefined
     e08:	0000709f 	.inst	0x0000709f ; undefined
     e0c:	00000000 	.inst	0x00000000 ; undefined
     e10:	00008000 	.inst	0x00008000 ; undefined
     e14:	00000000 	.inst	0x00000000 ; undefined
     e18:	54000100 	b.eq	e38 <MPIDR_EL1_AFF3_LSB+0xe18>
     e1c:	00000088 	.inst	0x00000088 ; undefined
     e20:	00000000 	.inst	0x00000000 ; undefined
     e24:	00000090 	.inst	0x00000090 ; undefined
     e28:	00000000 	.inst	0x00000000 ; undefined
     e2c:	a4530001 	.inst	0xa4530001 ; undefined
     e30:	00000000 	.inst	0x00000000 ; undefined
     e34:	a8000000 	stnp	x0, x0, [x0]
     e38:	00000000 	.inst	0x00000000 ; undefined
     e3c:	03000000 	.inst	0x03000000 ; undefined
     e40:	9f200800 	.inst	0x9f200800 ; undefined
     e44:	000000a8 	.inst	0x000000a8 ; undefined
     e48:	00000000 	.inst	0x00000000 ; undefined
     e4c:	000000bc 	.inst	0x000000bc ; undefined
     e50:	00000000 	.inst	0x00000000 ; undefined
     e54:	9f4f0002 	.inst	0x9f4f0002 ; undefined
     e58:	000000bc 	.inst	0x000000bc ; undefined
     e5c:	00000000 	.inst	0x00000000 ; undefined
     e60:	000000e0 	.inst	0x000000e0 ; undefined
     e64:	00000000 	.inst	0x00000000 ; undefined
     e68:	9f4e0002 	.inst	0x9f4e0002 ; undefined
	...
     e84:	00000018 	.inst	0x00000018 ; undefined
     e88:	00000000 	.inst	0x00000000 ; undefined
     e8c:	9f300002 	.inst	0x9f300002 ; undefined
     e90:	000000a4 	.inst	0x000000a4 ; undefined
     e94:	00000000 	.inst	0x00000000 ; undefined
     e98:	000000cc 	.inst	0x000000cc ; undefined
     e9c:	00000000 	.inst	0x00000000 ; undefined
     ea0:	9f310002 	.inst	0x9f310002 ; undefined
     ea4:	000000cc 	.inst	0x000000cc ; undefined
     ea8:	00000000 	.inst	0x00000000 ; undefined
     eac:	000000e0 	.inst	0x000000e0 ; undefined
     eb0:	00000000 	.inst	0x00000000 ; undefined
     eb4:	9f300002 	.inst	0x9f300002 ; undefined
	...
     ec8:	00000040 	.inst	0x00000040 ; undefined
     ecc:	00000000 	.inst	0x00000000 ; undefined
     ed0:	00000048 	.inst	0x00000048 ; undefined
     ed4:	00000000 	.inst	0x00000000 ; undefined
     ed8:	48530001 	ldxrh	w1, [x0]
     edc:	00000000 	.inst	0x00000000 ; undefined
     ee0:	54000000 	b.eq	ee0 <MPIDR_EL1_AFF3_LSB+0xec0>
     ee4:	00000000 	.inst	0x00000000 ; undefined
     ee8:	03000000 	.inst	0x03000000 ; undefined
     eec:	9f507300 	.inst	0x9f507300 ; undefined
	...
     f00:	000000e0 	.inst	0x000000e0 ; undefined
     f04:	00000000 	.inst	0x00000000 ; undefined
     f08:	000000fc 	.inst	0x000000fc ; undefined
     f0c:	00000000 	.inst	0x00000000 ; undefined
     f10:	fc500001 	ldur	d1, [x0,#-256]
     f14:	00000000 	.inst	0x00000000 ; undefined
     f18:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
     f1c:	00000001 	.inst	0x00000001 ; undefined
     f20:	01000000 	.inst	0x01000000 ; undefined
     f24:	010c6300 	.inst	0x010c6300 ; undefined
     f28:	00000000 	.inst	0x00000000 ; undefined
     f2c:	01100000 	.inst	0x01100000 ; undefined
     f30:	00000000 	.inst	0x00000000 ; undefined
     f34:	00020000 	.inst	0x00020000 ; undefined
     f38:	01106c8f 	.inst	0x01106c8f ; undefined
     f3c:	00000000 	.inst	0x00000000 ; undefined
     f40:	01180000 	.inst	0x01180000 ; undefined
     f44:	00000000 	.inst	0x00000000 ; undefined
     f48:	00010000 	.inst	0x00010000 ; undefined
     f4c:	00011850 	.inst	0x00011850 ; undefined
     f50:	00000000 	.inst	0x00000000 ; undefined
     f54:	00013c00 	.inst	0x00013c00 ; undefined
     f58:	00000000 	.inst	0x00000000 ; undefined
     f5c:	63000100 	.inst	0x63000100 ; undefined
     f60:	0000013c 	.inst	0x0000013c ; undefined
     f64:	00000000 	.inst	0x00000000 ; undefined
     f68:	00000140 	.inst	0x00000140 ; undefined
     f6c:	00000000 	.inst	0x00000000 ; undefined
     f70:	6c8f0002 	stp	d2, d0, [x0],#240
	...
     f84:	00000140 	.inst	0x00000140 ; undefined
     f88:	00000000 	.inst	0x00000000 ; undefined
     f8c:	00000147 	.inst	0x00000147 ; undefined
     f90:	00000000 	.inst	0x00000000 ; undefined
     f94:	47500001 	.inst	0x47500001 ; undefined
     f98:	00000001 	.inst	0x00000001 ; undefined
     f9c:	5c000000 	ldr	d0, f9c <MPIDR_EL1_AFF3_LSB+0xf7c>
     fa0:	00000001 	.inst	0x00000001 ; undefined
     fa4:	04000000 	.inst	0x04000000 ; undefined
     fa8:	5001f300 	adr	x0, 4e0a <_stack_size+0x3e0a>
     fac:	0000009f 	.inst	0x0000009f ; undefined
	...
     fbc:	00015c00 	.inst	0x00015c00 ; undefined
     fc0:	00000000 	.inst	0x00000000 ; undefined
     fc4:	00018c00 	.inst	0x00018c00 ; undefined
     fc8:	00000000 	.inst	0x00000000 ; undefined
     fcc:	50000100 	adr	x0, fee <MPIDR_EL1_AFF3_LSB+0xfce>
     fd0:	0000018c 	.inst	0x0000018c ; undefined
     fd4:	00000000 	.inst	0x00000000 ; undefined
     fd8:	000001b4 	.inst	0x000001b4 ; undefined
     fdc:	00000000 	.inst	0x00000000 ; undefined
     fe0:	b4670001 	cbz	x1, cefe0 <_stack_size+0xcdfe0>
     fe4:	00000001 	.inst	0x00000001 ; undefined
     fe8:	c4000000 	.inst	0xc4000000 ; undefined
     fec:	00000001 	.inst	0x00000001 ; undefined
     ff0:	03000000 	.inst	0x03000000 ; undefined
     ff4:	9f018700 	.inst	0x9f018700 ; undefined
     ff8:	000001d8 	.inst	0x000001d8 ; undefined
     ffc:	00000000 	.inst	0x00000000 ; undefined
    1000:	0000022c 	.inst	0x0000022c ; undefined
    1004:	00000000 	.inst	0x00000000 ; undefined
    1008:	2c670001 	ldnp	s1, s0, [x0,#-200]
    100c:	00000002 	.inst	0x00000002 ; undefined
    1010:	40000000 	.inst	0x40000000 ; undefined
    1014:	00000002 	.inst	0x00000002 ; undefined
    1018:	03000000 	.inst	0x03000000 ; undefined
    101c:	9f018700 	.inst	0x9f018700 ; undefined
    1020:	00000254 	.inst	0x00000254 ; undefined
    1024:	00000000 	.inst	0x00000000 ; undefined
    1028:	000002cc 	.inst	0x000002cc ; undefined
    102c:	00000000 	.inst	0x00000000 ; undefined
    1030:	cc670001 	.inst	0xcc670001 ; undefined
    1034:	00000002 	.inst	0x00000002 ; undefined
    1038:	04000000 	.inst	0x04000000 ; undefined
    103c:	00000003 	.inst	0x00000003 ; undefined
    1040:	03000000 	.inst	0x03000000 ; undefined
    1044:	9f018700 	.inst	0x9f018700 ; undefined
    1048:	00000304 	.inst	0x00000304 ; undefined
    104c:	00000000 	.inst	0x00000000 ; undefined
    1050:	00000328 	.inst	0x00000328 ; undefined
    1054:	00000000 	.inst	0x00000000 ; undefined
    1058:	28670001 	ldnp	w1, w0, [x0,#-200]
    105c:	00000003 	.inst	0x00000003 ; undefined
    1060:	3c000000 	stur	b0, [x0]
    1064:	00000003 	.inst	0x00000003 ; undefined
    1068:	01000000 	.inst	0x01000000 ; undefined
    106c:	033c5200 	.inst	0x033c5200 ; undefined
    1070:	00000000 	.inst	0x00000000 ; undefined
    1074:	03440000 	.inst	0x03440000 ; undefined
    1078:	00000000 	.inst	0x00000000 ; undefined
    107c:	00030000 	.inst	0x00030000 ; undefined
    1080:	449f0172 	.inst	0x449f0172 ; undefined
    1084:	00000003 	.inst	0x00000003 ; undefined
    1088:	7c000000 	stur	h0, [x0]
    108c:	00000003 	.inst	0x00000003 ; undefined
    1090:	01000000 	.inst	0x01000000 ; undefined
    1094:	037c5200 	.inst	0x037c5200 ; undefined
    1098:	00000000 	.inst	0x00000000 ; undefined
    109c:	03a40000 	.inst	0x03a40000 ; undefined
    10a0:	00000000 	.inst	0x00000000 ; undefined
    10a4:	00010000 	.inst	0x00010000 ; undefined
    10a8:	0003a451 	.inst	0x0003a451 ; undefined
    10ac:	00000000 	.inst	0x00000000 ; undefined
    10b0:	0003bc00 	.inst	0x0003bc00 ; undefined
    10b4:	00000000 	.inst	0x00000000 ; undefined
    10b8:	71000300 	subs	w0, w24, #0x0
    10bc:	03bc9f7f 	.inst	0x03bc9f7f ; undefined
    10c0:	00000000 	.inst	0x00000000 ; undefined
    10c4:	046c0000 	.inst	0x046c0000 ; undefined
    10c8:	00000000 	.inst	0x00000000 ; undefined
    10cc:	00010000 	.inst	0x00010000 ; undefined
    10d0:	00046c67 	.inst	0x00046c67 ; undefined
    10d4:	00000000 	.inst	0x00000000 ; undefined
    10d8:	00047400 	.inst	0x00047400 ; undefined
    10dc:	00000000 	.inst	0x00000000 ; undefined
    10e0:	87000300 	.inst	0x87000300 ; undefined
    10e4:	04749f01 	.inst	0x04749f01 ; undefined
    10e8:	00000000 	.inst	0x00000000 ; undefined
    10ec:	04900000 	.inst	0x04900000 ; undefined
    10f0:	00000000 	.inst	0x00000000 ; undefined
    10f4:	00010000 	.inst	0x00010000 ; undefined
    10f8:	00049867 	.inst	0x00049867 ; undefined
    10fc:	00000000 	.inst	0x00000000 ; undefined
    1100:	0004a400 	.inst	0x0004a400 ; undefined
    1104:	00000000 	.inst	0x00000000 ; undefined
    1108:	67000100 	.inst	0x67000100 ; undefined
    110c:	000004a4 	.inst	0x000004a4 ; undefined
    1110:	00000000 	.inst	0x00000000 ; undefined
    1114:	000004bc 	.inst	0x000004bc ; undefined
    1118:	00000000 	.inst	0x00000000 ; undefined
    111c:	7f870003 	.inst	0x7f870003 ; undefined
    1120:	0004bc9f 	.inst	0x0004bc9f ; undefined
    1124:	00000000 	.inst	0x00000000 ; undefined
    1128:	0004e000 	.inst	0x0004e000 ; undefined
    112c:	00000000 	.inst	0x00000000 ; undefined
    1130:	67000100 	.inst	0x67000100 ; undefined
    1134:	000004e0 	.inst	0x000004e0 ; undefined
    1138:	00000000 	.inst	0x00000000 ; undefined
    113c:	000004ec 	.inst	0x000004ec ; undefined
    1140:	00000000 	.inst	0x00000000 ; undefined
    1144:	ec520001 	.inst	0xec520001 ; undefined
    1148:	00000004 	.inst	0x00000004 ; undefined
    114c:	00000000 	.inst	0x00000000 ; undefined
    1150:	00000005 	.inst	0x00000005 ; undefined
    1154:	03000000 	.inst	0x03000000 ; undefined
    1158:	9f018700 	.inst	0x9f018700 ; undefined
    115c:	0000050c 	.inst	0x0000050c ; undefined
    1160:	00000000 	.inst	0x00000000 ; undefined
    1164:	00000518 	.inst	0x00000518 ; undefined
    1168:	00000000 	.inst	0x00000000 ; undefined
    116c:	18520001 	ldr	w1, a516c <_stack_size+0xa416c>
    1170:	00000005 	.inst	0x00000005 ; undefined
    1174:	94000000 	bl	1174 <_stack_size+0x174>
    1178:	00000005 	.inst	0x00000005 ; undefined
    117c:	01000000 	.inst	0x01000000 ; undefined
    1180:	05946700 	.inst	0x05946700 ; undefined
    1184:	00000000 	.inst	0x00000000 ; undefined
    1188:	05980000 	.inst	0x05980000 ; undefined
    118c:	00000000 	.inst	0x00000000 ; undefined
    1190:	00030000 	.inst	0x00030000 ; undefined
    1194:	989f7f87 	ldrsw	x7, fffffffffff40184 <SMC_ID_HW_RSA+0xffffffff7bf3027d>
    1198:	00000005 	.inst	0x00000005 ; undefined
    119c:	74000000 	.inst	0x74000000 ; undefined
    11a0:	00000006 	.inst	0x00000006 ; undefined
    11a4:	01000000 	.inst	0x01000000 ; undefined
    11a8:	067c6700 	.inst	0x067c6700 ; undefined
    11ac:	00000000 	.inst	0x00000000 ; undefined
    11b0:	08680000 	.inst	0x08680000 ; undefined
    11b4:	00000000 	.inst	0x00000000 ; undefined
    11b8:	00010000 	.inst	0x00010000 ; undefined
    11bc:	00086867 	.inst	0x00086867 ; undefined
    11c0:	00000000 	.inst	0x00000000 ; undefined
    11c4:	00087400 	.inst	0x00087400 ; undefined
    11c8:	00000000 	.inst	0x00000000 ; undefined
    11cc:	51000100 	sub	w0, w8, #0x0
    11d0:	00000874 	.inst	0x00000874 ; undefined
    11d4:	00000000 	.inst	0x00000000 ; undefined
    11d8:	000009ac 	.inst	0x000009ac ; undefined
    11dc:	00000000 	.inst	0x00000000 ; undefined
    11e0:	00670001 	.inst	0x00670001 ; undefined
	...
    11f0:	5c000000 	ldr	d0, 11f0 <_stack_size+0x1f0>
    11f4:	00000001 	.inst	0x00000001 ; undefined
    11f8:	ac000000 	stnp	q0, q0, [x0]
    11fc:	00000001 	.inst	0x00000001 ; undefined
    1200:	01000000 	.inst	0x01000000 ; undefined
    1204:	01ac5100 	.inst	0x01ac5100 ; undefined
    1208:	00000000 	.inst	0x00000000 ; undefined
    120c:	01c40000 	.inst	0x01c40000 ; undefined
    1210:	00000000 	.inst	0x00000000 ; undefined
    1214:	00010000 	.inst	0x00010000 ; undefined
    1218:	0001c468 	.inst	0x0001c468 ; undefined
    121c:	00000000 	.inst	0x00000000 ; undefined
    1220:	0001d800 	.inst	0x0001d800 ; undefined
    1224:	00000000 	.inst	0x00000000 ; undefined
    1228:	f3000400 	.inst	0xf3000400 ; undefined
    122c:	d89f5101 	prfm	pldl1strm, fffffffffff3fc4c <SMC_ID_HW_RSA+0xffffffff7bf2fd45>
    1230:	00000001 	.inst	0x00000001 ; undefined
    1234:	ac000000 	stnp	q0, q0, [x0]
    1238:	00000009 	.inst	0x00000009 ; undefined
    123c:	01000000 	.inst	0x01000000 ; undefined
    1240:	00006800 	.inst	0x00006800 ; undefined
	...
    1250:	015c0000 	.inst	0x015c0000 ; undefined
    1254:	00000000 	.inst	0x00000000 ; undefined
    1258:	01ac0000 	.inst	0x01ac0000 ; undefined
    125c:	00000000 	.inst	0x00000000 ; undefined
    1260:	00010000 	.inst	0x00010000 ; undefined
    1264:	0001ac52 	.inst	0x0001ac52 ; undefined
    1268:	00000000 	.inst	0x00000000 ; undefined
    126c:	0001b400 	.inst	0x0001b400 ; undefined
    1270:	00000000 	.inst	0x00000000 ; undefined
    1274:	89000300 	.inst	0x89000300 ; undefined
    1278:	01d89f01 	.inst	0x01d89f01 ; undefined
    127c:	00000000 	.inst	0x00000000 ; undefined
    1280:	01e00000 	.inst	0x01e00000 ; undefined
    1284:	00000000 	.inst	0x00000000 ; undefined
    1288:	00030000 	.inst	0x00030000 ; undefined
    128c:	e09f0189 	.inst	0xe09f0189 ; undefined
    1290:	00000001 	.inst	0x00000001 ; undefined
    1294:	1c000000 	ldr	s0, 1294 <_stack_size+0x294>
    1298:	00000002 	.inst	0x00000002 ; undefined
    129c:	01000000 	.inst	0x01000000 ; undefined
    12a0:	021c6900 	.inst	0x021c6900 ; undefined
    12a4:	00000000 	.inst	0x00000000 ; undefined
    12a8:	02400000 	.inst	0x02400000 ; undefined
    12ac:	00000000 	.inst	0x00000000 ; undefined
    12b0:	00030000 	.inst	0x00030000 ; undefined
    12b4:	5c9f7f89 	ldr	d9, fffffffffff402a4 <SMC_ID_HW_RSA+0xffffffff7bf3039d>
    12b8:	00000002 	.inst	0x00000002 ; undefined
    12bc:	ec000000 	.inst	0xec000000 ; undefined
    12c0:	00000004 	.inst	0x00000004 ; undefined
    12c4:	03000000 	.inst	0x03000000 ; undefined
    12c8:	9f7f8900 	.inst	0x9f7f8900 ; undefined
    12cc:	000004ec 	.inst	0x000004ec ; undefined
    12d0:	00000000 	.inst	0x00000000 ; undefined
    12d4:	00000500 	.inst	0x00000500 ; undefined
    12d8:	00000000 	.inst	0x00000000 ; undefined
    12dc:	0c690001 	.inst	0x0c690001 ; undefined
    12e0:	00000005 	.inst	0x00000005 ; undefined
    12e4:	ac000000 	stnp	q0, q0, [x0]
    12e8:	00000009 	.inst	0x00000009 ; undefined
    12ec:	03000000 	.inst	0x03000000 ; undefined
    12f0:	9f7f8900 	.inst	0x9f7f8900 ; undefined
	...
    1304:	00000194 	.inst	0x00000194 ; undefined
    1308:	00000000 	.inst	0x00000000 ; undefined
    130c:	000001ac 	.inst	0x000001ac ; undefined
    1310:	00000000 	.inst	0x00000000 ; undefined
    1314:	936b0005 	sbfiz	x5, x0, #21, #1
    1318:	ac189308 	stnp	q8, q4, [x24,#784]
    131c:	00000001 	.inst	0x00000001 ; undefined
    1320:	cc000000 	.inst	0xcc000000 ; undefined
    1324:	00000001 	.inst	0x00000001 ; undefined
    1328:	0a000000 	and	w0, w0, w0
    132c:	08936b00 	.inst	0x08936b00 ; undefined
    1330:	93641093 	sbfiz	x19, x4, #28, #5
    1334:	cc049304 	.inst	0xcc049304 ; undefined
    1338:	00000001 	.inst	0x00000001 ; undefined
    133c:	d4000000 	.inst	0xd4000000 ; undefined
    1340:	00000001 	.inst	0x00000001 ; undefined
    1344:	07000000 	.inst	0x07000000 ; undefined
    1348:	64189300 	.inst	0x64189300 ; undefined
    134c:	04930493 	.inst	0x04930493 ; undefined
    1350:	000001d8 	.inst	0x000001d8 ; undefined
    1354:	00000000 	.inst	0x00000000 ; undefined
    1358:	0000027c 	.inst	0x0000027c ; undefined
    135c:	00000000 	.inst	0x00000000 ; undefined
    1360:	936b000a 	sbfiz	x10, x0, #21, #1
    1364:	64109308 	.inst	0x64109308 ; undefined
    1368:	04930493 	.inst	0x04930493 ; undefined
    136c:	0000027c 	.inst	0x0000027c ; undefined
    1370:	00000000 	.inst	0x00000000 ; undefined
    1374:	00000284 	.inst	0x00000284 ; undefined
    1378:	00000000 	.inst	0x00000000 ; undefined
    137c:	0071000f 	.inst	0x0071000f ; undefined
    1380:	9f1af809 	.inst	0x9f1af809 ; undefined
    1384:	10930893 	adr	x19, fffffffffff27494 <SMC_ID_HW_RSA+0xffffffff7bf1758d>
    1388:	93049364 	.inst	0x93049364 ; undefined
    138c:	00028404 	.inst	0x00028404 ; undefined
    1390:	00000000 	.inst	0x00000000 ; undefined
    1394:	0003d000 	.inst	0x0003d000 ; undefined
    1398:	00000000 	.inst	0x00000000 ; undefined
    139c:	6b000a00 	subs	w0, w16, w0, lsl #2
    13a0:	10930893 	adr	x19, fffffffffff274b0 <SMC_ID_HW_RSA+0xffffffff7bf175a9>
    13a4:	93049364 	.inst	0x93049364 ; undefined
    13a8:	0003d004 	.inst	0x0003d004 ; undefined
    13ac:	00000000 	.inst	0x00000000 ; undefined
    13b0:	0003d400 	.inst	0x0003d400 ; undefined
    13b4:	00000000 	.inst	0x00000000 ; undefined
    13b8:	71000f00 	subs	w0, w24, #0x3
    13bc:	1af80900 	.inst	0x1af80900 ; undefined
    13c0:	9308939f 	.inst	0x9308939f ; undefined
    13c4:	04936410 	.inst	0x04936410 ; undefined
    13c8:	03d40493 	.inst	0x03d40493 ; undefined
    13cc:	00000000 	.inst	0x00000000 ; undefined
    13d0:	03ec0000 	.inst	0x03ec0000 ; undefined
    13d4:	00000000 	.inst	0x00000000 ; undefined
    13d8:	000a0000 	.inst	0x000a0000 ; undefined
    13dc:	9308936b 	.inst	0x9308936b ; undefined
    13e0:	04936410 	.inst	0x04936410 ; undefined
    13e4:	03ec0493 	.inst	0x03ec0493 ; undefined
    13e8:	00000000 	.inst	0x00000000 ; undefined
    13ec:	03f40000 	.inst	0x03f40000 ; undefined
    13f0:	00000000 	.inst	0x00000000 ; undefined
    13f4:	000f0000 	.inst	0x000f0000 ; undefined
    13f8:	f8090071 	stur	x17, [x3,#144]
    13fc:	08939f1a 	stlrb	w26, [x24]
    1400:	93641093 	sbfiz	x19, x4, #28, #5
    1404:	f4049304 	.inst	0xf4049304 ; undefined
    1408:	00000003 	.inst	0x00000003 ; undefined
    140c:	d0000000 	adrp	x0, 3000 <_stack_size+0x2000>
    1410:	00000004 	.inst	0x00000004 ; undefined
    1414:	0a000000 	and	w0, w0, w0
    1418:	08936b00 	.inst	0x08936b00 ; undefined
    141c:	93641093 	sbfiz	x19, x4, #28, #5
    1420:	d0049304 	adrp	x4, 9263000 <_stack_base+0x6255880>
    1424:	00000004 	.inst	0x00000004 ; undefined
    1428:	d4000000 	.inst	0xd4000000 ; undefined
    142c:	00000004 	.inst	0x00000004 ; undefined
    1430:	0f000000 	.inst	0x0f000000 ; undefined
    1434:	09007100 	.inst	0x09007100 ; undefined
    1438:	939f1af8 	.inst	0x939f1af8 ; undefined
    143c:	64109308 	.inst	0x64109308 ; undefined
    1440:	04930493 	.inst	0x04930493 ; undefined
    1444:	000004d4 	.inst	0x000004d4 ; undefined
    1448:	00000000 	.inst	0x00000000 ; undefined
    144c:	00000530 	.inst	0x00000530 ; undefined
    1450:	00000000 	.inst	0x00000000 ; undefined
    1454:	936b000a 	sbfiz	x10, x0, #21, #1
    1458:	64109308 	.inst	0x64109308 ; undefined
    145c:	04930493 	.inst	0x04930493 ; undefined
    1460:	00000530 	.inst	0x00000530 ; undefined
    1464:	00000000 	.inst	0x00000000 ; undefined
    1468:	00000534 	.inst	0x00000534 ; undefined
    146c:	00000000 	.inst	0x00000000 ; undefined
    1470:	0071000f 	.inst	0x0071000f ; undefined
    1474:	9f1af809 	.inst	0x9f1af809 ; undefined
    1478:	10930893 	adr	x19, fffffffffff27588 <SMC_ID_HW_RSA+0xffffffff7bf17681>
    147c:	93049364 	.inst	0x93049364 ; undefined
    1480:	00053404 	.inst	0x00053404 ; undefined
    1484:	00000000 	.inst	0x00000000 ; undefined
    1488:	00055800 	.inst	0x00055800 ; undefined
    148c:	00000000 	.inst	0x00000000 ; undefined
    1490:	6b000a00 	subs	w0, w16, w0, lsl #2
    1494:	10930893 	adr	x19, fffffffffff275a4 <SMC_ID_HW_RSA+0xffffffff7bf1769d>
    1498:	93049364 	.inst	0x93049364 ; undefined
    149c:	00055804 	.inst	0x00055804 ; undefined
    14a0:	00000000 	.inst	0x00000000 ; undefined
    14a4:	00055c00 	.inst	0x00055c00 ; undefined
    14a8:	00000000 	.inst	0x00000000 ; undefined
    14ac:	71000f00 	subs	w0, w24, #0x3
    14b0:	1af80900 	.inst	0x1af80900 ; undefined
    14b4:	9308939f 	.inst	0x9308939f ; undefined
    14b8:	04936410 	.inst	0x04936410 ; undefined
    14bc:	055c0493 	.inst	0x055c0493 ; undefined
    14c0:	00000000 	.inst	0x00000000 ; undefined
    14c4:	05840000 	.inst	0x05840000 ; undefined
    14c8:	00000000 	.inst	0x00000000 ; undefined
    14cc:	000a0000 	.inst	0x000a0000 ; undefined
    14d0:	9308936b 	.inst	0x9308936b ; undefined
    14d4:	04936410 	.inst	0x04936410 ; undefined
    14d8:	05840493 	.inst	0x05840493 ; undefined
    14dc:	00000000 	.inst	0x00000000 ; undefined
    14e0:	058c0000 	.inst	0x058c0000 ; undefined
    14e4:	00000000 	.inst	0x00000000 ; undefined
    14e8:	000f0000 	.inst	0x000f0000 ; undefined
    14ec:	f8090071 	stur	x17, [x3,#144]
    14f0:	08939f1a 	stlrb	w26, [x24]
    14f4:	93641093 	sbfiz	x19, x4, #28, #5
    14f8:	8c049304 	.inst	0x8c049304 ; undefined
    14fc:	00000005 	.inst	0x00000005 ; undefined
    1500:	c8000000 	stxr	w0, x0, [x0]
    1504:	00000005 	.inst	0x00000005 ; undefined
    1508:	0a000000 	and	w0, w0, w0
    150c:	08936b00 	.inst	0x08936b00 ; undefined
    1510:	93641093 	sbfiz	x19, x4, #28, #5
    1514:	c8049304 	stlxr	w4, x4, [x24]
    1518:	00000005 	.inst	0x00000005 ; undefined
    151c:	d0000000 	adrp	x0, 3000 <_stack_size+0x2000>
    1520:	00000005 	.inst	0x00000005 ; undefined
    1524:	0f000000 	.inst	0x0f000000 ; undefined
    1528:	09007100 	.inst	0x09007100 ; undefined
    152c:	939f1af8 	.inst	0x939f1af8 ; undefined
    1530:	64109308 	.inst	0x64109308 ; undefined
    1534:	04930493 	.inst	0x04930493 ; undefined
    1538:	000005d0 	.inst	0x000005d0 ; undefined
    153c:	00000000 	.inst	0x00000000 ; undefined
    1540:	0000063c 	.inst	0x0000063c ; undefined
    1544:	00000000 	.inst	0x00000000 ; undefined
    1548:	936b000a 	sbfiz	x10, x0, #21, #1
    154c:	64109308 	.inst	0x64109308 ; undefined
    1550:	04930493 	.inst	0x04930493 ; undefined
    1554:	0000063c 	.inst	0x0000063c ; undefined
    1558:	00000000 	.inst	0x00000000 ; undefined
    155c:	00000644 	.inst	0x00000644 ; undefined
    1560:	00000000 	.inst	0x00000000 ; undefined
    1564:	0071000f 	.inst	0x0071000f ; undefined
    1568:	9f1af809 	.inst	0x9f1af809 ; undefined
    156c:	10930893 	adr	x19, fffffffffff2767c <SMC_ID_HW_RSA+0xffffffff7bf17775>
    1570:	93049364 	.inst	0x93049364 ; undefined
    1574:	00064404 	.inst	0x00064404 ; undefined
    1578:	00000000 	.inst	0x00000000 ; undefined
    157c:	00068800 	.inst	0x00068800 ; undefined
    1580:	00000000 	.inst	0x00000000 ; undefined
    1584:	6b000a00 	subs	w0, w16, w0, lsl #2
    1588:	10930893 	adr	x19, fffffffffff27698 <SMC_ID_HW_RSA+0xffffffff7bf17791>
    158c:	93049364 	.inst	0x93049364 ; undefined
    1590:	00068804 	.inst	0x00068804 ; undefined
    1594:	00000000 	.inst	0x00000000 ; undefined
    1598:	00069800 	.inst	0x00069800 ; undefined
    159c:	00000000 	.inst	0x00000000 ; undefined
    15a0:	6b000a00 	subs	w0, w16, w0, lsl #2
    15a4:	10930893 	adr	x19, fffffffffff276b4 <SMC_ID_HW_RSA+0xffffffff7bf177ad>
    15a8:	93049351 	.inst	0x93049351 ; undefined
    15ac:	00069804 	.inst	0x00069804 ; undefined
    15b0:	00000000 	.inst	0x00000000 ; undefined
    15b4:	00069c00 	.inst	0x00069c00 ; undefined
    15b8:	00000000 	.inst	0x00000000 ; undefined
    15bc:	6b000a00 	subs	w0, w16, w0, lsl #2
    15c0:	10930893 	adr	x19, fffffffffff276d0 <SMC_ID_HW_RSA+0xffffffff7bf177c9>
    15c4:	93049364 	.inst	0x93049364 ; undefined
    15c8:	00069c04 	.inst	0x00069c04 ; undefined
    15cc:	00000000 	.inst	0x00000000 ; undefined
    15d0:	0006ac00 	.inst	0x0006ac00 ; undefined
    15d4:	00000000 	.inst	0x00000000 ; undefined
    15d8:	6b000a00 	subs	w0, w16, w0, lsl #2
    15dc:	10930893 	adr	x19, fffffffffff276ec <SMC_ID_HW_RSA+0xffffffff7bf177e5>
    15e0:	93049351 	.inst	0x93049351 ; undefined
    15e4:	0006ac04 	.inst	0x0006ac04 ; undefined
    15e8:	00000000 	.inst	0x00000000 ; undefined
    15ec:	0006b000 	.inst	0x0006b000 ; undefined
    15f0:	00000000 	.inst	0x00000000 ; undefined
    15f4:	6b000a00 	subs	w0, w16, w0, lsl #2
    15f8:	10930893 	adr	x19, fffffffffff27708 <SMC_ID_HW_RSA+0xffffffff7bf17801>
    15fc:	93049364 	.inst	0x93049364 ; undefined
    1600:	0006b004 	.inst	0x0006b004 ; undefined
    1604:	00000000 	.inst	0x00000000 ; undefined
    1608:	0006c000 	.inst	0x0006c000 ; undefined
    160c:	00000000 	.inst	0x00000000 ; undefined
    1610:	6b000a00 	subs	w0, w16, w0, lsl #2
    1614:	10930893 	adr	x19, fffffffffff27724 <SMC_ID_HW_RSA+0xffffffff7bf1781d>
    1618:	93049351 	.inst	0x93049351 ; undefined
    161c:	0006c004 	.inst	0x0006c004 ; undefined
    1620:	00000000 	.inst	0x00000000 ; undefined
    1624:	0006d400 	.inst	0x0006d400 ; undefined
    1628:	00000000 	.inst	0x00000000 ; undefined
    162c:	6b000a00 	subs	w0, w16, w0, lsl #2
    1630:	10930893 	adr	x19, fffffffffff27740 <SMC_ID_HW_RSA+0xffffffff7bf17839>
    1634:	93049364 	.inst	0x93049364 ; undefined
    1638:	0006d404 	.inst	0x0006d404 ; undefined
    163c:	00000000 	.inst	0x00000000 ; undefined
    1640:	0006d800 	.inst	0x0006d800 ; undefined
    1644:	00000000 	.inst	0x00000000 ; undefined
    1648:	71000f00 	subs	w0, w24, #0x3
    164c:	1af80900 	.inst	0x1af80900 ; undefined
    1650:	9308939f 	.inst	0x9308939f ; undefined
    1654:	04936410 	.inst	0x04936410 ; undefined
    1658:	06d80493 	.inst	0x06d80493 ; undefined
    165c:	00000000 	.inst	0x00000000 ; undefined
    1660:	06ec0000 	.inst	0x06ec0000 ; undefined
    1664:	00000000 	.inst	0x00000000 ; undefined
    1668:	000a0000 	.inst	0x000a0000 ; undefined
    166c:	9308936b 	.inst	0x9308936b ; undefined
    1670:	04936410 	.inst	0x04936410 ; undefined
    1674:	06ec0493 	.inst	0x06ec0493 ; undefined
    1678:	00000000 	.inst	0x00000000 ; undefined
    167c:	06f00000 	.inst	0x06f00000 ; undefined
    1680:	00000000 	.inst	0x00000000 ; undefined
    1684:	000f0000 	.inst	0x000f0000 ; undefined
    1688:	f8090071 	stur	x17, [x3,#144]
    168c:	08939f1a 	stlrb	w26, [x24]
    1690:	93641093 	sbfiz	x19, x4, #28, #5
    1694:	f0049304 	adrp	x4, 9264000 <_stack_base+0x6256880>
    1698:	00000006 	.inst	0x00000006 ; undefined
    169c:	04000000 	.inst	0x04000000 ; undefined
    16a0:	00000007 	.inst	0x00000007 ; undefined
    16a4:	0a000000 	and	w0, w0, w0
    16a8:	08936b00 	.inst	0x08936b00 ; undefined
    16ac:	93641093 	sbfiz	x19, x4, #28, #5
    16b0:	04049304 	.inst	0x04049304 ; undefined
    16b4:	00000007 	.inst	0x00000007 ; undefined
    16b8:	08000000 	stxrb	w0, w0, [x0]
    16bc:	00000007 	.inst	0x00000007 ; undefined
    16c0:	0f000000 	.inst	0x0f000000 ; undefined
    16c4:	09007100 	.inst	0x09007100 ; undefined
    16c8:	939f1af8 	.inst	0x939f1af8 ; undefined
    16cc:	64109308 	.inst	0x64109308 ; undefined
    16d0:	04930493 	.inst	0x04930493 ; undefined
    16d4:	00000708 	.inst	0x00000708 ; undefined
    16d8:	00000000 	.inst	0x00000000 ; undefined
    16dc:	00000720 	.inst	0x00000720 ; undefined
    16e0:	00000000 	.inst	0x00000000 ; undefined
    16e4:	936b000a 	sbfiz	x10, x0, #21, #1
    16e8:	64109308 	.inst	0x64109308 ; undefined
    16ec:	04930493 	.inst	0x04930493 ; undefined
    16f0:	00000720 	.inst	0x00000720 ; undefined
    16f4:	00000000 	.inst	0x00000000 ; undefined
    16f8:	00000724 	.inst	0x00000724 ; undefined
    16fc:	00000000 	.inst	0x00000000 ; undefined
    1700:	0071000f 	.inst	0x0071000f ; undefined
    1704:	9f1af809 	.inst	0x9f1af809 ; undefined
    1708:	10930893 	adr	x19, fffffffffff27818 <SMC_ID_HW_RSA+0xffffffff7bf17911>
    170c:	93049364 	.inst	0x93049364 ; undefined
    1710:	00072404 	.inst	0x00072404 ; undefined
    1714:	00000000 	.inst	0x00000000 ; undefined
    1718:	00073000 	.inst	0x00073000 ; undefined
    171c:	00000000 	.inst	0x00000000 ; undefined
    1720:	6b000a00 	subs	w0, w16, w0, lsl #2
    1724:	10930893 	adr	x19, fffffffffff27834 <SMC_ID_HW_RSA+0xffffffff7bf1792d>
    1728:	93049364 	.inst	0x93049364 ; undefined
    172c:	00073004 	.inst	0x00073004 ; undefined
    1730:	00000000 	.inst	0x00000000 ; undefined
    1734:	00074000 	.inst	0x00074000 ; undefined
    1738:	00000000 	.inst	0x00000000 ; undefined
    173c:	6b000a00 	subs	w0, w16, w0, lsl #2
    1740:	10930893 	adr	x19, fffffffffff27850 <SMC_ID_HW_RSA+0xffffffff7bf17949>
    1744:	93049351 	.inst	0x93049351 ; undefined
    1748:	00074004 	.inst	0x00074004 ; undefined
    174c:	00000000 	.inst	0x00000000 ; undefined
    1750:	00074400 	.inst	0x00074400 ; undefined
    1754:	00000000 	.inst	0x00000000 ; undefined
    1758:	6b000a00 	subs	w0, w16, w0, lsl #2
    175c:	10930893 	adr	x19, fffffffffff2786c <SMC_ID_HW_RSA+0xffffffff7bf17965>
    1760:	93049364 	.inst	0x93049364 ; undefined
    1764:	00074404 	.inst	0x00074404 ; undefined
    1768:	00000000 	.inst	0x00000000 ; undefined
    176c:	00075400 	.inst	0x00075400 ; undefined
    1770:	00000000 	.inst	0x00000000 ; undefined
    1774:	6b000a00 	subs	w0, w16, w0, lsl #2
    1778:	10930893 	adr	x19, fffffffffff27888 <SMC_ID_HW_RSA+0xffffffff7bf17981>
    177c:	93049351 	.inst	0x93049351 ; undefined
    1780:	00075404 	.inst	0x00075404 ; undefined
    1784:	00000000 	.inst	0x00000000 ; undefined
    1788:	00075800 	.inst	0x00075800 ; undefined
    178c:	00000000 	.inst	0x00000000 ; undefined
    1790:	6b000a00 	subs	w0, w16, w0, lsl #2
    1794:	10930893 	adr	x19, fffffffffff278a4 <SMC_ID_HW_RSA+0xffffffff7bf1799d>
    1798:	93049364 	.inst	0x93049364 ; undefined
    179c:	00075804 	.inst	0x00075804 ; undefined
    17a0:	00000000 	.inst	0x00000000 ; undefined
    17a4:	00076800 	.inst	0x00076800 ; undefined
    17a8:	00000000 	.inst	0x00000000 ; undefined
    17ac:	6b000a00 	subs	w0, w16, w0, lsl #2
    17b0:	10930893 	adr	x19, fffffffffff278c0 <SMC_ID_HW_RSA+0xffffffff7bf179b9>
    17b4:	93049351 	.inst	0x93049351 ; undefined
    17b8:	00076804 	.inst	0x00076804 ; undefined
    17bc:	00000000 	.inst	0x00000000 ; undefined
    17c0:	00077800 	.inst	0x00077800 ; undefined
    17c4:	00000000 	.inst	0x00000000 ; undefined
    17c8:	6b000a00 	subs	w0, w16, w0, lsl #2
    17cc:	10930893 	adr	x19, fffffffffff278dc <SMC_ID_HW_RSA+0xffffffff7bf179d5>
    17d0:	93049364 	.inst	0x93049364 ; undefined
    17d4:	00077804 	.inst	0x00077804 ; undefined
    17d8:	00000000 	.inst	0x00000000 ; undefined
    17dc:	00078800 	.inst	0x00078800 ; undefined
    17e0:	00000000 	.inst	0x00000000 ; undefined
    17e4:	6b000a00 	subs	w0, w16, w0, lsl #2
    17e8:	10930893 	adr	x19, fffffffffff278f8 <SMC_ID_HW_RSA+0xffffffff7bf179f1>
    17ec:	93049351 	.inst	0x93049351 ; undefined
    17f0:	00078804 	.inst	0x00078804 ; undefined
    17f4:	00000000 	.inst	0x00000000 ; undefined
    17f8:	00079800 	.inst	0x00079800 ; undefined
    17fc:	00000000 	.inst	0x00000000 ; undefined
    1800:	6b000a00 	subs	w0, w16, w0, lsl #2
    1804:	10930893 	adr	x19, fffffffffff27914 <SMC_ID_HW_RSA+0xffffffff7bf17a0d>
    1808:	93049364 	.inst	0x93049364 ; undefined
    180c:	00079804 	.inst	0x00079804 ; undefined
    1810:	00000000 	.inst	0x00000000 ; undefined
    1814:	00079c00 	.inst	0x00079c00 ; undefined
    1818:	00000000 	.inst	0x00000000 ; undefined
    181c:	71000f00 	subs	w0, w24, #0x3
    1820:	1af80900 	.inst	0x1af80900 ; undefined
    1824:	9308939f 	.inst	0x9308939f ; undefined
    1828:	04936410 	.inst	0x04936410 ; undefined
    182c:	079c0493 	.inst	0x079c0493 ; undefined
    1830:	00000000 	.inst	0x00000000 ; undefined
    1834:	07c40000 	.inst	0x07c40000 ; undefined
    1838:	00000000 	.inst	0x00000000 ; undefined
    183c:	000a0000 	.inst	0x000a0000 ; undefined
    1840:	9308936b 	.inst	0x9308936b ; undefined
    1844:	04936410 	.inst	0x04936410 ; undefined
    1848:	07c40493 	.inst	0x07c40493 ; undefined
    184c:	00000000 	.inst	0x00000000 ; undefined
    1850:	07c80000 	.inst	0x07c80000 ; undefined
    1854:	00000000 	.inst	0x00000000 ; undefined
    1858:	000f0000 	.inst	0x000f0000 ; undefined
    185c:	f8090071 	stur	x17, [x3,#144]
    1860:	08939f1a 	stlrb	w26, [x24]
    1864:	93641093 	sbfiz	x19, x4, #28, #5
    1868:	c8049304 	stlxr	w4, x4, [x24]
    186c:	00000007 	.inst	0x00000007 ; undefined
    1870:	d0000000 	adrp	x0, 3000 <_stack_size+0x2000>
    1874:	00000007 	.inst	0x00000007 ; undefined
    1878:	0a000000 	and	w0, w0, w0
    187c:	08936b00 	.inst	0x08936b00 ; undefined
    1880:	93641093 	sbfiz	x19, x4, #28, #5
    1884:	d0049304 	adrp	x4, 9263000 <_stack_base+0x6255880>
    1888:	00000007 	.inst	0x00000007 ; undefined
    188c:	dc000000 	.inst	0xdc000000 ; undefined
    1890:	00000007 	.inst	0x00000007 ; undefined
    1894:	0a000000 	and	w0, w0, w0
    1898:	08936b00 	.inst	0x08936b00 ; undefined
    189c:	93511093 	sbfiz	x19, x4, #47, #5
    18a0:	dc049304 	.inst	0xdc049304 ; undefined
    18a4:	00000007 	.inst	0x00000007 ; undefined
    18a8:	e4000000 	.inst	0xe4000000 ; undefined
    18ac:	00000007 	.inst	0x00000007 ; undefined
    18b0:	0a000000 	and	w0, w0, w0
    18b4:	08936b00 	.inst	0x08936b00 ; undefined
    18b8:	93641093 	sbfiz	x19, x4, #28, #5
    18bc:	e4049304 	.inst	0xe4049304 ; undefined
    18c0:	00000007 	.inst	0x00000007 ; undefined
    18c4:	f4000000 	.inst	0xf4000000 ; undefined
    18c8:	00000007 	.inst	0x00000007 ; undefined
    18cc:	0a000000 	and	w0, w0, w0
    18d0:	08936b00 	.inst	0x08936b00 ; undefined
    18d4:	93511093 	sbfiz	x19, x4, #47, #5
    18d8:	f4049304 	.inst	0xf4049304 ; undefined
    18dc:	00000007 	.inst	0x00000007 ; undefined
    18e0:	00000000 	.inst	0x00000000 ; undefined
    18e4:	00000008 	.inst	0x00000008 ; undefined
    18e8:	0a000000 	and	w0, w0, w0
    18ec:	08936b00 	.inst	0x08936b00 ; undefined
    18f0:	93641093 	sbfiz	x19, x4, #28, #5
    18f4:	00049304 	.inst	0x00049304 ; undefined
    18f8:	00000008 	.inst	0x00000008 ; undefined
    18fc:	20000000 	.inst	0x20000000 ; undefined
    1900:	00000008 	.inst	0x00000008 ; undefined
    1904:	0a000000 	and	w0, w0, w0
    1908:	08936b00 	.inst	0x08936b00 ; undefined
    190c:	93511093 	sbfiz	x19, x4, #47, #5
    1910:	20049304 	.inst	0x20049304 ; undefined
    1914:	00000008 	.inst	0x00000008 ; undefined
    1918:	24000000 	.inst	0x24000000 ; undefined
    191c:	00000008 	.inst	0x00000008 ; undefined
    1920:	0a000000 	and	w0, w0, w0
    1924:	08936b00 	.inst	0x08936b00 ; undefined
    1928:	93641093 	sbfiz	x19, x4, #28, #5
    192c:	24049304 	.inst	0x24049304 ; undefined
    1930:	00000008 	.inst	0x00000008 ; undefined
    1934:	34000000 	cbz	w0, 1934 <_stack_size+0x934>
    1938:	00000008 	.inst	0x00000008 ; undefined
    193c:	0a000000 	and	w0, w0, w0
    1940:	08936b00 	.inst	0x08936b00 ; undefined
    1944:	93511093 	sbfiz	x19, x4, #47, #5
    1948:	34049304 	cbz	w4, aba8 <_stack_size+0x9ba8>
    194c:	00000008 	.inst	0x00000008 ; undefined
    1950:	38000000 	sturb	w0, [x0]
    1954:	00000008 	.inst	0x00000008 ; undefined
    1958:	0a000000 	and	w0, w0, w0
    195c:	08936b00 	.inst	0x08936b00 ; undefined
    1960:	93641093 	sbfiz	x19, x4, #28, #5
    1964:	38049304 	sturb	w4, [x24,#73]
    1968:	00000008 	.inst	0x00000008 ; undefined
    196c:	68000000 	.inst	0x68000000 ; undefined
    1970:	00000008 	.inst	0x00000008 ; undefined
    1974:	0a000000 	and	w0, w0, w0
    1978:	08936b00 	.inst	0x08936b00 ; undefined
    197c:	93511093 	sbfiz	x19, x4, #47, #5
    1980:	68049304 	.inst	0x68049304 ; undefined
    1984:	00000008 	.inst	0x00000008 ; undefined
    1988:	84000000 	.inst	0x84000000 ; undefined
    198c:	00000008 	.inst	0x00000008 ; undefined
    1990:	0a000000 	and	w0, w0, w0
    1994:	08936b00 	.inst	0x08936b00 ; undefined
    1998:	93641093 	sbfiz	x19, x4, #28, #5
    199c:	84049304 	.inst	0x84049304 ; undefined
    19a0:	00000008 	.inst	0x00000008 ; undefined
    19a4:	94000000 	bl	19a4 <_stack_size+0x9a4>
    19a8:	00000008 	.inst	0x00000008 ; undefined
    19ac:	0a000000 	and	w0, w0, w0
    19b0:	08936b00 	.inst	0x08936b00 ; undefined
    19b4:	93511093 	sbfiz	x19, x4, #47, #5
    19b8:	94049304 	bl	1265c8 <_stack_size+0x1255c8>
    19bc:	00000008 	.inst	0x00000008 ; undefined
    19c0:	98000000 	ldrsw	x0, 19c0 <_stack_size+0x9c0>
    19c4:	00000008 	.inst	0x00000008 ; undefined
    19c8:	0a000000 	and	w0, w0, w0
    19cc:	08936b00 	.inst	0x08936b00 ; undefined
    19d0:	93641093 	sbfiz	x19, x4, #28, #5
    19d4:	98049304 	ldrsw	x4, ac34 <_stack_size+0x9c34>
    19d8:	00000008 	.inst	0x00000008 ; undefined
    19dc:	a8000000 	stnp	x0, x0, [x0]
    19e0:	00000008 	.inst	0x00000008 ; undefined
    19e4:	0a000000 	and	w0, w0, w0
    19e8:	08936b00 	.inst	0x08936b00 ; undefined
    19ec:	93511093 	sbfiz	x19, x4, #47, #5
    19f0:	a8049304 	stnp	x4, x4, [x24,#72]
    19f4:	00000008 	.inst	0x00000008 ; undefined
    19f8:	ac000000 	stnp	q0, q0, [x0]
    19fc:	00000008 	.inst	0x00000008 ; undefined
    1a00:	0a000000 	and	w0, w0, w0
    1a04:	08936b00 	.inst	0x08936b00 ; undefined
    1a08:	93641093 	sbfiz	x19, x4, #28, #5
    1a0c:	ac049304 	stnp	q4, q4, [x24,#144]
    1a10:	00000008 	.inst	0x00000008 ; undefined
    1a14:	c8000000 	stxr	w0, x0, [x0]
    1a18:	00000008 	.inst	0x00000008 ; undefined
    1a1c:	0a000000 	and	w0, w0, w0
    1a20:	08936b00 	.inst	0x08936b00 ; undefined
    1a24:	93511093 	sbfiz	x19, x4, #47, #5
    1a28:	c8049304 	stlxr	w4, x4, [x24]
    1a2c:	00000008 	.inst	0x00000008 ; undefined
    1a30:	d4000000 	.inst	0xd4000000 ; undefined
    1a34:	00000008 	.inst	0x00000008 ; undefined
    1a38:	0a000000 	and	w0, w0, w0
    1a3c:	08936b00 	.inst	0x08936b00 ; undefined
    1a40:	93641093 	sbfiz	x19, x4, #28, #5
    1a44:	d4049304 	.inst	0xd4049304 ; undefined
    1a48:	00000008 	.inst	0x00000008 ; undefined
    1a4c:	e4000000 	.inst	0xe4000000 ; undefined
    1a50:	00000008 	.inst	0x00000008 ; undefined
    1a54:	0a000000 	and	w0, w0, w0
    1a58:	08936b00 	.inst	0x08936b00 ; undefined
    1a5c:	93511093 	sbfiz	x19, x4, #47, #5
    1a60:	e4049304 	.inst	0xe4049304 ; undefined
    1a64:	00000008 	.inst	0x00000008 ; undefined
    1a68:	e8000000 	.inst	0xe8000000 ; undefined
    1a6c:	00000008 	.inst	0x00000008 ; undefined
    1a70:	0a000000 	and	w0, w0, w0
    1a74:	08936b00 	.inst	0x08936b00 ; undefined
    1a78:	93641093 	sbfiz	x19, x4, #28, #5
    1a7c:	e8049304 	.inst	0xe8049304 ; undefined
    1a80:	00000008 	.inst	0x00000008 ; undefined
    1a84:	f8000000 	stur	x0, [x0]
    1a88:	00000008 	.inst	0x00000008 ; undefined
    1a8c:	0a000000 	and	w0, w0, w0
    1a90:	08936b00 	.inst	0x08936b00 ; undefined
    1a94:	93511093 	sbfiz	x19, x4, #47, #5
    1a98:	f8049304 	stur	x4, [x24,#73]
    1a9c:	00000008 	.inst	0x00000008 ; undefined
    1aa0:	fc000000 	stur	d0, [x0]
    1aa4:	00000008 	.inst	0x00000008 ; undefined
    1aa8:	0a000000 	and	w0, w0, w0
    1aac:	08936b00 	.inst	0x08936b00 ; undefined
    1ab0:	93641093 	sbfiz	x19, x4, #28, #5
    1ab4:	fc049304 	stur	d4, [x24,#73]
    1ab8:	00000008 	.inst	0x00000008 ; undefined
    1abc:	18000000 	ldr	w0, 1abc <_stack_size+0xabc>
    1ac0:	00000009 	.inst	0x00000009 ; undefined
    1ac4:	0a000000 	and	w0, w0, w0
    1ac8:	08936b00 	.inst	0x08936b00 ; undefined
    1acc:	93511093 	sbfiz	x19, x4, #47, #5
    1ad0:	18049304 	ldr	w4, ad30 <_stack_size+0x9d30>
    1ad4:	00000009 	.inst	0x00000009 ; undefined
    1ad8:	20000000 	.inst	0x20000000 ; undefined
    1adc:	00000009 	.inst	0x00000009 ; undefined
    1ae0:	0a000000 	and	w0, w0, w0
    1ae4:	08936b00 	.inst	0x08936b00 ; undefined
    1ae8:	93641093 	sbfiz	x19, x4, #28, #5
    1aec:	20049304 	.inst	0x20049304 ; undefined
    1af0:	00000009 	.inst	0x00000009 ; undefined
    1af4:	2c000000 	stnp	s0, s0, [x0]
    1af8:	00000009 	.inst	0x00000009 ; undefined
    1afc:	0a000000 	and	w0, w0, w0
    1b00:	08936b00 	.inst	0x08936b00 ; undefined
    1b04:	93511093 	sbfiz	x19, x4, #47, #5
    1b08:	2c049304 	stnp	s4, s4, [x24,#36]
    1b0c:	00000009 	.inst	0x00000009 ; undefined
    1b10:	34000000 	cbz	w0, 1b10 <_stack_size+0xb10>
    1b14:	00000009 	.inst	0x00000009 ; undefined
    1b18:	0a000000 	and	w0, w0, w0
    1b1c:	08936b00 	.inst	0x08936b00 ; undefined
    1b20:	93641093 	sbfiz	x19, x4, #28, #5
    1b24:	34049304 	cbz	w4, ad84 <_stack_size+0x9d84>
    1b28:	00000009 	.inst	0x00000009 ; undefined
    1b2c:	40000000 	.inst	0x40000000 ; undefined
    1b30:	00000009 	.inst	0x00000009 ; undefined
    1b34:	0a000000 	and	w0, w0, w0
    1b38:	08936b00 	.inst	0x08936b00 ; undefined
    1b3c:	93511093 	sbfiz	x19, x4, #47, #5
    1b40:	40049304 	.inst	0x40049304 ; undefined
    1b44:	00000009 	.inst	0x00000009 ; undefined
    1b48:	48000000 	stxrh	w0, w0, [x0]
    1b4c:	00000009 	.inst	0x00000009 ; undefined
    1b50:	0a000000 	and	w0, w0, w0
    1b54:	08936b00 	.inst	0x08936b00 ; undefined
    1b58:	93641093 	sbfiz	x19, x4, #28, #5
    1b5c:	48049304 	stlxrh	w4, w4, [x24]
    1b60:	00000009 	.inst	0x00000009 ; undefined
    1b64:	54000000 	b.eq	1b64 <_stack_size+0xb64>
    1b68:	00000009 	.inst	0x00000009 ; undefined
    1b6c:	0a000000 	and	w0, w0, w0
    1b70:	08936b00 	.inst	0x08936b00 ; undefined
    1b74:	93511093 	sbfiz	x19, x4, #47, #5
    1b78:	54049304 	b.mi	add8 <_stack_size+0x9dd8>
    1b7c:	00000009 	.inst	0x00000009 ; undefined
    1b80:	5c000000 	ldr	d0, 1b80 <_stack_size+0xb80>
    1b84:	00000009 	.inst	0x00000009 ; undefined
    1b88:	0a000000 	and	w0, w0, w0
    1b8c:	08936b00 	.inst	0x08936b00 ; undefined
    1b90:	93641093 	sbfiz	x19, x4, #28, #5
    1b94:	5c049304 	ldr	d4, adf4 <_stack_size+0x9df4>
    1b98:	00000009 	.inst	0x00000009 ; undefined
    1b9c:	68000000 	.inst	0x68000000 ; undefined
    1ba0:	00000009 	.inst	0x00000009 ; undefined
    1ba4:	0a000000 	and	w0, w0, w0
    1ba8:	08936b00 	.inst	0x08936b00 ; undefined
    1bac:	93511093 	sbfiz	x19, x4, #47, #5
    1bb0:	68049304 	.inst	0x68049304 ; undefined
    1bb4:	00000009 	.inst	0x00000009 ; undefined
    1bb8:	70000000 	adr	x0, 1bbb <_stack_size+0xbbb>
    1bbc:	00000009 	.inst	0x00000009 ; undefined
    1bc0:	0a000000 	and	w0, w0, w0
    1bc4:	08936b00 	.inst	0x08936b00 ; undefined
    1bc8:	93641093 	sbfiz	x19, x4, #28, #5
    1bcc:	70049304 	adr	x4, ae2f <_stack_size+0x9e2f>
    1bd0:	00000009 	.inst	0x00000009 ; undefined
    1bd4:	7c000000 	stur	h0, [x0]
    1bd8:	00000009 	.inst	0x00000009 ; undefined
    1bdc:	0a000000 	and	w0, w0, w0
    1be0:	08936b00 	.inst	0x08936b00 ; undefined
    1be4:	93511093 	sbfiz	x19, x4, #47, #5
    1be8:	7c049304 	stur	h4, [x24,#73]
    1bec:	00000009 	.inst	0x00000009 ; undefined
    1bf0:	84000000 	.inst	0x84000000 ; undefined
    1bf4:	00000009 	.inst	0x00000009 ; undefined
    1bf8:	0a000000 	and	w0, w0, w0
    1bfc:	08936b00 	.inst	0x08936b00 ; undefined
    1c00:	93641093 	sbfiz	x19, x4, #28, #5
    1c04:	84049304 	.inst	0x84049304 ; undefined
    1c08:	00000009 	.inst	0x00000009 ; undefined
    1c0c:	90000000 	adrp	x0, 1000 <_stack_size>
    1c10:	00000009 	.inst	0x00000009 ; undefined
    1c14:	0a000000 	and	w0, w0, w0
    1c18:	08936b00 	.inst	0x08936b00 ; undefined
    1c1c:	93511093 	sbfiz	x19, x4, #47, #5
    1c20:	90049304 	adrp	x4, 9261000 <_stack_base+0x6253880>
    1c24:	00000009 	.inst	0x00000009 ; undefined
    1c28:	98000000 	ldrsw	x0, 1c28 <_stack_size+0xc28>
    1c2c:	00000009 	.inst	0x00000009 ; undefined
    1c30:	0a000000 	and	w0, w0, w0
    1c34:	08936b00 	.inst	0x08936b00 ; undefined
    1c38:	93641093 	sbfiz	x19, x4, #28, #5
    1c3c:	98049304 	ldrsw	x4, ae9c <_stack_size+0x9e9c>
    1c40:	00000009 	.inst	0x00000009 ; undefined
    1c44:	a4000000 	.inst	0xa4000000 ; undefined
    1c48:	00000009 	.inst	0x00000009 ; undefined
    1c4c:	0a000000 	and	w0, w0, w0
    1c50:	08936b00 	.inst	0x08936b00 ; undefined
    1c54:	93511093 	sbfiz	x19, x4, #47, #5
    1c58:	a4049304 	.inst	0xa4049304 ; undefined
    1c5c:	00000009 	.inst	0x00000009 ; undefined
    1c60:	ac000000 	stnp	q0, q0, [x0]
    1c64:	00000009 	.inst	0x00000009 ; undefined
    1c68:	0a000000 	and	w0, w0, w0
    1c6c:	08936b00 	.inst	0x08936b00 ; undefined
    1c70:	93641093 	sbfiz	x19, x4, #28, #5
    1c74:	00049304 	.inst	0x00049304 ; undefined
	...
    1c84:	b0000000 	adrp	x0, 2000 <_stack_size+0x1000>
    1c88:	00000001 	.inst	0x00000001 ; undefined
    1c8c:	b4000000 	cbz	x0, 1c8c <_stack_size+0xc8c>
    1c90:	00000001 	.inst	0x00000001 ; undefined
    1c94:	01000000 	.inst	0x01000000 ; undefined
    1c98:	01d85000 	.inst	0x01d85000 ; undefined
    1c9c:	00000000 	.inst	0x00000000 ; undefined
    1ca0:	01f40000 	.inst	0x01f40000 ; undefined
    1ca4:	00000000 	.inst	0x00000000 ; undefined
    1ca8:	00010000 	.inst	0x00010000 ; undefined
    1cac:	0001f450 	.inst	0x0001f450 ; undefined
    1cb0:	00000000 	.inst	0x00000000 ; undefined
    1cb4:	00020000 	.inst	0x00020000 ; undefined
    1cb8:	00000000 	.inst	0x00000000 ; undefined
    1cbc:	87000200 	.inst	0x87000200 ; undefined
    1cc0:	00020000 	.inst	0x00020000 ; undefined
    1cc4:	00000000 	.inst	0x00000000 ; undefined
    1cc8:	00020c00 	.inst	0x00020c00 ; undefined
    1ccc:	00000000 	.inst	0x00000000 ; undefined
    1cd0:	87000200 	.inst	0x87000200 ; undefined
    1cd4:	00020c7f 	.inst	0x00020c7f ; undefined
    1cd8:	00000000 	.inst	0x00000000 ; undefined
    1cdc:	00021800 	.inst	0x00021800 ; undefined
    1ce0:	00000000 	.inst	0x00000000 ; undefined
    1ce4:	50000100 	adr	x0, 1d06 <_stack_size+0xd06>
    1ce8:	0000021c 	.inst	0x0000021c ; undefined
    1cec:	00000000 	.inst	0x00000000 ; undefined
    1cf0:	00000248 	.inst	0x00000248 ; undefined
    1cf4:	00000000 	.inst	0x00000000 ; undefined
    1cf8:	48500001 	ldxrh	w1, [x0]
    1cfc:	00000002 	.inst	0x00000002 ; undefined
    1d00:	54000000 	b.eq	1d00 <_stack_size+0xd00>
    1d04:	00000002 	.inst	0x00000002 ; undefined
    1d08:	02000000 	.inst	0x02000000 ; undefined
    1d0c:	54018700 	b.eq	4dec <_stack_size+0x3dec>
    1d10:	00000002 	.inst	0x00000002 ; undefined
    1d14:	5c000000 	ldr	d0, 1d14 <_stack_size+0xd14>
    1d18:	00000002 	.inst	0x00000002 ; undefined
    1d1c:	02000000 	.inst	0x02000000 ; undefined
    1d20:	5c7f8700 	ldr	d0, 100e00 <_stack_size+0xffe00>
    1d24:	00000002 	.inst	0x00000002 ; undefined
    1d28:	74000000 	.inst	0x74000000 ; undefined
    1d2c:	00000002 	.inst	0x00000002 ; undefined
    1d30:	01000000 	.inst	0x01000000 ; undefined
    1d34:	02745000 	.inst	0x02745000 ; undefined
    1d38:	00000000 	.inst	0x00000000 ; undefined
    1d3c:	02dc0000 	.inst	0x02dc0000 ; undefined
    1d40:	00000000 	.inst	0x00000000 ; undefined
    1d44:	00020000 	.inst	0x00020000 ; undefined
    1d48:	03bc7f89 	.inst	0x03bc7f89 ; undefined
    1d4c:	00000000 	.inst	0x00000000 ; undefined
    1d50:	03dc0000 	.inst	0x03dc0000 ; undefined
    1d54:	00000000 	.inst	0x00000000 ; undefined
    1d58:	00020000 	.inst	0x00020000 ; undefined
    1d5c:	03dc7f89 	.inst	0x03dc7f89 ; undefined
    1d60:	00000000 	.inst	0x00000000 ; undefined
    1d64:	03e40000 	.inst	0x03e40000 ; undefined
    1d68:	00000000 	.inst	0x00000000 ; undefined
    1d6c:	00010000 	.inst	0x00010000 ; undefined
    1d70:	0003e450 	.inst	0x0003e450 ; undefined
    1d74:	00000000 	.inst	0x00000000 ; undefined
    1d78:	00040b00 	.inst	0x00040b00 ; undefined
    1d7c:	00000000 	.inst	0x00000000 ; undefined
    1d80:	89000200 	.inst	0x89000200 ; undefined
    1d84:	0004bc7f 	.inst	0x0004bc7f ; undefined
    1d88:	00000000 	.inst	0x00000000 ; undefined
    1d8c:	0004c400 	.inst	0x0004c400 ; undefined
    1d90:	00000000 	.inst	0x00000000 ; undefined
    1d94:	50000100 	adr	x0, 1db6 <_stack_size+0xdb6>
    1d98:	000004c4 	.inst	0x000004c4 ; undefined
    1d9c:	00000000 	.inst	0x00000000 ; undefined
    1da0:	000004e0 	.inst	0x000004e0 ; undefined
    1da4:	00000000 	.inst	0x00000000 ; undefined
    1da8:	7f890002 	.inst	0x7f890002 ; undefined
    1dac:	000004ec 	.inst	0x000004ec ; undefined
    1db0:	00000000 	.inst	0x00000000 ; undefined
    1db4:	00000500 	.inst	0x00000500 ; undefined
    1db8:	00000000 	.inst	0x00000000 ; undefined
    1dbc:	18500001 	ldr	w1, a1dbc <_stack_size+0xa0dbc>
    1dc0:	00000005 	.inst	0x00000005 ; undefined
    1dc4:	64000000 	.inst	0x64000000 ; undefined
    1dc8:	00000005 	.inst	0x00000005 ; undefined
    1dcc:	02000000 	.inst	0x02000000 ; undefined
    1dd0:	647f8900 	.inst	0x647f8900 ; undefined
    1dd4:	00000005 	.inst	0x00000005 ; undefined
    1dd8:	70000000 	adr	x0, 1ddb <_stack_size+0xddb>
    1ddc:	00000005 	.inst	0x00000005 ; undefined
    1de0:	01000000 	.inst	0x01000000 ; undefined
    1de4:	05705000 	.inst	0x05705000 ; undefined
    1de8:	00000000 	.inst	0x00000000 ; undefined
    1dec:	057c0000 	.inst	0x057c0000 ; undefined
    1df0:	00000000 	.inst	0x00000000 ; undefined
    1df4:	00020000 	.inst	0x00020000 ; undefined
    1df8:	057c7f89 	.inst	0x057c7f89 ; undefined
    1dfc:	00000000 	.inst	0x00000000 ; undefined
    1e00:	05800000 	.inst	0x05800000 ; undefined
    1e04:	00000000 	.inst	0x00000000 ; undefined
    1e08:	00010000 	.inst	0x00010000 ; undefined
    1e0c:	00058050 	.inst	0x00058050 ; undefined
    1e10:	00000000 	.inst	0x00000000 ; undefined
    1e14:	00059800 	.inst	0x00059800 ; undefined
    1e18:	00000000 	.inst	0x00000000 ; undefined
    1e1c:	89000200 	.inst	0x89000200 ; undefined
    1e20:	0005b07f 	.inst	0x0005b07f ; undefined
    1e24:	00000000 	.inst	0x00000000 ; undefined
    1e28:	0005b400 	.inst	0x0005b400 ; undefined
    1e2c:	00000000 	.inst	0x00000000 ; undefined
    1e30:	50000100 	adr	x0, 1e52 <_stack_size+0xe52>
    1e34:	000005b4 	.inst	0x000005b4 ; undefined
    1e38:	00000000 	.inst	0x00000000 ; undefined
    1e3c:	000005c0 	.inst	0x000005c0 ; undefined
    1e40:	00000000 	.inst	0x00000000 ; undefined
    1e44:	7f890002 	.inst	0x7f890002 ; undefined
    1e48:	000005c0 	.inst	0x000005c0 ; undefined
    1e4c:	00000000 	.inst	0x00000000 ; undefined
    1e50:	000005c4 	.inst	0x000005c4 ; undefined
    1e54:	00000000 	.inst	0x00000000 ; undefined
    1e58:	c4500001 	.inst	0xc4500001 ; undefined
    1e5c:	00000005 	.inst	0x00000005 ; undefined
    1e60:	e4000000 	.inst	0xe4000000 ; undefined
    1e64:	00000005 	.inst	0x00000005 ; undefined
    1e68:	02000000 	.inst	0x02000000 ; undefined
    1e6c:	e87f8900 	.inst	0xe87f8900 ; undefined
    1e70:	00000005 	.inst	0x00000005 ; undefined
    1e74:	ec000000 	.inst	0xec000000 ; undefined
    1e78:	00000005 	.inst	0x00000005 ; undefined
    1e7c:	01000000 	.inst	0x01000000 ; undefined
    1e80:	05ec5000 	.inst	0x05ec5000 ; undefined
    1e84:	00000000 	.inst	0x00000000 ; undefined
    1e88:	06000000 	.inst	0x06000000 ; undefined
    1e8c:	00000000 	.inst	0x00000000 ; undefined
    1e90:	00020000 	.inst	0x00020000 ; undefined
    1e94:	06007f89 	.inst	0x06007f89 ; undefined
    1e98:	00000000 	.inst	0x00000000 ; undefined
    1e9c:	062c0000 	.inst	0x062c0000 ; undefined
    1ea0:	00000000 	.inst	0x00000000 ; undefined
    1ea4:	00010000 	.inst	0x00010000 ; undefined
    1ea8:	00062c50 	.inst	0x00062c50 ; undefined
    1eac:	00000000 	.inst	0x00000000 ; undefined
    1eb0:	00063400 	.inst	0x00063400 ; undefined
    1eb4:	00000000 	.inst	0x00000000 ; undefined
    1eb8:	70000300 	adr	x0, 1f1b <_stack_size+0xf1b>
    1ebc:	06349f30 	.inst	0x06349f30 ; undefined
    1ec0:	00000000 	.inst	0x00000000 ; undefined
    1ec4:	06380000 	.inst	0x06380000 ; undefined
    1ec8:	00000000 	.inst	0x00000000 ; undefined
    1ecc:	00010000 	.inst	0x00010000 ; undefined
    1ed0:	00063850 	.inst	0x00063850 ; undefined
    1ed4:	00000000 	.inst	0x00000000 ; undefined
    1ed8:	00065800 	.inst	0x00065800 ; undefined
    1edc:	00000000 	.inst	0x00000000 ; undefined
    1ee0:	89000200 	.inst	0x89000200 ; undefined
    1ee4:	0006587f 	.inst	0x0006587f ; undefined
    1ee8:	00000000 	.inst	0x00000000 ; undefined
    1eec:	00065c00 	.inst	0x00065c00 ; undefined
    1ef0:	00000000 	.inst	0x00000000 ; undefined
    1ef4:	50000100 	adr	x0, 1f16 <_stack_size+0xf16>
    1ef8:	0000065c 	.inst	0x0000065c ; undefined
    1efc:	00000000 	.inst	0x00000000 ; undefined
    1f00:	00000668 	.inst	0x00000668 ; undefined
    1f04:	00000000 	.inst	0x00000000 ; undefined
    1f08:	7f890002 	.inst	0x7f890002 ; undefined
    1f0c:	0000067c 	.inst	0x0000067c ; undefined
    1f10:	00000000 	.inst	0x00000000 ; undefined
    1f14:	00000680 	.inst	0x00000680 ; undefined
    1f18:	00000000 	.inst	0x00000000 ; undefined
    1f1c:	7f890002 	.inst	0x7f890002 ; undefined
    1f20:	00000684 	.inst	0x00000684 ; undefined
    1f24:	00000000 	.inst	0x00000000 ; undefined
    1f28:	00000768 	.inst	0x00000768 ; undefined
    1f2c:	00000000 	.inst	0x00000000 ; undefined
    1f30:	7f890002 	.inst	0x7f890002 ; undefined
    1f34:	00000778 	.inst	0x00000778 ; undefined
    1f38:	00000000 	.inst	0x00000000 ; undefined
    1f3c:	000007b0 	.inst	0x000007b0 ; undefined
    1f40:	00000000 	.inst	0x00000000 ; undefined
    1f44:	7f890002 	.inst	0x7f890002 ; undefined
    1f48:	000007b4 	.inst	0x000007b4 ; undefined
    1f4c:	00000000 	.inst	0x00000000 ; undefined
    1f50:	000007f4 	.inst	0x000007f4 ; undefined
    1f54:	00000000 	.inst	0x00000000 ; undefined
    1f58:	7f890002 	.inst	0x7f890002 ; undefined
    1f5c:	000007fc 	.inst	0x000007fc ; undefined
    1f60:	00000000 	.inst	0x00000000 ; undefined
    1f64:	00000868 	.inst	0x00000868 ; undefined
    1f68:	00000000 	.inst	0x00000000 ; undefined
    1f6c:	7f890002 	.inst	0x7f890002 ; undefined
    1f70:	00000874 	.inst	0x00000874 ; undefined
    1f74:	00000000 	.inst	0x00000000 ; undefined
    1f78:	0000087c 	.inst	0x0000087c ; undefined
    1f7c:	00000000 	.inst	0x00000000 ; undefined
    1f80:	7f890002 	.inst	0x7f890002 ; undefined
    1f84:	00000880 	.inst	0x00000880 ; undefined
    1f88:	00000000 	.inst	0x00000000 ; undefined
    1f8c:	000009ac 	.inst	0x000009ac ; undefined
    1f90:	00000000 	.inst	0x00000000 ; undefined
    1f94:	7f890002 	.inst	0x7f890002 ; undefined
	...
    1fa8:	0000058c 	.inst	0x0000058c ; undefined
    1fac:	00000000 	.inst	0x00000000 ; undefined
    1fb0:	00000590 	.inst	0x00000590 ; undefined
    1fb4:	00000000 	.inst	0x00000000 ; undefined
    1fb8:	00700002 	.inst	0x00700002 ; undefined
	...
    1fcc:	00000410 	.inst	0x00000410 ; undefined
    1fd0:	00000000 	.inst	0x00000000 ; undefined
    1fd4:	00000418 	.inst	0x00000418 ; undefined
    1fd8:	00000000 	.inst	0x00000000 ; undefined
    1fdc:	48500001 	ldxrh	w1, [x0]
    1fe0:	00000006 	.inst	0x00000006 ; undefined
    1fe4:	50000000 	adr	x0, 1fe6 <_stack_size+0xfe6>
    1fe8:	00000006 	.inst	0x00000006 ; undefined
    1fec:	01000000 	.inst	0x01000000 ; undefined
    1ff0:	06505400 	.inst	0x06505400 ; undefined
    1ff4:	00000000 	.inst	0x00000000 ; undefined
    1ff8:	06580000 	.inst	0x06580000 ; undefined
    1ffc:	00000000 	.inst	0x00000000 ; undefined
    2000:	000a0000 	.inst	0x000a0000 ; undefined
    2004:	009d1003 	.inst	0x009d1003 ; undefined
    2008:	00000003 	.inst	0x00000003 ; undefined
    200c:	00009f00 	.inst	0x00009f00 ; undefined
	...
    201c:	02880000 	.inst	0x02880000 ; undefined
    2020:	00000000 	.inst	0x00000000 ; undefined
    2024:	02a40000 	.inst	0x02a40000 ; undefined
    2028:	00000000 	.inst	0x00000000 ; undefined
    202c:	00010000 	.inst	0x00010000 ; undefined
    2030:	0003f850 	.inst	0x0003f850 ; undefined
    2034:	00000000 	.inst	0x00000000 ; undefined
    2038:	00040b00 	.inst	0x00040b00 ; undefined
    203c:	00000000 	.inst	0x00000000 ; undefined
    2040:	51000100 	sub	w0, w8, #0x0
    2044:	000004d8 	.inst	0x000004d8 ; undefined
    2048:	00000000 	.inst	0x00000000 ; undefined
    204c:	000004e0 	.inst	0x000004e0 ; undefined
    2050:	00000000 	.inst	0x00000000 ; undefined
    2054:	38510001 	ldurb	w1, [x0,#-240]
    2058:	00000005 	.inst	0x00000005 ; undefined
    205c:	40000000 	.inst	0x40000000 ; undefined
    2060:	00000005 	.inst	0x00000005 ; undefined
    2064:	01000000 	.inst	0x01000000 ; undefined
    2068:	070c5100 	.inst	0x070c5100 ; undefined
    206c:	00000000 	.inst	0x00000000 ; undefined
    2070:	07140000 	.inst	0x07140000 ; undefined
    2074:	00000000 	.inst	0x00000000 ; undefined
    2078:	00010000 	.inst	0x00010000 ; undefined
    207c:	0007a051 	.inst	0x0007a051 ; undefined
    2080:	00000000 	.inst	0x00000000 ; undefined
    2084:	0007a800 	.inst	0x0007a800 ; undefined
    2088:	00000000 	.inst	0x00000000 ; undefined
    208c:	51000100 	sub	w0, w8, #0x0
	...
    20a0:	000005d4 	.inst	0x000005d4 ; undefined
    20a4:	00000000 	.inst	0x00000000 ; undefined
    20a8:	000005e8 	.inst	0x000005e8 ; undefined
    20ac:	00000000 	.inst	0x00000000 ; undefined
    20b0:	7c500001 	ldur	h1, [x0,#-256]
    20b4:	00000006 	.inst	0x00000006 ; undefined
    20b8:	84000000 	.inst	0x84000000 ; undefined
    20bc:	00000006 	.inst	0x00000006 ; undefined
    20c0:	01000000 	.inst	0x01000000 ; undefined
    20c4:	07a85000 	.inst	0x07a85000 ; undefined
    20c8:	00000000 	.inst	0x00000000 ; undefined
    20cc:	07b40000 	.inst	0x07b40000 ; undefined
    20d0:	00000000 	.inst	0x00000000 ; undefined
    20d4:	00010000 	.inst	0x00010000 ; undefined
    20d8:	00087450 	.inst	0x00087450 ; undefined
    20dc:	00000000 	.inst	0x00000000 ; undefined
    20e0:	00088000 	.inst	0x00088000 ; undefined
    20e4:	00000000 	.inst	0x00000000 ; undefined
    20e8:	50000100 	adr	x0, 210a <_stack_size+0x110a>
	...
    20fc:	00000218 	.inst	0x00000218 ; undefined
    2100:	00000000 	.inst	0x00000000 ; undefined
    2104:	00000240 	.inst	0x00000240 ; undefined
    2108:	00000000 	.inst	0x00000000 ; undefined
    210c:	5c570001 	ldr	d1, b010c <_stack_size+0xaf10c>
    2110:	00000002 	.inst	0x00000002 ; undefined
    2114:	0b000000 	add	w0, w0, w0
    2118:	00000004 	.inst	0x00000004 ; undefined
    211c:	01000000 	.inst	0x01000000 ; undefined
    2120:	040b5700 	.inst	0x040b5700 ; undefined
    2124:	00000000 	.inst	0x00000000 ; undefined
    2128:	04140000 	.inst	0x04140000 ; undefined
    212c:	00000000 	.inst	0x00000000 ; undefined
    2130:	00020000 	.inst	0x00020000 ; undefined
    2134:	04145091 	.inst	0x04145091 ; undefined
    2138:	00000000 	.inst	0x00000000 ; undefined
    213c:	04270000 	.inst	0x04270000 ; undefined
    2140:	00000000 	.inst	0x00000000 ; undefined
    2144:	00010000 	.inst	0x00010000 ; undefined
    2148:	00042757 	.inst	0x00042757 ; undefined
    214c:	00000000 	.inst	0x00000000 ; undefined
    2150:	0004bc00 	.inst	0x0004bc00 ; undefined
    2154:	00000000 	.inst	0x00000000 ; undefined
    2158:	91000200 	add	x0, x16, #0x0
    215c:	0004bc5c 	.inst	0x0004bc5c ; undefined
    2160:	00000000 	.inst	0x00000000 ; undefined
    2164:	0004ec00 	.inst	0x0004ec00 ; undefined
    2168:	00000000 	.inst	0x00000000 ; undefined
    216c:	57000100 	.inst	0x57000100 ; undefined
    2170:	0000050c 	.inst	0x0000050c ; undefined
    2174:	00000000 	.inst	0x00000000 ; undefined
    2178:	00000674 	.inst	0x00000674 ; undefined
    217c:	00000000 	.inst	0x00000000 ; undefined
    2180:	7c570001 	ldur	h1, [x0,#-144]
    2184:	00000006 	.inst	0x00000006 ; undefined
    2188:	f4000000 	.inst	0xf4000000 ; undefined
    218c:	00000007 	.inst	0x00000007 ; undefined
    2190:	01000000 	.inst	0x01000000 ; undefined
    2194:	07f45700 	.inst	0x07f45700 ; undefined
    2198:	00000000 	.inst	0x00000000 ; undefined
    219c:	07fc0000 	.inst	0x07fc0000 ; undefined
    21a0:	00000000 	.inst	0x00000000 ; undefined
    21a4:	00020000 	.inst	0x00020000 ; undefined
    21a8:	07fc5c91 	.inst	0x07fc5c91 ; undefined
    21ac:	00000000 	.inst	0x00000000 ; undefined
    21b0:	09ac0000 	.inst	0x09ac0000 ; undefined
    21b4:	00000000 	.inst	0x00000000 ; undefined
    21b8:	00010000 	.inst	0x00010000 ; undefined
    21bc:	00000057 	.inst	0x00000057 ; undefined
	...
    21cc:	00046c00 	.inst	0x00046c00 ; undefined
    21d0:	00000000 	.inst	0x00000000 ; undefined
    21d4:	00049000 	.inst	0x00049000 ; undefined
    21d8:	00000000 	.inst	0x00000000 ; undefined
    21dc:	66000100 	.inst	0x66000100 ; undefined
    21e0:	00000628 	.inst	0x00000628 ; undefined
    21e4:	00000000 	.inst	0x00000000 ; undefined
    21e8:	00000630 	.inst	0x00000630 ; undefined
    21ec:	00000000 	.inst	0x00000000 ; undefined
    21f0:	00850006 	.inst	0x00850006 ; undefined
    21f4:	9f1e0072 	.inst	0x9f1e0072 ; undefined
    21f8:	00000630 	.inst	0x00000630 ; undefined
    21fc:	00000000 	.inst	0x00000000 ; undefined
    2200:	00000634 	.inst	0x00000634 ; undefined
    2204:	00000000 	.inst	0x00000000 ; undefined
    2208:	00650001 	.inst	0x00650001 ; undefined
	...
    221c:	00000002 	.inst	0x00000002 ; undefined
    2220:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    2224:	00000002 	.inst	0x00000002 ; undefined
    2228:	01000000 	.inst	0x01000000 ; undefined
    222c:	032c5000 	.inst	0x032c5000 ; undefined
    2230:	00000000 	.inst	0x00000000 ; undefined
    2234:	03780000 	.inst	0x03780000 ; undefined
    2238:	00000000 	.inst	0x00000000 ; undefined
    223c:	00010000 	.inst	0x00010000 ; undefined
    2240:	00037850 	.inst	0x00037850 ; undefined
    2244:	00000000 	.inst	0x00000000 ; undefined
    2248:	00037c00 	.inst	0x00037c00 ; undefined
    224c:	00000000 	.inst	0x00000000 ; undefined
    2250:	70000300 	adr	x0, 22b3 <_stack_size+0x12b3>
    2254:	037c9f7f 	.inst	0x037c9f7f ; undefined
    2258:	00000000 	.inst	0x00000000 ; undefined
    225c:	03980000 	.inst	0x03980000 ; undefined
    2260:	00000000 	.inst	0x00000000 ; undefined
    2264:	00010000 	.inst	0x00010000 ; undefined
    2268:	0003a450 	.inst	0x0003a450 ; undefined
    226c:	00000000 	.inst	0x00000000 ; undefined
    2270:	0003a800 	.inst	0x0003a800 ; undefined
    2274:	00000000 	.inst	0x00000000 ; undefined
    2278:	83000300 	.inst	0x83000300 ; undefined
    227c:	03a89f01 	.inst	0x03a89f01 ; undefined
    2280:	00000000 	.inst	0x00000000 ; undefined
    2284:	03bc0000 	.inst	0x03bc0000 ; undefined
    2288:	00000000 	.inst	0x00000000 ; undefined
    228c:	00010000 	.inst	0x00010000 ; undefined
    2290:	00046463 	.inst	0x00046463 ; undefined
    2294:	00000000 	.inst	0x00000000 ; undefined
    2298:	00047c00 	.inst	0x00047c00 ; undefined
    229c:	00000000 	.inst	0x00000000 ; undefined
    22a0:	50000100 	adr	x0, 22c2 <_stack_size+0x12c2>
    22a4:	0000047c 	.inst	0x0000047c ; undefined
    22a8:	00000000 	.inst	0x00000000 ; undefined
    22ac:	00000484 	.inst	0x00000484 ; undefined
    22b0:	00000000 	.inst	0x00000000 ; undefined
    22b4:	84630001 	.inst	0x84630001 ; undefined
    22b8:	00000004 	.inst	0x00000004 ; undefined
    22bc:	90000000 	adrp	x0, 2000 <_stack_size+0x1000>
    22c0:	00000004 	.inst	0x00000004 ; undefined
    22c4:	01000000 	.inst	0x01000000 ; undefined
    22c8:	04b05000 	.inst	0x04b05000 ; undefined
    22cc:	00000000 	.inst	0x00000000 ; undefined
    22d0:	04bc0000 	.inst	0x04bc0000 ; undefined
    22d4:	00000000 	.inst	0x00000000 ; undefined
    22d8:	00010000 	.inst	0x00010000 ; undefined
    22dc:	0004e050 	.inst	0x0004e050 ; undefined
    22e0:	00000000 	.inst	0x00000000 ; undefined
    22e4:	0004ec00 	.inst	0x0004ec00 ; undefined
    22e8:	00000000 	.inst	0x00000000 ; undefined
    22ec:	50000100 	adr	x0, 230e <_stack_size+0x130e>
    22f0:	0000050c 	.inst	0x0000050c ; undefined
    22f4:	00000000 	.inst	0x00000000 ; undefined
    22f8:	00000518 	.inst	0x00000518 ; undefined
    22fc:	00000000 	.inst	0x00000000 ; undefined
    2300:	a4500001 	.inst	0xa4500001 ; undefined
    2304:	00000005 	.inst	0x00000005 ; undefined
    2308:	b0000000 	adrp	x0, 3000 <_stack_size+0x2000>
    230c:	00000005 	.inst	0x00000005 ; undefined
    2310:	01000000 	.inst	0x01000000 ; undefined
    2314:	06705000 	.inst	0x06705000 ; undefined
    2318:	00000000 	.inst	0x00000000 ; undefined
    231c:	067c0000 	.inst	0x067c0000 ; undefined
    2320:	00000000 	.inst	0x00000000 ; undefined
    2324:	00010000 	.inst	0x00010000 ; undefined
    2328:	00086850 	.inst	0x00086850 ; undefined
    232c:	00000000 	.inst	0x00000000 ; undefined
    2330:	00087400 	.inst	0x00087400 ; undefined
    2334:	00000000 	.inst	0x00000000 ; undefined
    2338:	50000100 	adr	x0, 235a <_stack_size+0x135a>
	...
    234c:	00000288 	.inst	0x00000288 ; undefined
    2350:	00000000 	.inst	0x00000000 ; undefined
    2354:	0000030c 	.inst	0x0000030c ; undefined
    2358:	00000000 	.inst	0x00000000 ; undefined
    235c:	00570001 	.inst	0x00570001 ; undefined
	...
    236c:	88000000 	stxr	w0, w0, [x0]
    2370:	00000002 	.inst	0x00000002 ; undefined
    2374:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    2378:	00000003 	.inst	0x00000003 ; undefined
    237c:	03000000 	.inst	0x03000000 ; undefined
    2380:	9f200800 	.inst	0x9f200800 ; undefined
	...
    2394:	00000288 	.inst	0x00000288 ; undefined
    2398:	00000000 	.inst	0x00000000 ; undefined
    239c:	000002cc 	.inst	0x000002cc ; undefined
    23a0:	00000000 	.inst	0x00000000 ; undefined
    23a4:	00500001 	.inst	0x00500001 ; undefined
	...
    23b4:	88000000 	stxr	w0, w0, [x0]
    23b8:	00000002 	.inst	0x00000002 ; undefined
    23bc:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    23c0:	00000003 	.inst	0x00000003 ; undefined
    23c4:	01000000 	.inst	0x01000000 ; undefined
    23c8:	00006a00 	.inst	0x00006a00 ; undefined
	...
    23d8:	02880000 	.inst	0x02880000 ; undefined
    23dc:	00000000 	.inst	0x00000000 ; undefined
    23e0:	029c0000 	.inst	0x029c0000 ; undefined
    23e4:	00000000 	.inst	0x00000000 ; undefined
    23e8:	00030000 	.inst	0x00030000 ; undefined
    23ec:	9c9f2008 	ldr	q8, fffffffffff407ec <SMC_ID_HW_RSA+0xffffffff7bf308e5>
    23f0:	00000002 	.inst	0x00000002 ; undefined
    23f4:	a4000000 	.inst	0xa4000000 ; undefined
    23f8:	00000002 	.inst	0x00000002 ; undefined
    23fc:	02000000 	.inst	0x02000000 ; undefined
    2400:	a49f4f00 	.inst	0xa49f4f00 ; undefined
    2404:	00000002 	.inst	0x00000002 ; undefined
    2408:	ac000000 	stnp	q0, q0, [x0]
    240c:	00000002 	.inst	0x00000002 ; undefined
    2410:	01000000 	.inst	0x01000000 ; undefined
    2414:	02ac5200 	.inst	0x02ac5200 ; undefined
    2418:	00000000 	.inst	0x00000000 ; undefined
    241c:	02b00000 	.inst	0x02b00000 ; undefined
    2420:	00000000 	.inst	0x00000000 ; undefined
    2424:	00030000 	.inst	0x00030000 ; undefined
    2428:	b09f0172 	adrp	x18, ffffffff3e02f000 <SMC_ID_HW_RSA+0xfffffffeba01f0f9>
    242c:	00000002 	.inst	0x00000002 ; undefined
    2430:	d0000000 	adrp	x0, 4000 <_stack_size+0x3000>
    2434:	00000002 	.inst	0x00000002 ; undefined
    2438:	01000000 	.inst	0x01000000 ; undefined
    243c:	02d05200 	.inst	0x02d05200 ; undefined
    2440:	00000000 	.inst	0x00000000 ; undefined
    2444:	02f00000 	.inst	0x02f00000 ; undefined
    2448:	00000000 	.inst	0x00000000 ; undefined
    244c:	00010000 	.inst	0x00010000 ; undefined
    2450:	00000053 	.inst	0x00000053 ; undefined
	...
    2460:	00029c00 	.inst	0x00029c00 ; undefined
    2464:	00000000 	.inst	0x00000000 ; undefined
    2468:	00030c00 	.inst	0x00030c00 ; undefined
    246c:	00000000 	.inst	0x00000000 ; undefined
    2470:	58000100 	ldr	x0, 2490 <_stack_size+0x1490>
	...
    2484:	000002a8 	.inst	0x000002a8 ; undefined
    2488:	00000000 	.inst	0x00000000 ; undefined
    248c:	000002c0 	.inst	0x000002c0 ; undefined
    2490:	00000000 	.inst	0x00000000 ; undefined
    2494:	00510001 	.inst	0x00510001 ; undefined
	...
    24a4:	10000000 	adr	x0, 24a4 <_stack_size+0x14a4>
    24a8:	00000003 	.inst	0x00000003 ; undefined
    24ac:	3c000000 	stur	b0, [x0]
    24b0:	00000003 	.inst	0x00000003 ; undefined
    24b4:	02000000 	.inst	0x02000000 ; undefined
    24b8:	3c9f3000 	stur	q0, [x0,#-13]
    24bc:	00000003 	.inst	0x00000003 ; undefined
    24c0:	5c000000 	ldr	d0, 24c0 <_stack_size+0x14c0>
    24c4:	00000003 	.inst	0x00000003 ; undefined
    24c8:	01000000 	.inst	0x01000000 ; undefined
    24cc:	07685300 	.inst	0x07685300 ; undefined
    24d0:	00000000 	.inst	0x00000000 ; undefined
    24d4:	07780000 	.inst	0x07780000 ; undefined
    24d8:	00000000 	.inst	0x00000000 ; undefined
    24dc:	00020000 	.inst	0x00020000 ; undefined
    24e0:	00009f30 	.inst	0x00009f30 ; undefined
	...
    24f0:	042c0000 	.inst	0x042c0000 ; undefined
    24f4:	00000000 	.inst	0x00000000 ; undefined
    24f8:	04bc0000 	.inst	0x04bc0000 ; undefined
    24fc:	00000000 	.inst	0x00000000 ; undefined
    2500:	00010000 	.inst	0x00010000 ; undefined
    2504:	0007f453 	.inst	0x0007f453 ; undefined
    2508:	00000000 	.inst	0x00000000 ; undefined
    250c:	0007fc00 	.inst	0x0007fc00 ; undefined
    2510:	00000000 	.inst	0x00000000 ; undefined
    2514:	53000100 	ubfx	w0, w8, #0, #1
	...
    2528:	00000448 	.inst	0x00000448 ; undefined
    252c:	00000000 	.inst	0x00000000 ; undefined
    2530:	000004bc 	.inst	0x000004bc ; undefined
    2534:	00000000 	.inst	0x00000000 ; undefined
    2538:	f4520001 	.inst	0xf4520001 ; undefined
    253c:	00000007 	.inst	0x00000007 ; undefined
    2540:	fc000000 	stur	d0, [x0]
    2544:	00000007 	.inst	0x00000007 ; undefined
    2548:	01000000 	.inst	0x01000000 ; undefined
    254c:	00005200 	.inst	0x00005200 ; undefined
	...
    255c:	09ac0000 	.inst	0x09ac0000 ; undefined
    2560:	00000000 	.inst	0x00000000 ; undefined
    2564:	09fc0000 	.inst	0x09fc0000 ; undefined
    2568:	00000000 	.inst	0x00000000 ; undefined
    256c:	00010000 	.inst	0x00010000 ; undefined
    2570:	0009fc50 	.inst	0x0009fc50 ; undefined
    2574:	00000000 	.inst	0x00000000 ; undefined
    2578:	000a5f00 	.inst	0x000a5f00 ; undefined
    257c:	00000000 	.inst	0x00000000 ; undefined
    2580:	52000100 	eor	w0, w8, #0x1
    2584:	00000a5f 	.inst	0x00000a5f ; undefined
    2588:	00000000 	.inst	0x00000000 ; undefined
    258c:	00000a7c 	.inst	0x00000a7c ; undefined
    2590:	00000000 	.inst	0x00000000 ; undefined
    2594:	01f30004 	.inst	0x01f30004 ; undefined
    2598:	00009f50 	.inst	0x00009f50 ; undefined
	...
    25a8:	09e40000 	.inst	0x09e40000 ; undefined
    25ac:	00000000 	.inst	0x00000000 ; undefined
    25b0:	09fc0000 	.inst	0x09fc0000 ; undefined
    25b4:	00000000 	.inst	0x00000000 ; undefined
    25b8:	00010000 	.inst	0x00010000 ; undefined
    25bc:	0009fc50 	.inst	0x0009fc50 ; undefined
    25c0:	00000000 	.inst	0x00000000 ; undefined
    25c4:	000a5f00 	.inst	0x000a5f00 ; undefined
    25c8:	00000000 	.inst	0x00000000 ; undefined
    25cc:	52000100 	eor	w0, w8, #0x1
    25d0:	00000a5f 	.inst	0x00000a5f ; undefined
    25d4:	00000000 	.inst	0x00000000 ; undefined
    25d8:	00000a7c 	.inst	0x00000a7c ; undefined
    25dc:	00000000 	.inst	0x00000000 ; undefined
    25e0:	01f30004 	.inst	0x01f30004 ; undefined
    25e4:	00009f50 	.inst	0x00009f50 ; undefined
	...
    25f4:	0a640000 	bic	w0, w0, w4, lsr #0
    25f8:	00000000 	.inst	0x00000000 ; undefined
    25fc:	0a680000 	bic	w0, w0, w8, lsr #0
    2600:	00000000 	.inst	0x00000000 ; undefined
    2604:	00010000 	.inst	0x00010000 ; undefined
    2608:	000a6850 	.inst	0x000a6850 ; undefined
    260c:	00000000 	.inst	0x00000000 ; undefined
    2610:	000a7400 	.inst	0x000a7400 ; undefined
    2614:	00000000 	.inst	0x00000000 ; undefined
    2618:	63000100 	.inst	0x63000100 ; undefined
    261c:	00000a74 	.inst	0x00000a74 ; undefined
    2620:	00000000 	.inst	0x00000000 ; undefined
    2624:	00000a7c 	.inst	0x00000a7c ; undefined
    2628:	00000000 	.inst	0x00000000 ; undefined
    262c:	00500001 	.inst	0x00500001 ; undefined
	...
    263c:	7c000000 	stur	h0, [x0]
    2640:	0000000a 	.inst	0x0000000a ; undefined
    2644:	f3000000 	.inst	0xf3000000 ; undefined
    2648:	0000000a 	.inst	0x0000000a ; undefined
    264c:	01000000 	.inst	0x01000000 ; undefined
    2650:	0af35000 	bic	w0, w0, w19, ror #20
    2654:	00000000 	.inst	0x00000000 ; undefined
    2658:	0b000000 	add	w0, w0, w0
    265c:	00000000 	.inst	0x00000000 ; undefined
    2660:	00040000 	.inst	0x00040000 ; undefined
    2664:	9f5001f3 	.inst	0x9f5001f3 ; undefined
	...
    2678:	00000a7c 	.inst	0x00000a7c ; undefined
    267c:	00000000 	.inst	0x00000000 ; undefined
    2680:	00000af3 	.inst	0x00000af3 ; undefined
    2684:	00000000 	.inst	0x00000000 ; undefined
    2688:	f3510001 	.inst	0xf3510001 ; undefined
    268c:	0000000a 	.inst	0x0000000a ; undefined
    2690:	00000000 	.inst	0x00000000 ; undefined
    2694:	0000000b 	.inst	0x0000000b ; undefined
    2698:	04000000 	.inst	0x04000000 ; undefined
    269c:	5101f300 	sub	w0, w24, #0x7c
    26a0:	0000009f 	.inst	0x0000009f ; undefined
	...
    26b0:	000a7c00 	.inst	0x000a7c00 ; undefined
    26b4:	00000000 	.inst	0x00000000 ; undefined
    26b8:	000af300 	.inst	0x000af300 ; undefined
    26bc:	00000000 	.inst	0x00000000 ; undefined
    26c0:	52000100 	eor	w0, w8, #0x1
    26c4:	00000af3 	.inst	0x00000af3 ; undefined
    26c8:	00000000 	.inst	0x00000000 ; undefined
    26cc:	00000b00 	.inst	0x00000b00 ; undefined
    26d0:	00000000 	.inst	0x00000000 ; undefined
    26d4:	01f30004 	.inst	0x01f30004 ; undefined
    26d8:	00009f52 	.inst	0x00009f52 ; undefined
	...
    26e8:	0b000000 	add	w0, w0, w0
    26ec:	00000000 	.inst	0x00000000 ; undefined
    26f0:	0b270000 	add	w0, w0, w7, uxtb
    26f4:	00000000 	.inst	0x00000000 ; undefined
    26f8:	00010000 	.inst	0x00010000 ; undefined
    26fc:	000b2750 	.inst	0x000b2750 ; undefined
    2700:	00000000 	.inst	0x00000000 ; undefined
    2704:	000b3000 	.inst	0x000b3000 ; undefined
    2708:	00000000 	.inst	0x00000000 ; undefined
    270c:	f3000400 	.inst	0xf3000400 ; undefined
    2710:	009f5001 	.inst	0x009f5001 ; undefined
	...
    2724:	0000000b 	.inst	0x0000000b ; undefined
    2728:	10000000 	adr	x0, 2728 <_stack_size+0x1728>
    272c:	0000000b 	.inst	0x0000000b ; undefined
    2730:	01000000 	.inst	0x01000000 ; undefined
    2734:	0b105100 	add	w0, w8, w16, lsl #20
    2738:	00000000 	.inst	0x00000000 ; undefined
    273c:	0b270000 	add	w0, w0, w7, uxtb
    2740:	00000000 	.inst	0x00000000 ; undefined
    2744:	00010000 	.inst	0x00010000 ; undefined
    2748:	000b2752 	.inst	0x000b2752 ; undefined
    274c:	00000000 	.inst	0x00000000 ; undefined
    2750:	000b3000 	.inst	0x000b3000 ; undefined
    2754:	00000000 	.inst	0x00000000 ; undefined
    2758:	f3000400 	.inst	0xf3000400 ; undefined
    275c:	009f5101 	.inst	0x009f5101 ; undefined
	...
    276c:	30000000 	adr	x0, 276d <_stack_size+0x176d>
    2770:	0000000b 	.inst	0x0000000b ; undefined
    2774:	bb000000 	.inst	0xbb000000 ; undefined
    2778:	0000000b 	.inst	0x0000000b ; undefined
    277c:	01000000 	.inst	0x01000000 ; undefined
    2780:	0bbb5000 	.inst	0x0bbb5000 ; undefined
    2784:	00000000 	.inst	0x00000000 ; undefined
    2788:	0bc80000 	.inst	0x0bc80000 ; undefined
    278c:	00000000 	.inst	0x00000000 ; undefined
    2790:	00040000 	.inst	0x00040000 ; undefined
    2794:	9f5001f3 	.inst	0x9f5001f3 ; undefined
	...
    27a8:	00000b30 	.inst	0x00000b30 ; undefined
    27ac:	00000000 	.inst	0x00000000 ; undefined
    27b0:	00000b7c 	.inst	0x00000b7c ; undefined
    27b4:	00000000 	.inst	0x00000000 ; undefined
    27b8:	7c510001 	ldur	h1, [x0,#-240]
    27bc:	0000000b 	.inst	0x0000000b ; undefined
    27c0:	bb000000 	.inst	0xbb000000 ; undefined
    27c4:	0000000b 	.inst	0x0000000b ; undefined
    27c8:	01000000 	.inst	0x01000000 ; undefined
    27cc:	0bbb5200 	.inst	0x0bbb5200 ; undefined
    27d0:	00000000 	.inst	0x00000000 ; undefined
    27d4:	0bc80000 	.inst	0x0bc80000 ; undefined
    27d8:	00000000 	.inst	0x00000000 ; undefined
    27dc:	00040000 	.inst	0x00040000 ; undefined
    27e0:	9f5101f3 	.inst	0x9f5101f3 ; undefined
	...
    27f4:	00000b5c 	.inst	0x00000b5c ; undefined
    27f8:	00000000 	.inst	0x00000000 ; undefined
    27fc:	00000b7c 	.inst	0x00000b7c ; undefined
    2800:	00000000 	.inst	0x00000000 ; undefined
    2804:	7c510001 	ldur	h1, [x0,#-240]
    2808:	0000000b 	.inst	0x0000000b ; undefined
    280c:	bb000000 	.inst	0xbb000000 ; undefined
    2810:	0000000b 	.inst	0x0000000b ; undefined
    2814:	01000000 	.inst	0x01000000 ; undefined
    2818:	0bbb5200 	.inst	0x0bbb5200 ; undefined
    281c:	00000000 	.inst	0x00000000 ; undefined
    2820:	0bc80000 	.inst	0x0bc80000 ; undefined
    2824:	00000000 	.inst	0x00000000 ; undefined
    2828:	00040000 	.inst	0x00040000 ; undefined
    282c:	9f5101f3 	.inst	0x9f5101f3 ; undefined
	...
    2840:	00000b5c 	.inst	0x00000b5c ; undefined
    2844:	00000000 	.inst	0x00000000 ; undefined
    2848:	00000bbb 	.inst	0x00000bbb ; undefined
    284c:	00000000 	.inst	0x00000000 ; undefined
    2850:	bb500001 	.inst	0xbb500001 ; undefined
    2854:	0000000b 	.inst	0x0000000b ; undefined
    2858:	c8000000 	stxr	w0, x0, [x0]
    285c:	0000000b 	.inst	0x0000000b ; undefined
    2860:	04000000 	.inst	0x04000000 ; undefined
    2864:	5001f300 	adr	x0, 66c6 <_stack_size+0x56c6>
    2868:	0000009f 	.inst	0x0000009f ; undefined
	...
    2880:	00002400 	.inst	0x00002400 ; undefined
    2884:	00000000 	.inst	0x00000000 ; undefined
    2888:	50000100 	adr	x0, 28aa <_stack_size+0x18aa>
    288c:	00000024 	.inst	0x00000024 ; undefined
    2890:	00000000 	.inst	0x00000000 ; undefined
    2894:	00000074 	.inst	0x00000074 ; undefined
    2898:	00000000 	.inst	0x00000000 ; undefined
    289c:	74640001 	.inst	0x74640001 ; undefined
    28a0:	00000000 	.inst	0x00000000 ; undefined
    28a4:	78000000 	sturh	w0, [x0]
    28a8:	00000000 	.inst	0x00000000 ; undefined
    28ac:	04000000 	.inst	0x04000000 ; undefined
    28b0:	5001f300 	adr	x0, 6712 <_stack_size+0x5712>
    28b4:	0000789f 	.inst	0x0000789f ; undefined
    28b8:	00000000 	.inst	0x00000000 ; undefined
    28bc:	0000c800 	.inst	0x0000c800 ; undefined
    28c0:	00000000 	.inst	0x00000000 ; undefined
    28c4:	64000100 	.inst	0x64000100 ; undefined
    28c8:	000000c8 	.inst	0x000000c8 ; undefined
    28cc:	00000000 	.inst	0x00000000 ; undefined
    28d0:	000000cc 	.inst	0x000000cc ; undefined
    28d4:	00000000 	.inst	0x00000000 ; undefined
    28d8:	01f30004 	.inst	0x01f30004 ; undefined
    28dc:	00cc9f50 	.inst	0x00cc9f50 ; undefined
    28e0:	00000000 	.inst	0x00000000 ; undefined
    28e4:	00d00000 	.inst	0x00d00000 ; undefined
    28e8:	00000000 	.inst	0x00000000 ; undefined
    28ec:	00010000 	.inst	0x00010000 ; undefined
    28f0:	00000064 	.inst	0x00000064 ; undefined
	...
    2908:	00003400 	.inst	0x00003400 ; undefined
    290c:	00000000 	.inst	0x00000000 ; undefined
    2910:	51000100 	sub	w0, w8, #0x0
    2914:	00000034 	.inst	0x00000034 ; undefined
    2918:	00000000 	.inst	0x00000000 ; undefined
    291c:	00000060 	.inst	0x00000060 ; undefined
    2920:	00000000 	.inst	0x00000000 ; undefined
    2924:	60650001 	.inst	0x60650001 ; undefined
    2928:	00000000 	.inst	0x00000000 ; undefined
    292c:	78000000 	sturh	w0, [x0]
    2930:	00000000 	.inst	0x00000000 ; undefined
    2934:	04000000 	.inst	0x04000000 ; undefined
    2938:	5101f300 	sub	w0, w24, #0x7c
    293c:	0000789f 	.inst	0x0000789f ; undefined
    2940:	00000000 	.inst	0x00000000 ; undefined
    2944:	0000c400 	.inst	0x0000c400 ; undefined
    2948:	00000000 	.inst	0x00000000 ; undefined
    294c:	65000100 	.inst	0x65000100 ; undefined
    2950:	000000c4 	.inst	0x000000c4 ; undefined
    2954:	00000000 	.inst	0x00000000 ; undefined
    2958:	000000d0 	.inst	0x000000d0 ; undefined
    295c:	00000000 	.inst	0x00000000 ; undefined
    2960:	01f30004 	.inst	0x01f30004 ; undefined
    2964:	00009f51 	.inst	0x00009f51 ; undefined
	...
    297c:	00340000 	.inst	0x00340000 ; NYI
    2980:	00000000 	.inst	0x00000000 ; undefined
    2984:	00010000 	.inst	0x00010000 ; undefined
    2988:	00003452 	.inst	0x00003452 ; undefined
    298c:	00000000 	.inst	0x00000000 ; undefined
    2990:	00006c00 	.inst	0x00006c00 ; undefined
    2994:	00000000 	.inst	0x00000000 ; undefined
    2998:	66000100 	.inst	0x66000100 ; undefined
    299c:	0000006c 	.inst	0x0000006c ; undefined
    29a0:	00000000 	.inst	0x00000000 ; undefined
    29a4:	00000078 	.inst	0x00000078 ; undefined
    29a8:	00000000 	.inst	0x00000000 ; undefined
    29ac:	01f30004 	.inst	0x01f30004 ; undefined
    29b0:	00789f52 	.inst	0x00789f52 ; undefined
    29b4:	00000000 	.inst	0x00000000 ; undefined
    29b8:	00c40000 	.inst	0x00c40000 ; undefined
    29bc:	00000000 	.inst	0x00000000 ; undefined
    29c0:	00010000 	.inst	0x00010000 ; undefined
    29c4:	0000c466 	.inst	0x0000c466 ; undefined
    29c8:	00000000 	.inst	0x00000000 ; undefined
    29cc:	0000cc00 	.inst	0x0000cc00 ; undefined
    29d0:	00000000 	.inst	0x00000000 ; undefined
    29d4:	f3000400 	.inst	0xf3000400 ; undefined
    29d8:	cc9f5201 	.inst	0xcc9f5201 ; undefined
    29dc:	00000000 	.inst	0x00000000 ; undefined
    29e0:	d0000000 	adrp	x0, 4000 <_stack_size+0x3000>
    29e4:	00000000 	.inst	0x00000000 ; undefined
    29e8:	01000000 	.inst	0x01000000 ; undefined
    29ec:	00006600 	.inst	0x00006600 ; undefined
	...
    2a04:	00340000 	.inst	0x00340000 ; NYI
    2a08:	00000000 	.inst	0x00000000 ; undefined
    2a0c:	00020000 	.inst	0x00020000 ; undefined
    2a10:	00349f30 	.inst	0x00349f30 ; NYI
    2a14:	00000000 	.inst	0x00000000 ; undefined
    2a18:	00380000 	.inst	0x00380000 ; NYI
    2a1c:	00000000 	.inst	0x00000000 ; undefined
    2a20:	00090000 	.inst	0x00090000 ; undefined
    2a24:	2dc6c30c 	ldp	s12, s16, [x24,#52]!
    2a28:	1c008300 	ldr	s0, 3a88 <_stack_size+0x2a88>
    2a2c:	0000389f 	.inst	0x0000389f ; undefined
    2a30:	00000000 	.inst	0x00000000 ; undefined
    2a34:	00005800 	.inst	0x00005800 ; undefined
    2a38:	00000000 	.inst	0x00000000 ; undefined
    2a3c:	0c000900 	st4	{v0.2s-v3.2s}, [x8]
    2a40:	002dc6c2 	.inst	0x002dc6c2 ; NYI
    2a44:	9f1c0083 	.inst	0x9f1c0083 ; undefined
    2a48:	00000078 	.inst	0x00000078 ; undefined
    2a4c:	00000000 	.inst	0x00000000 ; undefined
    2a50:	00000084 	.inst	0x00000084 ; undefined
    2a54:	00000000 	.inst	0x00000000 ; undefined
    2a58:	c20c0009 	.inst	0xc20c0009 ; undefined
    2a5c:	83002dc6 	.inst	0x83002dc6 ; undefined
    2a60:	009f1c00 	.inst	0x009f1c00 ; undefined
	...
    2a70:	78000000 	sturh	w0, [x0]
    2a74:	00000000 	.inst	0x00000000 ; undefined
    2a78:	c4000000 	.inst	0xc4000000 ; undefined
    2a7c:	00000000 	.inst	0x00000000 ; undefined
    2a80:	01000000 	.inst	0x01000000 ; undefined
    2a84:	00c46600 	.inst	0x00c46600 ; undefined
    2a88:	00000000 	.inst	0x00000000 ; undefined
    2a8c:	00cc0000 	.inst	0x00cc0000 ; undefined
    2a90:	00000000 	.inst	0x00000000 ; undefined
    2a94:	00040000 	.inst	0x00040000 ; undefined
    2a98:	9f5201f3 	.inst	0x9f5201f3 ; undefined
	...
    2aac:	00000078 	.inst	0x00000078 ; undefined
    2ab0:	00000000 	.inst	0x00000000 ; undefined
    2ab4:	000000c4 	.inst	0x000000c4 ; undefined
    2ab8:	00000000 	.inst	0x00000000 ; undefined
    2abc:	c4650001 	.inst	0xc4650001 ; undefined
    2ac0:	00000000 	.inst	0x00000000 ; undefined
    2ac4:	cc000000 	.inst	0xcc000000 ; undefined
    2ac8:	00000000 	.inst	0x00000000 ; undefined
    2acc:	04000000 	.inst	0x04000000 ; undefined
    2ad0:	5101f300 	sub	w0, w24, #0x7c
    2ad4:	0000009f 	.inst	0x0000009f ; undefined
	...
    2ae4:	00007800 	.inst	0x00007800 ; undefined
    2ae8:	00000000 	.inst	0x00000000 ; undefined
    2aec:	0000c800 	.inst	0x0000c800 ; undefined
    2af0:	00000000 	.inst	0x00000000 ; undefined
    2af4:	64000100 	.inst	0x64000100 ; undefined
    2af8:	000000c8 	.inst	0x000000c8 ; undefined
    2afc:	00000000 	.inst	0x00000000 ; undefined
    2b00:	000000cc 	.inst	0x000000cc ; undefined
    2b04:	00000000 	.inst	0x00000000 ; undefined
    2b08:	01f30004 	.inst	0x01f30004 ; undefined
    2b0c:	00009f50 	.inst	0x00009f50 ; undefined
	...
    2b1c:	00e00000 	.inst	0x00e00000 ; undefined
    2b20:	00000000 	.inst	0x00000000 ; undefined
    2b24:	013c0000 	.inst	0x013c0000 ; undefined
    2b28:	00000000 	.inst	0x00000000 ; undefined
    2b2c:	00010000 	.inst	0x00010000 ; undefined
    2b30:	00014063 	.inst	0x00014063 ; undefined
    2b34:	00000000 	.inst	0x00000000 ; undefined
    2b38:	00015400 	.inst	0x00015400 ; undefined
    2b3c:	00000000 	.inst	0x00000000 ; undefined
    2b40:	63000100 	.inst	0x63000100 ; undefined
    2b44:	00000158 	.inst	0x00000158 ; undefined
    2b48:	00000000 	.inst	0x00000000 ; undefined
    2b4c:	0000016c 	.inst	0x0000016c ; undefined
    2b50:	00000000 	.inst	0x00000000 ; undefined
    2b54:	70630001 	adr	x1, c8b57 <_stack_size+0xc7b57>
    2b58:	00000001 	.inst	0x00000001 ; undefined
    2b5c:	e8000000 	.inst	0xe8000000 ; undefined
    2b60:	00000001 	.inst	0x00000001 ; undefined
    2b64:	01000000 	.inst	0x01000000 ; undefined
    2b68:	00006300 	.inst	0x00006300 ; undefined
	...
    2b78:	01fc0000 	.inst	0x01fc0000 ; undefined
    2b7c:	00000000 	.inst	0x00000000 ; undefined
    2b80:	02330000 	.inst	0x02330000 ; undefined
    2b84:	00000000 	.inst	0x00000000 ; undefined
    2b88:	00010000 	.inst	0x00010000 ; undefined
    2b8c:	00023350 	.inst	0x00023350 ; undefined
    2b90:	00000000 	.inst	0x00000000 ; undefined
    2b94:	0002bc00 	.inst	0x0002bc00 ; undefined
    2b98:	00000000 	.inst	0x00000000 ; undefined
    2b9c:	67000100 	.inst	0x67000100 ; undefined
    2ba0:	000002bc 	.inst	0x000002bc ; undefined
    2ba4:	00000000 	.inst	0x00000000 ; undefined
    2ba8:	000002c4 	.inst	0x000002c4 ; undefined
    2bac:	00000000 	.inst	0x00000000 ; undefined
    2bb0:	01f30004 	.inst	0x01f30004 ; undefined
    2bb4:	00009f50 	.inst	0x00009f50 ; undefined
	...
    2bc4:	01fc0000 	.inst	0x01fc0000 ; undefined
    2bc8:	00000000 	.inst	0x00000000 ; undefined
    2bcc:	02330000 	.inst	0x02330000 ; undefined
    2bd0:	00000000 	.inst	0x00000000 ; undefined
    2bd4:	00010000 	.inst	0x00010000 ; undefined
    2bd8:	00023351 	.inst	0x00023351 ; undefined
    2bdc:	00000000 	.inst	0x00000000 ; undefined
    2be0:	0002bc00 	.inst	0x0002bc00 ; undefined
    2be4:	00000000 	.inst	0x00000000 ; undefined
    2be8:	68000100 	.inst	0x68000100 ; undefined
    2bec:	000002bc 	.inst	0x000002bc ; undefined
    2bf0:	00000000 	.inst	0x00000000 ; undefined
    2bf4:	000002c4 	.inst	0x000002c4 ; undefined
    2bf8:	00000000 	.inst	0x00000000 ; undefined
    2bfc:	01f30004 	.inst	0x01f30004 ; undefined
    2c00:	00009f51 	.inst	0x00009f51 ; undefined
	...
    2c10:	01fc0000 	.inst	0x01fc0000 ; undefined
    2c14:	00000000 	.inst	0x00000000 ; undefined
    2c18:	02330000 	.inst	0x02330000 ; undefined
    2c1c:	00000000 	.inst	0x00000000 ; undefined
    2c20:	00010000 	.inst	0x00010000 ; undefined
    2c24:	00023352 	.inst	0x00023352 ; undefined
    2c28:	00000000 	.inst	0x00000000 ; undefined
    2c2c:	00027000 	.inst	0x00027000 ; undefined
    2c30:	00000000 	.inst	0x00000000 ; undefined
    2c34:	63000100 	.inst	0x63000100 ; undefined
    2c38:	00000270 	.inst	0x00000270 ; undefined
    2c3c:	00000000 	.inst	0x00000000 ; undefined
    2c40:	000002c4 	.inst	0x000002c4 ; undefined
    2c44:	00000000 	.inst	0x00000000 ; undefined
    2c48:	01f30004 	.inst	0x01f30004 ; undefined
    2c4c:	00009f52 	.inst	0x00009f52 ; undefined
	...
    2c5c:	01fc0000 	.inst	0x01fc0000 ; undefined
    2c60:	00000000 	.inst	0x00000000 ; undefined
    2c64:	02330000 	.inst	0x02330000 ; undefined
    2c68:	00000000 	.inst	0x00000000 ; undefined
    2c6c:	00010000 	.inst	0x00010000 ; undefined
    2c70:	00023353 	.inst	0x00023353 ; undefined
    2c74:	00000000 	.inst	0x00000000 ; undefined
    2c78:	00026000 	.inst	0x00026000 ; undefined
    2c7c:	00000000 	.inst	0x00000000 ; undefined
    2c80:	64000100 	.inst	0x64000100 ; undefined
    2c84:	00000260 	.inst	0x00000260 ; undefined
    2c88:	00000000 	.inst	0x00000000 ; undefined
    2c8c:	000002c4 	.inst	0x000002c4 ; undefined
    2c90:	00000000 	.inst	0x00000000 ; undefined
    2c94:	01f30004 	.inst	0x01f30004 ; undefined
    2c98:	00009f53 	.inst	0x00009f53 ; undefined
	...
    2ca8:	02c40000 	.inst	0x02c40000 ; undefined
    2cac:	00000000 	.inst	0x00000000 ; undefined
    2cb0:	02fb0000 	.inst	0x02fb0000 ; undefined
    2cb4:	00000000 	.inst	0x00000000 ; undefined
    2cb8:	00010000 	.inst	0x00010000 ; undefined
    2cbc:	0002fb50 	.inst	0x0002fb50 ; undefined
    2cc0:	00000000 	.inst	0x00000000 ; undefined
    2cc4:	0003a000 	.inst	0x0003a000 ; undefined
    2cc8:	00000000 	.inst	0x00000000 ; undefined
    2ccc:	67000100 	.inst	0x67000100 ; undefined
    2cd0:	000003a0 	.inst	0x000003a0 ; undefined
    2cd4:	00000000 	.inst	0x00000000 ; undefined
    2cd8:	000003ac 	.inst	0x000003ac ; undefined
    2cdc:	00000000 	.inst	0x00000000 ; undefined
    2ce0:	01f30004 	.inst	0x01f30004 ; undefined
    2ce4:	00009f50 	.inst	0x00009f50 ; undefined
	...
    2cf4:	02c40000 	.inst	0x02c40000 ; undefined
    2cf8:	00000000 	.inst	0x00000000 ; undefined
    2cfc:	02fb0000 	.inst	0x02fb0000 ; undefined
    2d00:	00000000 	.inst	0x00000000 ; undefined
    2d04:	00010000 	.inst	0x00010000 ; undefined
    2d08:	0002fb51 	.inst	0x0002fb51 ; undefined
    2d0c:	00000000 	.inst	0x00000000 ; undefined
    2d10:	0003a000 	.inst	0x0003a000 ; undefined
    2d14:	00000000 	.inst	0x00000000 ; undefined
    2d18:	68000100 	.inst	0x68000100 ; undefined
    2d1c:	000003a0 	.inst	0x000003a0 ; undefined
    2d20:	00000000 	.inst	0x00000000 ; undefined
    2d24:	000003ac 	.inst	0x000003ac ; undefined
    2d28:	00000000 	.inst	0x00000000 ; undefined
    2d2c:	01f30004 	.inst	0x01f30004 ; undefined
    2d30:	00009f51 	.inst	0x00009f51 ; undefined
	...
    2d40:	02c40000 	.inst	0x02c40000 ; undefined
    2d44:	00000000 	.inst	0x00000000 ; undefined
    2d48:	02fb0000 	.inst	0x02fb0000 ; undefined
    2d4c:	00000000 	.inst	0x00000000 ; undefined
    2d50:	00010000 	.inst	0x00010000 ; undefined
    2d54:	0002fb52 	.inst	0x0002fb52 ; undefined
    2d58:	00000000 	.inst	0x00000000 ; undefined
    2d5c:	00033800 	.inst	0x00033800 ; undefined
    2d60:	00000000 	.inst	0x00000000 ; undefined
    2d64:	63000100 	.inst	0x63000100 ; undefined
    2d68:	00000338 	.inst	0x00000338 ; undefined
    2d6c:	00000000 	.inst	0x00000000 ; undefined
    2d70:	000003ac 	.inst	0x000003ac ; undefined
    2d74:	00000000 	.inst	0x00000000 ; undefined
    2d78:	01f30004 	.inst	0x01f30004 ; undefined
    2d7c:	00009f52 	.inst	0x00009f52 ; undefined
	...
    2d8c:	02c40000 	.inst	0x02c40000 ; undefined
    2d90:	00000000 	.inst	0x00000000 ; undefined
    2d94:	02fb0000 	.inst	0x02fb0000 ; undefined
    2d98:	00000000 	.inst	0x00000000 ; undefined
    2d9c:	00010000 	.inst	0x00010000 ; undefined
    2da0:	0002fb53 	.inst	0x0002fb53 ; undefined
    2da4:	00000000 	.inst	0x00000000 ; undefined
    2da8:	00032800 	.inst	0x00032800 ; undefined
    2dac:	00000000 	.inst	0x00000000 ; undefined
    2db0:	64000100 	.inst	0x64000100 ; undefined
    2db4:	00000328 	.inst	0x00000328 ; undefined
    2db8:	00000000 	.inst	0x00000000 ; undefined
    2dbc:	000003ac 	.inst	0x000003ac ; undefined
    2dc0:	00000000 	.inst	0x00000000 ; undefined
    2dc4:	01f30004 	.inst	0x01f30004 ; undefined
    2dc8:	00009f53 	.inst	0x00009f53 ; undefined
	...
    2dd8:	02c40000 	.inst	0x02c40000 ; undefined
    2ddc:	00000000 	.inst	0x00000000 ; undefined
    2de0:	03780000 	.inst	0x03780000 ; undefined
    2de4:	00000000 	.inst	0x00000000 ; undefined
    2de8:	00020000 	.inst	0x00020000 ; undefined
    2dec:	03789f30 	.inst	0x03789f30 ; undefined
    2df0:	00000000 	.inst	0x00000000 ; undefined
    2df4:	03930000 	.inst	0x03930000 ; undefined
    2df8:	00000000 	.inst	0x00000000 ; undefined
    2dfc:	00010000 	.inst	0x00010000 ; undefined
    2e00:	00039350 	.inst	0x00039350 ; undefined
    2e04:	00000000 	.inst	0x00000000 ; undefined
    2e08:	00039800 	.inst	0x00039800 ; undefined
    2e0c:	00000000 	.inst	0x00000000 ; undefined
    2e10:	91000200 	add	x0, x16, #0x0
    2e14:	0000007c 	.inst	0x0000007c ; undefined
	...
    2e24:	0003ac00 	.inst	0x0003ac00 ; undefined
    2e28:	00000000 	.inst	0x00000000 ; undefined
    2e2c:	0003c000 	.inst	0x0003c000 ; undefined
    2e30:	00000000 	.inst	0x00000000 ; undefined
    2e34:	50000100 	adr	x0, 2e56 <_stack_size+0x1e56>
    2e38:	000003c0 	.inst	0x000003c0 ; undefined
    2e3c:	00000000 	.inst	0x00000000 ; undefined
    2e40:	000003d8 	.inst	0x000003d8 ; undefined
    2e44:	00000000 	.inst	0x00000000 ; undefined
    2e48:	00520001 	.inst	0x00520001 ; undefined
	...
    2e58:	d8000000 	prfm	pldl1keep, 2e58 <_stack_size+0x1e58>
    2e5c:	00000003 	.inst	0x00000003 ; undefined
    2e60:	fc000000 	stur	d0, [x0]
    2e64:	00000003 	.inst	0x00000003 ; undefined
    2e68:	01000000 	.inst	0x01000000 ; undefined
    2e6c:	03fc5000 	.inst	0x03fc5000 ; undefined
    2e70:	00000000 	.inst	0x00000000 ; undefined
    2e74:	047c0000 	.inst	0x047c0000 ; undefined
    2e78:	00000000 	.inst	0x00000000 ; undefined
    2e7c:	00010000 	.inst	0x00010000 ; undefined
    2e80:	00000064 	.inst	0x00000064 ; undefined
	...
    2e90:	0003d800 	.inst	0x0003d800 ; undefined
    2e94:	00000000 	.inst	0x00000000 ; undefined
    2e98:	0003f800 	.inst	0x0003f800 ; undefined
    2e9c:	00000000 	.inst	0x00000000 ; undefined
    2ea0:	51000100 	sub	w0, w8, #0x0
    2ea4:	000003f8 	.inst	0x000003f8 ; undefined
    2ea8:	00000000 	.inst	0x00000000 ; undefined
    2eac:	00000484 	.inst	0x00000484 ; undefined
    2eb0:	00000000 	.inst	0x00000000 ; undefined
    2eb4:	01f30004 	.inst	0x01f30004 ; undefined
    2eb8:	00009f51 	.inst	0x00009f51 ; undefined
	...
    2ec8:	03ec0000 	.inst	0x03ec0000 ; undefined
    2ecc:	00000000 	.inst	0x00000000 ; undefined
    2ed0:	04300000 	.inst	0x04300000 ; undefined
    2ed4:	00000000 	.inst	0x00000000 ; undefined
    2ed8:	00010000 	.inst	0x00010000 ; undefined
    2edc:	00043063 	.inst	0x00043063 ; undefined
    2ee0:	00000000 	.inst	0x00000000 ; undefined
    2ee4:	00043c00 	.inst	0x00043c00 ; undefined
    2ee8:	00000000 	.inst	0x00000000 ; undefined
    2eec:	83000300 	.inst	0x83000300 ; undefined
    2ef0:	043c9f70 	.inst	0x043c9f70 ; undefined
    2ef4:	00000000 	.inst	0x00000000 ; undefined
    2ef8:	047c0000 	.inst	0x047c0000 ; undefined
    2efc:	00000000 	.inst	0x00000000 ; undefined
    2f00:	00010000 	.inst	0x00010000 ; undefined
    2f04:	00000063 	.inst	0x00000063 ; undefined
	...
    2f14:	0003f000 	.inst	0x0003f000 ; undefined
    2f18:	00000000 	.inst	0x00000000 ; undefined
    2f1c:	00047800 	.inst	0x00047800 ; undefined
    2f20:	00000000 	.inst	0x00000000 ; undefined
    2f24:	65000100 	.inst	0x65000100 ; undefined
    2f28:	00000478 	.inst	0x00000478 ; undefined
    2f2c:	00000000 	.inst	0x00000000 ; undefined
    2f30:	00000484 	.inst	0x00000484 ; undefined
    2f34:	00000000 	.inst	0x00000000 ; undefined
    2f38:	01f30006 	.inst	0x01f30006 ; undefined
    2f3c:	9f253951 	.inst	0x9f253951 ; undefined
	...
    2f50:	000003f0 	.inst	0x000003f0 ; undefined
    2f54:	00000000 	.inst	0x00000000 ; undefined
    2f58:	00000420 	.inst	0x00000420 ; undefined
    2f5c:	00000000 	.inst	0x00000000 ; undefined
    2f60:	20650001 	.inst	0x20650001 ; undefined
    2f64:	00000004 	.inst	0x00000004 ; undefined
    2f68:	28000000 	stnp	w0, w0, [x0]
    2f6c:	00000004 	.inst	0x00000004 ; undefined
    2f70:	01000000 	.inst	0x01000000 ; undefined
    2f74:	043c5000 	.inst	0x043c5000 ; undefined
    2f78:	00000000 	.inst	0x00000000 ; undefined
    2f7c:	04640000 	.inst	0x04640000 ; undefined
    2f80:	00000000 	.inst	0x00000000 ; undefined
    2f84:	00010000 	.inst	0x00010000 ; undefined
    2f88:	00046450 	.inst	0x00046450 ; undefined
    2f8c:	00000000 	.inst	0x00000000 ; undefined
    2f90:	00046c00 	.inst	0x00046c00 ; undefined
    2f94:	00000000 	.inst	0x00000000 ; undefined
    2f98:	70000300 	adr	x0, 2ffb <_stack_size+0x1ffb>
    2f9c:	00009f08 	.inst	0x00009f08 ; undefined
	...
    2fac:	04200000 	.inst	0x04200000 ; undefined
    2fb0:	00000000 	.inst	0x00000000 ; undefined
    2fb4:	04440000 	.inst	0x04440000 ; undefined
    2fb8:	00000000 	.inst	0x00000000 ; undefined
    2fbc:	00010000 	.inst	0x00010000 ; undefined
    2fc0:	00044452 	.inst	0x00044452 ; undefined
    2fc4:	00000000 	.inst	0x00000000 ; undefined
    2fc8:	00044c00 	.inst	0x00044c00 ; undefined
    2fcc:	00000000 	.inst	0x00000000 ; undefined
    2fd0:	9e000600 	.inst	0x9e000600 ; undefined
    2fd4:	00001204 	.inst	0x00001204 ; undefined
    2fd8:	00044c80 	.inst	0x00044c80 ; undefined
    2fdc:	00000000 	.inst	0x00000000 ; undefined
    2fe0:	00046c00 	.inst	0x00046c00 ; undefined
    2fe4:	00000000 	.inst	0x00000000 ; undefined
    2fe8:	52000100 	eor	w0, w8, #0x1
	...
    2ffc:	00000484 	.inst	0x00000484 ; undefined
    3000:	00000000 	.inst	0x00000000 ; undefined
    3004:	000004e0 	.inst	0x000004e0 ; undefined
    3008:	00000000 	.inst	0x00000000 ; undefined
    300c:	e0500001 	.inst	0xe0500001 ; undefined
    3010:	00000004 	.inst	0x00000004 ; undefined
    3014:	2c000000 	stnp	s0, s0, [x0]
    3018:	00000006 	.inst	0x00000006 ; undefined
    301c:	01000000 	.inst	0x01000000 ; undefined
    3020:	062c6300 	.inst	0x062c6300 ; undefined
    3024:	00000000 	.inst	0x00000000 ; undefined
    3028:	06380000 	.inst	0x06380000 ; undefined
    302c:	00000000 	.inst	0x00000000 ; undefined
    3030:	00030000 	.inst	0x00030000 ; undefined
    3034:	389f1183 	ldursb	x3, [x12,#-15]
    3038:	00000006 	.inst	0x00000006 ; undefined
    303c:	8c000000 	.inst	0x8c000000 ; undefined
    3040:	00000006 	.inst	0x00000006 ; undefined
    3044:	04000000 	.inst	0x04000000 ; undefined
    3048:	5001f300 	adr	x0, 6eaa <_stack_size+0x5eaa>
    304c:	00068c9f 	.inst	0x00068c9f ; undefined
    3050:	00000000 	.inst	0x00000000 ; undefined
    3054:	00069800 	.inst	0x00069800 ; undefined
    3058:	00000000 	.inst	0x00000000 ; undefined
    305c:	50000100 	adr	x0, 307e <_stack_size+0x207e>
    3060:	00000698 	.inst	0x00000698 ; undefined
    3064:	00000000 	.inst	0x00000000 ; undefined
    3068:	000006e4 	.inst	0x000006e4 ; undefined
    306c:	00000000 	.inst	0x00000000 ; undefined
    3070:	e4630001 	.inst	0xe4630001 ; undefined
    3074:	00000006 	.inst	0x00000006 ; undefined
    3078:	ec000000 	.inst	0xec000000 ; undefined
    307c:	00000006 	.inst	0x00000006 ; undefined
    3080:	03000000 	.inst	0x03000000 ; undefined
    3084:	9f118300 	.inst	0x9f118300 ; undefined
    3088:	000006ec 	.inst	0x000006ec ; undefined
    308c:	00000000 	.inst	0x00000000 ; undefined
    3090:	00000710 	.inst	0x00000710 ; undefined
    3094:	00000000 	.inst	0x00000000 ; undefined
    3098:	01f30004 	.inst	0x01f30004 ; undefined
    309c:	07109f50 	.inst	0x07109f50 ; undefined
    30a0:	00000000 	.inst	0x00000000 ; undefined
    30a4:	07700000 	.inst	0x07700000 ; undefined
    30a8:	00000000 	.inst	0x00000000 ; undefined
    30ac:	00010000 	.inst	0x00010000 ; undefined
    30b0:	00000063 	.inst	0x00000063 ; undefined
	...
    30c0:	00048400 	.inst	0x00048400 ; undefined
    30c4:	00000000 	.inst	0x00000000 ; undefined
    30c8:	0004f000 	.inst	0x0004f000 ; undefined
    30cc:	00000000 	.inst	0x00000000 ; undefined
    30d0:	51000100 	sub	w0, w8, #0x0
    30d4:	000004f0 	.inst	0x000004f0 ; undefined
    30d8:	00000000 	.inst	0x00000000 ; undefined
    30dc:	00000680 	.inst	0x00000680 ; undefined
    30e0:	00000000 	.inst	0x00000000 ; undefined
    30e4:	80660001 	.inst	0x80660001 ; undefined
    30e8:	00000006 	.inst	0x00000006 ; undefined
    30ec:	8c000000 	.inst	0x8c000000 ; undefined
    30f0:	00000006 	.inst	0x00000006 ; undefined
    30f4:	04000000 	.inst	0x04000000 ; undefined
    30f8:	5101f300 	sub	w0, w24, #0x7c
    30fc:	00068c9f 	.inst	0x00068c9f ; undefined
    3100:	00000000 	.inst	0x00000000 ; undefined
    3104:	0006b400 	.inst	0x0006b400 ; undefined
    3108:	00000000 	.inst	0x00000000 ; undefined
    310c:	51000100 	sub	w0, w8, #0x0
    3110:	000006b4 	.inst	0x000006b4 ; undefined
    3114:	00000000 	.inst	0x00000000 ; undefined
    3118:	00000770 	.inst	0x00000770 ; undefined
    311c:	00000000 	.inst	0x00000000 ; undefined
    3120:	00660001 	.inst	0x00660001 ; undefined
	...
    3130:	84000000 	.inst	0x84000000 ; undefined
    3134:	00000004 	.inst	0x00000004 ; undefined
    3138:	e4000000 	.inst	0xe4000000 ; undefined
    313c:	00000004 	.inst	0x00000004 ; undefined
    3140:	01000000 	.inst	0x01000000 ; undefined
    3144:	04e45200 	.inst	0x04e45200 ; undefined
    3148:	00000000 	.inst	0x00000000 ; undefined
    314c:	06800000 	.inst	0x06800000 ; undefined
    3150:	00000000 	.inst	0x00000000 ; undefined
    3154:	00010000 	.inst	0x00010000 ; undefined
    3158:	00068065 	.inst	0x00068065 ; undefined
    315c:	00000000 	.inst	0x00000000 ; undefined
    3160:	00077000 	.inst	0x00077000 ; undefined
    3164:	00000000 	.inst	0x00000000 ; undefined
    3168:	f3000400 	.inst	0xf3000400 ; undefined
    316c:	009f5201 	.inst	0x009f5201 ; undefined
	...
    317c:	84000000 	.inst	0x84000000 ; undefined
    3180:	00000004 	.inst	0x00000004 ; undefined
    3184:	d8000000 	prfm	pldl1keep, 3184 <_stack_size+0x2184>
    3188:	00000004 	.inst	0x00000004 ; undefined
    318c:	01000000 	.inst	0x01000000 ; undefined
    3190:	04d85300 	.inst	0x04d85300 ; undefined
    3194:	00000000 	.inst	0x00000000 ; undefined
    3198:	06840000 	.inst	0x06840000 ; undefined
    319c:	00000000 	.inst	0x00000000 ; undefined
    31a0:	00010000 	.inst	0x00010000 ; undefined
    31a4:	00068467 	.inst	0x00068467 ; undefined
    31a8:	00000000 	.inst	0x00000000 ; undefined
    31ac:	00068c00 	.inst	0x00068c00 ; undefined
    31b0:	00000000 	.inst	0x00000000 ; undefined
    31b4:	f3000400 	.inst	0xf3000400 ; undefined
    31b8:	8c9f5301 	.inst	0x8c9f5301 ; undefined
    31bc:	00000006 	.inst	0x00000006 ; undefined
    31c0:	a0000000 	.inst	0xa0000000 ; undefined
    31c4:	00000006 	.inst	0x00000006 ; undefined
    31c8:	01000000 	.inst	0x01000000 ; undefined
    31cc:	06a05300 	.inst	0x06a05300 ; undefined
    31d0:	00000000 	.inst	0x00000000 ; undefined
    31d4:	07700000 	.inst	0x07700000 ; undefined
    31d8:	00000000 	.inst	0x00000000 ; undefined
    31dc:	00010000 	.inst	0x00010000 ; undefined
    31e0:	00000067 	.inst	0x00000067 ; undefined
	...
    31f0:	00048400 	.inst	0x00048400 ; undefined
    31f4:	00000000 	.inst	0x00000000 ; undefined
    31f8:	00067c00 	.inst	0x00067c00 ; undefined
    31fc:	00000000 	.inst	0x00000000 ; undefined
    3200:	30000200 	adr	x0, 3241 <_stack_size+0x2241>
    3204:	00067c9f 	.inst	0x00067c9f ; undefined
    3208:	00000000 	.inst	0x00000000 ; undefined
    320c:	00068c00 	.inst	0x00068c00 ; undefined
    3210:	00000000 	.inst	0x00000000 ; undefined
    3214:	50000100 	adr	x0, 3236 <_stack_size+0x2236>
    3218:	0000068c 	.inst	0x0000068c ; undefined
    321c:	00000000 	.inst	0x00000000 ; undefined
    3220:	00000770 	.inst	0x00000770 ; undefined
    3224:	00000000 	.inst	0x00000000 ; undefined
    3228:	9f300002 	.inst	0x9f300002 ; undefined
	...
    323c:	000004a4 	.inst	0x000004a4 ; undefined
    3240:	00000000 	.inst	0x00000000 ; undefined
    3244:	000004e4 	.inst	0x000004e4 ; undefined
    3248:	00000000 	.inst	0x00000000 ; undefined
    324c:	e4520001 	.inst	0xe4520001 ; undefined
    3250:	00000004 	.inst	0x00000004 ; undefined
    3254:	80000000 	.inst	0x80000000 ; undefined
    3258:	00000006 	.inst	0x00000006 ; undefined
    325c:	01000000 	.inst	0x01000000 ; undefined
    3260:	06806500 	.inst	0x06806500 ; undefined
    3264:	00000000 	.inst	0x00000000 ; undefined
    3268:	068c0000 	.inst	0x068c0000 ; undefined
    326c:	00000000 	.inst	0x00000000 ; undefined
    3270:	00040000 	.inst	0x00040000 ; undefined
    3274:	9f5201f3 	.inst	0x9f5201f3 ; undefined
    3278:	0000068c 	.inst	0x0000068c ; undefined
    327c:	00000000 	.inst	0x00000000 ; undefined
    3280:	000006b8 	.inst	0x000006b8 ; undefined
    3284:	00000000 	.inst	0x00000000 ; undefined
    3288:	b8520001 	ldur	w1, [x0,#-224]
    328c:	00000006 	.inst	0x00000006 ; undefined
    3290:	70000000 	adr	x0, 3293 <_stack_size+0x2293>
    3294:	00000007 	.inst	0x00000007 ; undefined
    3298:	01000000 	.inst	0x01000000 ; undefined
    329c:	00006500 	.inst	0x00006500 ; undefined
	...
    32ac:	07700000 	.inst	0x07700000 ; undefined
    32b0:	00000000 	.inst	0x00000000 ; undefined
    32b4:	07b00000 	.inst	0x07b00000 ; undefined
    32b8:	00000000 	.inst	0x00000000 ; undefined
    32bc:	00010000 	.inst	0x00010000 ; undefined
    32c0:	0007b050 	.inst	0x0007b050 ; undefined
    32c4:	00000000 	.inst	0x00000000 ; undefined
    32c8:	00083400 	.inst	0x00083400 ; undefined
    32cc:	00000000 	.inst	0x00000000 ; undefined
    32d0:	69000100 	.inst	0x69000100 ; undefined
    32d4:	00000834 	.inst	0x00000834 ; undefined
    32d8:	00000000 	.inst	0x00000000 ; undefined
    32dc:	00000840 	.inst	0x00000840 ; undefined
    32e0:	00000000 	.inst	0x00000000 ; undefined
    32e4:	01f30004 	.inst	0x01f30004 ; undefined
    32e8:	08409f50 	ldaxrb	w16, [x26]
    32ec:	00000000 	.inst	0x00000000 ; undefined
    32f0:	08980000 	.inst	0x08980000 ; undefined
    32f4:	00000000 	.inst	0x00000000 ; undefined
    32f8:	00010000 	.inst	0x00010000 ; undefined
    32fc:	00089869 	.inst	0x00089869 ; undefined
    3300:	00000000 	.inst	0x00000000 ; undefined
    3304:	0008a400 	.inst	0x0008a400 ; undefined
    3308:	00000000 	.inst	0x00000000 ; undefined
    330c:	f3000400 	.inst	0xf3000400 ; undefined
    3310:	a49f5001 	.inst	0xa49f5001 ; undefined
    3314:	00000008 	.inst	0x00000008 ; undefined
    3318:	a7000000 	.inst	0xa7000000 ; undefined
    331c:	00000008 	.inst	0x00000008 ; undefined
    3320:	01000000 	.inst	0x01000000 ; undefined
    3324:	08a75000 	.inst	0x08a75000 ; undefined
    3328:	00000000 	.inst	0x00000000 ; undefined
    332c:	08a80000 	.inst	0x08a80000 ; undefined
    3330:	00000000 	.inst	0x00000000 ; undefined
    3334:	00010000 	.inst	0x00010000 ; undefined
    3338:	00000069 	.inst	0x00000069 ; undefined
	...
    3348:	00077000 	.inst	0x00077000 ; undefined
    334c:	00000000 	.inst	0x00000000 ; undefined
    3350:	0007b000 	.inst	0x0007b000 ; undefined
    3354:	00000000 	.inst	0x00000000 ; undefined
    3358:	51000100 	sub	w0, w8, #0x0
    335c:	000007b0 	.inst	0x000007b0 ; undefined
    3360:	00000000 	.inst	0x00000000 ; undefined
    3364:	00000830 	.inst	0x00000830 ; undefined
    3368:	00000000 	.inst	0x00000000 ; undefined
    336c:	30670001 	adr	x1, d136d <_stack_size+0xd036d>
    3370:	00000008 	.inst	0x00000008 ; undefined
    3374:	40000000 	.inst	0x40000000 ; undefined
    3378:	00000008 	.inst	0x00000008 ; undefined
    337c:	04000000 	.inst	0x04000000 ; undefined
    3380:	5101f300 	sub	w0, w24, #0x7c
    3384:	0008409f 	.inst	0x0008409f ; undefined
    3388:	00000000 	.inst	0x00000000 ; undefined
    338c:	00089400 	.inst	0x00089400 ; undefined
    3390:	00000000 	.inst	0x00000000 ; undefined
    3394:	67000100 	.inst	0x67000100 ; undefined
    3398:	00000894 	.inst	0x00000894 ; undefined
    339c:	00000000 	.inst	0x00000000 ; undefined
    33a0:	000008a4 	.inst	0x000008a4 ; undefined
    33a4:	00000000 	.inst	0x00000000 ; undefined
    33a8:	01f30004 	.inst	0x01f30004 ; undefined
    33ac:	08a49f51 	.inst	0x08a49f51 ; undefined
    33b0:	00000000 	.inst	0x00000000 ; undefined
    33b4:	08a70000 	.inst	0x08a70000 ; undefined
    33b8:	00000000 	.inst	0x00000000 ; undefined
    33bc:	00010000 	.inst	0x00010000 ; undefined
    33c0:	0008a751 	.inst	0x0008a751 ; undefined
    33c4:	00000000 	.inst	0x00000000 ; undefined
    33c8:	0008a800 	.inst	0x0008a800 ; undefined
    33cc:	00000000 	.inst	0x00000000 ; undefined
    33d0:	67000100 	.inst	0x67000100 ; undefined
	...
    33e4:	00000770 	.inst	0x00000770 ; undefined
    33e8:	00000000 	.inst	0x00000000 ; undefined
    33ec:	000007b0 	.inst	0x000007b0 ; undefined
    33f0:	00000000 	.inst	0x00000000 ; undefined
    33f4:	b0520001 	adrp	x1, a4004000 <SMC_ID_HW_RSA+0x1fff40f9>
    33f8:	00000007 	.inst	0x00000007 ; undefined
    33fc:	a4000000 	.inst	0xa4000000 ; undefined
    3400:	00000008 	.inst	0x00000008 ; undefined
    3404:	04000000 	.inst	0x04000000 ; undefined
    3408:	5201f300 	eor	w0, w24, #0xaaaaaaaa
    340c:	0008a49f 	.inst	0x0008a49f ; undefined
    3410:	00000000 	.inst	0x00000000 ; undefined
    3414:	0008a700 	.inst	0x0008a700 ; undefined
    3418:	00000000 	.inst	0x00000000 ; undefined
    341c:	52000100 	eor	w0, w8, #0x1
    3420:	000008a7 	.inst	0x000008a7 ; undefined
    3424:	00000000 	.inst	0x00000000 ; undefined
    3428:	000008a8 	.inst	0x000008a8 ; undefined
    342c:	00000000 	.inst	0x00000000 ; undefined
    3430:	00630001 	.inst	0x00630001 ; undefined
	...
    3440:	70000000 	adr	x0, 3443 <_stack_size+0x2443>
    3444:	00000007 	.inst	0x00000007 ; undefined
    3448:	b0000000 	adrp	x0, 4000 <_stack_size+0x3000>
    344c:	00000007 	.inst	0x00000007 ; undefined
    3450:	01000000 	.inst	0x01000000 ; undefined
    3454:	07b05300 	.inst	0x07b05300 ; undefined
    3458:	00000000 	.inst	0x00000000 ; undefined
    345c:	08300000 	.inst	0x08300000 ; undefined
    3460:	00000000 	.inst	0x00000000 ; undefined
    3464:	00010000 	.inst	0x00010000 ; undefined
    3468:	00083068 	.inst	0x00083068 ; undefined
    346c:	00000000 	.inst	0x00000000 ; undefined
    3470:	00084000 	.inst	0x00084000 ; undefined
    3474:	00000000 	.inst	0x00000000 ; undefined
    3478:	f3000400 	.inst	0xf3000400 ; undefined
    347c:	409f5301 	.inst	0x409f5301 ; undefined
    3480:	00000008 	.inst	0x00000008 ; undefined
    3484:	94000000 	bl	3484 <_stack_size+0x2484>
    3488:	00000008 	.inst	0x00000008 ; undefined
    348c:	01000000 	.inst	0x01000000 ; undefined
    3490:	08946800 	.inst	0x08946800 ; undefined
    3494:	00000000 	.inst	0x00000000 ; undefined
    3498:	08a40000 	.inst	0x08a40000 ; undefined
    349c:	00000000 	.inst	0x00000000 ; undefined
    34a0:	00040000 	.inst	0x00040000 ; undefined
    34a4:	9f5301f3 	.inst	0x9f5301f3 ; undefined
    34a8:	000008a4 	.inst	0x000008a4 ; undefined
    34ac:	00000000 	.inst	0x00000000 ; undefined
    34b0:	000008a7 	.inst	0x000008a7 ; undefined
    34b4:	00000000 	.inst	0x00000000 ; undefined
    34b8:	a7530001 	.inst	0xa7530001 ; undefined
    34bc:	00000008 	.inst	0x00000008 ; undefined
    34c0:	a8000000 	stnp	x0, x0, [x0]
    34c4:	00000008 	.inst	0x00000008 ; undefined
    34c8:	01000000 	.inst	0x01000000 ; undefined
    34cc:	00006800 	.inst	0x00006800 ; undefined
	...
    34dc:	07700000 	.inst	0x07700000 ; undefined
    34e0:	00000000 	.inst	0x00000000 ; undefined
    34e4:	07cc0000 	.inst	0x07cc0000 ; undefined
    34e8:	00000000 	.inst	0x00000000 ; undefined
    34ec:	00020000 	.inst	0x00020000 ; undefined
    34f0:	07cc9f30 	.inst	0x07cc9f30 ; undefined
    34f4:	00000000 	.inst	0x00000000 ; undefined
    34f8:	07d00000 	.inst	0x07d00000 ; undefined
    34fc:	00000000 	.inst	0x00000000 ; undefined
    3500:	00010000 	.inst	0x00010000 ; undefined
    3504:	0007d050 	.inst	0x0007d050 ; undefined
    3508:	00000000 	.inst	0x00000000 ; undefined
    350c:	0007dc00 	.inst	0x0007dc00 ; undefined
    3510:	00000000 	.inst	0x00000000 ; undefined
    3514:	66000100 	.inst	0x66000100 ; undefined
    3518:	000007dc 	.inst	0x000007dc ; undefined
    351c:	00000000 	.inst	0x00000000 ; undefined
    3520:	00000820 	.inst	0x00000820 ; undefined
    3524:	00000000 	.inst	0x00000000 ; undefined
    3528:	9f300002 	.inst	0x9f300002 ; undefined
    352c:	00000820 	.inst	0x00000820 ; undefined
    3530:	00000000 	.inst	0x00000000 ; undefined
    3534:	00000824 	.inst	0x00000824 ; undefined
    3538:	00000000 	.inst	0x00000000 ; undefined
    353c:	40500001 	.inst	0x40500001 ; undefined
    3540:	00000008 	.inst	0x00000008 ; undefined
    3544:	58000000 	ldr	x0, 3544 <_stack_size+0x2544>
    3548:	00000008 	.inst	0x00000008 ; undefined
    354c:	02000000 	.inst	0x02000000 ; undefined
    3550:	589f3000 	ldr	x0, fffffffffff41b50 <SMC_ID_HW_RSA+0xffffffff7bf31c49>
    3554:	00000008 	.inst	0x00000008 ; undefined
    3558:	5c000000 	ldr	d0, 3558 <_stack_size+0x2558>
    355c:	00000008 	.inst	0x00000008 ; undefined
    3560:	01000000 	.inst	0x01000000 ; undefined
    3564:	085c5000 	ldxrb	w0, [x0]
    3568:	00000000 	.inst	0x00000000 ; undefined
    356c:	08740000 	.inst	0x08740000 ; undefined
    3570:	00000000 	.inst	0x00000000 ; undefined
    3574:	00020000 	.inst	0x00020000 ; undefined
    3578:	08749f30 	.inst	0x08749f30 ; undefined
    357c:	00000000 	.inst	0x00000000 ; undefined
    3580:	08780000 	.inst	0x08780000 ; undefined
    3584:	00000000 	.inst	0x00000000 ; undefined
    3588:	00010000 	.inst	0x00010000 ; undefined
    358c:	00087850 	.inst	0x00087850 ; undefined
    3590:	00000000 	.inst	0x00000000 ; undefined
    3594:	0008a800 	.inst	0x0008a800 ; undefined
    3598:	00000000 	.inst	0x00000000 ; undefined
    359c:	30000200 	adr	x0, 35dd <_stack_size+0x25dd>
    35a0:	0000009f 	.inst	0x0000009f ; undefined
	...
    35b0:	00077800 	.inst	0x00077800 ; undefined
    35b4:	00000000 	.inst	0x00000000 ; undefined
    35b8:	0007b000 	.inst	0x0007b000 ; undefined
    35bc:	00000000 	.inst	0x00000000 ; undefined
    35c0:	52000100 	eor	w0, w8, #0x1
    35c4:	000007b0 	.inst	0x000007b0 ; undefined
    35c8:	00000000 	.inst	0x00000000 ; undefined
    35cc:	0000083c 	.inst	0x0000083c ; undefined
    35d0:	00000000 	.inst	0x00000000 ; undefined
    35d4:	40630001 	.inst	0x40630001 ; undefined
    35d8:	00000008 	.inst	0x00000008 ; undefined
    35dc:	a0000000 	.inst	0xa0000000 ; undefined
    35e0:	00000008 	.inst	0x00000008 ; undefined
    35e4:	01000000 	.inst	0x01000000 ; undefined
    35e8:	08a46300 	.inst	0x08a46300 ; undefined
    35ec:	00000000 	.inst	0x00000000 ; undefined
    35f0:	08a70000 	.inst	0x08a70000 ; undefined
    35f4:	00000000 	.inst	0x00000000 ; undefined
    35f8:	00010000 	.inst	0x00010000 ; undefined
    35fc:	0008a752 	.inst	0x0008a752 ; undefined
    3600:	00000000 	.inst	0x00000000 ; undefined
    3604:	0008a800 	.inst	0x0008a800 ; undefined
    3608:	00000000 	.inst	0x00000000 ; undefined
    360c:	63000100 	.inst	0x63000100 ; undefined
	...
    3620:	00000790 	.inst	0x00000790 ; undefined
    3624:	00000000 	.inst	0x00000000 ; undefined
    3628:	000007b0 	.inst	0x000007b0 ; undefined
    362c:	00000000 	.inst	0x00000000 ; undefined
    3630:	b0510001 	adrp	x1, a2004000 <SMC_ID_HW_RSA+0x1dff40f9>
    3634:	00000007 	.inst	0x00000007 ; undefined
    3638:	18000000 	ldr	w0, 3638 <_stack_size+0x2638>
    363c:	00000008 	.inst	0x00000008 ; undefined
    3640:	01000000 	.inst	0x01000000 ; undefined
    3644:	08186500 	stxrb	w24, w0, [x8]
    3648:	00000000 	.inst	0x00000000 ; undefined
    364c:	081b0000 	stxrb	w27, w0, [x0]
    3650:	00000000 	.inst	0x00000000 ; undefined
    3654:	00010000 	.inst	0x00010000 ; undefined
    3658:	00082051 	.inst	0x00082051 ; undefined
    365c:	00000000 	.inst	0x00000000 ; undefined
    3660:	00082c00 	.inst	0x00082c00 ; undefined
    3664:	00000000 	.inst	0x00000000 ; undefined
    3668:	65000100 	.inst	0x65000100 ; undefined
    366c:	00000840 	.inst	0x00000840 ; undefined
    3670:	00000000 	.inst	0x00000000 ; undefined
    3674:	00000890 	.inst	0x00000890 ; undefined
    3678:	00000000 	.inst	0x00000000 ; undefined
    367c:	a4650001 	.inst	0xa4650001 ; undefined
    3680:	00000008 	.inst	0x00000008 ; undefined
    3684:	a7000000 	.inst	0xa7000000 ; undefined
    3688:	00000008 	.inst	0x00000008 ; undefined
    368c:	01000000 	.inst	0x01000000 ; undefined
    3690:	08a75100 	.inst	0x08a75100 ; undefined
    3694:	00000000 	.inst	0x00000000 ; undefined
    3698:	08a80000 	.inst	0x08a80000 ; undefined
    369c:	00000000 	.inst	0x00000000 ; undefined
    36a0:	00010000 	.inst	0x00010000 ; undefined
    36a4:	00000067 	.inst	0x00000067 ; undefined
	...
    36b4:	0007b000 	.inst	0x0007b000 ; undefined
    36b8:	00000000 	.inst	0x00000000 ; undefined
    36bc:	0007e000 	.inst	0x0007e000 ; undefined
    36c0:	00000000 	.inst	0x00000000 ; undefined
    36c4:	64000100 	.inst	0x64000100 ; undefined
    36c8:	000007e8 	.inst	0x000007e8 ; undefined
    36cc:	00000000 	.inst	0x00000000 ; undefined
    36d0:	0000083c 	.inst	0x0000083c ; undefined
    36d4:	00000000 	.inst	0x00000000 ; undefined
    36d8:	40640001 	.inst	0x40640001 ; undefined
    36dc:	00000008 	.inst	0x00000008 ; undefined
    36e0:	a0000000 	.inst	0xa0000000 ; undefined
    36e4:	00000008 	.inst	0x00000008 ; undefined
    36e8:	01000000 	.inst	0x01000000 ; undefined
    36ec:	00006400 	.inst	0x00006400 ; undefined
	...
    36fc:	08a80000 	.inst	0x08a80000 ; undefined
    3700:	00000000 	.inst	0x00000000 ; undefined
    3704:	08c40000 	.inst	0x08c40000 ; undefined
    3708:	00000000 	.inst	0x00000000 ; undefined
    370c:	00010000 	.inst	0x00010000 ; undefined
    3710:	0008c450 	.inst	0x0008c450 ; undefined
    3714:	00000000 	.inst	0x00000000 ; undefined
    3718:	00092000 	.inst	0x00092000 ; undefined
    371c:	00000000 	.inst	0x00000000 ; undefined
    3720:	63000100 	.inst	0x63000100 ; undefined
    3724:	00000920 	.inst	0x00000920 ; undefined
    3728:	00000000 	.inst	0x00000000 ; undefined
    372c:	000009d8 	.inst	0x000009d8 ; undefined
    3730:	00000000 	.inst	0x00000000 ; undefined
    3734:	01f30004 	.inst	0x01f30004 ; undefined
    3738:	00009f50 	.inst	0x00009f50 ; undefined
	...
    3748:	09d80000 	.inst	0x09d80000 ; undefined
    374c:	00000000 	.inst	0x00000000 ; undefined
    3750:	09fc0000 	.inst	0x09fc0000 ; undefined
    3754:	00000000 	.inst	0x00000000 ; undefined
    3758:	00010000 	.inst	0x00010000 ; undefined
    375c:	0009fc50 	.inst	0x0009fc50 ; undefined
    3760:	00000000 	.inst	0x00000000 ; undefined
    3764:	000a3400 	.inst	0x000a3400 ; undefined
    3768:	00000000 	.inst	0x00000000 ; undefined
    376c:	63000100 	.inst	0x63000100 ; undefined
    3770:	00000a34 	.inst	0x00000a34 ; undefined
    3774:	00000000 	.inst	0x00000000 ; undefined
    3778:	00000a5c 	.inst	0x00000a5c ; undefined
    377c:	00000000 	.inst	0x00000000 ; undefined
    3780:	01f30004 	.inst	0x01f30004 ; undefined
    3784:	0a5c9f50 	.inst	0x0a5c9f50 ; undefined
    3788:	00000000 	.inst	0x00000000 ; undefined
    378c:	0a680000 	bic	w0, w0, w8, lsr #0
    3790:	00000000 	.inst	0x00000000 ; undefined
    3794:	00010000 	.inst	0x00010000 ; undefined
    3798:	00000050 	.inst	0x00000050 ; undefined
	...
    37a8:	0009e000 	.inst	0x0009e000 ; undefined
    37ac:	00000000 	.inst	0x00000000 ; undefined
    37b0:	0009f000 	.inst	0x0009f000 ; undefined
    37b4:	00000000 	.inst	0x00000000 ; undefined
    37b8:	83000600 	.inst	0x83000600 ; undefined
    37bc:	1aff0800 	.inst	0x1aff0800 ; undefined
    37c0:	000a5c9f 	.inst	0x000a5c9f ; undefined
    37c4:	00000000 	.inst	0x00000000 ; undefined
    37c8:	000a6800 	.inst	0x000a6800 ; undefined
    37cc:	00000000 	.inst	0x00000000 ; undefined
    37d0:	83000600 	.inst	0x83000600 ; undefined
    37d4:	1aff0800 	.inst	0x1aff0800 ; undefined
    37d8:	0000009f 	.inst	0x0000009f ; undefined
	...
    37e8:	000a6800 	.inst	0x000a6800 ; undefined
    37ec:	00000000 	.inst	0x00000000 ; undefined
    37f0:	000a8400 	.inst	0x000a8400 ; undefined
    37f4:	00000000 	.inst	0x00000000 ; undefined
    37f8:	50000100 	adr	x0, 381a <_stack_size+0x281a>
    37fc:	00000a84 	.inst	0x00000a84 ; undefined
    3800:	00000000 	.inst	0x00000000 ; undefined
    3804:	00000ab8 	.inst	0x00000ab8 ; undefined
    3808:	00000000 	.inst	0x00000000 ; undefined
    380c:	b8630001 	ldaddl	w3, w1, [x0]
    3810:	0000000a 	.inst	0x0000000a ; undefined
    3814:	bc000000 	stur	s0, [x0]
    3818:	0000000a 	.inst	0x0000000a ; undefined
    381c:	04000000 	.inst	0x04000000 ; undefined
    3820:	5001f300 	adr	x0, 7682 <_stack_size+0x6682>
    3824:	000abc9f 	.inst	0x000abc9f ; undefined
    3828:	00000000 	.inst	0x00000000 ; undefined
    382c:	000ad400 	.inst	0x000ad400 ; undefined
    3830:	00000000 	.inst	0x00000000 ; undefined
    3834:	63000100 	.inst	0x63000100 ; undefined
    3838:	00000ad4 	.inst	0x00000ad4 ; undefined
    383c:	00000000 	.inst	0x00000000 ; undefined
    3840:	00000ae0 	.inst	0x00000ae0 ; undefined
    3844:	00000000 	.inst	0x00000000 ; undefined
    3848:	01f30004 	.inst	0x01f30004 ; undefined
    384c:	00009f50 	.inst	0x00009f50 ; undefined
	...
    385c:	0ae00000 	bic	w0, w0, w0, ror #0
    3860:	00000000 	.inst	0x00000000 ; undefined
    3864:	0b040000 	add	w0, w0, w4
    3868:	00000000 	.inst	0x00000000 ; undefined
    386c:	00010000 	.inst	0x00010000 ; undefined
    3870:	000b0450 	.inst	0x000b0450 ; undefined
    3874:	00000000 	.inst	0x00000000 ; undefined
    3878:	000bf000 	.inst	0x000bf000 ; undefined
    387c:	00000000 	.inst	0x00000000 ; undefined
    3880:	f3000400 	.inst	0xf3000400 ; undefined
    3884:	009f5001 	.inst	0x009f5001 ; undefined
	...
    3894:	e0000000 	.inst	0xe0000000 ; undefined
    3898:	0000000a 	.inst	0x0000000a ; undefined
    389c:	fc000000 	stur	d0, [x0]
    38a0:	0000000a 	.inst	0x0000000a ; undefined
    38a4:	01000000 	.inst	0x01000000 ; undefined
    38a8:	0afc5100 	bic	w0, w8, w28, ror #20
    38ac:	00000000 	.inst	0x00000000 ; undefined
    38b0:	0be40000 	.inst	0x0be40000 ; undefined
    38b4:	00000000 	.inst	0x00000000 ; undefined
    38b8:	00010000 	.inst	0x00010000 ; undefined
    38bc:	000be466 	.inst	0x000be466 ; undefined
    38c0:	00000000 	.inst	0x00000000 ; undefined
    38c4:	000bf000 	.inst	0x000bf000 ; undefined
    38c8:	00000000 	.inst	0x00000000 ; undefined
    38cc:	f3000400 	.inst	0xf3000400 ; undefined
    38d0:	009f5101 	.inst	0x009f5101 ; undefined
	...
    38e8:	33000000 	bfxil	w0, w0, #0, #1
    38ec:	00000000 	.inst	0x00000000 ; undefined
    38f0:	01000000 	.inst	0x01000000 ; undefined
    38f4:	00335000 	.inst	0x00335000 ; NYI
    38f8:	00000000 	.inst	0x00000000 ; undefined
    38fc:	00500000 	.inst	0x00500000 ; undefined
    3900:	00000000 	.inst	0x00000000 ; undefined
    3904:	00010000 	.inst	0x00010000 ; undefined
    3908:	00005064 	.inst	0x00005064 ; undefined
    390c:	00000000 	.inst	0x00000000 ; undefined
    3910:	00018000 	.inst	0x00018000 ; undefined
    3914:	00000000 	.inst	0x00000000 ; undefined
    3918:	f3000400 	.inst	0xf3000400 ; undefined
    391c:	809f5001 	.inst	0x809f5001 ; undefined
    3920:	00000001 	.inst	0x00000001 ; undefined
    3924:	90000000 	adrp	x0, 3000 <_stack_size+0x2000>
    3928:	00000001 	.inst	0x00000001 ; undefined
    392c:	01000000 	.inst	0x01000000 ; undefined
    3930:	01905000 	.inst	0x01905000 ; undefined
    3934:	00000000 	.inst	0x00000000 ; undefined
    3938:	02480000 	.inst	0x02480000 ; undefined
    393c:	00000000 	.inst	0x00000000 ; undefined
    3940:	00040000 	.inst	0x00040000 ; undefined
    3944:	9f5001f3 	.inst	0x9f5001f3 ; undefined
	...
    3960:	00000033 	.inst	0x00000033 ; undefined
    3964:	00000000 	.inst	0x00000000 ; undefined
    3968:	33510001 	.inst	0x33510001 ; undefined
    396c:	00000000 	.inst	0x00000000 ; undefined
    3970:	e4000000 	.inst	0xe4000000 ; undefined
    3974:	00000000 	.inst	0x00000000 ; undefined
    3978:	01000000 	.inst	0x01000000 ; undefined
    397c:	00e46300 	.inst	0x00e46300 ; undefined
    3980:	00000000 	.inst	0x00000000 ; undefined
    3984:	01800000 	.inst	0x01800000 ; undefined
    3988:	00000000 	.inst	0x00000000 ; undefined
    398c:	00040000 	.inst	0x00040000 ; undefined
    3990:	9f5101f3 	.inst	0x9f5101f3 ; undefined
    3994:	00000180 	.inst	0x00000180 ; undefined
    3998:	00000000 	.inst	0x00000000 ; undefined
    399c:	00000198 	.inst	0x00000198 ; undefined
    39a0:	00000000 	.inst	0x00000000 ; undefined
    39a4:	98510001 	ldrsw	x1, a59a4 <_stack_size+0xa49a4>
    39a8:	00000001 	.inst	0x00000001 ; undefined
    39ac:	b0000000 	adrp	x0, 4000 <_stack_size+0x3000>
    39b0:	00000001 	.inst	0x00000001 ; undefined
    39b4:	04000000 	.inst	0x04000000 ; undefined
    39b8:	5101f300 	sub	w0, w24, #0x7c
    39bc:	0001b09f 	.inst	0x0001b09f ; undefined
    39c0:	00000000 	.inst	0x00000000 ; undefined
    39c4:	00020000 	.inst	0x00020000 ; undefined
    39c8:	00000000 	.inst	0x00000000 ; undefined
    39cc:	63000100 	.inst	0x63000100 ; undefined
    39d0:	00000200 	.inst	0x00000200 ; undefined
    39d4:	00000000 	.inst	0x00000000 ; undefined
    39d8:	00000204 	.inst	0x00000204 ; undefined
    39dc:	00000000 	.inst	0x00000000 ; undefined
    39e0:	01f30004 	.inst	0x01f30004 ; undefined
    39e4:	02049f51 	.inst	0x02049f51 ; undefined
    39e8:	00000000 	.inst	0x00000000 ; undefined
    39ec:	02340000 	.inst	0x02340000 ; undefined
    39f0:	00000000 	.inst	0x00000000 ; undefined
    39f4:	00010000 	.inst	0x00010000 ; undefined
    39f8:	00023463 	.inst	0x00023463 ; undefined
    39fc:	00000000 	.inst	0x00000000 ; undefined
    3a00:	00024800 	.inst	0x00024800 ; undefined
    3a04:	00000000 	.inst	0x00000000 ; undefined
    3a08:	f3000400 	.inst	0xf3000400 ; undefined
    3a0c:	009f5101 	.inst	0x009f5101 ; undefined
	...
    3a24:	33000000 	bfxil	w0, w0, #0, #1
    3a28:	00000000 	.inst	0x00000000 ; undefined
    3a2c:	01000000 	.inst	0x01000000 ; undefined
    3a30:	00335200 	.inst	0x00335200 ; NYI
    3a34:	00000000 	.inst	0x00000000 ; undefined
    3a38:	01740000 	.inst	0x01740000 ; undefined
    3a3c:	00000000 	.inst	0x00000000 ; undefined
    3a40:	00010000 	.inst	0x00010000 ; undefined
    3a44:	00017468 	.inst	0x00017468 ; undefined
    3a48:	00000000 	.inst	0x00000000 ; undefined
    3a4c:	00018000 	.inst	0x00018000 ; undefined
    3a50:	00000000 	.inst	0x00000000 ; undefined
    3a54:	f3000400 	.inst	0xf3000400 ; undefined
    3a58:	809f5201 	.inst	0x809f5201 ; undefined
    3a5c:	00000001 	.inst	0x00000001 ; undefined
    3a60:	98000000 	ldrsw	x0, 3a60 <_stack_size+0x2a60>
    3a64:	00000001 	.inst	0x00000001 ; undefined
    3a68:	01000000 	.inst	0x01000000 ; undefined
    3a6c:	01985200 	.inst	0x01985200 ; undefined
    3a70:	00000000 	.inst	0x00000000 ; undefined
    3a74:	01a00000 	.inst	0x01a00000 ; undefined
    3a78:	00000000 	.inst	0x00000000 ; undefined
    3a7c:	00010000 	.inst	0x00010000 ; undefined
    3a80:	0001a068 	.inst	0x0001a068 ; undefined
    3a84:	00000000 	.inst	0x00000000 ; undefined
    3a88:	0001b000 	.inst	0x0001b000 ; undefined
    3a8c:	00000000 	.inst	0x00000000 ; undefined
    3a90:	f3000400 	.inst	0xf3000400 ; undefined
    3a94:	b09f5201 	adrp	x1, ffffffff3ea44000 <SMC_ID_HW_RSA+0xfffffffebaa340f9>
    3a98:	00000001 	.inst	0x00000001 ; undefined
    3a9c:	48000000 	stxrh	w0, w0, [x0]
    3aa0:	00000002 	.inst	0x00000002 ; undefined
    3aa4:	01000000 	.inst	0x01000000 ; undefined
    3aa8:	00006800 	.inst	0x00006800 ; undefined
	...
    3ac0:	00e40000 	.inst	0x00e40000 ; undefined
    3ac4:	00000000 	.inst	0x00000000 ; undefined
    3ac8:	00040000 	.inst	0x00040000 ; undefined
    3acc:	9f03e80a 	.inst	0x9f03e80a ; undefined
    3ad0:	000000e4 	.inst	0x000000e4 ; undefined
    3ad4:	00000000 	.inst	0x00000000 ; undefined
    3ad8:	000000fc 	.inst	0x000000fc ; undefined
    3adc:	00000000 	.inst	0x00000000 ; undefined
    3ae0:	7f840003 	.inst	0x7f840003 ; undefined
    3ae4:	0000fc9f 	.inst	0x0000fc9f ; undefined
    3ae8:	00000000 	.inst	0x00000000 ; undefined
    3aec:	00010000 	.inst	0x00010000 ; undefined
    3af0:	00000000 	.inst	0x00000000 ; undefined
    3af4:	84000300 	.inst	0x84000300 ; undefined
    3af8:	01009f7e 	.inst	0x01009f7e ; undefined
    3afc:	00000000 	.inst	0x00000000 ; undefined
    3b00:	013c0000 	.inst	0x013c0000 ; undefined
    3b04:	00000000 	.inst	0x00000000 ; undefined
    3b08:	00030000 	.inst	0x00030000 ; undefined
    3b0c:	809f7f84 	.inst	0x809f7f84 ; undefined
    3b10:	00000001 	.inst	0x00000001 ; undefined
    3b14:	98000000 	ldrsw	x0, 3b14 <_stack_size+0x2b14>
    3b18:	00000001 	.inst	0x00000001 ; undefined
    3b1c:	04000000 	.inst	0x04000000 ; undefined
    3b20:	03e80a00 	.inst	0x03e80a00 ; undefined
    3b24:	0001989f 	.inst	0x0001989f ; undefined
    3b28:	00000000 	.inst	0x00000000 ; undefined
    3b2c:	0001ac00 	.inst	0x0001ac00 ; undefined
    3b30:	00000000 	.inst	0x00000000 ; undefined
    3b34:	84000300 	.inst	0x84000300 ; undefined
    3b38:	01b09f7f 	.inst	0x01b09f7f ; undefined
    3b3c:	00000000 	.inst	0x00000000 ; undefined
    3b40:	02000000 	.inst	0x02000000 ; undefined
    3b44:	00000000 	.inst	0x00000000 ; undefined
    3b48:	00040000 	.inst	0x00040000 ; undefined
    3b4c:	9f03e80a 	.inst	0x9f03e80a ; undefined
    3b50:	00000204 	.inst	0x00000204 ; undefined
    3b54:	00000000 	.inst	0x00000000 ; undefined
    3b58:	00000234 	.inst	0x00000234 ; undefined
    3b5c:	00000000 	.inst	0x00000000 ; undefined
    3b60:	e80a0004 	.inst	0xe80a0004 ; undefined
    3b64:	02349f03 	.inst	0x02349f03 ; undefined
    3b68:	00000000 	.inst	0x00000000 ; undefined
    3b6c:	02480000 	.inst	0x02480000 ; undefined
    3b70:	00000000 	.inst	0x00000000 ; undefined
    3b74:	00030000 	.inst	0x00030000 ; undefined
    3b78:	009f7f84 	.inst	0x009f7f84 ; undefined
	...
    3b88:	58000000 	ldr	x0, 3b88 <_stack_size+0x2b88>
    3b8c:	00000001 	.inst	0x00000001 ; undefined
    3b90:	78000000 	sturh	w0, [x0]
    3b94:	00000001 	.inst	0x00000001 ; undefined
    3b98:	01000000 	.inst	0x01000000 ; undefined
    3b9c:	00005000 	.inst	0x00005000 ; undefined
	...
    3bac:	00100000 	.inst	0x00100000 ; undefined
    3bb0:	00000000 	.inst	0x00000000 ; undefined
    3bb4:	00fc0000 	.inst	0x00fc0000 ; undefined
    3bb8:	00000000 	.inst	0x00000000 ; undefined
    3bbc:	00020000 	.inst	0x00020000 ; undefined
    3bc0:	00fc9f30 	.inst	0x00fc9f30 ; undefined
    3bc4:	00000000 	.inst	0x00000000 ; undefined
    3bc8:	01000000 	.inst	0x01000000 ; undefined
    3bcc:	00000000 	.inst	0x00000000 ; undefined
    3bd0:	00070000 	.inst	0x00070000 ; undefined
    3bd4:	8303ea0a 	.inst	0x8303ea0a ; undefined
    3bd8:	009f1c00 	.inst	0x009f1c00 ; undefined
    3bdc:	00000001 	.inst	0x00000001 ; undefined
    3be0:	10000000 	adr	x0, 3be0 <_stack_size+0x2be0>
    3be4:	00000001 	.inst	0x00000001 ; undefined
    3be8:	07000000 	.inst	0x07000000 ; undefined
    3bec:	03e90a00 	.inst	0x03e90a00 ; undefined
    3bf0:	9f1c0083 	.inst	0x9f1c0083 ; undefined
    3bf4:	00000110 	.inst	0x00000110 ; undefined
    3bf8:	00000000 	.inst	0x00000000 ; undefined
    3bfc:	00000124 	.inst	0x00000124 ; undefined
    3c00:	00000000 	.inst	0x00000000 ; undefined
    3c04:	ea0a0007 	ands	x7, x0, x10
    3c08:	1c008303 	ldr	s3, 4c68 <_stack_size+0x3c68>
    3c0c:	0001849f 	.inst	0x0001849f ; undefined
    3c10:	00000000 	.inst	0x00000000 ; undefined
    3c14:	00019800 	.inst	0x00019800 ; undefined
    3c18:	00000000 	.inst	0x00000000 ; undefined
    3c1c:	30000200 	adr	x0, 3c5d <_stack_size+0x2c5d>
    3c20:	0001989f 	.inst	0x0001989f ; undefined
    3c24:	00000000 	.inst	0x00000000 ; undefined
    3c28:	0001b800 	.inst	0x0001b800 ; undefined
    3c2c:	00000000 	.inst	0x00000000 ; undefined
    3c30:	0a000700 	and	w0, w24, w0, lsl #1
    3c34:	008303e9 	.inst	0x008303e9 ; undefined
    3c38:	00009f1c 	.inst	0x00009f1c ; undefined
	...
    3c48:	01b80000 	.inst	0x01b80000 ; undefined
    3c4c:	00000000 	.inst	0x00000000 ; undefined
    3c50:	01f00000 	.inst	0x01f00000 ; undefined
    3c54:	00000000 	.inst	0x00000000 ; undefined
    3c58:	00010000 	.inst	0x00010000 ; undefined
    3c5c:	0001f050 	.inst	0x0001f050 ; undefined
    3c60:	00000000 	.inst	0x00000000 ; undefined
    3c64:	0001f800 	.inst	0x0001f800 ; undefined
    3c68:	00000000 	.inst	0x00000000 ; undefined
    3c6c:	f3000400 	.inst	0xf3000400 ; undefined
    3c70:	f89f5001 	prfum	pldl1strm, [x0,#-11]
    3c74:	00000001 	.inst	0x00000001 ; undefined
    3c78:	fc000000 	stur	d0, [x0]
    3c7c:	00000001 	.inst	0x00000001 ; undefined
    3c80:	01000000 	.inst	0x01000000 ; undefined
    3c84:	01fc5000 	.inst	0x01fc5000 ; undefined
    3c88:	00000000 	.inst	0x00000000 ; undefined
    3c8c:	03840000 	.inst	0x03840000 ; undefined
    3c90:	00000000 	.inst	0x00000000 ; undefined
    3c94:	00010000 	.inst	0x00010000 ; undefined
    3c98:	00038465 	.inst	0x00038465 ; undefined
    3c9c:	00000000 	.inst	0x00000000 ; undefined
    3ca0:	00039400 	.inst	0x00039400 ; undefined
    3ca4:	00000000 	.inst	0x00000000 ; undefined
    3ca8:	f3000400 	.inst	0xf3000400 ; undefined
    3cac:	949f5001 	bl	27d7cb0 <MPIDR_EL1_MT+0x17d7cb0>
    3cb0:	00000003 	.inst	0x00000003 ; undefined
    3cb4:	50000000 	adr	x0, 3cb6 <_stack_size+0x2cb6>
    3cb8:	00000004 	.inst	0x00000004 ; undefined
    3cbc:	01000000 	.inst	0x01000000 ; undefined
    3cc0:	00006500 	.inst	0x00006500 ; undefined
	...
    3cd0:	01b80000 	.inst	0x01b80000 ; undefined
    3cd4:	00000000 	.inst	0x00000000 ; undefined
    3cd8:	020f0000 	.inst	0x020f0000 ; undefined
    3cdc:	00000000 	.inst	0x00000000 ; undefined
    3ce0:	00010000 	.inst	0x00010000 ; undefined
    3ce4:	00020f51 	.inst	0x00020f51 ; undefined
    3ce8:	00000000 	.inst	0x00000000 ; undefined
    3cec:	00035400 	.inst	0x00035400 ; undefined
    3cf0:	00000000 	.inst	0x00000000 ; undefined
    3cf4:	63000100 	.inst	0x63000100 ; undefined
    3cf8:	00000354 	.inst	0x00000354 ; undefined
    3cfc:	00000000 	.inst	0x00000000 ; undefined
    3d00:	00000394 	.inst	0x00000394 ; undefined
    3d04:	00000000 	.inst	0x00000000 ; undefined
    3d08:	01f30004 	.inst	0x01f30004 ; undefined
    3d0c:	03949f51 	.inst	0x03949f51 ; undefined
    3d10:	00000000 	.inst	0x00000000 ; undefined
    3d14:	03e80000 	.inst	0x03e80000 ; undefined
    3d18:	00000000 	.inst	0x00000000 ; undefined
    3d1c:	00010000 	.inst	0x00010000 ; undefined
    3d20:	0003e863 	.inst	0x0003e863 ; undefined
    3d24:	00000000 	.inst	0x00000000 ; undefined
    3d28:	0003f000 	.inst	0x0003f000 ; undefined
    3d2c:	00000000 	.inst	0x00000000 ; undefined
    3d30:	f3000400 	.inst	0xf3000400 ; undefined
    3d34:	f09f5101 	adrp	x1, ffffffff3ea26000 <SMC_ID_HW_RSA+0xfffffffebaa160f9>
    3d38:	00000003 	.inst	0x00000003 ; undefined
    3d3c:	50000000 	adr	x0, 3d3e <_stack_size+0x2d3e>
    3d40:	00000004 	.inst	0x00000004 ; undefined
    3d44:	01000000 	.inst	0x01000000 ; undefined
    3d48:	00006300 	.inst	0x00006300 ; undefined
	...
    3d58:	01b80000 	.inst	0x01b80000 ; undefined
    3d5c:	00000000 	.inst	0x00000000 ; undefined
    3d60:	020f0000 	.inst	0x020f0000 ; undefined
    3d64:	00000000 	.inst	0x00000000 ; undefined
    3d68:	00010000 	.inst	0x00010000 ; undefined
    3d6c:	00020f52 	.inst	0x00020f52 ; undefined
    3d70:	00000000 	.inst	0x00000000 ; undefined
    3d74:	00035800 	.inst	0x00035800 ; undefined
    3d78:	00000000 	.inst	0x00000000 ; undefined
    3d7c:	64000100 	.inst	0x64000100 ; undefined
    3d80:	00000358 	.inst	0x00000358 ; undefined
    3d84:	00000000 	.inst	0x00000000 ; undefined
    3d88:	00000394 	.inst	0x00000394 ; undefined
    3d8c:	00000000 	.inst	0x00000000 ; undefined
    3d90:	01f30004 	.inst	0x01f30004 ; undefined
    3d94:	03949f52 	.inst	0x03949f52 ; undefined
    3d98:	00000000 	.inst	0x00000000 ; undefined
    3d9c:	04500000 	.inst	0x04500000 ; undefined
    3da0:	00000000 	.inst	0x00000000 ; undefined
    3da4:	00010000 	.inst	0x00010000 ; undefined
    3da8:	00000064 	.inst	0x00000064 ; undefined
	...
    3db8:	0001b800 	.inst	0x0001b800 ; undefined
    3dbc:	00000000 	.inst	0x00000000 ; undefined
    3dc0:	00020f00 	.inst	0x00020f00 ; undefined
    3dc4:	00000000 	.inst	0x00000000 ; undefined
    3dc8:	53000100 	ubfx	w0, w8, #0, #1
    3dcc:	0000020f 	.inst	0x0000020f ; undefined
    3dd0:	00000000 	.inst	0x00000000 ; undefined
    3dd4:	00000384 	.inst	0x00000384 ; undefined
    3dd8:	00000000 	.inst	0x00000000 ; undefined
    3ddc:	84660001 	.inst	0x84660001 ; undefined
    3de0:	00000003 	.inst	0x00000003 ; undefined
    3de4:	94000000 	bl	3de4 <_stack_size+0x2de4>
    3de8:	00000003 	.inst	0x00000003 ; undefined
    3dec:	04000000 	.inst	0x04000000 ; undefined
    3df0:	5301f300 	.inst	0x5301f300 ; undefined
    3df4:	0003949f 	.inst	0x0003949f ; undefined
    3df8:	00000000 	.inst	0x00000000 ; undefined
    3dfc:	00045000 	.inst	0x00045000 ; undefined
    3e00:	00000000 	.inst	0x00000000 ; undefined
    3e04:	66000100 	.inst	0x66000100 ; undefined
	...
    3e18:	000001b8 	.inst	0x000001b8 ; undefined
    3e1c:	00000000 	.inst	0x00000000 ; undefined
    3e20:	0000020f 	.inst	0x0000020f ; undefined
    3e24:	00000000 	.inst	0x00000000 ; undefined
    3e28:	0f540001 	.inst	0x0f540001 ; undefined
    3e2c:	00000002 	.inst	0x00000002 ; undefined
    3e30:	90000000 	adrp	x0, 3000 <_stack_size+0x2000>
    3e34:	00000003 	.inst	0x00000003 ; undefined
    3e38:	02000000 	.inst	0x02000000 ; undefined
    3e3c:	907c9100 	adrp	x0, f9223000 <SMC_ID_HW_RSA+0x752130f9>
    3e40:	00000003 	.inst	0x00000003 ; undefined
    3e44:	94000000 	bl	3e44 <_stack_size+0x2e44>
    3e48:	00000003 	.inst	0x00000003 ; undefined
    3e4c:	02000000 	.inst	0x02000000 ; undefined
    3e50:	947c8f00 	bl	1f27a50 <MPIDR_EL1_MT+0xf27a50>
    3e54:	00000003 	.inst	0x00000003 ; undefined
    3e58:	50000000 	adr	x0, 3e5a <_stack_size+0x2e5a>
    3e5c:	00000004 	.inst	0x00000004 ; undefined
    3e60:	02000000 	.inst	0x02000000 ; undefined
    3e64:	007c9100 	.inst	0x007c9100 ; undefined
	...
    3e74:	b8000000 	stur	w0, [x0]
    3e78:	00000001 	.inst	0x00000001 ; undefined
    3e7c:	0f000000 	.inst	0x0f000000 ; undefined
    3e80:	00000002 	.inst	0x00000002 ; undefined
    3e84:	01000000 	.inst	0x01000000 ; undefined
    3e88:	020f5500 	.inst	0x020f5500 ; undefined
    3e8c:	00000000 	.inst	0x00000000 ; undefined
    3e90:	031c0000 	.inst	0x031c0000 ; undefined
    3e94:	00000000 	.inst	0x00000000 ; undefined
    3e98:	00010000 	.inst	0x00010000 ; undefined
    3e9c:	00031c68 	.inst	0x00031c68 ; undefined
    3ea0:	00000000 	.inst	0x00000000 ; undefined
    3ea4:	00039400 	.inst	0x00039400 ; undefined
    3ea8:	00000000 	.inst	0x00000000 ; undefined
    3eac:	f3000400 	.inst	0xf3000400 ; undefined
    3eb0:	949f5501 	bl	27d92b4 <MPIDR_EL1_MT+0x17d92b4>
    3eb4:	00000003 	.inst	0x00000003 ; undefined
    3eb8:	d4000000 	.inst	0xd4000000 ; undefined
    3ebc:	00000003 	.inst	0x00000003 ; undefined
    3ec0:	01000000 	.inst	0x01000000 ; undefined
    3ec4:	03d46800 	.inst	0x03d46800 ; undefined
    3ec8:	00000000 	.inst	0x00000000 ; undefined
    3ecc:	03f00000 	.inst	0x03f00000 ; undefined
    3ed0:	00000000 	.inst	0x00000000 ; undefined
    3ed4:	00040000 	.inst	0x00040000 ; undefined
    3ed8:	9f5501f3 	.inst	0x9f5501f3 ; undefined
    3edc:	000003f0 	.inst	0x000003f0 ; undefined
    3ee0:	00000000 	.inst	0x00000000 ; undefined
    3ee4:	00000450 	.inst	0x00000450 ; undefined
    3ee8:	00000000 	.inst	0x00000000 ; undefined
    3eec:	00680001 	.inst	0x00680001 ; undefined
	...
    3efc:	50000000 	adr	x0, 3efe <_stack_size+0x2efe>
    3f00:	00000004 	.inst	0x00000004 ; undefined
    3f04:	70000000 	adr	x0, 3f07 <_stack_size+0x2f07>
    3f08:	00000004 	.inst	0x00000004 ; undefined
    3f0c:	01000000 	.inst	0x01000000 ; undefined
    3f10:	04705000 	.inst	0x04705000 ; undefined
    3f14:	00000000 	.inst	0x00000000 ; undefined
    3f18:	06040000 	.inst	0x06040000 ; undefined
    3f1c:	00000000 	.inst	0x00000000 ; undefined
    3f20:	00010000 	.inst	0x00010000 ; undefined
    3f24:	00060465 	.inst	0x00060465 ; undefined
    3f28:	00000000 	.inst	0x00000000 ; undefined
    3f2c:	00061800 	.inst	0x00061800 ; undefined
    3f30:	00000000 	.inst	0x00000000 ; undefined
    3f34:	f3000400 	.inst	0xf3000400 ; undefined
    3f38:	189f5001 	ldr	w1, fffffffffff42938 <SMC_ID_HW_RSA+0xffffffff7bf32a31>
    3f3c:	00000006 	.inst	0x00000006 ; undefined
    3f40:	24000000 	.inst	0x24000000 ; undefined
    3f44:	00000006 	.inst	0x00000006 ; undefined
    3f48:	01000000 	.inst	0x01000000 ; undefined
    3f4c:	06246500 	.inst	0x06246500 ; undefined
    3f50:	00000000 	.inst	0x00000000 ; undefined
    3f54:	06340000 	.inst	0x06340000 ; undefined
    3f58:	00000000 	.inst	0x00000000 ; undefined
    3f5c:	00040000 	.inst	0x00040000 ; undefined
    3f60:	9f5001f3 	.inst	0x9f5001f3 ; undefined
    3f64:	00000634 	.inst	0x00000634 ; undefined
    3f68:	00000000 	.inst	0x00000000 ; undefined
    3f6c:	000006c4 	.inst	0x000006c4 ; undefined
    3f70:	00000000 	.inst	0x00000000 ; undefined
    3f74:	00650001 	.inst	0x00650001 ; undefined
	...
    3f84:	50000000 	adr	x0, 3f86 <_stack_size+0x2f86>
    3f88:	00000004 	.inst	0x00000004 ; undefined
    3f8c:	60000000 	.inst	0x60000000 ; undefined
    3f90:	00000004 	.inst	0x00000004 ; undefined
    3f94:	01000000 	.inst	0x01000000 ; undefined
    3f98:	04605100 	.inst	0x04605100 ; undefined
    3f9c:	00000000 	.inst	0x00000000 ; undefined
    3fa0:	06140000 	.inst	0x06140000 ; undefined
    3fa4:	00000000 	.inst	0x00000000 ; undefined
    3fa8:	00010000 	.inst	0x00010000 ; undefined
    3fac:	00061464 	.inst	0x00061464 ; undefined
    3fb0:	00000000 	.inst	0x00000000 ; undefined
    3fb4:	00061800 	.inst	0x00061800 ; undefined
    3fb8:	00000000 	.inst	0x00000000 ; undefined
    3fbc:	f3000400 	.inst	0xf3000400 ; undefined
    3fc0:	189f5101 	ldr	w1, fffffffffff429e0 <SMC_ID_HW_RSA+0xffffffff7bf32ad9>
    3fc4:	00000006 	.inst	0x00000006 ; undefined
    3fc8:	30000000 	adr	x0, 3fc9 <_stack_size+0x2fc9>
    3fcc:	00000006 	.inst	0x00000006 ; undefined
    3fd0:	01000000 	.inst	0x01000000 ; undefined
    3fd4:	06306400 	.inst	0x06306400 ; undefined
    3fd8:	00000000 	.inst	0x00000000 ; undefined
    3fdc:	06340000 	.inst	0x06340000 ; undefined
    3fe0:	00000000 	.inst	0x00000000 ; undefined
    3fe4:	00040000 	.inst	0x00040000 ; undefined
    3fe8:	9f5101f3 	.inst	0x9f5101f3 ; undefined
    3fec:	00000634 	.inst	0x00000634 ; undefined
    3ff0:	00000000 	.inst	0x00000000 ; undefined
    3ff4:	000006c4 	.inst	0x000006c4 ; undefined
    3ff8:	00000000 	.inst	0x00000000 ; undefined
    3ffc:	00640001 	.inst	0x00640001 ; undefined
	...
    400c:	50000000 	adr	x0, 400e <_stack_size+0x300e>
    4010:	00000004 	.inst	0x00000004 ; undefined
    4014:	ab000000 	adds	x0, x0, x0
    4018:	00000004 	.inst	0x00000004 ; undefined
    401c:	01000000 	.inst	0x01000000 ; undefined
    4020:	04ab5200 	.inst	0x04ab5200 ; undefined
    4024:	00000000 	.inst	0x00000000 ; undefined
    4028:	06140000 	.inst	0x06140000 ; undefined
    402c:	00000000 	.inst	0x00000000 ; undefined
    4030:	00010000 	.inst	0x00010000 ; undefined
    4034:	00061463 	.inst	0x00061463 ; undefined
    4038:	00000000 	.inst	0x00000000 ; undefined
    403c:	00061800 	.inst	0x00061800 ; undefined
    4040:	00000000 	.inst	0x00000000 ; undefined
    4044:	f3000400 	.inst	0xf3000400 ; undefined
    4048:	189f5201 	ldr	w1, fffffffffff42a88 <SMC_ID_HW_RSA+0xffffffff7bf32b81>
    404c:	00000006 	.inst	0x00000006 ; undefined
    4050:	34000000 	cbz	w0, 4050 <_stack_size+0x3050>
    4054:	00000006 	.inst	0x00000006 ; undefined
    4058:	01000000 	.inst	0x01000000 ; undefined
    405c:	06345200 	.inst	0x06345200 ; undefined
    4060:	00000000 	.inst	0x00000000 ; undefined
    4064:	06c40000 	.inst	0x06c40000 ; undefined
    4068:	00000000 	.inst	0x00000000 ; undefined
    406c:	00010000 	.inst	0x00010000 ; undefined
    4070:	00000063 	.inst	0x00000063 ; undefined
	...
    4080:	00045000 	.inst	0x00045000 ; undefined
    4084:	00000000 	.inst	0x00000000 ; undefined
    4088:	0004ab00 	.inst	0x0004ab00 ; undefined
    408c:	00000000 	.inst	0x00000000 ; undefined
    4090:	53000100 	ubfx	w0, w8, #0, #1
    4094:	000004ab 	.inst	0x000004ab ; undefined
    4098:	00000000 	.inst	0x00000000 ; undefined
    409c:	00000604 	.inst	0x00000604 ; undefined
    40a0:	00000000 	.inst	0x00000000 ; undefined
    40a4:	04660001 	.inst	0x04660001 ; undefined
    40a8:	00000006 	.inst	0x00000006 ; undefined
    40ac:	18000000 	ldr	w0, 40ac <_stack_size+0x30ac>
    40b0:	00000006 	.inst	0x00000006 ; undefined
    40b4:	04000000 	.inst	0x04000000 ; undefined
    40b8:	5301f300 	.inst	0x5301f300 ; undefined
    40bc:	0006189f 	.inst	0x0006189f ; undefined
    40c0:	00000000 	.inst	0x00000000 ; undefined
    40c4:	00063400 	.inst	0x00063400 ; undefined
    40c8:	00000000 	.inst	0x00000000 ; undefined
    40cc:	53000100 	ubfx	w0, w8, #0, #1
    40d0:	00000634 	.inst	0x00000634 ; undefined
    40d4:	00000000 	.inst	0x00000000 ; undefined
    40d8:	000006c4 	.inst	0x000006c4 ; undefined
    40dc:	00000000 	.inst	0x00000000 ; undefined
    40e0:	00660001 	.inst	0x00660001 ; undefined
	...
    40f0:	50000000 	adr	x0, 40f2 <_stack_size+0x30f2>
    40f4:	00000004 	.inst	0x00000004 ; undefined
    40f8:	ab000000 	adds	x0, x0, x0
    40fc:	00000004 	.inst	0x00000004 ; undefined
    4100:	01000000 	.inst	0x01000000 ; undefined
    4104:	04ab5400 	.inst	0x04ab5400 ; undefined
    4108:	00000000 	.inst	0x00000000 ; undefined
    410c:	06080000 	.inst	0x06080000 ; undefined
    4110:	00000000 	.inst	0x00000000 ; undefined
    4114:	00010000 	.inst	0x00010000 ; undefined
    4118:	00060867 	.inst	0x00060867 ; undefined
    411c:	00000000 	.inst	0x00000000 ; undefined
    4120:	00061800 	.inst	0x00061800 ; undefined
    4124:	00000000 	.inst	0x00000000 ; undefined
    4128:	f3000400 	.inst	0xf3000400 ; undefined
    412c:	189f5401 	ldr	w1, fffffffffff42bac <SMC_ID_HW_RSA+0xffffffff7bf32ca5>
    4130:	00000006 	.inst	0x00000006 ; undefined
    4134:	34000000 	cbz	w0, 4134 <_stack_size+0x3134>
    4138:	00000006 	.inst	0x00000006 ; undefined
    413c:	01000000 	.inst	0x01000000 ; undefined
    4140:	06345400 	.inst	0x06345400 ; undefined
    4144:	00000000 	.inst	0x00000000 ; undefined
    4148:	06c40000 	.inst	0x06c40000 ; undefined
    414c:	00000000 	.inst	0x00000000 ; undefined
    4150:	00010000 	.inst	0x00010000 ; undefined
    4154:	00000067 	.inst	0x00000067 ; undefined
	...
    4164:	00003800 	.inst	0x00003800 ; undefined
    4168:	00000000 	.inst	0x00000000 ; undefined
    416c:	00003c00 	.inst	0x00003c00 ; undefined
    4170:	00000000 	.inst	0x00000000 ; undefined
    4174:	50000100 	adr	x0, 4196 <_stack_size+0x3196>
    4178:	0000003c 	.inst	0x0000003c ; undefined
    417c:	00000000 	.inst	0x00000000 ; undefined
    4180:	00000040 	.inst	0x00000040 ; undefined
    4184:	00000000 	.inst	0x00000000 ; undefined
    4188:	01f30004 	.inst	0x01f30004 ; undefined
    418c:	00009f50 	.inst	0x00009f50 ; undefined
	...
    419c:	01200000 	.inst	0x01200000 ; undefined
    41a0:	00000000 	.inst	0x00000000 ; undefined
    41a4:	01340000 	.inst	0x01340000 ; undefined
    41a8:	00000000 	.inst	0x00000000 ; undefined
    41ac:	00010000 	.inst	0x00010000 ; undefined
    41b0:	00013450 	.inst	0x00013450 ; undefined
    41b4:	00000000 	.inst	0x00000000 ; undefined
    41b8:	00041800 	.inst	0x00041800 ; undefined
    41bc:	00000000 	.inst	0x00000000 ; undefined
    41c0:	91000200 	add	x0, x16, #0x0
    41c4:	0004186c 	.inst	0x0004186c ; undefined
    41c8:	00000000 	.inst	0x00000000 ; undefined
    41cc:	00041c00 	.inst	0x00041c00 ; undefined
    41d0:	00000000 	.inst	0x00000000 ; undefined
    41d4:	8f000200 	.inst	0x8f000200 ; undefined
    41d8:	0000006c 	.inst	0x0000006c ; undefined
	...
    41e8:	00012000 	.inst	0x00012000 ; undefined
    41ec:	00000000 	.inst	0x00000000 ; undefined
    41f0:	00013400 	.inst	0x00013400 ; undefined
    41f4:	00000000 	.inst	0x00000000 ; undefined
    41f8:	51000100 	sub	w0, w8, #0x0
    41fc:	00000134 	.inst	0x00000134 ; undefined
    4200:	00000000 	.inst	0x00000000 ; undefined
    4204:	00000418 	.inst	0x00000418 ; undefined
    4208:	00000000 	.inst	0x00000000 ; undefined
    420c:	68910002 	.inst	0x68910002 ; undefined
    4210:	00000418 	.inst	0x00000418 ; undefined
    4214:	00000000 	.inst	0x00000000 ; undefined
    4218:	0000041c 	.inst	0x0000041c ; undefined
    421c:	00000000 	.inst	0x00000000 ; undefined
    4220:	688f0002 	.inst	0x688f0002 ; undefined
	...
    4234:	00000154 	.inst	0x00000154 ; undefined
    4238:	00000000 	.inst	0x00000000 ; undefined
    423c:	0000015c 	.inst	0x0000015c ; undefined
    4240:	00000000 	.inst	0x00000000 ; undefined
    4244:	5c500001 	ldr	d1, a4244 <_stack_size+0xa3244>
    4248:	00000001 	.inst	0x00000001 ; undefined
    424c:	d4000000 	.inst	0xd4000000 ; undefined
    4250:	00000002 	.inst	0x00000002 ; undefined
    4254:	02000000 	.inst	0x02000000 ; undefined
    4258:	dc749100 	.inst	0xdc749100 ; undefined
    425c:	00000002 	.inst	0x00000002 ; undefined
    4260:	14000000 	b	4260 <_stack_size+0x3260>
    4264:	00000004 	.inst	0x00000004 ; undefined
    4268:	02000000 	.inst	0x02000000 ; undefined
    426c:	00749100 	.inst	0x00749100 ; undefined
	...
    427c:	30000000 	adr	x0, 427d <_stack_size+0x327d>
    4280:	00000001 	.inst	0x00000001 ; undefined
    4284:	04000000 	.inst	0x04000000 ; undefined
    4288:	00000004 	.inst	0x00000004 ; undefined
    428c:	02000000 	.inst	0x02000000 ; undefined
    4290:	047c9100 	.inst	0x047c9100 ; undefined
    4294:	00000004 	.inst	0x00000004 ; undefined
    4298:	08000000 	stxrb	w0, w0, [x0]
    429c:	00000004 	.inst	0x00000004 ; undefined
    42a0:	01000000 	.inst	0x01000000 ; undefined
    42a4:	04085000 	.inst	0x04085000 ; undefined
    42a8:	00000000 	.inst	0x00000000 ; undefined
    42ac:	04180000 	.inst	0x04180000 ; undefined
    42b0:	00000000 	.inst	0x00000000 ; undefined
    42b4:	00020000 	.inst	0x00020000 ; undefined
    42b8:	04187c91 	.inst	0x04187c91 ; undefined
    42bc:	00000000 	.inst	0x00000000 ; undefined
    42c0:	041c0000 	.inst	0x041c0000 ; undefined
    42c4:	00000000 	.inst	0x00000000 ; undefined
    42c8:	00020000 	.inst	0x00020000 ; undefined
    42cc:	00007c8f 	.inst	0x00007c8f ; undefined
	...
    42dc:	01340000 	.inst	0x01340000 ; undefined
    42e0:	00000000 	.inst	0x00000000 ; undefined
    42e4:	04180000 	.inst	0x04180000 ; undefined
    42e8:	00000000 	.inst	0x00000000 ; undefined
    42ec:	00020000 	.inst	0x00020000 ; undefined
    42f0:	04187891 	.inst	0x04187891 ; undefined
    42f4:	00000000 	.inst	0x00000000 ; undefined
    42f8:	041c0000 	.inst	0x041c0000 ; undefined
    42fc:	00000000 	.inst	0x00000000 ; undefined
    4300:	00020000 	.inst	0x00020000 ; undefined
    4304:	0000788f 	.inst	0x0000788f ; undefined
	...
    4314:	04940000 	.inst	0x04940000 ; undefined
    4318:	00000000 	.inst	0x00000000 ; undefined
    431c:	04980000 	.inst	0x04980000 ; undefined
    4320:	00000000 	.inst	0x00000000 ; undefined
    4324:	00020000 	.inst	0x00020000 ; undefined
    4328:	04989f30 	.inst	0x04989f30 ; undefined
    432c:	00000000 	.inst	0x00000000 ; undefined
    4330:	05040000 	.inst	0x05040000 ; undefined
    4334:	00000000 	.inst	0x00000000 ; undefined
    4338:	00010000 	.inst	0x00010000 ; undefined
    433c:	00000063 	.inst	0x00000063 ; undefined
	...
    434c:	0004dc00 	.inst	0x0004dc00 ; undefined
    4350:	00000000 	.inst	0x00000000 ; undefined
    4354:	0004e800 	.inst	0x0004e800 ; undefined
    4358:	00000000 	.inst	0x00000000 ; undefined
    435c:	50000100 	adr	x0, 437e <_stack_size+0x337e>
    4360:	000004e8 	.inst	0x000004e8 ; undefined
    4364:	00000000 	.inst	0x00000000 ; undefined
    4368:	00000590 	.inst	0x00000590 ; undefined
    436c:	00000000 	.inst	0x00000000 ; undefined
    4370:	2c680001 	ldnp	s1, s0, [x0,#-192]
    4374:	00000006 	.inst	0x00000006 ; undefined
    4378:	30000000 	adr	x0, 4379 <_stack_size+0x3379>
    437c:	00000006 	.inst	0x00000006 ; undefined
    4380:	01000000 	.inst	0x01000000 ; undefined
    4384:	00006800 	.inst	0x00006800 ; undefined
	...
    4394:	04cc0000 	.inst	0x04cc0000 ; undefined
    4398:	00000000 	.inst	0x00000000 ; undefined
    439c:	05440000 	.inst	0x05440000 ; undefined
    43a0:	00000000 	.inst	0x00000000 ; undefined
    43a4:	00010000 	.inst	0x00010000 ; undefined
    43a8:	00054465 	.inst	0x00054465 ; undefined
    43ac:	00000000 	.inst	0x00000000 ; undefined
    43b0:	00059000 	.inst	0x00059000 ; undefined
    43b4:	00000000 	.inst	0x00000000 ; undefined
    43b8:	87000400 	.inst	0x87000400 ; undefined
    43bc:	2c9f7f80 	stp	s0, s31, [x28],#248
    43c0:	00000006 	.inst	0x00000006 ; undefined
    43c4:	30000000 	adr	x0, 43c5 <_stack_size+0x33c5>
    43c8:	00000006 	.inst	0x00000006 ; undefined
    43cc:	01000000 	.inst	0x01000000 ; undefined
    43d0:	00006500 	.inst	0x00006500 ; undefined
	...
    43e0:	074c0000 	.inst	0x074c0000 ; undefined
    43e4:	00000000 	.inst	0x00000000 ; undefined
    43e8:	075c0000 	.inst	0x075c0000 ; undefined
    43ec:	00000000 	.inst	0x00000000 ; undefined
    43f0:	00010000 	.inst	0x00010000 ; undefined
    43f4:	00000050 	.inst	0x00000050 ; undefined
	...
    4404:	00063000 	.inst	0x00063000 ; undefined
    4408:	00000000 	.inst	0x00000000 ; undefined
    440c:	0006b800 	.inst	0x0006b800 ; undefined
    4410:	00000000 	.inst	0x00000000 ; undefined
    4414:	30000200 	adr	x0, 4455 <_stack_size+0x3455>
    4418:	0006c89f 	.inst	0x0006c89f ; undefined
    441c:	00000000 	.inst	0x00000000 ; undefined
    4420:	00074800 	.inst	0x00074800 ; undefined
    4424:	00000000 	.inst	0x00000000 ; undefined
    4428:	30000200 	adr	x0, 4469 <_stack_size+0x3469>
    442c:	0007489f 	.inst	0x0007489f ; undefined
    4430:	00000000 	.inst	0x00000000 ; undefined
    4434:	0007ac00 	.inst	0x0007ac00 ; undefined
    4438:	00000000 	.inst	0x00000000 ; undefined
    443c:	64000100 	.inst	0x64000100 ; undefined
    4440:	000007ac 	.inst	0x000007ac ; undefined
    4444:	00000000 	.inst	0x00000000 ; undefined
    4448:	000007b3 	.inst	0x000007b3 ; undefined
    444c:	00000000 	.inst	0x00000000 ; undefined
    4450:	50500001 	adr	x1, a4452 <_stack_size+0xa3452>
    4454:	00000008 	.inst	0x00000008 ; undefined
    4458:	54000000 	b.eq	4458 <_stack_size+0x3458>
    445c:	00000008 	.inst	0x00000008 ; undefined
    4460:	01000000 	.inst	0x01000000 ; undefined
    4464:	00006400 	.inst	0x00006400 ; undefined
	...
    4474:	07440000 	.inst	0x07440000 ; undefined
    4478:	00000000 	.inst	0x00000000 ; undefined
    447c:	07ac0000 	.inst	0x07ac0000 ; undefined
    4480:	00000000 	.inst	0x00000000 ; undefined
    4484:	00010000 	.inst	0x00010000 ; undefined
    4488:	0007ac64 	.inst	0x0007ac64 ; undefined
    448c:	00000000 	.inst	0x00000000 ; undefined
    4490:	0007b300 	.inst	0x0007b300 ; undefined
    4494:	00000000 	.inst	0x00000000 ; undefined
    4498:	50000100 	adr	x0, 44ba <_stack_size+0x34ba>
    449c:	00000850 	.inst	0x00000850 ; undefined
    44a0:	00000000 	.inst	0x00000000 ; undefined
    44a4:	00000854 	.inst	0x00000854 ; undefined
    44a8:	00000000 	.inst	0x00000000 ; undefined
    44ac:	00640001 	.inst	0x00640001 ; undefined
	...
    44bc:	54000000 	b.eq	44bc <_stack_size+0x34bc>
    44c0:	00000008 	.inst	0x00000008 ; undefined
    44c4:	68000000 	.inst	0x68000000 ; undefined
    44c8:	00000008 	.inst	0x00000008 ; undefined
    44cc:	01000000 	.inst	0x01000000 ; undefined
    44d0:	08685000 	.inst	0x08685000 ; undefined
    44d4:	00000000 	.inst	0x00000000 ; undefined
    44d8:	0b8c0000 	add	w0, w0, w12, asr #0
    44dc:	00000000 	.inst	0x00000000 ; undefined
    44e0:	00020000 	.inst	0x00020000 ; undefined
    44e4:	0b8c6c91 	add	w17, w4, w12, asr #27
    44e8:	00000000 	.inst	0x00000000 ; undefined
    44ec:	0b900000 	add	w0, w0, w16, asr #0
    44f0:	00000000 	.inst	0x00000000 ; undefined
    44f4:	00020000 	.inst	0x00020000 ; undefined
    44f8:	00006c8f 	.inst	0x00006c8f ; undefined
	...
    4508:	08540000 	ldxrb	w0, [x0]
    450c:	00000000 	.inst	0x00000000 ; undefined
    4510:	08680000 	.inst	0x08680000 ; undefined
    4514:	00000000 	.inst	0x00000000 ; undefined
    4518:	00010000 	.inst	0x00010000 ; undefined
    451c:	00086851 	.inst	0x00086851 ; undefined
    4520:	00000000 	.inst	0x00000000 ; undefined
    4524:	000b8c00 	.inst	0x000b8c00 ; undefined
    4528:	00000000 	.inst	0x00000000 ; undefined
    452c:	91000200 	add	x0, x16, #0x0
    4530:	000b8c68 	.inst	0x000b8c68 ; undefined
    4534:	00000000 	.inst	0x00000000 ; undefined
    4538:	000b9000 	.inst	0x000b9000 ; undefined
    453c:	00000000 	.inst	0x00000000 ; undefined
    4540:	8f000200 	.inst	0x8f000200 ; undefined
    4544:	00000068 	.inst	0x00000068 ; undefined
	...
    4554:	00088800 	.inst	0x00088800 ; undefined
    4558:	00000000 	.inst	0x00000000 ; undefined
    455c:	00089000 	.inst	0x00089000 ; undefined
    4560:	00000000 	.inst	0x00000000 ; undefined
    4564:	50000100 	adr	x0, 4586 <_stack_size+0x3586>
    4568:	00000890 	.inst	0x00000890 ; undefined
    456c:	00000000 	.inst	0x00000000 ; undefined
    4570:	000008dc 	.inst	0x000008dc ; undefined
    4574:	00000000 	.inst	0x00000000 ; undefined
    4578:	74910002 	.inst	0x74910002 ; undefined
    457c:	000008e4 	.inst	0x000008e4 ; undefined
    4580:	00000000 	.inst	0x00000000 ; undefined
    4584:	00000b88 	.inst	0x00000b88 ; undefined
    4588:	00000000 	.inst	0x00000000 ; undefined
    458c:	74910002 	.inst	0x74910002 ; undefined
	...
    45a0:	00000864 	.inst	0x00000864 ; undefined
    45a4:	00000000 	.inst	0x00000000 ; undefined
    45a8:	00000b78 	.inst	0x00000b78 ; undefined
    45ac:	00000000 	.inst	0x00000000 ; undefined
    45b0:	7c910002 	.inst	0x7c910002 ; undefined
    45b4:	00000b78 	.inst	0x00000b78 ; undefined
    45b8:	00000000 	.inst	0x00000000 ; undefined
    45bc:	00000b7c 	.inst	0x00000b7c ; undefined
    45c0:	00000000 	.inst	0x00000000 ; undefined
    45c4:	7c500001 	ldur	h1, [x0,#-256]
    45c8:	0000000b 	.inst	0x0000000b ; undefined
    45cc:	8c000000 	.inst	0x8c000000 ; undefined
    45d0:	0000000b 	.inst	0x0000000b ; undefined
    45d4:	02000000 	.inst	0x02000000 ; undefined
    45d8:	8c7c9100 	.inst	0x8c7c9100 ; undefined
    45dc:	0000000b 	.inst	0x0000000b ; undefined
    45e0:	90000000 	adrp	x0, 4000 <_stack_size+0x3000>
    45e4:	0000000b 	.inst	0x0000000b ; undefined
    45e8:	02000000 	.inst	0x02000000 ; undefined
    45ec:	007c8f00 	.inst	0x007c8f00 ; undefined
	...
    45fc:	68000000 	.inst	0x68000000 ; undefined
    4600:	00000008 	.inst	0x00000008 ; undefined
    4604:	8c000000 	.inst	0x8c000000 ; undefined
    4608:	0000000b 	.inst	0x0000000b ; undefined
    460c:	02000000 	.inst	0x02000000 ; undefined
    4610:	8c789100 	.inst	0x8c789100 ; undefined
    4614:	0000000b 	.inst	0x0000000b ; undefined
    4618:	90000000 	adrp	x0, 4000 <_stack_size+0x3000>
    461c:	0000000b 	.inst	0x0000000b ; undefined
    4620:	02000000 	.inst	0x02000000 ; undefined
    4624:	00788f00 	.inst	0x00788f00 ; undefined
	...
    4634:	80000000 	.inst	0x80000000 ; undefined
    4638:	0000000d 	.inst	0x0000000d ; undefined
    463c:	87000000 	.inst	0x87000000 ; undefined
    4640:	0000000d 	.inst	0x0000000d ; undefined
    4644:	01000000 	.inst	0x01000000 ; undefined
    4648:	0d885000 	st1	{v0.h}[2], [x0], x8
    464c:	00000000 	.inst	0x00000000 ; undefined
    4650:	0dc40000 	ld1	{v0.b}[0], [x0], x4
    4654:	00000000 	.inst	0x00000000 ; undefined
    4658:	00010000 	.inst	0x00010000 ; undefined
    465c:	00000050 	.inst	0x00000050 ; undefined
	...
    466c:	000cf800 	.inst	0x000cf800 ; undefined
    4670:	00000000 	.inst	0x00000000 ; undefined
    4674:	000dec00 	.inst	0x000dec00 ; undefined
    4678:	00000000 	.inst	0x00000000 ; undefined
    467c:	63000100 	.inst	0x63000100 ; undefined
	...
    4690:	00000d28 	.inst	0x00000d28 ; undefined
    4694:	00000000 	.inst	0x00000000 ; undefined
    4698:	00000dc4 	.inst	0x00000dc4 ; undefined
    469c:	00000000 	.inst	0x00000000 ; undefined
    46a0:	c0080003 	.inst	0xc0080003 ; undefined
    46a4:	0000009f 	.inst	0x0000009f ; undefined
	...
    46b4:	000b9000 	.inst	0x000b9000 ; undefined
    46b8:	00000000 	.inst	0x00000000 ; undefined
    46bc:	000be800 	.inst	0x000be800 ; undefined
    46c0:	00000000 	.inst	0x00000000 ; undefined
    46c4:	30000200 	adr	x0, 4705 <_stack_size+0x3705>
    46c8:	0000009f 	.inst	0x0000009f ; undefined
	...
    46d8:	000b9000 	.inst	0x000b9000 ; undefined
    46dc:	00000000 	.inst	0x00000000 ; undefined
    46e0:	000be800 	.inst	0x000be800 ; undefined
    46e4:	00000000 	.inst	0x00000000 ; undefined
    46e8:	30000200 	adr	x0, 4729 <_stack_size+0x3729>
    46ec:	000c789f 	.inst	0x000c789f ; undefined
    46f0:	00000000 	.inst	0x00000000 ; undefined
    46f4:	000c8000 	.inst	0x000c8000 ; undefined
    46f8:	00000000 	.inst	0x00000000 ; undefined
    46fc:	50000100 	adr	x0, 471e <_stack_size+0x371e>
    4700:	00000cc4 	.inst	0x00000cc4 ; undefined
    4704:	00000000 	.inst	0x00000000 ; undefined
    4708:	00000cc7 	.inst	0x00000cc7 ; undefined
    470c:	00000000 	.inst	0x00000000 ; undefined
    4710:	c8500001 	ldxr	x1, [x0]
    4714:	0000000c 	.inst	0x0000000c ; undefined
    4718:	d0000000 	adrp	x0, 6000 <_stack_size+0x5000>
    471c:	0000000c 	.inst	0x0000000c ; undefined
    4720:	01000000 	.inst	0x01000000 ; undefined
    4724:	0cd85000 	.inst	0x0cd85000 ; undefined
    4728:	00000000 	.inst	0x00000000 ; undefined
    472c:	0cdc0000 	ld4	{v0.8b-v3.8b}, [x0], x28
    4730:	00000000 	.inst	0x00000000 ; undefined
    4734:	00010000 	.inst	0x00010000 ; undefined
    4738:	00000050 	.inst	0x00000050 ; undefined
	...
    4748:	000c4c00 	.inst	0x000c4c00 ; undefined
    474c:	00000000 	.inst	0x00000000 ; undefined
    4750:	000cac00 	.inst	0x000cac00 ; undefined
    4754:	00000000 	.inst	0x00000000 ; undefined
    4758:	08000300 	stxrb	w0, w0, [x24]
    475c:	0cc49fc0 	.inst	0x0cc49fc0 ; undefined
    4760:	00000000 	.inst	0x00000000 ; undefined
    4764:	0dfc0000 	ld2	{v0.b, v1.b}[0], [x0], x28
    4768:	00000000 	.inst	0x00000000 ; undefined
    476c:	00030000 	.inst	0x00030000 ; undefined
    4770:	009fc008 	.inst	0x009fc008 ; undefined
	...
    4780:	68000000 	.inst	0x68000000 ; undefined
    4784:	0000000c 	.inst	0x0000000c ; undefined
    4788:	74000000 	.inst	0x74000000 ; undefined
    478c:	0000000c 	.inst	0x0000000c ; undefined
    4790:	04000000 	.inst	0x04000000 ; undefined
    4794:	08000a00 	stxrb	w0, w0, [x16]
    4798:	0000009f 	.inst	0x0000009f ; undefined
	...
    47a8:	000c6800 	.inst	0x000c6800 ; undefined
    47ac:	00000000 	.inst	0x00000000 ; undefined
    47b0:	000c7400 	.inst	0x000c7400 ; undefined
    47b4:	00000000 	.inst	0x00000000 ; undefined
    47b8:	30000200 	adr	x0, 47f9 <_stack_size+0x37f9>
    47bc:	0000009f 	.inst	0x0000009f ; undefined
	...
    47cc:	000d6c00 	.inst	0x000d6c00 ; undefined
    47d0:	00000000 	.inst	0x00000000 ; undefined
    47d4:	000d7c00 	.inst	0x000d7c00 ; undefined
    47d8:	00000000 	.inst	0x00000000 ; undefined
    47dc:	0a000400 	and	w0, w0, w0, lsl #1
    47e0:	009f0800 	.inst	0x009f0800 ; undefined
	...
    47f0:	6c000000 	stnp	d0, d0, [x0]
    47f4:	0000000d 	.inst	0x0000000d ; undefined
    47f8:	7c000000 	stur	h0, [x0]
    47fc:	0000000d 	.inst	0x0000000d ; undefined
    4800:	02000000 	.inst	0x02000000 ; undefined
    4804:	009f3000 	.inst	0x009f3000 ; undefined
	...
    4814:	a4000000 	.inst	0xa4000000 ; undefined
    4818:	0000000d 	.inst	0x0000000d ; undefined
    481c:	b8000000 	stur	w0, [x0]
    4820:	0000000d 	.inst	0x0000000d ; undefined
    4824:	01000000 	.inst	0x01000000 ; undefined
    4828:	00005100 	.inst	0x00005100 ; undefined
	...
    4838:	0da40000 	st2	{v0.b, v1.b}[0], [x0], x4
    483c:	00000000 	.inst	0x00000000 ; undefined
    4840:	0dc40000 	ld1	{v0.b}[0], [x0], x4
    4844:	00000000 	.inst	0x00000000 ; undefined
    4848:	00020000 	.inst	0x00020000 ; undefined
    484c:	00009f30 	.inst	0x00009f30 ; undefined
	...
    485c:	0e040000 	tbl	v0.8b, {v0.16b}, v4.8b
    4860:	00000000 	.inst	0x00000000 ; undefined
    4864:	0e380000 	saddl	v0.8h, v0.8b, v24.8b
    4868:	00000000 	.inst	0x00000000 ; undefined
    486c:	00010000 	.inst	0x00010000 ; undefined
    4870:	000e3850 	.inst	0x000e3850 ; undefined
    4874:	00000000 	.inst	0x00000000 ; undefined
    4878:	000ec800 	.inst	0x000ec800 ; undefined
    487c:	00000000 	.inst	0x00000000 ; undefined
    4880:	63000100 	.inst	0x63000100 ; undefined
    4884:	00000ec8 	.inst	0x00000ec8 ; undefined
    4888:	00000000 	.inst	0x00000000 ; undefined
    488c:	00000ed4 	.inst	0x00000ed4 ; undefined
    4890:	00000000 	.inst	0x00000000 ; undefined
    4894:	7f830003 	.inst	0x7f830003 ; undefined
    4898:	000ed49f 	.inst	0x000ed49f ; undefined
    489c:	00000000 	.inst	0x00000000 ; undefined
    48a0:	000ef400 	.inst	0x000ef400 ; undefined
    48a4:	00000000 	.inst	0x00000000 ; undefined
    48a8:	63000100 	.inst	0x63000100 ; undefined
    48ac:	00000ef8 	.inst	0x00000ef8 ; undefined
    48b0:	00000000 	.inst	0x00000000 ; undefined
    48b4:	00000f28 	.inst	0x00000f28 ; undefined
    48b8:	00000000 	.inst	0x00000000 ; undefined
    48bc:	00630001 	.inst	0x00630001 ; undefined
	...
    48cc:	04000000 	.inst	0x04000000 ; undefined
    48d0:	0000000e 	.inst	0x0000000e ; undefined
    48d4:	34000000 	cbz	w0, 48d4 <_stack_size+0x38d4>
    48d8:	0000000e 	.inst	0x0000000e ; undefined
    48dc:	01000000 	.inst	0x01000000 ; undefined
    48e0:	0e345100 	sabal	v0.8h, v8.8b, v20.8b
    48e4:	00000000 	.inst	0x00000000 ; undefined
    48e8:	0ef00000 	.inst	0x0ef00000 ; undefined
    48ec:	00000000 	.inst	0x00000000 ; undefined
    48f0:	00010000 	.inst	0x00010000 ; undefined
    48f4:	000ef86c 	.inst	0x000ef86c ; undefined
    48f8:	00000000 	.inst	0x00000000 ; undefined
    48fc:	000f2400 	.inst	0x000f2400 ; undefined
    4900:	00000000 	.inst	0x00000000 ; undefined
    4904:	6c000100 	stnp	d0, d0, [x8]
	...
    4918:	00000e04 	.inst	0x00000e04 ; undefined
    491c:	00000000 	.inst	0x00000000 ; undefined
    4920:	00000e94 	.inst	0x00000e94 ; undefined
    4924:	00000000 	.inst	0x00000000 ; undefined
    4928:	94520001 	bl	148492c <MPIDR_EL1_MT+0x48492c>
    492c:	0000000e 	.inst	0x0000000e ; undefined
    4930:	2c000000 	stnp	s0, s0, [x0]
    4934:	0000000f 	.inst	0x0000000f ; undefined
    4938:	04000000 	.inst	0x04000000 ; undefined
    493c:	5201f300 	eor	w0, w24, #0xaaaaaaaa
    4940:	0000009f 	.inst	0x0000009f ; undefined
	...
    4950:	000e0400 	.inst	0x000e0400 ; undefined
    4954:	00000000 	.inst	0x00000000 ; undefined
    4958:	000e3c00 	.inst	0x000e3c00 ; undefined
    495c:	00000000 	.inst	0x00000000 ; undefined
    4960:	53000100 	ubfx	w0, w8, #0, #1
    4964:	00000e3c 	.inst	0x00000e3c ; undefined
    4968:	00000000 	.inst	0x00000000 ; undefined
    496c:	00000ef4 	.inst	0x00000ef4 ; undefined
    4970:	00000000 	.inst	0x00000000 ; undefined
    4974:	f4640001 	.inst	0xf4640001 ; undefined
    4978:	0000000e 	.inst	0x0000000e ; undefined
    497c:	f8000000 	stur	x0, [x0]
    4980:	0000000e 	.inst	0x0000000e ; undefined
    4984:	04000000 	.inst	0x04000000 ; undefined
    4988:	5301f300 	.inst	0x5301f300 ; undefined
    498c:	000ef89f 	.inst	0x000ef89f ; undefined
    4990:	00000000 	.inst	0x00000000 ; undefined
    4994:	000f2800 	.inst	0x000f2800 ; undefined
    4998:	00000000 	.inst	0x00000000 ; undefined
    499c:	64000100 	.inst	0x64000100 ; undefined
    49a0:	00000f28 	.inst	0x00000f28 ; undefined
    49a4:	00000000 	.inst	0x00000000 ; undefined
    49a8:	00000f2c 	.inst	0x00000f2c ; undefined
    49ac:	00000000 	.inst	0x00000000 ; undefined
    49b0:	01f30004 	.inst	0x01f30004 ; undefined
    49b4:	00009f53 	.inst	0x00009f53 ; undefined
	...
    49c4:	0e580000 	.inst	0x0e580000 ; undefined
    49c8:	00000000 	.inst	0x00000000 ; undefined
    49cc:	0ee40000 	.inst	0x0ee40000 ; undefined
    49d0:	00000000 	.inst	0x00000000 ; undefined
    49d4:	00010000 	.inst	0x00010000 ; undefined
    49d8:	000ef865 	.inst	0x000ef865 ; undefined
    49dc:	00000000 	.inst	0x00000000 ; undefined
    49e0:	000f0c00 	.inst	0x000f0c00 ; undefined
    49e4:	00000000 	.inst	0x00000000 ; undefined
    49e8:	65000100 	.inst	0x65000100 ; undefined
	...
    49fc:	00000ea0 	.inst	0x00000ea0 ; undefined
    4a00:	00000000 	.inst	0x00000000 ; undefined
    4a04:	00000eac 	.inst	0x00000eac ; undefined
    4a08:	00000000 	.inst	0x00000000 ; undefined
    4a0c:	00500001 	.inst	0x00500001 ; undefined
	...
    4a1c:	a0000000 	.inst	0xa0000000 ; undefined
    4a20:	0000000e 	.inst	0x0000000e ; undefined
    4a24:	d8000000 	prfm	pldl1keep, 4a24 <_stack_size+0x3a24>
    4a28:	0000000e 	.inst	0x0000000e ; undefined
    4a2c:	02000000 	.inst	0x02000000 ; undefined
    4a30:	f89f3000 	prfum	pldl1keep, [x0,#-13]
    4a34:	0000000e 	.inst	0x0000000e ; undefined
    4a38:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    4a3c:	0000000f 	.inst	0x0000000f ; undefined
    4a40:	02000000 	.inst	0x02000000 ; undefined
    4a44:	009f3000 	.inst	0x009f3000 ; undefined
	...
    4a54:	a0000000 	.inst	0xa0000000 ; undefined
    4a58:	0000000e 	.inst	0x0000000e ; undefined
    4a5c:	d8000000 	prfm	pldl1keep, 4a5c <_stack_size+0x3a5c>
    4a60:	0000000e 	.inst	0x0000000e ; undefined
    4a64:	02000000 	.inst	0x02000000 ; undefined
    4a68:	f89f3400 	.inst	0xf89f3400 ; undefined
    4a6c:	0000000e 	.inst	0x0000000e ; undefined
    4a70:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    4a74:	0000000f 	.inst	0x0000000f ; undefined
    4a78:	02000000 	.inst	0x02000000 ; undefined
    4a7c:	009f3400 	.inst	0x009f3400 ; undefined
	...
    4a8c:	b4000000 	cbz	x0, 4a8c <_stack_size+0x3a8c>
    4a90:	0000000e 	.inst	0x0000000e ; undefined
    4a94:	b8000000 	stur	w0, [x0]
    4a98:	0000000e 	.inst	0x0000000e ; undefined
    4a9c:	05000000 	.inst	0x05000000 ; undefined
    4aa0:	33007000 	bfxil	w0, w0, #0, #29
    4aa4:	0ebc9f24 	mul	v4.2s, v25.2s, v28.2s
    4aa8:	00000000 	.inst	0x00000000 ; undefined
    4aac:	0ec00000 	.inst	0x0ec00000 ; undefined
    4ab0:	00000000 	.inst	0x00000000 ; undefined
    4ab4:	00010000 	.inst	0x00010000 ; undefined
    4ab8:	000f0450 	.inst	0x000f0450 ; undefined
    4abc:	00000000 	.inst	0x00000000 ; undefined
    4ac0:	000f0c00 	.inst	0x000f0c00 ; undefined
    4ac4:	00000000 	.inst	0x00000000 ; undefined
    4ac8:	50000100 	adr	x0, 4aea <_stack_size+0x3aea>
	...
    4adc:	00000f2c 	.inst	0x00000f2c ; undefined
    4ae0:	00000000 	.inst	0x00000000 ; undefined
    4ae4:	00000f64 	.inst	0x00000f64 ; undefined
    4ae8:	00000000 	.inst	0x00000000 ; undefined
    4aec:	64500001 	.inst	0x64500001 ; undefined
    4af0:	0000000f 	.inst	0x0000000f ; undefined
    4af4:	18000000 	ldr	w0, 4af4 <_stack_size+0x3af4>
    4af8:	00000010 	.inst	0x00000010 ; undefined
    4afc:	01000000 	.inst	0x01000000 ; undefined
    4b00:	10186c00 	adr	x0, 35880 <_stack_size+0x34880>
    4b04:	00000000 	.inst	0x00000000 ; undefined
    4b08:	101c0000 	adr	x0, 3cb08 <_stack_size+0x3bb08>
    4b0c:	00000000 	.inst	0x00000000 ; undefined
    4b10:	00030000 	.inst	0x00030000 ; undefined
    4b14:	1c9f7f8c 	ldr	s12, fffffffffff43b04 <SMC_ID_HW_RSA+0xffffffff7bf33bfd>
    4b18:	00000010 	.inst	0x00000010 ; undefined
    4b1c:	34000000 	cbz	w0, 4b1c <_stack_size+0x3b1c>
    4b20:	00000010 	.inst	0x00000010 ; undefined
    4b24:	01000000 	.inst	0x01000000 ; undefined
    4b28:	10446c00 	adr	x0, 8d8a8 <_stack_size+0x8c8a8>
    4b2c:	00000000 	.inst	0x00000000 ; undefined
    4b30:	13d40000 	.inst	0x13d40000 ; undefined
    4b34:	00000000 	.inst	0x00000000 ; undefined
    4b38:	00010000 	.inst	0x00010000 ; undefined
    4b3c:	0000006c 	.inst	0x0000006c ; undefined
	...
    4b4c:	000f2c00 	.inst	0x000f2c00 ; undefined
    4b50:	00000000 	.inst	0x00000000 ; undefined
    4b54:	000f6000 	.inst	0x000f6000 ; undefined
    4b58:	00000000 	.inst	0x00000000 ; undefined
    4b5c:	51000100 	sub	w0, w8, #0x0
    4b60:	00000f60 	.inst	0x00000f60 ; undefined
    4b64:	00000000 	.inst	0x00000000 ; undefined
    4b68:	00001034 	.inst	0x00001034 ; undefined
    4b6c:	00000000 	.inst	0x00000000 ; undefined
    4b70:	446b0001 	.inst	0x446b0001 ; undefined
    4b74:	00000010 	.inst	0x00000010 ; undefined
    4b78:	d4000000 	.inst	0xd4000000 ; undefined
    4b7c:	00000013 	.inst	0x00000013 ; undefined
    4b80:	01000000 	.inst	0x01000000 ; undefined
    4b84:	00006b00 	.inst	0x00006b00 ; undefined
	...
    4b94:	0f2c0000 	.inst	0x0f2c0000 ; undefined
    4b98:	00000000 	.inst	0x00000000 ; undefined
    4b9c:	0fd00000 	.inst	0x0fd00000 ; undefined
    4ba0:	00000000 	.inst	0x00000000 ; undefined
    4ba4:	00010000 	.inst	0x00010000 ; undefined
    4ba8:	000fd052 	.inst	0x000fd052 ; undefined
    4bac:	00000000 	.inst	0x00000000 ; undefined
    4bb0:	0013e400 	.inst	0x0013e400 ; undefined
    4bb4:	00000000 	.inst	0x00000000 ; undefined
    4bb8:	f3000400 	.inst	0xf3000400 ; undefined
    4bbc:	009f5201 	.inst	0x009f5201 ; undefined
	...
    4bcc:	2c000000 	stnp	s0, s0, [x0]
    4bd0:	0000000f 	.inst	0x0000000f ; undefined
    4bd4:	68000000 	.inst	0x68000000 ; undefined
    4bd8:	0000000f 	.inst	0x0000000f ; undefined
    4bdc:	01000000 	.inst	0x01000000 ; undefined
    4be0:	0f685300 	.inst	0x0f685300 ; undefined
    4be4:	00000000 	.inst	0x00000000 ; undefined
    4be8:	102c0000 	adr	x0, 5cbe8 <_stack_size+0x5bbe8>
    4bec:	00000000 	.inst	0x00000000 ; undefined
    4bf0:	00010000 	.inst	0x00010000 ; undefined
    4bf4:	00102c68 	.inst	0x00102c68 ; undefined
    4bf8:	00000000 	.inst	0x00000000 ; undefined
    4bfc:	00104400 	.inst	0x00104400 ; undefined
    4c00:	00000000 	.inst	0x00000000 ; undefined
    4c04:	f3000400 	.inst	0xf3000400 ; undefined
    4c08:	449f5301 	.inst	0x449f5301 ; undefined
    4c0c:	00000010 	.inst	0x00000010 ; undefined
    4c10:	cc000000 	.inst	0xcc000000 ; undefined
    4c14:	00000013 	.inst	0x00000013 ; undefined
    4c18:	01000000 	.inst	0x01000000 ; undefined
    4c1c:	13cc6800 	.inst	0x13cc6800 ; undefined
    4c20:	00000000 	.inst	0x00000000 ; undefined
    4c24:	13e40000 	.inst	0x13e40000 ; undefined
    4c28:	00000000 	.inst	0x00000000 ; undefined
    4c2c:	00040000 	.inst	0x00040000 ; undefined
    4c30:	9f5301f3 	.inst	0x9f5301f3 ; undefined
	...
    4c44:	00000f2c 	.inst	0x00000f2c ; undefined
    4c48:	00000000 	.inst	0x00000000 ; undefined
    4c4c:	00000fd0 	.inst	0x00000fd0 ; undefined
    4c50:	00000000 	.inst	0x00000000 ; undefined
    4c54:	d0540001 	adrp	x1, a8006000 <SMC_ID_HW_RSA+0x23ff60f9>
    4c58:	0000000f 	.inst	0x0000000f ; undefined
    4c5c:	28000000 	stnp	w0, w0, [x0]
    4c60:	00000010 	.inst	0x00000010 ; undefined
    4c64:	01000000 	.inst	0x01000000 ; undefined
    4c68:	10286500 	adr	x0, 55908 <_stack_size+0x54908>
    4c6c:	00000000 	.inst	0x00000000 ; undefined
    4c70:	13e40000 	.inst	0x13e40000 ; undefined
    4c74:	00000000 	.inst	0x00000000 ; undefined
    4c78:	00040000 	.inst	0x00040000 ; undefined
    4c7c:	9f5401f3 	.inst	0x9f5401f3 ; undefined
	...
    4c90:	00000f84 	.inst	0x00000f84 ; undefined
    4c94:	00000000 	.inst	0x00000000 ; undefined
    4c98:	00001040 	.inst	0x00001040 ; undefined
    4c9c:	00000000 	.inst	0x00000000 ; undefined
    4ca0:	44630001 	.inst	0x44630001 ; undefined
    4ca4:	00000010 	.inst	0x00000010 ; undefined
    4ca8:	c4000000 	.inst	0xc4000000 ; undefined
    4cac:	00000013 	.inst	0x00000013 ; undefined
    4cb0:	01000000 	.inst	0x01000000 ; undefined
    4cb4:	00006300 	.inst	0x00006300 ; undefined
	...
    4cc4:	0f2c0000 	.inst	0x0f2c0000 ; undefined
    4cc8:	00000000 	.inst	0x00000000 ; undefined
    4ccc:	0fd00000 	.inst	0x0fd00000 ; undefined
    4cd0:	00000000 	.inst	0x00000000 ; undefined
    4cd4:	00020000 	.inst	0x00020000 ; undefined
    4cd8:	0fd49f30 	.inst	0x0fd49f30 ; undefined
    4cdc:	00000000 	.inst	0x00000000 ; undefined
    4ce0:	0ff80000 	.inst	0x0ff80000 ; undefined
    4ce4:	00000000 	.inst	0x00000000 ; undefined
    4ce8:	00020000 	.inst	0x00020000 ; undefined
    4cec:	0ff89f30 	.inst	0x0ff89f30 ; undefined
    4cf0:	00000000 	.inst	0x00000000 ; undefined
    4cf4:	10100000 	adr	x0, 24cf4 <_stack_size+0x23cf4>
    4cf8:	00000000 	.inst	0x00000000 ; undefined
    4cfc:	00010000 	.inst	0x00010000 ; undefined
    4d00:	00105450 	.inst	0x00105450 ; undefined
    4d04:	00000000 	.inst	0x00000000 ; undefined
    4d08:	00105c00 	.inst	0x00105c00 ; undefined
    4d0c:	00000000 	.inst	0x00000000 ; undefined
    4d10:	50000100 	adr	x0, 4d32 <_stack_size+0x3d32>
	...
    4d24:	00000f2c 	.inst	0x00000f2c ; undefined
    4d28:	00000000 	.inst	0x00000000 ; undefined
    4d2c:	00000fd0 	.inst	0x00000fd0 ; undefined
    4d30:	00000000 	.inst	0x00000000 ; undefined
    4d34:	9f310002 	.inst	0x9f310002 ; undefined
    4d38:	00000fd0 	.inst	0x00000fd0 ; undefined
    4d3c:	00000000 	.inst	0x00000000 ; undefined
    4d40:	00000fd8 	.inst	0x00000fd8 ; undefined
    4d44:	00000000 	.inst	0x00000000 ; undefined
    4d48:	1c500001 	ldr	s1, a4d48 <_stack_size+0xa3d48>
    4d4c:	00000010 	.inst	0x00000010 ; undefined
    4d50:	24000000 	.inst	0x24000000 ; undefined
    4d54:	00000010 	.inst	0x00000010 ; undefined
    4d58:	01000000 	.inst	0x01000000 ; undefined
    4d5c:	10445000 	adr	x0, 8d75c <_stack_size+0x8c75c>
    4d60:	00000000 	.inst	0x00000000 ; undefined
    4d64:	10540000 	adr	x0, acd64 <_stack_size+0xabd64>
    4d68:	00000000 	.inst	0x00000000 ; undefined
    4d6c:	00010000 	.inst	0x00010000 ; undefined
    4d70:	00105450 	.inst	0x00105450 ; undefined
    4d74:	00000000 	.inst	0x00000000 ; undefined
    4d78:	0013e400 	.inst	0x0013e400 ; undefined
    4d7c:	00000000 	.inst	0x00000000 ; undefined
    4d80:	31000200 	adds	w0, w16, #0x0
    4d84:	0000009f 	.inst	0x0000009f ; undefined
	...
    4d94:	00105c00 	.inst	0x00105c00 ; undefined
    4d98:	00000000 	.inst	0x00000000 ; undefined
    4d9c:	0013c400 	.inst	0x0013c400 ; undefined
    4da0:	00000000 	.inst	0x00000000 ; undefined
    4da4:	30000200 	adr	x0, 4de5 <_stack_size+0x3de5>
    4da8:	0000009f 	.inst	0x0000009f ; undefined
	...
    4db8:	00105c00 	.inst	0x00105c00 ; undefined
    4dbc:	00000000 	.inst	0x00000000 ; undefined
    4dc0:	0013c400 	.inst	0x0013c400 ; undefined
    4dc4:	00000000 	.inst	0x00000000 ; undefined
    4dc8:	68000100 	.inst	0x68000100 ; undefined
	...
    4ddc:	00001094 	.inst	0x00001094 ; undefined
    4de0:	00000000 	.inst	0x00000000 ; undefined
    4de4:	000010a8 	.inst	0x000010a8 ; undefined
    4de8:	00000000 	.inst	0x00000000 ; undefined
    4dec:	9f300002 	.inst	0x9f300002 ; undefined
	...
    4e00:	00001094 	.inst	0x00001094 ; undefined
    4e04:	00000000 	.inst	0x00000000 ; undefined
    4e08:	000010a0 	.inst	0x000010a0 ; undefined
    4e0c:	00000000 	.inst	0x00000000 ; undefined
    4e10:	a0500001 	.inst	0xa0500001 ; undefined
    4e14:	00000010 	.inst	0x00000010 ; undefined
    4e18:	a8000000 	stnp	x0, x0, [x0]
    4e1c:	00000010 	.inst	0x00000010 ; undefined
    4e20:	15000000 	b	4004e20 <_stack_base+0xff76a0>
    4e24:	ad340300 	stp	q0, q0, [x24,#-384]
    4e28:	00000300 	.inst	0x00000300 ; undefined
    4e2c:	04940000 	.inst	0x04940000 ; undefined
    4e30:	ffffff0c 	.inst	0xffffff0c ; undefined
    4e34:	f7091aff 	.inst	0xf7091aff ; undefined
    4e38:	00009f24 	.inst	0x00009f24 ; undefined
	...
    4e48:	10880000 	adr	x0, fffffffffff14e48 <SMC_ID_HW_RSA+0xffffffff7bf04f41>
    4e4c:	00000000 	.inst	0x00000000 ; undefined
    4e50:	10bc0000 	adr	x0, fffffffffff7ce50 <SMC_ID_HW_RSA+0xffffffff7bf6cf49>
    4e54:	00000000 	.inst	0x00000000 ; undefined
    4e58:	00020000 	.inst	0x00020000 ; undefined
    4e5c:	00009f38 	.inst	0x00009f38 ; undefined
	...
    4e6c:	10700000 	adr	x0, e4e6c <_stack_size+0xe3e6c>
    4e70:	00000000 	.inst	0x00000000 ; undefined
    4e74:	13c40000 	.inst	0x13c40000 ; undefined
    4e78:	00000000 	.inst	0x00000000 ; undefined
    4e7c:	00040000 	.inst	0x00040000 ; undefined
    4e80:	9f02000a 	.inst	0x9f02000a ; undefined
	...
    4e94:	000010c4 	.inst	0x000010c4 ; undefined
    4e98:	00000000 	.inst	0x00000000 ; undefined
    4e9c:	00001238 	.inst	0x00001238 ; undefined
    4ea0:	00000000 	.inst	0x00000000 ; undefined
    4ea4:	38510001 	ldurb	w1, [x0,#-240]
    4ea8:	00000012 	.inst	0x00000012 ; undefined
    4eac:	1c000000 	ldr	s0, 4eac <_stack_size+0x3eac>
    4eb0:	00000013 	.inst	0x00000013 ; undefined
    4eb4:	01000000 	.inst	0x01000000 ; undefined
    4eb8:	13486b00 	.inst	0x13486b00 ; undefined
    4ebc:	00000000 	.inst	0x00000000 ; undefined
    4ec0:	135c0000 	.inst	0x135c0000 ; undefined
    4ec4:	00000000 	.inst	0x00000000 ; undefined
    4ec8:	00010000 	.inst	0x00010000 ; undefined
    4ecc:	00135c6b 	.inst	0x00135c6b ; undefined
    4ed0:	00000000 	.inst	0x00000000 ; undefined
    4ed4:	0013a400 	.inst	0x0013a400 ; undefined
    4ed8:	00000000 	.inst	0x00000000 ; undefined
    4edc:	51000100 	sub	w0, w8, #0x0
    4ee0:	000013a4 	.inst	0x000013a4 ; undefined
    4ee4:	00000000 	.inst	0x00000000 ; undefined
    4ee8:	000013c4 	.inst	0x000013c4 ; undefined
    4eec:	00000000 	.inst	0x00000000 ; undefined
    4ef0:	006b0001 	.inst	0x006b0001 ; undefined
	...
    4f00:	c4000000 	.inst	0xc4000000 ; undefined
    4f04:	00000010 	.inst	0x00000010 ; undefined
    4f08:	1c000000 	ldr	s0, 4f08 <_stack_size+0x3f08>
    4f0c:	00000013 	.inst	0x00000013 ; undefined
    4f10:	01000000 	.inst	0x01000000 ; undefined
    4f14:	13486c00 	.inst	0x13486c00 ; undefined
    4f18:	00000000 	.inst	0x00000000 ; undefined
    4f1c:	13c40000 	.inst	0x13c40000 ; undefined
    4f20:	00000000 	.inst	0x00000000 ; undefined
    4f24:	00010000 	.inst	0x00010000 ; undefined
    4f28:	0000006c 	.inst	0x0000006c ; undefined
	...
    4f38:	0012fc00 	.inst	0x0012fc00 ; undefined
    4f3c:	00000000 	.inst	0x00000000 ; undefined
    4f40:	00130000 	.inst	0x00130000 ; undefined
    4f44:	00000000 	.inst	0x00000000 ; undefined
    4f48:	70000500 	adr	x0, 4feb <_stack_size+0x3feb>
    4f4c:	9f1a3100 	.inst	0x9f1a3100 ; undefined
	...
    4f60:	000010dc 	.inst	0x000010dc ; undefined
    4f64:	00000000 	.inst	0x00000000 ; undefined
    4f68:	0000131c 	.inst	0x0000131c ; undefined
    4f6c:	00000000 	.inst	0x00000000 ; undefined
    4f70:	000a0004 	.inst	0x000a0004 ; undefined
    4f74:	13489f02 	.inst	0x13489f02 ; undefined
    4f78:	00000000 	.inst	0x00000000 ; undefined
    4f7c:	13c40000 	.inst	0x13c40000 ; undefined
    4f80:	00000000 	.inst	0x00000000 ; undefined
    4f84:	00040000 	.inst	0x00040000 ; undefined
    4f88:	9f02000a 	.inst	0x9f02000a ; undefined
	...
    4f9c:	00001100 	.inst	0x00001100 ; undefined
    4fa0:	00000000 	.inst	0x00000000 ; undefined
    4fa4:	00001114 	.inst	0x00001114 ; undefined
    4fa8:	00000000 	.inst	0x00000000 ; undefined
    4fac:	00500001 	.inst	0x00500001 ; undefined
	...
    4fc0:	00000011 	.inst	0x00000011 ; undefined
    4fc4:	1c000000 	ldr	s0, 4fc4 <_stack_size+0x3fc4>
    4fc8:	00000011 	.inst	0x00000011 ; undefined
    4fcc:	02000000 	.inst	0x02000000 ; undefined
    4fd0:	009f3000 	.inst	0x009f3000 ; undefined
	...
    4fe0:	90000000 	adrp	x0, 4000 <_stack_size+0x3000>
    4fe4:	00000013 	.inst	0x00000013 ; undefined
    4fe8:	a4000000 	.inst	0xa4000000 ; undefined
    4fec:	00000013 	.inst	0x00000013 ; undefined
    4ff0:	04000000 	.inst	0x04000000 ; undefined
    4ff4:	08000a00 	stxrb	w0, w0, [x16]
    4ff8:	0000009f 	.inst	0x0000009f ; undefined
	...
    5008:	00139000 	.inst	0x00139000 ; undefined
    500c:	00000000 	.inst	0x00000000 ; undefined
    5010:	0013a400 	.inst	0x0013a400 ; undefined
    5014:	00000000 	.inst	0x00000000 ; undefined
    5018:	30000200 	adr	x0, 5059 <_stack_size+0x4059>
    501c:	0000009f 	.inst	0x0000009f ; undefined
	...
    502c:	0013e400 	.inst	0x0013e400 ; undefined
    5030:	00000000 	.inst	0x00000000 ; undefined
    5034:	00140c00 	.inst	0x00140c00 ; undefined
    5038:	00000000 	.inst	0x00000000 ; undefined
    503c:	50000100 	adr	x0, 505e <_stack_size+0x405e>
    5040:	0000140c 	.inst	0x0000140c ; undefined
    5044:	00000000 	.inst	0x00000000 ; undefined
    5048:	00001520 	.inst	0x00001520 ; undefined
    504c:	00000000 	.inst	0x00000000 ; undefined
    5050:	20630001 	.inst	0x20630001 ; undefined
    5054:	00000015 	.inst	0x00000015 ; undefined
    5058:	24000000 	.inst	0x24000000 ; undefined
    505c:	00000015 	.inst	0x00000015 ; undefined
    5060:	04000000 	.inst	0x04000000 ; undefined
    5064:	5001f300 	adr	x0, 8ec6 <_stack_size+0x7ec6>
    5068:	0015249f 	.inst	0x0015249f ; undefined
    506c:	00000000 	.inst	0x00000000 ; undefined
    5070:	00154c00 	.inst	0x00154c00 ; undefined
    5074:	00000000 	.inst	0x00000000 ; undefined
    5078:	63000100 	.inst	0x63000100 ; undefined
	...
    508c:	000014ec 	.inst	0x000014ec ; undefined
    5090:	00000000 	.inst	0x00000000 ; undefined
    5094:	000014f0 	.inst	0x000014f0 ; undefined
    5098:	00000000 	.inst	0x00000000 ; undefined
    509c:	00700005 	.inst	0x00700005 ; undefined
    50a0:	009f1a31 	.inst	0x009f1a31 ; undefined
	...
    50b8:	18000000 	ldr	w0, 50b8 <_stack_size+0x40b8>
    50bc:	00000000 	.inst	0x00000000 ; undefined
    50c0:	02000000 	.inst	0x02000000 ; undefined
    50c4:	189f3000 	ldr	w0, fffffffffff436c4 <SMC_ID_HW_RSA+0xffffffff7bf337bd>
    50c8:	00000000 	.inst	0x00000000 ; undefined
    50cc:	20000000 	.inst	0x20000000 ; undefined
    50d0:	00000000 	.inst	0x00000000 ; undefined
    50d4:	01000000 	.inst	0x01000000 ; undefined
    50d8:	00205000 	.inst	0x00205000 ; NYI
    50dc:	00000000 	.inst	0x00000000 ; undefined
    50e0:	00540000 	.inst	0x00540000 ; undefined
    50e4:	00000000 	.inst	0x00000000 ; undefined
    50e8:	00010000 	.inst	0x00010000 ; undefined
    50ec:	00005863 	.inst	0x00005863 ; undefined
    50f0:	00000000 	.inst	0x00000000 ; undefined
    50f4:	00006c00 	.inst	0x00006c00 ; undefined
    50f8:	00000000 	.inst	0x00000000 ; undefined
    50fc:	63000100 	.inst	0x63000100 ; undefined
    5100:	00000070 	.inst	0x00000070 ; undefined
    5104:	00000000 	.inst	0x00000000 ; undefined
    5108:	000000b0 	.inst	0x000000b0 ; undefined
    510c:	00000000 	.inst	0x00000000 ; undefined
    5110:	b4630001 	cbz	x1, cb110 <_stack_size+0xca110>
    5114:	00000000 	.inst	0x00000000 ; undefined
    5118:	c0000000 	.inst	0xc0000000 ; undefined
    511c:	00000000 	.inst	0x00000000 ; undefined
    5120:	01000000 	.inst	0x01000000 ; undefined
    5124:	00006300 	.inst	0x00006300 ; undefined
	...
    513c:	00280000 	.inst	0x00280000 ; NYI
    5140:	00000000 	.inst	0x00000000 ; undefined
    5144:	00020000 	.inst	0x00020000 ; undefined
    5148:	00289f30 	.inst	0x00289f30 ; NYI
    514c:	00000000 	.inst	0x00000000 ; undefined
    5150:	004c0000 	.inst	0x004c0000 ; undefined
    5154:	00000000 	.inst	0x00000000 ; undefined
    5158:	00010000 	.inst	0x00010000 ; undefined
    515c:	00005850 	.inst	0x00005850 ; undefined
    5160:	00000000 	.inst	0x00000000 ; undefined
    5164:	00006400 	.inst	0x00006400 ; undefined
    5168:	00000000 	.inst	0x00000000 ; undefined
    516c:	50000100 	adr	x0, 518e <_stack_size+0x418e>
    5170:	00000070 	.inst	0x00000070 ; undefined
    5174:	00000000 	.inst	0x00000000 ; undefined
    5178:	00000073 	.inst	0x00000073 ; undefined
    517c:	00000000 	.inst	0x00000000 ; undefined
    5180:	b4500001 	cbz	x1, a5180 <_stack_size+0xa4180>
    5184:	00000000 	.inst	0x00000000 ; undefined
    5188:	b8000000 	stur	w0, [x0]
    518c:	00000000 	.inst	0x00000000 ; undefined
    5190:	01000000 	.inst	0x01000000 ; undefined
    5194:	00005000 	.inst	0x00005000 ; undefined
	...
    51a4:	01100000 	.inst	0x01100000 ; undefined
    51a8:	00000000 	.inst	0x00000000 ; undefined
    51ac:	01180000 	.inst	0x01180000 ; undefined
    51b0:	00000000 	.inst	0x00000000 ; undefined
    51b4:	00010000 	.inst	0x00010000 ; undefined
    51b8:	00011850 	.inst	0x00011850 ; undefined
    51bc:	00000000 	.inst	0x00000000 ; undefined
    51c0:	0001a800 	.inst	0x0001a800 ; undefined
    51c4:	00000000 	.inst	0x00000000 ; undefined
    51c8:	f3000400 	.inst	0xf3000400 ; undefined
    51cc:	009f5001 	.inst	0x009f5001 ; undefined
	...
    51dc:	10000000 	adr	x0, 51dc <_stack_size+0x41dc>
    51e0:	00000001 	.inst	0x00000001 ; undefined
    51e4:	48000000 	stxrh	w0, w0, [x0]
    51e8:	00000001 	.inst	0x00000001 ; undefined
    51ec:	01000000 	.inst	0x01000000 ; undefined
    51f0:	01485100 	.inst	0x01485100 ; undefined
    51f4:	00000000 	.inst	0x00000000 ; undefined
    51f8:	01a80000 	.inst	0x01a80000 ; undefined
    51fc:	00000000 	.inst	0x00000000 ; undefined
    5200:	00040000 	.inst	0x00040000 ; undefined
    5204:	9f5101f3 	.inst	0x9f5101f3 ; undefined
	...
    5218:	00000110 	.inst	0x00000110 ; undefined
    521c:	00000000 	.inst	0x00000000 ; undefined
    5220:	00000148 	.inst	0x00000148 ; undefined
    5224:	00000000 	.inst	0x00000000 ; undefined
    5228:	48520001 	ldxrh	w1, [x0]
    522c:	00000001 	.inst	0x00000001 ; undefined
    5230:	a8000000 	stnp	x0, x0, [x0]
    5234:	00000001 	.inst	0x00000001 ; undefined
    5238:	04000000 	.inst	0x04000000 ; undefined
    523c:	5201f300 	eor	w0, w24, #0xaaaaaaaa
    5240:	0000009f 	.inst	0x0000009f ; undefined
	...
    5250:	00011000 	.inst	0x00011000 ; undefined
    5254:	00000000 	.inst	0x00000000 ; undefined
    5258:	00014800 	.inst	0x00014800 ; undefined
    525c:	00000000 	.inst	0x00000000 ; undefined
    5260:	30000200 	adr	x0, 52a1 <_stack_size+0x42a1>
    5264:	0001489f 	.inst	0x0001489f ; undefined
    5268:	00000000 	.inst	0x00000000 ; undefined
    526c:	00019000 	.inst	0x00019000 ; undefined
    5270:	00000000 	.inst	0x00000000 ; undefined
    5274:	71000700 	subs	w0, w24, #0x1
    5278:	5101f300 	sub	w0, w24, #0x7c
    527c:	01909f1c 	.inst	0x01909f1c ; undefined
    5280:	00000000 	.inst	0x00000000 ; undefined
    5284:	01980000 	.inst	0x01980000 ; undefined
    5288:	00000000 	.inst	0x00000000 ; undefined
    528c:	00090000 	.inst	0x00090000 ; undefined
    5290:	01f30071 	.inst	0x01f30071 ; undefined
    5294:	01231c51 	.inst	0x01231c51 ; undefined
    5298:	0000009f 	.inst	0x0000009f ; undefined
	...
    52a8:	0001a800 	.inst	0x0001a800 ; undefined
    52ac:	00000000 	.inst	0x00000000 ; undefined
    52b0:	0001c800 	.inst	0x0001c800 ; undefined
    52b4:	00000000 	.inst	0x00000000 ; undefined
    52b8:	50000100 	adr	x0, 52da <_stack_size+0x42da>
    52bc:	000001c8 	.inst	0x000001c8 ; undefined
    52c0:	00000000 	.inst	0x00000000 ; undefined
    52c4:	000001cf 	.inst	0x000001cf ; undefined
    52c8:	00000000 	.inst	0x00000000 ; undefined
    52cc:	cf530001 	.inst	0xcf530001 ; undefined
    52d0:	00000001 	.inst	0x00000001 ; undefined
    52d4:	3c000000 	stur	b0, [x0]
    52d8:	00000002 	.inst	0x00000002 ; undefined
    52dc:	04000000 	.inst	0x04000000 ; undefined
    52e0:	5001f300 	adr	x0, 9142 <_stack_size+0x8142>
    52e4:	0000009f 	.inst	0x0000009f ; undefined
	...
    52f4:	0001c000 	.inst	0x0001c000 ; undefined
    52f8:	00000000 	.inst	0x00000000 ; undefined
    52fc:	00020800 	.inst	0x00020800 ; undefined
    5300:	00000000 	.inst	0x00000000 ; undefined
    5304:	63000100 	.inst	0x63000100 ; undefined
	...
    5318:	000001c4 	.inst	0x000001c4 ; undefined
    531c:	00000000 	.inst	0x00000000 ; undefined
    5320:	000001f4 	.inst	0x000001f4 ; undefined
    5324:	00000000 	.inst	0x00000000 ; undefined
    5328:	f4640001 	.inst	0xf4640001 ; undefined
    532c:	00000001 	.inst	0x00000001 ; undefined
    5330:	00000000 	.inst	0x00000000 ; undefined
    5334:	00000002 	.inst	0x00000002 ; undefined
    5338:	03000000 	.inst	0x03000000 ; undefined
    533c:	9f707300 	.inst	0x9f707300 ; undefined
    5340:	00000200 	.inst	0x00000200 ; undefined
    5344:	00000000 	.inst	0x00000000 ; undefined
    5348:	0000023c 	.inst	0x0000023c ; undefined
    534c:	00000000 	.inst	0x00000000 ; undefined
    5350:	01f30006 	.inst	0x01f30006 ; undefined
    5354:	9f1a3750 	.inst	0x9f1a3750 ; undefined
	...
    5368:	000002c4 	.inst	0x000002c4 ; undefined
    536c:	00000000 	.inst	0x00000000 ; undefined
    5370:	000002cc 	.inst	0x000002cc ; undefined
    5374:	00000000 	.inst	0x00000000 ; undefined
    5378:	7f910009 	.inst	0x7f910009 ; undefined
    537c:	25310194 	.inst	0x25310194 ; undefined
    5380:	cc9f1a37 	.inst	0xcc9f1a37 ; undefined
    5384:	00000002 	.inst	0x00000002 ; undefined
    5388:	dc000000 	.inst	0xdc000000 ; undefined
    538c:	00000002 	.inst	0x00000002 ; undefined
    5390:	09000000 	.inst	0x09000000 ; undefined
    5394:	947f8f00 	bl	1fe8f94 <MPIDR_EL1_MT+0xfe8f94>
    5398:	37253101 	tbnz	w1, #4, fffffffffffff9b8 <SMC_ID_HW_RSA+0xffffffff7bfefab1>
    539c:	00009f1a 	.inst	0x00009f1a ; undefined
	...
    53ac:	03100000 	.inst	0x03100000 ; undefined
    53b0:	00000000 	.inst	0x00000000 ; undefined
    53b4:	03180000 	.inst	0x03180000 ; undefined
    53b8:	00000000 	.inst	0x00000000 ; undefined
    53bc:	00070000 	.inst	0x00070000 ; undefined
    53c0:	01940083 	.inst	0x01940083 ; undefined
    53c4:	189f1a37 	ldr	w23, fffffffffff43708 <SMC_ID_HW_RSA+0xffffffff7bf33801>
    53c8:	00000003 	.inst	0x00000003 ; undefined
    53cc:	28000000 	stnp	w0, w0, [x0]
    53d0:	00000003 	.inst	0x00000003 ; undefined
    53d4:	07000000 	.inst	0x07000000 ; undefined
    53d8:	947f8f00 	bl	1fe8fd8 <MPIDR_EL1_MT+0xfe8fd8>
    53dc:	9f1a3701 	.inst	0x9f1a3701 ; undefined
	...
    53f0:	0000035c 	.inst	0x0000035c ; undefined
    53f4:	00000000 	.inst	0x00000000 ; undefined
    53f8:	00000360 	.inst	0x00000360 ; undefined
    53fc:	00000000 	.inst	0x00000000 ; undefined
    5400:	00830009 	.inst	0x00830009 ; undefined
    5404:	ff0a0294 	.inst	0xff0a0294 ; undefined
    5408:	609f1aff 	.inst	0x609f1aff ; undefined
    540c:	00000003 	.inst	0x00000003 ; undefined
    5410:	68000000 	.inst	0x68000000 ; undefined
    5414:	00000003 	.inst	0x00000003 ; undefined
    5418:	01000000 	.inst	0x01000000 ; undefined
    541c:	00005000 	.inst	0x00005000 ; undefined
	...
    542c:	036c0000 	.inst	0x036c0000 ; undefined
    5430:	00000000 	.inst	0x00000000 ; undefined
    5434:	03740000 	.inst	0x03740000 ; undefined
    5438:	00000000 	.inst	0x00000000 ; undefined
    543c:	00010000 	.inst	0x00010000 ; undefined
    5440:	00037450 	.inst	0x00037450 ; undefined
    5444:	00000000 	.inst	0x00000000 ; undefined
    5448:	0003e400 	.inst	0x0003e400 ; undefined
    544c:	00000000 	.inst	0x00000000 ; undefined
    5450:	f3000400 	.inst	0xf3000400 ; undefined
    5454:	009f5001 	.inst	0x009f5001 ; undefined
	...
    5464:	6c000000 	stnp	d0, d0, [x0]
    5468:	00000003 	.inst	0x00000003 ; undefined
    546c:	8b000000 	add	x0, x0, x0
    5470:	00000003 	.inst	0x00000003 ; undefined
    5474:	01000000 	.inst	0x01000000 ; undefined
    5478:	038b5100 	.inst	0x038b5100 ; undefined
    547c:	00000000 	.inst	0x00000000 ; undefined
    5480:	03dc0000 	.inst	0x03dc0000 ; undefined
    5484:	00000000 	.inst	0x00000000 ; undefined
    5488:	00010000 	.inst	0x00010000 ; undefined
    548c:	0003dc63 	.inst	0x0003dc63 ; undefined
    5490:	00000000 	.inst	0x00000000 ; undefined
    5494:	0003e000 	.inst	0x0003e000 ; undefined
    5498:	00000000 	.inst	0x00000000 ; undefined
    549c:	f3000400 	.inst	0xf3000400 ; undefined
    54a0:	e09f5101 	.inst	0xe09f5101 ; undefined
    54a4:	00000003 	.inst	0x00000003 ; undefined
    54a8:	e4000000 	.inst	0xe4000000 ; undefined
    54ac:	00000003 	.inst	0x00000003 ; undefined
    54b0:	01000000 	.inst	0x01000000 ; undefined
    54b4:	00006300 	.inst	0x00006300 ; undefined
	...
    54c4:	036c0000 	.inst	0x036c0000 ; undefined
    54c8:	00000000 	.inst	0x00000000 ; undefined
    54cc:	038b0000 	.inst	0x038b0000 ; undefined
    54d0:	00000000 	.inst	0x00000000 ; undefined
    54d4:	00010000 	.inst	0x00010000 ; undefined
    54d8:	00038b52 	.inst	0x00038b52 ; undefined
    54dc:	00000000 	.inst	0x00000000 ; undefined
    54e0:	0003cc00 	.inst	0x0003cc00 ; undefined
    54e4:	00000000 	.inst	0x00000000 ; undefined
    54e8:	65000100 	.inst	0x65000100 ; undefined
    54ec:	000003cc 	.inst	0x000003cc ; undefined
    54f0:	00000000 	.inst	0x00000000 ; undefined
    54f4:	000003e0 	.inst	0x000003e0 ; undefined
    54f8:	00000000 	.inst	0x00000000 ; undefined
    54fc:	01f30004 	.inst	0x01f30004 ; undefined
    5500:	03e09f52 	.inst	0x03e09f52 ; undefined
    5504:	00000000 	.inst	0x00000000 ; undefined
    5508:	03e40000 	.inst	0x03e40000 ; undefined
    550c:	00000000 	.inst	0x00000000 ; undefined
    5510:	00010000 	.inst	0x00010000 ; undefined
    5514:	00000065 	.inst	0x00000065 ; undefined
	...
    5524:	00036c00 	.inst	0x00036c00 ; undefined
    5528:	00000000 	.inst	0x00000000 ; undefined
    552c:	0003b000 	.inst	0x0003b000 ; undefined
    5530:	00000000 	.inst	0x00000000 ; undefined
    5534:	30000200 	adr	x0, 5575 <_stack_size+0x4575>
    5538:	0003e09f 	.inst	0x0003e09f ; undefined
    553c:	00000000 	.inst	0x00000000 ; undefined
    5540:	0003e400 	.inst	0x0003e400 ; undefined
    5544:	00000000 	.inst	0x00000000 ; undefined
    5548:	30000200 	adr	x0, 5589 <_stack_size+0x4589>
    554c:	0000009f 	.inst	0x0000009f ; undefined
	...
    555c:	00038000 	.inst	0x00038000 ; undefined
    5560:	00000000 	.inst	0x00000000 ; undefined
    5564:	0003dc00 	.inst	0x0003dc00 ; undefined
    5568:	00000000 	.inst	0x00000000 ; undefined
    556c:	64000100 	.inst	0x64000100 ; undefined
    5570:	000003dc 	.inst	0x000003dc ; undefined
    5574:	00000000 	.inst	0x00000000 ; undefined
    5578:	000003e0 	.inst	0x000003e0 ; undefined
    557c:	00000000 	.inst	0x00000000 ; undefined
    5580:	01f30008 	.inst	0x01f30008 ; undefined
    5584:	32253550 	orr	w16, w10, #0xf80001ff
    5588:	03e09f24 	.inst	0x03e09f24 ; undefined
    558c:	00000000 	.inst	0x00000000 ; undefined
    5590:	03e40000 	.inst	0x03e40000 ; undefined
    5594:	00000000 	.inst	0x00000000 ; undefined
    5598:	00010000 	.inst	0x00010000 ; undefined
    559c:	00000064 	.inst	0x00000064 ; undefined
	...
    55ac:	00039c00 	.inst	0x00039c00 ; undefined
    55b0:	00000000 	.inst	0x00000000 ; undefined
    55b4:	0003b000 	.inst	0x0003b000 ; undefined
    55b8:	00000000 	.inst	0x00000000 ; undefined
    55bc:	50000100 	adr	x0, 55de <_stack_size+0x45de>
    55c0:	000003b0 	.inst	0x000003b0 ; undefined
    55c4:	00000000 	.inst	0x00000000 ; undefined
    55c8:	000003cc 	.inst	0x000003cc ; undefined
    55cc:	00000000 	.inst	0x00000000 ; undefined
    55d0:	00840006 	.inst	0x00840006 ; undefined
    55d4:	9f220086 	.inst	0x9f220086 ; undefined
    55d8:	000003e0 	.inst	0x000003e0 ; undefined
    55dc:	00000000 	.inst	0x00000000 ; undefined
    55e0:	000003e3 	.inst	0x000003e3 ; undefined
    55e4:	00000000 	.inst	0x00000000 ; undefined
    55e8:	e3500001 	.inst	0xe3500001 ; undefined
    55ec:	00000003 	.inst	0x00000003 ; undefined
    55f0:	e4000000 	.inst	0xe4000000 ; undefined
    55f4:	00000003 	.inst	0x00000003 ; undefined
    55f8:	06000000 	.inst	0x06000000 ; undefined
    55fc:	86008400 	.inst	0x86008400 ; undefined
    5600:	009f2200 	.inst	0x009f2200 ; undefined
	...
    5610:	e4000000 	.inst	0xe4000000 ; undefined
    5614:	00000003 	.inst	0x00000003 ; undefined
    5618:	ec000000 	.inst	0xec000000 ; undefined
    561c:	00000003 	.inst	0x00000003 ; undefined
    5620:	01000000 	.inst	0x01000000 ; undefined
    5624:	03ec5000 	.inst	0x03ec5000 ; undefined
    5628:	00000000 	.inst	0x00000000 ; undefined
    562c:	04180000 	.inst	0x04180000 ; undefined
    5630:	00000000 	.inst	0x00000000 ; undefined
    5634:	00040000 	.inst	0x00040000 ; undefined
    5638:	9f5001f3 	.inst	0x9f5001f3 ; undefined
	...
    564c:	000003e4 	.inst	0x000003e4 ; undefined
    5650:	00000000 	.inst	0x00000000 ; undefined
    5654:	000003ec 	.inst	0x000003ec ; undefined
    5658:	00000000 	.inst	0x00000000 ; undefined
    565c:	9f300002 	.inst	0x9f300002 ; undefined
    5660:	000003ec 	.inst	0x000003ec ; undefined
    5664:	00000000 	.inst	0x00000000 ; undefined
    5668:	00000400 	.inst	0x00000400 ; undefined
    566c:	00000000 	.inst	0x00000000 ; undefined
    5670:	00500001 	.inst	0x00500001 ; undefined
    5674:	00000004 	.inst	0x00000004 ; undefined
    5678:	18000000 	ldr	w0, 5678 <_stack_size+0x4678>
    567c:	00000004 	.inst	0x00000004 ; undefined
    5680:	06000000 	.inst	0x06000000 ; undefined
    5684:	5001f300 	adr	x0, 94e6 <_stack_size+0x84e6>
    5688:	009f2533 	.inst	0x009f2533 ; undefined
	...
    5698:	e4000000 	.inst	0xe4000000 ; undefined
    569c:	00000003 	.inst	0x00000003 ; undefined
    56a0:	e8000000 	.inst	0xe8000000 ; undefined
    56a4:	00000003 	.inst	0x00000003 ; undefined
    56a8:	05000000 	.inst	0x05000000 ; undefined
    56ac:	37007000 	tbnz	w0, #0, 64ac <_stack_size+0x54ac>
    56b0:	03e89f1a 	.inst	0x03e89f1a ; undefined
    56b4:	00000000 	.inst	0x00000000 ; undefined
    56b8:	04180000 	.inst	0x04180000 ; undefined
    56bc:	00000000 	.inst	0x00000000 ; undefined
    56c0:	00010000 	.inst	0x00010000 ; undefined
    56c4:	00000052 	.inst	0x00000052 ; undefined
	...
    56d4:	0003e400 	.inst	0x0003e400 ; undefined
    56d8:	00000000 	.inst	0x00000000 ; undefined
    56dc:	0003ec00 	.inst	0x0003ec00 ; undefined
    56e0:	00000000 	.inst	0x00000000 ; undefined
    56e4:	30000200 	adr	x0, 5725 <_stack_size+0x4725>
    56e8:	0003ec9f 	.inst	0x0003ec9f ; undefined
    56ec:	00000000 	.inst	0x00000000 ; undefined
    56f0:	0003f000 	.inst	0x0003f000 ; undefined
    56f4:	00000000 	.inst	0x00000000 ; undefined
    56f8:	70000600 	adr	x0, 57bb <_stack_size+0x47bb>
    56fc:	1afc0900 	.inst	0x1afc0900 ; undefined
    5700:	0003f09f 	.inst	0x0003f09f ; undefined
    5704:	00000000 	.inst	0x00000000 ; undefined
    5708:	00041800 	.inst	0x00041800 ; undefined
    570c:	00000000 	.inst	0x00000000 ; undefined
    5710:	53000100 	ubfx	w0, w8, #0, #1
	...
    5724:	000003e4 	.inst	0x000003e4 ; undefined
    5728:	00000000 	.inst	0x00000000 ; undefined
    572c:	000003ec 	.inst	0x000003ec ; undefined
    5730:	00000000 	.inst	0x00000000 ; undefined
    5734:	9f300002 	.inst	0x9f300002 ; undefined
    5738:	000003ec 	.inst	0x000003ec ; undefined
    573c:	00000000 	.inst	0x00000000 ; undefined
    5740:	00000400 	.inst	0x00000400 ; undefined
    5744:	00000000 	.inst	0x00000000 ; undefined
    5748:	00700005 	.inst	0x00700005 ; undefined
    574c:	009f1a33 	.inst	0x009f1a33 ; undefined
    5750:	00000004 	.inst	0x00000004 ; undefined
    5754:	18000000 	ldr	w0, 5754 <_stack_size+0x4754>
    5758:	00000004 	.inst	0x00000004 ; undefined
    575c:	08000000 	stxrb	w0, w0, [x0]
    5760:	5001f300 	adr	x0, 95c2 <_stack_size+0x85c2>
    5764:	1a332533 	.inst	0x1a332533 ; undefined
    5768:	0000009f 	.inst	0x0000009f ; undefined
	...
    5778:	0003e400 	.inst	0x0003e400 ; undefined
    577c:	00000000 	.inst	0x00000000 ; undefined
    5780:	00040800 	.inst	0x00040800 ; undefined
    5784:	00000000 	.inst	0x00000000 ; undefined
    5788:	30000200 	adr	x0, 57c9 <_stack_size+0x47c9>
    578c:	0004089f 	.inst	0x0004089f ; undefined
    5790:	00000000 	.inst	0x00000000 ; undefined
    5794:	00041800 	.inst	0x00041800 ; undefined
    5798:	00000000 	.inst	0x00000000 ; undefined
    579c:	51000100 	sub	w0, w8, #0x0
	...
    57b0:	00000418 	.inst	0x00000418 ; undefined
    57b4:	00000000 	.inst	0x00000000 ; undefined
    57b8:	00000440 	.inst	0x00000440 ; undefined
    57bc:	00000000 	.inst	0x00000000 ; undefined
    57c0:	40500001 	.inst	0x40500001 ; undefined
    57c4:	00000004 	.inst	0x00000004 ; undefined
    57c8:	7c000000 	stur	h0, [x0]
    57cc:	00000004 	.inst	0x00000004 ; undefined
    57d0:	01000000 	.inst	0x01000000 ; undefined
    57d4:	047c6600 	.inst	0x047c6600 ; undefined
    57d8:	00000000 	.inst	0x00000000 ; undefined
    57dc:	048c0000 	.inst	0x048c0000 ; undefined
    57e0:	00000000 	.inst	0x00000000 ; undefined
    57e4:	00040000 	.inst	0x00040000 ; undefined
    57e8:	9f5001f3 	.inst	0x9f5001f3 ; undefined
	...
    57fc:	00000418 	.inst	0x00000418 ; undefined
    5800:	00000000 	.inst	0x00000000 ; undefined
    5804:	00000440 	.inst	0x00000440 ; undefined
    5808:	00000000 	.inst	0x00000000 ; undefined
    580c:	40510001 	.inst	0x40510001 ; undefined
    5810:	00000004 	.inst	0x00000004 ; undefined
    5814:	8c000000 	.inst	0x8c000000 ; undefined
    5818:	00000004 	.inst	0x00000004 ; undefined
    581c:	04000000 	.inst	0x04000000 ; undefined
    5820:	5101f300 	sub	w0, w24, #0x7c
    5824:	0000009f 	.inst	0x0000009f ; undefined
	...
    5834:	00041800 	.inst	0x00041800 ; undefined
    5838:	00000000 	.inst	0x00000000 ; undefined
    583c:	00044000 	.inst	0x00044000 ; undefined
    5840:	00000000 	.inst	0x00000000 ; undefined
    5844:	52000100 	eor	w0, w8, #0x1
    5848:	00000440 	.inst	0x00000440 ; undefined
    584c:	00000000 	.inst	0x00000000 ; undefined
    5850:	0000047c 	.inst	0x0000047c ; undefined
    5854:	00000000 	.inst	0x00000000 ; undefined
    5858:	7c640001 	.inst	0x7c640001 ; undefined
    585c:	00000004 	.inst	0x00000004 ; undefined
    5860:	8c000000 	.inst	0x8c000000 ; undefined
    5864:	00000004 	.inst	0x00000004 ; undefined
    5868:	04000000 	.inst	0x04000000 ; undefined
    586c:	5201f300 	eor	w0, w24, #0xaaaaaaaa
    5870:	0000009f 	.inst	0x0000009f ; undefined
	...
    5880:	00041800 	.inst	0x00041800 ; undefined
    5884:	00000000 	.inst	0x00000000 ; undefined
    5888:	00044000 	.inst	0x00044000 ; undefined
    588c:	00000000 	.inst	0x00000000 ; undefined
    5890:	30000200 	adr	x0, 58d1 <_stack_size+0x48d1>
    5894:	0004409f 	.inst	0x0004409f ; undefined
    5898:	00000000 	.inst	0x00000000 ; undefined
    589c:	00046c00 	.inst	0x00046c00 ; undefined
    58a0:	00000000 	.inst	0x00000000 ; undefined
    58a4:	63000100 	.inst	0x63000100 ; undefined
    58a8:	0000046c 	.inst	0x0000046c ; undefined
    58ac:	00000000 	.inst	0x00000000 ; undefined
    58b0:	00000470 	.inst	0x00000470 ; undefined
    58b4:	00000000 	.inst	0x00000000 ; undefined
    58b8:	7f830003 	.inst	0x7f830003 ; undefined
    58bc:	0004709f 	.inst	0x0004709f ; undefined
    58c0:	00000000 	.inst	0x00000000 ; undefined
    58c4:	00047c00 	.inst	0x00047c00 ; undefined
    58c8:	00000000 	.inst	0x00000000 ; undefined
    58cc:	63000100 	.inst	0x63000100 ; undefined
	...
    58e0:	00000418 	.inst	0x00000418 ; undefined
    58e4:	00000000 	.inst	0x00000000 ; undefined
    58e8:	00000440 	.inst	0x00000440 ; undefined
    58ec:	00000000 	.inst	0x00000000 ; undefined
    58f0:	9f300002 	.inst	0x9f300002 ; undefined
    58f4:	0000044c 	.inst	0x0000044c ; undefined
    58f8:	00000000 	.inst	0x00000000 ; undefined
    58fc:	00000460 	.inst	0x00000460 ; undefined
    5900:	00000000 	.inst	0x00000000 ; undefined
    5904:	78530001 	ldurh	w1, [x0,#-208]
    5908:	00000004 	.inst	0x00000004 ; undefined
    590c:	7c000000 	stur	h0, [x0]
    5910:	00000004 	.inst	0x00000004 ; undefined
    5914:	01000000 	.inst	0x01000000 ; undefined
    5918:	00005300 	.inst	0x00005300 ; undefined
	...
    5928:	04180000 	.inst	0x04180000 ; undefined
    592c:	00000000 	.inst	0x00000000 ; undefined
    5930:	04400000 	.inst	0x04400000 ; undefined
    5934:	00000000 	.inst	0x00000000 ; undefined
    5938:	00020000 	.inst	0x00020000 ; undefined
    593c:	04509f30 	.inst	0x04509f30 ; undefined
    5940:	00000000 	.inst	0x00000000 ; undefined
    5944:	04600000 	.inst	0x04600000 ; undefined
    5948:	00000000 	.inst	0x00000000 ; undefined
    594c:	00180000 	.inst	0x00180000 ; undefined
    5950:	ff0c0073 	.inst	0xff0c0073 ; undefined
    5954:	1affffff 	.inst	0x1affffff ; undefined
    5958:	94220084 	bl	885b68 <_stack_size+0x884b68>
    595c:	1aff0801 	.inst	0x1aff0801 ; undefined
    5960:	1a370083 	.inst	0x1a370083 ; undefined
    5964:	9f1a3126 	.inst	0x9f1a3126 ; undefined
	...
    5978:	00000418 	.inst	0x00000418 ; undefined
    597c:	00000000 	.inst	0x00000000 ; undefined
    5980:	00000440 	.inst	0x00000440 ; undefined
    5984:	00000000 	.inst	0x00000000 ; undefined
    5988:	9f300002 	.inst	0x9f300002 ; undefined
    598c:	00000440 	.inst	0x00000440 ; undefined
    5990:	00000000 	.inst	0x00000000 ; undefined
    5994:	00000450 	.inst	0x00000450 ; undefined
    5998:	00000000 	.inst	0x00000000 ; undefined
    599c:	50550001 	adr	x1, af99e <_stack_size+0xae99e>
    59a0:	00000004 	.inst	0x00000004 ; undefined
    59a4:	58000000 	ldr	x0, 59a4 <_stack_size+0x49a4>
    59a8:	00000004 	.inst	0x00000004 ; undefined
    59ac:	05000000 	.inst	0x05000000 ; undefined
    59b0:	37008300 	tbnz	w0, #0, 6a10 <_stack_size+0x5a10>
    59b4:	04589f1a 	.inst	0x04589f1a ; undefined
    59b8:	00000000 	.inst	0x00000000 ; undefined
    59bc:	046f0000 	.inst	0x046f0000 ; undefined
    59c0:	00000000 	.inst	0x00000000 ; undefined
    59c4:	00010000 	.inst	0x00010000 ; undefined
    59c8:	00046f55 	.inst	0x00046f55 ; undefined
    59cc:	00000000 	.inst	0x00000000 ; undefined
    59d0:	00047c00 	.inst	0x00047c00 ; undefined
    59d4:	00000000 	.inst	0x00000000 ; undefined
    59d8:	83000500 	.inst	0x83000500 ; undefined
    59dc:	9f1a377f 	.inst	0x9f1a377f ; undefined
	...
    59f0:	0000048c 	.inst	0x0000048c ; undefined
    59f4:	00000000 	.inst	0x00000000 ; undefined
    59f8:	000004a8 	.inst	0x000004a8 ; undefined
    59fc:	00000000 	.inst	0x00000000 ; undefined
    5a00:	a8500001 	ldnp	x1, x0, [x0,#256]
    5a04:	00000004 	.inst	0x00000004 ; undefined
    5a08:	bc000000 	stur	s0, [x0]
    5a0c:	00000004 	.inst	0x00000004 ; undefined
    5a10:	04000000 	.inst	0x04000000 ; undefined
    5a14:	5001f300 	adr	x0, 9876 <_stack_size+0x8876>
    5a18:	0004bc9f 	.inst	0x0004bc9f ; undefined
    5a1c:	00000000 	.inst	0x00000000 ; undefined
    5a20:	0004c000 	.inst	0x0004c000 ; undefined
    5a24:	00000000 	.inst	0x00000000 ; undefined
    5a28:	50000100 	adr	x0, 5a4a <_stack_size+0x4a4a>
    5a2c:	000004c0 	.inst	0x000004c0 ; undefined
    5a30:	00000000 	.inst	0x00000000 ; undefined
    5a34:	000004c8 	.inst	0x000004c8 ; undefined
    5a38:	00000000 	.inst	0x00000000 ; undefined
    5a3c:	01f30004 	.inst	0x01f30004 ; undefined
    5a40:	04c89f50 	.inst	0x04c89f50 ; undefined
    5a44:	00000000 	.inst	0x00000000 ; undefined
    5a48:	04cc0000 	.inst	0x04cc0000 ; undefined
    5a4c:	00000000 	.inst	0x00000000 ; undefined
    5a50:	00010000 	.inst	0x00010000 ; undefined
    5a54:	0004cc50 	.inst	0x0004cc50 ; undefined
    5a58:	00000000 	.inst	0x00000000 ; undefined
    5a5c:	0004d000 	.inst	0x0004d000 ; undefined
    5a60:	00000000 	.inst	0x00000000 ; undefined
    5a64:	f3000400 	.inst	0xf3000400 ; undefined
    5a68:	009f5001 	.inst	0x009f5001 ; undefined
	...
    5a78:	8c000000 	.inst	0x8c000000 ; undefined
    5a7c:	00000004 	.inst	0x00000004 ; undefined
    5a80:	af000000 	.inst	0xaf000000 ; undefined
    5a84:	00000004 	.inst	0x00000004 ; undefined
    5a88:	01000000 	.inst	0x01000000 ; undefined
    5a8c:	04af5100 	.inst	0x04af5100 ; undefined
    5a90:	00000000 	.inst	0x00000000 ; undefined
    5a94:	04bc0000 	.inst	0x04bc0000 ; undefined
    5a98:	00000000 	.inst	0x00000000 ; undefined
    5a9c:	00040000 	.inst	0x00040000 ; undefined
    5aa0:	9f5101f3 	.inst	0x9f5101f3 ; undefined
    5aa4:	000004bc 	.inst	0x000004bc ; undefined
    5aa8:	00000000 	.inst	0x00000000 ; undefined
    5aac:	000004d0 	.inst	0x000004d0 ; undefined
    5ab0:	00000000 	.inst	0x00000000 ; undefined
    5ab4:	00510001 	.inst	0x00510001 ; undefined
	...
    5ac4:	a8000000 	stnp	x0, x0, [x0]
    5ac8:	00000004 	.inst	0x00000004 ; undefined
    5acc:	af000000 	.inst	0xaf000000 ; undefined
    5ad0:	00000004 	.inst	0x00000004 ; undefined
    5ad4:	01000000 	.inst	0x01000000 ; undefined
    5ad8:	00005000 	.inst	0x00005000 ; undefined
	...
    5ae8:	04d00000 	.inst	0x04d00000 ; undefined
    5aec:	00000000 	.inst	0x00000000 ; undefined
    5af0:	04dc0000 	.inst	0x04dc0000 ; undefined
    5af4:	00000000 	.inst	0x00000000 ; undefined
    5af8:	00010000 	.inst	0x00010000 ; undefined
    5afc:	0004dc50 	.inst	0x0004dc50 ; undefined
    5b00:	00000000 	.inst	0x00000000 ; undefined
    5b04:	0004eb00 	.inst	0x0004eb00 ; undefined
    5b08:	00000000 	.inst	0x00000000 ; undefined
    5b0c:	51000100 	sub	w0, w8, #0x0
    5b10:	000004eb 	.inst	0x000004eb ; undefined
    5b14:	00000000 	.inst	0x00000000 ; undefined
    5b18:	000004f8 	.inst	0x000004f8 ; undefined
    5b1c:	00000000 	.inst	0x00000000 ; undefined
    5b20:	01f30004 	.inst	0x01f30004 ; undefined
    5b24:	00009f50 	.inst	0x00009f50 ; undefined
	...
    5b3c:	001c0000 	.inst	0x001c0000 ; undefined
    5b40:	00000000 	.inst	0x00000000 ; undefined
    5b44:	00010000 	.inst	0x00010000 ; undefined
    5b48:	00001c50 	.inst	0x00001c50 ; undefined
    5b4c:	00000000 	.inst	0x00000000 ; undefined
    5b50:	00003000 	.inst	0x00003000 ; undefined
    5b54:	00000000 	.inst	0x00000000 ; undefined
    5b58:	f3000400 	.inst	0xf3000400 ; undefined
    5b5c:	309f5001 	adr	x1, fffffffffff4455d <SMC_ID_HW_RSA+0xffffffff7bf34656>
    5b60:	00000000 	.inst	0x00000000 ; undefined
    5b64:	78000000 	sturh	w0, [x0]
    5b68:	00000000 	.inst	0x00000000 ; undefined
    5b6c:	01000000 	.inst	0x01000000 ; undefined
    5b70:	00785000 	.inst	0x00785000 ; undefined
    5b74:	00000000 	.inst	0x00000000 ; undefined
    5b78:	00d80000 	.inst	0x00d80000 ; undefined
    5b7c:	00000000 	.inst	0x00000000 ; undefined
    5b80:	00010000 	.inst	0x00010000 ; undefined
    5b84:	0000d866 	.inst	0x0000d866 ; undefined
    5b88:	00000000 	.inst	0x00000000 ; undefined
    5b8c:	00011800 	.inst	0x00011800 ; undefined
    5b90:	00000000 	.inst	0x00000000 ; undefined
    5b94:	f3000400 	.inst	0xf3000400 ; undefined
    5b98:	189f5001 	ldr	w1, fffffffffff44598 <SMC_ID_HW_RSA+0xffffffff7bf34691>
    5b9c:	00000001 	.inst	0x00000001 ; undefined
    5ba0:	20000000 	.inst	0x20000000 ; undefined
    5ba4:	00000001 	.inst	0x00000001 ; undefined
    5ba8:	01000000 	.inst	0x01000000 ; undefined
    5bac:	01206600 	.inst	0x01206600 ; undefined
    5bb0:	00000000 	.inst	0x00000000 ; undefined
    5bb4:	01300000 	.inst	0x01300000 ; undefined
    5bb8:	00000000 	.inst	0x00000000 ; undefined
    5bbc:	00040000 	.inst	0x00040000 ; undefined
    5bc0:	9f5001f3 	.inst	0x9f5001f3 ; undefined
	...
    5bdc:	0000001c 	.inst	0x0000001c ; undefined
    5be0:	00000000 	.inst	0x00000000 ; undefined
    5be4:	1c510001 	ldr	s1, a7be4 <_stack_size+0xa6be4>
    5be8:	00000000 	.inst	0x00000000 ; undefined
    5bec:	30000000 	adr	x0, 5bed <_stack_size+0x4bed>
    5bf0:	00000000 	.inst	0x00000000 ; undefined
    5bf4:	04000000 	.inst	0x04000000 ; undefined
    5bf8:	5101f300 	sub	w0, w24, #0x7c
    5bfc:	0000309f 	.inst	0x0000309f ; undefined
    5c00:	00000000 	.inst	0x00000000 ; undefined
    5c04:	00007800 	.inst	0x00007800 ; undefined
    5c08:	00000000 	.inst	0x00000000 ; undefined
    5c0c:	51000100 	sub	w0, w8, #0x0
    5c10:	00000078 	.inst	0x00000078 ; undefined
    5c14:	00000000 	.inst	0x00000000 ; undefined
    5c18:	000000dc 	.inst	0x000000dc ; undefined
    5c1c:	00000000 	.inst	0x00000000 ; undefined
    5c20:	dc640001 	.inst	0xdc640001 ; undefined
    5c24:	00000000 	.inst	0x00000000 ; undefined
    5c28:	18000000 	ldr	w0, 5c28 <_stack_size+0x4c28>
    5c2c:	00000001 	.inst	0x00000001 ; undefined
    5c30:	04000000 	.inst	0x04000000 ; undefined
    5c34:	5101f300 	sub	w0, w24, #0x7c
    5c38:	0001189f 	.inst	0x0001189f ; undefined
    5c3c:	00000000 	.inst	0x00000000 ; undefined
    5c40:	00012000 	.inst	0x00012000 ; undefined
    5c44:	00000000 	.inst	0x00000000 ; undefined
    5c48:	64000100 	.inst	0x64000100 ; undefined
    5c4c:	00000120 	.inst	0x00000120 ; undefined
    5c50:	00000000 	.inst	0x00000000 ; undefined
    5c54:	00000130 	.inst	0x00000130 ; undefined
    5c58:	00000000 	.inst	0x00000000 ; undefined
    5c5c:	01f30004 	.inst	0x01f30004 ; undefined
    5c60:	00009f51 	.inst	0x00009f51 ; undefined
	...
    5c78:	001c0000 	.inst	0x001c0000 ; undefined
    5c7c:	00000000 	.inst	0x00000000 ; undefined
    5c80:	00010000 	.inst	0x00010000 ; undefined
    5c84:	00001c52 	.inst	0x00001c52 ; undefined
    5c88:	00000000 	.inst	0x00000000 ; undefined
    5c8c:	00003000 	.inst	0x00003000 ; undefined
    5c90:	00000000 	.inst	0x00000000 ; undefined
    5c94:	f3000400 	.inst	0xf3000400 ; undefined
    5c98:	309f5201 	adr	x1, fffffffffff446d9 <SMC_ID_HW_RSA+0xffffffff7bf347d2>
    5c9c:	00000000 	.inst	0x00000000 ; undefined
    5ca0:	78000000 	sturh	w0, [x0]
    5ca4:	00000000 	.inst	0x00000000 ; undefined
    5ca8:	01000000 	.inst	0x01000000 ; undefined
    5cac:	00785200 	.inst	0x00785200 ; undefined
    5cb0:	00000000 	.inst	0x00000000 ; undefined
    5cb4:	01080000 	.inst	0x01080000 ; undefined
    5cb8:	00000000 	.inst	0x00000000 ; undefined
    5cbc:	00010000 	.inst	0x00010000 ; undefined
    5cc0:	00010865 	.inst	0x00010865 ; undefined
    5cc4:	00000000 	.inst	0x00000000 ; undefined
    5cc8:	00011800 	.inst	0x00011800 ; undefined
    5ccc:	00000000 	.inst	0x00000000 ; undefined
    5cd0:	f3000400 	.inst	0xf3000400 ; undefined
    5cd4:	189f5201 	ldr	w1, fffffffffff44714 <SMC_ID_HW_RSA+0xffffffff7bf3480d>
    5cd8:	00000001 	.inst	0x00000001 ; undefined
    5cdc:	28000000 	stnp	w0, w0, [x0]
    5ce0:	00000001 	.inst	0x00000001 ; undefined
    5ce4:	01000000 	.inst	0x01000000 ; undefined
    5ce8:	01286500 	.inst	0x01286500 ; undefined
    5cec:	00000000 	.inst	0x00000000 ; undefined
    5cf0:	01300000 	.inst	0x01300000 ; undefined
    5cf4:	00000000 	.inst	0x00000000 ; undefined
    5cf8:	00040000 	.inst	0x00040000 ; undefined
    5cfc:	9f5201f3 	.inst	0x9f5201f3 ; undefined
	...
    5d18:	0000001c 	.inst	0x0000001c ; undefined
    5d1c:	00000000 	.inst	0x00000000 ; undefined
    5d20:	000a0004 	.inst	0x000a0004 ; undefined
    5d24:	00309f10 	.inst	0x00309f10 ; NYI
    5d28:	00000000 	.inst	0x00000000 ; undefined
    5d2c:	00400000 	.inst	0x00400000 ; undefined
    5d30:	00000000 	.inst	0x00000000 ; undefined
    5d34:	00040000 	.inst	0x00040000 ; undefined
    5d38:	9f10000a 	.inst	0x9f10000a ; undefined
    5d3c:	00000040 	.inst	0x00000040 ; undefined
    5d40:	00000000 	.inst	0x00000000 ; undefined
    5d44:	00000044 	.inst	0x00000044 ; undefined
    5d48:	00000000 	.inst	0x00000000 ; undefined
    5d4c:	44530001 	.inst	0x44530001 ; undefined
    5d50:	00000000 	.inst	0x00000000 ; undefined
    5d54:	4c000000 	st4	{v0.16b-v3.16b}, [x0]
    5d58:	00000000 	.inst	0x00000000 ; undefined
    5d5c:	03000000 	.inst	0x03000000 ; undefined
    5d60:	9f7f7300 	.inst	0x9f7f7300 ; undefined
    5d64:	0000004c 	.inst	0x0000004c ; undefined
    5d68:	00000000 	.inst	0x00000000 ; undefined
    5d6c:	00000078 	.inst	0x00000078 ; undefined
    5d70:	00000000 	.inst	0x00000000 ; undefined
    5d74:	c0530001 	.inst	0xc0530001 ; undefined
    5d78:	00000000 	.inst	0x00000000 ; undefined
    5d7c:	c4000000 	.inst	0xc4000000 ; undefined
    5d80:	00000000 	.inst	0x00000000 ; undefined
    5d84:	04000000 	.inst	0x04000000 ; undefined
    5d88:	10000a00 	adr	x0, 5ec8 <_stack_size+0x4ec8>
    5d8c:	0000c49f 	.inst	0x0000c49f ; undefined
    5d90:	00000000 	.inst	0x00000000 ; undefined
    5d94:	0000c800 	.inst	0x0000c800 ; undefined
    5d98:	00000000 	.inst	0x00000000 ; undefined
    5d9c:	50000100 	adr	x0, 5dbe <_stack_size+0x4dbe>
    5da0:	000000c8 	.inst	0x000000c8 ; undefined
    5da4:	00000000 	.inst	0x00000000 ; undefined
    5da8:	000000d0 	.inst	0x000000d0 ; undefined
    5dac:	00000000 	.inst	0x00000000 ; undefined
    5db0:	7f700003 	.inst	0x7f700003 ; undefined
    5db4:	0000d09f 	.inst	0x0000d09f ; undefined
    5db8:	00000000 	.inst	0x00000000 ; undefined
    5dbc:	0000e400 	.inst	0x0000e400 ; undefined
    5dc0:	00000000 	.inst	0x00000000 ; undefined
    5dc4:	50000100 	adr	x0, 5de6 <_stack_size+0x4de6>
	...
    5de0:	0000001c 	.inst	0x0000001c ; undefined
    5de4:	00000000 	.inst	0x00000000 ; undefined
    5de8:	9f300002 	.inst	0x9f300002 ; undefined
    5dec:	00000030 	.inst	0x00000030 ; undefined
    5df0:	00000000 	.inst	0x00000000 ; undefined
    5df4:	00000078 	.inst	0x00000078 ; undefined
    5df8:	00000000 	.inst	0x00000000 ; undefined
    5dfc:	9f300002 	.inst	0x9f300002 ; undefined
	...
    5e18:	0000001c 	.inst	0x0000001c ; undefined
    5e1c:	00000000 	.inst	0x00000000 ; undefined
    5e20:	9f300002 	.inst	0x9f300002 ; undefined
    5e24:	00000030 	.inst	0x00000030 ; undefined
    5e28:	00000000 	.inst	0x00000000 ; undefined
    5e2c:	00000078 	.inst	0x00000078 ; undefined
    5e30:	00000000 	.inst	0x00000000 ; undefined
    5e34:	9f300002 	.inst	0x9f300002 ; undefined
    5e38:	00000080 	.inst	0x00000080 ; undefined
    5e3c:	00000000 	.inst	0x00000000 ; undefined
    5e40:	0000009c 	.inst	0x0000009c ; undefined
    5e44:	00000000 	.inst	0x00000000 ; undefined
    5e48:	9c500001 	ldr	q1, a5e48 <_stack_size+0xa4e48>
    5e4c:	00000000 	.inst	0x00000000 ; undefined
    5e50:	ac000000 	stnp	q0, q0, [x0]
    5e54:	00000000 	.inst	0x00000000 ; undefined
    5e58:	02000000 	.inst	0x02000000 ; undefined
    5e5c:	ac7c8300 	ldnp	q0, q0, [x24,#-112]
    5e60:	00000000 	.inst	0x00000000 ; undefined
    5e64:	b4000000 	cbz	x0, 5e64 <_stack_size+0x4e64>
    5e68:	00000000 	.inst	0x00000000 ; undefined
    5e6c:	01000000 	.inst	0x01000000 ; undefined
    5e70:	00b85100 	.inst	0x00b85100 ; undefined
    5e74:	00000000 	.inst	0x00000000 ; undefined
    5e78:	00bc0000 	.inst	0x00bc0000 ; undefined
    5e7c:	00000000 	.inst	0x00000000 ; undefined
    5e80:	00010000 	.inst	0x00010000 ; undefined
    5e84:	0000e851 	.inst	0x0000e851 ; undefined
    5e88:	00000000 	.inst	0x00000000 ; undefined
    5e8c:	00010400 	.inst	0x00010400 ; undefined
    5e90:	00000000 	.inst	0x00000000 ; undefined
    5e94:	50000100 	adr	x0, 5eb6 <_stack_size+0x4eb6>
    5e98:	00000104 	.inst	0x00000104 ; undefined
    5e9c:	00000000 	.inst	0x00000000 ; undefined
    5ea0:	00000108 	.inst	0x00000108 ; undefined
    5ea4:	00000000 	.inst	0x00000000 ; undefined
    5ea8:	00850005 	.inst	0x00850005 ; undefined
    5eac:	08220071 	.inst	0x08220071 ; undefined
    5eb0:	00000001 	.inst	0x00000001 ; undefined
    5eb4:	18000000 	ldr	w0, 5eb4 <_stack_size+0x4eb4>
    5eb8:	00000001 	.inst	0x00000001 ; undefined
    5ebc:	06000000 	.inst	0x06000000 ; undefined
    5ec0:	5201f300 	eor	w0, w24, #0xaaaaaaaa
    5ec4:	18220071 	ldr	w17, 49ed0 <_stack_size+0x48ed0>
    5ec8:	00000001 	.inst	0x00000001 ; undefined
    5ecc:	1b000000 	madd	w0, w0, w0, w0
    5ed0:	00000001 	.inst	0x00000001 ; undefined
    5ed4:	01000000 	.inst	0x01000000 ; undefined
    5ed8:	011c5000 	.inst	0x011c5000 ; undefined
    5edc:	00000000 	.inst	0x00000000 ; undefined
    5ee0:	01230000 	.inst	0x01230000 ; undefined
    5ee4:	00000000 	.inst	0x00000000 ; undefined
    5ee8:	00010000 	.inst	0x00010000 ; undefined
    5eec:	00012450 	.inst	0x00012450 ; undefined
    5ef0:	00000000 	.inst	0x00000000 ; undefined
    5ef4:	00012800 	.inst	0x00012800 ; undefined
    5ef8:	00000000 	.inst	0x00000000 ; undefined
    5efc:	50000100 	adr	x0, 5f1e <_stack_size+0x4f1e>
	...
    5f18:	0000001c 	.inst	0x0000001c ; undefined
    5f1c:	00000000 	.inst	0x00000000 ; undefined
    5f20:	00700005 	.inst	0x00700005 ; undefined
    5f24:	1c9f1a31 	ldr	s17, fffffffffff44268 <SMC_ID_HW_RSA+0xffffffff7bf34361>
    5f28:	00000000 	.inst	0x00000000 ; undefined
    5f2c:	30000000 	adr	x0, 5f2d <_stack_size+0x4f2d>
    5f30:	00000000 	.inst	0x00000000 ; undefined
    5f34:	06000000 	.inst	0x06000000 ; undefined
    5f38:	5001f300 	adr	x0, 9d9a <_stack_size+0x8d9a>
    5f3c:	309f1a31 	adr	x17, fffffffffff44281 <SMC_ID_HW_RSA+0xffffffff7bf3437a>
    5f40:	00000000 	.inst	0x00000000 ; undefined
    5f44:	78000000 	sturh	w0, [x0]
    5f48:	00000000 	.inst	0x00000000 ; undefined
    5f4c:	05000000 	.inst	0x05000000 ; undefined
    5f50:	31007000 	adds	w0, w0, #0x1c
    5f54:	00789f1a 	.inst	0x00789f1a ; undefined
    5f58:	00000000 	.inst	0x00000000 ; undefined
    5f5c:	00d80000 	.inst	0x00d80000 ; undefined
    5f60:	00000000 	.inst	0x00000000 ; undefined
    5f64:	00050000 	.inst	0x00050000 ; undefined
    5f68:	1a310086 	.inst	0x1a310086 ; undefined
    5f6c:	0000d89f 	.inst	0x0000d89f ; undefined
    5f70:	00000000 	.inst	0x00000000 ; undefined
    5f74:	00011800 	.inst	0x00011800 ; undefined
    5f78:	00000000 	.inst	0x00000000 ; undefined
    5f7c:	f3000600 	.inst	0xf3000600 ; undefined
    5f80:	1a315001 	.inst	0x1a315001 ; undefined
    5f84:	0001189f 	.inst	0x0001189f ; undefined
    5f88:	00000000 	.inst	0x00000000 ; undefined
    5f8c:	00012000 	.inst	0x00012000 ; undefined
    5f90:	00000000 	.inst	0x00000000 ; undefined
    5f94:	86000500 	.inst	0x86000500 ; undefined
    5f98:	9f1a3100 	.inst	0x9f1a3100 ; undefined
    5f9c:	00000120 	.inst	0x00000120 ; undefined
    5fa0:	00000000 	.inst	0x00000000 ; undefined
    5fa4:	00000130 	.inst	0x00000130 ; undefined
    5fa8:	00000000 	.inst	0x00000000 ; undefined
    5fac:	01f30006 	.inst	0x01f30006 ; undefined
    5fb0:	9f1a3150 	.inst	0x9f1a3150 ; undefined
	...
    5fcc:	0000001c 	.inst	0x0000001c ; undefined
    5fd0:	00000000 	.inst	0x00000000 ; undefined
    5fd4:	00700005 	.inst	0x00700005 ; undefined
    5fd8:	1c9f1a32 	ldr	s18, fffffffffff4431c <SMC_ID_HW_RSA+0xffffffff7bf34415>
    5fdc:	00000000 	.inst	0x00000000 ; undefined
    5fe0:	30000000 	adr	x0, 5fe1 <_stack_size+0x4fe1>
    5fe4:	00000000 	.inst	0x00000000 ; undefined
    5fe8:	06000000 	.inst	0x06000000 ; undefined
    5fec:	5001f300 	adr	x0, 9e4e <_stack_size+0x8e4e>
    5ff0:	309f1a32 	adr	x18, fffffffffff44335 <SMC_ID_HW_RSA+0xffffffff7bf3442e>
    5ff4:	00000000 	.inst	0x00000000 ; undefined
    5ff8:	78000000 	sturh	w0, [x0]
    5ffc:	00000000 	.inst	0x00000000 ; undefined
    6000:	05000000 	.inst	0x05000000 ; undefined
    6004:	32007000 	orr	w0, w0, #0x1fffffff
    6008:	00789f1a 	.inst	0x00789f1a ; undefined
    600c:	00000000 	.inst	0x00000000 ; undefined
    6010:	00d80000 	.inst	0x00d80000 ; undefined
    6014:	00000000 	.inst	0x00000000 ; undefined
    6018:	00050000 	.inst	0x00050000 ; undefined
    601c:	1a320086 	.inst	0x1a320086 ; undefined
    6020:	0000d89f 	.inst	0x0000d89f ; undefined
    6024:	00000000 	.inst	0x00000000 ; undefined
    6028:	00011800 	.inst	0x00011800 ; undefined
    602c:	00000000 	.inst	0x00000000 ; undefined
    6030:	f3000600 	.inst	0xf3000600 ; undefined
    6034:	1a325001 	.inst	0x1a325001 ; undefined
    6038:	0001189f 	.inst	0x0001189f ; undefined
    603c:	00000000 	.inst	0x00000000 ; undefined
    6040:	00012000 	.inst	0x00012000 ; undefined
    6044:	00000000 	.inst	0x00000000 ; undefined
    6048:	86000500 	.inst	0x86000500 ; undefined
    604c:	9f1a3200 	.inst	0x9f1a3200 ; undefined
    6050:	00000120 	.inst	0x00000120 ; undefined
    6054:	00000000 	.inst	0x00000000 ; undefined
    6058:	00000130 	.inst	0x00000130 ; undefined
    605c:	00000000 	.inst	0x00000000 ; undefined
    6060:	01f30006 	.inst	0x01f30006 ; undefined
    6064:	9f1a3250 	.inst	0x9f1a3250 ; undefined
	...
    6078:	00000130 	.inst	0x00000130 ; undefined
    607c:	00000000 	.inst	0x00000000 ; undefined
    6080:	0000018c 	.inst	0x0000018c ; undefined
    6084:	00000000 	.inst	0x00000000 ; undefined
    6088:	8c500001 	.inst	0x8c500001 ; undefined
    608c:	00000001 	.inst	0x00000001 ; undefined
    6090:	b0000000 	adrp	x0, 7000 <_stack_size+0x6000>
    6094:	00000002 	.inst	0x00000002 ; undefined
    6098:	04000000 	.inst	0x04000000 ; undefined
    609c:	5001f300 	adr	x0, 9efe <_stack_size+0x8efe>
    60a0:	0000009f 	.inst	0x0000009f ; undefined
	...
    60b0:	00013000 	.inst	0x00013000 ; undefined
    60b4:	00000000 	.inst	0x00000000 ; undefined
    60b8:	0001a000 	.inst	0x0001a000 ; undefined
    60bc:	00000000 	.inst	0x00000000 ; undefined
    60c0:	51000100 	sub	w0, w8, #0x0
    60c4:	000001a0 	.inst	0x000001a0 ; undefined
    60c8:	00000000 	.inst	0x00000000 ; undefined
    60cc:	00000280 	.inst	0x00000280 ; undefined
    60d0:	00000000 	.inst	0x00000000 ; undefined
    60d4:	01f30004 	.inst	0x01f30004 ; undefined
    60d8:	02809f51 	.inst	0x02809f51 ; undefined
    60dc:	00000000 	.inst	0x00000000 ; undefined
    60e0:	02a00000 	.inst	0x02a00000 ; undefined
    60e4:	00000000 	.inst	0x00000000 ; undefined
    60e8:	00010000 	.inst	0x00010000 ; undefined
    60ec:	0002a051 	.inst	0x0002a051 ; undefined
    60f0:	00000000 	.inst	0x00000000 ; undefined
    60f4:	0002b000 	.inst	0x0002b000 ; undefined
    60f8:	00000000 	.inst	0x00000000 ; undefined
    60fc:	f3000400 	.inst	0xf3000400 ; undefined
    6100:	009f5101 	.inst	0x009f5101 ; undefined
	...
    6110:	30000000 	adr	x0, 6111 <_stack_size+0x5111>
    6114:	00000001 	.inst	0x00000001 ; undefined
    6118:	c7000000 	.inst	0xc7000000 ; undefined
    611c:	00000001 	.inst	0x00000001 ; undefined
    6120:	01000000 	.inst	0x01000000 ; undefined
    6124:	01c75200 	.inst	0x01c75200 ; undefined
    6128:	00000000 	.inst	0x00000000 ; undefined
    612c:	02800000 	.inst	0x02800000 ; undefined
    6130:	00000000 	.inst	0x00000000 ; undefined
    6134:	00040000 	.inst	0x00040000 ; undefined
    6138:	9f5201f3 	.inst	0x9f5201f3 ; undefined
    613c:	00000280 	.inst	0x00000280 ; undefined
    6140:	00000000 	.inst	0x00000000 ; undefined
    6144:	000002a0 	.inst	0x000002a0 ; undefined
    6148:	00000000 	.inst	0x00000000 ; undefined
    614c:	a0520001 	.inst	0xa0520001 ; undefined
    6150:	00000002 	.inst	0x00000002 ; undefined
    6154:	b0000000 	adrp	x0, 7000 <_stack_size+0x6000>
    6158:	00000002 	.inst	0x00000002 ; undefined
    615c:	04000000 	.inst	0x04000000 ; undefined
    6160:	5201f300 	eor	w0, w24, #0xaaaaaaaa
    6164:	0000009f 	.inst	0x0000009f ; undefined
	...
    6174:	00013000 	.inst	0x00013000 ; undefined
    6178:	00000000 	.inst	0x00000000 ; undefined
    617c:	0001ac00 	.inst	0x0001ac00 ; undefined
    6180:	00000000 	.inst	0x00000000 ; undefined
    6184:	53000100 	ubfx	w0, w8, #0, #1
    6188:	000001ac 	.inst	0x000001ac ; undefined
    618c:	00000000 	.inst	0x00000000 ; undefined
    6190:	00000280 	.inst	0x00000280 ; undefined
    6194:	00000000 	.inst	0x00000000 ; undefined
    6198:	01f30004 	.inst	0x01f30004 ; undefined
    619c:	02809f53 	.inst	0x02809f53 ; undefined
    61a0:	00000000 	.inst	0x00000000 ; undefined
    61a4:	02a00000 	.inst	0x02a00000 ; undefined
    61a8:	00000000 	.inst	0x00000000 ; undefined
    61ac:	00010000 	.inst	0x00010000 ; undefined
    61b0:	0002a053 	.inst	0x0002a053 ; undefined
    61b4:	00000000 	.inst	0x00000000 ; undefined
    61b8:	0002b000 	.inst	0x0002b000 ; undefined
    61bc:	00000000 	.inst	0x00000000 ; undefined
    61c0:	f3000400 	.inst	0xf3000400 ; undefined
    61c4:	009f5301 	.inst	0x009f5301 ; undefined
	...
    61d4:	30000000 	adr	x0, 61d5 <_stack_size+0x51d5>
    61d8:	00000001 	.inst	0x00000001 ; undefined
    61dc:	84000000 	.inst	0x84000000 ; undefined
    61e0:	00000001 	.inst	0x00000001 ; undefined
    61e4:	01000000 	.inst	0x01000000 ; undefined
    61e8:	01845400 	.inst	0x01845400 ; undefined
    61ec:	00000000 	.inst	0x00000000 ; undefined
    61f0:	02800000 	.inst	0x02800000 ; undefined
    61f4:	00000000 	.inst	0x00000000 ; undefined
    61f8:	00040000 	.inst	0x00040000 ; undefined
    61fc:	9f5401f3 	.inst	0x9f5401f3 ; undefined
    6200:	00000280 	.inst	0x00000280 ; undefined
    6204:	00000000 	.inst	0x00000000 ; undefined
    6208:	000002a0 	.inst	0x000002a0 ; undefined
    620c:	00000000 	.inst	0x00000000 ; undefined
    6210:	a0540001 	.inst	0xa0540001 ; undefined
    6214:	00000002 	.inst	0x00000002 ; undefined
    6218:	b0000000 	adrp	x0, 7000 <_stack_size+0x6000>
    621c:	00000002 	.inst	0x00000002 ; undefined
    6220:	04000000 	.inst	0x04000000 ; undefined
    6224:	5401f300 	b.eq	a084 <_stack_size+0x9084>
    6228:	0000009f 	.inst	0x0000009f ; undefined
	...
    6238:	00013000 	.inst	0x00013000 ; undefined
    623c:	00000000 	.inst	0x00000000 ; undefined
    6240:	00014800 	.inst	0x00014800 ; undefined
    6244:	00000000 	.inst	0x00000000 ; undefined
    6248:	55000100 	.inst	0x55000100 ; undefined
    624c:	00000148 	.inst	0x00000148 ; undefined
    6250:	00000000 	.inst	0x00000000 ; undefined
    6254:	000002b0 	.inst	0x000002b0 ; undefined
    6258:	00000000 	.inst	0x00000000 ; undefined
    625c:	01f30004 	.inst	0x01f30004 ; undefined
    6260:	00009f55 	.inst	0x00009f55 ; undefined
	...
    6270:	01300000 	.inst	0x01300000 ; undefined
    6274:	00000000 	.inst	0x00000000 ; undefined
    6278:	01740000 	.inst	0x01740000 ; undefined
    627c:	00000000 	.inst	0x00000000 ; undefined
    6280:	00010000 	.inst	0x00010000 ; undefined
    6284:	00017456 	.inst	0x00017456 ; undefined
    6288:	00000000 	.inst	0x00000000 ; undefined
    628c:	00028000 	.inst	0x00028000 ; undefined
    6290:	00000000 	.inst	0x00000000 ; undefined
    6294:	f3000400 	.inst	0xf3000400 ; undefined
    6298:	809f5601 	.inst	0x809f5601 ; undefined
    629c:	00000002 	.inst	0x00000002 ; undefined
    62a0:	a0000000 	.inst	0xa0000000 ; undefined
    62a4:	00000002 	.inst	0x00000002 ; undefined
    62a8:	01000000 	.inst	0x01000000 ; undefined
    62ac:	02a05600 	.inst	0x02a05600 ; undefined
    62b0:	00000000 	.inst	0x00000000 ; undefined
    62b4:	02b00000 	.inst	0x02b00000 ; undefined
    62b8:	00000000 	.inst	0x00000000 ; undefined
    62bc:	00040000 	.inst	0x00040000 ; undefined
    62c0:	9f5601f3 	.inst	0x9f5601f3 ; undefined
	...
    62d4:	00000130 	.inst	0x00000130 ; undefined
    62d8:	00000000 	.inst	0x00000000 ; undefined
    62dc:	000001c7 	.inst	0x000001c7 ; undefined
    62e0:	00000000 	.inst	0x00000000 ; undefined
    62e4:	c7570001 	.inst	0xc7570001 ; undefined
    62e8:	00000001 	.inst	0x00000001 ; undefined
    62ec:	14000000 	b	62ec <_stack_size+0x52ec>
    62f0:	00000002 	.inst	0x00000002 ; undefined
    62f4:	01000000 	.inst	0x01000000 ; undefined
    62f8:	02146400 	.inst	0x02146400 ; undefined
    62fc:	00000000 	.inst	0x00000000 ; undefined
    6300:	02200000 	.inst	0x02200000 ; undefined
    6304:	00000000 	.inst	0x00000000 ; undefined
    6308:	00010000 	.inst	0x00010000 ; undefined
    630c:	0002206c 	.inst	0x0002206c ; undefined
    6310:	00000000 	.inst	0x00000000 ; undefined
    6314:	00023400 	.inst	0x00023400 ; undefined
    6318:	00000000 	.inst	0x00000000 ; undefined
    631c:	8c000300 	.inst	0x8c000300 ; undefined
    6320:	02349f10 	.inst	0x02349f10 ; undefined
    6324:	00000000 	.inst	0x00000000 ; undefined
    6328:	02580000 	.inst	0x02580000 ; undefined
    632c:	00000000 	.inst	0x00000000 ; undefined
    6330:	00010000 	.inst	0x00010000 ; undefined
    6334:	0002806c 	.inst	0x0002806c ; undefined
    6338:	00000000 	.inst	0x00000000 ; undefined
    633c:	0002a000 	.inst	0x0002a000 ; undefined
    6340:	00000000 	.inst	0x00000000 ; undefined
    6344:	57000100 	.inst	0x57000100 ; undefined
    6348:	000002a0 	.inst	0x000002a0 ; undefined
    634c:	00000000 	.inst	0x00000000 ; undefined
    6350:	000002ac 	.inst	0x000002ac ; undefined
    6354:	00000000 	.inst	0x00000000 ; undefined
    6358:	00640001 	.inst	0x00640001 ; undefined
	...
    6368:	30000000 	adr	x0, 6369 <_stack_size+0x5369>
    636c:	00000001 	.inst	0x00000001 ; undefined
    6370:	18000000 	ldr	w0, 6370 <_stack_size+0x5370>
    6374:	00000002 	.inst	0x00000002 ; undefined
    6378:	02000000 	.inst	0x02000000 ; undefined
    637c:	189f3000 	ldr	w0, fffffffffff4497c <SMC_ID_HW_RSA+0xffffffff7bf34a75>
    6380:	00000002 	.inst	0x00000002 ; undefined
    6384:	20000000 	.inst	0x20000000 ; undefined
    6388:	00000002 	.inst	0x00000002 ; undefined
    638c:	08000000 	stxrb	w0, w0, [x0]
    6390:	947c9100 	bl	1f2a790 <MPIDR_EL1_MT+0xf2a790>
    6394:	1c008c04 	ldr	s4, 7514 <_stack_size+0x6514>
    6398:	0002209f 	.inst	0x0002209f ; undefined
    639c:	00000000 	.inst	0x00000000 ; undefined
    63a0:	00023400 	.inst	0x00023400 ; undefined
    63a4:	00000000 	.inst	0x00000000 ; undefined
    63a8:	91000a00 	add	x0, x16, #0x2
    63ac:	8c04947c 	.inst	0x8c04947c ; undefined
    63b0:	1c401c00 	ldr	s0, 86730 <_stack_size+0x85730>
    63b4:	0002349f 	.inst	0x0002349f ; undefined
    63b8:	00000000 	.inst	0x00000000 ; undefined
    63bc:	00025800 	.inst	0x00025800 ; undefined
    63c0:	00000000 	.inst	0x00000000 ; undefined
    63c4:	91000800 	add	x0, x0, #0x2
    63c8:	8c04947c 	.inst	0x8c04947c ; undefined
    63cc:	809f1c00 	.inst	0x809f1c00 ; undefined
    63d0:	00000002 	.inst	0x00000002 ; undefined
    63d4:	ac000000 	stnp	q0, q0, [x0]
    63d8:	00000002 	.inst	0x00000002 ; undefined
    63dc:	02000000 	.inst	0x02000000 ; undefined
    63e0:	009f3000 	.inst	0x009f3000 ; undefined
	...
    63f0:	30000000 	adr	x0, 63f1 <_stack_size+0x53f1>
    63f4:	00000002 	.inst	0x00000002 ; undefined
    63f8:	33000000 	bfxil	w0, w0, #0, #1
    63fc:	00000002 	.inst	0x00000002 ; undefined
    6400:	70000000 	adr	x0, 6403 <_stack_size+0x5403>
    6404:	58570c00 	ldr	x0, b4584 <_stack_size+0xb3584>
    6408:	01939801 	.inst	0x01939801 ; undefined
    640c:	0158560c 	.inst	0x0158560c ; undefined
    6410:	0c019398 	.inst	0x0c019398 ; undefined
    6414:	98015855 	ldrsw	x21, 8f1c <_stack_size+0x7f1c>
    6418:	540c0193 	.inst	0x540c0193 ; undefined
    641c:	93980158 	.inst	0x93980158 ; undefined
    6420:	585b0c01 	ldr	x1, bc5a0 <_stack_size+0xbb5a0>
    6424:	01939801 	.inst	0x01939801 ; undefined
    6428:	01585a0c 	.inst	0x01585a0c ; undefined
    642c:	0c019398 	.inst	0x0c019398 ; undefined
    6430:	98015859 	ldrsw	x25, 8f38 <_stack_size+0x7f38>
    6434:	580c0193 	ldr	x19, 1e464 <_stack_size+0x1d464>
    6438:	93980158 	.inst	0x93980158 ; undefined
    643c:	585f0c01 	ldr	x1, c45bc <_stack_size+0xc35bc>
    6440:	01939801 	.inst	0x01939801 ; undefined
    6444:	01585e0c 	.inst	0x01585e0c ; undefined
    6448:	0c019398 	.inst	0x0c019398 ; undefined
    644c:	9801585d 	ldrsw	x29, 8f54 <_stack_size+0x7f54>
    6450:	5c0c0193 	ldr	d19, 1e480 <_stack_size+0x1d480>
    6454:	93980158 	.inst	0x93980158 ; undefined
    6458:	58630c01 	ldr	x1, cc5d8 <_stack_size+0xcb5d8>
    645c:	01939801 	.inst	0x01939801 ; undefined
    6460:	0158620c 	.inst	0x0158620c ; undefined
    6464:	0c019398 	.inst	0x0c019398 ; undefined
    6468:	98015861 	ldrsw	x1, 8f74 <_stack_size+0x7f74>
    646c:	600c0193 	.inst	0x600c0193 ; undefined
    6470:	93980158 	.inst	0x93980158 ; undefined
    6474:	00000001 	.inst	0x00000001 ; undefined
	...
    6484:	0002b000 	.inst	0x0002b000 ; undefined
    6488:	00000000 	.inst	0x00000000 ; undefined
    648c:	00030c00 	.inst	0x00030c00 ; undefined
    6490:	00000000 	.inst	0x00000000 ; undefined
    6494:	50000100 	adr	x0, 64b6 <_stack_size+0x54b6>
    6498:	0000030c 	.inst	0x0000030c ; undefined
    649c:	00000000 	.inst	0x00000000 ; undefined
    64a0:	00000420 	.inst	0x00000420 ; undefined
    64a4:	00000000 	.inst	0x00000000 ; undefined
    64a8:	01f30004 	.inst	0x01f30004 ; undefined
    64ac:	00009f50 	.inst	0x00009f50 ; undefined
	...
    64bc:	02b00000 	.inst	0x02b00000 ; undefined
    64c0:	00000000 	.inst	0x00000000 ; undefined
    64c4:	02c80000 	.inst	0x02c80000 ; undefined
    64c8:	00000000 	.inst	0x00000000 ; undefined
    64cc:	00010000 	.inst	0x00010000 ; undefined
    64d0:	0002c851 	.inst	0x0002c851 ; undefined
    64d4:	00000000 	.inst	0x00000000 ; undefined
    64d8:	00042000 	.inst	0x00042000 ; undefined
    64dc:	00000000 	.inst	0x00000000 ; undefined
    64e0:	f3000400 	.inst	0xf3000400 ; undefined
    64e4:	009f5101 	.inst	0x009f5101 ; undefined
	...
    64f4:	b0000000 	adrp	x0, 7000 <_stack_size+0x6000>
    64f8:	00000002 	.inst	0x00000002 ; undefined
    64fc:	c0000000 	.inst	0xc0000000 ; undefined
    6500:	00000002 	.inst	0x00000002 ; undefined
    6504:	01000000 	.inst	0x01000000 ; undefined
    6508:	02c05200 	.inst	0x02c05200 ; undefined
    650c:	00000000 	.inst	0x00000000 ; undefined
    6510:	04200000 	.inst	0x04200000 ; undefined
    6514:	00000000 	.inst	0x00000000 ; undefined
    6518:	00040000 	.inst	0x00040000 ; undefined
    651c:	9f5201f3 	.inst	0x9f5201f3 ; undefined
	...
    6530:	000002b0 	.inst	0x000002b0 ; undefined
    6534:	00000000 	.inst	0x00000000 ; undefined
    6538:	0000032c 	.inst	0x0000032c ; undefined
    653c:	00000000 	.inst	0x00000000 ; undefined
    6540:	2c530001 	ldnp	s1, s0, [x0,#152]
    6544:	00000003 	.inst	0x00000003 ; undefined
    6548:	f0000000 	adrp	x0, 9000 <_stack_size+0x8000>
    654c:	00000003 	.inst	0x00000003 ; undefined
    6550:	04000000 	.inst	0x04000000 ; undefined
    6554:	5301f300 	.inst	0x5301f300 ; undefined
    6558:	0003f09f 	.inst	0x0003f09f ; undefined
    655c:	00000000 	.inst	0x00000000 ; undefined
    6560:	00041000 	.inst	0x00041000 ; undefined
    6564:	00000000 	.inst	0x00000000 ; undefined
    6568:	53000100 	ubfx	w0, w8, #0, #1
    656c:	00000410 	.inst	0x00000410 ; undefined
    6570:	00000000 	.inst	0x00000000 ; undefined
    6574:	00000420 	.inst	0x00000420 ; undefined
    6578:	00000000 	.inst	0x00000000 ; undefined
    657c:	01f30004 	.inst	0x01f30004 ; undefined
    6580:	00009f53 	.inst	0x00009f53 ; undefined
	...
    6590:	02b00000 	.inst	0x02b00000 ; undefined
    6594:	00000000 	.inst	0x00000000 ; undefined
    6598:	03040000 	.inst	0x03040000 ; undefined
    659c:	00000000 	.inst	0x00000000 ; undefined
    65a0:	00010000 	.inst	0x00010000 ; undefined
    65a4:	00030454 	.inst	0x00030454 ; undefined
    65a8:	00000000 	.inst	0x00000000 ; undefined
    65ac:	0003f000 	.inst	0x0003f000 ; undefined
    65b0:	00000000 	.inst	0x00000000 ; undefined
    65b4:	f3000400 	.inst	0xf3000400 ; undefined
    65b8:	f09f5401 	adrp	x1, ffffffff3ea89000 <SMC_ID_HW_RSA+0xfffffffebaa790f9>
    65bc:	00000003 	.inst	0x00000003 ; undefined
    65c0:	10000000 	adr	x0, 65c0 <_stack_size+0x55c0>
    65c4:	00000004 	.inst	0x00000004 ; undefined
    65c8:	01000000 	.inst	0x01000000 ; undefined
    65cc:	04105400 	.inst	0x04105400 ; undefined
    65d0:	00000000 	.inst	0x00000000 ; undefined
    65d4:	04200000 	.inst	0x04200000 ; undefined
    65d8:	00000000 	.inst	0x00000000 ; undefined
    65dc:	00040000 	.inst	0x00040000 ; undefined
    65e0:	9f5401f3 	.inst	0x9f5401f3 ; undefined
	...
    65f4:	000002b0 	.inst	0x000002b0 ; undefined
    65f8:	00000000 	.inst	0x00000000 ; undefined
    65fc:	00000337 	.inst	0x00000337 ; undefined
    6600:	00000000 	.inst	0x00000000 ; undefined
    6604:	37550001 	tbnz	w1, #10, 604 <MPIDR_EL1_AFF3_LSB+0x5e4>
    6608:	00000003 	.inst	0x00000003 ; undefined
    660c:	f0000000 	adrp	x0, 9000 <_stack_size+0x8000>
    6610:	00000003 	.inst	0x00000003 ; undefined
    6614:	04000000 	.inst	0x04000000 ; undefined
    6618:	5501f300 	.inst	0x5501f300 ; undefined
    661c:	0003f09f 	.inst	0x0003f09f ; undefined
    6620:	00000000 	.inst	0x00000000 ; undefined
    6624:	00041000 	.inst	0x00041000 ; undefined
    6628:	00000000 	.inst	0x00000000 ; undefined
    662c:	55000100 	.inst	0x55000100 ; undefined
    6630:	00000410 	.inst	0x00000410 ; undefined
    6634:	00000000 	.inst	0x00000000 ; undefined
    6638:	00000420 	.inst	0x00000420 ; undefined
    663c:	00000000 	.inst	0x00000000 ; undefined
    6640:	01f30004 	.inst	0x01f30004 ; undefined
    6644:	00009f55 	.inst	0x00009f55 ; undefined
	...
    6654:	02b00000 	.inst	0x02b00000 ; undefined
    6658:	00000000 	.inst	0x00000000 ; undefined
    665c:	03370000 	.inst	0x03370000 ; undefined
    6660:	00000000 	.inst	0x00000000 ; undefined
    6664:	00010000 	.inst	0x00010000 ; undefined
    6668:	00033756 	.inst	0x00033756 ; undefined
    666c:	00000000 	.inst	0x00000000 ; undefined
    6670:	0003f000 	.inst	0x0003f000 ; undefined
    6674:	00000000 	.inst	0x00000000 ; undefined
    6678:	f3000400 	.inst	0xf3000400 ; undefined
    667c:	f09f5601 	adrp	x1, ffffffff3eac9000 <SMC_ID_HW_RSA+0xfffffffebaab90f9>
    6680:	00000003 	.inst	0x00000003 ; undefined
    6684:	10000000 	adr	x0, 6684 <_stack_size+0x5684>
    6688:	00000004 	.inst	0x00000004 ; undefined
    668c:	01000000 	.inst	0x01000000 ; undefined
    6690:	04105600 	.inst	0x04105600 ; undefined
    6694:	00000000 	.inst	0x00000000 ; undefined
    6698:	04200000 	.inst	0x04200000 ; undefined
    669c:	00000000 	.inst	0x00000000 ; undefined
    66a0:	00040000 	.inst	0x00040000 ; undefined
    66a4:	9f5601f3 	.inst	0x9f5601f3 ; undefined
	...
    66b8:	000002b0 	.inst	0x000002b0 ; undefined
    66bc:	00000000 	.inst	0x00000000 ; undefined
    66c0:	00000337 	.inst	0x00000337 ; undefined
    66c4:	00000000 	.inst	0x00000000 ; undefined
    66c8:	37570001 	tbnz	w1, #10, 46c8 <_stack_size+0x36c8>
    66cc:	00000003 	.inst	0x00000003 ; undefined
    66d0:	84000000 	.inst	0x84000000 ; undefined
    66d4:	00000003 	.inst	0x00000003 ; undefined
    66d8:	01000000 	.inst	0x01000000 ; undefined
    66dc:	03846400 	.inst	0x03846400 ; undefined
    66e0:	00000000 	.inst	0x00000000 ; undefined
    66e4:	03900000 	.inst	0x03900000 ; undefined
    66e8:	00000000 	.inst	0x00000000 ; undefined
    66ec:	00010000 	.inst	0x00010000 ; undefined
    66f0:	0003906c 	.inst	0x0003906c ; undefined
    66f4:	00000000 	.inst	0x00000000 ; undefined
    66f8:	0003a400 	.inst	0x0003a400 ; undefined
    66fc:	00000000 	.inst	0x00000000 ; undefined
    6700:	8c000300 	.inst	0x8c000300 ; undefined
    6704:	03a49f10 	.inst	0x03a49f10 ; undefined
    6708:	00000000 	.inst	0x00000000 ; undefined
    670c:	03c80000 	.inst	0x03c80000 ; undefined
    6710:	00000000 	.inst	0x00000000 ; undefined
    6714:	00010000 	.inst	0x00010000 ; undefined
    6718:	0003f06c 	.inst	0x0003f06c ; undefined
    671c:	00000000 	.inst	0x00000000 ; undefined
    6720:	00041000 	.inst	0x00041000 ; undefined
    6724:	00000000 	.inst	0x00000000 ; undefined
    6728:	57000100 	.inst	0x57000100 ; undefined
    672c:	00000410 	.inst	0x00000410 ; undefined
    6730:	00000000 	.inst	0x00000000 ; undefined
    6734:	0000041c 	.inst	0x0000041c ; undefined
    6738:	00000000 	.inst	0x00000000 ; undefined
    673c:	00640001 	.inst	0x00640001 ; undefined
	...
    674c:	b0000000 	adrp	x0, 7000 <_stack_size+0x6000>
    6750:	00000002 	.inst	0x00000002 ; undefined
    6754:	88000000 	stxr	w0, w0, [x0]
    6758:	00000003 	.inst	0x00000003 ; undefined
    675c:	02000000 	.inst	0x02000000 ; undefined
    6760:	889f3000 	.inst	0x889f3000 ; undefined
    6764:	00000003 	.inst	0x00000003 ; undefined
    6768:	90000000 	adrp	x0, 6000 <_stack_size+0x5000>
    676c:	00000003 	.inst	0x00000003 ; undefined
    6770:	08000000 	stxrb	w0, w0, [x0]
    6774:	947c9100 	bl	1f2ab74 <MPIDR_EL1_MT+0xf2ab74>
    6778:	1c008c04 	ldr	s4, 78f8 <_stack_size+0x68f8>
    677c:	0003909f 	.inst	0x0003909f ; undefined
    6780:	00000000 	.inst	0x00000000 ; undefined
    6784:	0003a400 	.inst	0x0003a400 ; undefined
    6788:	00000000 	.inst	0x00000000 ; undefined
    678c:	91000a00 	add	x0, x16, #0x2
    6790:	8c04947c 	.inst	0x8c04947c ; undefined
    6794:	1c401c00 	ldr	s0, 86b14 <_stack_size+0x85b14>
    6798:	0003a49f 	.inst	0x0003a49f ; undefined
    679c:	00000000 	.inst	0x00000000 ; undefined
    67a0:	0003c800 	.inst	0x0003c800 ; undefined
    67a4:	00000000 	.inst	0x00000000 ; undefined
    67a8:	91000800 	add	x0, x0, #0x2
    67ac:	8c04947c 	.inst	0x8c04947c ; undefined
    67b0:	f09f1c00 	adrp	x0, ffffffff3e389000 <SMC_ID_HW_RSA+0xfffffffeba3790f9>
    67b4:	00000003 	.inst	0x00000003 ; undefined
    67b8:	1c000000 	ldr	s0, 67b8 <_stack_size+0x57b8>
    67bc:	00000004 	.inst	0x00000004 ; undefined
    67c0:	02000000 	.inst	0x02000000 ; undefined
    67c4:	009f3000 	.inst	0x009f3000 ; undefined
	...
    67d4:	a0000000 	.inst	0xa0000000 ; undefined
    67d8:	00000003 	.inst	0x00000003 ; undefined
    67dc:	a3000000 	.inst	0xa3000000 ; undefined
    67e0:	00000003 	.inst	0x00000003 ; undefined
    67e4:	70000000 	adr	x0, 67e7 <_stack_size+0x57e7>
    67e8:	58570c00 	ldr	x0, b4968 <_stack_size+0xb3968>
    67ec:	01939801 	.inst	0x01939801 ; undefined
    67f0:	0158560c 	.inst	0x0158560c ; undefined
    67f4:	0c019398 	.inst	0x0c019398 ; undefined
    67f8:	98015855 	ldrsw	x21, 9300 <_stack_size+0x8300>
    67fc:	540c0193 	.inst	0x540c0193 ; undefined
    6800:	93980158 	.inst	0x93980158 ; undefined
    6804:	585b0c01 	ldr	x1, bc984 <_stack_size+0xbb984>
    6808:	01939801 	.inst	0x01939801 ; undefined
    680c:	01585a0c 	.inst	0x01585a0c ; undefined
    6810:	0c019398 	.inst	0x0c019398 ; undefined
    6814:	98015859 	ldrsw	x25, 931c <_stack_size+0x831c>
    6818:	580c0193 	ldr	x19, 1e848 <_stack_size+0x1d848>
    681c:	93980158 	.inst	0x93980158 ; undefined
    6820:	585f0c01 	ldr	x1, c49a0 <_stack_size+0xc39a0>
    6824:	01939801 	.inst	0x01939801 ; undefined
    6828:	01585e0c 	.inst	0x01585e0c ; undefined
    682c:	0c019398 	.inst	0x0c019398 ; undefined
    6830:	9801585d 	ldrsw	x29, 9338 <_stack_size+0x8338>
    6834:	5c0c0193 	ldr	d19, 1e864 <_stack_size+0x1d864>
    6838:	93980158 	.inst	0x93980158 ; undefined
    683c:	58630c01 	ldr	x1, cc9bc <_stack_size+0xcb9bc>
    6840:	01939801 	.inst	0x01939801 ; undefined
    6844:	0158620c 	.inst	0x0158620c ; undefined
    6848:	0c019398 	.inst	0x0c019398 ; undefined
    684c:	98015861 	ldrsw	x1, 9358 <_stack_size+0x8358>
    6850:	600c0193 	.inst	0x600c0193 ; undefined
    6854:	93980158 	.inst	0x93980158 ; undefined
    6858:	00000001 	.inst	0x00000001 ; undefined
	...
    6868:	00042000 	.inst	0x00042000 ; undefined
    686c:	00000000 	.inst	0x00000000 ; undefined
    6870:	00046800 	.inst	0x00046800 ; undefined
    6874:	00000000 	.inst	0x00000000 ; undefined
    6878:	50000100 	adr	x0, 689a <_stack_size+0x589a>
    687c:	00000468 	.inst	0x00000468 ; undefined
    6880:	00000000 	.inst	0x00000000 ; undefined
    6884:	000005cc 	.inst	0x000005cc ; undefined
    6888:	00000000 	.inst	0x00000000 ; undefined
    688c:	01f30004 	.inst	0x01f30004 ; undefined
    6890:	00009f50 	.inst	0x00009f50 ; undefined
	...
    68a0:	04200000 	.inst	0x04200000 ; undefined
    68a4:	00000000 	.inst	0x00000000 ; undefined
    68a8:	04880000 	.inst	0x04880000 ; undefined
    68ac:	00000000 	.inst	0x00000000 ; undefined
    68b0:	00010000 	.inst	0x00010000 ; undefined
    68b4:	00048851 	.inst	0x00048851 ; undefined
    68b8:	00000000 	.inst	0x00000000 ; undefined
    68bc:	0005c000 	.inst	0x0005c000 ; undefined
    68c0:	00000000 	.inst	0x00000000 ; undefined
    68c4:	f3000400 	.inst	0xf3000400 ; undefined
    68c8:	c09f5101 	.inst	0xc09f5101 ; undefined
    68cc:	00000005 	.inst	0x00000005 ; undefined
    68d0:	c8000000 	stxr	w0, x0, [x0]
    68d4:	00000005 	.inst	0x00000005 ; undefined
    68d8:	01000000 	.inst	0x01000000 ; undefined
    68dc:	05c85100 	.inst	0x05c85100 ; undefined
    68e0:	00000000 	.inst	0x00000000 ; undefined
    68e4:	05cc0000 	.inst	0x05cc0000 ; undefined
    68e8:	00000000 	.inst	0x00000000 ; undefined
    68ec:	00040000 	.inst	0x00040000 ; undefined
    68f0:	9f5101f3 	.inst	0x9f5101f3 ; undefined
	...
    6904:	00000420 	.inst	0x00000420 ; undefined
    6908:	00000000 	.inst	0x00000000 ; undefined
    690c:	00000470 	.inst	0x00000470 ; undefined
    6910:	00000000 	.inst	0x00000000 ; undefined
    6914:	70520001 	adr	x1, aa917 <_stack_size+0xa9917>
    6918:	00000004 	.inst	0x00000004 ; undefined
    691c:	c0000000 	.inst	0xc0000000 ; undefined
    6920:	00000005 	.inst	0x00000005 ; undefined
    6924:	04000000 	.inst	0x04000000 ; undefined
    6928:	5201f300 	eor	w0, w24, #0xaaaaaaaa
    692c:	0005c09f 	.inst	0x0005c09f ; undefined
    6930:	00000000 	.inst	0x00000000 ; undefined
    6934:	0005c800 	.inst	0x0005c800 ; undefined
    6938:	00000000 	.inst	0x00000000 ; undefined
    693c:	52000100 	eor	w0, w8, #0x1
    6940:	000005c8 	.inst	0x000005c8 ; undefined
    6944:	00000000 	.inst	0x00000000 ; undefined
    6948:	000005cc 	.inst	0x000005cc ; undefined
    694c:	00000000 	.inst	0x00000000 ; undefined
    6950:	01f30004 	.inst	0x01f30004 ; undefined
    6954:	00009f52 	.inst	0x00009f52 ; undefined
	...
    6964:	04200000 	.inst	0x04200000 ; undefined
    6968:	00000000 	.inst	0x00000000 ; undefined
    696c:	04800000 	.inst	0x04800000 ; undefined
    6970:	00000000 	.inst	0x00000000 ; undefined
    6974:	00010000 	.inst	0x00010000 ; undefined
    6978:	00048053 	.inst	0x00048053 ; undefined
    697c:	00000000 	.inst	0x00000000 ; undefined
    6980:	0005c000 	.inst	0x0005c000 ; undefined
    6984:	00000000 	.inst	0x00000000 ; undefined
    6988:	f3000400 	.inst	0xf3000400 ; undefined
    698c:	c09f5301 	.inst	0xc09f5301 ; undefined
    6990:	00000005 	.inst	0x00000005 ; undefined
    6994:	c8000000 	stxr	w0, x0, [x0]
    6998:	00000005 	.inst	0x00000005 ; undefined
    699c:	01000000 	.inst	0x01000000 ; undefined
    69a0:	05c85300 	.inst	0x05c85300 ; undefined
    69a4:	00000000 	.inst	0x00000000 ; undefined
    69a8:	05cc0000 	.inst	0x05cc0000 ; undefined
    69ac:	00000000 	.inst	0x00000000 ; undefined
    69b0:	00040000 	.inst	0x00040000 ; undefined
    69b4:	9f5301f3 	.inst	0x9f5301f3 ; undefined
	...
    69c8:	00000420 	.inst	0x00000420 ; undefined
    69cc:	00000000 	.inst	0x00000000 ; undefined
    69d0:	00000454 	.inst	0x00000454 ; undefined
    69d4:	00000000 	.inst	0x00000000 ; undefined
    69d8:	54540001 	b.ne	ae9d8 <_stack_size+0xad9d8>
    69dc:	00000004 	.inst	0x00000004 ; undefined
    69e0:	c0000000 	.inst	0xc0000000 ; undefined
    69e4:	00000005 	.inst	0x00000005 ; undefined
    69e8:	04000000 	.inst	0x04000000 ; undefined
    69ec:	5401f300 	b.eq	a84c <_stack_size+0x984c>
    69f0:	0005c09f 	.inst	0x0005c09f ; undefined
    69f4:	00000000 	.inst	0x00000000 ; undefined
    69f8:	0005c800 	.inst	0x0005c800 ; undefined
    69fc:	00000000 	.inst	0x00000000 ; undefined
    6a00:	54000100 	b.eq	6a20 <_stack_size+0x5a20>
    6a04:	000005c8 	.inst	0x000005c8 ; undefined
    6a08:	00000000 	.inst	0x00000000 ; undefined
    6a0c:	000005cc 	.inst	0x000005cc ; undefined
    6a10:	00000000 	.inst	0x00000000 ; undefined
    6a14:	01f30004 	.inst	0x01f30004 ; undefined
    6a18:	00009f54 	.inst	0x00009f54 ; undefined
	...
    6a28:	04200000 	.inst	0x04200000 ; undefined
    6a2c:	00000000 	.inst	0x00000000 ; undefined
    6a30:	04600000 	.inst	0x04600000 ; undefined
    6a34:	00000000 	.inst	0x00000000 ; undefined
    6a38:	00010000 	.inst	0x00010000 ; undefined
    6a3c:	00046055 	.inst	0x00046055 ; undefined
    6a40:	00000000 	.inst	0x00000000 ; undefined
    6a44:	0004dc00 	.inst	0x0004dc00 ; undefined
    6a48:	00000000 	.inst	0x00000000 ; undefined
    6a4c:	65000100 	.inst	0x65000100 ; undefined
    6a50:	000004dc 	.inst	0x000004dc ; undefined
    6a54:	00000000 	.inst	0x00000000 ; undefined
    6a58:	000004e4 	.inst	0x000004e4 ; undefined
    6a5c:	00000000 	.inst	0x00000000 ; undefined
    6a60:	7f830003 	.inst	0x7f830003 ; undefined
    6a64:	0004e49f 	.inst	0x0004e49f ; undefined
    6a68:	00000000 	.inst	0x00000000 ; undefined
    6a6c:	00057800 	.inst	0x00057800 ; undefined
    6a70:	00000000 	.inst	0x00000000 ; undefined
    6a74:	83000300 	.inst	0x83000300 ; undefined
    6a78:	05b89f6f 	.inst	0x05b89f6f ; undefined
    6a7c:	00000000 	.inst	0x00000000 ; undefined
    6a80:	05c00000 	.inst	0x05c00000 ; undefined
    6a84:	00000000 	.inst	0x00000000 ; undefined
    6a88:	00010000 	.inst	0x00010000 ; undefined
    6a8c:	0005c065 	.inst	0x0005c065 ; undefined
    6a90:	00000000 	.inst	0x00000000 ; undefined
    6a94:	0005c800 	.inst	0x0005c800 ; undefined
    6a98:	00000000 	.inst	0x00000000 ; undefined
    6a9c:	55000100 	.inst	0x55000100 ; undefined
	...
    6ab0:	00000420 	.inst	0x00000420 ; undefined
    6ab4:	00000000 	.inst	0x00000000 ; undefined
    6ab8:	00000497 	.inst	0x00000497 ; undefined
    6abc:	00000000 	.inst	0x00000000 ; undefined
    6ac0:	97560001 	bl	fffffffffd586ac4 <SMC_ID_HW_RSA+0xffffffff79576bbd>
    6ac4:	00000004 	.inst	0x00000004 ; undefined
    6ac8:	c0000000 	.inst	0xc0000000 ; undefined
    6acc:	00000005 	.inst	0x00000005 ; undefined
    6ad0:	04000000 	.inst	0x04000000 ; undefined
    6ad4:	5601f300 	.inst	0x5601f300 ; undefined
    6ad8:	0005c09f 	.inst	0x0005c09f ; undefined
    6adc:	00000000 	.inst	0x00000000 ; undefined
    6ae0:	0005c800 	.inst	0x0005c800 ; undefined
    6ae4:	00000000 	.inst	0x00000000 ; undefined
    6ae8:	56000100 	.inst	0x56000100 ; undefined
    6aec:	000005c8 	.inst	0x000005c8 ; undefined
    6af0:	00000000 	.inst	0x00000000 ; undefined
    6af4:	000005cc 	.inst	0x000005cc ; undefined
    6af8:	00000000 	.inst	0x00000000 ; undefined
    6afc:	01f30004 	.inst	0x01f30004 ; undefined
    6b00:	00009f56 	.inst	0x00009f56 ; undefined
	...
    6b10:	04200000 	.inst	0x04200000 ; undefined
    6b14:	00000000 	.inst	0x00000000 ; undefined
    6b18:	04970000 	.inst	0x04970000 ; undefined
    6b1c:	00000000 	.inst	0x00000000 ; undefined
    6b20:	00010000 	.inst	0x00010000 ; undefined
    6b24:	00049757 	.inst	0x00049757 ; undefined
    6b28:	00000000 	.inst	0x00000000 ; undefined
    6b2c:	0004dc00 	.inst	0x0004dc00 ; undefined
    6b30:	00000000 	.inst	0x00000000 ; undefined
    6b34:	6b000100 	subs	w0, w8, w0
    6b38:	000004dc 	.inst	0x000004dc ; undefined
    6b3c:	00000000 	.inst	0x00000000 ; undefined
    6b40:	000004e4 	.inst	0x000004e4 ; undefined
    6b44:	00000000 	.inst	0x00000000 ; undefined
    6b48:	008b000c 	.inst	0x008b000c ; undefined
    6b4c:	f31c0083 	.inst	0xf31c0083 ; undefined
    6b50:	23225501 	.inst	0x23225501 ; undefined
    6b54:	05b89f01 	.inst	0x05b89f01 ; undefined
    6b58:	00000000 	.inst	0x00000000 ; undefined
    6b5c:	05c00000 	.inst	0x05c00000 ; undefined
    6b60:	00000000 	.inst	0x00000000 ; undefined
    6b64:	00010000 	.inst	0x00010000 ; undefined
    6b68:	0005c06b 	.inst	0x0005c06b ; undefined
    6b6c:	00000000 	.inst	0x00000000 ; undefined
    6b70:	0005c800 	.inst	0x0005c800 ; undefined
    6b74:	00000000 	.inst	0x00000000 ; undefined
    6b78:	57000100 	.inst	0x57000100 ; undefined
	...
    6b8c:	00000420 	.inst	0x00000420 ; undefined
    6b90:	00000000 	.inst	0x00000000 ; undefined
    6b94:	000004dc 	.inst	0x000004dc ; undefined
    6b98:	00000000 	.inst	0x00000000 ; undefined
    6b9c:	9f300002 	.inst	0x9f300002 ; undefined
    6ba0:	000004dc 	.inst	0x000004dc ; undefined
    6ba4:	00000000 	.inst	0x00000000 ; undefined
    6ba8:	000004e4 	.inst	0x000004e4 ; undefined
    6bac:	00000000 	.inst	0x00000000 ; undefined
    6bb0:	01f30008 	.inst	0x01f30008 ; undefined
    6bb4:	00832055 	.inst	0x00832055 ; undefined
    6bb8:	05b89f22 	.inst	0x05b89f22 ; undefined
    6bbc:	00000000 	.inst	0x00000000 ; undefined
    6bc0:	05c80000 	.inst	0x05c80000 ; undefined
    6bc4:	00000000 	.inst	0x00000000 ; undefined
    6bc8:	00020000 	.inst	0x00020000 ; undefined
    6bcc:	00009f30 	.inst	0x00009f30 ; undefined
	...
    6bdc:	05740000 	.inst	0x05740000 ; undefined
    6be0:	00000000 	.inst	0x00000000 ; undefined
    6be4:	05770000 	.inst	0x05770000 ; undefined
    6be8:	00000000 	.inst	0x00000000 ; undefined
    6bec:	00700000 	.inst	0x00700000 ; undefined
    6bf0:	0158570c 	.inst	0x0158570c ; undefined
    6bf4:	0c019398 	.inst	0x0c019398 ; undefined
    6bf8:	98015856 	ldrsw	x22, 9700 <_stack_size+0x8700>
    6bfc:	550c0193 	.inst	0x550c0193 ; undefined
    6c00:	93980158 	.inst	0x93980158 ; undefined
    6c04:	58540c01 	ldr	x1, aed84 <_stack_size+0xadd84>
    6c08:	01939801 	.inst	0x01939801 ; undefined
    6c0c:	01585b0c 	.inst	0x01585b0c ; undefined
    6c10:	0c019398 	.inst	0x0c019398 ; undefined
    6c14:	9801585a 	ldrsw	x26, 971c <_stack_size+0x871c>
    6c18:	590c0193 	.inst	0x590c0193 ; undefined
    6c1c:	93980158 	.inst	0x93980158 ; undefined
    6c20:	58580c01 	ldr	x1, b6da0 <_stack_size+0xb5da0>
    6c24:	01939801 	.inst	0x01939801 ; undefined
    6c28:	01585f0c 	.inst	0x01585f0c ; undefined
    6c2c:	0c019398 	.inst	0x0c019398 ; undefined
    6c30:	9801585e 	ldrsw	x30, 9738 <_stack_size+0x8738>
    6c34:	5d0c0193 	.inst	0x5d0c0193 ; undefined
    6c38:	93980158 	.inst	0x93980158 ; undefined
    6c3c:	585c0c01 	ldr	x1, bedbc <_stack_size+0xbddbc>
    6c40:	01939801 	.inst	0x01939801 ; undefined
    6c44:	0158630c 	.inst	0x0158630c ; undefined
    6c48:	0c019398 	.inst	0x0c019398 ; undefined
    6c4c:	98015862 	ldrsw	x2, 9758 <_stack_size+0x8758>
    6c50:	610c0193 	.inst	0x610c0193 ; undefined
    6c54:	93980158 	.inst	0x93980158 ; undefined
    6c58:	58600c01 	ldr	x1, c6dd8 <_stack_size+0xc5dd8>
    6c5c:	01939801 	.inst	0x01939801 ; undefined
	...
    6c70:	000005cc 	.inst	0x000005cc ; undefined
    6c74:	00000000 	.inst	0x00000000 ; undefined
    6c78:	000005dc 	.inst	0x000005dc ; undefined
    6c7c:	00000000 	.inst	0x00000000 ; undefined
    6c80:	dc500001 	.inst	0xdc500001 ; undefined
    6c84:	00000005 	.inst	0x00000005 ; undefined
    6c88:	cc000000 	.inst	0xcc000000 ; undefined
    6c8c:	00000008 	.inst	0x00000008 ; undefined
    6c90:	04000000 	.inst	0x04000000 ; undefined
    6c94:	5001f300 	adr	x0, aaf6 <_stack_size+0x9af6>
    6c98:	0000009f 	.inst	0x0000009f ; undefined
	...
    6ca8:	0005cc00 	.inst	0x0005cc00 ; undefined
    6cac:	00000000 	.inst	0x00000000 ; undefined
    6cb0:	0005d400 	.inst	0x0005d400 ; undefined
    6cb4:	00000000 	.inst	0x00000000 ; undefined
    6cb8:	51000100 	sub	w0, w8, #0x0
    6cbc:	000005d4 	.inst	0x000005d4 ; undefined
    6cc0:	00000000 	.inst	0x00000000 ; undefined
    6cc4:	000008cc 	.inst	0x000008cc ; undefined
    6cc8:	00000000 	.inst	0x00000000 ; undefined
    6ccc:	01f30004 	.inst	0x01f30004 ; undefined
    6cd0:	00009f51 	.inst	0x00009f51 ; undefined
	...
    6ce0:	05cc0000 	.inst	0x05cc0000 ; undefined
    6ce4:	00000000 	.inst	0x00000000 ; undefined
    6ce8:	060c0000 	.inst	0x060c0000 ; undefined
    6cec:	00000000 	.inst	0x00000000 ; undefined
    6cf0:	00010000 	.inst	0x00010000 ; undefined
    6cf4:	00060c52 	.inst	0x00060c52 ; undefined
    6cf8:	00000000 	.inst	0x00000000 ; undefined
    6cfc:	0008cc00 	.inst	0x0008cc00 ; undefined
    6d00:	00000000 	.inst	0x00000000 ; undefined
    6d04:	f3000400 	.inst	0xf3000400 ; undefined
    6d08:	009f5201 	.inst	0x009f5201 ; undefined
	...
    6d18:	cc000000 	.inst	0xcc000000 ; undefined
    6d1c:	00000005 	.inst	0x00000005 ; undefined
    6d20:	2c000000 	stnp	s0, s0, [x0]
    6d24:	00000006 	.inst	0x00000006 ; undefined
    6d28:	01000000 	.inst	0x01000000 ; undefined
    6d2c:	062c5300 	.inst	0x062c5300 ; undefined
    6d30:	00000000 	.inst	0x00000000 ; undefined
    6d34:	08cc0000 	.inst	0x08cc0000 ; undefined
    6d38:	00000000 	.inst	0x00000000 ; undefined
    6d3c:	00040000 	.inst	0x00040000 ; undefined
    6d40:	9f5301f3 	.inst	0x9f5301f3 ; undefined
	...
    6d54:	000005cc 	.inst	0x000005cc ; undefined
    6d58:	00000000 	.inst	0x00000000 ; undefined
    6d5c:	000006e3 	.inst	0x000006e3 ; undefined
    6d60:	00000000 	.inst	0x00000000 ; undefined
    6d64:	e3540001 	.inst	0xe3540001 ; undefined
    6d68:	00000006 	.inst	0x00000006 ; undefined
    6d6c:	cc000000 	.inst	0xcc000000 ; undefined
    6d70:	00000008 	.inst	0x00000008 ; undefined
    6d74:	04000000 	.inst	0x04000000 ; undefined
    6d78:	5401f300 	b.eq	abd8 <_stack_size+0x9bd8>
    6d7c:	0000009f 	.inst	0x0000009f ; undefined
	...
    6d8c:	0005cc00 	.inst	0x0005cc00 ; undefined
    6d90:	00000000 	.inst	0x00000000 ; undefined
    6d94:	00066c00 	.inst	0x00066c00 ; undefined
    6d98:	00000000 	.inst	0x00000000 ; undefined
    6d9c:	55000100 	.inst	0x55000100 ; undefined
    6da0:	0000066c 	.inst	0x0000066c ; undefined
    6da4:	00000000 	.inst	0x00000000 ; undefined
    6da8:	00000734 	.inst	0x00000734 ; undefined
    6dac:	00000000 	.inst	0x00000000 ; undefined
    6db0:	34630001 	cbz	w1, ccdb0 <_stack_size+0xcbdb0>
    6db4:	00000007 	.inst	0x00000007 ; undefined
    6db8:	74000000 	.inst	0x74000000 ; undefined
    6dbc:	00000008 	.inst	0x00000008 ; undefined
    6dc0:	03000000 	.inst	0x03000000 ; undefined
    6dc4:	9f708300 	.inst	0x9f708300 ; undefined
    6dc8:	00000874 	.inst	0x00000874 ; undefined
    6dcc:	00000000 	.inst	0x00000000 ; undefined
    6dd0:	000008bc 	.inst	0x000008bc ; undefined
    6dd4:	00000000 	.inst	0x00000000 ; undefined
    6dd8:	c0630001 	.inst	0xc0630001 ; undefined
    6ddc:	00000008 	.inst	0x00000008 ; undefined
    6de0:	cc000000 	.inst	0xcc000000 ; undefined
    6de4:	00000008 	.inst	0x00000008 ; undefined
    6de8:	01000000 	.inst	0x01000000 ; undefined
    6dec:	00006300 	.inst	0x00006300 ; undefined
	...
    6dfc:	05cc0000 	.inst	0x05cc0000 ; undefined
    6e00:	00000000 	.inst	0x00000000 ; undefined
    6e04:	06400000 	.inst	0x06400000 ; undefined
    6e08:	00000000 	.inst	0x00000000 ; undefined
    6e0c:	00010000 	.inst	0x00010000 ; undefined
    6e10:	00064056 	.inst	0x00064056 ; undefined
    6e14:	00000000 	.inst	0x00000000 ; undefined
    6e18:	00073c00 	.inst	0x00073c00 ; undefined
    6e1c:	00000000 	.inst	0x00000000 ; undefined
    6e20:	64000100 	.inst	0x64000100 ; undefined
    6e24:	0000073c 	.inst	0x0000073c ; undefined
    6e28:	00000000 	.inst	0x00000000 ; undefined
    6e2c:	00000874 	.inst	0x00000874 ; undefined
    6e30:	00000000 	.inst	0x00000000 ; undefined
    6e34:	70840003 	adr	x3, fffffffffff0ee37 <SMC_ID_HW_RSA+0xffffffff7befef30>
    6e38:	0008749f 	.inst	0x0008749f ; undefined
    6e3c:	00000000 	.inst	0x00000000 ; undefined
    6e40:	0008bc00 	.inst	0x0008bc00 ; undefined
    6e44:	00000000 	.inst	0x00000000 ; undefined
    6e48:	64000100 	.inst	0x64000100 ; undefined
    6e4c:	000008c0 	.inst	0x000008c0 ; undefined
    6e50:	00000000 	.inst	0x00000000 ; undefined
    6e54:	000008cc 	.inst	0x000008cc ; undefined
    6e58:	00000000 	.inst	0x00000000 ; undefined
    6e5c:	00640001 	.inst	0x00640001 ; undefined
	...
    6e6c:	cc000000 	.inst	0xcc000000 ; undefined
    6e70:	00000005 	.inst	0x00000005 ; undefined
    6e74:	5c000000 	ldr	d0, 6e74 <_stack_size+0x5e74>
    6e78:	00000006 	.inst	0x00000006 ; undefined
    6e7c:	01000000 	.inst	0x01000000 ; undefined
    6e80:	065c5700 	.inst	0x065c5700 ; undefined
    6e84:	00000000 	.inst	0x00000000 ; undefined
    6e88:	089c0000 	.inst	0x089c0000 ; undefined
    6e8c:	00000000 	.inst	0x00000000 ; undefined
    6e90:	00010000 	.inst	0x00010000 ; undefined
    6e94:	00089c6b 	.inst	0x00089c6b ; undefined
    6e98:	00000000 	.inst	0x00000000 ; undefined
    6e9c:	0008a000 	.inst	0x0008a000 ; undefined
    6ea0:	00000000 	.inst	0x00000000 ; undefined
    6ea4:	f3000400 	.inst	0xf3000400 ; undefined
    6ea8:	c09f5701 	.inst	0xc09f5701 ; undefined
    6eac:	00000008 	.inst	0x00000008 ; undefined
    6eb0:	c8000000 	stxr	w0, x0, [x0]
    6eb4:	00000008 	.inst	0x00000008 ; undefined
    6eb8:	01000000 	.inst	0x01000000 ; undefined
    6ebc:	00006b00 	.inst	0x00006b00 ; undefined
	...
    6ecc:	05cc0000 	.inst	0x05cc0000 ; undefined
    6ed0:	00000000 	.inst	0x00000000 ; undefined
    6ed4:	08a00000 	.inst	0x08a00000 ; undefined
    6ed8:	00000000 	.inst	0x00000000 ; undefined
    6edc:	00020000 	.inst	0x00020000 ; undefined
    6ee0:	08c09f30 	.inst	0x08c09f30 ; undefined
    6ee4:	00000000 	.inst	0x00000000 ; undefined
    6ee8:	08c80000 	.inst	0x08c80000 ; undefined
    6eec:	00000000 	.inst	0x00000000 ; undefined
    6ef0:	00020000 	.inst	0x00020000 ; undefined
    6ef4:	00009f30 	.inst	0x00009f30 ; undefined
	...
    6f04:	08cc0000 	.inst	0x08cc0000 ; undefined
    6f08:	00000000 	.inst	0x00000000 ; undefined
    6f0c:	09000000 	.inst	0x09000000 ; undefined
    6f10:	00000000 	.inst	0x00000000 ; undefined
    6f14:	00010000 	.inst	0x00010000 ; undefined
    6f18:	00090050 	.inst	0x00090050 ; undefined
    6f1c:	00000000 	.inst	0x00000000 ; undefined
    6f20:	00092000 	.inst	0x00092000 ; undefined
    6f24:	00000000 	.inst	0x00000000 ; undefined
    6f28:	58000100 	ldr	x0, 6f48 <_stack_size+0x5f48>
    6f2c:	00000920 	.inst	0x00000920 ; undefined
    6f30:	00000000 	.inst	0x00000000 ; undefined
    6f34:	00000b00 	.inst	0x00000b00 ; undefined
    6f38:	00000000 	.inst	0x00000000 ; undefined
    6f3c:	01f30004 	.inst	0x01f30004 ; undefined
    6f40:	0b009f50 	.inst	0x0b009f50 ; undefined
    6f44:	00000000 	.inst	0x00000000 ; undefined
    6f48:	0b040000 	add	w0, w0, w4
    6f4c:	00000000 	.inst	0x00000000 ; undefined
    6f50:	00010000 	.inst	0x00010000 ; undefined
    6f54:	000b0450 	.inst	0x000b0450 ; undefined
    6f58:	00000000 	.inst	0x00000000 ; undefined
    6f5c:	000b1c00 	.inst	0x000b1c00 ; undefined
    6f60:	00000000 	.inst	0x00000000 ; undefined
    6f64:	58000100 	ldr	x0, 6f84 <_stack_size+0x5f84>
    6f68:	00000b1c 	.inst	0x00000b1c ; undefined
    6f6c:	00000000 	.inst	0x00000000 ; undefined
    6f70:	00000b28 	.inst	0x00000b28 ; undefined
    6f74:	00000000 	.inst	0x00000000 ; undefined
    6f78:	01f30004 	.inst	0x01f30004 ; undefined
    6f7c:	00009f50 	.inst	0x00009f50 ; undefined
	...
    6f8c:	08cc0000 	.inst	0x08cc0000 ; undefined
    6f90:	00000000 	.inst	0x00000000 ; undefined
    6f94:	09140000 	.inst	0x09140000 ; undefined
    6f98:	00000000 	.inst	0x00000000 ; undefined
    6f9c:	00010000 	.inst	0x00010000 ; undefined
    6fa0:	00091451 	.inst	0x00091451 ; undefined
    6fa4:	00000000 	.inst	0x00000000 ; undefined
    6fa8:	000b0000 	.inst	0x000b0000 ; undefined
    6fac:	00000000 	.inst	0x00000000 ; undefined
    6fb0:	f3000400 	.inst	0xf3000400 ; undefined
    6fb4:	009f5101 	.inst	0x009f5101 ; undefined
    6fb8:	0000000b 	.inst	0x0000000b ; undefined
    6fbc:	1c000000 	ldr	s0, 6fbc <_stack_size+0x5fbc>
    6fc0:	0000000b 	.inst	0x0000000b ; undefined
    6fc4:	01000000 	.inst	0x01000000 ; undefined
    6fc8:	0b1c5100 	add	w0, w8, w28, lsl #20
    6fcc:	00000000 	.inst	0x00000000 ; undefined
    6fd0:	0b280000 	add	w0, w0, w8, uxtb
    6fd4:	00000000 	.inst	0x00000000 ; undefined
    6fd8:	00040000 	.inst	0x00040000 ; undefined
    6fdc:	9f5101f3 	.inst	0x9f5101f3 ; undefined
	...
    6ff0:	000008cc 	.inst	0x000008cc ; undefined
    6ff4:	00000000 	.inst	0x00000000 ; undefined
    6ff8:	0000090c 	.inst	0x0000090c ; undefined
    6ffc:	00000000 	.inst	0x00000000 ; undefined
    7000:	0c520001 	.inst	0x0c520001 ; undefined
    7004:	00000009 	.inst	0x00000009 ; undefined
    7008:	00000000 	.inst	0x00000000 ; undefined
    700c:	0000000b 	.inst	0x0000000b ; undefined
    7010:	04000000 	.inst	0x04000000 ; undefined
    7014:	5201f300 	eor	w0, w24, #0xaaaaaaaa
    7018:	000b009f 	.inst	0x000b009f ; undefined
    701c:	00000000 	.inst	0x00000000 ; undefined
    7020:	000b1c00 	.inst	0x000b1c00 ; undefined
    7024:	00000000 	.inst	0x00000000 ; undefined
    7028:	52000100 	eor	w0, w8, #0x1
    702c:	00000b1c 	.inst	0x00000b1c ; undefined
    7030:	00000000 	.inst	0x00000000 ; undefined
    7034:	00000b28 	.inst	0x00000b28 ; undefined
    7038:	00000000 	.inst	0x00000000 ; undefined
    703c:	01f30004 	.inst	0x01f30004 ; undefined
    7040:	00009f52 	.inst	0x00009f52 ; undefined
	...
    7050:	08cc0000 	.inst	0x08cc0000 ; undefined
    7054:	00000000 	.inst	0x00000000 ; undefined
    7058:	09480000 	.inst	0x09480000 ; undefined
    705c:	00000000 	.inst	0x00000000 ; undefined
    7060:	00010000 	.inst	0x00010000 ; undefined
    7064:	00094853 	.inst	0x00094853 ; undefined
    7068:	00000000 	.inst	0x00000000 ; undefined
    706c:	000b0000 	.inst	0x000b0000 ; undefined
    7070:	00000000 	.inst	0x00000000 ; undefined
    7074:	f3000400 	.inst	0xf3000400 ; undefined
    7078:	009f5301 	.inst	0x009f5301 ; undefined
    707c:	0000000b 	.inst	0x0000000b ; undefined
    7080:	1c000000 	ldr	s0, 7080 <_stack_size+0x6080>
    7084:	0000000b 	.inst	0x0000000b ; undefined
    7088:	01000000 	.inst	0x01000000 ; undefined
    708c:	0b1c5300 	add	w0, w24, w28, lsl #20
    7090:	00000000 	.inst	0x00000000 ; undefined
    7094:	0b280000 	add	w0, w0, w8, uxtb
    7098:	00000000 	.inst	0x00000000 ; undefined
    709c:	00040000 	.inst	0x00040000 ; undefined
    70a0:	9f5301f3 	.inst	0x9f5301f3 ; undefined
	...
    70b4:	000008cc 	.inst	0x000008cc ; undefined
    70b8:	00000000 	.inst	0x00000000 ; undefined
    70bc:	000009df 	.inst	0x000009df ; undefined
    70c0:	00000000 	.inst	0x00000000 ; undefined
    70c4:	df540001 	.inst	0xdf540001 ; undefined
    70c8:	00000009 	.inst	0x00000009 ; undefined
    70cc:	00000000 	.inst	0x00000000 ; undefined
    70d0:	0000000b 	.inst	0x0000000b ; undefined
    70d4:	04000000 	.inst	0x04000000 ; undefined
    70d8:	5401f300 	b.eq	af38 <_stack_size+0x9f38>
    70dc:	000b009f 	.inst	0x000b009f ; undefined
    70e0:	00000000 	.inst	0x00000000 ; undefined
    70e4:	000b1c00 	.inst	0x000b1c00 ; undefined
    70e8:	00000000 	.inst	0x00000000 ; undefined
    70ec:	54000100 	b.eq	710c <_stack_size+0x610c>
    70f0:	00000b1c 	.inst	0x00000b1c ; undefined
    70f4:	00000000 	.inst	0x00000000 ; undefined
    70f8:	00000b28 	.inst	0x00000b28 ; undefined
    70fc:	00000000 	.inst	0x00000000 ; undefined
    7100:	01f30004 	.inst	0x01f30004 ; undefined
    7104:	00009f54 	.inst	0x00009f54 ; undefined
	...
    7114:	08cc0000 	.inst	0x08cc0000 ; undefined
    7118:	00000000 	.inst	0x00000000 ; undefined
    711c:	08f40000 	.inst	0x08f40000 ; undefined
    7120:	00000000 	.inst	0x00000000 ; undefined
    7124:	00010000 	.inst	0x00010000 ; undefined
    7128:	0008f455 	.inst	0x0008f455 ; undefined
    712c:	00000000 	.inst	0x00000000 ; undefined
    7130:	000a2400 	.inst	0x000a2400 ; undefined
    7134:	00000000 	.inst	0x00000000 ; undefined
    7138:	65000100 	.inst	0x65000100 ; undefined
    713c:	00000a24 	.inst	0x00000a24 ; undefined
    7140:	00000000 	.inst	0x00000000 ; undefined
    7144:	00000a2c 	.inst	0x00000a2c ; undefined
    7148:	00000000 	.inst	0x00000000 ; undefined
    714c:	7f830003 	.inst	0x7f830003 ; undefined
    7150:	000a2c9f 	.inst	0x000a2c9f ; undefined
    7154:	00000000 	.inst	0x00000000 ; undefined
    7158:	000ac000 	.inst	0x000ac000 ; undefined
    715c:	00000000 	.inst	0x00000000 ; undefined
    7160:	83000300 	.inst	0x83000300 ; undefined
    7164:	0b009f6f 	.inst	0x0b009f6f ; undefined
    7168:	00000000 	.inst	0x00000000 ; undefined
    716c:	0b1c0000 	add	w0, w0, w28
    7170:	00000000 	.inst	0x00000000 ; undefined
    7174:	00010000 	.inst	0x00010000 ; undefined
    7178:	000b1c55 	.inst	0x000b1c55 ; undefined
    717c:	00000000 	.inst	0x00000000 ; undefined
    7180:	000b2400 	.inst	0x000b2400 ; undefined
    7184:	00000000 	.inst	0x00000000 ; undefined
    7188:	65000100 	.inst	0x65000100 ; undefined
	...
    719c:	000008cc 	.inst	0x000008cc ; undefined
    71a0:	00000000 	.inst	0x00000000 ; undefined
    71a4:	000008f8 	.inst	0x000008f8 ; undefined
    71a8:	00000000 	.inst	0x00000000 ; undefined
    71ac:	f8560001 	ldur	x1, [x0,#-160]
    71b0:	00000008 	.inst	0x00000008 ; undefined
    71b4:	00000000 	.inst	0x00000000 ; undefined
    71b8:	0000000b 	.inst	0x0000000b ; undefined
    71bc:	04000000 	.inst	0x04000000 ; undefined
    71c0:	5601f300 	.inst	0x5601f300 ; undefined
    71c4:	000b009f 	.inst	0x000b009f ; undefined
    71c8:	00000000 	.inst	0x00000000 ; undefined
    71cc:	000b1c00 	.inst	0x000b1c00 ; undefined
    71d0:	00000000 	.inst	0x00000000 ; undefined
    71d4:	56000100 	.inst	0x56000100 ; undefined
    71d8:	00000b1c 	.inst	0x00000b1c ; undefined
    71dc:	00000000 	.inst	0x00000000 ; undefined
    71e0:	00000b28 	.inst	0x00000b28 ; undefined
    71e4:	00000000 	.inst	0x00000000 ; undefined
    71e8:	01f30004 	.inst	0x01f30004 ; undefined
    71ec:	00009f56 	.inst	0x00009f56 ; undefined
	...
    71fc:	08cc0000 	.inst	0x08cc0000 ; undefined
    7200:	00000000 	.inst	0x00000000 ; undefined
    7204:	093c0000 	.inst	0x093c0000 ; undefined
    7208:	00000000 	.inst	0x00000000 ; undefined
    720c:	00010000 	.inst	0x00010000 ; undefined
    7210:	00093c57 	.inst	0x00093c57 ; undefined
    7214:	00000000 	.inst	0x00000000 ; undefined
    7218:	000a2400 	.inst	0x000a2400 ; undefined
    721c:	00000000 	.inst	0x00000000 ; undefined
    7220:	6b000100 	subs	w0, w8, w0
    7224:	00000a24 	.inst	0x00000a24 ; undefined
    7228:	00000000 	.inst	0x00000000 ; undefined
    722c:	00000a2c 	.inst	0x00000a2c ; undefined
    7230:	00000000 	.inst	0x00000000 ; undefined
    7234:	008b000c 	.inst	0x008b000c ; undefined
    7238:	f31c0083 	.inst	0xf31c0083 ; undefined
    723c:	23225501 	.inst	0x23225501 ; undefined
    7240:	0b009f01 	.inst	0x0b009f01 ; undefined
    7244:	00000000 	.inst	0x00000000 ; undefined
    7248:	0b1c0000 	add	w0, w0, w28
    724c:	00000000 	.inst	0x00000000 ; undefined
    7250:	00010000 	.inst	0x00010000 ; undefined
    7254:	000b1c57 	.inst	0x000b1c57 ; undefined
    7258:	00000000 	.inst	0x00000000 ; undefined
    725c:	000b2400 	.inst	0x000b2400 ; undefined
    7260:	00000000 	.inst	0x00000000 ; undefined
    7264:	6b000100 	subs	w0, w8, w0
	...
    7278:	000008d4 	.inst	0x000008d4 ; undefined
    727c:	00000000 	.inst	0x00000000 ; undefined
    7280:	00000a24 	.inst	0x00000a24 ; undefined
    7284:	00000000 	.inst	0x00000000 ; undefined
    7288:	9f300002 	.inst	0x9f300002 ; undefined
    728c:	00000a24 	.inst	0x00000a24 ; undefined
    7290:	00000000 	.inst	0x00000000 ; undefined
    7294:	00000a2c 	.inst	0x00000a2c ; undefined
    7298:	00000000 	.inst	0x00000000 ; undefined
    729c:	01f30008 	.inst	0x01f30008 ; undefined
    72a0:	00832055 	.inst	0x00832055 ; undefined
    72a4:	0b009f22 	.inst	0x0b009f22 ; undefined
    72a8:	00000000 	.inst	0x00000000 ; undefined
    72ac:	0b240000 	add	w0, w0, w4, uxtb
    72b0:	00000000 	.inst	0x00000000 ; undefined
    72b4:	00020000 	.inst	0x00020000 ; undefined
    72b8:	00009f30 	.inst	0x00009f30 ; undefined
	...
    72c8:	0abc0000 	bic	w0, w0, w28, asr #0
    72cc:	00000000 	.inst	0x00000000 ; undefined
    72d0:	0abf0000 	bic	w0, w0, wzr, asr #0
    72d4:	00000000 	.inst	0x00000000 ; undefined
    72d8:	00700000 	.inst	0x00700000 ; undefined
    72dc:	0158570c 	.inst	0x0158570c ; undefined
    72e0:	0c019398 	.inst	0x0c019398 ; undefined
    72e4:	98015856 	ldrsw	x22, 9dec <_stack_size+0x8dec>
    72e8:	550c0193 	.inst	0x550c0193 ; undefined
    72ec:	93980158 	.inst	0x93980158 ; undefined
    72f0:	58540c01 	ldr	x1, af470 <_stack_size+0xae470>
    72f4:	01939801 	.inst	0x01939801 ; undefined
    72f8:	01585b0c 	.inst	0x01585b0c ; undefined
    72fc:	0c019398 	.inst	0x0c019398 ; undefined
    7300:	9801585a 	ldrsw	x26, 9e08 <_stack_size+0x8e08>
    7304:	590c0193 	.inst	0x590c0193 ; undefined
    7308:	93980158 	.inst	0x93980158 ; undefined
    730c:	58580c01 	ldr	x1, b748c <_stack_size+0xb648c>
    7310:	01939801 	.inst	0x01939801 ; undefined
    7314:	01585f0c 	.inst	0x01585f0c ; undefined
    7318:	0c019398 	.inst	0x0c019398 ; undefined
    731c:	9801585e 	ldrsw	x30, 9e24 <_stack_size+0x8e24>
    7320:	5d0c0193 	.inst	0x5d0c0193 ; undefined
    7324:	93980158 	.inst	0x93980158 ; undefined
    7328:	585c0c01 	ldr	x1, bf4a8 <_stack_size+0xbe4a8>
    732c:	01939801 	.inst	0x01939801 ; undefined
    7330:	0158630c 	.inst	0x0158630c ; undefined
    7334:	0c019398 	.inst	0x0c019398 ; undefined
    7338:	98015862 	ldrsw	x2, 9e44 <_stack_size+0x8e44>
    733c:	610c0193 	.inst	0x610c0193 ; undefined
    7340:	93980158 	.inst	0x93980158 ; undefined
    7344:	58600c01 	ldr	x1, c74c4 <_stack_size+0xc64c4>
    7348:	01939801 	.inst	0x01939801 ; undefined
	...
    735c:	00000b28 	.inst	0x00000b28 ; undefined
    7360:	00000000 	.inst	0x00000000 ; undefined
    7364:	00000b43 	.inst	0x00000b43 ; undefined
    7368:	00000000 	.inst	0x00000000 ; undefined
    736c:	43500001 	.inst	0x43500001 ; undefined
    7370:	0000000b 	.inst	0x0000000b ; undefined
    7374:	c8000000 	stxr	w0, x0, [x0]
    7378:	0000000b 	.inst	0x0000000b ; undefined
    737c:	04000000 	.inst	0x04000000 ; undefined
    7380:	5001f300 	adr	x0, b1e2 <_stack_size+0xa1e2>
    7384:	0000009f 	.inst	0x0000009f ; undefined
	...
    7394:	000b2800 	.inst	0x000b2800 ; undefined
    7398:	00000000 	.inst	0x00000000 ; undefined
    739c:	000b4300 	.inst	0x000b4300 ; undefined
    73a0:	00000000 	.inst	0x00000000 ; undefined
    73a4:	51000100 	sub	w0, w8, #0x0
    73a8:	00000b43 	.inst	0x00000b43 ; undefined
    73ac:	00000000 	.inst	0x00000000 ; undefined
    73b0:	00000bc4 	.inst	0x00000bc4 ; undefined
    73b4:	00000000 	.inst	0x00000000 ; undefined
    73b8:	c4630001 	.inst	0xc4630001 ; undefined
    73bc:	0000000b 	.inst	0x0000000b ; undefined
    73c0:	c8000000 	stxr	w0, x0, [x0]
    73c4:	0000000b 	.inst	0x0000000b ; undefined
    73c8:	04000000 	.inst	0x04000000 ; undefined
    73cc:	5101f300 	sub	w0, w24, #0x7c
    73d0:	0000009f 	.inst	0x0000009f ; undefined
	...
    73e0:	000bc800 	.inst	0x000bc800 ; undefined
    73e4:	00000000 	.inst	0x00000000 ; undefined
    73e8:	000be700 	.inst	0x000be700 ; undefined
    73ec:	00000000 	.inst	0x00000000 ; undefined
    73f0:	50000100 	adr	x0, 7412 <_stack_size+0x6412>
    73f4:	00000be7 	.inst	0x00000be7 ; undefined
    73f8:	00000000 	.inst	0x00000000 ; undefined
    73fc:	00000c58 	.inst	0x00000c58 ; undefined
    7400:	00000000 	.inst	0x00000000 ; undefined
    7404:	58660001 	ldr	x1, d3404 <_stack_size+0xd2404>
    7408:	0000000c 	.inst	0x0000000c ; undefined
    740c:	64000000 	.inst	0x64000000 ; undefined
    7410:	0000000c 	.inst	0x0000000c ; undefined
    7414:	04000000 	.inst	0x04000000 ; undefined
    7418:	5001f300 	adr	x0, b27a <_stack_size+0xa27a>
    741c:	0000009f 	.inst	0x0000009f ; undefined
	...
    742c:	000bc800 	.inst	0x000bc800 ; undefined
    7430:	00000000 	.inst	0x00000000 ; undefined
    7434:	000be700 	.inst	0x000be700 ; undefined
    7438:	00000000 	.inst	0x00000000 ; undefined
    743c:	51000100 	sub	w0, w8, #0x0
    7440:	00000be7 	.inst	0x00000be7 ; undefined
    7444:	00000000 	.inst	0x00000000 ; undefined
    7448:	00000c60 	.inst	0x00000c60 ; undefined
    744c:	00000000 	.inst	0x00000000 ; undefined
    7450:	60630001 	.inst	0x60630001 ; undefined
    7454:	0000000c 	.inst	0x0000000c ; undefined
    7458:	64000000 	.inst	0x64000000 ; undefined
    745c:	0000000c 	.inst	0x0000000c ; undefined
    7460:	04000000 	.inst	0x04000000 ; undefined
    7464:	5101f300 	sub	w0, w24, #0x7c
    7468:	0000009f 	.inst	0x0000009f ; undefined
	...
    7478:	000c6400 	.inst	0x000c6400 ; undefined
    747c:	00000000 	.inst	0x00000000 ; undefined
    7480:	000c7000 	.inst	0x000c7000 ; undefined
    7484:	00000000 	.inst	0x00000000 ; undefined
    7488:	50000100 	adr	x0, 74aa <_stack_size+0x64aa>
    748c:	00000c70 	.inst	0x00000c70 ; undefined
    7490:	00000000 	.inst	0x00000000 ; undefined
    7494:	00000c73 	.inst	0x00000c73 ; undefined
    7498:	00000000 	.inst	0x00000000 ; undefined
    749c:	73510001 	.inst	0x73510001 ; undefined
    74a0:	0000000c 	.inst	0x0000000c ; undefined
    74a4:	74000000 	.inst	0x74000000 ; undefined
    74a8:	0000000c 	.inst	0x0000000c ; undefined
    74ac:	04000000 	.inst	0x04000000 ; undefined
    74b0:	5001f300 	adr	x0, b312 <_stack_size+0xa312>
    74b4:	0000009f 	.inst	0x0000009f ; undefined
	...
    74c4:	000c6400 	.inst	0x000c6400 ; undefined
    74c8:	00000000 	.inst	0x00000000 ; undefined
    74cc:	000c6c00 	.inst	0x000c6c00 ; undefined
    74d0:	00000000 	.inst	0x00000000 ; undefined
    74d4:	51000100 	sub	w0, w8, #0x0
    74d8:	00000c6c 	.inst	0x00000c6c ; undefined
    74dc:	00000000 	.inst	0x00000000 ; undefined
    74e0:	00000c73 	.inst	0x00000c73 ; undefined
    74e4:	00000000 	.inst	0x00000000 ; undefined
    74e8:	73520001 	.inst	0x73520001 ; undefined
    74ec:	0000000c 	.inst	0x0000000c ; undefined
    74f0:	74000000 	.inst	0x74000000 ; undefined
    74f4:	0000000c 	.inst	0x0000000c ; undefined
    74f8:	04000000 	.inst	0x04000000 ; undefined
    74fc:	5101f300 	sub	w0, w24, #0x7c
    7500:	0000009f 	.inst	0x0000009f ; undefined
	...
    7510:	000c7400 	.inst	0x000c7400 ; undefined
    7514:	00000000 	.inst	0x00000000 ; undefined
    7518:	000c8000 	.inst	0x000c8000 ; undefined
    751c:	00000000 	.inst	0x00000000 ; undefined
    7520:	50000100 	adr	x0, 7542 <_stack_size+0x6542>
    7524:	00000c80 	.inst	0x00000c80 ; undefined
    7528:	00000000 	.inst	0x00000000 ; undefined
    752c:	00000c83 	.inst	0x00000c83 ; undefined
    7530:	00000000 	.inst	0x00000000 ; undefined
    7534:	83510001 	.inst	0x83510001 ; undefined
    7538:	0000000c 	.inst	0x0000000c ; undefined
    753c:	84000000 	.inst	0x84000000 ; undefined
    7540:	0000000c 	.inst	0x0000000c ; undefined
    7544:	04000000 	.inst	0x04000000 ; undefined
    7548:	5001f300 	adr	x0, b3aa <_stack_size+0xa3aa>
    754c:	0000009f 	.inst	0x0000009f ; undefined
	...
    755c:	000c7400 	.inst	0x000c7400 ; undefined
    7560:	00000000 	.inst	0x00000000 ; undefined
    7564:	000c7c00 	.inst	0x000c7c00 ; undefined
    7568:	00000000 	.inst	0x00000000 ; undefined
    756c:	51000100 	sub	w0, w8, #0x0
    7570:	00000c7c 	.inst	0x00000c7c ; undefined
    7574:	00000000 	.inst	0x00000000 ; undefined
    7578:	00000c83 	.inst	0x00000c83 ; undefined
    757c:	00000000 	.inst	0x00000000 ; undefined
    7580:	83520001 	.inst	0x83520001 ; undefined
    7584:	0000000c 	.inst	0x0000000c ; undefined
    7588:	84000000 	.inst	0x84000000 ; undefined
    758c:	0000000c 	.inst	0x0000000c ; undefined
    7590:	04000000 	.inst	0x04000000 ; undefined
    7594:	5101f300 	sub	w0, w24, #0x7c
    7598:	0000009f 	.inst	0x0000009f ; undefined
	...
    75b0:	00002800 	.inst	0x00002800 ; undefined
    75b4:	00000000 	.inst	0x00000000 ; undefined
    75b8:	50000100 	adr	x0, 75da <_stack_size+0x65da>
    75bc:	00000028 	.inst	0x00000028 ; undefined
    75c0:	00000000 	.inst	0x00000000 ; undefined
    75c4:	0000002c 	.inst	0x0000002c ; undefined
    75c8:	00000000 	.inst	0x00000000 ; undefined
    75cc:	01f30004 	.inst	0x01f30004 ; undefined
    75d0:	002c9f50 	.inst	0x002c9f50 ; NYI
    75d4:	00000000 	.inst	0x00000000 ; undefined
    75d8:	00300000 	.inst	0x00300000 ; NYI
    75dc:	00000000 	.inst	0x00000000 ; undefined
    75e0:	00010000 	.inst	0x00010000 ; undefined
    75e4:	00003050 	.inst	0x00003050 ; undefined
    75e8:	00000000 	.inst	0x00000000 ; undefined
    75ec:	00003400 	.inst	0x00003400 ; undefined
    75f0:	00000000 	.inst	0x00000000 ; undefined
    75f4:	f3000400 	.inst	0xf3000400 ; undefined
    75f8:	009f5001 	.inst	0x009f5001 ; undefined
	...
    7610:	04000000 	.inst	0x04000000 ; undefined
    7614:	00000000 	.inst	0x00000000 ; undefined
    7618:	02000000 	.inst	0x02000000 ; undefined
    761c:	049f3000 	.inst	0x049f3000 ; undefined
    7620:	00000000 	.inst	0x00000000 ; undefined
    7624:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    7628:	00000000 	.inst	0x00000000 ; undefined
    762c:	01000000 	.inst	0x01000000 ; undefined
    7630:	000c5200 	.inst	0x000c5200 ; undefined
    7634:	00000000 	.inst	0x00000000 ; undefined
    7638:	00340000 	.inst	0x00340000 ; NYI
    763c:	00000000 	.inst	0x00000000 ; undefined
    7640:	00030000 	.inst	0x00030000 ; undefined
    7644:	009f7f72 	.inst	0x009f7f72 ; undefined
	...
    765c:	04000000 	.inst	0x04000000 ; undefined
    7660:	00000000 	.inst	0x00000000 ; undefined
    7664:	02000000 	.inst	0x02000000 ; undefined
    7668:	009f3000 	.inst	0x009f3000 ; undefined
	...
    7678:	90000000 	adrp	x0, 7000 <_stack_size+0x6000>
    767c:	00000000 	.inst	0x00000000 ; undefined
    7680:	a4000000 	.inst	0xa4000000 ; undefined
    7684:	00000000 	.inst	0x00000000 ; undefined
    7688:	01000000 	.inst	0x01000000 ; undefined
    768c:	00a45000 	.inst	0x00a45000 ; undefined
    7690:	00000000 	.inst	0x00000000 ; undefined
    7694:	013c0000 	.inst	0x013c0000 ; undefined
    7698:	00000000 	.inst	0x00000000 ; undefined
    769c:	00020000 	.inst	0x00020000 ; undefined
    76a0:	013c6891 	.inst	0x013c6891 ; undefined
    76a4:	00000000 	.inst	0x00000000 ; undefined
    76a8:	01400000 	.inst	0x01400000 ; undefined
    76ac:	00000000 	.inst	0x00000000 ; undefined
    76b0:	00020000 	.inst	0x00020000 ; undefined
    76b4:	0000688f 	.inst	0x0000688f ; undefined
	...
    76c4:	009c0000 	.inst	0x009c0000 ; undefined
    76c8:	00000000 	.inst	0x00000000 ; undefined
    76cc:	00d00000 	.inst	0x00d00000 ; undefined
    76d0:	00000000 	.inst	0x00000000 ; undefined
    76d4:	00020000 	.inst	0x00020000 ; undefined
    76d8:	00d07c91 	.inst	0x00d07c91 ; undefined
    76dc:	00000000 	.inst	0x00000000 ; undefined
    76e0:	00d40000 	.inst	0x00d40000 ; undefined
    76e4:	00000000 	.inst	0x00000000 ; undefined
    76e8:	00010000 	.inst	0x00010000 ; undefined
    76ec:	0000d451 	.inst	0x0000d451 ; undefined
    76f0:	00000000 	.inst	0x00000000 ; undefined
    76f4:	00013c00 	.inst	0x00013c00 ; undefined
    76f8:	00000000 	.inst	0x00000000 ; undefined
    76fc:	91000200 	add	x0, x16, #0x0
    7700:	00013c7c 	.inst	0x00013c7c ; undefined
    7704:	00000000 	.inst	0x00000000 ; undefined
    7708:	00014000 	.inst	0x00014000 ; undefined
    770c:	00000000 	.inst	0x00000000 ; undefined
    7710:	8f000200 	.inst	0x8f000200 ; undefined
    7714:	0000007c 	.inst	0x0000007c ; undefined
	...
    7724:	0000a000 	.inst	0x0000a000 ; undefined
    7728:	00000000 	.inst	0x00000000 ; undefined
    772c:	0000a800 	.inst	0x0000a800 ; undefined
    7730:	00000000 	.inst	0x00000000 ; undefined
    7734:	91000200 	add	x0, x16, #0x0
    7738:	0000a87c 	.inst	0x0000a87c ; undefined
    773c:	00000000 	.inst	0x00000000 ; undefined
    7740:	00012000 	.inst	0x00012000 ; undefined
    7744:	00000000 	.inst	0x00000000 ; undefined
    7748:	91000200 	add	x0, x16, #0x0
    774c:	00012074 	.inst	0x00012074 ; undefined
    7750:	00000000 	.inst	0x00000000 ; undefined
    7754:	00012700 	.inst	0x00012700 ; undefined
    7758:	00000000 	.inst	0x00000000 ; undefined
    775c:	50000100 	adr	x0, 777e <_stack_size+0x677e>
    7760:	00000127 	.inst	0x00000127 ; undefined
    7764:	00000000 	.inst	0x00000000 ; undefined
    7768:	0000013c 	.inst	0x0000013c ; undefined
    776c:	00000000 	.inst	0x00000000 ; undefined
    7770:	74910002 	.inst	0x74910002 ; undefined
    7774:	0000013c 	.inst	0x0000013c ; undefined
    7778:	00000000 	.inst	0x00000000 ; undefined
    777c:	00000140 	.inst	0x00000140 ; undefined
    7780:	00000000 	.inst	0x00000000 ; undefined
    7784:	748f0002 	.inst	0x748f0002 ; undefined
	...
    7798:	000000a8 	.inst	0x000000a8 ; undefined
    779c:	00000000 	.inst	0x00000000 ; undefined
    77a0:	000000bc 	.inst	0x000000bc ; undefined
    77a4:	00000000 	.inst	0x00000000 ; undefined
    77a8:	78910002 	ldursh	x2, [x0,#-240]
    77ac:	000000bc 	.inst	0x000000bc ; undefined
    77b0:	00000000 	.inst	0x00000000 ; undefined
    77b4:	000000c4 	.inst	0x000000c4 ; undefined
    77b8:	00000000 	.inst	0x00000000 ; undefined
    77bc:	c4500001 	.inst	0xc4500001 ; undefined
    77c0:	00000000 	.inst	0x00000000 ; undefined
    77c4:	e8000000 	.inst	0xe8000000 ; undefined
    77c8:	00000000 	.inst	0x00000000 ; undefined
    77cc:	02000000 	.inst	0x02000000 ; undefined
    77d0:	e8789100 	.inst	0xe8789100 ; undefined
    77d4:	00000000 	.inst	0x00000000 ; undefined
    77d8:	ec000000 	.inst	0xec000000 ; undefined
    77dc:	00000000 	.inst	0x00000000 ; undefined
    77e0:	01000000 	.inst	0x01000000 ; undefined
    77e4:	00ec5000 	.inst	0x00ec5000 ; undefined
    77e8:	00000000 	.inst	0x00000000 ; undefined
    77ec:	013c0000 	.inst	0x013c0000 ; undefined
    77f0:	00000000 	.inst	0x00000000 ; undefined
    77f4:	00020000 	.inst	0x00020000 ; undefined
    77f8:	013c7891 	.inst	0x013c7891 ; undefined
    77fc:	00000000 	.inst	0x00000000 ; undefined
    7800:	01400000 	.inst	0x01400000 ; undefined
    7804:	00000000 	.inst	0x00000000 ; undefined
    7808:	00020000 	.inst	0x00020000 ; undefined
    780c:	0000788f 	.inst	0x0000788f ; undefined
	...
    7824:	00340000 	.inst	0x00340000 ; NYI
    7828:	00000000 	.inst	0x00000000 ; undefined
    782c:	00010000 	.inst	0x00010000 ; undefined
    7830:	00003450 	.inst	0x00003450 ; undefined
    7834:	00000000 	.inst	0x00000000 ; undefined
    7838:	00003700 	.inst	0x00003700 ; undefined
    783c:	00000000 	.inst	0x00000000 ; undefined
    7840:	51000100 	sub	w0, w8, #0x0
    7844:	00000037 	.inst	0x00000037 ; undefined
    7848:	00000000 	.inst	0x00000000 ; undefined
    784c:	00000038 	.inst	0x00000038 ; undefined
    7850:	00000000 	.inst	0x00000000 ; undefined
    7854:	01f30004 	.inst	0x01f30004 ; undefined
    7858:	00389f50 	.inst	0x00389f50 ; NYI
    785c:	00000000 	.inst	0x00000000 ; undefined
    7860:	00580000 	.inst	0x00580000 ; undefined
    7864:	00000000 	.inst	0x00000000 ; undefined
    7868:	00010000 	.inst	0x00010000 ; undefined
    786c:	00005850 	.inst	0x00005850 ; undefined
    7870:	00000000 	.inst	0x00000000 ; undefined
    7874:	00005b00 	.inst	0x00005b00 ; undefined
    7878:	00000000 	.inst	0x00000000 ; undefined
    787c:	51000100 	sub	w0, w8, #0x0
    7880:	0000005b 	.inst	0x0000005b ; undefined
    7884:	00000000 	.inst	0x00000000 ; undefined
    7888:	0000005c 	.inst	0x0000005c ; undefined
    788c:	00000000 	.inst	0x00000000 ; undefined
    7890:	01f30004 	.inst	0x01f30004 ; undefined
    7894:	005c9f50 	.inst	0x005c9f50 ; undefined
    7898:	00000000 	.inst	0x00000000 ; undefined
    789c:	00680000 	.inst	0x00680000 ; undefined
    78a0:	00000000 	.inst	0x00000000 ; undefined
    78a4:	00010000 	.inst	0x00010000 ; undefined
    78a8:	00006850 	.inst	0x00006850 ; undefined
    78ac:	00000000 	.inst	0x00000000 ; undefined
    78b0:	00006b00 	.inst	0x00006b00 ; undefined
    78b4:	00000000 	.inst	0x00000000 ; undefined
    78b8:	51000100 	sub	w0, w8, #0x0
    78bc:	0000006b 	.inst	0x0000006b ; undefined
    78c0:	00000000 	.inst	0x00000000 ; undefined
    78c4:	0000006c 	.inst	0x0000006c ; undefined
    78c8:	00000000 	.inst	0x00000000 ; undefined
    78cc:	01f30004 	.inst	0x01f30004 ; undefined
    78d0:	00009f50 	.inst	0x00009f50 ; undefined
	...
    78e8:	00300000 	.inst	0x00300000 ; NYI
    78ec:	00000000 	.inst	0x00000000 ; undefined
    78f0:	00010000 	.inst	0x00010000 ; undefined
    78f4:	00003051 	.inst	0x00003051 ; undefined
    78f8:	00000000 	.inst	0x00000000 ; undefined
    78fc:	00003800 	.inst	0x00003800 ; undefined
    7900:	00000000 	.inst	0x00000000 ; undefined
    7904:	f3000400 	.inst	0xf3000400 ; undefined
    7908:	389f5101 	ldursb	x1, [x8,#-11]
    790c:	00000000 	.inst	0x00000000 ; undefined
    7910:	54000000 	b.eq	7910 <_stack_size+0x6910>
    7914:	00000000 	.inst	0x00000000 ; undefined
    7918:	01000000 	.inst	0x01000000 ; undefined
    791c:	00545100 	.inst	0x00545100 ; undefined
    7920:	00000000 	.inst	0x00000000 ; undefined
    7924:	005c0000 	.inst	0x005c0000 ; undefined
    7928:	00000000 	.inst	0x00000000 ; undefined
    792c:	00040000 	.inst	0x00040000 ; undefined
    7930:	9f5101f3 	.inst	0x9f5101f3 ; undefined
    7934:	0000005c 	.inst	0x0000005c ; undefined
    7938:	00000000 	.inst	0x00000000 ; undefined
    793c:	00000064 	.inst	0x00000064 ; undefined
    7940:	00000000 	.inst	0x00000000 ; undefined
    7944:	64510001 	.inst	0x64510001 ; undefined
    7948:	00000000 	.inst	0x00000000 ; undefined
    794c:	6c000000 	stnp	d0, d0, [x0]
    7950:	00000000 	.inst	0x00000000 ; undefined
    7954:	04000000 	.inst	0x04000000 ; undefined
    7958:	5101f300 	sub	w0, w24, #0x7c
    795c:	0000009f 	.inst	0x0000009f ; undefined
	...
    796c:	00008000 	.inst	0x00008000 ; undefined
    7970:	00000000 	.inst	0x00000000 ; undefined
    7974:	0000a000 	.inst	0x0000a000 ; undefined
    7978:	00000000 	.inst	0x00000000 ; undefined
    797c:	52000100 	eor	w0, w8, #0x1
    7980:	000000a0 	.inst	0x000000a0 ; undefined
    7984:	00000000 	.inst	0x00000000 ; undefined
    7988:	00000103 	.inst	0x00000103 ; undefined
    798c:	00000000 	.inst	0x00000000 ; undefined
    7990:	40030009 	.inst	0x40030009 ; undefined
    7994:	000300bd 	.inst	0x000300bd ; undefined
    7998:	34000000 	cbz	w0, 7998 <_stack_size+0x6998>
    799c:	00000001 	.inst	0x00000001 ; undefined
    79a0:	3c000000 	stur	b0, [x0]
    79a4:	00000001 	.inst	0x00000001 ; undefined
    79a8:	09000000 	.inst	0x09000000 ; undefined
    79ac:	bd400300 	ldr	s0, [x24]
    79b0:	00000300 	.inst	0x00000300 ; undefined
    79b4:	01500000 	.inst	0x01500000 ; undefined
    79b8:	00000000 	.inst	0x00000000 ; undefined
    79bc:	01530000 	.inst	0x01530000 ; undefined
    79c0:	00000000 	.inst	0x00000000 ; undefined
    79c4:	00010000 	.inst	0x00010000 ; undefined
    79c8:	00000052 	.inst	0x00000052 ; undefined
	...
    79d8:	0000a400 	.inst	0x0000a400 ; undefined
    79dc:	00000000 	.inst	0x00000000 ; undefined
    79e0:	0000b800 	.inst	0x0000b800 ; undefined
    79e4:	00000000 	.inst	0x00000000 ; undefined
    79e8:	50000100 	adr	x0, 7a0a <_stack_size+0x6a0a>
    79ec:	000000b8 	.inst	0x000000b8 ; undefined
    79f0:	00000000 	.inst	0x00000000 ; undefined
    79f4:	000000c0 	.inst	0x000000c0 ; undefined
    79f8:	00000000 	.inst	0x00000000 ; undefined
    79fc:	70700003 	adr	x3, e79ff <_stack_size+0xe69ff>
    7a00:	0000c09f 	.inst	0x0000c09f ; undefined
    7a04:	00000000 	.inst	0x00000000 ; undefined
    7a08:	0000d800 	.inst	0x0000d800 ; undefined
    7a0c:	00000000 	.inst	0x00000000 ; undefined
    7a10:	50000100 	adr	x0, 7a32 <_stack_size+0x6a32>
    7a14:	000000d8 	.inst	0x000000d8 ; undefined
    7a18:	00000000 	.inst	0x00000000 ; undefined
    7a1c:	000000e0 	.inst	0x000000e0 ; undefined
    7a20:	00000000 	.inst	0x00000000 ; undefined
    7a24:	34560001 	cbz	w1, b3a24 <_stack_size+0xb2a24>
    7a28:	00000001 	.inst	0x00000001 ; undefined
    7a2c:	3c000000 	stur	b0, [x0]
    7a30:	00000001 	.inst	0x00000001 ; undefined
    7a34:	01000000 	.inst	0x01000000 ; undefined
    7a38:	00005000 	.inst	0x00005000 ; undefined
	...
    7a48:	01540000 	.inst	0x01540000 ; undefined
    7a4c:	00000000 	.inst	0x00000000 ; undefined
    7a50:	01980000 	.inst	0x01980000 ; undefined
    7a54:	00000000 	.inst	0x00000000 ; undefined
    7a58:	00010000 	.inst	0x00010000 ; undefined
    7a5c:	00019850 	.inst	0x00019850 ; undefined
    7a60:	00000000 	.inst	0x00000000 ; undefined
    7a64:	0001a400 	.inst	0x0001a400 ; undefined
    7a68:	00000000 	.inst	0x00000000 ; undefined
    7a6c:	63000100 	.inst	0x63000100 ; undefined
    7a70:	000001a4 	.inst	0x000001a4 ; undefined
    7a74:	00000000 	.inst	0x00000000 ; undefined
    7a78:	000001bc 	.inst	0x000001bc ; undefined
    7a7c:	00000000 	.inst	0x00000000 ; undefined
    7a80:	01f30004 	.inst	0x01f30004 ; undefined
    7a84:	01bc9f50 	.inst	0x01bc9f50 ; undefined
    7a88:	00000000 	.inst	0x00000000 ; undefined
    7a8c:	01c00000 	.inst	0x01c00000 ; undefined
    7a90:	00000000 	.inst	0x00000000 ; undefined
    7a94:	00010000 	.inst	0x00010000 ; undefined
    7a98:	0001c050 	.inst	0x0001c050 ; undefined
    7a9c:	00000000 	.inst	0x00000000 ; undefined
    7aa0:	0001f400 	.inst	0x0001f400 ; undefined
    7aa4:	00000000 	.inst	0x00000000 ; undefined
    7aa8:	63000100 	.inst	0x63000100 ; undefined
    7aac:	000001f4 	.inst	0x000001f4 ; undefined
    7ab0:	00000000 	.inst	0x00000000 ; undefined
    7ab4:	000001f8 	.inst	0x000001f8 ; undefined
    7ab8:	00000000 	.inst	0x00000000 ; undefined
    7abc:	01f30004 	.inst	0x01f30004 ; undefined
    7ac0:	01f89f50 	.inst	0x01f89f50 ; undefined
    7ac4:	00000000 	.inst	0x00000000 ; undefined
    7ac8:	01fc0000 	.inst	0x01fc0000 ; undefined
    7acc:	00000000 	.inst	0x00000000 ; undefined
    7ad0:	00010000 	.inst	0x00010000 ; undefined
    7ad4:	0001fc50 	.inst	0x0001fc50 ; undefined
    7ad8:	00000000 	.inst	0x00000000 ; undefined
    7adc:	00020000 	.inst	0x00020000 ; undefined
    7ae0:	00000000 	.inst	0x00000000 ; undefined
    7ae4:	f3000400 	.inst	0xf3000400 ; undefined
    7ae8:	009f5001 	.inst	0x009f5001 ; undefined
	...
    7af8:	54000000 	b.eq	7af8 <_stack_size+0x6af8>
    7afc:	00000001 	.inst	0x00000001 ; undefined
    7b00:	a8000000 	stnp	x0, x0, [x0]
    7b04:	00000001 	.inst	0x00000001 ; undefined
    7b08:	01000000 	.inst	0x01000000 ; undefined
    7b0c:	01a85100 	.inst	0x01a85100 ; undefined
    7b10:	00000000 	.inst	0x00000000 ; undefined
    7b14:	01b00000 	.inst	0x01b00000 ; undefined
    7b18:	00000000 	.inst	0x00000000 ; undefined
    7b1c:	00010000 	.inst	0x00010000 ; undefined
    7b20:	0001b064 	.inst	0x0001b064 ; undefined
    7b24:	00000000 	.inst	0x00000000 ; undefined
    7b28:	0001bc00 	.inst	0x0001bc00 ; undefined
    7b2c:	00000000 	.inst	0x00000000 ; undefined
    7b30:	f3000400 	.inst	0xf3000400 ; undefined
    7b34:	bc9f5101 	.inst	0xbc9f5101 ; undefined
    7b38:	00000001 	.inst	0x00000001 ; undefined
    7b3c:	c7000000 	.inst	0xc7000000 ; undefined
    7b40:	00000001 	.inst	0x00000001 ; undefined
    7b44:	01000000 	.inst	0x01000000 ; undefined
    7b48:	01c75100 	.inst	0x01c75100 ; undefined
    7b4c:	00000000 	.inst	0x00000000 ; undefined
    7b50:	01f40000 	.inst	0x01f40000 ; undefined
    7b54:	00000000 	.inst	0x00000000 ; undefined
    7b58:	00010000 	.inst	0x00010000 ; undefined
    7b5c:	0001f464 	.inst	0x0001f464 ; undefined
    7b60:	00000000 	.inst	0x00000000 ; undefined
    7b64:	0001f800 	.inst	0x0001f800 ; undefined
    7b68:	00000000 	.inst	0x00000000 ; undefined
    7b6c:	f3000400 	.inst	0xf3000400 ; undefined
    7b70:	f89f5101 	prfum	pldl1strm, [x8,#-11]
    7b74:	00000001 	.inst	0x00000001 ; undefined
    7b78:	00000000 	.inst	0x00000000 ; undefined
    7b7c:	00000002 	.inst	0x00000002 ; undefined
    7b80:	01000000 	.inst	0x01000000 ; undefined
    7b84:	00005100 	.inst	0x00005100 ; undefined
	...
    7b94:	01740000 	.inst	0x01740000 ; undefined
    7b98:	00000000 	.inst	0x00000000 ; undefined
    7b9c:	019c0000 	.inst	0x019c0000 ; undefined
    7ba0:	00000000 	.inst	0x00000000 ; undefined
    7ba4:	00010000 	.inst	0x00010000 ; undefined
    7ba8:	00019c52 	.inst	0x00019c52 ; undefined
    7bac:	00000000 	.inst	0x00000000 ; undefined
    7bb0:	0001ab00 	.inst	0x0001ab00 ; undefined
    7bb4:	00000000 	.inst	0x00000000 ; undefined
    7bb8:	72000300 	ands	w0, w24, #0x1
    7bbc:	01bc9f7f 	.inst	0x01bc9f7f ; undefined
    7bc0:	00000000 	.inst	0x00000000 ; undefined
    7bc4:	01c70000 	.inst	0x01c70000 ; undefined
    7bc8:	00000000 	.inst	0x00000000 ; undefined
    7bcc:	00010000 	.inst	0x00010000 ; undefined
    7bd0:	00000052 	.inst	0x00000052 ; undefined
	...
    7be0:	00017400 	.inst	0x00017400 ; undefined
    7be4:	00000000 	.inst	0x00000000 ; undefined
    7be8:	00017800 	.inst	0x00017800 ; undefined
    7bec:	00000000 	.inst	0x00000000 ; undefined
    7bf0:	72001000 	ands	w0, w0, #0x1f
    7bf4:	24200800 	.inst	0x24200800 ; undefined
    7bf8:	23262008 	.inst	0x23262008 ; undefined
    7bfc:	70243401 	adr	x1, 5027f <_stack_size+0x4f27f>
    7c00:	789f2200 	ldursh	x0, [x16,#-14]
    7c04:	00000001 	.inst	0x00000001 ; undefined
    7c08:	80000000 	.inst	0x80000000 ; undefined
    7c0c:	00000001 	.inst	0x00000001 ; undefined
    7c10:	10000000 	adr	x0, 7c10 <_stack_size+0x6c10>
    7c14:	087f7200 	.inst	0x087f7200 ; undefined
    7c18:	20082420 	.inst	0x20082420 ; undefined
    7c1c:	34012326 	cbz	w6, a080 <_stack_size+0x9080>
    7c20:	22007024 	.inst	0x22007024 ; undefined
    7c24:	0001809f 	.inst	0x0001809f ; undefined
    7c28:	00000000 	.inst	0x00000000 ; undefined
    7c2c:	00019800 	.inst	0x00019800 ; undefined
    7c30:	00000000 	.inst	0x00000000 ; undefined
    7c34:	72001000 	ands	w0, w0, #0x1f
    7c38:	24200800 	.inst	0x24200800 ; undefined
    7c3c:	23262008 	.inst	0x23262008 ; undefined
    7c40:	70243401 	adr	x1, 502c3 <_stack_size+0x4f2c3>
    7c44:	989f2200 	ldrsw	x0, fffffffffff46084 <SMC_ID_HW_RSA+0xffffffff7bf3617d>
    7c48:	00000001 	.inst	0x00000001 ; undefined
    7c4c:	9c000000 	ldr	q0, 7c4c <_stack_size+0x6c4c>
    7c50:	00000001 	.inst	0x00000001 ; undefined
    7c54:	10000000 	adr	x0, 7c54 <_stack_size+0x6c54>
    7c58:	08007200 	stxrb	w0, w0, [x16]
    7c5c:	20082420 	.inst	0x20082420 ; undefined
    7c60:	34012326 	cbz	w6, a0c4 <_stack_size+0x90c4>
    7c64:	22008324 	.inst	0x22008324 ; undefined
    7c68:	00019c9f 	.inst	0x00019c9f ; undefined
    7c6c:	00000000 	.inst	0x00000000 ; undefined
    7c70:	0001a400 	.inst	0x0001a400 ; undefined
    7c74:	00000000 	.inst	0x00000000 ; undefined
    7c78:	72001000 	ands	w0, w0, #0x1f
    7c7c:	2420087f 	.inst	0x2420087f ; undefined
    7c80:	23262008 	.inst	0x23262008 ; undefined
    7c84:	83243401 	.inst	0x83243401 ; undefined
    7c88:	a49f2200 	.inst	0xa49f2200 ; undefined
    7c8c:	00000001 	.inst	0x00000001 ; undefined
    7c90:	ab000000 	adds	x0, x0, x0
    7c94:	00000001 	.inst	0x00000001 ; undefined
    7c98:	11000000 	add	w0, w0, #0x0
    7c9c:	087f7200 	.inst	0x087f7200 ; undefined
    7ca0:	20082420 	.inst	0x20082420 ; undefined
    7ca4:	34012326 	cbz	w6, a108 <_stack_size+0x9108>
    7ca8:	5001f324 	adr	x4, bb0e <_stack_size+0xab0e>
    7cac:	01bc9f22 	.inst	0x01bc9f22 ; undefined
    7cb0:	00000000 	.inst	0x00000000 ; undefined
    7cb4:	01c00000 	.inst	0x01c00000 ; undefined
    7cb8:	00000000 	.inst	0x00000000 ; undefined
    7cbc:	00100000 	.inst	0x00100000 ; undefined
    7cc0:	20087f72 	.inst	0x20087f72 ; undefined
    7cc4:	26200824 	.inst	0x26200824 ; undefined
    7cc8:	24340123 	.inst	0x24340123 ; undefined
    7ccc:	9f220070 	.inst	0x9f220070 ; undefined
    7cd0:	000001c0 	.inst	0x000001c0 ; undefined
    7cd4:	00000000 	.inst	0x00000000 ; undefined
    7cd8:	000001c7 	.inst	0x000001c7 ; undefined
    7cdc:	00000000 	.inst	0x00000000 ; undefined
    7ce0:	7f720010 	.inst	0x7f720010 ; undefined
    7ce4:	08242008 	.inst	0x08242008 ; undefined
    7ce8:	01232620 	.inst	0x01232620 ; undefined
    7cec:	00832434 	.inst	0x00832434 ; undefined
    7cf0:	00009f22 	.inst	0x00009f22 ; undefined
	...
    7d08:	00200000 	.inst	0x00200000 ; NYI
    7d0c:	00000000 	.inst	0x00000000 ; undefined
    7d10:	00010000 	.inst	0x00010000 ; undefined
    7d14:	00002050 	.inst	0x00002050 ; undefined
    7d18:	00000000 	.inst	0x00000000 ; undefined
    7d1c:	00005800 	.inst	0x00005800 ; undefined
    7d20:	00000000 	.inst	0x00000000 ; undefined
    7d24:	63000100 	.inst	0x63000100 ; undefined
    7d28:	00000058 	.inst	0x00000058 ; undefined
    7d2c:	00000000 	.inst	0x00000000 ; undefined
    7d30:	00000068 	.inst	0x00000068 ; undefined
    7d34:	00000000 	.inst	0x00000000 ; undefined
    7d38:	01f30004 	.inst	0x01f30004 ; undefined
    7d3c:	00689f50 	.inst	0x00689f50 ; undefined
    7d40:	00000000 	.inst	0x00000000 ; undefined
    7d44:	00ac0000 	.inst	0x00ac0000 ; undefined
    7d48:	00000000 	.inst	0x00000000 ; undefined
    7d4c:	00010000 	.inst	0x00010000 ; undefined
    7d50:	00000063 	.inst	0x00000063 ; undefined
	...
    7d68:	00003800 	.inst	0x00003800 ; undefined
    7d6c:	00000000 	.inst	0x00000000 ; undefined
    7d70:	30000200 	adr	x0, 7db1 <_stack_size+0x6db1>
    7d74:	0000389f 	.inst	0x0000389f ; undefined
    7d78:	00000000 	.inst	0x00000000 ; undefined
    7d7c:	00004800 	.inst	0x00004800 ; undefined
    7d80:	00000000 	.inst	0x00000000 ; undefined
    7d84:	74000500 	.inst	0x74000500 ; undefined
    7d88:	9f254700 	.inst	0x9f254700 ; undefined
    7d8c:	00000048 	.inst	0x00000048 ; undefined
    7d90:	00000000 	.inst	0x00000000 ; undefined
    7d94:	00000050 	.inst	0x00000050 ; undefined
    7d98:	00000000 	.inst	0x00000000 ; undefined
    7d9c:	00730006 	.inst	0x00730006 ; undefined
    7da0:	9f1a0071 	.inst	0x9f1a0071 ; undefined
    7da4:	00000050 	.inst	0x00000050 ; undefined
    7da8:	00000000 	.inst	0x00000000 ; undefined
    7dac:	00000058 	.inst	0x00000058 ; undefined
    7db0:	00000000 	.inst	0x00000000 ; undefined
    7db4:	68510001 	.inst	0x68510001 ; undefined
    7db8:	00000000 	.inst	0x00000000 ; undefined
    7dbc:	70000000 	adr	x0, 7dbf <_stack_size+0x6dbf>
    7dc0:	00000000 	.inst	0x00000000 ; undefined
    7dc4:	01000000 	.inst	0x01000000 ; undefined
    7dc8:	00705100 	.inst	0x00705100 ; undefined
    7dcc:	00000000 	.inst	0x00000000 ; undefined
    7dd0:	007b0000 	.inst	0x007b0000 ; undefined
    7dd4:	00000000 	.inst	0x00000000 ; undefined
    7dd8:	00080000 	.inst	0x00080000 ; undefined
    7ddc:	04830073 	.inst	0x04830073 ; undefined
    7de0:	9f1a0494 	.inst	0x9f1a0494 ; undefined
    7de4:	00000088 	.inst	0x00000088 ; undefined
    7de8:	00000000 	.inst	0x00000000 ; undefined
    7dec:	00000098 	.inst	0x00000098 ; undefined
    7df0:	00000000 	.inst	0x00000000 ; undefined
    7df4:	00740005 	.inst	0x00740005 ; undefined
    7df8:	989f2547 	ldrsw	x7, fffffffffff462a0 <SMC_ID_HW_RSA+0xffffffff7bf36399>
    7dfc:	00000000 	.inst	0x00000000 ; undefined
    7e00:	a0000000 	.inst	0xa0000000 ; undefined
    7e04:	00000000 	.inst	0x00000000 ; undefined
    7e08:	06000000 	.inst	0x06000000 ; undefined
    7e0c:	70007300 	adr	x0, 8c6f <_stack_size+0x7c6f>
    7e10:	a09f1a00 	.inst	0xa09f1a00 ; undefined
    7e14:	00000000 	.inst	0x00000000 ; undefined
    7e18:	ac000000 	stnp	q0, q0, [x0]
    7e1c:	00000000 	.inst	0x00000000 ; undefined
    7e20:	01000000 	.inst	0x01000000 ; undefined
    7e24:	00005000 	.inst	0x00005000 ; undefined
	...
    7e3c:	00480000 	.inst	0x00480000 ; undefined
    7e40:	00000000 	.inst	0x00000000 ; undefined
    7e44:	00020000 	.inst	0x00020000 ; undefined
    7e48:	00489f30 	.inst	0x00489f30 ; undefined
    7e4c:	00000000 	.inst	0x00000000 ; undefined
    7e50:	00500000 	.inst	0x00500000 ; undefined
    7e54:	00000000 	.inst	0x00000000 ; undefined
    7e58:	00080000 	.inst	0x00080000 ; undefined
    7e5c:	04940083 	.inst	0x04940083 ; undefined
    7e60:	9f1a0071 	.inst	0x9f1a0071 ; undefined
    7e64:	00000050 	.inst	0x00000050 ; undefined
    7e68:	00000000 	.inst	0x00000000 ; undefined
    7e6c:	00000058 	.inst	0x00000058 ; undefined
    7e70:	00000000 	.inst	0x00000000 ; undefined
    7e74:	0083000a 	.inst	0x0083000a ; undefined
    7e78:	04830494 	.inst	0x04830494 ; undefined
    7e7c:	9f1a0494 	.inst	0x9f1a0494 ; undefined
    7e80:	00000068 	.inst	0x00000068 ; undefined
    7e84:	00000000 	.inst	0x00000000 ; undefined
    7e88:	0000007b 	.inst	0x0000007b ; undefined
    7e8c:	00000000 	.inst	0x00000000 ; undefined
    7e90:	0083000a 	.inst	0x0083000a ; undefined
    7e94:	04830494 	.inst	0x04830494 ; undefined
    7e98:	9f1a0494 	.inst	0x9f1a0494 ; undefined
    7e9c:	00000098 	.inst	0x00000098 ; undefined
    7ea0:	00000000 	.inst	0x00000000 ; undefined
    7ea4:	000000a0 	.inst	0x000000a0 ; undefined
    7ea8:	00000000 	.inst	0x00000000 ; undefined
    7eac:	08830008 	.inst	0x08830008 ; undefined
    7eb0:	00700494 	.inst	0x00700494 ; undefined
    7eb4:	00a09f1a 	.inst	0x00a09f1a ; undefined
    7eb8:	00000000 	.inst	0x00000000 ; undefined
    7ebc:	00ac0000 	.inst	0x00ac0000 ; undefined
    7ec0:	00000000 	.inst	0x00000000 ; undefined
    7ec4:	000a0000 	.inst	0x000a0000 ; undefined
    7ec8:	04940883 	.inst	0x04940883 ; undefined
    7ecc:	04940c83 	.inst	0x04940c83 ; undefined
    7ed0:	00009f1a 	.inst	0x00009f1a ; undefined
	...
    7ee0:	00100000 	.inst	0x00100000 ; undefined
    7ee4:	00000000 	.inst	0x00000000 ; undefined
    7ee8:	00580000 	.inst	0x00580000 ; undefined
    7eec:	00000000 	.inst	0x00000000 ; undefined
    7ef0:	00060000 	.inst	0x00060000 ; undefined
    7ef4:	007032f2 	.inst	0x007032f2 ; undefined
    7ef8:	00680000 	.inst	0x00680000 ; undefined
    7efc:	00000000 	.inst	0x00000000 ; undefined
    7f00:	00ac0000 	.inst	0x00ac0000 ; undefined
    7f04:	00000000 	.inst	0x00000000 ; undefined
    7f08:	00060000 	.inst	0x00060000 ; undefined
    7f0c:	007032f2 	.inst	0x007032f2 ; undefined
	...
    7f20:	00ac0000 	.inst	0x00ac0000 ; undefined
    7f24:	00000000 	.inst	0x00000000 ; undefined
    7f28:	00d40000 	.inst	0x00d40000 ; undefined
    7f2c:	00000000 	.inst	0x00000000 ; undefined
    7f30:	00030000 	.inst	0x00030000 ; undefined
    7f34:	e49fff08 	.inst	0xe49fff08 ; undefined
    7f38:	00000000 	.inst	0x00000000 ; undefined
    7f3c:	30000000 	adr	x0, 7f3d <_stack_size+0x6f3d>
    7f40:	00000001 	.inst	0x00000001 ; undefined
    7f44:	03000000 	.inst	0x03000000 ; undefined
    7f48:	9fff0800 	.inst	0x9fff0800 ; undefined
    7f4c:	00000130 	.inst	0x00000130 ; undefined
    7f50:	00000000 	.inst	0x00000000 ; undefined
    7f54:	00000138 	.inst	0x00000138 ; undefined
    7f58:	00000000 	.inst	0x00000000 ; undefined
    7f5c:	60500001 	.inst	0x60500001 ; undefined
    7f60:	00000001 	.inst	0x00000001 ; undefined
    7f64:	6c000000 	stnp	d0, d0, [x0]
    7f68:	00000001 	.inst	0x00000001 ; undefined
    7f6c:	01000000 	.inst	0x01000000 ; undefined
    7f70:	016c5000 	.inst	0x016c5000 ; undefined
    7f74:	00000000 	.inst	0x00000000 ; undefined
    7f78:	01700000 	.inst	0x01700000 ; undefined
    7f7c:	00000000 	.inst	0x00000000 ; undefined
    7f80:	00010000 	.inst	0x00010000 ; undefined
    7f84:	00017063 	.inst	0x00017063 ; undefined
    7f88:	00000000 	.inst	0x00000000 ; undefined
    7f8c:	00017c00 	.inst	0x00017c00 ; undefined
    7f90:	00000000 	.inst	0x00000000 ; undefined
    7f94:	50000100 	adr	x0, 7fb6 <_stack_size+0x6fb6>
    7f98:	0000017c 	.inst	0x0000017c ; undefined
    7f9c:	00000000 	.inst	0x00000000 ; undefined
    7fa0:	00000180 	.inst	0x00000180 ; undefined
    7fa4:	00000000 	.inst	0x00000000 ; undefined
    7fa8:	8c630001 	.inst	0x8c630001 ; undefined
    7fac:	00000001 	.inst	0x00000001 ; undefined
    7fb0:	94000000 	bl	7fb0 <_stack_size+0x6fb0>
    7fb4:	00000001 	.inst	0x00000001 ; undefined
    7fb8:	01000000 	.inst	0x01000000 ; undefined
    7fbc:	01945000 	.inst	0x01945000 ; undefined
    7fc0:	00000000 	.inst	0x00000000 ; undefined
    7fc4:	01980000 	.inst	0x01980000 ; undefined
    7fc8:	00000000 	.inst	0x00000000 ; undefined
    7fcc:	00030000 	.inst	0x00030000 ; undefined
    7fd0:	989fff08 	ldrsw	x8, fffffffffff47fb0 <SMC_ID_HW_RSA+0xffffffff7bf380a9>
    7fd4:	00000001 	.inst	0x00000001 ; undefined
    7fd8:	9c000000 	ldr	q0, 7fd8 <_stack_size+0x6fd8>
    7fdc:	00000001 	.inst	0x00000001 ; undefined
    7fe0:	01000000 	.inst	0x01000000 ; undefined
    7fe4:	019c5000 	.inst	0x019c5000 ; undefined
    7fe8:	00000000 	.inst	0x00000000 ; undefined
    7fec:	01a00000 	.inst	0x01a00000 ; undefined
    7ff0:	00000000 	.inst	0x00000000 ; undefined
    7ff4:	00030000 	.inst	0x00030000 ; undefined
    7ff8:	a09fff08 	.inst	0xa09fff08 ; undefined
    7ffc:	00000001 	.inst	0x00000001 ; undefined
    8000:	a4000000 	.inst	0xa4000000 ; undefined
    8004:	00000001 	.inst	0x00000001 ; undefined
    8008:	01000000 	.inst	0x01000000 ; undefined
    800c:	00005000 	.inst	0x00005000 ; undefined
	...
    801c:	01a40000 	.inst	0x01a40000 ; undefined
    8020:	00000000 	.inst	0x00000000 ; undefined
    8024:	01ec0000 	.inst	0x01ec0000 ; undefined
    8028:	00000000 	.inst	0x00000000 ; undefined
    802c:	00030000 	.inst	0x00030000 ; undefined
    8030:	f89fff08 	.inst	0xf89fff08 ; undefined
    8034:	00000001 	.inst	0x00000001 ; undefined
    8038:	00000000 	.inst	0x00000000 ; undefined
    803c:	00000002 	.inst	0x00000002 ; undefined
    8040:	03000000 	.inst	0x03000000 ; undefined
    8044:	9fff0800 	.inst	0x9fff0800 ; undefined
    8048:	00000200 	.inst	0x00000200 ; undefined
    804c:	00000000 	.inst	0x00000000 ; undefined
    8050:	00000218 	.inst	0x00000218 ; undefined
    8054:	00000000 	.inst	0x00000000 ; undefined
    8058:	5c500001 	ldr	d1, a8058 <_stack_size+0xa7058>
    805c:	00000002 	.inst	0x00000002 ; undefined
    8060:	64000000 	.inst	0x64000000 ; undefined
    8064:	00000002 	.inst	0x00000002 ; undefined
    8068:	01000000 	.inst	0x01000000 ; undefined
    806c:	02645000 	.inst	0x02645000 ; undefined
    8070:	00000000 	.inst	0x00000000 ; undefined
    8074:	02ac0000 	.inst	0x02ac0000 ; undefined
    8078:	00000000 	.inst	0x00000000 ; undefined
    807c:	00010000 	.inst	0x00010000 ; undefined
    8080:	0002ac63 	.inst	0x0002ac63 ; undefined
    8084:	00000000 	.inst	0x00000000 ; undefined
    8088:	0002bc00 	.inst	0x0002bc00 ; undefined
    808c:	00000000 	.inst	0x00000000 ; undefined
    8090:	50000100 	adr	x0, 80b2 <_stack_size+0x70b2>
    8094:	000002c0 	.inst	0x000002c0 ; undefined
    8098:	00000000 	.inst	0x00000000 ; undefined
    809c:	000002cc 	.inst	0x000002cc ; undefined
    80a0:	00000000 	.inst	0x00000000 ; undefined
    80a4:	d8500001 	prfm	pldl1strm, a80a4 <_stack_size+0xa70a4>
    80a8:	00000002 	.inst	0x00000002 ; undefined
    80ac:	e0000000 	.inst	0xe0000000 ; undefined
    80b0:	00000002 	.inst	0x00000002 ; undefined
    80b4:	03000000 	.inst	0x03000000 ; undefined
    80b8:	9fff0800 	.inst	0x9fff0800 ; undefined
    80bc:	000002e0 	.inst	0x000002e0 ; undefined
    80c0:	00000000 	.inst	0x00000000 ; undefined
    80c4:	000002e4 	.inst	0x000002e4 ; undefined
    80c8:	00000000 	.inst	0x00000000 ; undefined
    80cc:	e4500001 	.inst	0xe4500001 ; undefined
    80d0:	00000002 	.inst	0x00000002 ; undefined
    80d4:	ec000000 	.inst	0xec000000 ; undefined
    80d8:	00000002 	.inst	0x00000002 ; undefined
    80dc:	03000000 	.inst	0x03000000 ; undefined
    80e0:	9fff0800 	.inst	0x9fff0800 ; undefined
    80e4:	000002ec 	.inst	0x000002ec ; undefined
    80e8:	00000000 	.inst	0x00000000 ; undefined
    80ec:	000002f4 	.inst	0x000002f4 ; undefined
    80f0:	00000000 	.inst	0x00000000 ; undefined
    80f4:	f4500001 	.inst	0xf4500001 ; undefined
    80f8:	00000002 	.inst	0x00000002 ; undefined
    80fc:	04000000 	.inst	0x04000000 ; undefined
    8100:	00000003 	.inst	0x00000003 ; undefined
    8104:	01000000 	.inst	0x01000000 ; undefined
    8108:	00006300 	.inst	0x00006300 ; undefined
	...
    8118:	024c0000 	.inst	0x024c0000 ; undefined
    811c:	00000000 	.inst	0x00000000 ; undefined
    8120:	02d80000 	.inst	0x02d80000 ; undefined
    8124:	00000000 	.inst	0x00000000 ; undefined
    8128:	00010000 	.inst	0x00010000 ; undefined
    812c:	0002f065 	.inst	0x0002f065 ; undefined
    8130:	00000000 	.inst	0x00000000 ; undefined
    8134:	00030400 	.inst	0x00030400 ; undefined
    8138:	00000000 	.inst	0x00000000 ; undefined
    813c:	65000100 	.inst	0x65000100 ; undefined
	...
    8150:	0000028c 	.inst	0x0000028c ; undefined
    8154:	00000000 	.inst	0x00000000 ; undefined
    8158:	0000029c 	.inst	0x0000029c ; undefined
    815c:	00000000 	.inst	0x00000000 ; undefined
    8160:	9c520001 	ldr	q1, ac160 <_stack_size+0xab160>
    8164:	00000002 	.inst	0x00000002 ; undefined
    8168:	ab000000 	adds	x0, x0, x0
    816c:	00000002 	.inst	0x00000002 ; undefined
    8170:	01000000 	.inst	0x01000000 ; undefined
    8174:	00005100 	.inst	0x00005100 ; undefined
	...
    8184:	02b80000 	.inst	0x02b80000 ; undefined
    8188:	00000000 	.inst	0x00000000 ; undefined
    818c:	02d80000 	.inst	0x02d80000 ; undefined
    8190:	00000000 	.inst	0x00000000 ; undefined
    8194:	00010000 	.inst	0x00010000 ; undefined
    8198:	00000063 	.inst	0x00000063 ; undefined
	...
    81b0:	00002000 	.inst	0x00002000 ; undefined
    81b4:	00000000 	.inst	0x00000000 ; undefined
    81b8:	50000100 	adr	x0, 81da <_stack_size+0x71da>
    81bc:	00000020 	.inst	0x00000020 ; undefined
    81c0:	00000000 	.inst	0x00000000 ; undefined
    81c4:	00000084 	.inst	0x00000084 ; undefined
    81c8:	00000000 	.inst	0x00000000 ; undefined
    81cc:	84660001 	.inst	0x84660001 ; undefined
    81d0:	00000000 	.inst	0x00000000 ; undefined
    81d4:	98000000 	ldrsw	x0, 81d4 <_stack_size+0x71d4>
    81d8:	00000000 	.inst	0x00000000 ; undefined
    81dc:	04000000 	.inst	0x04000000 ; undefined
    81e0:	5001f300 	adr	x0, c042 <_stack_size+0xb042>
    81e4:	0000989f 	.inst	0x0000989f ; undefined
    81e8:	00000000 	.inst	0x00000000 ; undefined
    81ec:	0000b000 	.inst	0x0000b000 ; undefined
    81f0:	00000000 	.inst	0x00000000 ; undefined
    81f4:	66000100 	.inst	0x66000100 ; undefined
    81f8:	000000b0 	.inst	0x000000b0 ; undefined
    81fc:	00000000 	.inst	0x00000000 ; undefined
    8200:	000000fc 	.inst	0x000000fc ; undefined
    8204:	00000000 	.inst	0x00000000 ; undefined
    8208:	01f30004 	.inst	0x01f30004 ; undefined
    820c:	00fc9f50 	.inst	0x00fc9f50 ; undefined
    8210:	00000000 	.inst	0x00000000 ; undefined
    8214:	011c0000 	.inst	0x011c0000 ; undefined
    8218:	00000000 	.inst	0x00000000 ; undefined
    821c:	00010000 	.inst	0x00010000 ; undefined
    8220:	00000066 	.inst	0x00000066 ; undefined
	...
    8238:	00003300 	.inst	0x00003300 ; undefined
    823c:	00000000 	.inst	0x00000000 ; undefined
    8240:	51000100 	sub	w0, w8, #0x0
    8244:	00000033 	.inst	0x00000033 ; undefined
    8248:	00000000 	.inst	0x00000000 ; undefined
    824c:	0000008c 	.inst	0x0000008c ; undefined
    8250:	00000000 	.inst	0x00000000 ; undefined
    8254:	8c670001 	.inst	0x8c670001 ; undefined
    8258:	00000000 	.inst	0x00000000 ; undefined
    825c:	98000000 	ldrsw	x0, 825c <_stack_size+0x725c>
    8260:	00000000 	.inst	0x00000000 ; undefined
    8264:	04000000 	.inst	0x04000000 ; undefined
    8268:	5101f300 	sub	w0, w24, #0x7c
    826c:	0000989f 	.inst	0x0000989f ; undefined
    8270:	00000000 	.inst	0x00000000 ; undefined
    8274:	00011c00 	.inst	0x00011c00 ; undefined
    8278:	00000000 	.inst	0x00000000 ; undefined
    827c:	67000100 	.inst	0x67000100 ; undefined
	...
    8298:	00000033 	.inst	0x00000033 ; undefined
    829c:	00000000 	.inst	0x00000000 ; undefined
    82a0:	33520001 	.inst	0x33520001 ; undefined
    82a4:	00000000 	.inst	0x00000000 ; undefined
    82a8:	84000000 	.inst	0x84000000 ; undefined
    82ac:	00000000 	.inst	0x00000000 ; undefined
    82b0:	01000000 	.inst	0x01000000 ; undefined
    82b4:	00846400 	.inst	0x00846400 ; undefined
    82b8:	00000000 	.inst	0x00000000 ; undefined
    82bc:	00980000 	.inst	0x00980000 ; undefined
    82c0:	00000000 	.inst	0x00000000 ; undefined
    82c4:	00040000 	.inst	0x00040000 ; undefined
    82c8:	9f5201f3 	.inst	0x9f5201f3 ; undefined
    82cc:	00000098 	.inst	0x00000098 ; undefined
    82d0:	00000000 	.inst	0x00000000 ; undefined
    82d4:	0000011c 	.inst	0x0000011c ; undefined
    82d8:	00000000 	.inst	0x00000000 ; undefined
    82dc:	00640001 	.inst	0x00640001 ; undefined
	...
    82f4:	33000000 	bfxil	w0, w0, #0, #1
    82f8:	00000000 	.inst	0x00000000 ; undefined
    82fc:	01000000 	.inst	0x01000000 ; undefined
    8300:	00335300 	.inst	0x00335300 ; NYI
    8304:	00000000 	.inst	0x00000000 ; undefined
    8308:	00880000 	.inst	0x00880000 ; undefined
    830c:	00000000 	.inst	0x00000000 ; undefined
    8310:	00010000 	.inst	0x00010000 ; undefined
    8314:	00008865 	.inst	0x00008865 ; undefined
    8318:	00000000 	.inst	0x00000000 ; undefined
    831c:	00009800 	.inst	0x00009800 ; undefined
    8320:	00000000 	.inst	0x00000000 ; undefined
    8324:	f3000400 	.inst	0xf3000400 ; undefined
    8328:	989f5301 	ldrsw	x1, fffffffffff46d88 <SMC_ID_HW_RSA+0xffffffff7bf36e81>
    832c:	00000000 	.inst	0x00000000 ; undefined
    8330:	1c000000 	ldr	s0, 8330 <_stack_size+0x7330>
    8334:	00000001 	.inst	0x00000001 ; undefined
    8338:	01000000 	.inst	0x01000000 ; undefined
    833c:	00006500 	.inst	0x00006500 ; undefined
	...
    8354:	00840000 	.inst	0x00840000 ; undefined
    8358:	00000000 	.inst	0x00000000 ; undefined
    835c:	00030000 	.inst	0x00030000 ; undefined
    8360:	989fff08 	ldrsw	x8, fffffffffff48340 <SMC_ID_HW_RSA+0xffffffff7bf38439>
    8364:	00000000 	.inst	0x00000000 ; undefined
    8368:	ac000000 	stnp	q0, q0, [x0]
    836c:	00000000 	.inst	0x00000000 ; undefined
    8370:	03000000 	.inst	0x03000000 ; undefined
    8374:	9fff0800 	.inst	0x9fff0800 ; undefined
    8378:	000000ac 	.inst	0x000000ac ; undefined
    837c:	00000000 	.inst	0x00000000 ; undefined
    8380:	000000c4 	.inst	0x000000c4 ; undefined
    8384:	00000000 	.inst	0x00000000 ; undefined
    8388:	c4510001 	.inst	0xc4510001 ; undefined
    838c:	00000000 	.inst	0x00000000 ; undefined
    8390:	c8000000 	stxr	w0, x0, [x0]
    8394:	00000000 	.inst	0x00000000 ; undefined
    8398:	01000000 	.inst	0x01000000 ; undefined
    839c:	00cc5000 	.inst	0x00cc5000 ; undefined
    83a0:	00000000 	.inst	0x00000000 ; undefined
    83a4:	00d80000 	.inst	0x00d80000 ; undefined
    83a8:	00000000 	.inst	0x00000000 ; undefined
    83ac:	00010000 	.inst	0x00010000 ; undefined
    83b0:	0000fc50 	.inst	0x0000fc50 ; undefined
    83b4:	00000000 	.inst	0x00000000 ; undefined
    83b8:	00011400 	.inst	0x00011400 ; undefined
    83bc:	00000000 	.inst	0x00000000 ; undefined
    83c0:	08000300 	stxrb	w0, w0, [x24]
    83c4:	01149fff 	.inst	0x01149fff ; undefined
    83c8:	00000000 	.inst	0x00000000 ; undefined
    83cc:	011c0000 	.inst	0x011c0000 ; undefined
    83d0:	00000000 	.inst	0x00000000 ; undefined
    83d4:	00010000 	.inst	0x00010000 ; undefined
    83d8:	00000050 	.inst	0x00000050 ; undefined
	...
    83e8:	00000c00 	.inst	0x00000c00 ; undefined
    83ec:	00000000 	.inst	0x00000000 ; undefined
    83f0:	00003300 	.inst	0x00003300 ; undefined
    83f4:	00000000 	.inst	0x00000000 ; undefined
    83f8:	72000500 	ands	w0, w8, #0x3
    83fc:	9f253900 	.inst	0x9f253900 ; undefined
    8400:	00000033 	.inst	0x00000033 ; undefined
    8404:	00000000 	.inst	0x00000000 ; undefined
    8408:	00000084 	.inst	0x00000084 ; undefined
    840c:	00000000 	.inst	0x00000000 ; undefined
    8410:	00840005 	.inst	0x00840005 ; undefined
    8414:	849f2539 	.inst	0x849f2539 ; undefined
    8418:	00000000 	.inst	0x00000000 ; undefined
    841c:	98000000 	ldrsw	x0, 841c <_stack_size+0x741c>
    8420:	00000000 	.inst	0x00000000 ; undefined
    8424:	06000000 	.inst	0x06000000 ; undefined
    8428:	5201f300 	eor	w0, w24, #0xaaaaaaaa
    842c:	989f2539 	ldrsw	x25, fffffffffff468d0 <SMC_ID_HW_RSA+0xffffffff7bf369c9>
    8430:	00000000 	.inst	0x00000000 ; undefined
    8434:	1c000000 	ldr	s0, 8434 <_stack_size+0x7434>
    8438:	00000001 	.inst	0x00000001 ; undefined
    843c:	05000000 	.inst	0x05000000 ; undefined
    8440:	39008400 	strb	w0, [x0,#33]
    8444:	00009f25 	.inst	0x00009f25 ; undefined
	...
    8454:	000c0000 	.inst	0x000c0000 ; undefined
    8458:	00000000 	.inst	0x00000000 ; undefined
    845c:	00330000 	.inst	0x00330000 ; NYI
    8460:	00000000 	.inst	0x00000000 ; undefined
    8464:	00070000 	.inst	0x00070000 ; undefined
    8468:	ff0a0072 	.inst	0xff0a0072 ; undefined
    846c:	339f1a01 	.inst	0x339f1a01 ; undefined
    8470:	00000000 	.inst	0x00000000 ; undefined
    8474:	84000000 	.inst	0x84000000 ; undefined
    8478:	00000000 	.inst	0x00000000 ; undefined
    847c:	07000000 	.inst	0x07000000 ; undefined
    8480:	0a008400 	.inst	0x0a008400 ; undefined
    8484:	9f1a01ff 	.inst	0x9f1a01ff ; undefined
    8488:	00000084 	.inst	0x00000084 ; undefined
    848c:	00000000 	.inst	0x00000000 ; undefined
    8490:	00000098 	.inst	0x00000098 ; undefined
    8494:	00000000 	.inst	0x00000000 ; undefined
    8498:	01f30008 	.inst	0x01f30008 ; undefined
    849c:	01ff0a52 	.inst	0x01ff0a52 ; undefined
    84a0:	00989f1a 	.inst	0x00989f1a ; undefined
    84a4:	00000000 	.inst	0x00000000 ; undefined
    84a8:	011c0000 	.inst	0x011c0000 ; undefined
    84ac:	00000000 	.inst	0x00000000 ; undefined
    84b0:	00070000 	.inst	0x00070000 ; undefined
    84b4:	ff0a0084 	.inst	0xff0a0084 ; undefined
    84b8:	009f1a01 	.inst	0x009f1a01 ; undefined
	...
    84c8:	1c000000 	ldr	s0, 84c8 <_stack_size+0x74c8>
    84cc:	00000001 	.inst	0x00000001 ; undefined
    84d0:	5c000000 	ldr	d0, 84d0 <_stack_size+0x74d0>
    84d4:	00000001 	.inst	0x00000001 ; undefined
    84d8:	02000000 	.inst	0x02000000 ; undefined
    84dc:	5c9f3100 	ldr	d0, fffffffffff46afc <SMC_ID_HW_RSA+0xffffffff7bf36bf5>
    84e0:	00000001 	.inst	0x00000001 ; undefined
    84e4:	24000000 	.inst	0x24000000 ; undefined
    84e8:	00000002 	.inst	0x00000002 ; undefined
    84ec:	01000000 	.inst	0x01000000 ; undefined
    84f0:	02246700 	.inst	0x02246700 ; undefined
    84f4:	00000000 	.inst	0x00000000 ; undefined
    84f8:	022b0000 	.inst	0x022b0000 ; undefined
    84fc:	00000000 	.inst	0x00000000 ; undefined
    8500:	00010000 	.inst	0x00010000 ; undefined
    8504:	00022c50 	.inst	0x00022c50 ; undefined
    8508:	00000000 	.inst	0x00000000 ; undefined
    850c:	00023800 	.inst	0x00023800 ; undefined
    8510:	00000000 	.inst	0x00000000 ; undefined
    8514:	30000200 	adr	x0, 8555 <_stack_size+0x7555>
    8518:	0000009f 	.inst	0x0000009f ; undefined
	...
    8528:	00015c00 	.inst	0x00015c00 ; undefined
    852c:	00000000 	.inst	0x00000000 ; undefined
    8530:	00022000 	.inst	0x00022000 ; undefined
    8534:	00000000 	.inst	0x00000000 ; undefined
    8538:	66000100 	.inst	0x66000100 ; undefined
    853c:	00000220 	.inst	0x00000220 ; undefined
    8540:	00000000 	.inst	0x00000000 ; undefined
    8544:	0000022b 	.inst	0x0000022b ; undefined
    8548:	00000000 	.inst	0x00000000 ; undefined
    854c:	34510001 	cbz	w1, aa54c <_stack_size+0xa954c>
    8550:	00000002 	.inst	0x00000002 ; undefined
    8554:	38000000 	sturb	w0, [x0]
    8558:	00000002 	.inst	0x00000002 ; undefined
    855c:	01000000 	.inst	0x01000000 ; undefined
    8560:	00006600 	.inst	0x00006600 ; undefined
	...
    8570:	01280000 	.inst	0x01280000 ; undefined
    8574:	00000000 	.inst	0x00000000 ; undefined
    8578:	01440000 	.inst	0x01440000 ; undefined
    857c:	00000000 	.inst	0x00000000 ; undefined
    8580:	00010000 	.inst	0x00010000 ; undefined
    8584:	00014863 	.inst	0x00014863 ; undefined
    8588:	00000000 	.inst	0x00000000 ; undefined
    858c:	00022800 	.inst	0x00022800 ; undefined
    8590:	00000000 	.inst	0x00000000 ; undefined
    8594:	63000100 	.inst	0x63000100 ; undefined
    8598:	0000022c 	.inst	0x0000022c ; undefined
    859c:	00000000 	.inst	0x00000000 ; undefined
    85a0:	00000238 	.inst	0x00000238 ; undefined
    85a4:	00000000 	.inst	0x00000000 ; undefined
    85a8:	00630001 	.inst	0x00630001 ; undefined
	...
    85b8:	38000000 	sturb	w0, [x0]
    85bc:	00000002 	.inst	0x00000002 ; undefined
    85c0:	58000000 	ldr	x0, 85c0 <_stack_size+0x75c0>
    85c4:	00000002 	.inst	0x00000002 ; undefined
    85c8:	01000000 	.inst	0x01000000 ; undefined
    85cc:	02585000 	.inst	0x02585000 ; undefined
    85d0:	00000000 	.inst	0x00000000 ; undefined
    85d4:	026c0000 	.inst	0x026c0000 ; undefined
    85d8:	00000000 	.inst	0x00000000 ; undefined
    85dc:	00040000 	.inst	0x00040000 ; undefined
    85e0:	9f5001f3 	.inst	0x9f5001f3 ; undefined
    85e4:	0000026c 	.inst	0x0000026c ; undefined
    85e8:	00000000 	.inst	0x00000000 ; undefined
    85ec:	00000288 	.inst	0x00000288 ; undefined
    85f0:	00000000 	.inst	0x00000000 ; undefined
    85f4:	88500001 	ldxr	w1, [x0]
    85f8:	00000002 	.inst	0x00000002 ; undefined
    85fc:	50000000 	adr	x0, 85fe <_stack_size+0x75fe>
    8600:	00000003 	.inst	0x00000003 ; undefined
    8604:	01000000 	.inst	0x01000000 ; undefined
    8608:	03506600 	.inst	0x03506600 ; undefined
    860c:	00000000 	.inst	0x00000000 ; undefined
    8610:	03600000 	.inst	0x03600000 ; undefined
    8614:	00000000 	.inst	0x00000000 ; undefined
    8618:	00040000 	.inst	0x00040000 ; undefined
    861c:	9f5001f3 	.inst	0x9f5001f3 ; undefined
    8620:	00000360 	.inst	0x00000360 ; undefined
    8624:	00000000 	.inst	0x00000000 ; undefined
    8628:	0000036c 	.inst	0x0000036c ; undefined
    862c:	00000000 	.inst	0x00000000 ; undefined
    8630:	00500001 	.inst	0x00500001 ; undefined
	...
    8640:	44000000 	.inst	0x44000000 ; undefined
    8644:	00000002 	.inst	0x00000002 ; undefined
    8648:	58000000 	ldr	x0, 8648 <_stack_size+0x7648>
    864c:	00000002 	.inst	0x00000002 ; undefined
    8650:	01000000 	.inst	0x01000000 ; undefined
    8654:	02585000 	.inst	0x02585000 ; undefined
    8658:	00000000 	.inst	0x00000000 ; undefined
    865c:	026c0000 	.inst	0x026c0000 ; undefined
    8660:	00000000 	.inst	0x00000000 ; undefined
    8664:	00040000 	.inst	0x00040000 ; undefined
    8668:	9f5001f3 	.inst	0x9f5001f3 ; undefined
    866c:	0000026c 	.inst	0x0000026c ; undefined
    8670:	00000000 	.inst	0x00000000 ; undefined
    8674:	00000288 	.inst	0x00000288 ; undefined
    8678:	00000000 	.inst	0x00000000 ; undefined
    867c:	88500001 	ldxr	w1, [x0]
    8680:	00000002 	.inst	0x00000002 ; undefined
    8684:	50000000 	adr	x0, 8686 <_stack_size+0x7686>
    8688:	00000003 	.inst	0x00000003 ; undefined
    868c:	01000000 	.inst	0x01000000 ; undefined
    8690:	03506600 	.inst	0x03506600 ; undefined
    8694:	00000000 	.inst	0x00000000 ; undefined
    8698:	03600000 	.inst	0x03600000 ; undefined
    869c:	00000000 	.inst	0x00000000 ; undefined
    86a0:	00040000 	.inst	0x00040000 ; undefined
    86a4:	9f5001f3 	.inst	0x9f5001f3 ; undefined
    86a8:	00000360 	.inst	0x00000360 ; undefined
    86ac:	00000000 	.inst	0x00000000 ; undefined
    86b0:	0000036c 	.inst	0x0000036c ; undefined
    86b4:	00000000 	.inst	0x00000000 ; undefined
    86b8:	00500001 	.inst	0x00500001 ; undefined
	...
    86c8:	44000000 	.inst	0x44000000 ; undefined
    86cc:	00000002 	.inst	0x00000002 ; undefined
    86d0:	80000000 	.inst	0x80000000 ; undefined
    86d4:	00000002 	.inst	0x00000002 ; undefined
    86d8:	02000000 	.inst	0x02000000 ; undefined
    86dc:	809f3100 	.inst	0x809f3100 ; undefined
    86e0:	00000002 	.inst	0x00000002 ; undefined
    86e4:	54000000 	b.eq	86e4 <_stack_size+0x76e4>
    86e8:	00000003 	.inst	0x00000003 ; undefined
    86ec:	01000000 	.inst	0x01000000 ; undefined
    86f0:	03546800 	.inst	0x03546800 ; undefined
    86f4:	00000000 	.inst	0x00000000 ; undefined
    86f8:	035f0000 	.inst	0x035f0000 ; undefined
    86fc:	00000000 	.inst	0x00000000 ; undefined
    8700:	00010000 	.inst	0x00010000 ; undefined
    8704:	00036050 	.inst	0x00036050 ; undefined
    8708:	00000000 	.inst	0x00000000 ; undefined
    870c:	00036c00 	.inst	0x00036c00 ; undefined
    8710:	00000000 	.inst	0x00000000 ; undefined
    8714:	30000200 	adr	x0, 8755 <_stack_size+0x7755>
    8718:	0000009f 	.inst	0x0000009f ; undefined
	...
    8728:	00028000 	.inst	0x00028000 ; undefined
    872c:	00000000 	.inst	0x00000000 ; undefined
    8730:	00035400 	.inst	0x00035400 ; undefined
    8734:	00000000 	.inst	0x00000000 ; undefined
    8738:	67000100 	.inst	0x67000100 ; undefined
    873c:	00000354 	.inst	0x00000354 ; undefined
    8740:	00000000 	.inst	0x00000000 ; undefined
    8744:	0000035f 	.inst	0x0000035f ; undefined
    8748:	00000000 	.inst	0x00000000 ; undefined
    874c:	68510001 	.inst	0x68510001 ; undefined
    8750:	00000003 	.inst	0x00000003 ; undefined
    8754:	6c000000 	stnp	d0, d0, [x0]
    8758:	00000003 	.inst	0x00000003 ; undefined
    875c:	01000000 	.inst	0x01000000 ; undefined
    8760:	00006700 	.inst	0x00006700 ; undefined
	...
    8770:	02440000 	.inst	0x02440000 ; undefined
    8774:	00000000 	.inst	0x00000000 ; undefined
    8778:	02680000 	.inst	0x02680000 ; undefined
    877c:	00000000 	.inst	0x00000000 ; undefined
    8780:	00010000 	.inst	0x00010000 ; undefined
    8784:	00026c63 	.inst	0x00026c63 ; undefined
    8788:	00000000 	.inst	0x00000000 ; undefined
    878c:	00035c00 	.inst	0x00035c00 ; undefined
    8790:	00000000 	.inst	0x00000000 ; undefined
    8794:	63000100 	.inst	0x63000100 ; undefined
    8798:	00000360 	.inst	0x00000360 ; undefined
    879c:	00000000 	.inst	0x00000000 ; undefined
    87a0:	0000036c 	.inst	0x0000036c ; undefined
    87a4:	00000000 	.inst	0x00000000 ; undefined
    87a8:	00630001 	.inst	0x00630001 ; undefined
	...
    87c0:	34000000 	cbz	w0, 87c0 <_stack_size+0x77c0>
    87c4:	00000000 	.inst	0x00000000 ; undefined
    87c8:	01000000 	.inst	0x01000000 ; undefined
    87cc:	00345000 	.inst	0x00345000 ; NYI
    87d0:	00000000 	.inst	0x00000000 ; undefined
    87d4:	00880000 	.inst	0x00880000 ; undefined
    87d8:	00000000 	.inst	0x00000000 ; undefined
    87dc:	00010000 	.inst	0x00010000 ; undefined
    87e0:	00008865 	.inst	0x00008865 ; undefined
    87e4:	00000000 	.inst	0x00000000 ; undefined
    87e8:	00008f00 	.inst	0x00008f00 ; undefined
    87ec:	00000000 	.inst	0x00000000 ; undefined
    87f0:	50000100 	adr	x0, 8812 <_stack_size+0x7812>
    87f4:	0000008f 	.inst	0x0000008f ; undefined
    87f8:	00000000 	.inst	0x00000000 ; undefined
    87fc:	000000a0 	.inst	0x000000a0 ; undefined
    8800:	00000000 	.inst	0x00000000 ; undefined
    8804:	ac650001 	ldnp	q1, q0, [x0,#-864]
    8808:	00000000 	.inst	0x00000000 ; undefined
    880c:	bc000000 	stur	s0, [x0]
    8810:	00000000 	.inst	0x00000000 ; undefined
    8814:	01000000 	.inst	0x01000000 ; undefined
    8818:	00bc5000 	.inst	0x00bc5000 ; undefined
    881c:	00000000 	.inst	0x00000000 ; undefined
    8820:	00cc0000 	.inst	0x00cc0000 ; undefined
    8824:	00000000 	.inst	0x00000000 ; undefined
    8828:	00010000 	.inst	0x00010000 ; undefined
    882c:	0000cc65 	.inst	0x0000cc65 ; undefined
    8830:	00000000 	.inst	0x00000000 ; undefined
    8834:	0000d400 	.inst	0x0000d400 ; undefined
    8838:	00000000 	.inst	0x00000000 ; undefined
    883c:	85000300 	.inst	0x85000300 ; undefined
    8840:	00d49f7f 	.inst	0x00d49f7f ; undefined
    8844:	00000000 	.inst	0x00000000 ; undefined
    8848:	00e40000 	.inst	0x00e40000 ; undefined
    884c:	00000000 	.inst	0x00000000 ; undefined
    8850:	00010000 	.inst	0x00010000 ; undefined
    8854:	0000f065 	.inst	0x0000f065 ; undefined
    8858:	00000000 	.inst	0x00000000 ; undefined
    885c:	0000fc00 	.inst	0x0000fc00 ; undefined
    8860:	00000000 	.inst	0x00000000 ; undefined
    8864:	65000100 	.inst	0x65000100 ; undefined
	...
    8880:	00000034 	.inst	0x00000034 ; undefined
    8884:	00000000 	.inst	0x00000000 ; undefined
    8888:	34510001 	cbz	w1, aa888 <_stack_size+0xa9888>
    888c:	00000000 	.inst	0x00000000 ; undefined
    8890:	08000000 	stxrb	w0, w0, [x0]
    8894:	00000001 	.inst	0x00000001 ; undefined
    8898:	04000000 	.inst	0x04000000 ; undefined
    889c:	5101f300 	sub	w0, w24, #0x7c
    88a0:	0000009f 	.inst	0x0000009f ; undefined
	...
    88b8:	00003400 	.inst	0x00003400 ; undefined
    88bc:	00000000 	.inst	0x00000000 ; undefined
    88c0:	52000100 	eor	w0, w8, #0x1
    88c4:	00000034 	.inst	0x00000034 ; undefined
    88c8:	00000000 	.inst	0x00000000 ; undefined
    88cc:	00000108 	.inst	0x00000108 ; undefined
    88d0:	00000000 	.inst	0x00000000 ; undefined
    88d4:	01f30004 	.inst	0x01f30004 ; undefined
    88d8:	00009f52 	.inst	0x00009f52 ; undefined
	...
    88f0:	00340000 	.inst	0x00340000 ; NYI
    88f4:	00000000 	.inst	0x00000000 ; undefined
    88f8:	00030000 	.inst	0x00030000 ; undefined
    88fc:	509fff08 	adr	x8, fffffffffff488de <SMC_ID_HW_RSA+0xffffffff7bf389d7>
    8900:	00000000 	.inst	0x00000000 ; undefined
    8904:	68000000 	.inst	0x68000000 ; undefined
    8908:	00000000 	.inst	0x00000000 ; undefined
    890c:	01000000 	.inst	0x01000000 ; undefined
    8910:	00f05000 	.inst	0x00f05000 ; undefined
    8914:	00000000 	.inst	0x00000000 ; undefined
    8918:	00f40000 	.inst	0x00f40000 ; undefined
    891c:	00000000 	.inst	0x00000000 ; undefined
    8920:	00010000 	.inst	0x00010000 ; undefined
    8924:	00000050 	.inst	0x00000050 ; undefined
	...
    893c:	00003400 	.inst	0x00003400 ; undefined
    8940:	00000000 	.inst	0x00000000 ; undefined
    8944:	30000200 	adr	x0, 8985 <_stack_size+0x7985>
    8948:	0000489f 	.inst	0x0000489f ; undefined
    894c:	00000000 	.inst	0x00000000 ; undefined
    8950:	00005800 	.inst	0x00005800 ; undefined
    8954:	00000000 	.inst	0x00000000 ; undefined
    8958:	66000100 	.inst	0x66000100 ; undefined
    895c:	00000058 	.inst	0x00000058 ; undefined
    8960:	00000000 	.inst	0x00000000 ; undefined
    8964:	00000068 	.inst	0x00000068 ; undefined
    8968:	00000000 	.inst	0x00000000 ; undefined
    896c:	c8500001 	ldxr	x1, [x0]
    8970:	00000000 	.inst	0x00000000 ; undefined
    8974:	d8000000 	prfm	pldl1keep, 8974 <_stack_size+0x7974>
    8978:	00000000 	.inst	0x00000000 ; undefined
    897c:	01000000 	.inst	0x01000000 ; undefined
    8980:	00f05000 	.inst	0x00f05000 ; undefined
    8984:	00000000 	.inst	0x00000000 ; undefined
    8988:	00fc0000 	.inst	0x00fc0000 ; undefined
    898c:	00000000 	.inst	0x00000000 ; undefined
    8990:	00010000 	.inst	0x00010000 ; undefined
    8994:	00000066 	.inst	0x00000066 ; undefined
	...
    89a4:	00000c00 	.inst	0x00000c00 ; undefined
    89a8:	00000000 	.inst	0x00000000 ; undefined
    89ac:	00003400 	.inst	0x00003400 ; undefined
    89b0:	00000000 	.inst	0x00000000 ; undefined
    89b4:	51000100 	sub	w0, w8, #0x0
    89b8:	00000034 	.inst	0x00000034 ; undefined
    89bc:	00000000 	.inst	0x00000000 ; undefined
    89c0:	0000005c 	.inst	0x0000005c ; undefined
    89c4:	00000000 	.inst	0x00000000 ; undefined
    89c8:	68630001 	.inst	0x68630001 ; undefined
    89cc:	00000000 	.inst	0x00000000 ; undefined
    89d0:	a8000000 	stnp	x0, x0, [x0]
    89d4:	00000000 	.inst	0x00000000 ; undefined
    89d8:	01000000 	.inst	0x01000000 ; undefined
    89dc:	00ac6300 	.inst	0x00ac6300 ; undefined
    89e0:	00000000 	.inst	0x00000000 ; undefined
    89e4:	00d00000 	.inst	0x00d00000 ; undefined
    89e8:	00000000 	.inst	0x00000000 ; undefined
    89ec:	00010000 	.inst	0x00010000 ; undefined
    89f0:	0000f063 	.inst	0x0000f063 ; undefined
    89f4:	00000000 	.inst	0x00000000 ; undefined
    89f8:	00010400 	.inst	0x00010400 ; undefined
    89fc:	00000000 	.inst	0x00000000 ; undefined
    8a00:	63000100 	.inst	0x63000100 ; undefined
	...
    8a14:	0000000c 	.inst	0x0000000c ; undefined
    8a18:	00000000 	.inst	0x00000000 ; undefined
    8a1c:	00000034 	.inst	0x00000034 ; undefined
    8a20:	00000000 	.inst	0x00000000 ; undefined
    8a24:	34520001 	cbz	w1, aca24 <_stack_size+0xaba24>
    8a28:	00000000 	.inst	0x00000000 ; undefined
    8a2c:	a8000000 	stnp	x0, x0, [x0]
    8a30:	00000000 	.inst	0x00000000 ; undefined
    8a34:	01000000 	.inst	0x01000000 ; undefined
    8a38:	00ac6400 	.inst	0x00ac6400 ; undefined
    8a3c:	00000000 	.inst	0x00000000 ; undefined
    8a40:	00ec0000 	.inst	0x00ec0000 ; undefined
    8a44:	00000000 	.inst	0x00000000 ; undefined
    8a48:	00010000 	.inst	0x00010000 ; undefined
    8a4c:	0000f064 	.inst	0x0000f064 ; undefined
    8a50:	00000000 	.inst	0x00000000 ; undefined
    8a54:	00010400 	.inst	0x00010400 ; undefined
    8a58:	00000000 	.inst	0x00000000 ; undefined
    8a5c:	64000100 	.inst	0x64000100 ; undefined
	...
    8a70:	00000034 	.inst	0x00000034 ; undefined
    8a74:	00000000 	.inst	0x00000000 ; undefined
    8a78:	00000064 	.inst	0x00000064 ; undefined
    8a7c:	00000000 	.inst	0x00000000 ; undefined
    8a80:	64650001 	.inst	0x64650001 ; undefined
    8a84:	00000000 	.inst	0x00000000 ; undefined
    8a88:	68000000 	.inst	0x68000000 ; undefined
    8a8c:	00000000 	.inst	0x00000000 ; undefined
    8a90:	03000000 	.inst	0x03000000 ; undefined
    8a94:	9f7f8500 	.inst	0x9f7f8500 ; undefined
    8a98:	00000068 	.inst	0x00000068 ; undefined
    8a9c:	00000000 	.inst	0x00000000 ; undefined
    8aa0:	00000088 	.inst	0x00000088 ; undefined
    8aa4:	00000000 	.inst	0x00000000 ; undefined
    8aa8:	88650001 	ldxp	w1, w0, [x0]
    8aac:	00000000 	.inst	0x00000000 ; undefined
    8ab0:	8f000000 	.inst	0x8f000000 ; undefined
    8ab4:	00000000 	.inst	0x00000000 ; undefined
    8ab8:	01000000 	.inst	0x01000000 ; undefined
    8abc:	008f5000 	.inst	0x008f5000 ; undefined
    8ac0:	00000000 	.inst	0x00000000 ; undefined
    8ac4:	00a00000 	.inst	0x00a00000 ; undefined
    8ac8:	00000000 	.inst	0x00000000 ; undefined
    8acc:	00010000 	.inst	0x00010000 ; undefined
    8ad0:	0000ac65 	.inst	0x0000ac65 ; undefined
    8ad4:	00000000 	.inst	0x00000000 ; undefined
    8ad8:	0000bc00 	.inst	0x0000bc00 ; undefined
    8adc:	00000000 	.inst	0x00000000 ; undefined
    8ae0:	50000100 	adr	x0, 8b02 <_stack_size+0x7b02>
    8ae4:	000000bc 	.inst	0x000000bc ; undefined
    8ae8:	00000000 	.inst	0x00000000 ; undefined
    8aec:	000000cc 	.inst	0x000000cc ; undefined
    8af0:	00000000 	.inst	0x00000000 ; undefined
    8af4:	cc650001 	.inst	0xcc650001 ; undefined
    8af8:	00000000 	.inst	0x00000000 ; undefined
    8afc:	d8000000 	prfm	pldl1keep, 8afc <_stack_size+0x7afc>
    8b00:	00000000 	.inst	0x00000000 ; undefined
    8b04:	03000000 	.inst	0x03000000 ; undefined
    8b08:	9f7f8500 	.inst	0x9f7f8500 ; undefined
    8b0c:	000000f0 	.inst	0x000000f0 ; undefined
    8b10:	00000000 	.inst	0x00000000 ; undefined
    8b14:	000000fc 	.inst	0x000000fc ; undefined
    8b18:	00000000 	.inst	0x00000000 ; undefined
    8b1c:	00650001 	.inst	0x00650001 ; undefined
	...
    8b2c:	ac000000 	stnp	q0, q0, [x0]
    8b30:	00000000 	.inst	0x00000000 ; undefined
    8b34:	d4000000 	.inst	0xd4000000 ; undefined
    8b38:	00000000 	.inst	0x00000000 ; undefined
    8b3c:	01000000 	.inst	0x01000000 ; undefined
    8b40:	00006400 	.inst	0x00006400 ; undefined
	...
    8b50:	00ac0000 	.inst	0x00ac0000 ; undefined
    8b54:	00000000 	.inst	0x00000000 ; undefined
    8b58:	00bf0000 	.inst	0x00bf0000 ; undefined
    8b5c:	00000000 	.inst	0x00000000 ; undefined
    8b60:	00010000 	.inst	0x00010000 ; undefined
    8b64:	0000bf50 	.inst	0x0000bf50 ; undefined
    8b68:	00000000 	.inst	0x00000000 ; undefined
    8b6c:	0000cc00 	.inst	0x0000cc00 ; undefined
    8b70:	00000000 	.inst	0x00000000 ; undefined
    8b74:	65000100 	.inst	0x65000100 ; undefined
    8b78:	000000cc 	.inst	0x000000cc ; undefined
    8b7c:	00000000 	.inst	0x00000000 ; undefined
    8b80:	000000d8 	.inst	0x000000d8 ; undefined
    8b84:	00000000 	.inst	0x00000000 ; undefined
    8b88:	7f850003 	.inst	0x7f850003 ; undefined
    8b8c:	0000009f 	.inst	0x0000009f ; undefined
	...
    8b9c:	00010800 	.inst	0x00010800 ; undefined
    8ba0:	00000000 	.inst	0x00000000 ; undefined
    8ba4:	00016800 	.inst	0x00016800 ; undefined
    8ba8:	00000000 	.inst	0x00000000 ; undefined
    8bac:	08000300 	stxrb	w0, w0, [x24]
    8bb0:	017c9fff 	.inst	0x017c9fff ; undefined
    8bb4:	00000000 	.inst	0x00000000 ; undefined
    8bb8:	01ac0000 	.inst	0x01ac0000 ; undefined
    8bbc:	00000000 	.inst	0x00000000 ; undefined
    8bc0:	00030000 	.inst	0x00030000 ; undefined
    8bc4:	009fff08 	.inst	0x009fff08 ; undefined
	...
    8bd4:	44000000 	.inst	0x44000000 ; undefined
    8bd8:	00000001 	.inst	0x00000001 ; undefined
    8bdc:	50000000 	adr	x0, 8bde <_stack_size+0x7bde>
    8be0:	00000001 	.inst	0x00000001 ; undefined
    8be4:	01000000 	.inst	0x01000000 ; undefined
    8be8:	01506400 	.inst	0x01506400 ; undefined
    8bec:	00000000 	.inst	0x00000000 ; undefined
    8bf0:	015c0000 	.inst	0x015c0000 ; undefined
    8bf4:	00000000 	.inst	0x00000000 ; undefined
    8bf8:	00100000 	.inst	0x00100000 ; undefined
    8bfc:	f70c000a 	.inst	0xf70c000a ; undefined
    8c00:	f7007029 	.inst	0xf7007029 ; undefined
    8c04:	00f71b29 	.inst	0x00f71b29 ; undefined
    8c08:	9f220084 	.inst	0x9f220084 ; undefined
    8c0c:	0000015c 	.inst	0x0000015c ; undefined
    8c10:	00000000 	.inst	0x00000000 ; undefined
    8c14:	00000160 	.inst	0x00000160 ; undefined
    8c18:	00000000 	.inst	0x00000000 ; undefined
    8c1c:	000a0010 	.inst	0x000a0010 ; undefined
    8c20:	7129f70c 	subs	w12, w24, #0xa7d
    8c24:	1b29f700 	.inst	0x1b29f700 ; undefined
    8c28:	008400f7 	.inst	0x008400f7 ; undefined
    8c2c:	01609f22 	.inst	0x01609f22 ; undefined
    8c30:	00000000 	.inst	0x00000000 ; undefined
    8c34:	01630000 	.inst	0x01630000 ; undefined
    8c38:	00000000 	.inst	0x00000000 ; undefined
    8c3c:	00010000 	.inst	0x00010000 ; undefined
    8c40:	00000050 	.inst	0x00000050 ; undefined
	...
    8c50:	00014400 	.inst	0x00014400 ; undefined
    8c54:	00000000 	.inst	0x00000000 ; undefined
    8c58:	00014800 	.inst	0x00014800 ; undefined
    8c5c:	00000000 	.inst	0x00000000 ; undefined
    8c60:	30000200 	adr	x0, 8ca1 <_stack_size+0x7ca1>
    8c64:	0001489f 	.inst	0x0001489f ; undefined
    8c68:	00000000 	.inst	0x00000000 ; undefined
    8c6c:	00016800 	.inst	0x00016800 ; undefined
    8c70:	00000000 	.inst	0x00000000 ; undefined
    8c74:	0a000400 	and	w0, w0, w0, lsl #1
    8c78:	009f0c00 	.inst	0x009f0c00 ; undefined
	...
    8c88:	44000000 	.inst	0x44000000 ; undefined
    8c8c:	00000001 	.inst	0x00000001 ; undefined
    8c90:	64000000 	.inst	0x64000000 ; undefined
    8c94:	00000001 	.inst	0x00000001 ; undefined
    8c98:	03000000 	.inst	0x03000000 ; undefined
    8c9c:	9fff0800 	.inst	0x9fff0800 ; undefined
    8ca0:	00000164 	.inst	0x00000164 ; undefined
    8ca4:	00000000 	.inst	0x00000000 ; undefined
    8ca8:	00000168 	.inst	0x00000168 ; undefined
    8cac:	00000000 	.inst	0x00000000 ; undefined
    8cb0:	7c500001 	ldur	h1, [x0,#-256]
    8cb4:	00000001 	.inst	0x00000001 ; undefined
    8cb8:	84000000 	.inst	0x84000000 ; undefined
    8cbc:	00000001 	.inst	0x00000001 ; undefined
    8cc0:	01000000 	.inst	0x01000000 ; undefined
    8cc4:	00005000 	.inst	0x00005000 ; undefined
	...
    8cd4:	01ac0000 	.inst	0x01ac0000 ; undefined
    8cd8:	00000000 	.inst	0x00000000 ; undefined
    8cdc:	01d00000 	.inst	0x01d00000 ; undefined
    8ce0:	00000000 	.inst	0x00000000 ; undefined
    8ce4:	00010000 	.inst	0x00010000 ; undefined
    8ce8:	0001d050 	.inst	0x0001d050 ; undefined
    8cec:	00000000 	.inst	0x00000000 ; undefined
    8cf0:	00020400 	.inst	0x00020400 ; undefined
    8cf4:	00000000 	.inst	0x00000000 ; undefined
    8cf8:	65000100 	.inst	0x65000100 ; undefined
    8cfc:	00000204 	.inst	0x00000204 ; undefined
    8d00:	00000000 	.inst	0x00000000 ; undefined
    8d04:	0000020c 	.inst	0x0000020c ; undefined
    8d08:	00000000 	.inst	0x00000000 ; undefined
    8d0c:	01f30004 	.inst	0x01f30004 ; undefined
    8d10:	00009f50 	.inst	0x00009f50 ; undefined
	...
    8d20:	01ac0000 	.inst	0x01ac0000 ; undefined
    8d24:	00000000 	.inst	0x00000000 ; undefined
    8d28:	01f40000 	.inst	0x01f40000 ; undefined
    8d2c:	00000000 	.inst	0x00000000 ; undefined
    8d30:	00030000 	.inst	0x00030000 ; undefined
    8d34:	009fff08 	.inst	0x009fff08 ; undefined
	...
    8d44:	cc000000 	.inst	0xcc000000 ; undefined
    8d48:	00000001 	.inst	0x00000001 ; undefined
    8d4c:	d0000000 	adrp	x0, a000 <_stack_size+0x9000>
    8d50:	00000001 	.inst	0x00000001 ; undefined
    8d54:	01000000 	.inst	0x01000000 ; undefined
    8d58:	01d05000 	.inst	0x01d05000 ; undefined
    8d5c:	00000000 	.inst	0x00000000 ; undefined
    8d60:	02040000 	.inst	0x02040000 ; undefined
    8d64:	00000000 	.inst	0x00000000 ; undefined
    8d68:	00010000 	.inst	0x00010000 ; undefined
    8d6c:	00020465 	.inst	0x00020465 ; undefined
    8d70:	00000000 	.inst	0x00000000 ; undefined
    8d74:	00020c00 	.inst	0x00020c00 ; undefined
    8d78:	00000000 	.inst	0x00000000 ; undefined
    8d7c:	f3000400 	.inst	0xf3000400 ; undefined
    8d80:	009f5001 	.inst	0x009f5001 ; undefined
	...
    8d90:	cc000000 	.inst	0xcc000000 ; undefined
    8d94:	00000001 	.inst	0x00000001 ; undefined
    8d98:	08000000 	stxrb	w0, w0, [x0]
    8d9c:	00000002 	.inst	0x00000002 ; undefined
    8da0:	01000000 	.inst	0x01000000 ; undefined
    8da4:	00006300 	.inst	0x00006300 ; undefined
	...
    8db4:	01d40000 	.inst	0x01d40000 ; undefined
    8db8:	00000000 	.inst	0x00000000 ; undefined
    8dbc:	02080000 	.inst	0x02080000 ; undefined
    8dc0:	00000000 	.inst	0x00000000 ; undefined
    8dc4:	00010000 	.inst	0x00010000 ; undefined
    8dc8:	00000064 	.inst	0x00000064 ; undefined
	...
    8dd8:	00000800 	.inst	0x00000800 ; undefined
    8ddc:	00000000 	.inst	0x00000000 ; undefined
    8de0:	00002c00 	.inst	0x00002c00 ; undefined
    8de4:	00000000 	.inst	0x00000000 ; undefined
    8de8:	52000100 	eor	w0, w8, #0x1
	...
    8dfc:	00000018 	.inst	0x00000018 ; undefined
    8e00:	00000000 	.inst	0x00000000 ; undefined
    8e04:	00000020 	.inst	0x00000020 ; undefined
    8e08:	00000000 	.inst	0x00000000 ; undefined
    8e0c:	20630001 	.inst	0x20630001 ; undefined
    8e10:	00000000 	.inst	0x00000000 ; undefined
    8e14:	24000000 	.inst	0x24000000 ; undefined
    8e18:	00000000 	.inst	0x00000000 ; undefined
    8e1c:	02000000 	.inst	0x02000000 ; undefined
    8e20:	24087200 	.inst	0x24087200 ; undefined
    8e24:	00000000 	.inst	0x00000000 ; undefined
    8e28:	44000000 	.inst	0x44000000 ; undefined
    8e2c:	00000000 	.inst	0x00000000 ; undefined
    8e30:	01000000 	.inst	0x01000000 ; undefined
    8e34:	00006300 	.inst	0x00006300 ; undefined
	...
    8e44:	00180000 	.inst	0x00180000 ; undefined
    8e48:	00000000 	.inst	0x00000000 ; undefined
    8e4c:	00330000 	.inst	0x00330000 ; NYI
    8e50:	00000000 	.inst	0x00000000 ; undefined
    8e54:	00010000 	.inst	0x00010000 ; undefined
    8e58:	00000051 	.inst	0x00000051 ; undefined
	...
    8e68:	00004800 	.inst	0x00004800 ; undefined
    8e6c:	00000000 	.inst	0x00000000 ; undefined
    8e70:	00006c00 	.inst	0x00006c00 ; undefined
    8e74:	00000000 	.inst	0x00000000 ; undefined
    8e78:	50000100 	adr	x0, 8e9a <_stack_size+0x7e9a>
    8e7c:	0000006c 	.inst	0x0000006c ; undefined
    8e80:	00000000 	.inst	0x00000000 ; undefined
    8e84:	00000074 	.inst	0x00000074 ; undefined
    8e88:	00000000 	.inst	0x00000000 ; undefined
    8e8c:	01f30004 	.inst	0x01f30004 ; undefined
    8e90:	00749f50 	.inst	0x00749f50 ; undefined
    8e94:	00000000 	.inst	0x00000000 ; undefined
    8e98:	007c0000 	.inst	0x007c0000 ; undefined
    8e9c:	00000000 	.inst	0x00000000 ; undefined
    8ea0:	00010000 	.inst	0x00010000 ; undefined
    8ea4:	00007c50 	.inst	0x00007c50 ; undefined
    8ea8:	00000000 	.inst	0x00000000 ; undefined
    8eac:	00009800 	.inst	0x00009800 ; undefined
    8eb0:	00000000 	.inst	0x00000000 ; undefined
    8eb4:	f3000400 	.inst	0xf3000400 ; undefined
    8eb8:	009f5001 	.inst	0x009f5001 ; undefined
	...
    8ec8:	50000000 	adr	x0, 8eca <_stack_size+0x7eca>
    8ecc:	00000000 	.inst	0x00000000 ; undefined
    8ed0:	64000000 	.inst	0x64000000 ; undefined
    8ed4:	00000000 	.inst	0x00000000 ; undefined
    8ed8:	01000000 	.inst	0x01000000 ; undefined
    8edc:	00005100 	.inst	0x00005100 ; undefined
	...
    8eec:	00640000 	.inst	0x00640000 ; undefined
    8ef0:	00000000 	.inst	0x00000000 ; undefined
    8ef4:	00700000 	.inst	0x00700000 ; undefined
    8ef8:	00000000 	.inst	0x00000000 ; undefined
    8efc:	00010000 	.inst	0x00010000 ; undefined
    8f00:	00007063 	.inst	0x00007063 ; undefined
    8f04:	00000000 	.inst	0x00000000 ; undefined
    8f08:	00007400 	.inst	0x00007400 ; undefined
    8f0c:	00000000 	.inst	0x00000000 ; undefined
    8f10:	f3000300 	.inst	0xf3000300 ; undefined
    8f14:	00745001 	.inst	0x00745001 ; undefined
    8f18:	00000000 	.inst	0x00000000 ; undefined
    8f1c:	00940000 	.inst	0x00940000 ; undefined
    8f20:	00000000 	.inst	0x00000000 ; undefined
    8f24:	00010000 	.inst	0x00010000 ; undefined
    8f28:	00000063 	.inst	0x00000063 ; undefined
	...
    8f38:	00006400 	.inst	0x00006400 ; undefined
    8f3c:	00000000 	.inst	0x00000000 ; undefined
    8f40:	00007f00 	.inst	0x00007f00 ; undefined
    8f44:	00000000 	.inst	0x00000000 ; undefined
    8f48:	51000100 	sub	w0, w8, #0x0
	...
    8f64:	00000014 	.inst	0x00000014 ; undefined
    8f68:	00000000 	.inst	0x00000000 ; undefined
    8f6c:	14500001 	b	1408f70 <MPIDR_EL1_MT+0x408f70>
    8f70:	00000000 	.inst	0x00000000 ; undefined
    8f74:	18000000 	ldr	w0, 8f74 <_stack_size+0x7f74>
    8f78:	00000000 	.inst	0x00000000 ; undefined
    8f7c:	04000000 	.inst	0x04000000 ; undefined
    8f80:	5001f300 	adr	x0, cde2 <_stack_size+0xbde2>
    8f84:	0000009f 	.inst	0x0000009f ; undefined
	...
    8f9c:	00001c00 	.inst	0x00001c00 ; undefined
    8fa0:	00000000 	.inst	0x00000000 ; undefined
    8fa4:	50000100 	adr	x0, 8fc6 <_stack_size+0x7fc6>
    8fa8:	0000001c 	.inst	0x0000001c ; undefined
    8fac:	00000000 	.inst	0x00000000 ; undefined
    8fb0:	00000034 	.inst	0x00000034 ; undefined
    8fb4:	00000000 	.inst	0x00000000 ; undefined
    8fb8:	7f700003 	.inst	0x7f700003 ; undefined
    8fbc:	0000349f 	.inst	0x0000349f ; undefined
    8fc0:	00000000 	.inst	0x00000000 ; undefined
    8fc4:	00004800 	.inst	0x00004800 ; undefined
    8fc8:	00000000 	.inst	0x00000000 ; undefined
    8fcc:	f3000400 	.inst	0xf3000400 ; undefined
    8fd0:	009f5001 	.inst	0x009f5001 ; undefined
	...
    8fe0:	48000000 	stxrh	w0, w0, [x0]
    8fe4:	00000000 	.inst	0x00000000 ; undefined
    8fe8:	54000000 	b.eq	8fe8 <_stack_size+0x7fe8>
    8fec:	00000000 	.inst	0x00000000 ; undefined
    8ff0:	01000000 	.inst	0x01000000 ; undefined
    8ff4:	00545000 	.inst	0x00545000 ; undefined
    8ff8:	00000000 	.inst	0x00000000 ; undefined
    8ffc:	00580000 	.inst	0x00580000 ; undefined
    9000:	00000000 	.inst	0x00000000 ; undefined
    9004:	00040000 	.inst	0x00040000 ; undefined
    9008:	9f5001f3 	.inst	0x9f5001f3 ; undefined
    900c:	00000058 	.inst	0x00000058 ; undefined
    9010:	00000000 	.inst	0x00000000 ; undefined
    9014:	0000005b 	.inst	0x0000005b ; undefined
    9018:	00000000 	.inst	0x00000000 ; undefined
    901c:	5b500001 	.inst	0x5b500001 ; undefined
    9020:	00000000 	.inst	0x00000000 ; undefined
    9024:	5c000000 	ldr	d0, 9024 <_stack_size+0x8024>
    9028:	00000000 	.inst	0x00000000 ; undefined
    902c:	04000000 	.inst	0x04000000 ; undefined
    9030:	5001f300 	adr	x0, ce92 <_stack_size+0xbe92>
    9034:	0000009f 	.inst	0x0000009f ; undefined
	...
    9044:	00004800 	.inst	0x00004800 ; undefined
    9048:	00000000 	.inst	0x00000000 ; undefined
    904c:	00005b00 	.inst	0x00005b00 ; undefined
    9050:	00000000 	.inst	0x00000000 ; undefined
    9054:	51000100 	sub	w0, w8, #0x0
    9058:	0000005b 	.inst	0x0000005b ; undefined
    905c:	00000000 	.inst	0x00000000 ; undefined
    9060:	0000005c 	.inst	0x0000005c ; undefined
    9064:	00000000 	.inst	0x00000000 ; undefined
    9068:	01f30004 	.inst	0x01f30004 ; undefined
    906c:	00009f51 	.inst	0x00009f51 ; undefined
	...
    907c:	005c0000 	.inst	0x005c0000 ; undefined
    9080:	00000000 	.inst	0x00000000 ; undefined
    9084:	006c0000 	.inst	0x006c0000 ; undefined
    9088:	00000000 	.inst	0x00000000 ; undefined
    908c:	00010000 	.inst	0x00010000 ; undefined
    9090:	00006c50 	.inst	0x00006c50 ; undefined
    9094:	00000000 	.inst	0x00000000 ; undefined
    9098:	00007000 	.inst	0x00007000 ; undefined
    909c:	00000000 	.inst	0x00000000 ; undefined
    90a0:	f3000400 	.inst	0xf3000400 ; undefined
    90a4:	709f5001 	adr	x1, fffffffffff47aa7 <SMC_ID_HW_RSA+0xffffffff7bf37ba0>
    90a8:	00000000 	.inst	0x00000000 ; undefined
    90ac:	7c000000 	stur	h0, [x0]
    90b0:	00000000 	.inst	0x00000000 ; undefined
    90b4:	01000000 	.inst	0x01000000 ; undefined
    90b8:	007c5000 	.inst	0x007c5000 ; undefined
    90bc:	00000000 	.inst	0x00000000 ; undefined
    90c0:	00980000 	.inst	0x00980000 ; undefined
    90c4:	00000000 	.inst	0x00000000 ; undefined
    90c8:	00040000 	.inst	0x00040000 ; undefined
    90cc:	9f5001f3 	.inst	0x9f5001f3 ; undefined
	...
    90e0:	00000098 	.inst	0x00000098 ; undefined
    90e4:	00000000 	.inst	0x00000000 ; undefined
    90e8:	000000b0 	.inst	0x000000b0 ; undefined
    90ec:	00000000 	.inst	0x00000000 ; undefined
    90f0:	b0500001 	adrp	x1, a000a000 <SMC_ID_HW_RSA+0x1bffa0f9>
    90f4:	00000000 	.inst	0x00000000 ; undefined
    90f8:	bc000000 	stur	s0, [x0]
    90fc:	00000000 	.inst	0x00000000 ; undefined
    9100:	03000000 	.inst	0x03000000 ; undefined
    9104:	9f7f7000 	.inst	0x9f7f7000 ; undefined
    9108:	000000bc 	.inst	0x000000bc ; undefined
    910c:	00000000 	.inst	0x00000000 ; undefined
    9110:	000000c4 	.inst	0x000000c4 ; undefined
    9114:	00000000 	.inst	0x00000000 ; undefined
    9118:	01f30004 	.inst	0x01f30004 ; undefined
    911c:	00009f50 	.inst	0x00009f50 ; undefined
	...
    912c:	00980000 	.inst	0x00980000 ; undefined
    9130:	00000000 	.inst	0x00000000 ; undefined
    9134:	00a00000 	.inst	0x00a00000 ; undefined
    9138:	00000000 	.inst	0x00000000 ; undefined
    913c:	00010000 	.inst	0x00010000 ; undefined
    9140:	0000a051 	.inst	0x0000a051 ; undefined
    9144:	00000000 	.inst	0x00000000 ; undefined
    9148:	0000c400 	.inst	0x0000c400 ; undefined
    914c:	00000000 	.inst	0x00000000 ; undefined
    9150:	f3000400 	.inst	0xf3000400 ; undefined
    9154:	009f5101 	.inst	0x009f5101 ; undefined
	...
    9164:	a4000000 	.inst	0xa4000000 ; undefined
    9168:	00000000 	.inst	0x00000000 ; undefined
    916c:	bc000000 	stur	s0, [x0]
    9170:	00000000 	.inst	0x00000000 ; undefined
    9174:	04000000 	.inst	0x04000000 ; undefined
    9178:	5101f300 	sub	w0, w24, #0x7c
    917c:	0000009f 	.inst	0x0000009f ; undefined
	...
    918c:	0000a400 	.inst	0x0000a400 ; undefined
    9190:	00000000 	.inst	0x00000000 ; undefined
    9194:	0000b000 	.inst	0x0000b000 ; undefined
    9198:	00000000 	.inst	0x00000000 ; undefined
    919c:	50000100 	adr	x0, 91be <_stack_size+0x81be>
    91a0:	000000b0 	.inst	0x000000b0 ; undefined
    91a4:	00000000 	.inst	0x00000000 ; undefined
    91a8:	000000bc 	.inst	0x000000bc ; undefined
    91ac:	00000000 	.inst	0x00000000 ; undefined
    91b0:	7f700003 	.inst	0x7f700003 ; undefined
    91b4:	0000009f 	.inst	0x0000009f ; undefined
	...
    91c4:	0000c400 	.inst	0x0000c400 ; undefined
    91c8:	00000000 	.inst	0x00000000 ; undefined
    91cc:	0000d400 	.inst	0x0000d400 ; undefined
    91d0:	00000000 	.inst	0x00000000 ; undefined
    91d4:	50000100 	adr	x0, 91f6 <_stack_size+0x81f6>
    91d8:	000000d4 	.inst	0x000000d4 ; undefined
    91dc:	00000000 	.inst	0x00000000 ; undefined
    91e0:	00000100 	.inst	0x00000100 ; undefined
    91e4:	00000000 	.inst	0x00000000 ; undefined
    91e8:	00630001 	.inst	0x00630001 ; undefined
    91ec:	00000001 	.inst	0x00000001 ; undefined
    91f0:	04000000 	.inst	0x04000000 ; undefined
    91f4:	00000001 	.inst	0x00000001 ; undefined
    91f8:	04000000 	.inst	0x04000000 ; undefined
    91fc:	5001f300 	adr	x0, d05e <_stack_size+0xc05e>
    9200:	0001049f 	.inst	0x0001049f ; undefined
    9204:	00000000 	.inst	0x00000000 ; undefined
    9208:	00010f00 	.inst	0x00010f00 ; undefined
    920c:	00000000 	.inst	0x00000000 ; undefined
    9210:	50000100 	adr	x0, 9232 <_stack_size+0x8232>
    9214:	0000010f 	.inst	0x0000010f ; undefined
    9218:	00000000 	.inst	0x00000000 ; undefined
    921c:	00000114 	.inst	0x00000114 ; undefined
    9220:	00000000 	.inst	0x00000000 ; undefined
    9224:	00630001 	.inst	0x00630001 ; undefined
	...
    9234:	c4000000 	.inst	0xc4000000 ; undefined
    9238:	00000000 	.inst	0x00000000 ; undefined
    923c:	d4000000 	.inst	0xd4000000 ; undefined
    9240:	00000000 	.inst	0x00000000 ; undefined
    9244:	01000000 	.inst	0x01000000 ; undefined
    9248:	00d45100 	.inst	0x00d45100 ; undefined
    924c:	00000000 	.inst	0x00000000 ; undefined
    9250:	01040000 	.inst	0x01040000 ; undefined
    9254:	00000000 	.inst	0x00000000 ; undefined
    9258:	00040000 	.inst	0x00040000 ; undefined
    925c:	9f5101f3 	.inst	0x9f5101f3 ; undefined
    9260:	00000104 	.inst	0x00000104 ; undefined
    9264:	00000000 	.inst	0x00000000 ; undefined
    9268:	0000010c 	.inst	0x0000010c ; undefined
    926c:	00000000 	.inst	0x00000000 ; undefined
    9270:	0c510001 	.inst	0x0c510001 ; undefined
    9274:	00000001 	.inst	0x00000001 ; undefined
    9278:	14000000 	b	9278 <_stack_size+0x8278>
    927c:	00000001 	.inst	0x00000001 ; undefined
    9280:	04000000 	.inst	0x04000000 ; undefined
    9284:	5101f300 	sub	w0, w24, #0x7c
    9288:	0000009f 	.inst	0x0000009f ; undefined
	...
    9298:	0000d000 	.inst	0x0000d000 ; undefined
    929c:	00000000 	.inst	0x00000000 ; undefined
    92a0:	0000d400 	.inst	0x0000d400 ; undefined
    92a4:	00000000 	.inst	0x00000000 ; undefined
    92a8:	71000700 	subs	w0, w24, #0x1
    92ac:	69930a00 	.inst	0x69930a00 ; undefined
    92b0:	00d49f1e 	.inst	0x00d49f1e ; undefined
    92b4:	00000000 	.inst	0x00000000 ; undefined
    92b8:	01040000 	.inst	0x01040000 ; undefined
    92bc:	00000000 	.inst	0x00000000 ; undefined
    92c0:	00080000 	.inst	0x00080000 ; undefined
    92c4:	0a5101f3 	and	w19, w15, w17, lsr #0
    92c8:	9f1e6993 	.inst	0x9f1e6993 ; undefined
    92cc:	00000104 	.inst	0x00000104 ; undefined
    92d0:	00000000 	.inst	0x00000000 ; undefined
    92d4:	0000010c 	.inst	0x0000010c ; undefined
    92d8:	00000000 	.inst	0x00000000 ; undefined
    92dc:	00710007 	.inst	0x00710007 ; undefined
    92e0:	1e69930a 	.inst	0x1e69930a ; undefined
    92e4:	00010c9f 	.inst	0x00010c9f ; undefined
    92e8:	00000000 	.inst	0x00000000 ; undefined
    92ec:	00011400 	.inst	0x00011400 ; undefined
    92f0:	00000000 	.inst	0x00000000 ; undefined
    92f4:	f3000800 	.inst	0xf3000800 ; undefined
    92f8:	930a5101 	.inst	0x930a5101 ; undefined
    92fc:	009f1e69 	.inst	0x009f1e69 ; undefined
	...
    930c:	d0000000 	adrp	x0, b000 <_stack_size+0xa000>
    9310:	00000000 	.inst	0x00000000 ; undefined
    9314:	d4000000 	.inst	0xd4000000 ; undefined
    9318:	00000000 	.inst	0x00000000 ; undefined
    931c:	01000000 	.inst	0x01000000 ; undefined
    9320:	00d45000 	.inst	0x00d45000 ; undefined
    9324:	00000000 	.inst	0x00000000 ; undefined
    9328:	01000000 	.inst	0x01000000 ; undefined
    932c:	00000000 	.inst	0x00000000 ; undefined
    9330:	00010000 	.inst	0x00010000 ; undefined
    9334:	00010063 	.inst	0x00010063 ; undefined
    9338:	00000000 	.inst	0x00000000 ; undefined
    933c:	00010400 	.inst	0x00010400 ; undefined
    9340:	00000000 	.inst	0x00000000 ; undefined
    9344:	f3000400 	.inst	0xf3000400 ; undefined
    9348:	049f5001 	.inst	0x049f5001 ; undefined
    934c:	00000001 	.inst	0x00000001 ; undefined
    9350:	0f000000 	.inst	0x0f000000 ; undefined
    9354:	00000001 	.inst	0x00000001 ; undefined
    9358:	01000000 	.inst	0x01000000 ; undefined
    935c:	010f5000 	.inst	0x010f5000 ; undefined
    9360:	00000000 	.inst	0x00000000 ; undefined
    9364:	01140000 	.inst	0x01140000 ; undefined
    9368:	00000000 	.inst	0x00000000 ; undefined
    936c:	00010000 	.inst	0x00010000 ; undefined
    9370:	00000063 	.inst	0x00000063 ; undefined
	...
    9380:	0000e400 	.inst	0x0000e400 ; undefined
    9384:	00000000 	.inst	0x00000000 ; undefined
    9388:	00010400 	.inst	0x00010400 ; undefined
    938c:	00000000 	.inst	0x00000000 ; undefined
    9390:	f3000800 	.inst	0xf3000800 ; undefined
    9394:	930a5101 	.inst	0x930a5101 ; undefined
    9398:	009f1e69 	.inst	0x009f1e69 ; undefined
	...
    93a8:	e4000000 	.inst	0xe4000000 ; undefined
	...
    93b4:	00000001 	.inst	0x00000001 ; undefined
    93b8:	01000000 	.inst	0x01000000 ; undefined
    93bc:	01006300 	.inst	0x01006300 ; undefined
    93c0:	00000000 	.inst	0x00000000 ; undefined
    93c4:	01040000 	.inst	0x01040000 ; undefined
    93c8:	00000000 	.inst	0x00000000 ; undefined
    93cc:	00040000 	.inst	0x00040000 ; undefined
    93d0:	9f5001f3 	.inst	0x9f5001f3 ; undefined
	...
    93e4:	000000e4 	.inst	0x000000e4 ; undefined
    93e8:	00000000 	.inst	0x00000000 ; undefined
    93ec:	00000104 	.inst	0x00000104 ; undefined
    93f0:	00000000 	.inst	0x00000000 ; undefined
    93f4:	9f300002 	.inst	0x9f300002 ; undefined
	...
    9408:	000000f0 	.inst	0x000000f0 ; undefined
    940c:	00000000 	.inst	0x00000000 ; undefined
    9410:	00000104 	.inst	0x00000104 ; undefined
    9414:	00000000 	.inst	0x00000000 ; undefined
    9418:	01f30008 	.inst	0x01f30008 ; undefined
    941c:	69930a51 	.inst	0x69930a51 ; undefined
    9420:	00009f1e 	.inst	0x00009f1e ; undefined
	...
    9430:	00f00000 	.inst	0x00f00000 ; undefined
    9434:	00000000 	.inst	0x00000000 ; undefined
    9438:	01000000 	.inst	0x01000000 ; undefined
    943c:	00000000 	.inst	0x00000000 ; undefined
    9440:	00010000 	.inst	0x00010000 ; undefined
    9444:	00010063 	.inst	0x00010063 ; undefined
    9448:	00000000 	.inst	0x00000000 ; undefined
    944c:	00010400 	.inst	0x00010400 ; undefined
    9450:	00000000 	.inst	0x00000000 ; undefined
    9454:	f3000400 	.inst	0xf3000400 ; undefined
    9458:	009f5001 	.inst	0x009f5001 ; undefined
	...
    9468:	14000000 	b	9468 <_stack_size+0x8468>
    946c:	00000001 	.inst	0x00000001 ; undefined
    9470:	24000000 	.inst	0x24000000 ; undefined
    9474:	00000001 	.inst	0x00000001 ; undefined
    9478:	01000000 	.inst	0x01000000 ; undefined
    947c:	01245000 	.inst	0x01245000 ; undefined
    9480:	00000000 	.inst	0x00000000 ; undefined
    9484:	01500000 	.inst	0x01500000 ; undefined
    9488:	00000000 	.inst	0x00000000 ; undefined
    948c:	00010000 	.inst	0x00010000 ; undefined
    9490:	00015063 	.inst	0x00015063 ; undefined
    9494:	00000000 	.inst	0x00000000 ; undefined
    9498:	00015400 	.inst	0x00015400 ; undefined
    949c:	00000000 	.inst	0x00000000 ; undefined
    94a0:	f3000400 	.inst	0xf3000400 ; undefined
    94a4:	549f5001 	b.ne	fffffffffff47ea4 <SMC_ID_HW_RSA+0xffffffff7bf37f9d>
    94a8:	00000001 	.inst	0x00000001 ; undefined
    94ac:	67000000 	.inst	0x67000000 ; undefined
    94b0:	00000001 	.inst	0x00000001 ; undefined
    94b4:	01000000 	.inst	0x01000000 ; undefined
    94b8:	01675000 	.inst	0x01675000 ; undefined
    94bc:	00000000 	.inst	0x00000000 ; undefined
    94c0:	016c0000 	.inst	0x016c0000 ; undefined
    94c4:	00000000 	.inst	0x00000000 ; undefined
    94c8:	00010000 	.inst	0x00010000 ; undefined
    94cc:	00000063 	.inst	0x00000063 ; undefined
	...
    94dc:	00011400 	.inst	0x00011400 ; undefined
    94e0:	00000000 	.inst	0x00000000 ; undefined
    94e4:	00012400 	.inst	0x00012400 ; undefined
    94e8:	00000000 	.inst	0x00000000 ; undefined
    94ec:	51000100 	sub	w0, w8, #0x0
    94f0:	00000124 	.inst	0x00000124 ; undefined
    94f4:	00000000 	.inst	0x00000000 ; undefined
    94f8:	00000154 	.inst	0x00000154 ; undefined
    94fc:	00000000 	.inst	0x00000000 ; undefined
    9500:	01f30004 	.inst	0x01f30004 ; undefined
    9504:	01549f51 	.inst	0x01549f51 ; undefined
    9508:	00000000 	.inst	0x00000000 ; undefined
    950c:	01640000 	.inst	0x01640000 ; undefined
    9510:	00000000 	.inst	0x00000000 ; undefined
    9514:	00010000 	.inst	0x00010000 ; undefined
    9518:	00016451 	.inst	0x00016451 ; undefined
    951c:	00000000 	.inst	0x00000000 ; undefined
    9520:	00016c00 	.inst	0x00016c00 ; undefined
    9524:	00000000 	.inst	0x00000000 ; undefined
    9528:	f3000400 	.inst	0xf3000400 ; undefined
    952c:	009f5101 	.inst	0x009f5101 ; undefined
	...
    953c:	20000000 	.inst	0x20000000 ; undefined
    9540:	00000001 	.inst	0x00000001 ; undefined
    9544:	24000000 	.inst	0x24000000 ; undefined
    9548:	00000001 	.inst	0x00000001 ; undefined
    954c:	05000000 	.inst	0x05000000 ; undefined
    9550:	4b007100 	sub	w0, w8, w0, lsl #28
    9554:	01249f1e 	.inst	0x01249f1e ; undefined
    9558:	00000000 	.inst	0x00000000 ; undefined
    955c:	01540000 	.inst	0x01540000 ; undefined
    9560:	00000000 	.inst	0x00000000 ; undefined
    9564:	00060000 	.inst	0x00060000 ; undefined
    9568:	4b5101f3 	sub	w19, w15, w17, lsr #0
    956c:	01549f1e 	.inst	0x01549f1e ; undefined
    9570:	00000000 	.inst	0x00000000 ; undefined
    9574:	01640000 	.inst	0x01640000 ; undefined
    9578:	00000000 	.inst	0x00000000 ; undefined
    957c:	00050000 	.inst	0x00050000 ; undefined
    9580:	1e4b0071 	.inst	0x1e4b0071 ; undefined
    9584:	0001649f 	.inst	0x0001649f ; undefined
    9588:	00000000 	.inst	0x00000000 ; undefined
    958c:	00016c00 	.inst	0x00016c00 ; undefined
    9590:	00000000 	.inst	0x00000000 ; undefined
    9594:	f3000600 	.inst	0xf3000600 ; undefined
    9598:	1e4b5101 	.inst	0x1e4b5101 ; undefined
    959c:	0000009f 	.inst	0x0000009f ; undefined
	...
    95ac:	00012000 	.inst	0x00012000 ; undefined
    95b0:	00000000 	.inst	0x00000000 ; undefined
    95b4:	00012400 	.inst	0x00012400 ; undefined
    95b8:	00000000 	.inst	0x00000000 ; undefined
    95bc:	50000100 	adr	x0, 95de <_stack_size+0x85de>
    95c0:	00000124 	.inst	0x00000124 ; undefined
    95c4:	00000000 	.inst	0x00000000 ; undefined
    95c8:	00000150 	.inst	0x00000150 ; undefined
    95cc:	00000000 	.inst	0x00000000 ; undefined
    95d0:	50630001 	adr	x1, cf5d2 <_stack_size+0xce5d2>
    95d4:	00000001 	.inst	0x00000001 ; undefined
    95d8:	54000000 	b.eq	95d8 <_stack_size+0x85d8>
    95dc:	00000001 	.inst	0x00000001 ; undefined
    95e0:	04000000 	.inst	0x04000000 ; undefined
    95e4:	5001f300 	adr	x0, d446 <_stack_size+0xc446>
    95e8:	0001549f 	.inst	0x0001549f ; undefined
    95ec:	00000000 	.inst	0x00000000 ; undefined
    95f0:	00016700 	.inst	0x00016700 ; undefined
    95f4:	00000000 	.inst	0x00000000 ; undefined
    95f8:	50000100 	adr	x0, 961a <_stack_size+0x861a>
    95fc:	00000167 	.inst	0x00000167 ; undefined
    9600:	00000000 	.inst	0x00000000 ; undefined
    9604:	0000016c 	.inst	0x0000016c ; undefined
    9608:	00000000 	.inst	0x00000000 ; undefined
    960c:	00630001 	.inst	0x00630001 ; undefined
	...
    961c:	34000000 	cbz	w0, 961c <_stack_size+0x861c>
    9620:	00000001 	.inst	0x00000001 ; undefined
    9624:	54000000 	b.eq	9624 <_stack_size+0x8624>
    9628:	00000001 	.inst	0x00000001 ; undefined
    962c:	06000000 	.inst	0x06000000 ; undefined
    9630:	5101f300 	sub	w0, w24, #0x7c
    9634:	009f1e4b 	.inst	0x009f1e4b ; undefined
	...
    9644:	34000000 	cbz	w0, 9644 <_stack_size+0x8644>
    9648:	00000001 	.inst	0x00000001 ; undefined
    964c:	50000000 	adr	x0, 964e <_stack_size+0x864e>
    9650:	00000001 	.inst	0x00000001 ; undefined
    9654:	01000000 	.inst	0x01000000 ; undefined
    9658:	01506300 	.inst	0x01506300 ; undefined
    965c:	00000000 	.inst	0x00000000 ; undefined
    9660:	01540000 	.inst	0x01540000 ; undefined
    9664:	00000000 	.inst	0x00000000 ; undefined
    9668:	00040000 	.inst	0x00040000 ; undefined
    966c:	9f5001f3 	.inst	0x9f5001f3 ; undefined
	...
    9680:	00000134 	.inst	0x00000134 ; undefined
    9684:	00000000 	.inst	0x00000000 ; undefined
    9688:	00000154 	.inst	0x00000154 ; undefined
    968c:	00000000 	.inst	0x00000000 ; undefined
    9690:	9f300002 	.inst	0x9f300002 ; undefined
	...
    96a4:	00000140 	.inst	0x00000140 ; undefined
    96a8:	00000000 	.inst	0x00000000 ; undefined
    96ac:	00000154 	.inst	0x00000154 ; undefined
    96b0:	00000000 	.inst	0x00000000 ; undefined
    96b4:	01f30006 	.inst	0x01f30006 ; undefined
    96b8:	9f1e4b51 	.inst	0x9f1e4b51 ; undefined
	...
    96cc:	00000140 	.inst	0x00000140 ; undefined
    96d0:	00000000 	.inst	0x00000000 ; undefined
    96d4:	00000150 	.inst	0x00000150 ; undefined
    96d8:	00000000 	.inst	0x00000000 ; undefined
    96dc:	50630001 	adr	x1, cf6de <_stack_size+0xce6de>
    96e0:	00000001 	.inst	0x00000001 ; undefined
    96e4:	54000000 	b.eq	96e4 <_stack_size+0x86e4>
    96e8:	00000001 	.inst	0x00000001 ; undefined
    96ec:	04000000 	.inst	0x04000000 ; undefined
    96f0:	5001f300 	adr	x0, d552 <_stack_size+0xc552>
    96f4:	0000009f 	.inst	0x0000009f ; undefined
	...
    9704:	00001400 	.inst	0x00001400 ; undefined
    9708:	00000000 	.inst	0x00000000 ; undefined
    970c:	00001f00 	.inst	0x00001f00 ; undefined
    9710:	00000000 	.inst	0x00000000 ; undefined
    9714:	51000100 	sub	w0, w8, #0x0
	...
    9728:	00000074 	.inst	0x00000074 ; undefined
    972c:	00000000 	.inst	0x00000000 ; undefined
    9730:	0000008c 	.inst	0x0000008c ; undefined
    9734:	00000000 	.inst	0x00000000 ; undefined
    9738:	8c500001 	.inst	0x8c500001 ; undefined
    973c:	00000000 	.inst	0x00000000 ; undefined
    9740:	18000000 	ldr	w0, 9740 <_stack_size+0x8740>
    9744:	00000001 	.inst	0x00000001 ; undefined
    9748:	04000000 	.inst	0x04000000 ; undefined
    974c:	5001f300 	adr	x0, d5ae <_stack_size+0xc5ae>
    9750:	0000009f 	.inst	0x0000009f ; undefined
	...
    9760:	00007400 	.inst	0x00007400 ; undefined
    9764:	00000000 	.inst	0x00000000 ; undefined
    9768:	0000b800 	.inst	0x0000b800 ; undefined
    976c:	00000000 	.inst	0x00000000 ; undefined
    9770:	51000100 	sub	w0, w8, #0x0
    9774:	000000b8 	.inst	0x000000b8 ; undefined
    9778:	00000000 	.inst	0x00000000 ; undefined
    977c:	00000118 	.inst	0x00000118 ; undefined
    9780:	00000000 	.inst	0x00000000 ; undefined
    9784:	01f30004 	.inst	0x01f30004 ; undefined
    9788:	00009f51 	.inst	0x00009f51 ; undefined
	...
    9798:	00c40000 	.inst	0x00c40000 ; undefined
    979c:	00000000 	.inst	0x00000000 ; undefined
    97a0:	01080000 	.inst	0x01080000 ; undefined
    97a4:	00000000 	.inst	0x00000000 ; undefined
    97a8:	00010000 	.inst	0x00010000 ; undefined
    97ac:	00010851 	.inst	0x00010851 ; undefined
    97b0:	00000000 	.inst	0x00000000 ; undefined
    97b4:	00011800 	.inst	0x00011800 ; undefined
    97b8:	00000000 	.inst	0x00000000 ; undefined
    97bc:	f3001700 	.inst	0xf3001700 ; undefined
    97c0:	24335101 	.inst	0x24335101 ; undefined
    97c4:	0494047a 	.inst	0x0494047a ; undefined
    97c8:	f329f722 	.inst	0xf329f722 ; undefined
    97cc:	24345101 	.inst	0x24345101 ; undefined
    97d0:	f71b29f7 	.inst	0xf71b29f7 ; undefined
    97d4:	00009f00 	.inst	0x00009f00 ; undefined
	...
    97e4:	01040000 	.inst	0x01040000 ; undefined
    97e8:	00000000 	.inst	0x00000000 ; undefined
    97ec:	01080000 	.inst	0x01080000 ; undefined
    97f0:	00000000 	.inst	0x00000000 ; undefined
    97f4:	00010000 	.inst	0x00010000 ; undefined
    97f8:	00010851 	.inst	0x00010851 ; undefined
    97fc:	00000000 	.inst	0x00000000 ; undefined
    9800:	00011800 	.inst	0x00011800 ; undefined
    9804:	00000000 	.inst	0x00000000 ; undefined
    9808:	f3001700 	.inst	0xf3001700 ; undefined
    980c:	24335101 	.inst	0x24335101 ; undefined
    9810:	0494047a 	.inst	0x0494047a ; undefined
    9814:	f329f722 	.inst	0xf329f722 ; undefined
    9818:	24345101 	.inst	0x24345101 ; undefined
    981c:	f71b29f7 	.inst	0xf71b29f7 ; undefined
    9820:	00009f00 	.inst	0x00009f00 ; undefined
	...
    9830:	01180000 	.inst	0x01180000 ; undefined
    9834:	00000000 	.inst	0x00000000 ; undefined
    9838:	01300000 	.inst	0x01300000 ; undefined
    983c:	00000000 	.inst	0x00000000 ; undefined
    9840:	00010000 	.inst	0x00010000 ; undefined
    9844:	00013050 	.inst	0x00013050 ; undefined
    9848:	00000000 	.inst	0x00000000 ; undefined
    984c:	00016400 	.inst	0x00016400 ; undefined
    9850:	00000000 	.inst	0x00000000 ; undefined
    9854:	f3000400 	.inst	0xf3000400 ; undefined
    9858:	009f5001 	.inst	0x009f5001 ; undefined
	...
    9868:	64000000 	.inst	0x64000000 ; undefined
    986c:	00000001 	.inst	0x00000001 ; undefined
    9870:	80000000 	.inst	0x80000000 ; undefined
    9874:	00000001 	.inst	0x00000001 ; undefined
    9878:	01000000 	.inst	0x01000000 ; undefined
    987c:	01805000 	.inst	0x01805000 ; undefined
    9880:	00000000 	.inst	0x00000000 ; undefined
    9884:	01f00000 	.inst	0x01f00000 ; undefined
    9888:	00000000 	.inst	0x00000000 ; undefined
    988c:	00040000 	.inst	0x00040000 ; undefined
    9890:	9f5001f3 	.inst	0x9f5001f3 ; undefined
	...
    98a4:	00000164 	.inst	0x00000164 ; undefined
    98a8:	00000000 	.inst	0x00000000 ; undefined
    98ac:	00000184 	.inst	0x00000184 ; undefined
    98b0:	00000000 	.inst	0x00000000 ; undefined
    98b4:	84510001 	.inst	0x84510001 ; undefined
    98b8:	00000001 	.inst	0x00000001 ; undefined
    98bc:	f0000000 	adrp	x0, c000 <_stack_size+0xb000>
    98c0:	00000001 	.inst	0x00000001 ; undefined
    98c4:	04000000 	.inst	0x04000000 ; undefined
    98c8:	5101f300 	sub	w0, w24, #0x7c
    98cc:	0000009f 	.inst	0x0000009f ; undefined
	...
    98dc:	00019c00 	.inst	0x00019c00 ; undefined
    98e0:	00000000 	.inst	0x00000000 ; undefined
    98e4:	0001a400 	.inst	0x0001a400 ; undefined
    98e8:	00000000 	.inst	0x00000000 ; undefined
    98ec:	35000200 	cbnz	w0, 992c <_stack_size+0x892c>
    98f0:	0000009f 	.inst	0x0000009f ; undefined
	...
    9900:	00019c00 	.inst	0x00019c00 ; undefined
    9904:	00000000 	.inst	0x00000000 ; undefined
    9908:	0001a400 	.inst	0x0001a400 ; undefined
    990c:	00000000 	.inst	0x00000000 ; undefined
    9910:	f3000400 	.inst	0xf3000400 ; undefined
    9914:	009f5001 	.inst	0x009f5001 ; undefined
	...
    9924:	a4000000 	.inst	0xa4000000 ; undefined
    9928:	00000001 	.inst	0x00000001 ; undefined
    992c:	b4000000 	cbz	x0, 992c <_stack_size+0x892c>
    9930:	00000001 	.inst	0x00000001 ; undefined
    9934:	02000000 	.inst	0x02000000 ; undefined
    9938:	009f3000 	.inst	0x009f3000 ; undefined
	...
    9948:	a4000000 	.inst	0xa4000000 ; undefined
    994c:	00000001 	.inst	0x00000001 ; undefined
    9950:	b4000000 	cbz	x0, 9950 <_stack_size+0x8950>
    9954:	00000001 	.inst	0x00000001 ; undefined
    9958:	04000000 	.inst	0x04000000 ; undefined
    995c:	5001f300 	adr	x0, d7be <_stack_size+0xc7be>
    9960:	0000009f 	.inst	0x0000009f ; undefined
	...
    9970:	00024400 	.inst	0x00024400 ; undefined
    9974:	00000000 	.inst	0x00000000 ; undefined
    9978:	00026800 	.inst	0x00026800 ; undefined
    997c:	00000000 	.inst	0x00000000 ; undefined
    9980:	50000100 	adr	x0, 99a2 <_stack_size+0x89a2>
    9984:	00000268 	.inst	0x00000268 ; undefined
    9988:	00000000 	.inst	0x00000000 ; undefined
    998c:	000002f8 	.inst	0x000002f8 ; undefined
    9990:	00000000 	.inst	0x00000000 ; undefined
    9994:	f8640001 	ldaddl	x4, x1, [x0]
    9998:	00000002 	.inst	0x00000002 ; undefined
    999c:	fc000000 	stur	d0, [x0]
    99a0:	00000002 	.inst	0x00000002 ; undefined
    99a4:	04000000 	.inst	0x04000000 ; undefined
    99a8:	5001f300 	adr	x0, d80a <_stack_size+0xc80a>
    99ac:	0002fc9f 	.inst	0x0002fc9f ; undefined
    99b0:	00000000 	.inst	0x00000000 ; undefined
    99b4:	00033400 	.inst	0x00033400 ; undefined
    99b8:	00000000 	.inst	0x00000000 ; undefined
    99bc:	64000100 	.inst	0x64000100 ; undefined
    99c0:	00000334 	.inst	0x00000334 ; undefined
    99c4:	00000000 	.inst	0x00000000 ; undefined
    99c8:	00000338 	.inst	0x00000338 ; undefined
    99cc:	00000000 	.inst	0x00000000 ; undefined
    99d0:	01f30004 	.inst	0x01f30004 ; undefined
    99d4:	00009f50 	.inst	0x00009f50 ; undefined
	...
    99e4:	02440000 	.inst	0x02440000 ; undefined
    99e8:	00000000 	.inst	0x00000000 ; undefined
    99ec:	02680000 	.inst	0x02680000 ; undefined
    99f0:	00000000 	.inst	0x00000000 ; undefined
    99f4:	00010000 	.inst	0x00010000 ; undefined
    99f8:	00026851 	.inst	0x00026851 ; undefined
    99fc:	00000000 	.inst	0x00000000 ; undefined
    9a00:	0002f000 	.inst	0x0002f000 ; undefined
    9a04:	00000000 	.inst	0x00000000 ; undefined
    9a08:	65000100 	.inst	0x65000100 ; undefined
    9a0c:	000002f0 	.inst	0x000002f0 ; undefined
    9a10:	00000000 	.inst	0x00000000 ; undefined
    9a14:	000002fc 	.inst	0x000002fc ; undefined
    9a18:	00000000 	.inst	0x00000000 ; undefined
    9a1c:	01f30004 	.inst	0x01f30004 ; undefined
    9a20:	02fc9f51 	.inst	0x02fc9f51 ; undefined
    9a24:	00000000 	.inst	0x00000000 ; undefined
    9a28:	03280000 	.inst	0x03280000 ; undefined
    9a2c:	00000000 	.inst	0x00000000 ; undefined
    9a30:	00010000 	.inst	0x00010000 ; undefined
    9a34:	00032865 	.inst	0x00032865 ; undefined
    9a38:	00000000 	.inst	0x00000000 ; undefined
    9a3c:	00033800 	.inst	0x00033800 ; undefined
    9a40:	00000000 	.inst	0x00000000 ; undefined
    9a44:	f3000400 	.inst	0xf3000400 ; undefined
    9a48:	009f5101 	.inst	0x009f5101 ; undefined
	...
    9a58:	44000000 	.inst	0x44000000 ; undefined
    9a5c:	00000002 	.inst	0x00000002 ; undefined
    9a60:	68000000 	.inst	0x68000000 ; undefined
    9a64:	00000002 	.inst	0x00000002 ; undefined
    9a68:	01000000 	.inst	0x01000000 ; undefined
    9a6c:	02685200 	.inst	0x02685200 ; undefined
    9a70:	00000000 	.inst	0x00000000 ; undefined
    9a74:	02f40000 	.inst	0x02f40000 ; undefined
    9a78:	00000000 	.inst	0x00000000 ; undefined
    9a7c:	00010000 	.inst	0x00010000 ; undefined
    9a80:	0002f467 	.inst	0x0002f467 ; undefined
    9a84:	00000000 	.inst	0x00000000 ; undefined
    9a88:	0002fc00 	.inst	0x0002fc00 ; undefined
    9a8c:	00000000 	.inst	0x00000000 ; undefined
    9a90:	f3000400 	.inst	0xf3000400 ; undefined
    9a94:	fc9f5201 	.inst	0xfc9f5201 ; undefined
    9a98:	00000002 	.inst	0x00000002 ; undefined
    9a9c:	2c000000 	stnp	s0, s0, [x0]
    9aa0:	00000003 	.inst	0x00000003 ; undefined
    9aa4:	01000000 	.inst	0x01000000 ; undefined
    9aa8:	032c6700 	.inst	0x032c6700 ; undefined
    9aac:	00000000 	.inst	0x00000000 ; undefined
    9ab0:	03380000 	.inst	0x03380000 ; undefined
    9ab4:	00000000 	.inst	0x00000000 ; undefined
    9ab8:	00040000 	.inst	0x00040000 ; undefined
    9abc:	9f5201f3 	.inst	0x9f5201f3 ; undefined
	...
    9ad0:	000002a4 	.inst	0x000002a4 ; undefined
    9ad4:	00000000 	.inst	0x00000000 ; undefined
    9ad8:	000002ac 	.inst	0x000002ac ; undefined
    9adc:	00000000 	.inst	0x00000000 ; undefined
    9ae0:	10510001 	adr	x1, abae0 <_stack_size+0xaaae0>
    9ae4:	00000003 	.inst	0x00000003 ; undefined
    9ae8:	14000000 	b	9ae8 <_stack_size+0x8ae8>
    9aec:	00000003 	.inst	0x00000003 ; undefined
    9af0:	01000000 	.inst	0x01000000 ; undefined
    9af4:	00005100 	.inst	0x00005100 ; undefined
	...
    9b04:	02680000 	.inst	0x02680000 ; undefined
    9b08:	00000000 	.inst	0x00000000 ; undefined
    9b0c:	02b00000 	.inst	0x02b00000 ; undefined
    9b10:	00000000 	.inst	0x00000000 ; undefined
    9b14:	00010000 	.inst	0x00010000 ; undefined
    9b18:	0002b063 	.inst	0x0002b063 ; undefined
    9b1c:	00000000 	.inst	0x00000000 ; undefined
    9b20:	0002bc00 	.inst	0x0002bc00 ; undefined
    9b24:	00000000 	.inst	0x00000000 ; undefined
    9b28:	83000300 	.inst	0x83000300 ; undefined
    9b2c:	02bc9f04 	.inst	0x02bc9f04 ; undefined
    9b30:	00000000 	.inst	0x00000000 ; undefined
    9b34:	02f80000 	.inst	0x02f80000 ; undefined
    9b38:	00000000 	.inst	0x00000000 ; undefined
    9b3c:	00010000 	.inst	0x00010000 ; undefined
    9b40:	0002fc63 	.inst	0x0002fc63 ; undefined
    9b44:	00000000 	.inst	0x00000000 ; undefined
    9b48:	00033400 	.inst	0x00033400 ; undefined
    9b4c:	00000000 	.inst	0x00000000 ; undefined
    9b50:	63000100 	.inst	0x63000100 ; undefined
	...
    9b64:	00000338 	.inst	0x00000338 ; undefined
    9b68:	00000000 	.inst	0x00000000 ; undefined
    9b6c:	00000368 	.inst	0x00000368 ; undefined
    9b70:	00000000 	.inst	0x00000000 ; undefined
    9b74:	9f300002 	.inst	0x9f300002 ; undefined
    9b78:	00000368 	.inst	0x00000368 ; undefined
    9b7c:	00000000 	.inst	0x00000000 ; undefined
    9b80:	000003c0 	.inst	0x000003c0 ; undefined
    9b84:	00000000 	.inst	0x00000000 ; undefined
    9b88:	00630001 	.inst	0x00630001 ; undefined
	...
    9b98:	c4000000 	.inst	0xc4000000 ; undefined
    9b9c:	00000003 	.inst	0x00000003 ; undefined
    9ba0:	e4000000 	.inst	0xe4000000 ; undefined
    9ba4:	00000003 	.inst	0x00000003 ; undefined
    9ba8:	01000000 	.inst	0x01000000 ; undefined
    9bac:	03e45000 	.inst	0x03e45000 ; undefined
    9bb0:	00000000 	.inst	0x00000000 ; undefined
    9bb4:	04680000 	.inst	0x04680000 ; undefined
    9bb8:	00000000 	.inst	0x00000000 ; undefined
    9bbc:	00010000 	.inst	0x00010000 ; undefined
    9bc0:	00046864 	.inst	0x00046864 ; undefined
    9bc4:	00000000 	.inst	0x00000000 ; undefined
    9bc8:	00046c00 	.inst	0x00046c00 ; undefined
    9bcc:	00000000 	.inst	0x00000000 ; undefined
    9bd0:	f3000400 	.inst	0xf3000400 ; undefined
    9bd4:	6c9f5001 	stp	d1, d20, [x0],#496
    9bd8:	00000004 	.inst	0x00000004 ; undefined
    9bdc:	a4000000 	.inst	0xa4000000 ; undefined
    9be0:	00000004 	.inst	0x00000004 ; undefined
    9be4:	01000000 	.inst	0x01000000 ; undefined
    9be8:	04a46400 	.inst	0x04a46400 ; undefined
    9bec:	00000000 	.inst	0x00000000 ; undefined
    9bf0:	04a80000 	.inst	0x04a80000 ; undefined
    9bf4:	00000000 	.inst	0x00000000 ; undefined
    9bf8:	00040000 	.inst	0x00040000 ; undefined
    9bfc:	9f5001f3 	.inst	0x9f5001f3 ; undefined
	...
    9c10:	000003c4 	.inst	0x000003c4 ; undefined
    9c14:	00000000 	.inst	0x00000000 ; undefined
    9c18:	000003e4 	.inst	0x000003e4 ; undefined
    9c1c:	00000000 	.inst	0x00000000 ; undefined
    9c20:	e4510001 	.inst	0xe4510001 ; undefined
    9c24:	00000003 	.inst	0x00000003 ; undefined
    9c28:	60000000 	.inst	0x60000000 ; undefined
    9c2c:	00000004 	.inst	0x00000004 ; undefined
    9c30:	01000000 	.inst	0x01000000 ; undefined
    9c34:	04606500 	.inst	0x04606500 ; undefined
    9c38:	00000000 	.inst	0x00000000 ; undefined
    9c3c:	046c0000 	.inst	0x046c0000 ; undefined
    9c40:	00000000 	.inst	0x00000000 ; undefined
    9c44:	00040000 	.inst	0x00040000 ; undefined
    9c48:	9f5101f3 	.inst	0x9f5101f3 ; undefined
    9c4c:	0000046c 	.inst	0x0000046c ; undefined
    9c50:	00000000 	.inst	0x00000000 ; undefined
    9c54:	00000498 	.inst	0x00000498 ; undefined
    9c58:	00000000 	.inst	0x00000000 ; undefined
    9c5c:	98650001 	ldrsw	x1, d3c5c <_stack_size+0xd2c5c>
    9c60:	00000004 	.inst	0x00000004 ; undefined
    9c64:	a8000000 	stnp	x0, x0, [x0]
    9c68:	00000004 	.inst	0x00000004 ; undefined
    9c6c:	04000000 	.inst	0x04000000 ; undefined
    9c70:	5101f300 	sub	w0, w24, #0x7c
    9c74:	0000009f 	.inst	0x0000009f ; undefined
	...
    9c84:	00042000 	.inst	0x00042000 ; undefined
    9c88:	00000000 	.inst	0x00000000 ; undefined
    9c8c:	00042800 	.inst	0x00042800 ; undefined
    9c90:	00000000 	.inst	0x00000000 ; undefined
    9c94:	51000100 	sub	w0, w8, #0x0
    9c98:	00000480 	.inst	0x00000480 ; undefined
    9c9c:	00000000 	.inst	0x00000000 ; undefined
    9ca0:	00000484 	.inst	0x00000484 ; undefined
    9ca4:	00000000 	.inst	0x00000000 ; undefined
    9ca8:	00510001 	.inst	0x00510001 ; undefined
	...
    9cb8:	e4000000 	.inst	0xe4000000 ; undefined
    9cbc:	00000003 	.inst	0x00000003 ; undefined
    9cc0:	2c000000 	stnp	s0, s0, [x0]
    9cc4:	00000004 	.inst	0x00000004 ; undefined
    9cc8:	01000000 	.inst	0x01000000 ; undefined
    9ccc:	042c6300 	.inst	0x042c6300 ; undefined
    9cd0:	00000000 	.inst	0x00000000 ; undefined
    9cd4:	04380000 	.inst	0x04380000 ; undefined
    9cd8:	00000000 	.inst	0x00000000 ; undefined
    9cdc:	00030000 	.inst	0x00030000 ; undefined
    9ce0:	389f0483 	ldrsb	x3, [x4],#-16
    9ce4:	00000004 	.inst	0x00000004 ; undefined
    9ce8:	68000000 	.inst	0x68000000 ; undefined
    9cec:	00000004 	.inst	0x00000004 ; undefined
    9cf0:	01000000 	.inst	0x01000000 ; undefined
    9cf4:	046c6300 	.inst	0x046c6300 ; undefined
    9cf8:	00000000 	.inst	0x00000000 ; undefined
    9cfc:	04a40000 	.inst	0x04a40000 ; undefined
    9d00:	00000000 	.inst	0x00000000 ; undefined
    9d04:	00010000 	.inst	0x00010000 ; undefined
    9d08:	00000063 	.inst	0x00000063 ; undefined
	...
    9d18:	0004a800 	.inst	0x0004a800 ; undefined
    9d1c:	00000000 	.inst	0x00000000 ; undefined
    9d20:	0004c800 	.inst	0x0004c800 ; undefined
    9d24:	00000000 	.inst	0x00000000 ; undefined
    9d28:	50000100 	adr	x0, 9d4a <_stack_size+0x8d4a>
    9d2c:	000004c8 	.inst	0x000004c8 ; undefined
    9d30:	00000000 	.inst	0x00000000 ; undefined
    9d34:	00000554 	.inst	0x00000554 ; undefined
    9d38:	00000000 	.inst	0x00000000 ; undefined
    9d3c:	54640001 	b.ne	d1d3c <_stack_size+0xd0d3c>
    9d40:	00000005 	.inst	0x00000005 ; undefined
    9d44:	58000000 	ldr	x0, 9d44 <_stack_size+0x8d44>
    9d48:	00000005 	.inst	0x00000005 ; undefined
    9d4c:	04000000 	.inst	0x04000000 ; undefined
    9d50:	5001f300 	adr	x0, dbb2 <_stack_size+0xcbb2>
    9d54:	0005589f 	.inst	0x0005589f ; undefined
    9d58:	00000000 	.inst	0x00000000 ; undefined
    9d5c:	00059000 	.inst	0x00059000 ; undefined
    9d60:	00000000 	.inst	0x00000000 ; undefined
    9d64:	64000100 	.inst	0x64000100 ; undefined
    9d68:	00000590 	.inst	0x00000590 ; undefined
    9d6c:	00000000 	.inst	0x00000000 ; undefined
    9d70:	00000594 	.inst	0x00000594 ; undefined
    9d74:	00000000 	.inst	0x00000000 ; undefined
    9d78:	01f30004 	.inst	0x01f30004 ; undefined
    9d7c:	00009f50 	.inst	0x00009f50 ; undefined
	...
    9d8c:	04a80000 	.inst	0x04a80000 ; undefined
    9d90:	00000000 	.inst	0x00000000 ; undefined
    9d94:	04c80000 	.inst	0x04c80000 ; undefined
    9d98:	00000000 	.inst	0x00000000 ; undefined
    9d9c:	00010000 	.inst	0x00010000 ; undefined
    9da0:	0004c851 	.inst	0x0004c851 ; undefined
    9da4:	00000000 	.inst	0x00000000 ; undefined
    9da8:	00054c00 	.inst	0x00054c00 ; undefined
    9dac:	00000000 	.inst	0x00000000 ; undefined
    9db0:	65000100 	.inst	0x65000100 ; undefined
    9db4:	0000054c 	.inst	0x0000054c ; undefined
    9db8:	00000000 	.inst	0x00000000 ; undefined
    9dbc:	00000558 	.inst	0x00000558 ; undefined
    9dc0:	00000000 	.inst	0x00000000 ; undefined
    9dc4:	01f30004 	.inst	0x01f30004 ; undefined
    9dc8:	05589f51 	.inst	0x05589f51 ; undefined
    9dcc:	00000000 	.inst	0x00000000 ; undefined
    9dd0:	05840000 	.inst	0x05840000 ; undefined
    9dd4:	00000000 	.inst	0x00000000 ; undefined
    9dd8:	00010000 	.inst	0x00010000 ; undefined
    9ddc:	00058465 	.inst	0x00058465 ; undefined
    9de0:	00000000 	.inst	0x00000000 ; undefined
    9de4:	00059400 	.inst	0x00059400 ; undefined
    9de8:	00000000 	.inst	0x00000000 ; undefined
    9dec:	f3000400 	.inst	0xf3000400 ; undefined
    9df0:	009f5101 	.inst	0x009f5101 ; undefined
	...
    9e00:	04000000 	.inst	0x04000000 ; undefined
    9e04:	00000005 	.inst	0x00000005 ; undefined
    9e08:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    9e0c:	00000005 	.inst	0x00000005 ; undefined
    9e10:	01000000 	.inst	0x01000000 ; undefined
    9e14:	056c5100 	.inst	0x056c5100 ; undefined
    9e18:	00000000 	.inst	0x00000000 ; undefined
    9e1c:	05700000 	.inst	0x05700000 ; undefined
    9e20:	00000000 	.inst	0x00000000 ; undefined
    9e24:	00010000 	.inst	0x00010000 ; undefined
    9e28:	00000051 	.inst	0x00000051 ; undefined
	...
    9e38:	0004c800 	.inst	0x0004c800 ; undefined
    9e3c:	00000000 	.inst	0x00000000 ; undefined
    9e40:	00051000 	.inst	0x00051000 ; undefined
    9e44:	00000000 	.inst	0x00000000 ; undefined
    9e48:	63000100 	.inst	0x63000100 ; undefined
    9e4c:	00000510 	.inst	0x00000510 ; undefined
    9e50:	00000000 	.inst	0x00000000 ; undefined
    9e54:	0000051c 	.inst	0x0000051c ; undefined
    9e58:	00000000 	.inst	0x00000000 ; undefined
    9e5c:	04830003 	.inst	0x04830003 ; undefined
    9e60:	00051c9f 	.inst	0x00051c9f ; undefined
    9e64:	00000000 	.inst	0x00000000 ; undefined
    9e68:	00055400 	.inst	0x00055400 ; undefined
    9e6c:	00000000 	.inst	0x00000000 ; undefined
    9e70:	63000100 	.inst	0x63000100 ; undefined
    9e74:	00000558 	.inst	0x00000558 ; undefined
    9e78:	00000000 	.inst	0x00000000 ; undefined
    9e7c:	00000590 	.inst	0x00000590 ; undefined
    9e80:	00000000 	.inst	0x00000000 ; undefined
    9e84:	00630001 	.inst	0x00630001 ; undefined
	...
    9e94:	94000000 	bl	9e94 <_stack_size+0x8e94>
    9e98:	00000005 	.inst	0x00000005 ; undefined
    9e9c:	bc000000 	stur	s0, [x0]
    9ea0:	00000005 	.inst	0x00000005 ; undefined
    9ea4:	01000000 	.inst	0x01000000 ; undefined
    9ea8:	05bc5000 	.inst	0x05bc5000 ; undefined
    9eac:	00000000 	.inst	0x00000000 ; undefined
    9eb0:	05c40000 	.inst	0x05c40000 ; undefined
    9eb4:	00000000 	.inst	0x00000000 ; undefined
    9eb8:	00040000 	.inst	0x00040000 ; undefined
    9ebc:	9f5001f3 	.inst	0x9f5001f3 ; undefined
	...
    9ed0:	000005c4 	.inst	0x000005c4 ; undefined
    9ed4:	00000000 	.inst	0x00000000 ; undefined
    9ed8:	000005e8 	.inst	0x000005e8 ; undefined
    9edc:	00000000 	.inst	0x00000000 ; undefined
    9ee0:	e8500001 	.inst	0xe8500001 ; undefined
    9ee4:	00000005 	.inst	0x00000005 ; undefined
    9ee8:	2c000000 	stnp	s0, s0, [x0]
    9eec:	00000006 	.inst	0x00000006 ; undefined
    9ef0:	01000000 	.inst	0x01000000 ; undefined
    9ef4:	00005000 	.inst	0x00005000 ; undefined
	...
    9f04:	05e00000 	.inst	0x05e00000 ; undefined
    9f08:	00000000 	.inst	0x00000000 ; undefined
    9f0c:	06080000 	.inst	0x06080000 ; undefined
    9f10:	00000000 	.inst	0x00000000 ; undefined
    9f14:	00010000 	.inst	0x00010000 ; undefined
    9f18:	00061053 	.inst	0x00061053 ; undefined
    9f1c:	00000000 	.inst	0x00000000 ; undefined
    9f20:	00062c00 	.inst	0x00062c00 ; undefined
    9f24:	00000000 	.inst	0x00000000 ; undefined
    9f28:	53000100 	ubfx	w0, w8, #0, #1
	...
    9f3c:	0000062c 	.inst	0x0000062c ; undefined
    9f40:	00000000 	.inst	0x00000000 ; undefined
    9f44:	00000640 	.inst	0x00000640 ; undefined
    9f48:	00000000 	.inst	0x00000000 ; undefined
    9f4c:	40510001 	.inst	0x40510001 ; undefined
    9f50:	00000006 	.inst	0x00000006 ; undefined
    9f54:	8c000000 	.inst	0x8c000000 ; undefined
    9f58:	00000006 	.inst	0x00000006 ; undefined
    9f5c:	01000000 	.inst	0x01000000 ; undefined
    9f60:	00005100 	.inst	0x00005100 ; undefined
	...
    9f70:	06540000 	.inst	0x06540000 ; undefined
    9f74:	00000000 	.inst	0x00000000 ; undefined
    9f78:	065c0000 	.inst	0x065c0000 ; undefined
    9f7c:	00000000 	.inst	0x00000000 ; undefined
    9f80:	00010000 	.inst	0x00010000 ; undefined
    9f84:	00065c54 	.inst	0x00065c54 ; undefined
    9f88:	00000000 	.inst	0x00000000 ; undefined
    9f8c:	00067400 	.inst	0x00067400 ; undefined
    9f90:	00000000 	.inst	0x00000000 ; undefined
    9f94:	75000600 	.inst	0x75000600 ; undefined
    9f98:	22007400 	.inst	0x22007400 ; undefined
    9f9c:	0006749f 	.inst	0x0006749f ; undefined
    9fa0:	00000000 	.inst	0x00000000 ; undefined
    9fa4:	00068000 	.inst	0x00068000 ; undefined
    9fa8:	00000000 	.inst	0x00000000 ; undefined
    9fac:	70001000 	adr	x0, a1af <_stack_size+0x91af>
    9fb0:	32007100 	orr	w0, w8, #0x1fffffff
    9fb4:	1aff0824 	.inst	0x1aff0824 ; undefined
    9fb8:	751a3f25 	.inst	0x751a3f25 ; undefined
    9fbc:	809f2200 	.inst	0x809f2200 ; undefined
    9fc0:	00000006 	.inst	0x00000006 ; undefined
    9fc4:	8c000000 	.inst	0x8c000000 ; undefined
    9fc8:	00000006 	.inst	0x00000006 ; undefined
    9fcc:	10000000 	adr	x0, 9fcc <_stack_size+0x8fcc>
    9fd0:	71007000 	subs	w0, w0, #0x1c
    9fd4:	08243201 	.inst	0x08243201 ; undefined
    9fd8:	3f251aff 	.inst	0x3f251aff ; undefined
    9fdc:	2200751a 	.inst	0x2200751a ; undefined
    9fe0:	0000009f 	.inst	0x0000009f ; undefined
	...
    9ff0:	00068c00 	.inst	0x00068c00 ; undefined
    9ff4:	00000000 	.inst	0x00000000 ; undefined
    9ff8:	00069300 	.inst	0x00069300 ; undefined
    9ffc:	00000000 	.inst	0x00000000 ; undefined
    a000:	50000100 	adr	x0, a022 <_stack_size+0x9022>
    a004:	00000693 	.inst	0x00000693 ; undefined
    a008:	00000000 	.inst	0x00000000 ; undefined
    a00c:	00000694 	.inst	0x00000694 ; undefined
    a010:	00000000 	.inst	0x00000000 ; undefined
    a014:	01f30004 	.inst	0x01f30004 ; undefined
    a018:	00009f50 	.inst	0x00009f50 ; undefined
	...
    a028:	06940000 	.inst	0x06940000 ; undefined
    a02c:	00000000 	.inst	0x00000000 ; undefined
    a030:	069f0000 	.inst	0x069f0000 ; undefined
    a034:	00000000 	.inst	0x00000000 ; undefined
    a038:	00010000 	.inst	0x00010000 ; undefined
    a03c:	00069f50 	.inst	0x00069f50 ; undefined
    a040:	00000000 	.inst	0x00000000 ; undefined
    a044:	0006c800 	.inst	0x0006c800 ; undefined
    a048:	00000000 	.inst	0x00000000 ; undefined
    a04c:	f3000400 	.inst	0xf3000400 ; undefined
    a050:	009f5001 	.inst	0x009f5001 ; undefined
	...
    a060:	94000000 	bl	a060 <_stack_size+0x9060>
    a064:	00000006 	.inst	0x00000006 ; undefined
    a068:	9f000000 	.inst	0x9f000000 ; undefined
    a06c:	00000006 	.inst	0x00000006 ; undefined
    a070:	01000000 	.inst	0x01000000 ; undefined
    a074:	069f5100 	.inst	0x069f5100 ; undefined
    a078:	00000000 	.inst	0x00000000 ; undefined
    a07c:	06bc0000 	.inst	0x06bc0000 ; undefined
    a080:	00000000 	.inst	0x00000000 ; undefined
    a084:	00010000 	.inst	0x00010000 ; undefined
    a088:	0006bc63 	.inst	0x0006bc63 ; undefined
    a08c:	00000000 	.inst	0x00000000 ; undefined
    a090:	0006c800 	.inst	0x0006c800 ; undefined
    a094:	00000000 	.inst	0x00000000 ; undefined
    a098:	f3000400 	.inst	0xf3000400 ; undefined
    a09c:	009f5101 	.inst	0x009f5101 ; undefined
	...
    a0ac:	ac000000 	stnp	q0, q0, [x0]
    a0b0:	00000006 	.inst	0x00000006 ; undefined
    a0b4:	bc000000 	stur	s0, [x0]
    a0b8:	00000006 	.inst	0x00000006 ; undefined
    a0bc:	01000000 	.inst	0x01000000 ; undefined
    a0c0:	06bc6300 	.inst	0x06bc6300 ; undefined
    a0c4:	00000000 	.inst	0x00000000 ; undefined
    a0c8:	06c80000 	.inst	0x06c80000 ; undefined
    a0cc:	00000000 	.inst	0x00000000 ; undefined
    a0d0:	00040000 	.inst	0x00040000 ; undefined
    a0d4:	9f5101f3 	.inst	0x9f5101f3 ; undefined
	...
    a0f0:	0000006c 	.inst	0x0000006c ; undefined
    a0f4:	00000000 	.inst	0x00000000 ; undefined
    a0f8:	6c500001 	ldnp	d1, d0, [x0,#256]
    a0fc:	00000000 	.inst	0x00000000 ; undefined
    a100:	7c000000 	stur	h0, [x0]
    a104:	00000000 	.inst	0x00000000 ; undefined
    a108:	04000000 	.inst	0x04000000 ; undefined
    a10c:	5001f300 	adr	x0, df6e <_stack_size+0xcf6e>
    a110:	00007c9f 	.inst	0x00007c9f ; undefined
    a114:	00000000 	.inst	0x00000000 ; undefined
    a118:	00009400 	.inst	0x00009400 ; undefined
    a11c:	00000000 	.inst	0x00000000 ; undefined
    a120:	50000100 	adr	x0, a142 <_stack_size+0x9142>
    a124:	00000094 	.inst	0x00000094 ; undefined
    a128:	00000000 	.inst	0x00000000 ; undefined
    a12c:	0000009c 	.inst	0x0000009c ; undefined
    a130:	00000000 	.inst	0x00000000 ; undefined
    a134:	01f30004 	.inst	0x01f30004 ; undefined
    a138:	00009f50 	.inst	0x00009f50 ; undefined
	...
    a148:	00280000 	.inst	0x00280000 ; NYI
    a14c:	00000000 	.inst	0x00000000 ; undefined
    a150:	003c0000 	.inst	0x003c0000 ; NYI
    a154:	00000000 	.inst	0x00000000 ; undefined
    a158:	00010000 	.inst	0x00010000 ; undefined
    a15c:	00003c52 	.inst	0x00003c52 ; undefined
    a160:	00000000 	.inst	0x00000000 ; undefined
    a164:	00006400 	.inst	0x00006400 ; undefined
    a168:	00000000 	.inst	0x00000000 ; undefined
    a16c:	56000100 	.inst	0x56000100 ; undefined
    a170:	00000064 	.inst	0x00000064 ; undefined
    a174:	00000000 	.inst	0x00000000 ; undefined
    a178:	00000068 	.inst	0x00000068 ; undefined
    a17c:	00000000 	.inst	0x00000000 ; undefined
    a180:	68520001 	.inst	0x68520001 ; undefined
    a184:	00000000 	.inst	0x00000000 ; undefined
    a188:	9c000000 	ldr	q0, a188 <_stack_size+0x9188>
    a18c:	00000000 	.inst	0x00000000 ; undefined
    a190:	01000000 	.inst	0x01000000 ; undefined
    a194:	00005600 	.inst	0x00005600 ; undefined
	...
    a1a4:	009c0000 	.inst	0x009c0000 ; undefined
    a1a8:	00000000 	.inst	0x00000000 ; undefined
    a1ac:	01080000 	.inst	0x01080000 ; undefined
    a1b0:	00000000 	.inst	0x00000000 ; undefined
    a1b4:	00010000 	.inst	0x00010000 ; undefined
    a1b8:	00010850 	.inst	0x00010850 ; undefined
    a1bc:	00000000 	.inst	0x00000000 ; undefined
    a1c0:	00011800 	.inst	0x00011800 ; undefined
    a1c4:	00000000 	.inst	0x00000000 ; undefined
    a1c8:	f3000400 	.inst	0xf3000400 ; undefined
    a1cc:	189f5001 	ldr	w1, fffffffffff48bcc <SMC_ID_HW_RSA+0xffffffff7bf38cc5>
    a1d0:	00000001 	.inst	0x00000001 ; undefined
    a1d4:	30000000 	adr	x0, a1d5 <_stack_size+0x91d5>
    a1d8:	00000001 	.inst	0x00000001 ; undefined
    a1dc:	01000000 	.inst	0x01000000 ; undefined
    a1e0:	01305000 	.inst	0x01305000 ; undefined
    a1e4:	00000000 	.inst	0x00000000 ; undefined
    a1e8:	01380000 	.inst	0x01380000 ; undefined
    a1ec:	00000000 	.inst	0x00000000 ; undefined
    a1f0:	00040000 	.inst	0x00040000 ; undefined
    a1f4:	9f5001f3 	.inst	0x9f5001f3 ; undefined
	...
    a208:	000000c4 	.inst	0x000000c4 ; undefined
    a20c:	00000000 	.inst	0x00000000 ; undefined
    a210:	000000d8 	.inst	0x000000d8 ; undefined
    a214:	00000000 	.inst	0x00000000 ; undefined
    a218:	d8520001 	prfm	pldl1strm, ae218 <_stack_size+0xad218>
	...
    a224:	00000001 	.inst	0x00000001 ; undefined
    a228:	01000000 	.inst	0x01000000 ; undefined
    a22c:	01005600 	.inst	0x01005600 ; undefined
    a230:	00000000 	.inst	0x00000000 ; undefined
    a234:	01040000 	.inst	0x01040000 ; undefined
    a238:	00000000 	.inst	0x00000000 ; undefined
    a23c:	00010000 	.inst	0x00010000 ; undefined
    a240:	00010452 	.inst	0x00010452 ; undefined
    a244:	00000000 	.inst	0x00000000 ; undefined
    a248:	00013800 	.inst	0x00013800 ; undefined
    a24c:	00000000 	.inst	0x00000000 ; undefined
    a250:	56000100 	.inst	0x56000100 ; undefined
	...
    a264:	00000138 	.inst	0x00000138 ; undefined
    a268:	00000000 	.inst	0x00000000 ; undefined
    a26c:	00000148 	.inst	0x00000148 ; undefined
    a270:	00000000 	.inst	0x00000000 ; undefined
    a274:	48500001 	ldxrh	w1, [x0]
    a278:	00000001 	.inst	0x00000001 ; undefined
    a27c:	60000000 	.inst	0x60000000 ; undefined
    a280:	00000001 	.inst	0x00000001 ; undefined
    a284:	01000000 	.inst	0x01000000 ; undefined
    a288:	00005300 	.inst	0x00005300 ; undefined
	...
    a2a0:	003c0000 	.inst	0x003c0000 ; NYI
    a2a4:	00000000 	.inst	0x00000000 ; undefined
    a2a8:	00020000 	.inst	0x00020000 ; undefined
    a2ac:	003c9f30 	.inst	0x003c9f30 ; NYI
    a2b0:	00000000 	.inst	0x00000000 ; undefined
    a2b4:	00400000 	.inst	0x00400000 ; undefined
    a2b8:	00000000 	.inst	0x00000000 ; undefined
    a2bc:	00050000 	.inst	0x00050000 ; undefined
    a2c0:	1a320070 	.inst	0x1a320070 ; undefined
    a2c4:	0000489f 	.inst	0x0000489f ; undefined
    a2c8:	00000000 	.inst	0x00000000 ; undefined
    a2cc:	00007b00 	.inst	0x00007b00 ; undefined
    a2d0:	00000000 	.inst	0x00000000 ; undefined
    a2d4:	51000100 	sub	w0, w8, #0x0
	...
    a2e8:	000000c0 	.inst	0x000000c0 ; undefined
    a2ec:	00000000 	.inst	0x00000000 ; undefined
    a2f0:	000000dc 	.inst	0x000000dc ; undefined
    a2f4:	00000000 	.inst	0x00000000 ; undefined
    a2f8:	dc500001 	.inst	0xdc500001 ; undefined
    a2fc:	00000000 	.inst	0x00000000 ; undefined
    a300:	34000000 	cbz	w0, a300 <_stack_size+0x9300>
    a304:	00000001 	.inst	0x00000001 ; undefined
    a308:	04000000 	.inst	0x04000000 ; undefined
    a30c:	5001f300 	adr	x0, e16e <_stack_size+0xd16e>
    a310:	0000009f 	.inst	0x0000009f ; undefined
	...
    a320:	0000c000 	.inst	0x0000c000 ; undefined
    a324:	00000000 	.inst	0x00000000 ; undefined
    a328:	0000d800 	.inst	0x0000d800 ; undefined
    a32c:	00000000 	.inst	0x00000000 ; undefined
    a330:	53000100 	ubfx	w0, w8, #0, #1
    a334:	000000d8 	.inst	0x000000d8 ; undefined
    a338:	00000000 	.inst	0x00000000 ; undefined
    a33c:	00000104 	.inst	0x00000104 ; undefined
    a340:	00000000 	.inst	0x00000000 ; undefined
    a344:	01f30004 	.inst	0x01f30004 ; undefined
    a348:	01049f53 	.inst	0x01049f53 ; undefined
    a34c:	00000000 	.inst	0x00000000 ; undefined
    a350:	01340000 	.inst	0x01340000 ; undefined
    a354:	00000000 	.inst	0x00000000 ; undefined
    a358:	00010000 	.inst	0x00010000 ; undefined
    a35c:	00000053 	.inst	0x00000053 ; undefined
	...
    a36c:	00013400 	.inst	0x00013400 ; undefined
    a370:	00000000 	.inst	0x00000000 ; undefined
    a374:	00014000 	.inst	0x00014000 ; undefined
    a378:	00000000 	.inst	0x00000000 ; undefined
    a37c:	50000100 	adr	x0, a39e <_stack_size+0x939e>
    a380:	00000140 	.inst	0x00000140 ; undefined
    a384:	00000000 	.inst	0x00000000 ; undefined
    a388:	0000014c 	.inst	0x0000014c ; undefined
    a38c:	00000000 	.inst	0x00000000 ; undefined
    a390:	7c910002 	.inst	0x7c910002 ; undefined
    a394:	0000014c 	.inst	0x0000014c ; undefined
    a398:	00000000 	.inst	0x00000000 ; undefined
    a39c:	00000160 	.inst	0x00000160 ; undefined
    a3a0:	00000000 	.inst	0x00000000 ; undefined
    a3a4:	00510001 	.inst	0x00510001 ; undefined
	...
    a3b4:	60000000 	.inst	0x60000000 ; undefined
    a3b8:	00000001 	.inst	0x00000001 ; undefined
    a3bc:	6c000000 	stnp	d0, d0, [x0]
    a3c0:	00000001 	.inst	0x00000001 ; undefined
    a3c4:	01000000 	.inst	0x01000000 ; undefined
    a3c8:	016c5100 	.inst	0x016c5100 ; undefined
    a3cc:	00000000 	.inst	0x00000000 ; undefined
    a3d0:	01780000 	.inst	0x01780000 ; undefined
    a3d4:	00000000 	.inst	0x00000000 ; undefined
    a3d8:	00040000 	.inst	0x00040000 ; undefined
    a3dc:	9f5101f3 	.inst	0x9f5101f3 ; undefined
	...
    a3f0:	00000160 	.inst	0x00000160 ; undefined
    a3f4:	00000000 	.inst	0x00000000 ; undefined
    a3f8:	00000170 	.inst	0x00000170 ; undefined
    a3fc:	00000000 	.inst	0x00000000 ; undefined
    a400:	70520001 	adr	x1, ae403 <_stack_size+0xad403>
    a404:	00000001 	.inst	0x00000001 ; undefined
    a408:	78000000 	sturh	w0, [x0]
    a40c:	00000001 	.inst	0x00000001 ; undefined
    a410:	04000000 	.inst	0x04000000 ; undefined
    a414:	5201f300 	eor	w0, w24, #0xaaaaaaaa
    a418:	0000009f 	.inst	0x0000009f ; undefined
	...
    a428:	00017800 	.inst	0x00017800 ; undefined
    a42c:	00000000 	.inst	0x00000000 ; undefined
    a430:	00018800 	.inst	0x00018800 ; undefined
    a434:	00000000 	.inst	0x00000000 ; undefined
    a438:	50000100 	adr	x0, a45a <_stack_size+0x945a>
    a43c:	00000188 	.inst	0x00000188 ; undefined
    a440:	00000000 	.inst	0x00000000 ; undefined
    a444:	000001a0 	.inst	0x000001a0 ; undefined
    a448:	00000000 	.inst	0x00000000 ; undefined
    a44c:	7c910002 	.inst	0x7c910002 ; undefined
    a450:	000001a0 	.inst	0x000001a0 ; undefined
    a454:	00000000 	.inst	0x00000000 ; undefined
    a458:	000001b8 	.inst	0x000001b8 ; undefined
    a45c:	00000000 	.inst	0x00000000 ; undefined
    a460:	01f30004 	.inst	0x01f30004 ; undefined
    a464:	00009f50 	.inst	0x00009f50 ; undefined
	...
    a474:	01b80000 	.inst	0x01b80000 ; undefined
    a478:	00000000 	.inst	0x00000000 ; undefined
    a47c:	02280000 	.inst	0x02280000 ; undefined
    a480:	00000000 	.inst	0x00000000 ; undefined
    a484:	00020000 	.inst	0x00020000 ; undefined
    a488:	02289f30 	.inst	0x02289f30 ; undefined
    a48c:	00000000 	.inst	0x00000000 ; undefined
    a490:	02380000 	.inst	0x02380000 ; undefined
    a494:	00000000 	.inst	0x00000000 ; undefined
    a498:	00020000 	.inst	0x00020000 ; undefined
    a49c:	00009f31 	.inst	0x00009f31 ; undefined
	...
    a4ac:	01b80000 	.inst	0x01b80000 ; undefined
    a4b0:	00000000 	.inst	0x00000000 ; undefined
    a4b4:	01e80000 	.inst	0x01e80000 ; undefined
    a4b8:	00000000 	.inst	0x00000000 ; undefined
    a4bc:	00020000 	.inst	0x00020000 ; undefined
    a4c0:	01e89f30 	.inst	0x01e89f30 ; undefined
    a4c4:	00000000 	.inst	0x00000000 ; undefined
    a4c8:	01ec0000 	.inst	0x01ec0000 ; undefined
    a4cc:	00000000 	.inst	0x00000000 ; undefined
    a4d0:	00060000 	.inst	0x00060000 ; undefined
    a4d4:	00833208 	.inst	0x00833208 ; undefined
    a4d8:	01ec9f1c 	.inst	0x01ec9f1c ; undefined
    a4dc:	00000000 	.inst	0x00000000 ; undefined
    a4e0:	01f00000 	.inst	0x01f00000 ; undefined
    a4e4:	00000000 	.inst	0x00000000 ; undefined
    a4e8:	00060000 	.inst	0x00060000 ; undefined
    a4ec:	00833308 	.inst	0x00833308 ; undefined
    a4f0:	01f09f1c 	.inst	0x01f09f1c ; undefined
    a4f4:	00000000 	.inst	0x00000000 ; undefined
    a4f8:	02380000 	.inst	0x02380000 ; undefined
    a4fc:	00000000 	.inst	0x00000000 ; undefined
    a500:	00060000 	.inst	0x00060000 ; undefined
    a504:	00833208 	.inst	0x00833208 ; undefined
    a508:	00009f1c 	.inst	0x00009f1c ; undefined
	...
    a518:	02440000 	.inst	0x02440000 ; undefined
    a51c:	00000000 	.inst	0x00000000 ; undefined
    a520:	02ac0000 	.inst	0x02ac0000 ; undefined
    a524:	00000000 	.inst	0x00000000 ; undefined
    a528:	00010000 	.inst	0x00010000 ; undefined
    a52c:	0002ac50 	.inst	0x0002ac50 ; undefined
    a530:	00000000 	.inst	0x00000000 ; undefined
    a534:	0006d800 	.inst	0x0006d800 ; undefined
    a538:	00000000 	.inst	0x00000000 ; undefined
    a53c:	67000100 	.inst	0x67000100 ; undefined
    a540:	000006d8 	.inst	0x000006d8 ; undefined
    a544:	00000000 	.inst	0x00000000 ; undefined
    a548:	000006e8 	.inst	0x000006e8 ; undefined
    a54c:	00000000 	.inst	0x00000000 ; undefined
    a550:	01f30004 	.inst	0x01f30004 ; undefined
    a554:	06e89f50 	.inst	0x06e89f50 ; undefined
    a558:	00000000 	.inst	0x00000000 ; undefined
    a55c:	078c0000 	.inst	0x078c0000 ; undefined
    a560:	00000000 	.inst	0x00000000 ; undefined
    a564:	00010000 	.inst	0x00010000 ; undefined
    a568:	00000067 	.inst	0x00000067 ; undefined
	...
    a578:	00024400 	.inst	0x00024400 ; undefined
    a57c:	00000000 	.inst	0x00000000 ; undefined
    a580:	00030800 	.inst	0x00030800 ; undefined
    a584:	00000000 	.inst	0x00000000 ; undefined
    a588:	51000100 	sub	w0, w8, #0x0
    a58c:	00000308 	.inst	0x00000308 ; undefined
    a590:	00000000 	.inst	0x00000000 ; undefined
    a594:	000006d4 	.inst	0x000006d4 ; undefined
    a598:	00000000 	.inst	0x00000000 ; undefined
    a59c:	d4660001 	.inst	0xd4660001 ; undefined
    a5a0:	00000006 	.inst	0x00000006 ; undefined
    a5a4:	e8000000 	.inst	0xe8000000 ; undefined
    a5a8:	00000006 	.inst	0x00000006 ; undefined
    a5ac:	04000000 	.inst	0x04000000 ; undefined
    a5b0:	5101f300 	sub	w0, w24, #0x7c
    a5b4:	0006e89f 	.inst	0x0006e89f ; undefined
    a5b8:	00000000 	.inst	0x00000000 ; undefined
    a5bc:	00078c00 	.inst	0x00078c00 ; undefined
    a5c0:	00000000 	.inst	0x00000000 ; undefined
    a5c4:	66000100 	.inst	0x66000100 ; undefined
	...
    a5d8:	00000244 	.inst	0x00000244 ; undefined
    a5dc:	00000000 	.inst	0x00000000 ; undefined
    a5e0:	00000317 	.inst	0x00000317 ; undefined
    a5e4:	00000000 	.inst	0x00000000 ; undefined
    a5e8:	17520001 	b	fffffffffd48a5ec <SMC_ID_HW_RSA+0xffffffff7947a6e5>
    a5ec:	00000003 	.inst	0x00000003 ; undefined
    a5f0:	e4000000 	.inst	0xe4000000 ; undefined
    a5f4:	00000006 	.inst	0x00000006 ; undefined
    a5f8:	01000000 	.inst	0x01000000 ; undefined
    a5fc:	06e46300 	.inst	0x06e46300 ; undefined
    a600:	00000000 	.inst	0x00000000 ; undefined
    a604:	06e80000 	.inst	0x06e80000 ; undefined
    a608:	00000000 	.inst	0x00000000 ; undefined
    a60c:	00040000 	.inst	0x00040000 ; undefined
    a610:	9f5201f3 	.inst	0x9f5201f3 ; undefined
    a614:	000006e8 	.inst	0x000006e8 ; undefined
    a618:	00000000 	.inst	0x00000000 ; undefined
    a61c:	0000078c 	.inst	0x0000078c ; undefined
    a620:	00000000 	.inst	0x00000000 ; undefined
    a624:	00630001 	.inst	0x00630001 ; undefined
	...
    a634:	8c000000 	.inst	0x8c000000 ; undefined
    a638:	00000007 	.inst	0x00000007 ; undefined
    a63c:	f4000000 	.inst	0xf4000000 ; undefined
    a640:	00000007 	.inst	0x00000007 ; undefined
    a644:	01000000 	.inst	0x01000000 ; undefined
    a648:	07f45000 	.inst	0x07f45000 ; undefined
    a64c:	00000000 	.inst	0x00000000 ; undefined
    a650:	0c200000 	.inst	0x0c200000 ; undefined
    a654:	00000000 	.inst	0x00000000 ; undefined
    a658:	00010000 	.inst	0x00010000 ; undefined
    a65c:	000c2067 	.inst	0x000c2067 ; undefined
    a660:	00000000 	.inst	0x00000000 ; undefined
    a664:	000c3000 	.inst	0x000c3000 ; undefined
    a668:	00000000 	.inst	0x00000000 ; undefined
    a66c:	f3000400 	.inst	0xf3000400 ; undefined
    a670:	309f5001 	adr	x1, fffffffffff49071 <SMC_ID_HW_RSA+0xffffffff7bf3916a>
    a674:	0000000c 	.inst	0x0000000c ; undefined
    a678:	d4000000 	.inst	0xd4000000 ; undefined
    a67c:	0000000c 	.inst	0x0000000c ; undefined
    a680:	01000000 	.inst	0x01000000 ; undefined
    a684:	00006700 	.inst	0x00006700 ; undefined
	...
    a694:	078c0000 	.inst	0x078c0000 ; undefined
    a698:	00000000 	.inst	0x00000000 ; undefined
    a69c:	08500000 	ldxrb	w0, [x0]
    a6a0:	00000000 	.inst	0x00000000 ; undefined
    a6a4:	00010000 	.inst	0x00010000 ; undefined
    a6a8:	00085051 	.inst	0x00085051 ; undefined
    a6ac:	00000000 	.inst	0x00000000 ; undefined
    a6b0:	000c1c00 	.inst	0x000c1c00 ; undefined
    a6b4:	00000000 	.inst	0x00000000 ; undefined
    a6b8:	66000100 	.inst	0x66000100 ; undefined
    a6bc:	00000c1c 	.inst	0x00000c1c ; undefined
    a6c0:	00000000 	.inst	0x00000000 ; undefined
    a6c4:	00000c30 	.inst	0x00000c30 ; undefined
    a6c8:	00000000 	.inst	0x00000000 ; undefined
    a6cc:	01f30004 	.inst	0x01f30004 ; undefined
    a6d0:	0c309f51 	.inst	0x0c309f51 ; undefined
    a6d4:	00000000 	.inst	0x00000000 ; undefined
    a6d8:	0cd40000 	ld4	{v0.8b-v3.8b}, [x0], x20
    a6dc:	00000000 	.inst	0x00000000 ; undefined
    a6e0:	00010000 	.inst	0x00010000 ; undefined
    a6e4:	00000066 	.inst	0x00000066 ; undefined
	...
    a6f4:	00078c00 	.inst	0x00078c00 ; undefined
    a6f8:	00000000 	.inst	0x00000000 ; undefined
    a6fc:	00085f00 	.inst	0x00085f00 ; undefined
    a700:	00000000 	.inst	0x00000000 ; undefined
    a704:	52000100 	eor	w0, w8, #0x1
    a708:	0000085f 	.inst	0x0000085f ; undefined
    a70c:	00000000 	.inst	0x00000000 ; undefined
    a710:	00000c2c 	.inst	0x00000c2c ; undefined
    a714:	00000000 	.inst	0x00000000 ; undefined
    a718:	2c630001 	ldnp	s1, s0, [x0,#-232]
    a71c:	0000000c 	.inst	0x0000000c ; undefined
    a720:	30000000 	adr	x0, a721 <_stack_size+0x9721>
    a724:	0000000c 	.inst	0x0000000c ; undefined
    a728:	04000000 	.inst	0x04000000 ; undefined
    a72c:	5201f300 	eor	w0, w24, #0xaaaaaaaa
    a730:	000c309f 	.inst	0x000c309f ; undefined
    a734:	00000000 	.inst	0x00000000 ; undefined
    a738:	000cd400 	.inst	0x000cd400 ; undefined
    a73c:	00000000 	.inst	0x00000000 ; undefined
    a740:	63000100 	.inst	0x63000100 ; undefined
	...
    a754:	00000cd4 	.inst	0x00000cd4 ; undefined
    a758:	00000000 	.inst	0x00000000 ; undefined
    a75c:	00000d34 	.inst	0x00000d34 ; undefined
    a760:	00000000 	.inst	0x00000000 ; undefined
    a764:	34500001 	cbz	w1, aa764 <_stack_size+0xa9764>
    a768:	0000000d 	.inst	0x0000000d ; undefined
    a76c:	40000000 	.inst	0x40000000 ; undefined
    a770:	0000000d 	.inst	0x0000000d ; undefined
    a774:	04000000 	.inst	0x04000000 ; undefined
    a778:	5001f300 	adr	x0, e5da <_stack_size+0xd5da>
    a77c:	000d409f 	.inst	0x000d409f ; undefined
    a780:	00000000 	.inst	0x00000000 ; undefined
    a784:	000d8400 	.inst	0x000d8400 ; undefined
    a788:	00000000 	.inst	0x00000000 ; undefined
    a78c:	50000100 	adr	x0, a7ae <_stack_size+0x97ae>
	...
    a7a0:	00000cd4 	.inst	0x00000cd4 ; undefined
    a7a4:	00000000 	.inst	0x00000000 ; undefined
    a7a8:	00000cdc 	.inst	0x00000cdc ; undefined
    a7ac:	00000000 	.inst	0x00000000 ; undefined
    a7b0:	9f300002 	.inst	0x9f300002 ; undefined
    a7b4:	00000cdc 	.inst	0x00000cdc ; undefined
    a7b8:	00000000 	.inst	0x00000000 ; undefined
    a7bc:	00000ce8 	.inst	0x00000ce8 ; undefined
    a7c0:	00000000 	.inst	0x00000000 ; undefined
    a7c4:	00730007 	.inst	0x00730007 ; undefined
    a7c8:	1a31254c 	.inst	0x1a31254c ; undefined
    a7cc:	0000009f 	.inst	0x0000009f ; undefined
	...
    a7dc:	000cd400 	.inst	0x000cd400 ; undefined
    a7e0:	00000000 	.inst	0x00000000 ; undefined
    a7e4:	000ce400 	.inst	0x000ce400 ; undefined
    a7e8:	00000000 	.inst	0x00000000 ; undefined
    a7ec:	30000200 	adr	x0, a82d <_stack_size+0x982d>
    a7f0:	000ce49f 	.inst	0x000ce49f ; undefined
    a7f4:	00000000 	.inst	0x00000000 ; undefined
    a7f8:	000d2400 	.inst	0x000d2400 ; undefined
    a7fc:	00000000 	.inst	0x00000000 ; undefined
    a800:	51000100 	sub	w0, w8, #0x0
    a804:	00000d40 	.inst	0x00000d40 ; undefined
    a808:	00000000 	.inst	0x00000000 ; undefined
    a80c:	00000d44 	.inst	0x00000d44 ; undefined
    a810:	00000000 	.inst	0x00000000 ; undefined
    a814:	00510001 	.inst	0x00510001 ; undefined
	...
    a824:	08000000 	stxrb	w0, w0, [x0]
    a828:	0000000e 	.inst	0x0000000e ; undefined
    a82c:	30000000 	adr	x0, a82d <_stack_size+0x982d>
    a830:	0000000e 	.inst	0x0000000e ; undefined
    a834:	02000000 	.inst	0x02000000 ; undefined
    a838:	309f3000 	adr	x0, fffffffffff48e39 <SMC_ID_HW_RSA+0xffffffff7bf38f32>
    a83c:	0000000e 	.inst	0x0000000e ; undefined
    a840:	98000000 	ldrsw	x0, a840 <_stack_size+0x9840>
    a844:	0000000e 	.inst	0x0000000e ; undefined
    a848:	01000000 	.inst	0x01000000 ; undefined
    a84c:	00005000 	.inst	0x00005000 ; undefined
	...
    a85c:	0e980000 	.inst	0x0e980000 ; undefined
    a860:	00000000 	.inst	0x00000000 ; undefined
    a864:	0ea80000 	saddl	v0.2d, v0.2s, v8.2s
    a868:	00000000 	.inst	0x00000000 ; undefined
    a86c:	00010000 	.inst	0x00010000 ; undefined
    a870:	000ea850 	.inst	0x000ea850 ; undefined
    a874:	00000000 	.inst	0x00000000 ; undefined
    a878:	000eac00 	.inst	0x000eac00 ; undefined
    a87c:	00000000 	.inst	0x00000000 ; undefined
    a880:	f3000400 	.inst	0xf3000400 ; undefined
    a884:	ac9f5001 	stp	q1, q20, [x0],#992
    a888:	0000000e 	.inst	0x0000000e ; undefined
    a88c:	b4000000 	cbz	x0, a88c <_stack_size+0x988c>
    a890:	0000000e 	.inst	0x0000000e ; undefined
    a894:	01000000 	.inst	0x01000000 ; undefined
    a898:	0eb45000 	sabal	v0.2d, v0.2s, v20.2s
    a89c:	00000000 	.inst	0x00000000 ; undefined
    a8a0:	0ec80000 	.inst	0x0ec80000 ; undefined
    a8a4:	00000000 	.inst	0x00000000 ; undefined
    a8a8:	00050000 	.inst	0x00050000 ; undefined
    a8ac:	07e08071 	.inst	0x07e08071 ; undefined
    a8b0:	0000009f 	.inst	0x0000009f ; undefined
	...
    a8c0:	000ec800 	.inst	0x000ec800 ; undefined
    a8c4:	00000000 	.inst	0x00000000 ; undefined
    a8c8:	000ee400 	.inst	0x000ee400 ; undefined
    a8cc:	00000000 	.inst	0x00000000 ; undefined
    a8d0:	50000100 	adr	x0, a8f2 <_stack_size+0x98f2>
    a8d4:	00000ee4 	.inst	0x00000ee4 ; undefined
    a8d8:	00000000 	.inst	0x00000000 ; undefined
    a8dc:	00000efc 	.inst	0x00000efc ; undefined
    a8e0:	00000000 	.inst	0x00000000 ; undefined
    a8e4:	01f30004 	.inst	0x01f30004 ; undefined
    a8e8:	0efc9f50 	.inst	0x0efc9f50 ; undefined
    a8ec:	00000000 	.inst	0x00000000 ; undefined
    a8f0:	0f080000 	.inst	0x0f080000 ; undefined
    a8f4:	00000000 	.inst	0x00000000 ; undefined
    a8f8:	00010000 	.inst	0x00010000 ; undefined
    a8fc:	000f0850 	.inst	0x000f0850 ; undefined
    a900:	00000000 	.inst	0x00000000 ; undefined
    a904:	000f2000 	.inst	0x000f2000 ; undefined
    a908:	00000000 	.inst	0x00000000 ; undefined
    a90c:	f3000400 	.inst	0xf3000400 ; undefined
    a910:	009f5001 	.inst	0x009f5001 ; undefined
	...
    a920:	c8000000 	stxr	w0, x0, [x0]
    a924:	0000000e 	.inst	0x0000000e ; undefined
    a928:	04000000 	.inst	0x04000000 ; undefined
    a92c:	0000000f 	.inst	0x0000000f ; undefined
    a930:	01000000 	.inst	0x01000000 ; undefined
    a934:	0f045100 	.inst	0x0f045100 ; undefined
    a938:	00000000 	.inst	0x00000000 ; undefined
    a93c:	0f200000 	.inst	0x0f200000 ; undefined
    a940:	00000000 	.inst	0x00000000 ; undefined
    a944:	00040000 	.inst	0x00040000 ; undefined
    a948:	9f5101f3 	.inst	0x9f5101f3 ; undefined
	...
    a95c:	00000edc 	.inst	0x00000edc ; undefined
    a960:	00000000 	.inst	0x00000000 ; undefined
    a964:	00000ee4 	.inst	0x00000ee4 ; undefined
    a968:	00000000 	.inst	0x00000000 ; undefined
    a96c:	9f300002 	.inst	0x9f300002 ; undefined
    a970:	00000ee4 	.inst	0x00000ee4 ; undefined
    a974:	00000000 	.inst	0x00000000 ; undefined
    a978:	00000ef8 	.inst	0x00000ef8 ; undefined
    a97c:	00000000 	.inst	0x00000000 ; undefined
    a980:	fc540001 	ldur	d1, [x0,#-192]
    a984:	0000000e 	.inst	0x0000000e ; undefined
    a988:	08000000 	stxrb	w0, w0, [x0]
    a98c:	0000000f 	.inst	0x0000000f ; undefined
    a990:	02000000 	.inst	0x02000000 ; undefined
    a994:	089f3000 	.inst	0x089f3000 ; undefined
    a998:	0000000f 	.inst	0x0000000f ; undefined
    a99c:	10000000 	adr	x0, a99c <_stack_size+0x999c>
    a9a0:	0000000f 	.inst	0x0000000f ; undefined
    a9a4:	07000000 	.inst	0x07000000 ; undefined
    a9a8:	f3007300 	.inst	0xf3007300 ; undefined
    a9ac:	9f1c5001 	.inst	0x9f1c5001 ; undefined
    a9b0:	00000f10 	.inst	0x00000f10 ; undefined
    a9b4:	00000000 	.inst	0x00000000 ; undefined
    a9b8:	00000f18 	.inst	0x00000f18 ; undefined
    a9bc:	00000000 	.inst	0x00000000 ; undefined
    a9c0:	01f30008 	.inst	0x01f30008 ; undefined
    a9c4:	00732050 	.inst	0x00732050 ; undefined
    a9c8:	00009f22 	.inst	0x00009f22 ; undefined
	...
    a9d8:	0f580000 	.inst	0x0f580000 ; undefined
    a9dc:	00000000 	.inst	0x00000000 ; undefined
    a9e0:	0f5c0000 	.inst	0x0f5c0000 ; undefined
    a9e4:	00000000 	.inst	0x00000000 ; undefined
    a9e8:	00010000 	.inst	0x00010000 ; undefined
    a9ec:	000f5c50 	.inst	0x000f5c50 ; undefined
    a9f0:	00000000 	.inst	0x00000000 ; undefined
    a9f4:	000f6000 	.inst	0x000f6000 ; undefined
    a9f8:	00000000 	.inst	0x00000000 ; undefined
    a9fc:	f3000400 	.inst	0xf3000400 ; undefined
    aa00:	009f5001 	.inst	0x009f5001 ; undefined
	...
    aa10:	58000000 	ldr	x0, aa10 <_stack_size+0x9a10>
    aa14:	0000000f 	.inst	0x0000000f ; undefined
    aa18:	5c000000 	ldr	d0, aa18 <_stack_size+0x9a18>
    aa1c:	0000000f 	.inst	0x0000000f ; undefined
    aa20:	1d000000 	.inst	0x1d000000 ; undefined
    aa24:	48007000 	stxrh	w0, w0, [x0]
    aa28:	48007024 	stxrh	w0, w4, [x1]
    aa2c:	00702125 	.inst	0x00702125 ; undefined
    aa30:	1aff000a 	.inst	0x1aff000a ; undefined
    aa34:	70212438 	adr	x24, 4cebb <_stack_size+0x4bebb>
    aa38:	40ff0800 	.inst	0x40ff0800 ; undefined
    aa3c:	25381a24 	.inst	0x25381a24 ; undefined
    aa40:	0f5c9f21 	.inst	0x0f5c9f21 ; undefined
    aa44:	00000000 	.inst	0x00000000 ; undefined
    aa48:	0f600000 	.inst	0x0f600000 ; undefined
    aa4c:	00000000 	.inst	0x00000000 ; undefined
    aa50:	00210000 	.inst	0x00210000 ; NYI
    aa54:	485001f3 	ldxrh	w19, [x15]
    aa58:	5001f324 	adr	x4, e8be <_stack_size+0xd8be>
    aa5c:	f3212548 	.inst	0xf3212548 ; undefined
    aa60:	000a5001 	.inst	0x000a5001 ; undefined
    aa64:	24381aff 	.inst	0x24381aff ; undefined
    aa68:	5001f321 	adr	x1, e8ce <_stack_size+0xd8ce>
    aa6c:	2440ff08 	.inst	0x2440ff08 ; undefined
    aa70:	2125381a 	.inst	0x2125381a ; undefined
    aa74:	0000009f 	.inst	0x0000009f ; undefined
	...
    aa84:	00101400 	.inst	0x00101400 ; undefined
    aa88:	00000000 	.inst	0x00000000 ; undefined
    aa8c:	00103700 	.inst	0x00103700 ; undefined
    aa90:	00000000 	.inst	0x00000000 ; undefined
    aa94:	50000100 	adr	x0, aab6 <_stack_size+0x9ab6>
    aa98:	00001037 	.inst	0x00001037 ; undefined
    aa9c:	00000000 	.inst	0x00000000 ; undefined
    aaa0:	000010d0 	.inst	0x000010d0 ; undefined
    aaa4:	00000000 	.inst	0x00000000 ; undefined
    aaa8:	d0650001 	adrp	x1, ca00c000 <SMC_ID_HW_RSA+0x45ffc0f9>
    aaac:	00000010 	.inst	0x00000010 ; undefined
    aab0:	dc000000 	.inst	0xdc000000 ; undefined
    aab4:	00000010 	.inst	0x00000010 ; undefined
    aab8:	04000000 	.inst	0x04000000 ; undefined
    aabc:	5001f300 	adr	x0, e91e <_stack_size+0xd91e>
    aac0:	0010dc9f 	.inst	0x0010dc9f ; undefined
    aac4:	00000000 	.inst	0x00000000 ; undefined
    aac8:	0010e000 	.inst	0x0010e000 ; undefined
    aacc:	00000000 	.inst	0x00000000 ; undefined
    aad0:	65000100 	.inst	0x65000100 ; undefined
	...
    aae4:	00001014 	.inst	0x00001014 ; undefined
    aae8:	00000000 	.inst	0x00000000 ; undefined
    aaec:	00001037 	.inst	0x00001037 ; undefined
    aaf0:	00000000 	.inst	0x00000000 ; undefined
    aaf4:	37510001 	tbnz	w1, #10, caf4 <_stack_size+0xbaf4>
    aaf8:	00000010 	.inst	0x00000010 ; undefined
    aafc:	d0000000 	adrp	x0, c000 <_stack_size+0xb000>
    ab00:	00000010 	.inst	0x00000010 ; undefined
    ab04:	01000000 	.inst	0x01000000 ; undefined
    ab08:	10d06600 	adr	x0, fffffffffffab7c8 <SMC_ID_HW_RSA+0xffffffff7bf9b8c1>
    ab0c:	00000000 	.inst	0x00000000 ; undefined
    ab10:	10dc0000 	adr	x0, fffffffffffc2b10 <SMC_ID_HW_RSA+0xffffffff7bfb2c09>
    ab14:	00000000 	.inst	0x00000000 ; undefined
    ab18:	00040000 	.inst	0x00040000 ; undefined
    ab1c:	9f5101f3 	.inst	0x9f5101f3 ; undefined
    ab20:	000010dc 	.inst	0x000010dc ; undefined
    ab24:	00000000 	.inst	0x00000000 ; undefined
    ab28:	000010e0 	.inst	0x000010e0 ; undefined
    ab2c:	00000000 	.inst	0x00000000 ; undefined
    ab30:	00660001 	.inst	0x00660001 ; undefined
	...
    ab40:	14000000 	b	ab40 <_stack_size+0x9b40>
    ab44:	00000010 	.inst	0x00000010 ; undefined
    ab48:	37000000 	tbnz	w0, #0, ab48 <_stack_size+0x9b48>
    ab4c:	00000010 	.inst	0x00000010 ; undefined
    ab50:	01000000 	.inst	0x01000000 ; undefined
    ab54:	10375200 	adr	x0, 79594 <_stack_size+0x78594>
    ab58:	00000000 	.inst	0x00000000 ; undefined
    ab5c:	10d80000 	adr	x0, fffffffffffbab5c <SMC_ID_HW_RSA+0xffffffff7bfaac55>
    ab60:	00000000 	.inst	0x00000000 ; undefined
    ab64:	00010000 	.inst	0x00010000 ; undefined
    ab68:	0010d863 	.inst	0x0010d863 ; undefined
    ab6c:	00000000 	.inst	0x00000000 ; undefined
    ab70:	0010dc00 	.inst	0x0010dc00 ; undefined
    ab74:	00000000 	.inst	0x00000000 ; undefined
    ab78:	f3000400 	.inst	0xf3000400 ; undefined
    ab7c:	dc9f5201 	.inst	0xdc9f5201 ; undefined
    ab80:	00000010 	.inst	0x00000010 ; undefined
    ab84:	e0000000 	.inst	0xe0000000 ; undefined
    ab88:	00000010 	.inst	0x00000010 ; undefined
    ab8c:	01000000 	.inst	0x01000000 ; undefined
    ab90:	00006300 	.inst	0x00006300 ; undefined
	...
    aba0:	10680000 	adr	x0, daba0 <_stack_size+0xd9ba0>
    aba4:	00000000 	.inst	0x00000000 ; undefined
    aba8:	10ac0000 	adr	x0, fffffffffff62ba8 <SMC_ID_HW_RSA+0xffffffff7bf52ca1>
    abac:	00000000 	.inst	0x00000000 ; undefined
    abb0:	00010000 	.inst	0x00010000 ; undefined
    abb4:	00000050 	.inst	0x00000050 ; undefined
	...
    abc4:	00106800 	.inst	0x00106800 ; undefined
    abc8:	00000000 	.inst	0x00000000 ; undefined
    abcc:	00109000 	.inst	0x00109000 ; undefined
    abd0:	00000000 	.inst	0x00000000 ; undefined
    abd4:	53000100 	ubfx	w0, w8, #0, #1
    abd8:	00001090 	.inst	0x00001090 ; undefined
    abdc:	00000000 	.inst	0x00000000 ; undefined
    abe0:	000010a0 	.inst	0x000010a0 ; undefined
    abe4:	00000000 	.inst	0x00000000 ; undefined
    abe8:	7f730003 	.inst	0x7f730003 ; undefined
    abec:	0010a09f 	.inst	0x0010a09f ; undefined
    abf0:	00000000 	.inst	0x00000000 ; undefined
    abf4:	0010b300 	.inst	0x0010b300 ; undefined
    abf8:	00000000 	.inst	0x00000000 ; undefined
    abfc:	53000100 	ubfx	w0, w8, #0, #1
	...
    ac10:	00001068 	.inst	0x00001068 ; undefined
    ac14:	00000000 	.inst	0x00000000 ; undefined
    ac18:	000010d0 	.inst	0x000010d0 ; undefined
    ac1c:	00000000 	.inst	0x00000000 ; undefined
    ac20:	d0650001 	adrp	x1, ca00c000 <SMC_ID_HW_RSA+0x45ffc0f9>
    ac24:	00000010 	.inst	0x00000010 ; undefined
    ac28:	dc000000 	.inst	0xdc000000 ; undefined
    ac2c:	00000010 	.inst	0x00000010 ; undefined
    ac30:	04000000 	.inst	0x04000000 ; undefined
    ac34:	5001f300 	adr	x0, ea96 <_stack_size+0xda96>
    ac38:	0000009f 	.inst	0x0000009f ; undefined
	...
    ac48:	00106800 	.inst	0x00106800 ; undefined
    ac4c:	00000000 	.inst	0x00000000 ; undefined
    ac50:	0010d000 	.inst	0x0010d000 ; undefined
    ac54:	00000000 	.inst	0x00000000 ; undefined
    ac58:	66000100 	.inst	0x66000100 ; undefined
    ac5c:	000010d0 	.inst	0x000010d0 ; undefined
    ac60:	00000000 	.inst	0x00000000 ; undefined
    ac64:	000010dc 	.inst	0x000010dc ; undefined
    ac68:	00000000 	.inst	0x00000000 ; undefined
    ac6c:	01f30004 	.inst	0x01f30004 ; undefined
    ac70:	00009f51 	.inst	0x00009f51 ; undefined
	...
    ac80:	10140000 	adr	x0, 32c80 <_stack_size+0x31c80>
    ac84:	00000000 	.inst	0x00000000 ; undefined
    ac88:	10680000 	adr	x0, dac88 <_stack_size+0xd9c88>
    ac8c:	00000000 	.inst	0x00000000 ; undefined
    ac90:	00020000 	.inst	0x00020000 ; undefined
    ac94:	10689f30 	adr	x16, dc078 <_stack_size+0xdb078>
    ac98:	00000000 	.inst	0x00000000 ; undefined
    ac9c:	10b30000 	adr	x0, fffffffffff70c9c <SMC_ID_HW_RSA+0xffffffff7bf60d95>
    aca0:	00000000 	.inst	0x00000000 ; undefined
    aca4:	00010000 	.inst	0x00010000 ; undefined
    aca8:	0010dc55 	.inst	0x0010dc55 ; undefined
    acac:	00000000 	.inst	0x00000000 ; undefined
    acb0:	0010e000 	.inst	0x0010e000 ; undefined
    acb4:	00000000 	.inst	0x00000000 ; undefined
    acb8:	30000200 	adr	x0, acf9 <_stack_size+0x9cf9>
    acbc:	0000009f 	.inst	0x0000009f ; undefined
	...
    accc:	00101400 	.inst	0x00101400 ; undefined
    acd0:	00000000 	.inst	0x00000000 ; undefined
    acd4:	00106800 	.inst	0x00106800 ; undefined
    acd8:	00000000 	.inst	0x00000000 ; undefined
    acdc:	09000300 	.inst	0x09000300 ; undefined
    ace0:	10689fff 	adr	xzr, dc0dc <_stack_size+0xdb0dc>
    ace4:	00000000 	.inst	0x00000000 ; undefined
    ace8:	10d80000 	adr	x0, fffffffffffbace8 <SMC_ID_HW_RSA+0xffffffff7bfaade1>
    acec:	00000000 	.inst	0x00000000 ; undefined
    acf0:	00010000 	.inst	0x00010000 ; undefined
    acf4:	0010dc64 	.inst	0x0010dc64 ; undefined
    acf8:	00000000 	.inst	0x00000000 ; undefined
    acfc:	0010e000 	.inst	0x0010e000 ; undefined
    ad00:	00000000 	.inst	0x00000000 ; undefined
    ad04:	09000300 	.inst	0x09000300 ; undefined
    ad08:	00009fff 	.inst	0x00009fff ; undefined
	...
    ad18:	10e00000 	adr	x0, fffffffffffcad18 <SMC_ID_HW_RSA+0xffffffff7bfbae11>
    ad1c:	00000000 	.inst	0x00000000 ; undefined
    ad20:	11140000 	add	w0, w0, #0x500
    ad24:	00000000 	.inst	0x00000000 ; undefined
    ad28:	00010000 	.inst	0x00010000 ; undefined
    ad2c:	00111450 	.inst	0x00111450 ; undefined
    ad30:	00000000 	.inst	0x00000000 ; undefined
    ad34:	0011ec00 	.inst	0x0011ec00 ; undefined
    ad38:	00000000 	.inst	0x00000000 ; undefined
    ad3c:	67000100 	.inst	0x67000100 ; undefined
    ad40:	000011ec 	.inst	0x000011ec ; undefined
    ad44:	00000000 	.inst	0x00000000 ; undefined
    ad48:	000011f4 	.inst	0x000011f4 ; undefined
    ad4c:	00000000 	.inst	0x00000000 ; undefined
    ad50:	01f30004 	.inst	0x01f30004 ; undefined
    ad54:	11f49f50 	.inst	0x11f49f50 ; undefined
    ad58:	00000000 	.inst	0x00000000 ; undefined
    ad5c:	13340000 	.inst	0x13340000 ; undefined
    ad60:	00000000 	.inst	0x00000000 ; undefined
    ad64:	00010000 	.inst	0x00010000 ; undefined
    ad68:	00000067 	.inst	0x00000067 ; undefined
	...
    ad78:	0010e000 	.inst	0x0010e000 ; undefined
    ad7c:	00000000 	.inst	0x00000000 ; undefined
    ad80:	00113700 	.inst	0x00113700 ; undefined
    ad84:	00000000 	.inst	0x00000000 ; undefined
    ad88:	51000100 	sub	w0, w8, #0x0
    ad8c:	00001137 	.inst	0x00001137 ; undefined
    ad90:	00000000 	.inst	0x00000000 ; undefined
    ad94:	00001158 	.inst	0x00001158 ; undefined
    ad98:	00000000 	.inst	0x00000000 ; undefined
    ad9c:	58660001 	ldr	x1, d6d9c <_stack_size+0xd5d9c>
    ada0:	00000011 	.inst	0x00000011 ; undefined
    ada4:	58000000 	ldr	x0, ada4 <_stack_size+0x9da4>
    ada8:	00000012 	.inst	0x00000012 ; undefined
    adac:	04000000 	.inst	0x04000000 ; undefined
    adb0:	5101f300 	sub	w0, w24, #0x7c
    adb4:	0012589f 	.inst	0x0012589f ; undefined
    adb8:	00000000 	.inst	0x00000000 ; undefined
    adbc:	00126b00 	.inst	0x00126b00 ; undefined
    adc0:	00000000 	.inst	0x00000000 ; undefined
    adc4:	51000100 	sub	w0, w8, #0x0
    adc8:	0000126b 	.inst	0x0000126b ; undefined
    adcc:	00000000 	.inst	0x00000000 ; undefined
    add0:	000012c8 	.inst	0x000012c8 ; undefined
    add4:	00000000 	.inst	0x00000000 ; undefined
    add8:	c8660001 	ldxp	x1, x0, [x0]
    addc:	00000012 	.inst	0x00000012 ; undefined
    ade0:	db000000 	.inst	0xdb000000 ; undefined
    ade4:	00000012 	.inst	0x00000012 ; undefined
    ade8:	01000000 	.inst	0x01000000 ; undefined
    adec:	12db5100 	.inst	0x12db5100 ; undefined
    adf0:	00000000 	.inst	0x00000000 ; undefined
    adf4:	13300000 	.inst	0x13300000 ; undefined
    adf8:	00000000 	.inst	0x00000000 ; undefined
    adfc:	00010000 	.inst	0x00010000 ; undefined
    ae00:	00133066 	.inst	0x00133066 ; undefined
    ae04:	00000000 	.inst	0x00000000 ; undefined
    ae08:	00133400 	.inst	0x00133400 ; undefined
    ae0c:	00000000 	.inst	0x00000000 ; undefined
    ae10:	f3000400 	.inst	0xf3000400 ; undefined
    ae14:	009f5101 	.inst	0x009f5101 ; undefined
	...
    ae24:	e0000000 	.inst	0xe0000000 ; undefined
    ae28:	00000010 	.inst	0x00000010 ; undefined
    ae2c:	37000000 	tbnz	w0, #0, ae2c <_stack_size+0x9e2c>
    ae30:	00000011 	.inst	0x00000011 ; undefined
    ae34:	01000000 	.inst	0x01000000 ; undefined
    ae38:	11375200 	add	w0, w16, #0xdd4
    ae3c:	00000000 	.inst	0x00000000 ; undefined
    ae40:	11f00000 	.inst	0x11f00000 ; undefined
    ae44:	00000000 	.inst	0x00000000 ; undefined
    ae48:	00010000 	.inst	0x00010000 ; undefined
    ae4c:	0011f063 	.inst	0x0011f063 ; undefined
    ae50:	00000000 	.inst	0x00000000 ; undefined
    ae54:	0011f400 	.inst	0x0011f400 ; undefined
    ae58:	00000000 	.inst	0x00000000 ; undefined
    ae5c:	50000100 	adr	x0, ae7e <_stack_size+0x9e7e>
    ae60:	000011f4 	.inst	0x000011f4 ; undefined
    ae64:	00000000 	.inst	0x00000000 ; undefined
    ae68:	00001258 	.inst	0x00001258 ; undefined
    ae6c:	00000000 	.inst	0x00000000 ; undefined
    ae70:	58630001 	ldr	x1, d0e70 <_stack_size+0xcfe70>
    ae74:	00000012 	.inst	0x00000012 ; undefined
    ae78:	6b000000 	subs	w0, w0, w0
    ae7c:	00000012 	.inst	0x00000012 ; undefined
    ae80:	01000000 	.inst	0x01000000 ; undefined
    ae84:	126b5200 	.inst	0x126b5200 ; undefined
    ae88:	00000000 	.inst	0x00000000 ; undefined
    ae8c:	12c80000 	.inst	0x12c80000 ; undefined
    ae90:	00000000 	.inst	0x00000000 ; undefined
    ae94:	00010000 	.inst	0x00010000 ; undefined
    ae98:	0012c863 	.inst	0x0012c863 ; undefined
    ae9c:	00000000 	.inst	0x00000000 ; undefined
    aea0:	0012db00 	.inst	0x0012db00 ; undefined
    aea4:	00000000 	.inst	0x00000000 ; undefined
    aea8:	52000100 	eor	w0, w8, #0x1
    aeac:	000012db 	.inst	0x000012db ; undefined
    aeb0:	00000000 	.inst	0x00000000 ; undefined
    aeb4:	00001334 	.inst	0x00001334 ; undefined
    aeb8:	00000000 	.inst	0x00000000 ; undefined
    aebc:	00630001 	.inst	0x00630001 ; undefined
	...
    aecc:	34000000 	cbz	w0, aecc <_stack_size+0x9ecc>
    aed0:	00000013 	.inst	0x00000013 ; undefined
    aed4:	44000000 	.inst	0x44000000 ; undefined
    aed8:	00000013 	.inst	0x00000013 ; undefined
    aedc:	01000000 	.inst	0x01000000 ; undefined
    aee0:	13445000 	.inst	0x13445000 ; undefined
    aee4:	00000000 	.inst	0x00000000 ; undefined
    aee8:	13600000 	.inst	0x13600000 ; undefined
    aeec:	00000000 	.inst	0x00000000 ; undefined
    aef0:	00040000 	.inst	0x00040000 ; undefined
    aef4:	9f5001f3 	.inst	0x9f5001f3 ; undefined
    aef8:	00001360 	.inst	0x00001360 ; undefined
    aefc:	00000000 	.inst	0x00000000 ; undefined
    af00:	00001364 	.inst	0x00001364 ; undefined
    af04:	00000000 	.inst	0x00000000 ; undefined
    af08:	64500001 	.inst	0x64500001 ; undefined
    af0c:	00000013 	.inst	0x00000013 ; undefined
    af10:	68000000 	.inst	0x68000000 ; undefined
    af14:	00000013 	.inst	0x00000013 ; undefined
    af18:	04000000 	.inst	0x04000000 ; undefined
    af1c:	5001f300 	adr	x0, ed7e <_stack_size+0xdd7e>
    af20:	0000009f 	.inst	0x0000009f ; undefined
	...
    af30:	00133400 	.inst	0x00133400 ; undefined
    af34:	00000000 	.inst	0x00000000 ; undefined
    af38:	00133c00 	.inst	0x00133c00 ; undefined
    af3c:	00000000 	.inst	0x00000000 ; undefined
    af40:	51000100 	sub	w0, w8, #0x0
    af44:	0000133c 	.inst	0x0000133c ; undefined
    af48:	00000000 	.inst	0x00000000 ; undefined
    af4c:	00001360 	.inst	0x00001360 ; undefined
    af50:	00000000 	.inst	0x00000000 ; undefined
    af54:	01f30004 	.inst	0x01f30004 ; undefined
    af58:	13609f51 	.inst	0x13609f51 ; undefined
    af5c:	00000000 	.inst	0x00000000 ; undefined
    af60:	13680000 	.inst	0x13680000 ; undefined
    af64:	00000000 	.inst	0x00000000 ; undefined
    af68:	00010000 	.inst	0x00010000 ; undefined
    af6c:	00000051 	.inst	0x00000051 ; undefined
	...
    af7c:	00133400 	.inst	0x00133400 ; undefined
    af80:	00000000 	.inst	0x00000000 ; undefined
    af84:	00134400 	.inst	0x00134400 ; undefined
    af88:	00000000 	.inst	0x00000000 ; undefined
    af8c:	30000200 	adr	x0, afcd <_stack_size+0x9fcd>
    af90:	0013449f 	.inst	0x0013449f ; undefined
    af94:	00000000 	.inst	0x00000000 ; undefined
    af98:	00134c00 	.inst	0x00134c00 ; undefined
    af9c:	00000000 	.inst	0x00000000 ; undefined
    afa0:	72000700 	ands	w0, w24, #0x3
    afa4:	5001f300 	adr	x0, ee06 <_stack_size+0xde06>
    afa8:	134c9f1c 	.inst	0x134c9f1c ; undefined
    afac:	00000000 	.inst	0x00000000 ; undefined
    afb0:	13580000 	.inst	0x13580000 ; undefined
    afb4:	00000000 	.inst	0x00000000 ; undefined
    afb8:	00080000 	.inst	0x00080000 ; undefined
    afbc:	205001f3 	.inst	0x205001f3 ; undefined
    afc0:	9f220072 	.inst	0x9f220072 ; undefined
    afc4:	00001360 	.inst	0x00001360 ; undefined
    afc8:	00000000 	.inst	0x00000000 ; undefined
    afcc:	00001368 	.inst	0x00001368 ; undefined
    afd0:	00000000 	.inst	0x00000000 ; undefined
    afd4:	9f300002 	.inst	0x9f300002 ; undefined
	...
    afe8:	00001334 	.inst	0x00001334 ; undefined
    afec:	00000000 	.inst	0x00000000 ; undefined
    aff0:	00001344 	.inst	0x00001344 ; undefined
    aff4:	00000000 	.inst	0x00000000 ; undefined
    aff8:	9f300002 	.inst	0x9f300002 ; undefined
    affc:	00001344 	.inst	0x00001344 ; undefined
    b000:	00000000 	.inst	0x00000000 ; undefined
    b004:	00001360 	.inst	0x00001360 ; undefined
    b008:	00000000 	.inst	0x00000000 ; undefined
    b00c:	60500001 	.inst	0x60500001 ; undefined
    b010:	00000013 	.inst	0x00000013 ; undefined
    b014:	68000000 	.inst	0x68000000 ; undefined
    b018:	00000013 	.inst	0x00000013 ; undefined
    b01c:	02000000 	.inst	0x02000000 ; undefined
    b020:	009f3000 	.inst	0x009f3000 ; undefined
	...
    b030:	68000000 	.inst	0x68000000 ; undefined
    b034:	00000013 	.inst	0x00000013 ; undefined
    b038:	84000000 	.inst	0x84000000 ; undefined
    b03c:	00000013 	.inst	0x00000013 ; undefined
    b040:	01000000 	.inst	0x01000000 ; undefined
    b044:	13845000 	extr	w0, w0, w4, #20
    b048:	00000000 	.inst	0x00000000 ; undefined
    b04c:	14800000 	b	200b04c <MPIDR_EL1_MT+0x100b04c>
    b050:	00000000 	.inst	0x00000000 ; undefined
    b054:	00040000 	.inst	0x00040000 ; undefined
    b058:	9f5001f3 	.inst	0x9f5001f3 ; undefined
    b05c:	00001480 	.inst	0x00001480 ; undefined
    b060:	00000000 	.inst	0x00000000 ; undefined
    b064:	00001484 	.inst	0x00001484 ; undefined
    b068:	00000000 	.inst	0x00000000 ; undefined
    b06c:	84500001 	.inst	0x84500001 ; undefined
    b070:	00000014 	.inst	0x00000014 ; undefined
    b074:	8c000000 	.inst	0x8c000000 ; undefined
    b078:	00000014 	.inst	0x00000014 ; undefined
    b07c:	04000000 	.inst	0x04000000 ; undefined
    b080:	5001f300 	adr	x0, eee2 <_stack_size+0xdee2>
    b084:	0000009f 	.inst	0x0000009f ; undefined
	...
    b094:	00136800 	.inst	0x00136800 ; undefined
    b098:	00000000 	.inst	0x00000000 ; undefined
    b09c:	00138700 	.inst	0x00138700 ; undefined
    b0a0:	00000000 	.inst	0x00000000 ; undefined
    b0a4:	51000100 	sub	w0, w8, #0x0
    b0a8:	00001387 	.inst	0x00001387 ; undefined
    b0ac:	00000000 	.inst	0x00000000 ; undefined
    b0b0:	000013d0 	.inst	0x000013d0 ; undefined
    b0b4:	00000000 	.inst	0x00000000 ; undefined
    b0b8:	d0650001 	adrp	x1, ca00d000 <SMC_ID_HW_RSA+0x45ffd0f9>
    b0bc:	00000013 	.inst	0x00000013 ; undefined
    b0c0:	64000000 	.inst	0x64000000 ; undefined
    b0c4:	00000014 	.inst	0x00000014 ; undefined
    b0c8:	04000000 	.inst	0x04000000 ; undefined
    b0cc:	5101f300 	sub	w0, w24, #0x7c
    b0d0:	0014649f 	.inst	0x0014649f ; undefined
    b0d4:	00000000 	.inst	0x00000000 ; undefined
    b0d8:	00146800 	.inst	0x00146800 ; undefined
    b0dc:	00000000 	.inst	0x00000000 ; undefined
    b0e0:	65000100 	.inst	0x65000100 ; undefined
    b0e4:	00001468 	.inst	0x00001468 ; undefined
    b0e8:	00000000 	.inst	0x00000000 ; undefined
    b0ec:	00001480 	.inst	0x00001480 ; undefined
    b0f0:	00000000 	.inst	0x00000000 ; undefined
    b0f4:	01f30004 	.inst	0x01f30004 ; undefined
    b0f8:	14809f51 	b	2032e3c <MPIDR_EL1_MT+0x1032e3c>
    b0fc:	00000000 	.inst	0x00000000 ; undefined
    b100:	148c0000 	b	230b100 <MPIDR_EL1_MT+0x130b100>
    b104:	00000000 	.inst	0x00000000 ; undefined
    b108:	00010000 	.inst	0x00010000 ; undefined
    b10c:	00000051 	.inst	0x00000051 ; undefined
	...
    b11c:	00136800 	.inst	0x00136800 ; undefined
    b120:	00000000 	.inst	0x00000000 ; undefined
    b124:	00138700 	.inst	0x00138700 ; undefined
    b128:	00000000 	.inst	0x00000000 ; undefined
    b12c:	52000100 	eor	w0, w8, #0x1
    b130:	00001387 	.inst	0x00001387 ; undefined
    b134:	00000000 	.inst	0x00000000 ; undefined
    b138:	00001454 	.inst	0x00001454 ; undefined
    b13c:	00000000 	.inst	0x00000000 ; undefined
    b140:	54660001 	b.ne	d7140 <_stack_size+0xd6140>
    b144:	00000014 	.inst	0x00000014 ; undefined
    b148:	64000000 	.inst	0x64000000 ; undefined
    b14c:	00000014 	.inst	0x00000014 ; undefined
    b150:	04000000 	.inst	0x04000000 ; undefined
    b154:	5201f300 	eor	w0, w24, #0xaaaaaaaa
    b158:	0014649f 	.inst	0x0014649f ; undefined
    b15c:	00000000 	.inst	0x00000000 ; undefined
    b160:	00146800 	.inst	0x00146800 ; undefined
    b164:	00000000 	.inst	0x00000000 ; undefined
    b168:	66000100 	.inst	0x66000100 ; undefined
    b16c:	00001468 	.inst	0x00001468 ; undefined
    b170:	00000000 	.inst	0x00000000 ; undefined
    b174:	00001480 	.inst	0x00001480 ; undefined
    b178:	00000000 	.inst	0x00000000 ; undefined
    b17c:	01f30004 	.inst	0x01f30004 ; undefined
    b180:	14809f52 	b	2032ec8 <MPIDR_EL1_MT+0x1032ec8>
    b184:	00000000 	.inst	0x00000000 ; undefined
    b188:	148c0000 	b	230b188 <MPIDR_EL1_MT+0x130b188>
    b18c:	00000000 	.inst	0x00000000 ; undefined
    b190:	00010000 	.inst	0x00010000 ; undefined
    b194:	00000052 	.inst	0x00000052 ; undefined
	...
    b1a4:	0013cc00 	.inst	0x0013cc00 ; undefined
    b1a8:	00000000 	.inst	0x00000000 ; undefined
    b1ac:	0013d000 	.inst	0x0013d000 ; undefined
    b1b0:	00000000 	.inst	0x00000000 ; undefined
    b1b4:	30000200 	adr	x0, b1f5 <_stack_size+0xa1f5>
    b1b8:	0013d09f 	.inst	0x0013d09f ; undefined
    b1bc:	00000000 	.inst	0x00000000 ; undefined
    b1c0:	0013e800 	.inst	0x0013e800 ; undefined
    b1c4:	00000000 	.inst	0x00000000 ; undefined
    b1c8:	63000100 	.inst	0x63000100 ; undefined
    b1cc:	000013e8 	.inst	0x000013e8 ; undefined
    b1d0:	00000000 	.inst	0x00000000 ; undefined
    b1d4:	000013f0 	.inst	0x000013f0 ; undefined
    b1d8:	00000000 	.inst	0x00000000 ; undefined
    b1dc:	7f830003 	.inst	0x7f830003 ; undefined
    b1e0:	0013f09f 	.inst	0x0013f09f ; undefined
    b1e4:	00000000 	.inst	0x00000000 ; undefined
    b1e8:	00143c00 	.inst	0x00143c00 ; undefined
    b1ec:	00000000 	.inst	0x00000000 ; undefined
    b1f0:	63000100 	.inst	0x63000100 ; undefined
    b1f4:	0000143c 	.inst	0x0000143c ; undefined
    b1f8:	00000000 	.inst	0x00000000 ; undefined
    b1fc:	00001444 	.inst	0x00001444 ; undefined
    b200:	00000000 	.inst	0x00000000 ; undefined
    b204:	7f830003 	.inst	0x7f830003 ; undefined
    b208:	0014449f 	.inst	0x0014449f ; undefined
    b20c:	00000000 	.inst	0x00000000 ; undefined
    b210:	00146000 	.inst	0x00146000 ; undefined
    b214:	00000000 	.inst	0x00000000 ; undefined
    b218:	63000100 	.inst	0x63000100 ; undefined
	...
    b22c:	0000137c 	.inst	0x0000137c ; undefined
    b230:	00000000 	.inst	0x00000000 ; undefined
    b234:	00001387 	.inst	0x00001387 ; undefined
    b238:	00000000 	.inst	0x00000000 ; undefined
    b23c:	87510001 	.inst	0x87510001 ; undefined
    b240:	00000013 	.inst	0x00000013 ; undefined
    b244:	d0000000 	adrp	x0, d000 <_stack_size+0xc000>
    b248:	00000013 	.inst	0x00000013 ; undefined
    b24c:	01000000 	.inst	0x01000000 ; undefined
    b250:	13d06500 	.inst	0x13d06500 ; undefined
    b254:	00000000 	.inst	0x00000000 ; undefined
    b258:	14640000 	b	190b258 <MPIDR_EL1_MT+0x90b258>
    b25c:	00000000 	.inst	0x00000000 ; undefined
    b260:	00040000 	.inst	0x00040000 ; undefined
    b264:	9f5101f3 	.inst	0x9f5101f3 ; undefined
    b268:	00001464 	.inst	0x00001464 ; undefined
    b26c:	00000000 	.inst	0x00000000 ; undefined
    b270:	00001468 	.inst	0x00001468 ; undefined
    b274:	00000000 	.inst	0x00000000 ; undefined
    b278:	68650001 	.inst	0x68650001 ; undefined
    b27c:	00000014 	.inst	0x00000014 ; undefined
    b280:	80000000 	.inst	0x80000000 ; undefined
    b284:	00000014 	.inst	0x00000014 ; undefined
    b288:	04000000 	.inst	0x04000000 ; undefined
    b28c:	5101f300 	sub	w0, w24, #0x7c
    b290:	0014809f 	.inst	0x0014809f ; undefined
    b294:	00000000 	.inst	0x00000000 ; undefined
    b298:	00148c00 	.inst	0x00148c00 ; undefined
    b29c:	00000000 	.inst	0x00000000 ; undefined
    b2a0:	51000100 	sub	w0, w8, #0x0
	...
    b2b4:	000014bc 	.inst	0x000014bc ; undefined
    b2b8:	00000000 	.inst	0x00000000 ; undefined
    b2bc:	000014cc 	.inst	0x000014cc ; undefined
    b2c0:	00000000 	.inst	0x00000000 ; undefined
    b2c4:	cc500001 	.inst	0xcc500001 ; undefined
    b2c8:	00000014 	.inst	0x00000014 ; undefined
    b2cc:	28000000 	stnp	w0, w0, [x0]
    b2d0:	00000015 	.inst	0x00000015 ; undefined
    b2d4:	02000000 	.inst	0x02000000 ; undefined
    b2d8:	287c9100 	ldnp	w0, w4, [x8,#-28]
    b2dc:	00000015 	.inst	0x00000015 ; undefined
    b2e0:	2c000000 	stnp	s0, s0, [x0]
    b2e4:	00000015 	.inst	0x00000015 ; undefined
    b2e8:	02000000 	.inst	0x02000000 ; undefined
    b2ec:	007c8f00 	.inst	0x007c8f00 ; undefined
	...
    b2fc:	44000000 	.inst	0x44000000 ; undefined
    b300:	00000015 	.inst	0x00000015 ; undefined
    b304:	68000000 	.inst	0x68000000 ; undefined
    b308:	00000015 	.inst	0x00000015 ; undefined
    b30c:	05000000 	.inst	0x05000000 ; undefined
    b310:	31008400 	adds	w0, w0, #0x21
    b314:	15989f1a 	b	6632f7c <_stack_base+0x36257fc>
    b318:	00000000 	.inst	0x00000000 ; undefined
    b31c:	15c00000 	b	700b31c <_stack_base+0x3ffdb9c>
    b320:	00000000 	.inst	0x00000000 ; undefined
    b324:	00050000 	.inst	0x00050000 ; undefined
    b328:	1a310084 	.inst	0x1a310084 ; undefined
    b32c:	0015c49f 	.inst	0x0015c49f ; undefined
    b330:	00000000 	.inst	0x00000000 ; undefined
    b334:	0015e800 	.inst	0x0015e800 ; undefined
    b338:	00000000 	.inst	0x00000000 ; undefined
    b33c:	84000500 	.inst	0x84000500 ; undefined
    b340:	9f1a3100 	.inst	0x9f1a3100 ; undefined
    b344:	0000163c 	.inst	0x0000163c ; undefined
    b348:	00000000 	.inst	0x00000000 ; undefined
    b34c:	00001668 	.inst	0x00001668 ; undefined
    b350:	00000000 	.inst	0x00000000 ; undefined
    b354:	00840005 	.inst	0x00840005 ; undefined
    b358:	009f1a31 	.inst	0x009f1a31 ; undefined
	...
    b368:	4c000000 	st4	{v0.16b-v3.16b}, [x0]
    b36c:	00000015 	.inst	0x00000015 ; undefined
    b370:	5c000000 	ldr	d0, b370 <_stack_size+0xa370>
    b374:	00000015 	.inst	0x00000015 ; undefined
    b378:	07000000 	.inst	0x07000000 ; undefined
    b37c:	40007000 	.inst	0x40007000 ; undefined
    b380:	9f1a2441 	.inst	0x9f1a2441 ; undefined
    b384:	00001598 	.inst	0x00001598 ; undefined
    b388:	00000000 	.inst	0x00000000 ; undefined
    b38c:	0000159c 	.inst	0x0000159c ; undefined
    b390:	00000000 	.inst	0x00000000 ; undefined
    b394:	00700007 	.inst	0x00700007 ; undefined
    b398:	1a244140 	.inst	0x1a244140 ; undefined
    b39c:	0000009f 	.inst	0x0000009f ; undefined
	...
    b3ac:	00156c00 	.inst	0x00156c00 ; undefined
    b3b0:	00000000 	.inst	0x00000000 ; undefined
    b3b4:	00158000 	.inst	0x00158000 ; undefined
    b3b8:	00000000 	.inst	0x00000000 ; undefined
    b3bc:	65000100 	.inst	0x65000100 ; undefined
    b3c0:	00001580 	.inst	0x00001580 ; undefined
    b3c4:	00000000 	.inst	0x00000000 ; undefined
    b3c8:	00001594 	.inst	0x00001594 ; undefined
    b3cc:	00000000 	.inst	0x00000000 ; undefined
    b3d0:	d4630001 	.inst	0xd4630001 ; undefined
    b3d4:	00000015 	.inst	0x00000015 ; undefined
    b3d8:	e8000000 	.inst	0xe8000000 ; undefined
    b3dc:	00000015 	.inst	0x00000015 ; undefined
    b3e0:	01000000 	.inst	0x01000000 ; undefined
    b3e4:	15e86300 	b	7a23fe4 <_stack_base+0x4a16864>
    b3e8:	00000000 	.inst	0x00000000 ; undefined
    b3ec:	160c0000 	b	fffffffff830b3ec <SMC_ID_HW_RSA+0xffffffff742fb4e5>
    b3f0:	00000000 	.inst	0x00000000 ; undefined
    b3f4:	00010000 	.inst	0x00010000 ; undefined
    b3f8:	00160c65 	.inst	0x00160c65 ; undefined
    b3fc:	00000000 	.inst	0x00000000 ; undefined
    b400:	00163c00 	.inst	0x00163c00 ; undefined
    b404:	00000000 	.inst	0x00000000 ; undefined
    b408:	63000100 	.inst	0x63000100 ; undefined
    b40c:	0000165c 	.inst	0x0000165c ; undefined
    b410:	00000000 	.inst	0x00000000 ; undefined
    b414:	0000166c 	.inst	0x0000166c ; undefined
    b418:	00000000 	.inst	0x00000000 ; undefined
    b41c:	9f300002 	.inst	0x9f300002 ; undefined
	...
    b430:	00001574 	.inst	0x00001574 ; undefined
    b434:	00000000 	.inst	0x00000000 ; undefined
    b438:	00001588 	.inst	0x00001588 ; undefined
    b43c:	00000000 	.inst	0x00000000 ; undefined
    b440:	88640001 	ldxp	w1, w0, [x0]
    b444:	00000015 	.inst	0x00000015 ; undefined
    b448:	8c000000 	.inst	0x8c000000 ; undefined
    b44c:	00000015 	.inst	0x00000015 ; undefined
    b450:	01000000 	.inst	0x01000000 ; undefined
    b454:	15ac5000 	b	6b1f454 <_stack_base+0x3b11cd4>
    b458:	00000000 	.inst	0x00000000 ; undefined
    b45c:	15b40000 	b	6d0b45c <_stack_base+0x3cfdcdc>
    b460:	00000000 	.inst	0x00000000 ; undefined
    b464:	00010000 	.inst	0x00010000 ; undefined
    b468:	0015e863 	.inst	0x0015e863 ; undefined
    b46c:	00000000 	.inst	0x00000000 ; undefined
    b470:	00163400 	.inst	0x00163400 ; undefined
    b474:	00000000 	.inst	0x00000000 ; undefined
    b478:	64000100 	.inst	0x64000100 ; undefined
    b47c:	00001634 	.inst	0x00001634 ; undefined
    b480:	00000000 	.inst	0x00000000 ; undefined
    b484:	0000163c 	.inst	0x0000163c ; undefined
    b488:	00000000 	.inst	0x00000000 ; undefined
    b48c:	9f300002 	.inst	0x9f300002 ; undefined
    b490:	0000163c 	.inst	0x0000163c ; undefined
    b494:	00000000 	.inst	0x00000000 ; undefined
    b498:	00001644 	.inst	0x00001644 ; undefined
    b49c:	00000000 	.inst	0x00000000 ; undefined
    b4a0:	00630001 	.inst	0x00630001 ; undefined
	...
    b4b0:	6c000000 	stnp	d0, d0, [x0]
    b4b4:	00000016 	.inst	0x00000016 ; undefined
    b4b8:	b4000000 	cbz	x0, b4b8 <_stack_size+0xa4b8>
    b4bc:	00000016 	.inst	0x00000016 ; undefined
    b4c0:	01000000 	.inst	0x01000000 ; undefined
    b4c4:	16b45000 	b	fffffffffad1f4c4 <SMC_ID_HW_RSA+0xffffffff76d0f5bd>
    b4c8:	00000000 	.inst	0x00000000 ; undefined
    b4cc:	16c40000 	b	fffffffffb10b4cc <SMC_ID_HW_RSA+0xffffffff770fb5c5>
    b4d0:	00000000 	.inst	0x00000000 ; undefined
    b4d4:	00010000 	.inst	0x00010000 ; undefined
    b4d8:	0016c457 	.inst	0x0016c457 ; undefined
    b4dc:	00000000 	.inst	0x00000000 ; undefined
    b4e0:	00170c00 	.inst	0x00170c00 ; undefined
    b4e4:	00000000 	.inst	0x00000000 ; undefined
    b4e8:	f3000400 	.inst	0xf3000400 ; undefined
    b4ec:	009f5001 	.inst	0x009f5001 ; undefined
	...
    b4fc:	6c000000 	stnp	d0, d0, [x0]
    b500:	00000016 	.inst	0x00000016 ; undefined
    b504:	74000000 	.inst	0x74000000 ; undefined
    b508:	00000016 	.inst	0x00000016 ; undefined
    b50c:	02000000 	.inst	0x02000000 ; undefined
    b510:	009f3000 	.inst	0x009f3000 ; undefined
	...
    b520:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    b524:	00000017 	.inst	0x00000017 ; undefined
    b528:	1f000000 	fmadd	s0, s0, s0, s0
    b52c:	00000017 	.inst	0x00000017 ; undefined
    b530:	01000000 	.inst	0x01000000 ; undefined
    b534:	171f5000 	b	fffffffffc7df534 <SMC_ID_HW_RSA+0xffffffff787cf62d>
    b538:	00000000 	.inst	0x00000000 ; undefined
    b53c:	17400000 	b	fffffffffd00b53c <SMC_ID_HW_RSA+0xffffffff78ffb635>
    b540:	00000000 	.inst	0x00000000 ; undefined
    b544:	00010000 	.inst	0x00010000 ; undefined
    b548:	00174063 	.inst	0x00174063 ; undefined
    b54c:	00000000 	.inst	0x00000000 ; undefined
    b550:	00174400 	.inst	0x00174400 ; undefined
    b554:	00000000 	.inst	0x00000000 ; undefined
    b558:	f3000400 	.inst	0xf3000400 ; undefined
    b55c:	449f5001 	.inst	0x449f5001 ; undefined
    b560:	00000017 	.inst	0x00000017 ; undefined
    b564:	48000000 	stxrh	w0, w0, [x0]
    b568:	00000017 	.inst	0x00000017 ; undefined
    b56c:	01000000 	.inst	0x01000000 ; undefined
    b570:	00006300 	.inst	0x00006300 ; undefined
	...
    b580:	170c0000 	b	fffffffffc30b580 <SMC_ID_HW_RSA+0xffffffff782fb679>
    b584:	00000000 	.inst	0x00000000 ; undefined
    b588:	171f0000 	b	fffffffffc7cb588 <SMC_ID_HW_RSA+0xffffffff787bb681>
    b58c:	00000000 	.inst	0x00000000 ; undefined
    b590:	00010000 	.inst	0x00010000 ; undefined
    b594:	00171f51 	.inst	0x00171f51 ; undefined
    b598:	00000000 	.inst	0x00000000 ; undefined
    b59c:	00174000 	.inst	0x00174000 ; undefined
    b5a0:	00000000 	.inst	0x00000000 ; undefined
    b5a4:	64000100 	.inst	0x64000100 ; undefined
    b5a8:	00001740 	.inst	0x00001740 ; undefined
    b5ac:	00000000 	.inst	0x00000000 ; undefined
    b5b0:	00001744 	.inst	0x00001744 ; undefined
    b5b4:	00000000 	.inst	0x00000000 ; undefined
    b5b8:	01f30004 	.inst	0x01f30004 ; undefined
    b5bc:	17449f51 	b	fffffffffd133300 <SMC_ID_HW_RSA+0xffffffff791233f9>
    b5c0:	00000000 	.inst	0x00000000 ; undefined
    b5c4:	17480000 	b	fffffffffd20b5c4 <SMC_ID_HW_RSA+0xffffffff791fb6bd>
    b5c8:	00000000 	.inst	0x00000000 ; undefined
    b5cc:	00010000 	.inst	0x00010000 ; undefined
    b5d0:	00000064 	.inst	0x00000064 ; undefined
	...
    b5e0:	00174800 	.inst	0x00174800 ; undefined
    b5e4:	00000000 	.inst	0x00000000 ; undefined
    b5e8:	00175b00 	.inst	0x00175b00 ; undefined
    b5ec:	00000000 	.inst	0x00000000 ; undefined
    b5f0:	50000100 	adr	x0, b612 <_stack_size+0xa612>
    b5f4:	0000175b 	.inst	0x0000175b ; undefined
    b5f8:	00000000 	.inst	0x00000000 ; undefined
    b5fc:	000017a0 	.inst	0x000017a0 ; undefined
    b600:	00000000 	.inst	0x00000000 ; undefined
    b604:	a0640001 	.inst	0xa0640001 ; undefined
    b608:	00000017 	.inst	0x00000017 ; undefined
    b60c:	a4000000 	.inst	0xa4000000 ; undefined
    b610:	00000017 	.inst	0x00000017 ; undefined
    b614:	04000000 	.inst	0x04000000 ; undefined
    b618:	5001f300 	adr	x0, f47a <_stack_size+0xe47a>
    b61c:	0017a49f 	.inst	0x0017a49f ; undefined
    b620:	00000000 	.inst	0x00000000 ; undefined
    b624:	0017a800 	.inst	0x0017a800 ; undefined
    b628:	00000000 	.inst	0x00000000 ; undefined
    b62c:	64000100 	.inst	0x64000100 ; undefined
	...
    b640:	00001748 	.inst	0x00001748 ; undefined
    b644:	00000000 	.inst	0x00000000 ; undefined
    b648:	0000175b 	.inst	0x0000175b ; undefined
    b64c:	00000000 	.inst	0x00000000 ; undefined
    b650:	5b510001 	.inst	0x5b510001 ; undefined
    b654:	00000017 	.inst	0x00000017 ; undefined
    b658:	a0000000 	.inst	0xa0000000 ; undefined
    b65c:	00000017 	.inst	0x00000017 ; undefined
    b660:	01000000 	.inst	0x01000000 ; undefined
    b664:	17a06300 	b	fffffffffe824264 <SMC_ID_HW_RSA+0xffffffff7a81435d>
    b668:	00000000 	.inst	0x00000000 ; undefined
    b66c:	17a40000 	b	fffffffffe90b66c <SMC_ID_HW_RSA+0xffffffff7a8fb765>
    b670:	00000000 	.inst	0x00000000 ; undefined
    b674:	00040000 	.inst	0x00040000 ; undefined
    b678:	9f5101f3 	.inst	0x9f5101f3 ; undefined
    b67c:	000017a4 	.inst	0x000017a4 ; undefined
    b680:	00000000 	.inst	0x00000000 ; undefined
    b684:	000017a8 	.inst	0x000017a8 ; undefined
    b688:	00000000 	.inst	0x00000000 ; undefined
    b68c:	00630001 	.inst	0x00630001 ; undefined
	...
    b69c:	a8000000 	stnp	x0, x0, [x0]
    b6a0:	00000017 	.inst	0x00000017 ; undefined
    b6a4:	bb000000 	.inst	0xbb000000 ; undefined
    b6a8:	00000017 	.inst	0x00000017 ; undefined
    b6ac:	01000000 	.inst	0x01000000 ; undefined
    b6b0:	17bb5000 	b	fffffffffeedf6b0 <SMC_ID_HW_RSA+0xffffffff7aecf7a9>
    b6b4:	00000000 	.inst	0x00000000 ; undefined
    b6b8:	18000000 	ldr	w0, b6b8 <_stack_size+0xa6b8>
    b6bc:	00000000 	.inst	0x00000000 ; undefined
    b6c0:	00010000 	.inst	0x00010000 ; undefined
    b6c4:	00180064 	.inst	0x00180064 ; undefined
    b6c8:	00000000 	.inst	0x00000000 ; undefined
    b6cc:	00180400 	.inst	0x00180400 ; undefined
    b6d0:	00000000 	.inst	0x00000000 ; undefined
    b6d4:	f3000400 	.inst	0xf3000400 ; undefined
    b6d8:	049f5001 	.inst	0x049f5001 ; undefined
    b6dc:	00000018 	.inst	0x00000018 ; undefined
    b6e0:	08000000 	stxrb	w0, w0, [x0]
    b6e4:	00000018 	.inst	0x00000018 ; undefined
    b6e8:	01000000 	.inst	0x01000000 ; undefined
    b6ec:	00006400 	.inst	0x00006400 ; undefined
	...
    b6fc:	17a80000 	b	fffffffffea0b6fc <SMC_ID_HW_RSA+0xffffffff7a9fb7f5>
    b700:	00000000 	.inst	0x00000000 ; undefined
    b704:	17bb0000 	b	fffffffffeecb704 <SMC_ID_HW_RSA+0xffffffff7aebb7fd>
    b708:	00000000 	.inst	0x00000000 ; undefined
    b70c:	00010000 	.inst	0x00010000 ; undefined
    b710:	0017bb51 	.inst	0x0017bb51 ; undefined
    b714:	00000000 	.inst	0x00000000 ; undefined
    b718:	00180000 	.inst	0x00180000 ; undefined
    b71c:	00000000 	.inst	0x00000000 ; undefined
    b720:	63000100 	.inst	0x63000100 ; undefined
    b724:	00001800 	.inst	0x00001800 ; undefined
    b728:	00000000 	.inst	0x00000000 ; undefined
    b72c:	00001804 	.inst	0x00001804 ; undefined
    b730:	00000000 	.inst	0x00000000 ; undefined
    b734:	01f30004 	.inst	0x01f30004 ; undefined
    b738:	18049f51 	ldr	w17, 14b20 <_stack_size+0x13b20>
    b73c:	00000000 	.inst	0x00000000 ; undefined
    b740:	18080000 	ldr	w0, 1b740 <_stack_size+0x1a740>
    b744:	00000000 	.inst	0x00000000 ; undefined
    b748:	00010000 	.inst	0x00010000 ; undefined
    b74c:	00000063 	.inst	0x00000063 ; undefined
	...
    b75c:	00180800 	.inst	0x00180800 ; undefined
    b760:	00000000 	.inst	0x00000000 ; undefined
    b764:	00180c00 	.inst	0x00180c00 ; undefined
    b768:	00000000 	.inst	0x00000000 ; undefined
    b76c:	50000100 	adr	x0, b78e <_stack_size+0xa78e>
    b770:	0000180c 	.inst	0x0000180c ; undefined
    b774:	00000000 	.inst	0x00000000 ; undefined
    b778:	0000181c 	.inst	0x0000181c ; undefined
    b77c:	00000000 	.inst	0x00000000 ; undefined
    b780:	1c510001 	ldr	s1, ad780 <_stack_size+0xac780>
    b784:	00000018 	.inst	0x00000018 ; undefined
    b788:	20000000 	.inst	0x20000000 ; undefined
    b78c:	00000018 	.inst	0x00000018 ; undefined
    b790:	03000000 	.inst	0x03000000 ; undefined
    b794:	9f7f7100 	.inst	0x9f7f7100 ; undefined
    b798:	00001828 	.inst	0x00001828 ; undefined
    b79c:	00000000 	.inst	0x00000000 ; undefined
    b7a0:	00001830 	.inst	0x00001830 ; undefined
    b7a4:	00000000 	.inst	0x00000000 ; undefined
    b7a8:	00510001 	.inst	0x00510001 ; undefined
	...
    b7b8:	08000000 	stxrb	w0, w0, [x0]
    b7bc:	00000018 	.inst	0x00000018 ; undefined
    b7c0:	18000000 	ldr	w0, b7c0 <_stack_size+0xa7c0>
    b7c4:	00000018 	.inst	0x00000018 ; undefined
    b7c8:	02000000 	.inst	0x02000000 ; undefined
    b7cc:	189f3000 	ldr	w0, fffffffffff49dcc <SMC_ID_HW_RSA+0xffffffff7bf39ec5>
    b7d0:	00000018 	.inst	0x00000018 ; undefined
    b7d4:	28000000 	stnp	w0, w0, [x0]
    b7d8:	00000018 	.inst	0x00000018 ; undefined
    b7dc:	01000000 	.inst	0x01000000 ; undefined
    b7e0:	18285000 	ldr	w0, 5c1e0 <_stack_size+0x5b1e0>
    b7e4:	00000000 	.inst	0x00000000 ; undefined
    b7e8:	18300000 	ldr	w0, 6b7e8 <_stack_size+0x6a7e8>
    b7ec:	00000000 	.inst	0x00000000 ; undefined
    b7f0:	00020000 	.inst	0x00020000 ; undefined
    b7f4:	00009f30 	.inst	0x00009f30 ; undefined
	...
    b80c:	005c0000 	.inst	0x005c0000 ; undefined
    b810:	00000000 	.inst	0x00000000 ; undefined
    b814:	00010000 	.inst	0x00010000 ; undefined
    b818:	00005c50 	.inst	0x00005c50 ; undefined
    b81c:	00000000 	.inst	0x00000000 ; undefined
    b820:	0000c800 	.inst	0x0000c800 ; undefined
    b824:	00000000 	.inst	0x00000000 ; undefined
    b828:	64000100 	.inst	0x64000100 ; undefined
    b82c:	000000c8 	.inst	0x000000c8 ; undefined
    b830:	00000000 	.inst	0x00000000 ; undefined
    b834:	000000e4 	.inst	0x000000e4 ; undefined
    b838:	00000000 	.inst	0x00000000 ; undefined
    b83c:	01f30004 	.inst	0x01f30004 ; undefined
    b840:	00e49f50 	.inst	0x00e49f50 ; undefined
    b844:	00000000 	.inst	0x00000000 ; undefined
    b848:	00f80000 	.inst	0x00f80000 ; undefined
    b84c:	00000000 	.inst	0x00000000 ; undefined
    b850:	00010000 	.inst	0x00010000 ; undefined
    b854:	0000f850 	.inst	0x0000f850 ; undefined
    b858:	00000000 	.inst	0x00000000 ; undefined
    b85c:	0000fc00 	.inst	0x0000fc00 ; undefined
    b860:	00000000 	.inst	0x00000000 ; undefined
    b864:	64000100 	.inst	0x64000100 ; undefined
    b868:	000000fc 	.inst	0x000000fc ; undefined
    b86c:	00000000 	.inst	0x00000000 ; undefined
    b870:	00000228 	.inst	0x00000228 ; undefined
    b874:	00000000 	.inst	0x00000000 ; undefined
    b878:	01f30004 	.inst	0x01f30004 ; undefined
    b87c:	00009f50 	.inst	0x00009f50 ; undefined
	...
    b894:	00580000 	.inst	0x00580000 ; undefined
    b898:	00000000 	.inst	0x00000000 ; undefined
    b89c:	00010000 	.inst	0x00010000 ; undefined
    b8a0:	00005851 	.inst	0x00005851 ; undefined
    b8a4:	00000000 	.inst	0x00000000 ; undefined
    b8a8:	0000cc00 	.inst	0x0000cc00 ; undefined
    b8ac:	00000000 	.inst	0x00000000 ; undefined
    b8b0:	66000100 	.inst	0x66000100 ; undefined
    b8b4:	000000cc 	.inst	0x000000cc ; undefined
    b8b8:	00000000 	.inst	0x00000000 ; undefined
    b8bc:	000000e4 	.inst	0x000000e4 ; undefined
    b8c0:	00000000 	.inst	0x00000000 ; undefined
    b8c4:	01f30004 	.inst	0x01f30004 ; undefined
    b8c8:	00e49f51 	.inst	0x00e49f51 ; undefined
    b8cc:	00000000 	.inst	0x00000000 ; undefined
    b8d0:	01000000 	.inst	0x01000000 ; undefined
    b8d4:	00000000 	.inst	0x00000000 ; undefined
    b8d8:	00010000 	.inst	0x00010000 ; undefined
    b8dc:	00010051 	.inst	0x00010051 ; undefined
    b8e0:	00000000 	.inst	0x00000000 ; undefined
    b8e4:	00018800 	.inst	0x00018800 ; undefined
    b8e8:	00000000 	.inst	0x00000000 ; undefined
    b8ec:	66000100 	.inst	0x66000100 ; undefined
    b8f0:	00000188 	.inst	0x00000188 ; undefined
    b8f4:	00000000 	.inst	0x00000000 ; undefined
    b8f8:	00000200 	.inst	0x00000200 ; undefined
    b8fc:	00000000 	.inst	0x00000000 ; undefined
    b900:	01f30004 	.inst	0x01f30004 ; undefined
    b904:	02009f51 	.inst	0x02009f51 ; undefined
    b908:	00000000 	.inst	0x00000000 ; undefined
    b90c:	02280000 	.inst	0x02280000 ; undefined
    b910:	00000000 	.inst	0x00000000 ; undefined
    b914:	00010000 	.inst	0x00010000 ; undefined
    b918:	00000066 	.inst	0x00000066 ; undefined
	...
    b930:	00002400 	.inst	0x00002400 ; undefined
    b934:	00000000 	.inst	0x00000000 ; undefined
    b938:	52000100 	eor	w0, w8, #0x1
    b93c:	00000024 	.inst	0x00000024 ; undefined
    b940:	00000000 	.inst	0x00000000 ; undefined
    b944:	000000cc 	.inst	0x000000cc ; undefined
    b948:	00000000 	.inst	0x00000000 ; undefined
    b94c:	cc630001 	.inst	0xcc630001 ; undefined
    b950:	00000000 	.inst	0x00000000 ; undefined
    b954:	e4000000 	.inst	0xe4000000 ; undefined
    b958:	00000000 	.inst	0x00000000 ; undefined
    b95c:	04000000 	.inst	0x04000000 ; undefined
    b960:	5201f300 	eor	w0, w24, #0xaaaaaaaa
    b964:	0000e49f 	.inst	0x0000e49f ; undefined
    b968:	00000000 	.inst	0x00000000 ; undefined
    b96c:	0000fc00 	.inst	0x0000fc00 ; undefined
    b970:	00000000 	.inst	0x00000000 ; undefined
    b974:	63000100 	.inst	0x63000100 ; undefined
    b978:	000000fc 	.inst	0x000000fc ; undefined
    b97c:	00000000 	.inst	0x00000000 ; undefined
    b980:	00000100 	.inst	0x00000100 ; undefined
    b984:	00000000 	.inst	0x00000000 ; undefined
    b988:	01f30004 	.inst	0x01f30004 ; undefined
    b98c:	01009f52 	.inst	0x01009f52 ; undefined
    b990:	00000000 	.inst	0x00000000 ; undefined
    b994:	01280000 	.inst	0x01280000 ; undefined
    b998:	00000000 	.inst	0x00000000 ; undefined
    b99c:	00010000 	.inst	0x00010000 ; undefined
    b9a0:	00012863 	.inst	0x00012863 ; undefined
    b9a4:	00000000 	.inst	0x00000000 ; undefined
    b9a8:	00022800 	.inst	0x00022800 ; undefined
    b9ac:	00000000 	.inst	0x00000000 ; undefined
    b9b0:	f3000400 	.inst	0xf3000400 ; undefined
    b9b4:	009f5201 	.inst	0x009f5201 ; undefined
	...
    b9cc:	18000000 	ldr	w0, b9cc <_stack_size+0xa9cc>
    b9d0:	00000000 	.inst	0x00000000 ; undefined
    b9d4:	01000000 	.inst	0x01000000 ; undefined
    b9d8:	00185300 	.inst	0x00185300 ; undefined
    b9dc:	00000000 	.inst	0x00000000 ; undefined
    b9e0:	00cc0000 	.inst	0x00cc0000 ; undefined
    b9e4:	00000000 	.inst	0x00000000 ; undefined
    b9e8:	00010000 	.inst	0x00010000 ; undefined
    b9ec:	0000cc65 	.inst	0x0000cc65 ; undefined
    b9f0:	00000000 	.inst	0x00000000 ; undefined
    b9f4:	0000e400 	.inst	0x0000e400 ; undefined
    b9f8:	00000000 	.inst	0x00000000 ; undefined
    b9fc:	f3000400 	.inst	0xf3000400 ; undefined
    ba00:	e49f5301 	.inst	0xe49f5301 ; undefined
    ba04:	00000000 	.inst	0x00000000 ; undefined
    ba08:	e8000000 	.inst	0xe8000000 ; undefined
    ba0c:	00000000 	.inst	0x00000000 ; undefined
    ba10:	01000000 	.inst	0x01000000 ; undefined
    ba14:	00e86500 	.inst	0x00e86500 ; undefined
    ba18:	00000000 	.inst	0x00000000 ; undefined
    ba1c:	01000000 	.inst	0x01000000 ; undefined
    ba20:	00000000 	.inst	0x00000000 ; undefined
    ba24:	00040000 	.inst	0x00040000 ; undefined
    ba28:	9f5301f3 	.inst	0x9f5301f3 ; undefined
    ba2c:	00000100 	.inst	0x00000100 ; undefined
    ba30:	00000000 	.inst	0x00000000 ; undefined
    ba34:	0000017c 	.inst	0x0000017c ; undefined
    ba38:	00000000 	.inst	0x00000000 ; undefined
    ba3c:	7c650001 	.inst	0x7c650001 ; undefined
    ba40:	00000001 	.inst	0x00000001 ; undefined
    ba44:	00000000 	.inst	0x00000000 ; undefined
    ba48:	00000002 	.inst	0x00000002 ; undefined
    ba4c:	04000000 	.inst	0x04000000 ; undefined
    ba50:	5301f300 	.inst	0x5301f300 ; undefined
    ba54:	0002009f 	.inst	0x0002009f ; undefined
    ba58:	00000000 	.inst	0x00000000 ; undefined
    ba5c:	00022800 	.inst	0x00022800 ; undefined
    ba60:	00000000 	.inst	0x00000000 ; undefined
    ba64:	65000100 	.inst	0x65000100 ; undefined
	...
    ba80:	00000063 	.inst	0x00000063 ; undefined
    ba84:	00000000 	.inst	0x00000000 ; undefined
    ba88:	63540001 	.inst	0x63540001 ; undefined
    ba8c:	00000000 	.inst	0x00000000 ; undefined
    ba90:	d4000000 	.inst	0xd4000000 ; undefined
    ba94:	00000000 	.inst	0x00000000 ; undefined
    ba98:	01000000 	.inst	0x01000000 ; undefined
    ba9c:	00d46700 	.inst	0x00d46700 ; undefined
    baa0:	00000000 	.inst	0x00000000 ; undefined
    baa4:	00e40000 	.inst	0x00e40000 ; undefined
    baa8:	00000000 	.inst	0x00000000 ; undefined
    baac:	00040000 	.inst	0x00040000 ; undefined
    bab0:	9f5401f3 	.inst	0x9f5401f3 ; undefined
    bab4:	000000e4 	.inst	0x000000e4 ; undefined
    bab8:	00000000 	.inst	0x00000000 ; undefined
    babc:	00000100 	.inst	0x00000100 ; undefined
    bac0:	00000000 	.inst	0x00000000 ; undefined
    bac4:	00540001 	.inst	0x00540001 ; undefined
    bac8:	00000001 	.inst	0x00000001 ; undefined
    bacc:	28000000 	stnp	w0, w0, [x0]
    bad0:	00000002 	.inst	0x00000002 ; undefined
    bad4:	01000000 	.inst	0x01000000 ; undefined
    bad8:	00006700 	.inst	0x00006700 ; undefined
	...
    baf0:	00cc0000 	.inst	0x00cc0000 ; undefined
    baf4:	00000000 	.inst	0x00000000 ; undefined
    baf8:	00030000 	.inst	0x00030000 ; undefined
    bafc:	e49fff08 	.inst	0xe49fff08 ; undefined
    bb00:	00000000 	.inst	0x00000000 ; undefined
    bb04:	28000000 	stnp	w0, w0, [x0]
    bb08:	00000001 	.inst	0x00000001 ; undefined
    bb0c:	03000000 	.inst	0x03000000 ; undefined
    bb10:	9fff0800 	.inst	0x9fff0800 ; undefined
    bb14:	00000128 	.inst	0x00000128 ; undefined
    bb18:	00000000 	.inst	0x00000000 ; undefined
    bb1c:	00000130 	.inst	0x00000130 ; undefined
    bb20:	00000000 	.inst	0x00000000 ; undefined
    bb24:	30500001 	adr	x1, abb25 <_stack_size+0xaab25>
    bb28:	00000001 	.inst	0x00000001 ; undefined
    bb2c:	00000000 	.inst	0x00000000 ; undefined
    bb30:	00000002 	.inst	0x00000002 ; undefined
    bb34:	01000000 	.inst	0x01000000 ; undefined
    bb38:	02006300 	.inst	0x02006300 ; undefined
    bb3c:	00000000 	.inst	0x00000000 ; undefined
    bb40:	02040000 	.inst	0x02040000 ; undefined
    bb44:	00000000 	.inst	0x00000000 ; undefined
    bb48:	00010000 	.inst	0x00010000 ; undefined
    bb4c:	00020450 	.inst	0x00020450 ; undefined
    bb50:	00000000 	.inst	0x00000000 ; undefined
    bb54:	00022800 	.inst	0x00022800 ; undefined
    bb58:	00000000 	.inst	0x00000000 ; undefined
    bb5c:	63000100 	.inst	0x63000100 ; undefined
	...

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
       0:	5f737973 	sqdmlsl	s19, h11, v3.h[7]
       4:	63616364 	.inst	0x63616364 ; undefined
       8:	665f6568 	.inst	0x665f6568 ; undefined
       c:	6873756c 	.inst	0x6873756c ; undefined
      10:	6c6c615f 	ldnp	d31, d24, [x10,#-320]
      14:	756d6d00 	.inst	0x756d6d00 ; undefined
      18:	616e655f 	.inst	0x616e655f ; undefined
      1c:	64656c62 	.inst	0x64656c62 ; undefined
      20:	756d6d00 	.inst	0x756d6d00 ; undefined
      24:	7465735f 	.inst	0x7465735f ; undefined
      28:	73007075 	.inst	0x73007075 ; undefined
      2c:	74726f68 	.inst	0x74726f68 ; undefined
      30:	746e6920 	.inst	0x746e6920 ; undefined
      34:	61747300 	.inst	0x61747300 ; undefined
      38:	615f7472 	.inst	0x615f7472 ; undefined
      3c:	55007264 	.inst	0x55007264 ; undefined
      40:	33544e49 	.inst	0x33544e49 ; undefined
      44:	65730032 	.inst	0x65730032 ; undefined
      48:	43535f74 	.inst	0x43535f74 ; undefined
      4c:	5f524c54 	.inst	0x5f524c54 ; undefined
      50:	00334c45 	.inst	0x00334c45 ; NYI
      54:	5f646e65 	.inst	0x5f646e65 ; undefined
      58:	00726461 	.inst	0x00726461 ; undefined
      5c:	73615f5f 	.inst	0x73615f5f ; undefined
      60:	6c665f6d 	ldnp	d13, d23, [x27,#-416]
      64:	5f687375 	sqdmlsl	s21, h27, v8.h[2]
      68:	63616364 	.inst	0x63616364 ; undefined
      6c:	615f6568 	.inst	0x615f6568 ; undefined
      70:	64006c6c 	.inst	0x64006c6c ; undefined
      74:	62617369 	.inst	0x62617369 ; undefined
      78:	6d5f656c 	ldp	d12, d25, [x11,#496]
      7c:	635f756d 	.inst	0x635f756d ; undefined
      80:	65686361 	.inst	0x65686361 ; undefined
      84:	6e697500 	uabd	v0.8h, v8.8h, v9.8h
      88:	72747074 	.inst	0x72747074 ; undefined
      8c:	7300745f 	.inst	0x7300745f ; undefined
      90:	645f7379 	.inst	0x645f7379 ; undefined
      94:	68636163 	.inst	0x68636163 ; undefined
      98:	6c665f65 	ldnp	d5, d23, [x27,#-416]
      9c:	5f687375 	sqdmlsl	s21, h27, v8.h[2]
      a0:	0041564d 	.inst	0x0041564d ; undefined
      a4:	676e6f6c 	.inst	0x676e6f6c ; undefined
      a8:	6e6f6c20 	umin	v0.8h, v1.8h, v15.8h
      ac:	6e692067 	usubl2	v7.4s, v3.8h, v9.8h
      b0:	5f5f0074 	.inst	0x5f5f0074 ; undefined
      b4:	5f6d7361 	sqdmlsl	s1, h27, v13.h[2]
      b8:	61766e69 	.inst	0x61766e69 ; undefined
      bc:	6164696c 	.inst	0x6164696c ; undefined
      c0:	695f6574 	ldpsw	x20, x25, [x11,#248]
      c4:	68636163 	.inst	0x68636163 ; undefined
      c8:	6c615f65 	ldnp	d5, d23, [x27,#-496]
      cc:	6e65006c 	uaddl2	v12.4s, v3.8h, v5.8h
      d0:	656c6261 	.inst	0x656c6261 ; undefined
      d4:	6163645f 	.inst	0x6163645f ; undefined
      d8:	00656863 	.inst	0x00656863 ; undefined
      dc:	5f737973 	sqdmlsl	s19, h11, v3.h[7]
      e0:	72736962 	.inst	0x72736962 ; undefined
      e4:	6e6f645f 	umax	v31.8h, v2.8h, v15.8h
      e8:	70630065 	adr	x5, c60f7 <_stack_size+0xc50f7>
      ec:	6c65645f 	ldnp	d31, d25, [x2,#-432]
      f0:	70007961 	adr	x1, 101f <_stack_size+0x1f>
      f4:	5f656761 	.inst	0x5f656761 ; undefined
      f8:	6c626174 	ldnp	d20, d24, [x11,#-480]
      fc:	6e750065 	uaddl2	v5.4s, v3.8h, v21.8h
     100:	6e676973 	.inst	0x6e676973 ; undefined
     104:	63206465 	.inst	0x63206465 ; undefined
     108:	00726168 	.inst	0x00726168 ; undefined
     10c:	676e6f6c 	.inst	0x676e6f6c ; undefined
     110:	6e6f6c20 	umin	v0.8h, v1.8h, v15.8h
     114:	6e752067 	usubl2	v7.4s, v3.8h, v21.8h
     118:	6e676973 	.inst	0x6e676973 ; undefined
     11c:	69206465 	.inst	0x69206465 ; undefined
     120:	6200746e 	.inst	0x6200746e ; undefined
     124:	63616364 	.inst	0x63616364 ; undefined
     128:	72006568 	ands	w8, w11, #0x3ffffff
     12c:	32336765 	orr	w5, w27, #0xffffe07f
     130:	6f687300 	.inst	0x6f687300 ; undefined
     134:	75207472 	.inst	0x75207472 ; undefined
     138:	6769736e 	.inst	0x6769736e ; undefined
     13c:	2064656e 	.inst	0x2064656e ; undefined
     140:	00746e69 	.inst	0x00746e69 ; undefined
     144:	636e7566 	.inst	0x636e7566 ; undefined
     148:	706f6e5f 	adr	xzr, def13 <_stack_size+0xddf13>
     14c:	6d726100 	ldp	d0, d24, [x8,#-224]
     150:	696e695f 	ldpsw	xzr, x26, [x10,#-144]
     154:	65625f74 	.inst	0x65625f74 ; undefined
     158:	65726f66 	.inst	0x65726f66 ; undefined
     15c:	756d6d5f 	.inst	0x756d6d5f ; undefined
     160:	63616300 	.inst	0x63616300 ; undefined
     164:	625f6568 	.inst	0x625f6568 ; undefined
     168:	73007469 	.inst	0x73007469 ; undefined
     16c:	00636e79 	.inst	0x00636e79 ; undefined
     170:	73615f5f 	.inst	0x73615f5f ; undefined
     174:	6c665f6d 	ldnp	d13, d23, [x27,#-416]
     178:	5f687375 	sqdmlsl	s21, h27, v8.h[2]
     17c:	63616364 	.inst	0x63616364 ; undefined
     180:	725f6568 	.inst	0x725f6568 ; undefined
     184:	65676e61 	.inst	0x65676e61 ; undefined
     188:	554e4700 	.inst	0x554e4700 ; undefined
     18c:	34204320 	cbz	w0, 409f0 <_stack_size+0x3f9f0>
     190:	332e392e 	.inst	0x332e392e ; undefined
     194:	31303220 	adds	w0, w17, #0xc0c
     198:	31343035 	adds	w21, w1, #0xd0c
     19c:	70282033 	adr	x19, 505a3 <_stack_size+0x4f5a3>
     1a0:	65726572 	.inst	0x65726572 ; undefined
     1a4:	7361656c 	.inst	0x7361656c ; undefined
     1a8:	2d202965 	stp	s5, s10, [x11,#-256]
     1ac:	74696c6d 	.inst	0x74696c6d ; undefined
     1b0:	2d656c74 	ldp	s20, s27, [x3,#-216]
     1b4:	69646e65 	ldpsw	x5, x27, [x19,#-224]
     1b8:	2d206e61 	stp	s1, s27, [x19,#-256]
     1bc:	6e75746d 	uabd	v13.8h, v3.8h, v21.8h
     1c0:	6f633d65 	.inst	0x6f633d65 ; undefined
     1c4:	78657472 	.inst	0x78657472 ; undefined
     1c8:	3335612d 	.inst	0x3335612d ; undefined
     1cc:	616d2d20 	.inst	0x616d2d20 ; undefined
     1d0:	3d686372 	ldr	b18, [x27,#2584]
     1d4:	766d7261 	.inst	0x766d7261 ; undefined
     1d8:	20612d38 	.inst	0x20612d38 ; undefined
     1dc:	70636d2d 	adr	x13, c6f83 <_stack_size+0xc5f83>
     1e0:	6f633d75 	.inst	0x6f633d75 ; undefined
     1e4:	78657472 	.inst	0x78657472 ; undefined
     1e8:	3335612d 	.inst	0x3335612d ; undefined
     1ec:	6c6d2d20 	ldnp	d0, d11, [x9,#-304]
     1f0:	6c747469 	ldnp	d9, d29, [x3,#-192]
     1f4:	6e652d65 	uqsub	v5.8h, v11.8h, v5.8h
     1f8:	6e616964 	fcvtxn2	v4.4s, v11.2d
     1fc:	616d2d20 	.inst	0x616d2d20 ; undefined
     200:	6c3d6962 	stnp	d2, d26, [x11,#-48]
     204:	20343670 	.inst	0x20343670 ; undefined
     208:	2d20672d 	stp	s13, s25, [x25,#-256]
     20c:	2d20324f 	stp	s15, s12, [x18,#-256]
     210:	65737566 	.inst	0x65737566 ; undefined
     214:	736c742d 	.inst	0x736c742d ; undefined
     218:	6f662d20 	.inst	0x6f662d20 ; undefined
     21c:	2d74696d 	ldp	s13, s26, [x11,#-96]
     220:	6d617266 	ldp	d6, d28, [x19,#-496]
     224:	6f702d65 	.inst	0x6f702d65 ; undefined
     228:	65746e69 	.inst	0x65746e69 ; undefined
     22c:	662d2072 	.inst	0x662d2072 ; undefined
     230:	632d6f6e 	.inst	0x632d6f6e ; undefined
     234:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
     238:	662d206e 	.inst	0x662d206e ; undefined
     23c:	702d6f6e 	adr	x14, 5b02b <_stack_size+0x5a02b>
     240:	5f006369 	.inst	0x5f006369 ; undefined
     244:	6d73615f 	ldp	d31, d24, [x10,#-208]
     248:	766e695f 	.inst	0x766e695f ; undefined
     24c:	64696c61 	.inst	0x64696c61 ; undefined
     250:	5f657461 	sqshl	d1, d3, #37
     254:	63616364 	.inst	0x63616364 ; undefined
     258:	615f6568 	.inst	0x615f6568 ; undefined
     25c:	5f006c6c 	.inst	0x5f006c6c ; undefined
     260:	6d73615f 	ldp	d31, d24, [x10,#-208]
     264:	766e695f 	.inst	0x766e695f ; undefined
     268:	64696c61 	.inst	0x64696c61 ; undefined
     26c:	5f657461 	sqshl	d1, d3, #37
     270:	5f626c74 	.inst	0x5f626c74 ; undefined
     274:	006c6c61 	.inst	0x006c6c61 ; undefined
     278:	62616e65 	.inst	0x62616e65 ; undefined
     27c:	6d5f656c 	ldp	d12, d25, [x11,#496]
     280:	635f756d 	.inst	0x635f756d ; undefined
     284:	65686361 	.inst	0x65686361 ; undefined
     288:	6f682f00 	.inst	0x6f682f00 ; undefined
     28c:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
     290:	73696465 	.inst	0x73696465 ; undefined
     294:	735f6e6f 	.inst	0x735f6e6f ; undefined
     298:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
     29c:	726f6874 	.inst	0x726f6874 ; undefined
     2a0:	7572742f 	.inst	0x7572742f ; undefined
     2a4:	382d6b6e 	strb	w14, [x27,x13]
     2a8:	442f312e 	.inst	0x442f312e ; undefined
     2ac:	425f4554 	.inst	0x425f4554 ; undefined
     2b0:	63746f6f 	.inst	0x63746f6f ; undefined
     2b4:	2f65646f 	.inst	0x2f65646f ; undefined
     2b8:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
     2bc:	732f2e2e 	.inst	0x732f2e2e ; undefined
     2c0:	612f6372 	.inst	0x612f6372 ; undefined
     2c4:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
     2c8:	65736572 	.inst	0x65736572 ; undefined
     2cc:	6f622f74 	.inst	0x6f622f74 ; undefined
     2d0:	6576746f 	.inst	0x6576746f ; undefined
     2d4:	726f7463 	.inst	0x726f7463 ; undefined
     2d8:	6361632f 	.inst	0x6361632f ; undefined
     2dc:	765f6568 	.inst	0x765f6568 ; undefined
     2e0:	00632e38 	.inst	0x00632e38 ; undefined
     2e4:	636f6c62 	.inst	0x636f6c62 ; undefined
     2e8:	65645f6b 	.inst	0x65645f6b ; undefined
     2ec:	69726373 	ldpsw	x19, x24, [x27,#-112]
     2f0:	726f7470 	.inst	0x726f7470 ; undefined
     2f4:	4e495500 	.inst	0x4e495500 ; undefined
     2f8:	00343654 	.inst	0x00343654 ; NYI
     2fc:	5f746567 	.inst	0x5f746567 ; undefined
     300:	4c544353 	.inst	0x4c544353 ; undefined
     304:	4c455f52 	.inst	0x4c455f52 ; undefined
     308:	61730033 	.inst	0x61730033 ; undefined
     30c:	625f6576 	.inst	0x625f6576 ; undefined
     310:	61746f6f 	.inst	0x61746f6f ; undefined
     314:	79617272 	ldrh	w18, [x19,#4280]
     318:	5f77665f 	.inst	0x5f77665f ; undefined
     31c:	72746e65 	.inst	0x72746e65 ; undefined
     320:	00736569 	.inst	0x00736569 ; undefined
     324:	73726576 	.inst	0x73726576 ; undefined
     328:	006e6f69 	.inst	0x006e6f69 ; undefined
     32c:	5f534541 	.inst	0x5f534541 ; undefined
     330:	41544f54 	.inst	0x41544f54 ; undefined
     334:	4f4d5f4c 	.inst	0x4f4d5f4c ; undefined
     338:	00534544 	.inst	0x00534544 ; undefined
     33c:	73616c66 	.inst	0x73616c66 ; undefined
     340:	64615f68 	.inst	0x64615f68 ; undefined
     344:	2f007264 	.inst	0x2f007264 ; undefined
     348:	656d6f68 	.inst	0x656d6f68 ; undefined
     34c:	64652f31 	.inst	0x64652f31 ; undefined
     350:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
     354:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
     358:	68742f68 	.inst	0x68742f68 ; undefined
     35c:	742f726f 	.inst	0x742f726f ; undefined
     360:	6b6e7572 	.inst	0x6b6e7572 ; undefined
     364:	312e382d 	adds	w13, w1, #0xb8e
     368:	4554442f 	.inst	0x4554442f ; undefined
     36c:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
     370:	646f6374 	.inst	0x646f6374 ; undefined
     374:	69622f65 	ldpsw	x5, x11, [x27,#-240]
     378:	6567006e 	.inst	0x6567006e ; undefined
     37c:	68635f74 	.inst	0x68635f74 ; undefined
     380:	725f7069 	.inst	0x725f7069 ; undefined
     384:	695f7665 	ldpsw	x5, x29, [x19,#248]
     388:	61660064 	.inst	0x61660064 ; undefined
     38c:	44746c75 	.inst	0x44746c75 ; undefined
     390:	63657465 	.inst	0x63657465 ; undefined
     394:	6f420074 	mla	v20.8h, v3.8h, v2.h[0]
     398:	7241746f 	.inst	0x7241746f ; undefined
     39c:	5f796172 	.inst	0x5f796172 ; undefined
     3a0:	455f5746 	.inst	0x455f5746 ; undefined
     3a4:	7972746e 	ldrh	w14, [x3,#6458]
     3a8:	73656100 	.inst	0x73656100 ; undefined
     3ac:	65646f6d 	.inst	0x65646f6d ; undefined
     3b0:	73797300 	.inst	0x73797300 ; undefined
     3b4:	7365615f 	.inst	0x7365615f ; undefined
     3b8:	646f6d5f 	.inst	0x646f6d5f ; undefined
     3bc:	6f420065 	mla	v5.8h, v3.8h, v2.h[0]
     3c0:	7241746f 	.inst	0x7241746f ; undefined
     3c4:	5f796172 	.inst	0x5f796172 ; undefined
     3c8:	455f5746 	.inst	0x455f5746 ; undefined
     3cc:	7972746e 	ldrh	w14, [x3,#6458]
     3d0:	6e00545f 	.inst	0x6e00545f ; undefined
     3d4:	5f646e61 	.inst	0x5f646e61 ; undefined
     3d8:	74696e69 	.inst	0x74696e69 ; undefined
     3dc:	006c6169 	.inst	0x006c6169 ; undefined
     3e0:	5f534541 	.inst	0x5f534541 ; undefined
     3e4:	45444f4d 	.inst	0x45444f4d ; undefined
     3e8:	3635325f 	tbz	wzr, #6, ffffffffffffaa30 <SMC_ID_HW_RSA+0xffffffff7bfeab29>
     3ec:	6f727000 	.inst	0x6f727000 ; undefined
     3f0:	73736563 	.inst	0x73736563 ; undefined
     3f4:	6574645f 	.inst	0x6574645f ; undefined
     3f8:	5f77665f 	.inst	0x5f77665f ; undefined
     3fc:	74726563 	.inst	0x74726563 ; undefined
     400:	63696669 	.inst	0x63696669 ; undefined
     404:	00657461 	.inst	0x00657461 ; undefined
     408:	6d736561 	ldp	d1, d25, [x11,#-208]
     40c:	5f65646f 	.inst	0x5f65646f ; undefined
     410:	6f420074 	mla	v20.8h, v3.8h, v2.h[0]
     414:	7241746f 	.inst	0x7241746f ; undefined
     418:	5f796172 	.inst	0x5f796172 ; undefined
     41c:	545f5746 	b.vs	bef04 <_stack_size+0xbdf04>
     420:	656c6261 	.inst	0x656c6261 ; undefined
     424:	6500545f 	.inst	0x6500545f ; undefined
     428:	5f636d6d 	.inst	0x5f636d6d ; undefined
     42c:	74726170 	.inst	0x74726170 ; undefined
     430:	6f697469 	uqshl	v9.2d, v3.2d, #41
     434:	682f006e 	.inst	0x682f006e ; undefined
     438:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
     43c:	6964652f 	ldpsw	x15, x25, [x9,#-224]
     440:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
     444:	68696873 	.inst	0x68696873 ; undefined
     448:	6f68742f 	uqshl	v15.2d, v1.2d, #40
     44c:	72742f72 	.inst	0x72742f72 ; undefined
     450:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
     454:	2f312e38 	.inst	0x2f312e38 ; undefined
     458:	5f455444 	shl	d4, d2, #5
     45c:	746f6f42 	.inst	0x746f6f42 ; undefined
     460:	65646f63 	.inst	0x65646f63 ; undefined
     464:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
     468:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     46c:	2f637273 	.inst	0x2f637273 ; undefined
     470:	68637261 	.inst	0x68637261 ; undefined
     474:	7365722f 	.inst	0x7365722f ; undefined
     478:	622f7465 	.inst	0x622f7465 ; undefined
     47c:	76746f6f 	.inst	0x76746f6f ; undefined
     480:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
     484:	5f632f72 	.inst	0x5f632f72 ; undefined
     488:	72746e65 	.inst	0x72746e65 ; undefined
     48c:	00632e79 	.inst	0x00632e79 ; undefined
     490:	5f534541 	.inst	0x5f534541 ; undefined
     494:	45444f4d 	.inst	0x45444f4d ; undefined
     498:	3239315f 	orr	wsp, w10, #0xfff80
     49c:	4e414e00 	.inst	0x4e414e00 ; undefined
     4a0:	43455f44 	.inst	0x43455f44 ; undefined
     4a4:	4f545f43 	.inst	0x4f545f43 ; undefined
     4a8:	5f4c4154 	.inst	0x5f4c4154 ; undefined
     4ac:	45505954 	.inst	0x45505954 ; undefined
     4b0:	74656700 	.inst	0x74656700 ; undefined
     4b4:	6f6f625f 	umlsl2	v31.4s, v18.8h, v15.h[2]
     4b8:	6c665f74 	ldnp	d20, d23, [x27,#-416]
     4bc:	5f687361 	sqdmlsl	s1, h27, v8.h[2]
     4c0:	65707974 	.inst	0x65707974 ; undefined
     4c4:	6f727000 	.inst	0x6f727000 ; undefined
     4c8:	73736563 	.inst	0x73736563 ; undefined
     4cc:	6574645f 	.inst	0x6574645f ; undefined
     4d0:	6f6f625f 	umlsl2	v31.4s, v18.8h, v15.h[2]
     4d4:	646f6374 	.inst	0x646f6374 ; undefined
     4d8:	74725f65 	.inst	0x74725f65 ; undefined
     4dc:	7973006b 	ldrh	w11, [x3,#6528]
     4e0:	6c625f73 	ldnp	d19, d23, [x27,#-480]
     4e4:	5f646e69 	.inst	0x5f646e69 ; undefined
     4e8:	69727775 	ldpsw	x21, x29, [x27,#-112]
     4ec:	73006574 	.inst	0x73006574 ; undefined
     4f0:	655f7379 	.inst	0x655f7379 ; undefined
     4f4:	6f6e7272 	.inst	0x6f6e7272 ; undefined
     4f8:	53454100 	.inst	0x53454100 ; undefined
     4fc:	444f4d5f 	.inst	0x444f4d5f ; undefined
     500:	32315f45 	orr	w5, w26, #0xffff807f
     504:	79730038 	ldrh	w24, [x1,#6528]
     508:	73695f73 	.inst	0x73695f73 ; undefined
     50c:	7363735f 	.inst	0x7363735f ; undefined
     510:	7463615f 	.inst	0x7463615f ; undefined
     514:	74617669 	.inst	0x74617669 ; undefined
     518:	73006465 	.inst	0x73006465 ; undefined
     51c:	725f7379 	.inst	0x725f7379 ; undefined
     520:	5f6c6165 	.inst	0x5f6c6165 ; undefined
     524:	746f6f62 	.inst	0x746f6f62 ; undefined
     528:	65646f63 	.inst	0x65646f63 ; undefined
     52c:	7a69735f 	.inst	0x7a69735f ; undefined
     530:	45410065 	.inst	0x45410065 ; undefined
     534:	4f4d5f53 	.inst	0x4f4d5f53 ; undefined
     538:	325f4544 	.inst	0x325f4544 ; undefined
     53c:	315f3635 	adds	w21, w17, #0x7cd, lsl #12
     540:	4e414e00 	.inst	0x4e414e00 ; undefined
     544:	43455f44 	.inst	0x43455f44 ; undefined
     548:	59545f43 	.inst	0x59545f43 ; undefined
     54c:	365f4550 	tbz	w16, #11, ffffffffffffedf4 <SMC_ID_HW_RSA+0xffffffff7bfeeeed>
     550:	00544942 	.inst	0x00544942 ; undefined
     554:	74696e69 	.inst	0x74696e69 ; undefined
     558:	7261765f 	.inst	0x7261765f ; undefined
     55c:	6c626169 	ldnp	d9, d24, [x11,#-480]
     560:	70007365 	adr	x5, 13cf <_stack_size+0x3cf>
     564:	746e6972 	.inst	0x746e6972 ; undefined
     568:	616e0073 	.inst	0x616e0073 ; undefined
     56c:	6365646e 	.inst	0x6365646e ; undefined
     570:	70797463 	adr	x3, f33ff <_stack_size+0xf23ff>
     574:	00745f65 	.inst	0x00745f65 ; undefined
     578:	5f737973 	sqdmlsl	s19, h11, v3.h[7]
     57c:	746f6f62 	.inst	0x746f6f62 ; undefined
     580:	616c665f 	.inst	0x616c665f ; undefined
     584:	745f6873 	.inst	0x745f6873 ; undefined
     588:	00657079 	.inst	0x00657079 ; undefined
     58c:	5f737973 	sqdmlsl	s19, h11, v3.h[7]
     590:	5f617372 	sqdmlsl	s18, h27, v1.h[2]
     594:	5f79656b 	.inst	0x5f79656b ; undefined
     598:	72646461 	.inst	0x72646461 ; undefined
     59c:	7a697300 	.inst	0x7a697300 ; undefined
     5a0:	70797465 	adr	x5, f342f <_stack_size+0xf242f>
     5a4:	6e690065 	uaddl2	v5.4s, v3.8h, v9.8h
     5a8:	665f7469 	.inst	0x665f7469 ; undefined
     5ac:	6873616c 	.inst	0x6873616c ; undefined
     5b0:	67616d00 	.inst	0x67616d00 ; undefined
     5b4:	72006369 	ands	w9, w27, #0x1ffffff
     5b8:	72657365 	.inst	0x72657365 ; undefined
     5bc:	00646576 	.inst	0x00646576 ; undefined
     5c0:	5f737973 	sqdmlsl	s19, h11, v3.h[7]
     5c4:	646e616e 	.inst	0x646e616e ; undefined
     5c8:	7079745f 	adr	xzr, f3453 <_stack_size+0xf2453>
     5cc:	6e690065 	uaddl2	v5.4s, v3.8h, v9.8h
     5d0:	635f7469 	.inst	0x635f7469 ; undefined
     5d4:	5f647261 	sqdmlsl	s1, h19, v4.h[2]
     5d8:	00616372 	.inst	0x00616372 ; undefined
     5dc:	444e414e 	.inst	0x444e414e ; undefined
     5e0:	4343455f 	.inst	0x4343455f ; undefined
     5e4:	5059545f 	adr	xzr, b306e <_stack_size+0xb206e>
     5e8:	32315f45 	orr	w5, w26, #0xffff807f
     5ec:	00544942 	.inst	0x00544942 ; undefined
     5f0:	6e655f63 	uqrshl	v3.8h, v27.8h, v5.8h
     5f4:	00797274 	.inst	0x00797274 ; undefined
     5f8:	646e616e 	.inst	0x646e616e ; undefined
     5fc:	74636365 	.inst	0x74636365 ; undefined
     600:	00657079 	.inst	0x00657079 ; undefined
     604:	544e4955 	.inst	0x544e4955 ; undefined
     608:	65520038 	.inst	0x65520038 ; undefined
     60c:	63656c66 	.inst	0x63656c66 ; undefined
     610:	6f700074 	mla	v20.8h, v3.8h, v0.h[3]
     614:	6f6e796c 	.inst	0x6f6e796c ; undefined
     618:	6c61696d 	ldnp	d13, d26, [x11,#-496]
     61c:	6f682f00 	.inst	0x6f682f00 ; undefined
     620:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
     624:	73696465 	.inst	0x73696465 ; undefined
     628:	735f6e6f 	.inst	0x735f6e6f ; undefined
     62c:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
     630:	726f6874 	.inst	0x726f6874 ; undefined
     634:	7572742f 	.inst	0x7572742f ; undefined
     638:	382d6b6e 	strb	w14, [x27,x13]
     63c:	442f312e 	.inst	0x442f312e ; undefined
     640:	425f4554 	.inst	0x425f4554 ; undefined
     644:	63746f6f 	.inst	0x63746f6f ; undefined
     648:	2f65646f 	.inst	0x2f65646f ; undefined
     64c:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
     650:	732f2e2e 	.inst	0x732f2e2e ; undefined
     654:	612f6372 	.inst	0x612f6372 ; undefined
     658:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
     65c:	65736572 	.inst	0x65736572 ; undefined
     660:	6f622f74 	.inst	0x6f622f74 ; undefined
     664:	6576746f 	.inst	0x6576746f ; undefined
     668:	726f7463 	.inst	0x726f7463 ; undefined
     66c:	6372632f 	.inst	0x6372632f ; undefined
     670:	632e3233 	.inst	0x632e3233 ; undefined
     674:	6b616d00 	.inst	0x6b616d00 ; undefined
     678:	72635f65 	.inst	0x72635f65 ; undefined
     67c:	61745f63 	.inst	0x61745f63 ; undefined
     680:	00656c62 	.inst	0x00656c62 ; undefined
     684:	33637263 	.inst	0x33637263 ; undefined
     688:	69730032 	ldpsw	x18, x0, [x1,#-104]
     68c:	745f657a 	.inst	0x745f657a ; undefined
     690:	78656800 	ldrh	w0, [x0,x5]
     694:	6c626174 	ldnp	d20, d24, [x11,#-480]
     698:	74730065 	.inst	0x74730065 ; undefined
     69c:	676e6972 	.inst	0x676e6972 ; undefined
     6a0:	6e656c5f 	umin	v31.8h, v2.8h, v5.8h
     6a4:	6e6f6c00 	umin	v0.8h, v0.8h, v15.8h
     6a8:	6e6f6c67 	umin	v7.8h, v3.8h, v15.8h
     6ac:	6f745f67 	.inst	0x6f745f67 ; undefined
     6b0:	7274735f 	.inst	0x7274735f ; undefined
     6b4:	00676e69 	.inst	0x00676e69 ; undefined
     6b8:	74786568 	.inst	0x74786568 ; undefined
     6bc:	656c6261 	.inst	0x656c6261 ; undefined
     6c0:	7061635f 	adr	xzr, c332b <_stack_size+0xc232b>
     6c4:	69640073 	ldpsw	x19, x0, [x3,#-224]
     6c8:	00746967 	.inst	0x00746967 ; undefined
     6cc:	61765f5f 	.inst	0x61765f5f ; undefined
     6d0:	73696c5f 	.inst	0x73696c5f ; undefined
     6d4:	75700074 	.inst	0x75700074 ; undefined
     6d8:	61686374 	.inst	0x61686374 ; undefined
     6dc:	5f5f0072 	.inst	0x5f5f0072 ; undefined
     6e0:	6f5f7267 	.inst	0x6f5f7267 ; undefined
     6e4:	00736666 	.inst	0x00736666 ; undefined
     6e8:	72765f5f 	.inst	0x72765f5f ; undefined
     6ec:	66666f5f 	.inst	0x66666f5f ; undefined
     6f0:	656e0073 	.inst	0x656e0073 ; undefined
     6f4:	69746167 	ldpsw	x7, x24, [x11,#-96]
     6f8:	5f006576 	.inst	0x5f006576 ; undefined
     6fc:	7074756f 	adr	x15, e95ab <_stack_size+0xe85ab>
     700:	735f7475 	.inst	0x735f7475 ; undefined
     704:	6e697274 	uabdl2	v20.4s, v19.8h, v9.8h
     708:	5f5f0067 	.inst	0x5f5f0067 ; undefined
     70c:	63617473 	.inst	0x63617473 ; undefined
     710:	645f006b 	.inst	0x645f006b ; undefined
     714:	69727076 	ldpsw	x22, x28, [x3,#-112]
     718:	0066746e 	.inst	0x0066746e ; undefined
     71c:	72616863 	.inst	0x72616863 ; undefined
     720:	72775f73 	.inst	0x72775f73 ; undefined
     724:	65747469 	.inst	0x65747469 ; undefined
     728:	5f5f006e 	.inst	0x5f5f006e ; undefined
     72c:	63756e67 	.inst	0x63756e67 ; undefined
     730:	5f61765f 	sqshl	d31, d18, #33
     734:	7473696c 	.inst	0x7473696c ; undefined
     738:	6e737600 	uabd	v0.8h, v16.8h, v19.8h
     73c:	6e697270 	uabdl2	v16.4s, v19.8h, v9.8h
     740:	73006674 	.inst	0x73006674 ; undefined
     744:	6c5f7274 	ldnp	d20, d28, [x19,#496]
     748:	5f006e65 	.inst	0x5f006e65 ; undefined
     74c:	5f72675f 	.inst	0x5f72675f ; undefined
     750:	00706f74 	.inst	0x00706f74 ; undefined
     754:	67616c66 	.inst	0x67616c66 ; undefined
     758:	74756f00 	.inst	0x74756f00 ; undefined
     75c:	72616863 	.inst	0x72616863 ; undefined
     760:	6d756e00 	ldp	d0, d27, [x16,#-176]
     764:	6675625f 	.inst	0x6675625f ; undefined
     768:	00726566 	.inst	0x00726566 ; undefined
     76c:	676e6f6c 	.inst	0x676e6f6c ; undefined
     770:	676e6f6c 	.inst	0x676e6f6c ; undefined
     774:	5f6f745f 	sqshl	d31, d2, #47
     778:	73786568 	.inst	0x73786568 ; undefined
     77c:	6e697274 	uabdl2	v20.4s, v19.8h, v9.8h
     780:	6f660067 	mla	v7.8h, v3.8h, v6.h[2]
     784:	74616d72 	.inst	0x74616d72 ; undefined
     788:	6d756e5f 	ldp	d31, d27, [x18,#-176]
     78c:	6f682f00 	.inst	0x6f682f00 ; undefined
     790:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
     794:	73696465 	.inst	0x73696465 ; undefined
     798:	735f6e6f 	.inst	0x735f6e6f ; undefined
     79c:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
     7a0:	726f6874 	.inst	0x726f6874 ; undefined
     7a4:	7572742f 	.inst	0x7572742f ; undefined
     7a8:	382d6b6e 	strb	w14, [x27,x13]
     7ac:	442f312e 	.inst	0x442f312e ; undefined
     7b0:	425f4554 	.inst	0x425f4554 ; undefined
     7b4:	63746f6f 	.inst	0x63746f6f ; undefined
     7b8:	2f65646f 	.inst	0x2f65646f ; undefined
     7bc:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
     7c0:	732f2e2e 	.inst	0x732f2e2e ; undefined
     7c4:	612f6372 	.inst	0x612f6372 ; undefined
     7c8:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
     7cc:	65736572 	.inst	0x65736572 ; undefined
     7d0:	6f622f74 	.inst	0x6f622f74 ; undefined
     7d4:	6576746f 	.inst	0x6576746f ; undefined
     7d8:	726f7463 	.inst	0x726f7463 ; undefined
     7dc:	7270642f 	.inst	0x7270642f ; undefined
     7e0:	66746e69 	.inst	0x66746e69 ; undefined
     7e4:	7300632e 	.inst	0x7300632e ; undefined
     7e8:	61697265 	.inst	0x61697265 ; undefined
     7ec:	72775f6c 	.inst	0x72775f6c ; undefined
     7f0:	00657469 	.inst	0x00657469 ; undefined
     7f4:	72707376 	.inst	0x72707376 ; undefined
     7f8:	66746e69 	.inst	0x66746e69 ; undefined
     7fc:	78656e00 	.inst	0x78656e00 ; undefined
     800:	6f665f74 	.inst	0x6f665f74 ; undefined
     804:	74616d72 	.inst	0x74616d72 ; undefined
     808:	616c6600 	.inst	0x616c6600 ; undefined
     80c:	5f007367 	.inst	0x5f007367 ; undefined
     810:	5f72765f 	sqshl	d31, d18, #50
     814:	00706f74 	.inst	0x00706f74 ; undefined
     818:	61706163 	.inst	0x61706163 ; undefined
     81c:	79746963 	ldrh	w3, [x11,#6708]
     820:	72756300 	.inst	0x72756300 ; undefined
     824:	6b6c625f 	.inst	0x6b6c625f ; undefined
     828:	6464615f 	.inst	0x6464615f ; undefined
     82c:	65720072 	.inst	0x65720072 ; undefined
     830:	72655f74 	.inst	0x72655f74 ; undefined
     834:	57620072 	.inst	0x57620072 ; undefined
     838:	65746972 	.inst	0x65746972 ; undefined
     83c:	5f777300 	sqdmlsl	s0, h24, v7.h[3]
     840:	73706163 	.inst	0x73706163 ; undefined
     844:	5f647300 	sqdmlsl	s0, h24, v4.h[2]
     848:	00677261 	.inst	0x00677261 ; undefined
     84c:	636d6d65 	.inst	0x636d6d65 ; undefined
     850:	7261635f 	.inst	0x7261635f ; undefined
     854:	6d640064 	ldp	d4, d0, [x3,#-448]
     858:	656c5f61 	.inst	0x656c5f61 ; undefined
     85c:	6874676e 	.inst	0x6874676e ; undefined
     860:	6e616d00 	umin	v0.8h, v8.8h, v1.8h
     864:	00646966 	.inst	0x00646966 ; undefined
     868:	54524150 	.inst	0x54524150 ; undefined
     86c:	4d50525f 	.inst	0x4d50525f ; undefined
     870:	72660042 	.inst	0x72660042 ; undefined
     874:	65757165 	.inst	0x65757165 ; undefined
     878:	0079636e 	.inst	0x0079636e ; undefined
     87c:	63656863 	.inst	0x63656863 ; undefined
     880:	72655f6b 	.inst	0x72655f6b ; undefined
     884:	00726f72 	.inst	0x00726f72 ; undefined
     888:	64417349 	.inst	0x64417349 ; undefined
     88c:	73657264 	.inst	0x73657264 ; undefined
     890:	41525373 	.inst	0x41525373 ; undefined
     894:	6f72004d 	mla	v13.8h, v2.8h, v2.h[3]
     898:	5f72636d 	.inst	0x5f72636d ; undefined
     89c:	5f6b6c62 	.inst	0x5f6b6c62 ; undefined
     8a0:	0073706f 	.inst	0x0073706f ; undefined
     8a4:	54524150 	.inst	0x54524150 ; undefined
     8a8:	4144555f 	.inst	0x4144555f ; undefined
     8ac:	61657900 	.inst	0x61657900 ; undefined
     8b0:	74730072 	.inst	0x74730072 ; undefined
     8b4:	00657461 	.inst	0x00657461 ; undefined
     8b8:	6d6f682f 	ldp	d15, d26, [x1,#-272]
     8bc:	652f3165 	.inst	0x652f3165 ; undefined
     8c0:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
     8c4:	68735f6e 	.inst	0x68735f6e ; undefined
     8c8:	742f6869 	.inst	0x742f6869 ; undefined
     8cc:	2f726f68 	.inst	0x2f726f68 ; undefined
     8d0:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
     8d4:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
     8d8:	54442f31 	.inst	0x54442f31 ; undefined
     8dc:	6f425f45 	.inst	0x6f425f45 ; undefined
     8e0:	6f63746f 	uqshl	v15.2d, v3.2d, #35
     8e4:	622f6564 	.inst	0x622f6564 ; undefined
     8e8:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
     8ec:	72732f2e 	.inst	0x72732f2e ; undefined
     8f0:	72612f63 	.inst	0x72612f63 ; undefined
     8f4:	722f6863 	ands	w3, w3, #0xfffe0fff
     8f8:	74657365 	.inst	0x74657365 ; undefined
     8fc:	6f6f622f 	umlsl2	v15.4s, v17.8h, v15.h[2]
     900:	63657674 	.inst	0x63657674 ; undefined
     904:	2f726f74 	.inst	0x2f726f74 ; undefined
     908:	636d6d65 	.inst	0x636d6d65 ; undefined
     90c:	73706f5f 	.inst	0x73706f5f ; undefined
     910:	5000632e 	adr	x14, 1576 <_stack_size+0x576>
     914:	5f545241 	.inst	0x5f545241 ; undefined
     918:	00315047 	.inst	0x00315047 ; NYI
     91c:	54524150 	.inst	0x54524150 ; undefined
     920:	3250475f 	.inst	0x3250475f ; undefined
     924:	52415000 	.inst	0x52415000 ; undefined
     928:	50475f54 	adr	x20, 8f512 <_stack_size+0x8e512>
     92c:	41500033 	.inst	0x41500033 ; undefined
     930:	475f5452 	.inst	0x475f5452 ; undefined
     934:	42003450 	.inst	0x42003450 ; undefined
     938:	5f544f4f 	.inst	0x5f544f4f ; undefined
     93c:	455a4953 	.inst	0x455a4953 ; undefined
     940:	4c554d5f 	.inst	0x4c554d5f ; undefined
     944:	6d6d0054 	ldp	d20, d0, [x2,#-304]
     948:	78655f63 	.inst	0x78655f63 ; undefined
     94c:	73635f74 	.inst	0x73635f74 ; undefined
     950:	61720064 	.inst	0x61720064 ; undefined
     954:	69635f77 	ldpsw	x23, x23, [x27,#-232]
     958:	6d650064 	ldp	d4, d0, [x3,#-432]
     95c:	735f636d 	.inst	0x735f636d ; undefined
     960:	5f646e65 	.inst	0x5f646e65 ; undefined
     964:	5f646d63 	.inst	0x5f646d63 ; undefined
     968:	725f6f6e 	.inst	0x725f6f6e ; undefined
     96c:	72007073 	ands	w19, w3, #0x1fffffff
     970:	655f7465 	.inst	0x655f7465 ; undefined
     974:	726f7272 	.inst	0x726f7272 ; undefined
     978:	73616d00 	.inst	0x73616d00 ; undefined
     97c:	6174006b 	.inst	0x6174006b ; undefined
     980:	635f6363 	.inst	0x635f6363 ; undefined
     984:	00736b6c 	.inst	0x00736b6c ; undefined
     988:	616d6572 	.inst	0x616d6572 ; undefined
     98c:	625f6e69 	.inst	0x625f6e69 ; undefined
     990:	635f6b6c 	.inst	0x635f6b6c ; undefined
     994:	7200746e 	ands	w14, w3, #0x3fffffff
     998:	5f646165 	.inst	0x5f646165 ; undefined
     99c:	6173696d 	.inst	0x6173696d ; undefined
     9a0:	6e67696c 	.inst	0x6e67696c ; undefined
     9a4:	5f777200 	sqdmlsl	s0, h16, v7.h[3]
     9a8:	63736564 	.inst	0x63736564 ; undefined
     9ac:	74706972 	.inst	0x74706972 ; undefined
     9b0:	7200726f 	ands	w15, w19, #0x1fffffff
     9b4:	5f646165 	.inst	0x5f646165 ; undefined
     9b8:	626b6c62 	.inst	0x626b6c62 ; undefined
     9bc:	00737469 	.inst	0x00737469 ; undefined
     9c0:	746e6f6d 	.inst	0x746e6f6d ; undefined
     9c4:	75630068 	.inst	0x75630068 ; undefined
     9c8:	6c625f72 	ldnp	d18, d23, [x27,#-480]
     9cc:	6e635f6b 	uqrshl	v11.8h, v27.8h, v3.8h
     9d0:	77730074 	.inst	0x77730074 ; undefined
     9d4:	68637469 	.inst	0x68637469 ; undefined
     9d8:	6570735f 	.inst	0x6570735f ; undefined
     9dc:	66006465 	.inst	0x66006465 ; undefined
     9e0:	76657277 	.inst	0x76657277 ; undefined
     9e4:	69727700 	ldpsw	x0, x29, [x24,#-112]
     9e8:	705f6574 	adr	x20, bf697 <_stack_size+0xbe697>
     9ec:	69747261 	ldpsw	x1, x28, [x19,#-96]
     9f0:	63006c61 	.inst	0x63006c61 ; undefined
     9f4:	6c63646d 	ldnp	d13, d25, [x3,#-464]
     9f8:	00737361 	.inst	0x00737361 ; undefined
     9fc:	5f773272 	sqdmlal	s18, h19, v7.h[3]
     a00:	74636166 	.inst	0x74636166 ; undefined
     a04:	6f00726f 	.inst	0x6f00726f ; undefined
     a08:	64696d65 	.inst	0x64696d65 ; undefined
     a0c:	6d6d6500 	ldp	d0, d25, [x8,#-304]
     a10:	61705f63 	.inst	0x61705f63 ; undefined
     a14:	74697472 	.inst	0x74697472 ; undefined
     a18:	5f6e6f69 	.inst	0x5f6e6f69 ; undefined
     a1c:	6d6d0074 	ldp	d20, d0, [x3,#-304]
     a20:	69635f63 	ldpsw	x3, x23, [x27,#-232]
     a24:	72770064 	.inst	0x72770064 ; undefined
     a28:	5f657469 	sqshl	d9, d3, #37
     a2c:	626b6c62 	.inst	0x626b6c62 ; undefined
     a30:	00737469 	.inst	0x00737469 ; undefined
     a34:	6e697270 	uabdl2	v16.4s, v19.8h, v9.8h
     a38:	65685f74 	.inst	0x65685f74 ; undefined
     a3c:	62730078 	.inst	0x62730078 ; undefined
     a40:	645f6675 	.inst	0x645f6675 ; undefined
     a44:	72637365 	.inst	0x72637365 ; undefined
     a48:	6f747069 	.inst	0x6f747069 ; undefined
     a4c:	72770072 	.inst	0x72770072 ; undefined
     a50:	5f657469 	sqshl	d9, d3, #37
     a54:	6173696d 	.inst	0x6173696d ; undefined
     a58:	6e67696c 	.inst	0x6e67696c ; undefined
     a5c:	61657200 	.inst	0x61657200 ; undefined
     a60:	61705f64 	.inst	0x61705f64 ; undefined
     a64:	61697472 	.inst	0x61697472 ; undefined
     a68:	6172006c 	.inst	0x6172006c ; undefined
     a6c:	73635f77 	.inst	0x73635f77 ; undefined
     a70:	6d650064 	ldp	d4, d0, [x3,#-432]
     a74:	725f636d 	.inst	0x725f636d ; undefined
     a78:	5f646165 	.inst	0x5f646165 ; undefined
     a7c:	74697277 	.inst	0x74697277 ; undefined
     a80:	70695f65 	adr	x5, d366f <_stack_size+0xd266f>
     a84:	72776800 	.inst	0x72776800 ; undefined
     a88:	50007665 	adr	x5, 1956 <_stack_size+0x956>
     a8c:	5f545241 	.inst	0x5f545241 ; undefined
     a90:	544f4f42 	b.cs	9f478 <_stack_size+0x9e478>
     a94:	41500031 	.inst	0x41500031 ; undefined
     a98:	425f5452 	.inst	0x425f5452 ; undefined
     a9c:	32544f4f 	.inst	0x32544f4f ; undefined
     aa0:	616d6400 	.inst	0x616d6400 ; undefined
     aa4:	6464615f 	.inst	0x6464615f ; undefined
     aa8:	70730072 	adr	x18, e6ab7 <_stack_size+0xe5ab7>
     aac:	5f646565 	.inst	0x5f646565 ; undefined
     ab0:	69646f6d 	ldpsw	x13, x27, [x27,#-224]
     ab4:	73007966 	.inst	0x73007966 ; undefined
     ab8:	655f7379 	.inst	0x655f7379 ; undefined
     abc:	635f7478 	.inst	0x635f7478 ; undefined
     ac0:	74006473 	.inst	0x74006473 ; undefined
     ac4:	5f636361 	.inst	0x5f636361 ; undefined
     ac8:	7700736e 	.inst	0x7700736e ; undefined
     acc:	5f746961 	.inst	0x5f746961 ; undefined
     ad0:	656e6f64 	.inst	0x656e6f64 ; undefined
     ad4:	6d69745f 	ldp	d31, d29, [x2,#-368]
     ad8:	74756f65 	.inst	0x74756f65 ; undefined
     adc:	72646400 	.inst	0x72646400 ; undefined
     ae0:	7365645f 	.inst	0x7365645f ; undefined
     ae4:	70697263 	adr	x3, d3933 <_stack_size+0xd2933>
     ae8:	00726f74 	.inst	0x00726f74 ; undefined
     aec:	6d5f7368 	ldp	d8, d28, [x27,#496]
     af0:	645f7861 	.inst	0x645f7861 ; undefined
     af4:	73007274 	.inst	0x73007274 ; undefined
     af8:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
     afc:	72007372 	ands	w18, w27, #0x1fffffff
     b00:	635f7073 	.inst	0x635f7073 ; undefined
     b04:	75006e6f 	.inst	0x75006e6f ; undefined
     b08:	616c6564 	.inst	0x616c6564 ; undefined
     b0c:	6c620079 	ldnp	d25, d0, [x3,#-480]
     b10:	6e635f6b 	uqrshl	v11.8h, v27.8h, v3.8h
     b14:	70003274 	adr	x20, 1163 <_stack_size+0x163>
     b18:	5f646f72 	.inst	0x5f646f72 ; undefined
     b1c:	656d616e 	.inst	0x656d616e ; undefined
     b20:	706d7400 	adr	x0, db9a3 <_stack_size+0xda9a3>
     b24:	6c61765f 	ldnp	d31, d29, [x18,#-496]
     b28:	73657200 	.inst	0x73657200 ; undefined
     b2c:	695f7465 	ldpsw	x5, x29, [x3,#248]
     b30:	6d6d0070 	ldp	d16, d0, [x3,#-304]
     b34:	73635f63 	.inst	0x73635f63 ; undefined
     b38:	5f650064 	.inst	0x5f650064 ; undefined
     b3c:	69766564 	ldpsw	x4, x25, [x11,#-80]
     b40:	745f6563 	.inst	0x745f6563 ; undefined
     b44:	00657079 	.inst	0x00657079 ; undefined
     b48:	745f6173 	.inst	0x745f6173 ; undefined
     b4c:	6f656d69 	.inst	0x6f656d69 ; undefined
     b50:	45007475 	.inst	0x45007475 ; undefined
     b54:	5f434d4d 	.inst	0x5f434d4d ; undefined
     b58:	5f58414d 	.inst	0x5f58414d ; undefined
     b5c:	544c554d 	b.le	99604 <_stack_size+0x98604>
     b60:	4c425f49 	.inst	0x4c425f49 ; undefined
     b64:	6d65004b 	ldp	d11, d0, [x2,#-432]
     b68:	735f636d 	.inst	0x735f636d ; undefined
     b6c:	635f6365 	.inst	0x635f6365 ; undefined
     b70:	746e756f 	.inst	0x746e756f ; undefined
     b74:	73656400 	.inst	0x73656400 ; undefined
     b78:	7361625f 	.inst	0x7361625f ; undefined
     b7c:	77730065 	.inst	0x77730065 ; undefined
     b80:	68637469 	.inst	0x68637469 ; undefined
     b84:	7261705f 	.inst	0x7261705f ; undefined
     b88:	69746974 	ldpsw	x20, x26, [x11,#-96]
     b8c:	73006e6f 	.inst	0x73006e6f ; undefined
     b90:	77735f64 	.inst	0x77735f64 ; undefined
     b94:	68637469 	.inst	0x68637469 ; undefined
     b98:	7061635f 	adr	xzr, c3803 <_stack_size+0xc2803>
     b9c:	6d6d0073 	ldp	d19, d0, [x3,#-304]
     ba0:	765f6163 	.inst	0x765f6163 ; undefined
     ba4:	73006e73 	.inst	0x73006e73 ; undefined
     ba8:	63746977 	.inst	0x63746977 ; undefined
     bac:	75625f68 	.inst	0x75625f68 ; undefined
     bb0:	6d650073 	ldp	d19, d0, [x3,#-432]
     bb4:	735f636d 	.inst	0x735f636d ; undefined
     bb8:	5f646e65 	.inst	0x5f646e65 ; undefined
     bbc:	5f646d63 	.inst	0x5f646d63 ; undefined
     bc0:	5f746567 	.inst	0x5f746567 ; undefined
     bc4:	00707372 	.inst	0x00707372 ; undefined
     bc8:	69726573 	ldpsw	x19, x25, [x11,#-112]
     bcc:	6d006c61 	stp	d1, d27, [x3]
     bd0:	5f656b61 	.inst	0x5f656b61 ; undefined
     bd4:	645f7069 	.inst	0x645f7069 ; undefined
     bd8:	63007365 	.inst	0x63007365 ; undefined
     bdc:	695f646d 	ldpsw	x13, x25, [x3,#248]
     be0:	57007864 	.inst	0x57007864 ; undefined
     be4:	48544449 	ldxrh	w9, [x2]
     be8:	6e637400 	uabd	v0.8h, v0.8h, v3.8h
     bec:	682f0074 	.inst	0x682f0074 ; undefined
     bf0:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
     bf4:	6964652f 	ldpsw	x15, x25, [x9,#-224]
     bf8:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
     bfc:	68696873 	.inst	0x68696873 ; undefined
     c00:	6f68742f 	uqshl	v15.2d, v1.2d, #40
     c04:	72742f72 	.inst	0x72742f72 ; undefined
     c08:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
     c0c:	2f312e38 	.inst	0x2f312e38 ; undefined
     c10:	5f455444 	shl	d4, d2, #5
     c14:	746f6f42 	.inst	0x746f6f42 ; undefined
     c18:	65646f63 	.inst	0x65646f63 ; undefined
     c1c:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
     c20:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     c24:	2f637273 	.inst	0x2f637273 ; undefined
     c28:	68637261 	.inst	0x68637261 ; undefined
     c2c:	7365722f 	.inst	0x7365722f ; undefined
     c30:	622f7465 	.inst	0x622f7465 ; undefined
     c34:	76746f6f 	.inst	0x76746f6f ; undefined
     c38:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
     c3c:	77682f72 	.inst	0x77682f72 ; undefined
     c40:	6173725f 	.inst	0x6173725f ; undefined
     c44:	4e00632e 	tbl	v14.16b, {v25.16b-v28.16b}, v0.16b
     c48:	414d524f 	.inst	0x414d524f ; undefined
     c4c:	454b5f4c 	.inst	0x454b5f4c ; undefined
     c50:	69730059 	ldpsw	x25, x0, [x2,#-104]
     c54:	74616e67 	.inst	0x74616e67 ; undefined
     c58:	5f657275 	sqdmlsl	s21, h19, v5.h[2]
     c5c:	72646461 	.inst	0x72646461 ; undefined
     c60:	74657300 	.inst	0x74657300 ; undefined
     c64:	6d656d5f 	ldp	d31, d27, [x10,#-432]
     c68:	0079726f 	.inst	0x0079726f ; undefined
     c6c:	73725f70 	.inst	0x73725f70 ; undefined
     c70:	656b5f61 	.inst	0x656b5f61 ; undefined
     c74:	73720079 	.inst	0x73720079 ; undefined
     c78:	656b5f61 	.inst	0x656b5f61 ; undefined
     c7c:	65735f79 	.inst	0x65735f79 ; undefined
     c80:	00745f6c 	.inst	0x00745f6c ; undefined
     c84:	6c65646d 	ldnp	d13, d25, [x3,#-432]
     c88:	72007961 	ands	w1, w11, #0x7fffffff
     c8c:	6b5f6173 	subs	w19, w11, wzr, lsr #24
     c90:	745f7965 	.inst	0x745f7965 ; undefined
     c94:	62757000 	.inst	0x62757000 ; undefined
     c98:	4563696c 	.inst	0x4563696c ; undefined
     c9c:	6e6f7078 	uabdl2	v24.4s, v3.8h, v15.8h
     ca0:	00746e65 	.inst	0x00746e65 ; undefined
     ca4:	65766572 	.inst	0x65766572 ; undefined
     ca8:	5f657372 	sqdmlsl	s18, h27, v5.h[2]
     cac:	5f617372 	sqdmlsl	s18, h27, v1.h[2]
     cb0:	6e676973 	.inst	0x6e676973 ; undefined
     cb4:	72757461 	.inst	0x72757461 ; undefined
     cb8:	756f0065 	.inst	0x756f0065 ; undefined
     cbc:	74757074 	.inst	0x74757074 ; undefined
     cc0:	6464615f 	.inst	0x6464615f ; undefined
     cc4:	6f630072 	mla	v18.8h, v3.8h, v3.h[2]
     cc8:	6d5f7970 	ldp	d16, d30, [x11,#496]
     ccc:	726f6d65 	.inst	0x726f6d65 ; undefined
     cd0:	6f6c0079 	mla	v25.8h, v3.8h, v12.h[2]
     cd4:	5473706f 	b.nv	e7ae0 <_stack_size+0xe6ae0>
     cd8:	00706172 	.inst	0x00706172 ; undefined
     cdc:	5f617372 	sqdmlsl	s18, h27, v1.h[2]
     ce0:	5f79656b 	.inst	0x5f79656b ; undefined
     ce4:	006c6573 	.inst	0x006c6573 ; undefined
     ce8:	485f6f64 	ldxrh	w4, [x27]
     cec:	53525f57 	.inst	0x53525f57 ; undefined
     cf0:	4f430041 	.inst	0x4f430041 ; undefined
     cf4:	5f54534e 	.inst	0x5f54534e ; undefined
     cf8:	3159454b 	adds	w11, w10, #0x651, lsl #12
     cfc:	4e4f4300 	.inst	0x4e4f4300 ; undefined
     d00:	4b5f5453 	sub	w19, w2, wzr, lsr #21
     d04:	00325945 	.inst	0x00325945 ; NYI
     d08:	534e4f43 	.inst	0x534e4f43 ; undefined
     d0c:	454b5f54 	.inst	0x454b5f54 ; undefined
     d10:	43003359 	.inst	0x43003359 ; undefined
     d14:	54534e4f 	b.nv	a76dc <_stack_size+0xa66dc>
     d18:	59454b5f 	.inst	0x59454b5f ; undefined
     d1c:	682f0034 	.inst	0x682f0034 ; undefined
     d20:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
     d24:	6964652f 	ldpsw	x15, x25, [x9,#-224]
     d28:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
     d2c:	68696873 	.inst	0x68696873 ; undefined
     d30:	6f68742f 	uqshl	v15.2d, v1.2d, #40
     d34:	72742f72 	.inst	0x72742f72 ; undefined
     d38:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
     d3c:	2f312e38 	.inst	0x2f312e38 ; undefined
     d40:	5f455444 	shl	d4, d2, #5
     d44:	746f6f42 	.inst	0x746f6f42 ; undefined
     d48:	65646f63 	.inst	0x65646f63 ; undefined
     d4c:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
     d50:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     d54:	2f637273 	.inst	0x2f637273 ; undefined
     d58:	68637261 	.inst	0x68637261 ; undefined
     d5c:	7365722f 	.inst	0x7365722f ; undefined
     d60:	622f7465 	.inst	0x622f7465 ; undefined
     d64:	76746f6f 	.inst	0x76746f6f ; undefined
     d68:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
     d6c:	656b2f72 	.inst	0x656b2f72 ; undefined
     d70:	61685f79 	.inst	0x61685f79 ; undefined
     d74:	656c646e 	.inst	0x656c646e ; undefined
     d78:	5300632e 	ubfx	w14, w25, #0, #25
     d7c:	35324148 	cbnz	w8, 655a4 <_stack_size+0x645a4>
     d80:	61685f36 	.inst	0x61685f36 ; undefined
     d84:	41006873 	.inst	0x41006873 ; undefined
     d88:	455f5345 	.inst	0x455f5345 ; undefined
     d8c:	645f4243 	.inst	0x645f4243 ; undefined
     d90:	79726365 	ldrh	w5, [x27,#6448]
     d94:	64007470 	.inst	0x64007470 ; undefined
     d98:	615f7473 	.inst	0x615f7473 ; undefined
     d9c:	00726464 	.inst	0x00726464 ; undefined
     da0:	74617473 	.inst	0x74617473 ; undefined
     da4:	725f7375 	.inst	0x725f7375 ; undefined
     da8:	74006765 	.inst	0x74006765 ; undefined
     dac:	70636d5f 	adr	xzr, c7b57 <_stack_size+0xc6b57>
     db0:	7365645f 	.inst	0x7365645f ; undefined
     db4:	70697263 	adr	x3, d3c03 <_stack_size+0xd2c03>
     db8:	00726f74 	.inst	0x00726f74 ; undefined
     dbc:	5f696e69 	.inst	0x5f696e69 ; undefined
     dc0:	0079656b 	.inst	0x0079656b ; undefined
     dc4:	64786568 	.inst	0x64786568 ; undefined
     dc8:	00706d75 	.inst	0x00706d75 ; undefined
     dcc:	6d6f682f 	ldp	d15, d26, [x1,#-272]
     dd0:	652f3165 	.inst	0x652f3165 ; undefined
     dd4:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
     dd8:	68735f6e 	.inst	0x68735f6e ; undefined
     ddc:	742f6869 	.inst	0x742f6869 ; undefined
     de0:	2f726f68 	.inst	0x2f726f68 ; undefined
     de4:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
     de8:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
     dec:	54442f31 	.inst	0x54442f31 ; undefined
     df0:	6f425f45 	.inst	0x6f425f45 ; undefined
     df4:	6f63746f 	uqshl	v15.2d, v3.2d, #35
     df8:	622f6564 	.inst	0x622f6564 ; undefined
     dfc:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
     e00:	72732f2e 	.inst	0x72732f2e ; undefined
     e04:	72612f63 	.inst	0x72612f63 ; undefined
     e08:	722f6863 	ands	w3, w3, #0xfffe0fff
     e0c:	74657365 	.inst	0x74657365 ; undefined
     e10:	6f6f622f 	umlsl2	v15.4s, v17.8h, v15.h[2]
     e14:	63657674 	.inst	0x63657674 ; undefined
     e18:	2f726f74 	.inst	0x2f726f74 ; undefined
     e1c:	2e70636d 	rsubhn	v13.4h, v27.4s, v16.4s
     e20:	5f5f0063 	.inst	0x5f5f0063 ; undefined
     e24:	434e5546 	.inst	0x434e5546 ; undefined
     e28:	4e4f4954 	.inst	0x4e4f4954 ; undefined
     e2c:	64005f5f 	.inst	0x64005f5f ; undefined
     e30:	636d5f6f 	.inst	0x636d5f6f ; undefined
     e34:	73640070 	.inst	0x73640070 ; undefined
     e38:	5f747063 	sqdmlsl	s3, h3, v4.h[3]
     e3c:	72646461 	.inst	0x72646461 ; undefined
     e40:	5f776800 	.inst	0x5f776800 ; undefined
     e44:	64646170 	.inst	0x64646170 ; undefined
     e48:	00676e69 	.inst	0x00676e69 ; undefined
     e4c:	5f79656b 	.inst	0x5f79656b ; undefined
     e50:	695f7763 	ldpsw	x3, x29, [x27,#248]
     e54:	73007864 	.inst	0x73007864 ; undefined
     e58:	615f6372 	.inst	0x615f6372 ; undefined
     e5c:	00726464 	.inst	0x00726464 ; undefined
     e60:	5f70636d 	.inst	0x5f70636d ; undefined
     e64:	70637364 	adr	x4, c7cd3 <_stack_size+0xc6cd3>
     e68:	6d740074 	ldp	d20, d0, [x3,#-192]
     e6c:	75625f70 	.inst	0x75625f70 ; undefined
     e70:	61700066 	.inst	0x61700066 ; undefined
     e74:	5f6d6172 	.inst	0x5f6d6172 ; undefined
     e78:	70003374 	adr	x20, 14e7 <_stack_size+0x4e7>
     e7c:	6d617261 	ldp	d1, d28, [x19,#-496]
     e80:	0034745f 	.inst	0x0034745f ; NYI
     e84:	5f767372 	sqdmlsl	s18, h27, v6.h[3]
     e88:	72617473 	.inst	0x72617473 ; undefined
     e8c:	6c625f74 	ldnp	d20, d23, [x27,#-480]
     e90:	006b636f 	.inst	0x006b636f ; undefined
     e94:	65676170 	.inst	0x65676170 ; undefined
     e98:	6464615f 	.inst	0x6464615f ; undefined
     e9c:	65720072 	.inst	0x65720072 ; undefined
     ea0:	69736976 	ldpsw	x22, x26, [x11,#-104]
     ea4:	6e006e6f 	.inst	0x6e006e6f ; undefined
     ea8:	73695f66 	.inst	0x73695f66 ; undefined
     eac:	6e61725f 	uabdl2	v31.4s, v18.8h, v1.8h
     eb0:	5f6d6f64 	.inst	0x5f6d6f64 ; undefined
     eb4:	65646f6d 	.inst	0x65646f6d ; undefined
     eb8:	5f666e00 	.inst	0x5f666e00 ; undefined
     ebc:	5f746567 	.inst	0x5f746567 ; undefined
     ec0:	6d617273 	ldp	d19, d28, [x19,#-496]
     ec4:	616c6600 	.inst	0x616c6600 ; undefined
     ec8:	695f6873 	ldpsw	x19, x26, [x3,#248]
     ecc:	666e0064 	.inst	0x666e0064 ; undefined
     ed0:	6972775f 	ldpsw	xzr, x29, [x26,#-112]
     ed4:	705f6574 	adr	x20, bfb83 <_stack_size+0xbeb83>
     ed8:	5f737968 	sqdmlsl	s8, h11, v3.h[7]
     edc:	65676170 	.inst	0x65676170 ; undefined
     ee0:	74616400 	.inst	0x74616400 ; undefined
     ee4:	6e755f61 	uqrshl	v1.8h, v27.8h, v21.8h
     ee8:	67007469 	.inst	0x67007469 ; undefined
     eec:	6e616e5f 	umin	v31.8h, v18.8h, v1.8h
     ef0:	61645f64 	.inst	0x61645f64 ; undefined
     ef4:	645f6174 	.inst	0x645f6174 ; undefined
     ef8:	6400616d 	.inst	0x6400616d ; undefined
     efc:	5f617461 	sqshl	d1, d3, #33
     f00:	5f726570 	.inst	0x5f726570 ; undefined
     f04:	65676170 	.inst	0x65676170 ; undefined
     f08:	616c6600 	.inst	0x616c6600 ; undefined
     f0c:	6e5f6873 	.inst	0x6e5f6873 ; undefined
     f10:	00656d61 	.inst	0x00656d61 ; undefined
     f14:	65676170 	.inst	0x65676170 ; undefined
     f18:	65705f73 	.inst	0x65705f73 ; undefined
     f1c:	6c625f72 	ldnp	d18, d23, [x27,#-480]
     f20:	006b636f 	.inst	0x006b636f ; undefined
     f24:	695f666e 	ldpsw	x14, x25, [x19,#248]
     f28:	746e6564 	.inst	0x746e6564 ; undefined
     f2c:	00796669 	.inst	0x00796669 ; undefined
     f30:	706d6574 	adr	x20, dbbdf <_stack_size+0xdabdf>
     f34:	64646100 	.inst	0x64646100 ; undefined
     f38:	6f6d5f72 	.inst	0x6f6d5f72 ; undefined
     f3c:	725f6564 	.inst	0x725f6564 ; undefined
     f40:	6f6f0077 	mla	v23.8h, v3.8h, v15.h[2]
     f44:	65705f62 	.inst	0x65705f62 ; undefined
     f48:	61705f72 	.inst	0x61705f72 ; undefined
     f4c:	69006567 	.inst	0x69006567 ; undefined
     f50:	746e6564 	.inst	0x746e6564 ; undefined
     f54:	65696669 	.inst	0x65696669 ; undefined
     f58:	5f670072 	.inst	0x5f670072 ; undefined
     f5c:	636f6c42 	.inst	0x636f6c42 ; undefined
     f60:	7a69536b 	.inst	0x7a69536b ; undefined
     f64:	68630065 	.inst	0x68630065 ; undefined
     f68:	736b6365 	.inst	0x736b6365 ; undefined
     f6c:	00316d75 	.inst	0x00316d75 ; NYI
     f70:	63656863 	.inst	0x63656863 ; undefined
     f74:	6d75736b 	ldp	d11, d28, [x27,#-176]
     f78:	64610032 	.inst	0x64610032 ; undefined
     f7c:	735f7264 	.inst	0x735f7264 ; undefined
     f80:	72756365 	.inst	0x72756365 ; undefined
     f84:	61725f65 	.inst	0x61725f65 ; undefined
     f88:	6170006d 	.inst	0x6170006d ; undefined
     f8c:	695f6567 	ldpsw	x7, x25, [x11,#248]
     f90:	6572636e 	.inst	0x6572636e ; undefined
     f94:	746e656d 	.inst	0x746e656d ; undefined
     f98:	5f666e00 	.inst	0x5f666e00 ; undefined
     f9c:	365f7369 	tbz	w9, #11, fffffffffffffe08 <SMC_ID_HW_RSA+0xffffffff7bfeff01>
     fa0:	5f746962 	.inst	0x5f746962 ; undefined
     fa4:	00636365 	.inst	0x00636365 ; undefined
     fa8:	756e616d 	.inst	0x756e616d ; undefined
     fac:	74636166 	.inst	0x74636166 ; undefined
     fb0:	72657275 	.inst	0x72657275 ; undefined
     fb4:	0064695f 	.inst	0x0064695f ; undefined
     fb8:	706f7473 	adr	x19, dfe47 <_stack_size+0xdee47>
     fbc:	6761705f 	.inst	0x6761705f ; undefined
     fc0:	5f670065 	.inst	0x5f670065 ; undefined
     fc4:	65676150 	.inst	0x65676150 ; undefined
     fc8:	42726550 	.inst	0x42726550 ; undefined
     fcc:	6b636f6c 	.inst	0x6b636f6c ; undefined
     fd0:	6f682f00 	.inst	0x6f682f00 ; undefined
     fd4:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
     fd8:	73696465 	.inst	0x73696465 ; undefined
     fdc:	735f6e6f 	.inst	0x735f6e6f ; undefined
     fe0:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
     fe4:	726f6874 	.inst	0x726f6874 ; undefined
     fe8:	7572742f 	.inst	0x7572742f ; undefined
     fec:	382d6b6e 	strb	w14, [x27,x13]
     ff0:	442f312e 	.inst	0x442f312e ; undefined
     ff4:	425f4554 	.inst	0x425f4554 ; undefined
     ff8:	63746f6f 	.inst	0x63746f6f ; undefined
     ffc:	2f65646f 	.inst	0x2f65646f ; undefined
    1000:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
    1004:	732f2e2e 	.inst	0x732f2e2e ; undefined
    1008:	612f6372 	.inst	0x612f6372 ; undefined
    100c:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
    1010:	65736572 	.inst	0x65736572 ; undefined
    1014:	6f622f74 	.inst	0x6f622f74 ; undefined
    1018:	6576746f 	.inst	0x6576746f ; undefined
    101c:	726f7463 	.inst	0x726f7463 ; undefined
    1020:	6e616e2f 	umin	v15.8h, v17.8h, v1.8h
    1024:	706f5f64 	adr	x4, dfc13 <_stack_size+0xdec13>
    1028:	00632e73 	.inst	0x00632e73 ; undefined
    102c:	725f666e 	.inst	0x725f666e ; undefined
    1030:	5f646165 	.inst	0x5f646165 ; undefined
    1034:	65676170 	.inst	0x65676170 ; undefined
    1038:	645f635f 	.inst	0x645f635f ; undefined
    103c:	6e00616d 	.inst	0x6e00616d ; undefined
    1040:	72775f66 	.inst	0x72775f66 ; undefined
    1044:	00657469 	.inst	0x00657469 ; undefined
    1048:	74696177 	.inst	0x74696177 ; undefined
    104c:	6e6f645f 	umax	v31.8h, v2.8h, v15.8h
    1050:	6f630065 	mla	v5.8h, v3.8h, v3.h[2]
    1054:	7261706d 	.inst	0x7261706d ; undefined
    1058:	656d5f65 	.inst	0x656d5f65 ; undefined
    105c:	79726f6d 	ldrh	w13, [x27,#6454]
    1060:	6e616e00 	umin	v0.8h, v16.8h, v1.8h
    1064:	63655f64 	.inst	0x63655f64 ; undefined
    1068:	69625f63 	ldpsw	x3, x23, [x27,#-240]
    106c:	6e690074 	uaddl2	v20.4s, v3.8h, v9.8h
    1070:	61697469 	.inst	0x61697469 ; undefined
    1074:	62625f6c 	.inst	0x62625f6c ; undefined
    1078:	736f705f 	.inst	0x736f705f ; undefined
    107c:	5f666e00 	.inst	0x5f666e00 ; undefined
    1080:	5f746567 	.inst	0x5f746567 ; undefined
    1084:	73616c66 	.inst	0x73616c66 ; undefined
    1088:	72705f68 	.inst	0x72705f68 ; undefined
    108c:	6c69666f 	ldnp	d15, d25, [x19,#-368]
    1090:	00635f65 	.inst	0x00635f65 ; undefined
    1094:	675f666e 	.inst	0x675f666e ; undefined
    1098:	735f7465 	.inst	0x735f7465 ; undefined
    109c:	65726170 	.inst	0x65726170 ; undefined
    10a0:	6f727000 	.inst	0x6f727000 ; undefined
    10a4:	656c6966 	.inst	0x656c6966 ; undefined
    10a8:	6761705f 	.inst	0x6761705f ; undefined
    10ac:	6f6e5f65 	.inst	0x6f6e5f65 ; undefined
    10b0:	6d696c5f 	ldp	d31, d27, [x2,#-368]
    10b4:	6e007469 	.inst	0x6e007469 ; undefined
    10b8:	65725f66 	.inst	0x65725f66 ; undefined
    10bc:	6e006461 	.inst	0x6e006461 ; undefined
    10c0:	65626d75 	.inst	0x65626d75 ; undefined
    10c4:	666f5f72 	.inst	0x666f5f72 ; undefined
    10c8:	7673725f 	.inst	0x7673725f ; undefined
    10cc:	6f6c625f 	umlsl2	v31.4s, v18.8h, v12.h[2]
    10d0:	75006b63 	.inst	0x75006b63 ; undefined
    10d4:	5f74696e 	.inst	0x5f74696e ; undefined
    10d8:	006e656c 	.inst	0x006e656c ; undefined
    10dc:	65736572 	.inst	0x65736572 ; undefined
    10e0:	64657672 	.inst	0x64657672 ; undefined
    10e4:	7200315f 	tst	w10, #0x1fff
    10e8:	72657365 	.inst	0x72657365 ; undefined
    10ec:	5f646576 	.inst	0x5f646576 ; undefined
    10f0:	65720032 	.inst	0x65720032 ; undefined
    10f4:	76726573 	.inst	0x76726573 ; undefined
    10f8:	335f6465 	.inst	0x335f6465 ; undefined
    10fc:	73657200 	.inst	0x73657200 ; undefined
    1100:	65767265 	.inst	0x65767265 ; undefined
    1104:	00345f64 	.inst	0x00345f64 ; NYI
    1108:	65736572 	.inst	0x65736572 ; undefined
    110c:	64657672 	.inst	0x64657672 ; undefined
    1110:	7000355f 	adr	xzr, 17bb <_stack_size+0x7bb>
    1114:	5f656761 	.inst	0x5f656761 ; undefined
    1118:	5f726570 	.inst	0x5f726570 ; undefined
    111c:	636f6c62 	.inst	0x636f6c62 ; undefined
    1120:	6572006b 	.inst	0x6572006b ; undefined
    1124:	5f797274 	sqdmlsl	s20, h19, v9.h[3]
    1128:	5f636365 	.inst	0x5f636365 ; undefined
    112c:	00746962 	.inst	0x00746962 ; undefined
    1130:	65676170 	.inst	0x65676170 ; undefined
    1134:	006f6e5f 	.inst	0x006f6e5f ; undefined
    1138:	72746572 	.inst	0x72746572 ; undefined
    113c:	61705f79 	.inst	0x61705f79 ; undefined
    1140:	735f6567 	.inst	0x735f6567 ; undefined
    1144:	00657a69 	.inst	0x00657a69 ; undefined
    1148:	64616572 	.inst	0x64616572 ; undefined
    114c:	5f64695f 	.inst	0x5f64695f ; undefined
    1150:	006e656c 	.inst	0x006e656c ; undefined
    1154:	61746164 	.inst	0x61746164 ; undefined
    1158:	6c6f635f 	ldnp	d31, d24, [x26,#-272]
    115c:	5f666e00 	.inst	0x5f666e00 ; undefined
    1160:	73617265 	.inst	0x73617265 ; undefined
    1164:	68705f65 	.inst	0x68705f65 ; undefined
    1168:	625f7379 	.inst	0x625f7379 ; undefined
    116c:	6b636f6c 	.inst	0x6b636f6c ; undefined
    1170:	5f666e00 	.inst	0x5f666e00 ; undefined
    1174:	64616572 	.inst	0x64616572 ; undefined
    1178:	0064695f 	.inst	0x0064695f ; undefined
    117c:	695f666e 	ldpsw	x14, x25, [x19,#248]
    1180:	32315f73 	orr	w19, w27, #0xffff807f
    1184:	5f746962 	.inst	0x5f746962 ; undefined
    1188:	00636365 	.inst	0x00636365 ; undefined
    118c:	735f666e 	.inst	0x735f666e ; undefined
    1190:	65726170 	.inst	0x65726170 ; undefined
    1194:	7264645f 	.inst	0x7264645f ; undefined
    1198:	616e655f 	.inst	0x616e655f ; undefined
    119c:	64656c62 	.inst	0x64656c62 ; undefined
    11a0:	70616d00 	adr	x0, c3f43 <_stack_size+0xc2f43>
    11a4:	676e6970 	.inst	0x676e6970 ; undefined
    11a8:	5f666e00 	.inst	0x5f666e00 ; undefined
    11ac:	00766964 	.inst	0x00766964 ; undefined
    11b0:	616e5f74 	.inst	0x616e5f74 ; undefined
    11b4:	705f646e 	adr	x14, bfe43 <_stack_size+0xbee43>
    11b8:	69666f72 	ldpsw	x18, x27, [x27,#-208]
    11bc:	6900656c 	.inst	0x6900656c ; undefined
    11c0:	65654e73 	.inst	0x65654e73 ; undefined
    11c4:	69725764 	ldpsw	x4, x21, [x27,#-112]
    11c8:	67006574 	.inst	0x67006574 ; undefined
    11cc:	6f6c425f 	mls	v31.8h, v18.8h, v12.h[2]
    11d0:	65506b63 	.inst	0x65506b63 ; undefined
    11d4:	616c4672 	.inst	0x616c4672 ; undefined
    11d8:	6e006873 	.inst	0x6e006873 ; undefined
    11dc:	7665645f 	.inst	0x7665645f ; undefined
    11e0:	00656369 	.inst	0x00656369 ; undefined
    11e4:	61505f67 	.inst	0x61505f67 ; undefined
    11e8:	69536567 	ldpsw	x7, x25, [x11,#152]
    11ec:	6100657a 	.inst	0x6100657a ; undefined
    11f0:	65726464 	.inst	0x65726464 ; undefined
    11f4:	6d5f7373 	ldp	d19, d28, [x27,#496]
    11f8:	0065646f 	.inst	0x0065646f ; undefined
    11fc:	5f6d756e 	sqshl	d14, d11, #45
    1200:	70696863 	adr	x3, d3f0f <_stack_size+0xd2f0f>
    1204:	61700073 	.inst	0x61700073 ; undefined
    1208:	5f6d6172 	.inst	0x5f6d6172 ; undefined
    120c:	70003174 	adr	x20, 183b <_stack_size+0x83b>
    1210:	6d617261 	ldp	d1, d28, [x19,#-496]
    1214:	0032745f 	.inst	0x0032745f ; NYI
    1218:	5f767372 	sqdmlsl	s18, h27, v6.h[3]
    121c:	5f646e65 	.inst	0x5f646e65 ; undefined
    1220:	636f6c62 	.inst	0x636f6c62 ; undefined
    1224:	6461006b 	.inst	0x6461006b ; undefined
    1228:	6d5f7264 	ldp	d4, d28, [x19,#496]
    122c:	5f65646f 	.inst	0x5f65646f ; undefined
    1230:	73617265 	.inst	0x73617265 ; undefined
    1234:	616e0065 	.inst	0x616e0065 ; undefined
    1238:	735f646e 	.inst	0x735f646e ; undefined
    123c:	65726170 	.inst	0x65726170 ; undefined
    1240:	616d645f 	.inst	0x616d645f ; undefined
    1244:	576f6400 	.inst	0x576f6400 ; undefined
    1248:	65746972 	.inst	0x65746972 ; undefined
    124c:	70696b53 	adr	x19, d3fb7 <_stack_size+0xd2fb7>
    1250:	74626200 	.inst	0x74626200 ; undefined
    1254:	646e655f 	.inst	0x646e655f ; undefined
    1258:	6f6c625f 	umlsl2	v31.4s, v18.8h, v12.h[2]
    125c:	6e006b63 	.inst	0x6e006b63 ; undefined
    1260:	65735f66 	.inst	0x65735f66 ; undefined
    1264:	70735f74 	adr	x20, e7e53 <_stack_size+0xe6e53>
    1268:	00657261 	.inst	0x00657261 ; undefined
    126c:	636f6c62 	.inst	0x636f6c62 ; undefined
    1270:	705f736b 	adr	x11, c00df <_stack_size+0xbf0df>
    1274:	665f7265 	.inst	0x665f7265 ; undefined
    1278:	6873616c 	.inst	0x6873616c ; undefined
    127c:	74657200 	.inst	0x74657200 ; undefined
    1280:	615f7972 	.inst	0x615f7972 ; undefined
    1284:	6e6f6c6c 	umin	v12.8h, v3.8h, v15.8h
    1288:	616e0065 	.inst	0x616e0065 ; undefined
    128c:	725f646e 	.inst	0x725f646e ; undefined
    1290:	79727465 	ldrh	w5, [x3,#6458]
    1294:	6363655f 	.inst	0x6363655f ; undefined
    1298:	6d756e00 	ldp	d0, d27, [x16,#-176]
    129c:	5f726562 	.inst	0x5f726562 ; undefined
    12a0:	625f666f 	.inst	0x625f666f ; undefined
    12a4:	64007462 	.inst	0x64007462 ; undefined
    12a8:	5f747365 	sqdmlsl	s5, h27, v4.h[3]
    12ac:	72646461 	.inst	0x72646461 ; undefined
    12b0:	5f666e00 	.inst	0x5f666e00 ; undefined
    12b4:	5f746573 	.inst	0x5f746573 ; undefined
    12b8:	646e6172 	.inst	0x646e6172 ; undefined
    12bc:	635f6d6f 	.inst	0x635f6d6f ; undefined
    12c0:	615f6c6f 	.inst	0x615f6c6f ; undefined
    12c4:	00726464 	.inst	0x00726464 ; undefined
    12c8:	636c6163 	.inst	0x636c6163 ; undefined
    12cc:	74616c75 	.inst	0x74616c75 ; undefined
    12d0:	6d695f65 	ldp	d5, d23, [x27,#-368]
    12d4:	5f656761 	.inst	0x5f656761 ; undefined
    12d8:	63656863 	.inst	0x63656863 ; undefined
    12dc:	6d75736b 	ldp	d11, d28, [x27,#-176]
    12e0:	61707300 	.inst	0x61707300 ; undefined
    12e4:	635f6572 	.inst	0x635f6572 ; undefined
    12e8:	66006c6f 	.inst	0x66006c6f ; undefined
    12ec:	6563726f 	.inst	0x6563726f ; undefined
    12f0:	006b325f 	.inst	0x006b325f ; undefined
    12f4:	72617473 	.inst	0x72617473 ; undefined
    12f8:	61705f74 	.inst	0x61705f74 ; undefined
    12fc:	62006567 	.inst	0x62006567 ; undefined
    1300:	6b636f6c 	.inst	0x6b636f6c ; undefined
    1304:	7265705f 	.inst	0x7265705f ; undefined
    1308:	6569645f 	.inst	0x6569645f ; undefined
    130c:	645f6e00 	.inst	0x645f6e00 ; undefined
    1310:	63697665 	.inst	0x63697665 ; undefined
    1314:	79745f65 	ldrh	w5, [x27,#6702]
    1318:	6e006570 	.inst	0x6e006570 ; undefined
    131c:	65725f66 	.inst	0x65725f66 ; undefined
    1320:	00746573 	.inst	0x00746573 ; undefined
    1324:	6c6c6f70 	ldnp	d16, d27, [x27,#-320]
    1328:	5f676e69 	.inst	0x5f676e69 ; undefined
    132c:	656d6974 	.inst	0x656d6974 ; undefined
    1330:	0074756f 	.inst	0x0074756f ; undefined
    1334:	725f666e 	.inst	0x725f666e ; undefined
    1338:	5f646165 	.inst	0x5f646165 ; undefined
    133c:	65676170 	.inst	0x65676170 ; undefined
    1340:	645f635f 	.inst	0x645f635f ; undefined
    1344:	325f616d 	.inst	0x325f616d ; undefined
    1348:	666e004b 	.inst	0x666e004b ; undefined
    134c:	696e695f 	ldpsw	xzr, x26, [x10,#-144]
    1350:	65720074 	.inst	0x65720074 ; undefined
    1354:	00797274 	.inst	0x00797274 ; undefined
    1358:	5f746262 	.inst	0x5f746262 ; undefined
    135c:	72617473 	.inst	0x72617473 ; undefined
    1360:	6c625f74 	ldnp	d20, d23, [x27,#-480]
    1364:	006b636f 	.inst	0x006b636f ; undefined
    1368:	4c4d7369 	.inst	0x4c4d7369 ; undefined
    136c:	6c610043 	ldnp	d3, d0, [x2,#-496]
    1370:	5f6e6769 	.inst	0x5f6e6769 ; undefined
    1374:	544f006e 	b.al	9f380 <_stack_size+0x9e380>
    1378:	65475f50 	.inst	0x65475f50 ; undefined
    137c:	79425f74 	ldrh	w20, [x27,#302]
    1380:	72006574 	ands	w20, w11, #0x3ffffff
    1384:	5f6c6165 	.inst	0x5f6c6165 ; undefined
    1388:	00746962 	.inst	0x00746962 ; undefined
    138c:	5f746567 	.inst	0x5f746567 ; undefined
    1390:	75636573 	.inst	0x75636573 ; undefined
    1394:	625f6572 	.inst	0x625f6572 ; undefined
    1398:	5f746f6f 	.inst	0x5f746f6f ; undefined
    139c:	4f007773 	orr	v19.4s, #0x1b, lsl #24
    13a0:	475f5054 	.inst	0x475f5054 ; undefined
    13a4:	575f7465 	.inst	0x575f7465 ; undefined
    13a8:	0064726f 	.inst	0x0064726f ; undefined
    13ac:	67696c61 	.inst	0x67696c61 ; undefined
    13b0:	65725f6e 	.inst	0x65725f6e ; undefined
    13b4:	006e5f6d 	.inst	0x006e5f6d ; undefined
    13b8:	5f79656b 	.inst	0x5f79656b ; undefined
    13bc:	00667562 	.inst	0x00667562 ; undefined
    13c0:	64726f77 	.inst	0x64726f77 ; undefined
    13c4:	66666f5f 	.inst	0x66666f5f ; undefined
    13c8:	00746573 	.inst	0x00746573 ; undefined
    13cc:	5f746567 	.inst	0x5f746567 ; undefined
    13d0:	745f6163 	.inst	0x745f6163 ; undefined
    13d4:	00657079 	.inst	0x00657079 ; undefined
    13d8:	34746962 	cbz	w2, ea104 <_stack_size+0xe9104>
    13dc:	69620038 	ldpsw	x24, x0, [x1,#-240]
    13e0:	00393474 	.inst	0x00393474 ; NYI
    13e4:	725f7369 	.inst	0x725f7369 ; undefined
    13e8:	735f6b74 	.inst	0x735f6b74 ; undefined
    13ec:	72756365 	.inst	0x72756365 ; undefined
    13f0:	6f625f65 	.inst	0x6f625f65 ; undefined
    13f4:	2f00746f 	bic	v15.2s, #0x3, lsl #24
    13f8:	656d6f68 	.inst	0x656d6f68 ; undefined
    13fc:	64652f31 	.inst	0x64652f31 ; undefined
    1400:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    1404:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    1408:	68742f68 	.inst	0x68742f68 ; undefined
    140c:	742f726f 	.inst	0x742f726f ; undefined
    1410:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    1414:	312e382d 	adds	w13, w1, #0xb8e
    1418:	4554442f 	.inst	0x4554442f ; undefined
    141c:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    1420:	646f6374 	.inst	0x646f6374 ; undefined
    1424:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    1428:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    142c:	6372732f 	.inst	0x6372732f ; undefined
    1430:	6372612f 	.inst	0x6372612f ; undefined
    1434:	65722f68 	.inst	0x65722f68 ; undefined
    1438:	2f746573 	.inst	0x2f746573 ; undefined
    143c:	746f6f62 	.inst	0x746f6f62 ; undefined
    1440:	74636576 	.inst	0x74636576 ; undefined
    1444:	6f2f726f 	.inst	0x6f2f726f ; undefined
    1448:	632e7074 	.inst	0x632e7074 ; undefined
    144c:	76696400 	.inst	0x76696400 ; undefined
    1450:	63006e5f 	.inst	0x63006e5f ; undefined
    1454:	625f7275 	.inst	0x625f7275 ; undefined
    1458:	00657479 	.inst	0x00657479 ; undefined
    145c:	5f50544f 	shl	d15, d2, #16
    1460:	676f7250 	.inst	0x676f7250 ; undefined
    1464:	5f6d6172 	.inst	0x5f6d6172 ; undefined
    1468:	00646e45 	.inst	0x00646e45 ; undefined
    146c:	72617473 	.inst	0x72617473 ; undefined
    1470:	64615f74 	.inst	0x64615f74 ; undefined
    1474:	73007264 	.inst	0x73007264 ; undefined
    1478:	74726174 	.inst	0x74726174 ; undefined
    147c:	00746962 	.inst	0x00746962 ; undefined
    1480:	5f6d6572 	.inst	0x5f6d6572 ; undefined
    1484:	006c6176 	.inst	0x006c6176 ; undefined
    1488:	5f637273 	sqdmlsl	s19, h19, v3.h[2]
    148c:	61727261 	.inst	0x61727261 ; undefined
    1490:	6f740079 	mla	v25.8h, v3.8h, v4.h[3]
    1494:	626c6174 	.inst	0x626c6174 ; undefined
    1498:	73657479 	.inst	0x73657479 ; undefined
    149c:	50544f00 	adr	x0, a9e7e <_stack_size+0xa8e7e>
    14a0:	44554a5f 	.inst	0x44554a5f ; undefined
    14a4:	425f4547 	.inst	0x425f4547 ; undefined
    14a8:	67005449 	.inst	0x67005449 ; undefined
    14ac:	725f7465 	.inst	0x725f7465 ; undefined
    14b0:	6b5f6173 	subs	w19, w11, wzr, lsr #24
    14b4:	4f007965 	.inst	0x4f007965 ; undefined
    14b8:	575f5054 	.inst	0x575f5054 ; undefined
    14bc:	65746972 	.inst	0x65746972 ; undefined
    14c0:	74656700 	.inst	0x74656700 ; undefined
    14c4:	65465746 	.inst	0x65465746 ; undefined
    14c8:	72757461 	.inst	0x72757461 ; undefined
    14cc:	544f0065 	b.pl	9f4d8 <_stack_size+0x9e4d8>
    14d0:	72505f50 	.inst	0x72505f50 ; undefined
    14d4:	6172676f 	.inst	0x6172676f ; undefined
    14d8:	74535f6d 	.inst	0x74535f6d ; undefined
    14dc:	00747261 	.inst	0x00747261 ; undefined
    14e0:	6c616572 	ldnp	d18, d25, [x11,#-496]
    14e4:	67006e5f 	.inst	0x67006e5f ; undefined
    14e8:	646f6970 	.inst	0x646f6970 ; undefined
    14ec:	765f7269 	.inst	0x765f7269 ; undefined
    14f0:	72006c61 	ands	w1, w3, #0xfffffff
    14f4:	5f6c6165 	.inst	0x5f6c6165 ; undefined
    14f8:	6573666f 	.inst	0x6573666f ; undefined
    14fc:	65670074 	.inst	0x65670074 ; undefined
    1500:	54525f74 	.inst	0x54525f74 ; undefined
    1504:	68635f4b 	.inst	0x68635f4b ; undefined
    1508:	695f7069 	ldpsw	x9, x28, [x3,#248]
    150c:	43520064 	.inst	0x43520064 ; undefined
    1510:	6c665f50 	ldnp	d16, d23, [x26,#-416]
    1514:	5f687361 	sqdmlsl	s1, h27, v8.h[2]
    1518:	5f79656b 	.inst	0x5f79656b ; undefined
    151c:	7265706f 	.inst	0x7265706f ; undefined
    1520:	6f697461 	uqshl	v1.2d, v3.2d, #41
    1524:	682f006e 	.inst	0x682f006e ; undefined
    1528:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    152c:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    1530:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    1534:	68696873 	.inst	0x68696873 ; undefined
    1538:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    153c:	72742f72 	.inst	0x72742f72 ; undefined
    1540:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    1544:	2f312e38 	.inst	0x2f312e38 ; undefined
    1548:	5f455444 	shl	d4, d2, #5
    154c:	746f6f42 	.inst	0x746f6f42 ; undefined
    1550:	65646f63 	.inst	0x65646f63 ; undefined
    1554:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    1558:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    155c:	2f637273 	.inst	0x2f637273 ; undefined
    1560:	68637261 	.inst	0x68637261 ; undefined
    1564:	7365722f 	.inst	0x7365722f ; undefined
    1568:	622f7465 	.inst	0x622f7465 ; undefined
    156c:	76746f6f 	.inst	0x76746f6f ; undefined
    1570:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
    1574:	63722f72 	.inst	0x63722f72 ; undefined
    1578:	00632e70 	.inst	0x00632e70 ; undefined
    157c:	5f504352 	.inst	0x5f504352 ; undefined
    1580:	31534541 	adds	w1, w10, #0x4d1, lsl #12
    1584:	455f3832 	.inst	0x455f3832 ; undefined
    1588:	435f4243 	.inst	0x435f4243 ; undefined
    158c:	57435f57 	.inst	0x57435f57 ; undefined
    1590:	0057435f 	.inst	0x0057435f ; undefined
    1594:	655f7369 	.inst	0x655f7369 ; undefined
    1598:	6f00636e 	.inst	0x6f00636e ; undefined
    159c:	6c5f7475 	ldnp	d21, d29, [x3,#496]
    15a0:	52006e65 	eor	w5, w19, #0xfffffff
    15a4:	645f5043 	.inst	0x645f5043 ; undefined
    15a8:	79726365 	ldrh	w5, [x27,#6448]
    15ac:	665f7470 	.inst	0x665f7470 ; undefined
    15b0:	6873616c 	.inst	0x6873616c ; undefined
    15b4:	79656b5f 	ldrh	wzr, [x26,#4788]
    15b8:	695f7000 	ldpsw	x0, x28, [x0,#248]
    15bc:	7475706e 	.inst	0x7475706e ; undefined
    15c0:	61447000 	.inst	0x61447000 ; undefined
    15c4:	754f6174 	.inst	0x754f6174 ; undefined
    15c8:	5f700074 	.inst	0x5f700074 ; undefined
    15cc:	7074756f 	adr	x15, ea47b <_stack_size+0xe947b>
    15d0:	52007475 	eor	w21, w3, #0x3fffffff
    15d4:	415f5043 	.inst	0x415f5043 ; undefined
    15d8:	32315345 	orr	w5, w26, #0xffff800f
    15dc:	43455f38 	.inst	0x43455f38 ; undefined
    15e0:	45525f42 	.inst	0x45525f42 ; undefined
    15e4:	45525f47 	.inst	0x45525f47 ; undefined
    15e8:	45525f47 	.inst	0x45525f47 ; undefined
    15ec:	706f0047 	adr	x7, df5f7 <_stack_size+0xde5f7>
    15f0:	6e6f6974 	.inst	0x6e6f6974 ; undefined
    15f4:	446e4500 	.inst	0x446e4500 ; undefined
    15f8:	754f0065 	.inst	0x754f0065 ; undefined
    15fc:	74757074 	.inst	0x74757074 ; undefined
    1600:	64497743 	.inst	0x64497743 ; undefined
    1604:	4b700078 	.inst	0x4b700078 ; undefined
    1608:	4b007965 	sub	w5, w11, w0, lsl #30
    160c:	77437965 	.inst	0x77437965 ; undefined
    1610:	00786449 	.inst	0x00786449 ; undefined
    1614:	70745f70 	adr	x16, ea203 <_stack_size+0xe9203>
    1618:	79656b5f 	ldrh	wzr, [x26,#4788]
    161c:	666e695f 	.inst	0x666e695f ; undefined
    1620:	4352006f 	.inst	0x4352006f ; undefined
    1624:	6e655f50 	uqrshl	v16.8h, v26.8h, v5.8h
    1628:	70797263 	adr	x3, f4477 <_stack_size+0xf3477>
    162c:	6c665f74 	ldnp	d20, d23, [x27,#-416]
    1630:	5f687361 	sqdmlsl	s1, h27, v8.h[2]
    1634:	0079656b 	.inst	0x0079656b ; undefined
    1638:	65725f70 	.inst	0x65725f70 ; undefined
    163c:	61645f67 	.inst	0x61645f67 ; undefined
    1640:	695f6174 	ldpsw	x20, x24, [x11,#248]
    1644:	4352006e 	.inst	0x4352006e ; undefined
    1648:	45415f50 	.inst	0x45415f50 ; undefined
    164c:	38323153 	ldsetb	w18, w19, [x10]
    1650:	4243455f 	.inst	0x4243455f ; undefined
    1654:	5f57435f 	.inst	0x5f57435f ; undefined
    1658:	5f474552 	.inst	0x5f474552 ; undefined
    165c:	70005743 	adr	x3, 2147 <_stack_size+0x1147>
    1660:	5f70745f 	sqshl	d31, d2, #48
    1664:	5f79656b 	.inst	0x5f79656b ; undefined
    1668:	6c727463 	ldnp	d3, d29, [x3,#-224]
    166c:	74614400 	.inst	0x74614400 ; undefined
    1670:	6e654c61 	uqshl	v1.8h, v3.8h, v5.8h
    1674:	65656e00 	.inst	0x65656e00 ; undefined
    1678:	77735f64 	.inst	0x77735f64 ; undefined
    167c:	655f7061 	.inst	0x655f7061 ; undefined
    1680:	6169646e 	.inst	0x6169646e ; undefined
    1684:	6e49006e 	.inst	0x6e49006e ; undefined
    1688:	43747570 	.inst	0x43747570 ; undefined
    168c:	78644977 	ldrh	w23, [x11,w4,uxtw]
    1690:	725f7000 	.inst	0x725f7000 ; undefined
    1694:	645f6765 	.inst	0x645f6765 ; undefined
    1698:	5f617461 	sqshl	d1, d3, #33
    169c:	0074756f 	.inst	0x0074756f ; undefined
    16a0:	5f504352 	.inst	0x5f504352 ; undefined
    16a4:	31534541 	adds	w1, w10, #0x4d1, lsl #12
    16a8:	455f3832 	.inst	0x455f3832 ; undefined
    16ac:	435f4243 	.inst	0x435f4243 ; undefined
    16b0:	54534e4f 	b.nv	a8078 <_stack_size+0xa7078>
    16b4:	50544f5f 	adr	xzr, aa09e <_stack_size+0xa909e>
    16b8:	0057435f 	.inst	0x0057435f ; undefined
    16bc:	74614470 	.inst	0x74614470 ; undefined
    16c0:	006e4961 	.inst	0x006e4961 ; undefined
    16c4:	5f504352 	.inst	0x5f504352 ; undefined
    16c8:	44414552 	.inst	0x44414552 ; undefined
    16cc:	5f57435f 	.inst	0x5f57435f ; undefined
    16d0:	4d415253 	.inst	0x4d415253 ; undefined
    16d4:	50435200 	adr	x0, 88116 <_stack_size+0x87116>
    16d8:	5345415f 	.inst	0x5345415f ; undefined
    16dc:	5f383231 	.inst	0x5f383231 ; undefined
    16e0:	5f424345 	.inst	0x5f424345 ; undefined
    16e4:	5f474552 	.inst	0x5f474552 ; undefined
    16e8:	5f474552 	.inst	0x5f474552 ; undefined
    16ec:	52005743 	eor	w3, w26, #0x3fffff
    16f0:	575f5043 	.inst	0x575f5043 ; undefined
    16f4:	45544952 	.inst	0x45544952 ; undefined
    16f8:	5f57435f 	.inst	0x5f57435f ; undefined
    16fc:	4d415253 	.inst	0x4d415253 ; undefined
    1700:	725f7000 	.inst	0x725f7000 ; undefined
    1704:	6b5f6765 	subs	w5, w27, wzr, lsr #25
    1708:	74007965 	.inst	0x74007965 ; undefined
    170c:	746e636f 	.inst	0x746e636f ; undefined
    1710:	6f682f00 	.inst	0x6f682f00 ; undefined
    1714:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
    1718:	73696465 	.inst	0x73696465 ; undefined
    171c:	735f6e6f 	.inst	0x735f6e6f ; undefined
    1720:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
    1724:	726f6874 	.inst	0x726f6874 ; undefined
    1728:	7572742f 	.inst	0x7572742f ; undefined
    172c:	382d6b6e 	strb	w14, [x27,x13]
    1730:	442f312e 	.inst	0x442f312e ; undefined
    1734:	425f4554 	.inst	0x425f4554 ; undefined
    1738:	63746f6f 	.inst	0x63746f6f ; undefined
    173c:	2f65646f 	.inst	0x2f65646f ; undefined
    1740:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
    1744:	732f2e2e 	.inst	0x732f2e2e ; undefined
    1748:	612f6372 	.inst	0x612f6372 ; undefined
    174c:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
    1750:	65736572 	.inst	0x65736572 ; undefined
    1754:	6f622f74 	.inst	0x6f622f74 ; undefined
    1758:	6576746f 	.inst	0x6576746f ; undefined
    175c:	726f7463 	.inst	0x726f7463 ; undefined
    1760:	676e722f 	.inst	0x676e722f ; undefined
    1764:	5400632e 	b.al	23c8 <_stack_size+0x13c8>
    1768:	5f474e52 	.inst	0x5f474e52 ; undefined
    176c:	435f5753 	.inst	0x435f5753 ; undefined
    1770:	4b434548 	sub	w8, w10, w3, lsr #17
    1774:	4e525400 	.inst	0x4e525400 ; undefined
    1778:	45535f47 	.inst	0x45535f47 ; undefined
    177c:	4e495454 	.inst	0x4e495454 ; undefined
    1780:	65720047 	.inst	0x65720047 ; undefined
    1784:	006e6547 	.inst	0x006e6547 ; undefined
    1788:	65476572 	.inst	0x65476572 ; undefined
    178c:	6f635f6e 	.inst	0x6f635f6e ; undefined
    1790:	00746e75 	.inst	0x00746e75 ; undefined
    1794:	5f706d74 	.inst	0x5f706d74 ; undefined
    1798:	676e7274 	.inst	0x676e7274 ; undefined
    179c:	6e656700 	umax	v0.8h, v24.8h, v5.8h
    17a0:	474e5254 	.inst	0x474e5254 ; undefined
    17a4:	706d7400 	adr	x0, dc627 <_stack_size+0xdb627>
    17a8:	74756f5f 	.inst	0x74756f5f ; undefined
    17ac:	53435300 	.inst	0x53435300 ; undefined
    17b0:	6572415f 	.inst	0x6572415f ; undefined
    17b4:	77660061 	.inst	0x77660061 ; undefined
    17b8:	7079745f 	adr	xzr, f4643 <_stack_size+0xf3643>
    17bc:	414e0065 	.inst	0x414e0065 ; undefined
    17c0:	5f415247 	.inst	0x5f415247 ; undefined
    17c4:	525f4154 	.inst	0x525f4154 ; undefined
    17c8:	5f544f4f 	.inst	0x5f544f4f ; undefined
    17cc:	54524543 	b.cc	a6074 <_stack_size+0xa5074>
    17d0:	43494649 	.inst	0x43494649 ; undefined
    17d4:	00455441 	.inst	0x00455441 ; undefined
    17d8:	61745f70 	.inst	0x61745f70 ; undefined
    17dc:	00656c62 	.inst	0x00656c62 ; undefined
    17e0:	646e6966 	.inst	0x646e6966 ; undefined
    17e4:	5f77665f 	.inst	0x5f77665f ; undefined
    17e8:	72746e65 	.inst	0x72746e65 ; undefined
    17ec:	434f0079 	.inst	0x434f0079 ; undefined
    17f0:	41545f50 	.inst	0x41545f50 ; undefined
    17f4:	5245435f 	.inst	0x5245435f ; undefined
    17f8:	49464954 	.inst	0x49464954 ; undefined
    17fc:	45544143 	.inst	0x45544143 ; undefined
    1800:	53435300 	.inst	0x53435300 ; undefined
    1804:	5855415f 	ldr	xzr, ac02c <_stack_size+0xab02c>
    1808:	444f435f 	.inst	0x444f435f ; undefined
    180c:	59530045 	.inst	0x59530045 ; undefined
    1810:	4d455453 	.inst	0x4d455453 ; undefined
    1814:	5f41545f 	shl	d31, d2, #1
    1818:	54524543 	b.cc	a60c0 <_stack_size+0xa50c0>
    181c:	43494649 	.inst	0x43494649 ; undefined
    1820:	00455441 	.inst	0x00455441 ; undefined
    1824:	746f6f42 	.inst	0x746f6f42 ; undefined
    1828:	61727241 	.inst	0x61727241 ; undefined
    182c:	57465f79 	.inst	0x57465f79 ; undefined
    1830:	7079545f 	adr	xzr, f42bb <_stack_size+0xf32bb>
    1834:	72700065 	.inst	0x72700065 ; undefined
    1838:	5f746e69 	.inst	0x5f746e69 ; undefined
    183c:	655f7766 	.inst	0x655f7766 ; undefined
    1840:	7972746e 	ldrh	w14, [x3,#6458]
    1844:	334c4200 	.inst	0x334c4200 ; undefined
    1848:	43530031 	.inst	0x43530031 ; undefined
    184c:	4f4e5f53 	.inst	0x4f4e5f53 ; undefined
    1850:	435f5343 	.inst	0x435f5343 ; undefined
    1854:	49545245 	.inst	0x49545245 ; undefined
    1858:	41434946 	.inst	0x41434946 ; undefined
    185c:	50004554 	adr	x20, 2106 <_stack_size+0x1106>
    1860:	5f555043 	.inst	0x5f555043 ; undefined
    1864:	45444f43 	.inst	0x45444f43 ; undefined
    1868:	47414e00 	.inst	0x47414e00 ; undefined
    186c:	545f4152 	.inst	0x545f4152 ; undefined
    1870:	45435f41 	.inst	0x45435f41 ; undefined
    1874:	46495452 	.inst	0x46495452 ; undefined
    1878:	54414349 	b.ls	840e0 <_stack_size+0x830e0>
    187c:	6f420045 	mla	v5.8h, v2.8h, v2.h[0]
    1880:	7241746f 	.inst	0x7241746f ; undefined
    1884:	5f796172 	.inst	0x5f796172 ; undefined
    1888:	545f5746 	b.vs	c0370 <_stack_size+0xbf370>
    188c:	5f657079 	sqdmlsl	s25, h3, v5.h[2]
    1890:	5f700054 	.inst	0x5f700054 ; undefined
    1894:	455f5746 	.inst	0x455f5746 ; undefined
    1898:	7972746e 	ldrh	w14, [x3,#6458]
    189c:	7265435f 	.inst	0x7265435f ; undefined
    18a0:	69666974 	ldpsw	x20, x26, [x11,#-208]
    18a4:	65746163 	.inst	0x65746163 ; undefined
    18a8:	6572415f 	.inst	0x6572415f ; undefined
    18ac:	54440061 	b.ne	898b8 <_stack_size+0x888b8>
    18b0:	57465f45 	.inst	0x57465f45 ; undefined
    18b4:	5245435f 	.inst	0x5245435f ; undefined
    18b8:	49464954 	.inst	0x49464954 ; undefined
    18bc:	45544143 	.inst	0x45544143 ; undefined
    18c0:	625f6700 	.inst	0x625f6700 ; undefined
    18c4:	756b6361 	.inst	0x756b6361 ; undefined
    18c8:	6f425f70 	.inst	0x6f425f70 ; undefined
    18cc:	7241746f 	.inst	0x7241746f ; undefined
    18d0:	5f796172 	.inst	0x5f796172 ; undefined
    18d4:	545f5746 	b.vs	c03bc <_stack_size+0xbf3bc>
    18d8:	656c6261 	.inst	0x656c6261 ; undefined
    18dc:	6f682f00 	.inst	0x6f682f00 ; undefined
    18e0:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
    18e4:	73696465 	.inst	0x73696465 ; undefined
    18e8:	735f6e6f 	.inst	0x735f6e6f ; undefined
    18ec:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
    18f0:	726f6874 	.inst	0x726f6874 ; undefined
    18f4:	7572742f 	.inst	0x7572742f ; undefined
    18f8:	382d6b6e 	strb	w14, [x27,x13]
    18fc:	442f312e 	.inst	0x442f312e ; undefined
    1900:	425f4554 	.inst	0x425f4554 ; undefined
    1904:	63746f6f 	.inst	0x63746f6f ; undefined
    1908:	2f65646f 	.inst	0x2f65646f ; undefined
    190c:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
    1910:	732f2e2e 	.inst	0x732f2e2e ; undefined
    1914:	612f6372 	.inst	0x612f6372 ; undefined
    1918:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
    191c:	65736572 	.inst	0x65736572 ; undefined
    1920:	6f622f74 	.inst	0x6f622f74 ; undefined
    1924:	6576746f 	.inst	0x6576746f ; undefined
    1928:	726f7463 	.inst	0x726f7463 ; undefined
    192c:	7363732f 	.inst	0x7363732f ; undefined
    1930:	6f6f625f 	umlsl2	v31.4s, v18.8h, v15.h[2]
    1934:	72726174 	.inst	0x72726174 ; undefined
    1938:	665f7961 	.inst	0x665f7961 ; undefined
    193c:	61745f77 	.inst	0x61745f77 ; undefined
    1940:	2e656c62 	umin	v2.4h, v3.4h, v5.4h
    1944:	54520063 	b.cc	a5950 <_stack_size+0xa4950>
    1948:	41505f4b 	.inst	0x41505f4b ; undefined
    194c:	534d4152 	.inst	0x534d4152 ; undefined
    1950:	46544100 	.inst	0x46544100 ; undefined
    1954:	5245435f 	.inst	0x5245435f ; undefined
    1958:	49464954 	.inst	0x49464954 ; undefined
    195c:	45544143 	.inst	0x45544143 ; undefined
    1960:	465f7000 	.inst	0x465f7000 ; undefined
    1964:	6e455f57 	.inst	0x6e455f57 ; undefined
    1968:	5f797274 	sqdmlsl	s20, h19, v9.h[3]
    196c:	5f455444 	shl	d4, d2, #5
    1970:	544f4f42 	b.cs	a0358 <_stack_size+0x9f358>
    1974:	45444f43 	.inst	0x45444f43 ; undefined
    1978:	4b54525f 	sub	wzr, w18, w20, lsr #20
    197c:	45544400 	.inst	0x45544400 ; undefined
    1980:	4f4f425f 	.inst	0x4f4f425f ; undefined
    1984:	444f4354 	.inst	0x444f4354 ; undefined
    1988:	45540045 	.inst	0x45540045 ; undefined
    198c:	00534f45 	.inst	0x00534f45 ; undefined
    1990:	57465f70 	.inst	0x57465f70 ; undefined
    1994:	746e455f 	.inst	0x746e455f ; undefined
    1998:	445f7972 	.inst	0x445f7972 ; undefined
    199c:	465f4554 	.inst	0x465f4554 ; undefined
    19a0:	65435f57 	.inst	0x65435f57 ; undefined
    19a4:	66697472 	.inst	0x66697472 ; undefined
    19a8:	74616369 	.inst	0x74616369 ; undefined
    19ac:	5f700065 	.inst	0x5f700065 ; undefined
    19b0:	72746e65 	.inst	0x72746e65 ; undefined
    19b4:	53550079 	.inst	0x53550079 ; undefined
    19b8:	545f5245 	b.pl	c0400 <_stack_size+0xbf400>
    19bc:	45435f41 	.inst	0x45435f41 ; undefined
    19c0:	46495452 	.inst	0x46495452 ; undefined
    19c4:	54414349 	b.ls	8422c <_stack_size+0x8322c>
    19c8:	4d530045 	.inst	0x4d530045 ; undefined
    19cc:	41545f50 	.inst	0x41545f50 ; undefined
    19d0:	5245435f 	.inst	0x5245435f ; undefined
    19d4:	49464954 	.inst	0x49464954 ; undefined
    19d8:	45544143 	.inst	0x45544143 ; undefined
    19dc:	53435300 	.inst	0x53435300 ; undefined
    19e0:	5241505f 	.inst	0x5241505f ; undefined
    19e4:	00534d41 	.inst	0x00534d41 ; undefined
    19e8:	55504350 	.inst	0x55504350 ; undefined
    19ec:	5245435f 	.inst	0x5245435f ; undefined
    19f0:	49464954 	.inst	0x49464954 ; undefined
    19f4:	45544143 	.inst	0x45544143 ; undefined
    19f8:	72744300 	.inst	0x72744300 ; undefined
    19fc:	61445f6c 	.inst	0x61445f6c ; undefined
    1a00:	545f6174 	.inst	0x545f6174 ; undefined
    1a04:	59454b00 	.inst	0x59454b00 ; undefined
    1a08:	4749525f 	.inst	0x4749525f ; undefined
    1a0c:	505f5448 	adr	x8, c0496 <_stack_size+0xbf496>
    1a10:	5f555043 	.inst	0x5f555043 ; undefined
    1a14:	76005746 	.inst	0x76005746 ; undefined
    1a18:	66697265 	.inst	0x66697265 ; undefined
    1a1c:	6d695f79 	ldp	d25, d23, [x27,#-368]
    1a20:	69735f67 	ldpsw	x7, x23, [x27,#-104]
    1a24:	74616e67 	.inst	0x74616e67 ; undefined
    1a28:	00657275 	.inst	0x00657275 ; undefined
    1a2c:	5f746567 	.inst	0x5f746567 ; undefined
    1a30:	73726576 	.inst	0x73726576 ; undefined
    1a34:	696e6f69 	ldpsw	x9, x27, [x27,#-144]
    1a38:	7600676e 	.inst	0x7600676e ; undefined
    1a3c:	66697265 	.inst	0x66697265 ; undefined
    1a40:	69735f79 	ldpsw	x25, x23, [x27,#-104]
    1a44:	5200657a 	eor	w26, w11, #0x3ffffff
    1a48:	525f4545 	.inst	0x525f4545 ; undefined
    1a4c:	6f696765 	sqshlu	v5.2d, v27.2d, #41
    1a50:	4554006e 	.inst	0x4554006e ; undefined
    1a54:	65525f45 	.inst	0x65525f45 ; undefined
    1a58:	6e6f6967 	.inst	0x6e6f6967 ; undefined
    1a5c:	66626f00 	.inst	0x66626f00 ; undefined
    1a60:	7a69735f 	.inst	0x7a69735f ; undefined
    1a64:	754e0065 	.inst	0x754e0065 ; undefined
    1a68:	7265626d 	.inst	0x7265626d ; undefined
    1a6c:	5f666f5f 	.inst	0x5f666f5f ; undefined
    1a70:	61726353 	.inst	0x61726353 ; undefined
    1a74:	656c626d 	.inst	0x656c626d ; undefined
    1a78:	79654b5f 	ldrh	wzr, [x26,#4772]
    1a7c:	74656700 	.inst	0x74656700 ; undefined
    1a80:	6574645f 	.inst	0x6574645f ; undefined
    1a84:	6f6f625f 	umlsl2	v31.4s, v18.8h, v15.h[2]
    1a88:	646f6374 	.inst	0x646f6374 ; undefined
    1a8c:	74725f65 	.inst	0x74725f65 ; undefined
    1a90:	616e5f6b 	.inst	0x616e5f6b ; undefined
    1a94:	5400646e 	b.al	2720 <_stack_size+0x1720>
    1a98:	434f4e5f 	.inst	0x434f4e5f ; undefined
    1a9c:	72545f53 	.inst	0x72545f53 ; undefined
    1aa0:	65747375 	.inst	0x65747375 ; undefined
    1aa4:	61445f64 	.inst	0x61445f64 ; undefined
    1aa8:	545f6174 	.inst	0x545f6174 ; undefined
    1aac:	006c6961 	.inst	0x006c6961 ; undefined
    1ab0:	5f4b5452 	shl	d18, d2, #11
    1ab4:	61726150 	.inst	0x61726150 ; undefined
    1ab8:	525f736d 	.inst	0x525f736d ; undefined
    1abc:	525f4545 	.inst	0x525f4545 ; undefined
    1ac0:	6f696765 	sqshlu	v5.2d, v27.2d, #41
    1ac4:	00745f6e 	.inst	0x00745f6e ; undefined
    1ac8:	746f7270 	.inst	0x746f7270 ; undefined
    1acc:	5f746365 	.inst	0x5f746365 ; undefined
    1ad0:	69676572 	ldpsw	x18, x25, [x11,#-200]
    1ad4:	2f006e6f 	.inst	0x2f006e6f ; undefined
    1ad8:	656d6f68 	.inst	0x656d6f68 ; undefined
    1adc:	64652f31 	.inst	0x64652f31 ; undefined
    1ae0:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    1ae4:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    1ae8:	68742f68 	.inst	0x68742f68 ; undefined
    1aec:	742f726f 	.inst	0x742f726f ; undefined
    1af0:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    1af4:	312e382d 	adds	w13, w1, #0xb8e
    1af8:	4554442f 	.inst	0x4554442f ; undefined
    1afc:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    1b00:	646f6374 	.inst	0x646f6374 ; undefined
    1b04:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    1b08:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    1b0c:	6372732f 	.inst	0x6372732f ; undefined
    1b10:	6372612f 	.inst	0x6372612f ; undefined
    1b14:	65722f68 	.inst	0x65722f68 ; undefined
    1b18:	2f746573 	.inst	0x2f746573 ; undefined
    1b1c:	746f6f62 	.inst	0x746f6f62 ; undefined
    1b20:	74636576 	.inst	0x74636576 ; undefined
    1b24:	732f726f 	.inst	0x732f726f ; undefined
    1b28:	625f7363 	.inst	0x625f7363 ; undefined
    1b2c:	2e746f6f 	umin	v15.4h, v27.4h, v20.4h
    1b30:	5f5f0063 	.inst	0x5f5f0063 ; undefined
    1b34:	6c697562 	ldnp	d2, d29, [x11,#-368]
    1b38:	5f6e6974 	.inst	0x5f6e6974 ; undefined
    1b3c:	73747570 	.inst	0x73747570 ; undefined
    1b40:	45544400 	.inst	0x45544400 ; undefined
    1b44:	6f72505f 	.inst	0x6f72505f ; undefined
    1b48:	74636574 	.inst	0x74636574 ; undefined
    1b4c:	5f6e6f69 	.inst	0x5f6e6f69 ; undefined
    1b50:	0079654b 	.inst	0x0079654b ; undefined
    1b54:	5f59454b 	.inst	0x5f59454b ; undefined
    1b58:	48474952 	ldxrh	w18, [x10]
    1b5c:	54445f54 	.inst	0x54445f54 ; undefined
    1b60:	57465f45 	.inst	0x57465f45 ; undefined
    1b64:	59454b00 	.inst	0x59454b00 ; undefined
    1b68:	4749525f 	.inst	0x4749525f ; undefined
    1b6c:	535f5448 	.inst	0x535f5448 ; undefined
    1b70:	67005343 	.inst	0x67005343 ; undefined
    1b74:	645f7465 	.inst	0x645f7465 ; undefined
    1b78:	625f6574 	.inst	0x625f6574 ; undefined
    1b7c:	63746f6f 	.inst	0x63746f6f ; undefined
    1b80:	5f65646f 	.inst	0x5f65646f ; undefined
    1b84:	5f6b7472 	sqshl	d18, d3, #43
    1b88:	00697073 	.inst	0x00697073 ; undefined
    1b8c:	5f747865 	sqdmlsl	s5, h3, v4.h[7]
    1b90:	756c6176 	.inst	0x756c6176 ; undefined
    1b94:	614d0065 	.inst	0x614d0065 ; undefined
    1b98:	4d5f6b73 	.inst	0x4d5f6b73 ; undefined
    1b9c:	00444953 	.inst	0x00444953 ; undefined
    1ba0:	5f525453 	shl	d19, d2, #18
    1ba4:	75736552 	.inst	0x75736552 ; undefined
    1ba8:	4d5f656d 	.inst	0x4d5f656d ; undefined
    1bac:	0065646f 	.inst	0x0065646f ; undefined
    1bb0:	5f525453 	shl	d19, d2, #18
    1bb4:	5f6e694d 	.inst	0x5f6e694d ; undefined
    1bb8:	657a6953 	.inst	0x657a6953 ; undefined
    1bbc:	5f666f5f 	.inst	0x5f666f5f ; undefined
    1bc0:	4f454554 	.inst	0x4f454554 ; undefined
    1bc4:	72415f53 	.inst	0x72415f53 ; undefined
    1bc8:	4b006165 	sub	w5, w11, w0, lsl #24
    1bcc:	525f7965 	.inst	0x525f7965 ; undefined
    1bd0:	74686769 	.inst	0x74686769 ; undefined
    1bd4:	68435f73 	.inst	0x68435f73 ; undefined
    1bd8:	496b6365 	.inst	0x496b6365 ; undefined
    1bdc:	74430044 	.inst	0x74430044 ; undefined
    1be0:	445f6c72 	.inst	0x445f6c72 ; undefined
    1be4:	00617461 	.inst	0x00617461 ; undefined
    1be8:	73757254 	.inst	0x73757254 ; undefined
    1bec:	5f646574 	.inst	0x5f646574 ; undefined
    1bf0:	545f5746 	b.vs	c06d8 <_stack_size+0xbf6d8>
    1bf4:	5f6c6961 	.inst	0x5f6c6961 ; undefined
    1bf8:	65670054 	.inst	0x65670054 ; undefined
    1bfc:	74645f74 	.inst	0x74645f74 ; undefined
    1c00:	77665f65 	.inst	0x77665f65 ; undefined
    1c04:	7265635f 	.inst	0x7265635f ; undefined
    1c08:	69666974 	ldpsw	x20, x26, [x11,#-208]
    1c0c:	65746163 	.inst	0x65746163 ; undefined
    1c10:	6d6d655f 	ldp	d31, d25, [x10,#-304]
    1c14:	54530063 	b.cc	a7c20 <_stack_size+0xa6c20>
    1c18:	65445f52 	.inst	0x65445f52 ; undefined
    1c1c:	6c756166 	ldnp	d6, d24, [x11,#-176]
    1c20:	65525f74 	.inst	0x65525f74 ; undefined
    1c24:	6e6f6967 	.inst	0x6e6f6967 ; undefined
    1c28:	6174535f 	.inst	0x6174535f ; undefined
    1c2c:	415f7472 	.inst	0x415f7472 ; undefined
    1c30:	00726464 	.inst	0x00726464 ; undefined
    1c34:	5f59454b 	.inst	0x5f59454b ; undefined
    1c38:	48474952 	ldxrh	w18, [x10]
    1c3c:	414e5f54 	.inst	0x414e5f54 ; undefined
    1c40:	5f415247 	.inst	0x5f415247 ; undefined
    1c44:	73004154 	.inst	0x73004154 ; undefined
    1c48:	415f636d 	.inst	0x415f636d ; undefined
    1c4c:	455f5345 	.inst	0x455f5345 ; undefined
    1c50:	645f4243 	.inst	0x645f4243 ; undefined
    1c54:	79726365 	ldrh	w5, [x27,#6448]
    1c58:	4d5f7470 	.inst	0x4d5f7470 ; undefined
    1c5c:	70004d45 	adr	x5, 2607 <_stack_size+0x1607>
    1c60:	6961745f 	ldpsw	xzr, x29, [x2,#-248]
    1c64:	614d006c 	.inst	0x614d006c ; undefined
    1c68:	565f6b73 	.inst	0x565f6b73 ; undefined
    1c6c:	00737265 	.inst	0x00737265 ; undefined
    1c70:	5f747845 	sqdmlsl	s5, h2, v4.h[7]
    1c74:	6c627550 	ldnp	d16, d29, [x10,#-480]
    1c78:	525f6369 	.inst	0x525f6369 ; undefined
    1c7c:	4b5f4153 	sub	w19, w10, wzr, lsr #16
    1c80:	53007965 	ubfx	w5, w11, #0, #31
    1c84:	616e6769 	.inst	0x616e6769 ; undefined
    1c88:	65727574 	.inst	0x65727574 ; undefined
    1c8c:	64644100 	.inst	0x64644100 ; undefined
    1c90:	666f5f72 	.inst	0x666f5f72 ; undefined
    1c94:	4656415f 	.inst	0x4656415f ; undefined
    1c98:	72415f57 	.inst	0x72415f57 ; undefined
    1c9c:	67006165 	.inst	0x67006165 ; undefined
    1ca0:	645f7465 	.inst	0x645f7465 ; undefined
    1ca4:	665f6574 	.inst	0x665f6574 ; undefined
    1ca8:	65635f77 	.inst	0x65635f77 ; undefined
    1cac:	66697472 	.inst	0x66697472 ; undefined
    1cb0:	74616369 	.inst	0x74616369 ; undefined
    1cb4:	70735f65 	adr	x5, e88a3 <_stack_size+0xe78a3>
    1cb8:	64410069 	.inst	0x64410069 ; undefined
    1cbc:	6f5f7264 	.inst	0x6f5f7264 ; undefined
    1cc0:	45545f66 	.inst	0x45545f66 ; undefined
    1cc4:	5f534f45 	.inst	0x5f534f45 ; undefined
    1cc8:	61657241 	.inst	0x61657241 ; undefined
    1ccc:	59454b00 	.inst	0x59454b00 ; undefined
    1cd0:	4749525f 	.inst	0x4749525f ; undefined
    1cd4:	545f5448 	b.hi	c075c <_stack_size+0xbf75c>
    1cd8:	54535552 	.inst	0x54535552 ; undefined
    1cdc:	465f4445 	.inst	0x465f4445 ; undefined
    1ce0:	5f670057 	.inst	0x5f670057 ; undefined
    1ce4:	5f455444 	shl	d4, d2, #5
    1ce8:	435f5746 	.inst	0x435f5746 ; undefined
    1cec:	69747265 	ldpsw	x5, x28, [x19,#-96]
    1cf0:	61636966 	.inst	0x61636966 ; undefined
    1cf4:	53006574 	ubfx	w20, w11, #0, #26
    1cf8:	415f5254 	.inst	0x415f5254 ; undefined
    1cfc:	5f726464 	.inst	0x5f726464 ; undefined
    1d00:	425f666f 	.inst	0x425f666f ; undefined
    1d04:	5f31334c 	.inst	0x5f31334c ; undefined
    1d08:	5f4d4152 	.inst	0x5f4d4152 ; undefined
    1d0c:	61657241 	.inst	0x61657241 ; undefined
    1d10:	79654b00 	ldrh	w0, [x24,#4772]
    1d14:	6769525f 	.inst	0x6769525f ; undefined
    1d18:	00737468 	.inst	0x00737468 ; undefined
    1d1c:	5f59454b 	.inst	0x5f59454b ; undefined
    1d20:	48474952 	ldxrh	w18, [x10]
    1d24:	53555f54 	.inst	0x53555f54 ; undefined
    1d28:	545f5245 	b.pl	c0770 <_stack_size+0xbf770>
    1d2c:	54520041 	b.ne	a5d34 <_stack_size+0xa4d34>
    1d30:	61505f4b 	.inst	0x61505f4b ; undefined
    1d34:	736d6172 	.inst	0x736d6172 ; undefined
    1d38:	4545545f 	.inst	0x4545545f ; undefined
    1d3c:	6765525f 	.inst	0x6765525f ; undefined
    1d40:	5f6e6f69 	.inst	0x5f6e6f69 ; undefined
    1d44:	79730074 	ldrh	w20, [x3,#6528]
    1d48:	73725f73 	.inst	0x73725f73 ; undefined
    1d4c:	64615f61 	.inst	0x64615f61 ; undefined
    1d50:	4d007264 	st3	{v4.h-v6.h}[6], [x19]
    1d54:	656b7261 	.inst	0x656b7261 ; undefined
    1d58:	65535f74 	.inst	0x65535f74 ; undefined
    1d5c:	6e656d67 	umin	v7.8h, v11.8h, v5.8h
    1d60:	5f444974 	.inst	0x5f444974 ; undefined
    1d64:	00545845 	.inst	0x00545845 ; undefined
    1d68:	5f746567 	.inst	0x5f746567 ; undefined
    1d6c:	6b72616d 	.inst	0x6b72616d ; undefined
    1d70:	735f7465 	.inst	0x735f7465 ; undefined
    1d74:	656d6765 	.inst	0x656d6765 ; undefined
    1d78:	695f746e 	ldpsw	x14, x29, [x3,#248]
    1d7c:	454b0064 	.inst	0x454b0064 ; undefined
    1d80:	49525f59 	.inst	0x49525f59 ; undefined
    1d84:	5f544847 	.inst	0x5f544847 ; undefined
    1d88:	54535953 	.inst	0x54535953 ; undefined
    1d8c:	545f4d45 	b.pl	c0734 <_stack_size+0xbf734>
    1d90:	63730041 	.inst	0x63730041 ; undefined
    1d94:	626d6172 	.inst	0x626d6172 ; undefined
    1d98:	725f656c 	.inst	0x725f656c ; undefined
    1d9c:	6f696765 	sqshlu	v5.2d, v27.2d, #41
    1da0:	656b006e 	.inst	0x656b006e ; undefined
    1da4:	64695f79 	.inst	0x64695f79 ; undefined
    1da8:	736d0078 	.inst	0x736d0078 ; undefined
    1dac:	76006469 	.inst	0x76006469 ; undefined
    1db0:	66697265 	.inst	0x66697265 ; undefined
    1db4:	74635f79 	.inst	0x74635f79 ; undefined
    1db8:	645f6c72 	.inst	0x645f6c72 ; undefined
    1dbc:	00617461 	.inst	0x00617461 ; undefined
    1dc0:	54525f70 	.inst	0x54525f70 ; undefined
    1dc4:	61505f4b 	.inst	0x61505f4b ; undefined
    1dc8:	736d6172 	.inst	0x736d6172 ; undefined
    1dcc:	59454b00 	.inst	0x59454b00 ; undefined
    1dd0:	4749525f 	.inst	0x4749525f ; undefined
    1dd4:	495f5448 	.inst	0x495f5448 ; undefined
    1dd8:	4c41564e 	.inst	0x4c41564e ; undefined
    1ddc:	67004449 	.inst	0x67004449 ; undefined
    1de0:	645f7465 	.inst	0x645f7465 ; undefined
    1de4:	665f6574 	.inst	0x665f6574 ; undefined
    1de8:	65635f77 	.inst	0x65635f77 ; undefined
    1dec:	66697472 	.inst	0x66697472 ; undefined
    1df0:	74616369 	.inst	0x74616369 ; undefined
    1df4:	616e5f65 	.inst	0x616e5f65 ; undefined
    1df8:	4b00646e 	sub	w14, w3, w0, lsl #25
    1dfc:	525f5945 	.inst	0x525f5945 ; undefined
    1e00:	54484749 	b.ls	926e8 <_stack_size+0x916e8>
    1e04:	504d535f 	adr	xzr, 9c86e <_stack_size+0x9b86e>
    1e08:	0041545f 	.inst	0x0041545f ; undefined
    1e0c:	72636564 	.inst	0x72636564 ; undefined
    1e10:	5f747079 	sqdmlsl	s25, h3, v4.h[3]
    1e14:	657a6973 	.inst	0x657a6973 ; undefined
    1e18:	79654b00 	ldrh	w0, [x24,#4772]
    1e1c:	6769525f 	.inst	0x6769525f ; undefined
    1e20:	52007468 	eor	w8, w3, #0x3fffffff
    1e24:	505f4b54 	adr	x20, c078e <_stack_size+0xbf78e>
    1e28:	6d617261 	ldp	d1, d28, [x19,#-496]
    1e2c:	00545f73 	.inst	0x00545f73 ; undefined
    1e30:	5f666572 	.inst	0x5f666572 ; undefined
    1e34:	756c6176 	.inst	0x756c6176 ; undefined
    1e38:	65670065 	.inst	0x65670065 ; undefined
    1e3c:	74645f74 	.inst	0x74645f74 ; undefined
    1e40:	6f625f65 	.inst	0x6f625f65 ; undefined
    1e44:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    1e48:	725f6564 	.inst	0x725f6564 ; undefined
    1e4c:	655f6b74 	.inst	0x655f6b74 ; undefined
    1e50:	00636d6d 	.inst	0x00636d6d ; undefined
    1e54:	73726556 	.inst	0x73726556 ; undefined
    1e58:	696e6f69 	ldpsw	x9, x27, [x27,#-144]
    1e5c:	455f676e 	.inst	0x455f676e ; undefined
    1e60:	4b005458 	sub	w24, w2, w0, lsl #21
    1e64:	525f5945 	.inst	0x525f5945 ; undefined
    1e68:	54484749 	b.ls	92750 <_stack_size+0x91750>
    1e6c:	4e504f5f 	.inst	0x4e504f5f ; undefined
    1e70:	41545f43 	.inst	0x41545f43 ; undefined
    1e74:	52545300 	.inst	0x52545300 ; undefined
    1e78:	7a69535f 	.inst	0x7a69535f ; undefined
    1e7c:	666f5f65 	.inst	0x666f5f65 ; undefined
    1e80:	334c425f 	.inst	0x334c425f ; undefined
    1e84:	41525f31 	.inst	0x41525f31 ; undefined
    1e88:	72415f4d 	.inst	0x72415f4d ; undefined
    1e8c:	41006165 	.inst	0x41006165 ; undefined
    1e90:	505f4654 	adr	x20, c075a <_stack_size+0xbf75a>
    1e94:	65746f72 	.inst	0x65746f72 ; undefined
    1e98:	6f697463 	uqshl	v3.2d, v3.2d, #41
    1e9c:	654b5f6e 	.inst	0x654b5f6e ; undefined
    1ea0:	54530079 	.inst	0x54530079 ; undefined
    1ea4:	694d5f52 	ldpsw	x18, x23, [x26,#104]
    1ea8:	69535f6e 	ldpsw	x14, x23, [x27,#152]
    1eac:	6f5f657a 	sqshlu	v26.2d, v11.2d, #31
    1eb0:	56415f66 	.inst	0x56415f66 ; undefined
    1eb4:	415f5746 	.inst	0x415f5746 ; undefined
    1eb8:	00616572 	.inst	0x00616572 ; undefined
    1ebc:	65615f70 	.inst	0x65615f70 ; undefined
    1ec0:	656b5f73 	.inst	0x656b5f73 ; undefined
    1ec4:	61500079 	.inst	0x61500079 ; undefined
    1ec8:	6e696464 	umax	v4.8h, v3.8h, v9.8h
    1ecc:	5f700067 	.inst	0x5f700067 ; undefined
    1ed0:	61746164 	.inst	0x61746164 ; undefined
    1ed4:	45544400 	.inst	0x45544400 ; undefined
    1ed8:	5f57465f 	.inst	0x5f57465f ; undefined
    1edc:	74726543 	.inst	0x74726543 ; undefined
    1ee0:	63696669 	.inst	0x63696669 ; undefined
    1ee4:	5f657461 	sqshl	d1, d3, #37
    1ee8:	64410054 	.inst	0x64410054 ; undefined
    1eec:	6f5f7264 	.inst	0x6f5f7264 ; undefined
    1ef0:	4c425f66 	.inst	0x4c425f66 ; undefined
    1ef4:	535f3133 	.inst	0x535f3133 ; undefined
    1ef8:	5f4d4152 	.inst	0x5f4d4152 ; undefined
    1efc:	61657241 	.inst	0x61657241 ; undefined
    1f00:	49414d00 	.inst	0x49414d00 ; undefined
    1f04:	6564004e 	.inst	0x6564004e ; undefined
    1f08:	6d726574 	ldp	d20, d25, [x11,#-224]
    1f0c:	5f656e69 	.inst	0x5f656e69 ; undefined
    1f10:	74726170 	.inst	0x74726170 ; undefined
    1f14:	646e615f 	.inst	0x646e615f ; undefined
    1f18:	6b6c625f 	.inst	0x6b6c625f ; undefined
    1f1c:	006f6e5f 	.inst	0x006f6e5f ; undefined
    1f20:	67616d69 	.inst	0x67616d69 ; undefined
    1f24:	79745f65 	ldrh	w5, [x27,#6702]
    1f28:	745f6570 	.inst	0x745f6570 ; undefined
    1f2c:	43414200 	.inst	0x43414200 ; undefined
    1f30:	0050554b 	.inst	0x0050554b ; undefined
    1f34:	5f746567 	.inst	0x5f746567 ; undefined
    1f38:	5f657464 	sqshl	d4, d3, #37
    1f3c:	746f6f62 	.inst	0x746f6f62 ; undefined
    1f40:	65646f63 	.inst	0x65646f63 ; undefined
    1f44:	6b74725f 	.inst	0x6b74725f ; undefined
    1f48:	616d6900 	.inst	0x616d6900 ; undefined
    1f4c:	745f6567 	.inst	0x745f6567 ; undefined
    1f50:	00657079 	.inst	0x00657079 ; undefined
    1f54:	79706f63 	ldrh	w3, [x27,#6198]
    1f58:	616d695f 	.inst	0x616d695f ; undefined
    1f5c:	665f6567 	.inst	0x665f6567 ; undefined
    1f60:	5f6d6f72 	.inst	0x5f6d6f72 ; undefined
    1f64:	636d6d65 	.inst	0x636d6d65 ; undefined
    1f68:	6d657200 	ldp	d0, d28, [x16,#-432]
    1f6c:	5f6e6961 	.inst	0x5f6e6961 ; undefined
    1f70:	006e656c 	.inst	0x006e656c ; undefined
    1f74:	5f657464 	sqshl	d4, d3, #37
    1f78:	746f6f62 	.inst	0x746f6f62 ; undefined
    1f7c:	65646f63 	.inst	0x65646f63 ; undefined
    1f80:	6572615f 	.inst	0x6572615f ; undefined
    1f84:	69735f61 	ldpsw	x1, x23, [x27,#-104]
    1f88:	7000657a 	adr	x26, 2c37 <_stack_size+0x1c37>
    1f8c:	00747261 	.inst	0x00747261 ; undefined
    1f90:	5f746567 	.inst	0x5f746567 ; undefined
    1f94:	5f657464 	sqshl	d4, d3, #37
    1f98:	635f7766 	.inst	0x635f7766 ; undefined
    1f9c:	69747265 	ldpsw	x5, x28, [x19,#-96]
    1fa0:	61636966 	.inst	0x61636966 ; undefined
    1fa4:	2f006574 	mvni	v20.2s, #0xb, lsl #24
    1fa8:	656d6f68 	.inst	0x656d6f68 ; undefined
    1fac:	64652f31 	.inst	0x64652f31 ; undefined
    1fb0:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    1fb4:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    1fb8:	68742f68 	.inst	0x68742f68 ; undefined
    1fbc:	742f726f 	.inst	0x742f726f ; undefined
    1fc0:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    1fc4:	312e382d 	adds	w13, w1, #0xb8e
    1fc8:	4554442f 	.inst	0x4554442f ; undefined
    1fcc:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    1fd0:	646f6374 	.inst	0x646f6374 ; undefined
    1fd4:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    1fd8:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    1fdc:	6372732f 	.inst	0x6372732f ; undefined
    1fe0:	6372612f 	.inst	0x6372612f ; undefined
    1fe4:	65722f68 	.inst	0x65722f68 ; undefined
    1fe8:	2f746573 	.inst	0x2f746573 ; undefined
    1fec:	746f6f62 	.inst	0x746f6f62 ; undefined
    1ff0:	74636576 	.inst	0x74636576 ; undefined
    1ff4:	732f726f 	.inst	0x732f726f ; undefined
    1ff8:	625f7363 	.inst	0x625f7363 ; undefined
    1ffc:	5f746f6f 	.inst	0x5f746f6f ; undefined
    2000:	636d6d65 	.inst	0x636d6d65 ; undefined
    2004:	6900632e 	.inst	0x6900632e ; undefined
    2008:	625f6874 	.inst	0x625f6874 ; undefined
    200c:	756b6361 	.inst	0x756b6361 ; undefined
    2010:	6f630070 	mla	v16.8h, v3.8h, v3.h[2]
    2014:	695f7970 	ldpsw	x16, x30, [x11,#248]
    2018:	6567616d 	.inst	0x6567616d ; undefined
    201c:	6f72665f 	sqshlu	v31.2d, v18.2d, #50
    2020:	616e5f6d 	.inst	0x616e5f6d ; undefined
    2024:	5000646e 	adr	x14, 2cb2 <_stack_size+0x1cb2>
    2028:	746e6972 	.inst	0x746e6972 ; undefined
    202c:	6f666e49 	.inst	0x6f666e49 ; undefined
    2030:	6f682f00 	.inst	0x6f682f00 ; undefined
    2034:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
    2038:	73696465 	.inst	0x73696465 ; undefined
    203c:	735f6e6f 	.inst	0x735f6e6f ; undefined
    2040:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
    2044:	726f6874 	.inst	0x726f6874 ; undefined
    2048:	7572742f 	.inst	0x7572742f ; undefined
    204c:	382d6b6e 	strb	w14, [x27,x13]
    2050:	442f312e 	.inst	0x442f312e ; undefined
    2054:	425f4554 	.inst	0x425f4554 ; undefined
    2058:	63746f6f 	.inst	0x63746f6f ; undefined
    205c:	2f65646f 	.inst	0x2f65646f ; undefined
    2060:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
    2064:	732f2e2e 	.inst	0x732f2e2e ; undefined
    2068:	612f6372 	.inst	0x612f6372 ; undefined
    206c:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
    2070:	65736572 	.inst	0x65736572 ; undefined
    2074:	6f622f74 	.inst	0x6f622f74 ; undefined
    2078:	6576746f 	.inst	0x6576746f ; undefined
    207c:	726f7463 	.inst	0x726f7463 ; undefined
    2080:	7363732f 	.inst	0x7363732f ; undefined
    2084:	6f6f625f 	umlsl2	v31.4s, v18.8h, v15.h[2]
    2088:	616e5f74 	.inst	0x616e5f74 ; undefined
    208c:	632e646e 	.inst	0x632e646e ; undefined
    2090:	61657200 	.inst	0x61657200 ; undefined
    2094:	6e6f5f64 	uqrshl	v4.8h, v27.8h, v15.8h
    2098:	61705f65 	.inst	0x61705f65 ; undefined
    209c:	49006567 	.inst	0x49006567 ; undefined
    20a0:	505f5844 	adr	x4, c0baa <_stack_size+0xbfbaa>
    20a4:	5f555043 	.inst	0x5f555043 ; undefined
    20a8:	74726543 	.inst	0x74726543 ; undefined
    20ac:	63696669 	.inst	0x63696669 ; undefined
    20b0:	00657461 	.inst	0x00657461 ; undefined
    20b4:	5f584449 	.inst	0x5f584449 ; undefined
    20b8:	465f5641 	.inst	0x465f5641 ; undefined
    20bc:	65435f57 	.inst	0x65435f57 ; undefined
    20c0:	66697472 	.inst	0x66697472 ; undefined
    20c4:	74616369 	.inst	0x74616369 ; undefined
    20c8:	65720065 	.inst	0x65720065 ; undefined
    20cc:	6e69616d 	rsubhn2	v13.8h, v11.4s, v9.4s
    20d0:	7a69735f 	.inst	0x7a69735f ; undefined
    20d4:	65430065 	.inst	0x65430065 ; undefined
    20d8:	66697472 	.inst	0x66697472 ; undefined
    20dc:	74616369 	.inst	0x74616369 ; undefined
    20e0:	72415f65 	.inst	0x72415f65 ; undefined
    20e4:	495f6165 	.inst	0x495f6165 ; undefined
    20e8:	7865646e 	.inst	0x7865646e ; undefined
    20ec:	58444900 	ldr	x0, 8aa0c <_stack_size+0x89a0c>
    20f0:	5359535f 	.inst	0x5359535f ; undefined
    20f4:	5f4d4554 	.inst	0x5f4d4554 ; undefined
    20f8:	435f4154 	.inst	0x435f4154 ; undefined
    20fc:	69747265 	ldpsw	x5, x28, [x19,#-96]
    2100:	61636966 	.inst	0x61636966 ; undefined
    2104:	49006574 	.inst	0x49006574 ; undefined
    2108:	535f5844 	.inst	0x535f5844 ; undefined
    210c:	435f504d 	.inst	0x435f504d ; undefined
    2110:	69747265 	ldpsw	x5, x28, [x19,#-96]
    2114:	61636966 	.inst	0x61636966 ; undefined
    2118:	49006574 	.inst	0x49006574 ; undefined
    211c:	4e5f5844 	uzp2	v4.8h, v2.8h, v31.8h
    2120:	41524741 	.inst	0x41524741 ; undefined
    2124:	5f41545f 	shl	d31, d2, #1
    2128:	74726543 	.inst	0x74726543 ; undefined
    212c:	63696669 	.inst	0x63696669 ; undefined
    2130:	00657461 	.inst	0x00657461 ; undefined
    2134:	5f584449 	.inst	0x5f584449 ; undefined
    2138:	52455355 	.inst	0x52455355 ; undefined
    213c:	5f41545f 	shl	d31, d2, #1
    2140:	74726543 	.inst	0x74726543 ; undefined
    2144:	63696669 	.inst	0x63696669 ; undefined
    2148:	00657461 	.inst	0x00657461 ; undefined
    214c:	5f584449 	.inst	0x5f584449 ; undefined
    2150:	5f465441 	shl	d1, d2, #6
    2154:	74726543 	.inst	0x74726543 ; undefined
    2158:	63696669 	.inst	0x63696669 ; undefined
    215c:	00657461 	.inst	0x00657461 ; undefined
    2160:	79706f63 	ldrh	w3, [x27,#6198]
    2164:	7a69735f 	.inst	0x7a69735f ; undefined
    2168:	74640065 	.inst	0x74640065 ; undefined
    216c:	6f625f65 	.inst	0x6f625f65 ; undefined
    2170:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    2174:	725f6564 	.inst	0x725f6564 ; undefined
    2178:	615f6b74 	.inst	0x615f6b74 ; undefined
    217c:	5f616572 	.inst	0x5f616572 ; undefined
    2180:	657a6973 	.inst	0x657a6973 ; undefined
    2184:	58444900 	ldr	x0, 8aaa4 <_stack_size+0x89aa4>
    2188:	4554445f 	.inst	0x4554445f ; undefined
    218c:	5f57465f 	.inst	0x5f57465f ; undefined
    2190:	74726543 	.inst	0x74726543 ; undefined
    2194:	63696669 	.inst	0x63696669 ; undefined
    2198:	00657461 	.inst	0x00657461 ; undefined
    219c:	5f584449 	.inst	0x5f584449 ; undefined
    21a0:	5f43504f 	.inst	0x5f43504f ; undefined
    21a4:	435f4154 	.inst	0x435f4154 ; undefined
    21a8:	69747265 	ldpsw	x5, x28, [x19,#-96]
    21ac:	61636966 	.inst	0x61636966 ; undefined
    21b0:	2f006574 	mvni	v20.2s, #0xb, lsl #24
    21b4:	656d6f68 	.inst	0x656d6f68 ; undefined
    21b8:	64652f31 	.inst	0x64652f31 ; undefined
    21bc:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    21c0:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    21c4:	68742f68 	.inst	0x68742f68 ; undefined
    21c8:	742f726f 	.inst	0x742f726f ; undefined
    21cc:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    21d0:	312e382d 	adds	w13, w1, #0xb8e
    21d4:	4554442f 	.inst	0x4554442f ; undefined
    21d8:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    21dc:	646f6374 	.inst	0x646f6374 ; undefined
    21e0:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    21e4:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    21e8:	6372732f 	.inst	0x6372732f ; undefined
    21ec:	6372612f 	.inst	0x6372612f ; undefined
    21f0:	65722f68 	.inst	0x65722f68 ; undefined
    21f4:	2f746573 	.inst	0x2f746573 ; undefined
    21f8:	746f6f62 	.inst	0x746f6f62 ; undefined
    21fc:	74636576 	.inst	0x74636576 ; undefined
    2200:	732f726f 	.inst	0x732f726f ; undefined
    2204:	625f7363 	.inst	0x625f7363 ; undefined
    2208:	5f746f6f 	.inst	0x5f746f6f ; undefined
    220c:	2e697073 	uabdl	v19.4s, v3.4h, v9.4h
    2210:	6f630063 	mla	v3.8h, v3.8h, v3.h[2]
    2214:	615f7970 	.inst	0x615f7970 ; undefined
    2218:	635f646e 	.inst	0x635f646e ; undefined
    221c:	6b636568 	.inst	0x6b636568 ; undefined
    2220:	7a69735f 	.inst	0x7a69735f ; undefined
    2224:	6f700065 	mla	v5.8h, v3.8h, v0.h[3]
    2228:	5f726577 	.inst	0x5f726577 ; undefined
    222c:	665f6e6f 	.inst	0x665f6e6f ; undefined
    2230:	5f6d6f72 	.inst	0x5f6d6f72 ; undefined
    2234:	70737573 	adr	x19, e90e3 <_stack_size+0xe80e3>
    2238:	00646e65 	.inst	0x00646e65 ; undefined
    223c:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    2240:	652f3165 	.inst	0x652f3165 ; undefined
    2244:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    2248:	68735f6e 	.inst	0x68735f6e ; undefined
    224c:	742f6869 	.inst	0x742f6869 ; undefined
    2250:	2f726f68 	.inst	0x2f726f68 ; undefined
    2254:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    2258:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    225c:	54442f31 	.inst	0x54442f31 ; undefined
    2260:	6f425f45 	.inst	0x6f425f45 ; undefined
    2264:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    2268:	622f6564 	.inst	0x622f6564 ; undefined
    226c:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    2270:	72732f2e 	.inst	0x72732f2e ; undefined
    2274:	72612f63 	.inst	0x72612f63 ; undefined
    2278:	722f6863 	ands	w3, w3, #0xfffe0fff
    227c:	74657365 	.inst	0x74657365 ; undefined
    2280:	6f6f622f 	umlsl2	v15.4s, v17.8h, v15.h[2]
    2284:	63657674 	.inst	0x63657674 ; undefined
    2288:	2f726f74 	.inst	0x2f726f74 ; undefined
    228c:	70737573 	adr	x19, e913b <_stack_size+0xe813b>
    2290:	2e646e65 	umin	v5.4h, v19.4h, v4.4h
    2294:	6f620063 	mla	v3.8h, v3.8h, v2.h[2]
    2298:	53006c6f 	ubfx	w15, w3, #0, #28
    229c:	65747379 	.inst	0x65747379 ; undefined
    22a0:	6d69546d 	ldp	d13, d21, [x3,#-368]
    22a4:	74756f65 	.inst	0x74756f65 ; undefined
    22a8:	6d697400 	ldp	d0, d29, [x0,#-368]
    22ac:	44497265 	.inst	0x44497265 ; undefined
    22b0:	73694400 	.inst	0x73694400 ; undefined
    22b4:	656c6261 	.inst	0x656c6261 ; undefined
    22b8:	656d6954 	.inst	0x656d6954 ; undefined
    22bc:	682f0072 	.inst	0x682f0072 ; undefined
    22c0:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    22c4:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    22c8:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    22cc:	68696873 	.inst	0x68696873 ; undefined
    22d0:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    22d4:	72742f72 	.inst	0x72742f72 ; undefined
    22d8:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    22dc:	2f312e38 	.inst	0x2f312e38 ; undefined
    22e0:	5f455444 	shl	d4, d2, #5
    22e4:	746f6f42 	.inst	0x746f6f42 ; undefined
    22e8:	65646f63 	.inst	0x65646f63 ; undefined
    22ec:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    22f0:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    22f4:	2f637273 	.inst	0x2f637273 ; undefined
    22f8:	68637261 	.inst	0x68637261 ; undefined
    22fc:	7365722f 	.inst	0x7365722f ; undefined
    2300:	622f7465 	.inst	0x622f7465 ; undefined
    2304:	76746f6f 	.inst	0x76746f6f ; undefined
    2308:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
    230c:	69742f72 	ldpsw	x18, x11, [x27,#-96]
    2310:	2e72656d 	umax	v13.4h, v11.4h, v18.4h
    2314:	77640063 	.inst	0x77640063 ; undefined
    2318:	696e694d 	ldpsw	x13, x26, [x10,#-144]
    231c:	6f636553 	sqshlu	v19.2d, v10.2d, #35
    2320:	6400646e 	.inst	0x6400646e ; undefined
    2324:	63694d77 	.inst	0x63694d77 ; undefined
    2328:	65536f72 	.inst	0x65536f72 ; undefined
    232c:	646e6f63 	.inst	0x646e6f63 ; undefined
    2330:	6c656400 	ldnp	d0, d25, [x0,#-432]
    2334:	69547961 	ldpsw	x1, x30, [x11,#160]
    2338:	6200656d 	.inst	0x6200656d ; undefined
    233c:	74536f49 	.inst	0x74536f49 ; undefined
    2340:	73757461 	.inst	0x73757461 ; undefined
    2344:	49776400 	.inst	0x49776400 ; undefined
    2348:	0074696e 	.inst	0x0074696e ; undefined
    234c:	74696e49 	.inst	0x74696e49 ; undefined
    2350:	656d6954 	.inst	0x656d6954 ; undefined
    2354:	68630072 	.inst	0x68630072 ; undefined
    2358:	5f6b6365 	.inst	0x5f6b6365 ; undefined
    235c:	74726175 	.inst	0x74726175 ; undefined
    2360:	79656b5f 	ldrh	wzr, [x26,#4788]
    2364:	65694600 	.inst	0x65694600 ; undefined
    2368:	0073646c 	.inst	0x0073646c ; undefined
    236c:	544d4554 	.inst	0x544d4554 ; undefined
    2370:	41555f00 	.inst	0x41555f00 ; undefined
    2374:	45525452 	.inst	0x45525452 ; undefined
    2378:	43535f47 	.inst	0x43535f47 ; undefined
    237c:	75630052 	.inst	0x75630052 ; undefined
    2380:	6e657272 	uabdl2	v18.4s, v19.8h, v5.8h
    2384:	72615574 	.inst	0x72615574 ; undefined
    2388:	726f5074 	.inst	0x726f5074 ; undefined
    238c:	65520074 	.inst	0x65520074 ; undefined
    2390:	76726573 	.inst	0x76726573 ; undefined
    2394:	44006465 	.inst	0x44006465 ; undefined
    2398:	00535443 	.inst	0x00535443 ; undefined
    239c:	6f633075 	.inst	0x6f633075 ; undefined
    23a0:	00746e75 	.inst	0x00746e75 ; undefined
    23a4:	64616572 	.inst	0x64616572 ; undefined
    23a8:	7261755f 	.inst	0x7261755f ; undefined
    23ac:	65725f74 	.inst	0x65725f74 ; undefined
    23b0:	48540067 	ldxrh	w7, [x3]
    23b4:	5f004552 	.inst	0x5f004552 ; undefined
    23b8:	54524155 	.inst	0x54524155 ; undefined
    23bc:	5f474552 	.inst	0x5f474552 ; undefined
    23c0:	0052434d 	.inst	0x0052434d ; undefined
    23c4:	65723075 	.inst	0x65723075 ; undefined
    23c8:	76696563 	.inst	0x76696563 ; undefined
    23cc:	72006465 	ands	w5, w3, #0x3ffffff
    23d0:	5f646165 	.inst	0x5f646165 ; undefined
    23d4:	64726f77 	.inst	0x64726f77 ; undefined
    23d8:	5200735f 	eor	wsp, w26, #0x1fffffff
    23dc:	72657365 	.inst	0x72657365 ; undefined
    23e0:	30646576 	adr	x22, cb08d <_stack_size+0xca08d>
    23e4:	73655200 	.inst	0x73655200 ; undefined
    23e8:	65767265 	.inst	0x65767265 ; undefined
    23ec:	77003164 	.inst	0x77003164 ; undefined
    23f0:	00746961 	.inst	0x00746961 ; undefined
    23f4:	47525452 	.inst	0x47525452 ; undefined
    23f8:	534c4500 	.inst	0x534c4500 ; undefined
    23fc:	5f700049 	.inst	0x5f700049 ; undefined
    2400:	61726170 	.inst	0x61726170 ; undefined
    2404:	555f006d 	.inst	0x555f006d ; undefined
    2408:	52545241 	.inst	0x52545241 ; undefined
    240c:	4d5f4745 	.inst	0x4d5f4745 ; undefined
    2410:	73005253 	.inst	0x73005253 ; undefined
    2414:	74666968 	.inst	0x74666968 ; undefined
    2418:	72615500 	.inst	0x72615500 ; undefined
    241c:	72625274 	.inst	0x72625274 ; undefined
    2420:	44656854 	.inst	0x44656854 ; undefined
    2424:	45006c6c 	.inst	0x45006c6c ; undefined
    2428:	4f464946 	.inst	0x4f464946 ; undefined
    242c:	6c6f7200 	ldnp	d0, d28, [x16,#-272]
    2430:	6361626c 	.inst	0x6361626c ; undefined
    2434:	65725f6b 	.inst	0x65725f6b ; undefined
    2438:	65766f63 	.inst	0x65766f63 ; undefined
    243c:	755f7972 	.inst	0x755f7972 ; undefined
    2440:	00747261 	.inst	0x00747261 ; undefined
    2444:	5241555f 	.inst	0x5241555f ; undefined
    2448:	47455254 	.inst	0x47455254 ; undefined
    244c:	52434c5f 	.inst	0x52434c5f ; undefined
    2450:	41555f00 	.inst	0x41555f00 ; undefined
    2454:	45525452 	.inst	0x45525452 ; undefined
    2458:	42525f47 	.inst	0x42525f47 ; undefined
    245c:	48545f52 	ldxrh	w18, [x26]
    2460:	4c445f52 	.inst	0x4c445f52 ; undefined
    2464:	6572004c 	.inst	0x6572004c ; undefined
    2468:	775f6461 	.inst	0x775f6461 ; undefined
    246c:	0064726f 	.inst	0x0064726f ; undefined
    2470:	74696e69 	.inst	0x74696e69 ; undefined
    2474:	7261755f 	.inst	0x7261755f ; undefined
    2478:	50490074 	adr	x20, 94486 <_stack_size+0x93486>
    247c:	4c00444e 	st3	{v14.8h-v16.8h}, [x2]
    2480:	00504f4f 	.inst	0x00504f4f ; undefined
    2484:	53534445 	.inst	0x53534445 ; undefined
    2488:	61550049 	.inst	0x61550049 ; undefined
    248c:	63537472 	.inst	0x63537472 ; undefined
    2490:	555f0072 	.inst	0x555f0072 ; undefined
    2494:	52545241 	.inst	0x52545241 ; undefined
    2498:	4c5f4745 	.inst	0x4c5f4745 ; undefined
    249c:	5f005253 	.inst	0x5f005253 ; undefined
    24a0:	54524155 	.inst	0x54524155 ; undefined
    24a4:	5f474552 	.inst	0x5f474552 ; undefined
    24a8:	5f524549 	.inst	0x5f524549 ; undefined
    24ac:	004d4c44 	.inst	0x004d4c44 ; undefined
    24b0:	68634562 	.inst	0x68634562 ; undefined
    24b4:	682f006f 	.inst	0x682f006f ; undefined
    24b8:	31656d6f 	adds	w15, w11, #0x95b, lsl #12
    24bc:	6964652f 	ldpsw	x15, x25, [x9,#-224]
    24c0:	5f6e6f73 	.inst	0x5f6e6f73 ; undefined
    24c4:	68696873 	.inst	0x68696873 ; undefined
    24c8:	6f68742f 	uqshl	v15.2d, v1.2d, #40
    24cc:	72742f72 	.inst	0x72742f72 ; undefined
    24d0:	2d6b6e75 	ldp	s21, s27, [x19,#-168]
    24d4:	2f312e38 	.inst	0x2f312e38 ; undefined
    24d8:	5f455444 	shl	d4, d2, #5
    24dc:	746f6f42 	.inst	0x746f6f42 ; undefined
    24e0:	65646f63 	.inst	0x65646f63 ; undefined
    24e4:	6e69622f 	rsubhn2	v15.8h, v17.4s, v9.4s
    24e8:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    24ec:	2f637273 	.inst	0x2f637273 ; undefined
    24f0:	68637261 	.inst	0x68637261 ; undefined
    24f4:	7365722f 	.inst	0x7365722f ; undefined
    24f8:	622f7465 	.inst	0x622f7465 ; undefined
    24fc:	76746f6f 	.inst	0x76746f6f ; undefined
    2500:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
    2504:	61752f72 	.inst	0x61752f72 ; undefined
    2508:	632e7472 	.inst	0x632e7472 ; undefined
    250c:	72615500 	.inst	0x72615500 ; undefined
    2510:	72634d74 	.inst	0x72634d74 ; undefined
    2514:	52465200 	.inst	0x52465200 ; undefined
    2518:	66005453 	.inst	0x66005453 ; undefined
    251c:	00776f6c 	.inst	0x00776f6c ; undefined
    2520:	5241555f 	.inst	0x5241555f ; undefined
    2524:	47455254 	.inst	0x47455254 ; undefined
    2528:	65694600 	.inst	0x65694600 ; undefined
    252c:	3073646c 	adr	x12, e91b9 <_stack_size+0xe81b9>
    2530:	65694600 	.inst	0x65694600 ; undefined
    2534:	3173646c 	adds	w12, w3, #0xcd9, lsl #12
    2538:	65694600 	.inst	0x65694600 ; undefined
    253c:	3273646c 	.inst	0x3273646c ; undefined
    2540:	72657300 	.inst	0x72657300 ; undefined
    2544:	5f6c6169 	.inst	0x5f6c6169 ; undefined
    2548:	64616572 	.inst	0x64616572 ; undefined
    254c:	72615500 	.inst	0x72615500 ; undefined
    2550:	72734d74 	.inst	0x72734d74 ; undefined
    2554:	72617500 	.inst	0x72617500 ; undefined
    2558:	75705f74 	.inst	0x75705f74 ; undefined
    255c:	62006374 	.inst	0x62006374 ; undefined
    2560:	5f647561 	sqshl	d1, d11, #36
    2564:	69766964 	ldpsw	x4, x26, [x11,#-80]
    2568:	00726f73 	.inst	0x00726f73 ; undefined
    256c:	74726155 	.inst	0x74726155 ; undefined
    2570:	46726949 	.inst	0x46726949 ; undefined
    2574:	73007263 	.inst	0x73007263 ; undefined
    2578:	725f7465 	.inst	0x725f7465 ; undefined
    257c:	766f6365 	.inst	0x766f6365 ; undefined
    2580:	5f797265 	sqdmlsl	s5, h19, v9.h[3]
    2584:	74726175 	.inst	0x74726175 ; undefined
    2588:	72615500 	.inst	0x72615500 ; undefined
    258c:	72654974 	.inst	0x72654974 ; undefined
    2590:	006d6c44 	.inst	0x006d6c44 ; undefined
    2594:	5241555f 	.inst	0x5241555f ; undefined
    2598:	47455254 	.inst	0x47455254 ; undefined
    259c:	5249495f 	.inst	0x5249495f ; undefined
    25a0:	5243465f 	.inst	0x5243465f ; undefined
    25a4:	69617700 	ldpsw	x0, x29, [x24,#-248]
    25a8:	6f6c5f74 	.inst	0x6f6c5f74 ; undefined
    25ac:	4600706f 	.inst	0x4600706f ; undefined
    25b0:	314f4649 	adds	w9, w18, #0x3d1, lsl #12
    25b4:	65720036 	.inst	0x65720036 ; undefined
    25b8:	705f6461 	adr	x1, c1247 <_stack_size+0xc0247>
    25bc:	77737361 	.inst	0x77737361 ; undefined
    25c0:	0064726f 	.inst	0x0064726f ; undefined
    25c4:	64756162 	.inst	0x64756162 ; undefined
    25c8:	72615500 	.inst	0x72615500 ; undefined
    25cc:	72634c74 	.inst	0x72634c74 ; undefined
    25d0:	414d4400 	.inst	0x414d4400 ; undefined
    25d4:	6155004d 	.inst	0x6155004d ; undefined
    25d8:	734c7472 	.inst	0x734c7472 ; undefined
    25dc:	72700072 	.inst	0x72700072 ; undefined
    25e0:	5f746e69 	.inst	0x5f746e69 ; undefined
    25e4:	006c6176 	.inst	0x006c6176 ; undefined
    25e8:	53524654 	.inst	0x53524654 ; undefined
    25ec:	61750054 	.inst	0x61750054 ; undefined
    25f0:	695f7472 	ldpsw	x18, x29, [x3,#248]
    25f4:	5f74696e 	.inst	0x5f74696e ; undefined
    25f8:	74726f70 	.inst	0x74726f70 ; undefined
    25fc:	72615500 	.inst	0x72615500 ; undefined
    2600:	67655274 	.inst	0x67655274 ; undefined
    2604:	72617500 	.inst	0x72617500 ; undefined
    2608:	74735f74 	.inst	0x74735f74 ; undefined
    260c:	45007461 	.inst	0x45007461 ; undefined
    2610:	49454254 	.inst	0x49454254 ; undefined
    2614:	6b6c6300 	.inst	0x6b6c6300 ; undefined
    2618:	6572665f 	.inst	0x6572665f ; undefined
    261c:	52450071 	.inst	0x52450071 ; undefined
    2620:	56004942 	.inst	0x56004942 ; undefined
    2624:	65756c61 	.inst	0x65756c61 ; undefined
    2628:	74657300 	.inst	0x74657300 ; undefined
    262c:	636f665f 	.inst	0x636f665f ; undefined
    2630:	755f7375 	.inst	0x755f7375 ; undefined
    2634:	00747261 	.inst	0x00747261 ; undefined
    2638:	74697277 	.inst	0x74697277 ; undefined
    263c:	61755f65 	.inst	0x61755f65 ; undefined
    2640:	725f7472 	.inst	0x725f7472 ; undefined
    2644:	44006765 	.inst	0x44006765 ; undefined
    2648:	0042414c 	.inst	0x0042414c ; undefined
    264c:	74726175 	.inst	0x74726175 ; undefined
    2650:	7465675f 	.inst	0x7465675f ; undefined
    2654:	72610063 	.inst	0x72610063 ; undefined
    2658:	5f796172 	.inst	0x5f796172 ; undefined
    265c:	65736162 	.inst	0x65736162 ; undefined
    2660:	72726500 	.inst	0x72726500 ; undefined
    2664:	65646f63 	.inst	0x65646f63 ; undefined
    2668:	6f682f00 	.inst	0x6f682f00 ; undefined
    266c:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
    2670:	73696465 	.inst	0x73696465 ; undefined
    2674:	735f6e6f 	.inst	0x735f6e6f ; undefined
    2678:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
    267c:	726f6874 	.inst	0x726f6874 ; undefined
    2680:	7572742f 	.inst	0x7572742f ; undefined
    2684:	382d6b6e 	strb	w14, [x27,x13]
    2688:	442f312e 	.inst	0x442f312e ; undefined
    268c:	425f4554 	.inst	0x425f4554 ; undefined
    2690:	63746f6f 	.inst	0x63746f6f ; undefined
    2694:	2f65646f 	.inst	0x2f65646f ; undefined
    2698:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
    269c:	732f2e2e 	.inst	0x732f2e2e ; undefined
    26a0:	612f6372 	.inst	0x612f6372 ; undefined
    26a4:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
    26a8:	65736572 	.inst	0x65736572 ; undefined
    26ac:	6f622f74 	.inst	0x6f622f74 ; undefined
    26b0:	6576746f 	.inst	0x6576746f ; undefined
    26b4:	726f7463 	.inst	0x726f7463 ; undefined
    26b8:	7261752f 	.inst	0x7261752f ; undefined
    26bc:	6f6c5f74 	.inst	0x6f6c5f74 ; undefined
    26c0:	632e6461 	.inst	0x632e6461 ; undefined
    26c4:	61657200 	.inst	0x61657200 ; undefined
    26c8:	6d725f64 	ldp	d4, d23, [x27,#-224]
    26cc:	77705f61 	.inst	0x77705f61 ; undefined
    26d0:	65720064 	.inst	0x65720064 ; undefined
    26d4:	6a5f6461 	ands	w1, w3, wzr, lsr #25
    26d8:	5f676174 	.inst	0x5f676174 ; undefined
    26dc:	00647770 	.inst	0x00647770 ; undefined
    26e0:	6d6f682f 	ldp	d15, d26, [x1,#-272]
    26e4:	652f3165 	.inst	0x652f3165 ; undefined
    26e8:	6f736964 	umlsl2	v4.4s, v11.8h, v3.h[7]
    26ec:	68735f6e 	.inst	0x68735f6e ; undefined
    26f0:	742f6869 	.inst	0x742f6869 ; undefined
    26f4:	2f726f68 	.inst	0x2f726f68 ; undefined
    26f8:	6e757274 	uabdl2	v20.4s, v19.8h, v21.8h
    26fc:	2e382d6b 	uqsub	v11.8b, v11.8b, v24.8b
    2700:	54442f31 	.inst	0x54442f31 ; undefined
    2704:	6f425f45 	.inst	0x6f425f45 ; undefined
    2708:	6f63746f 	uqshl	v15.2d, v3.2d, #35
    270c:	622f6564 	.inst	0x622f6564 ; undefined
    2710:	2e2f6e69 	umin	v9.8b, v19.8b, v15.8b
    2714:	72732f2e 	.inst	0x72732f2e ; undefined
    2718:	72612f63 	.inst	0x72612f63 ; undefined
    271c:	722f6863 	ands	w3, w3, #0xfffe0fff
    2720:	74657365 	.inst	0x74657365 ; undefined
    2724:	6f6f622f 	umlsl2	v15.4s, v17.8h, v15.h[2]
    2728:	63657674 	.inst	0x63657674 ; undefined
    272c:	2f726f74 	.inst	0x2f726f74 ; undefined
    2730:	74726175 	.inst	0x74726175 ; undefined
    2734:	7568745f 	.inst	0x7568745f ; undefined
    2738:	632e626d 	.inst	0x632e626d ; undefined
    273c:	6f6f6c00 	.inst	0x6f6f6c00 ; undefined
    2740:	74007370 	.inst	0x74007370 ; undefined
    2744:	725f706d 	.inst	0x725f706d ; undefined
    2748:	64006765 	.inst	0x64006765 ; undefined
    274c:	645f3163 	.inst	0x645f3163 ; undefined
    2750:	5f6d6172 	.inst	0x5f6d6172 ; undefined
    2754:	657a6973 	.inst	0x657a6973 ; undefined
    2758:	75636400 	.inst	0x75636400 ; undefined
    275c:	6c61635f 	ldnp	d31, d24, [x26,#-496]
    2760:	61726269 	.inst	0x61726269 ; undefined
    2764:	6e6f6974 	.inst	0x6e6f6974 ; undefined
    2768:	7000635f 	adr	xzr, 33d3 <_stack_size+0x23d3>
    276c:	696c6c6f 	ldpsw	x15, x27, [x3,#-160]
    2770:	645f676e 	.inst	0x645f676e ; undefined
    2774:	00656e6f 	.inst	0x00656e6f ; undefined
    2778:	5f6e6f63 	.inst	0x5f6e6f63 ; undefined
    277c:	326c6176 	.inst	0x326c6176 ; undefined
    2780:	6e6f6300 	rsubhn2	v0.8h, v24.4s, v15.4s
    2784:	6c61765f 	ldnp	d31, d29, [x18,#-496]
    2788:	4e410033 	.inst	0x4e410033 ; undefined
    278c:	69665f44 	ldpsw	x4, x23, [x26,#-208]
    2790:	7265746c 	.inst	0x7265746c ; undefined
    2794:	6e6f6300 	rsubhn2	v0.8h, v24.4s, v15.4s
    2798:	6c61765f 	ldnp	d31, d29, [x18,#-496]
    279c:	6f630035 	mla	v21.8h, v1.8h, v3.h[2]
    27a0:	61765f6e 	.inst	0x61765f6e ; undefined
    27a4:	6300366c 	.inst	0x6300366c ; undefined
    27a8:	765f6e6f 	.inst	0x765f6e6f ; undefined
    27ac:	00376c61 	.inst	0x00376c61 ; NYI
    27b0:	5f6e6f63 	.inst	0x5f6e6f63 ; undefined
    27b4:	386c6176 	ldumaxlb	w12, w22, [x11]
    27b8:	69616600 	ldpsw	x0, x25, [x16,#-248]
    27bc:	64695f6c 	.inst	0x64695f6c ; undefined
    27c0:	53620078 	.inst	0x53620078 ; undefined
    27c4:	72007465 	ands	w5, w3, #0x3fffffff
    27c8:	5f327473 	sqshl	s19, s3, #18
    27cc:	5f676572 	.inst	0x5f676572 ; undefined
    27d0:	006c6176 	.inst	0x006c6176 ; undefined
    27d4:	5f6f7774 	sqshl	d20, d27, #47
    27d8:	79736364 	ldrh	w4, [x27,#6576]
    27dc:	6e655f73 	uqrshl	v19.8h, v27.8h, v5.8h
    27e0:	6f682f00 	.inst	0x6f682f00 ; undefined
    27e4:	2f31656d 	sqshlu	v13.2s, v11.2s, #17
    27e8:	73696465 	.inst	0x73696465 ; undefined
    27ec:	735f6e6f 	.inst	0x735f6e6f ; undefined
    27f0:	2f686968 	umlsl	v8.4s, v11.4h, v8.h[6]
    27f4:	726f6874 	.inst	0x726f6874 ; undefined
    27f8:	7572742f 	.inst	0x7572742f ; undefined
    27fc:	382d6b6e 	strb	w14, [x27,x13]
    2800:	442f312e 	.inst	0x442f312e ; undefined
    2804:	425f4554 	.inst	0x425f4554 ; undefined
    2808:	63746f6f 	.inst	0x63746f6f ; undefined
    280c:	2f65646f 	.inst	0x2f65646f ; undefined
    2810:	2f6e6962 	umlsl	v2.4s, v11.4h, v14.h[6]
    2814:	732f2e2e 	.inst	0x732f2e2e ; undefined
    2818:	612f6372 	.inst	0x612f6372 ; undefined
    281c:	2f686372 	umlsl	v18.4s, v27.4h, v8.h[2]
    2820:	65736572 	.inst	0x65736572 ; undefined
    2824:	6f622f74 	.inst	0x6f622f74 ; undefined
    2828:	6576746f 	.inst	0x6576746f ; undefined
    282c:	726f7463 	.inst	0x726f7463 ; undefined
    2830:	6974752f 	ldpsw	x15, x29, [x9,#-96]
    2834:	7974696c 	ldrh	w12, [x11,#6708]
    2838:	6900632e 	.inst	0x6900632e ; undefined
    283c:	635f6f73 	.inst	0x635f6f73 ; undefined
    2840:	655f6b6c 	.inst	0x655f6b6c ; undefined
    2844:	7473006e 	.inst	0x7473006e ; undefined
    2848:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    284c:	75736572 	.inst	0x75736572 ; undefined
    2850:	6500746c 	.inst	0x6500746c ; undefined
    2854:	6c62616e 	ldnp	d14, d24, [x11,#-480]
    2858:	61755f65 	.inst	0x61755f65 ; undefined
    285c:	6c637472 	ldnp	d18, d29, [x3,#-464]
    2860:	6168006b 	.inst	0x6168006b ; undefined
    2864:	665f746c 	.inst	0x665f746c ; undefined
    2868:	485f726f 	ldxrh	w15, [x19]
    286c:	635f4649 	.inst	0x635f4649 ; undefined
    2870:	656e6e6f 	.inst	0x656e6e6f ; undefined
    2874:	6f697463 	uqshl	v3.2d, v3.2d, #41
    2878:	7973006e 	ldrh	w14, [x3,#6528]
    287c:	6d657473 	ldp	d19, d29, [x3,#-432]
    2880:	7365725f 	.inst	0x7365725f ; undefined
    2884:	65007465 	.inst	0x65007465 ; undefined
    2888:	725f326e 	.inst	0x725f326e ; undefined
    288c:	765f6765 	.inst	0x765f6765 ; undefined
    2890:	62006c61 	.inst	0x62006c61 ; undefined
    2894:	69777469 	ldpsw	x9, x29, [x3,#-72]
    2898:	415f6573 	.inst	0x415f6573 ; undefined
    289c:	4f5f444e 	.inst	0x4f5f444e ; undefined
    28a0:	524f0052 	.inst	0x524f0052 ; undefined
    28a4:	6c69665f 	ldnp	d31, d25, [x18,#-368]
    28a8:	00726574 	.inst	0x00726574 ; undefined
    28ac:	70617753 	adr	x19, c5797 <_stack_size+0xc4797>
    28b0:	69646e45 	ldpsw	x5, x27, [x18,#-224]
    28b4:	64006e61 	.inst	0x64006e61 ; undefined
    28b8:	615f3163 	.inst	0x615f3163 ; undefined
    28bc:	5f726464 	.inst	0x5f726464 ; undefined
    28c0:	65736162 	.inst	0x65736162 ; undefined
    28c4:	67726f00 	.inst	0x67726f00 ; undefined
    28c8:	6174735f 	.inst	0x6174735f ; undefined
    28cc:	6f707472 	uqshl	v18.2d, v3.2d, #48
    28d0:	62003173 	.inst	0x62003173 ; undefined
    28d4:	656e6f44 	.inst	0x656e6f44 ; undefined
    28d8:	44620031 	.inst	0x44620031 ; undefined
    28dc:	32656e6f 	.inst	0x32656e6f ; undefined
    28e0:	6a646100 	bics	w0, w8, w4, lsr #24
    28e4:	5f747375 	sqdmlsl	s21, h27, v4.h[3]
    28e8:	69766564 	ldpsw	x4, x25, [x11,#-80]
    28ec:	735f6563 	.inst	0x735f6563 ; undefined
    28f0:	64656570 	.inst	0x64656570 ; undefined
    28f4:	67726f00 	.inst	0x67726f00 ; undefined
    28f8:	646e655f 	.inst	0x646e655f ; undefined
    28fc:	31736f70 	adds	w16, w27, #0xcdb, lsl #12
    2900:	6e6f6300 	rsubhn2	v0.8h, v24.4s, v15.4s
    2904:	6c61765f 	ldnp	d31, d29, [x18,#-496]
    2908:	6f630031 	mla	v17.8h, v1.8h, v3.h[2]
    290c:	61765f6e 	.inst	0x61765f6e ; undefined
    2910:	6200346c 	.inst	0x6200346c ; undefined
    2914:	756b6361 	.inst	0x756b6361 ; undefined
    2918:	61765f70 	.inst	0x61765f70 ; undefined
    291c:	6e65006c 	uaddl2	v12.4s, v3.8h, v5.8h
    2920:	65725f64 	.inst	0x65725f64 ; undefined
    2924:	746c7573 	.inst	0x746c7573 ; undefined
    2928:	656c6300 	.inst	0x656c6300 ; undefined
    292c:	6d5f7261 	ldp	d1, d28, [x19,#496]
    2930:	726f6d65 	.inst	0x726f6d65 ; undefined
    2934:	61700079 	.inst	0x61700079 ; undefined
    2938:	72657474 	.inst	0x72657474 ; undefined
    293c:	6e65006e 	uaddl2	v14.4s, v3.8h, v5.8h
    2940:	6f705f64 	.inst	0x6f705f64 ; undefined
    2944:	69620073 	ldpsw	x19, x0, [x3,#-240]
    2948:	705f7273 	adr	x19, c1797 <_stack_size+0xc0797>
    294c:	65636f72 	.inst	0x65636f72 ; undefined
    2950:	65727564 	.inst	0x65727564 ; undefined
    2954:	5f636400 	.inst	0x5f636400 ; undefined
    2958:	5f697064 	sqdmlsl	s4, h3, v9.h[2]
    295c:	6c727463 	ldnp	d3, d29, [x3,#-224]
    2960:	6c61765f 	ldnp	d31, d29, [x18,#-496]
    2964:	30636400 	adr	x0, c95e5 <_stack_size+0xc85e5>
    2968:	6172645f 	.inst	0x6172645f ; undefined
    296c:	69735f6d 	ldpsw	x13, x23, [x27,#-104]
    2970:	7000657a 	adr	x26, 361f <_stack_size+0x261f>
    2974:	65747461 	.inst	0x65747461 ; undefined
    2978:	00316e72 	.inst	0x00316e72 ; NYI
    297c:	74746170 	.inst	0x74746170 ; undefined
    2980:	326e7265 	.inst	0x326e7265 ; undefined
    2984:	74617000 	.inst	0x74617000 ; undefined
    2988:	6e726574 	umax	v20.8h, v11.8h, v18.8h
    298c:	65670033 	.inst	0x65670033 ; undefined
    2990:	52444474 	.inst	0x52444474 ; undefined
    2994:	657a6953 	.inst	0x657a6953 ; undefined
    2998:	73696d00 	.inst	0x73696d00 ; undefined
    299c:	73725f63 	.inst	0x73725f63 ; undefined
    29a0:	61765f74 	.inst	0x61765f74 ; undefined
    29a4:	7473006c 	.inst	0x7473006c ; undefined
    29a8:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    29ac:	00736f70 	.inst	0x00736f70 ; undefined
    29b0:	646e6172 	.inst	0x646e6172 ; undefined
    29b4:	726c6300 	.inst	0x726c6300 ; undefined
    29b8:	65465746 	.inst	0x65465746 ; undefined
    29bc:	72757461 	.inst	0x72757461 ; undefined
    29c0:	71640065 	subs	w5, w3, #0x900, lsl #12
    29c4:	765f3130 	.inst	0x765f3130 ; undefined
    29c8:	77006c61 	.inst	0x77006c61 ; undefined
    29cc:	68637461 	.inst	0x68637461 ; undefined
    29d0:	5f676f64 	.inst	0x5f676f64 ; undefined
    29d4:	65736572 	.inst	0x65736572 ; undefined
    29d8:	6e650074 	uaddl2	v20.4s, v3.8h, v5.8h
    29dc:	656c6261 	.inst	0x656c6261 ; undefined
    29e0:	7063615f 	adr	xzr, c960b <_stack_size+0xc860b>
    29e4:	6c635f75 	ldnp	d21, d23, [x27,#-464]
    29e8:	006b636f 	.inst	0x006b636f ; undefined
    29ec:	72617473 	.inst	0x72617473 ; undefined
    29f0:	6f705f74 	.inst	0x6f705f74 ; undefined
    29f4:	74003173 	.inst	0x74003173 ; undefined
    29f8:	645f6f77 	.inst	0x645f6f77 ; undefined
    29fc:	65610063 	.inst	0x65610063 ; undefined
    2a00:	7473725f 	.inst	0x7473725f ; undefined
    2a04:	6c61765f 	ldnp	d31, d29, [x18,#-496]
    2a08:	74756f00 	.inst	0x74756f00 ; undefined
    2a0c:	5f6f745f 	sqshl	d31, d2, #47
    2a10:	5f796870 	.inst	0x5f796870 ; undefined
    2a14:	006c6573 	.inst	0x006c6573 ; undefined
    2a18:	31756364 	adds	w4, w27, #0xd58, lsl #12
    2a1c:	6c61635f 	ldnp	d31, d24, [x26,#-496]
    2a20:	61726269 	.inst	0x61726269 ; undefined
    2a24:	6e6f6974 	.inst	0x6e6f6974 ; undefined
    2a28:	6900635f 	.inst	0x6900635f ; undefined
    2a2c:	735f6f73 	.inst	0x735f6f73 ; undefined
    2a30:	5f74666f 	.inst	0x5f74666f ; undefined
    2a34:	00747372 	.inst	0x00747372 ; undefined
    2a38:	5f746f6e 	.inst	0x5f746f6e ; undefined
    2a3c:	696c6176 	ldpsw	x22, x24, [x11,#-160]
    2a40:	64615f64 	.inst	0x64615f64 ; undefined
    2a44:	73657264 	.inst	0x73657264 ; undefined
    2a48:	63640073 	.inst	0x63640073 ; undefined
    2a4c:	64615f30 	.inst	0x64615f30 ; undefined
    2a50:	625f7264 	.inst	0x625f7264 ; undefined
    2a54:	00657361 	.inst	0x00657361 ; undefined
    2a58:	5f67726f 	sqdmlsl	s15, h19, v7.h[2]
    2a5c:	70646e65 	adr	x5, cb82b <_stack_size+0xca82b>
    2a60:	7300736f 	.inst	0x7300736f ; undefined
    2a64:	57467465 	.inst	0x57467465 ; undefined
    2a68:	74616546 	.inst	0x74616546 ; undefined
    2a6c:	00657275 	.inst	0x00657275 ; undefined
    2a70:	5f646e65 	.inst	0x5f646e65 ; undefined
    2a74:	31736f70 	adds	w16, w27, #0xcdb, lsl #12
    2a78:	67726f00 	.inst	0x67726f00 ; undefined
    2a7c:	6174735f 	.inst	0x6174735f ; undefined
    2a80:	6f707472 	uqshl	v18.2d, v3.2d, #48
    2a84:	41430073 	.inst	0x41430073 ; undefined
    2a88:	45535f4c 	.inst	0x45535f4c ; undefined
    2a8c:	68730047 	.inst	0x68730047 ; undefined
    2a90:	75615f61 	.inst	0x75615f61 ; undefined
    2a94:	705f6f74 	adr	x20, c1883 <_stack_size+0xc0883>
    2a98:	69646461 	ldpsw	x1, x25, [x3,#-224]
    2a9c:	7000676e 	adr	x14, 378b <_stack_size+0x278b>
    2aa0:	676d695f 	.inst	0x676d695f ; undefined
    2aa4:	61687300 	.inst	0x61687300 ; undefined
    2aa8:	5f363532 	.inst	0x5f363532 ; undefined
    2aac:	7074756f 	adr	x15, eb95b <_stack_size+0xea95b>
    2ab0:	73007475 	.inst	0x73007475 ; undefined
    2ab4:	485f636d 	ldxrh	w13, [x27]
    2ab8:	53525f57 	.inst	0x53525f57 ; undefined
    2abc:	6d690041 	ldp	d1, d0, [x2,#-368]
    2ac0:	69735f67 	ldpsw	x7, x23, [x27,#-104]
    2ac4:	2f00657a 	mvni	v26.2s, #0xb, lsl #24
    2ac8:	656d6f68 	.inst	0x656d6f68 ; undefined
    2acc:	64652f31 	.inst	0x64652f31 ; undefined
    2ad0:	6e6f7369 	uabdl2	v9.4s, v27.8h, v15.8h
    2ad4:	6968735f 	ldpsw	xzr, x28, [x26,#-192]
    2ad8:	68742f68 	.inst	0x68742f68 ; undefined
    2adc:	742f726f 	.inst	0x742f726f ; undefined
    2ae0:	6b6e7572 	.inst	0x6b6e7572 ; undefined
    2ae4:	312e382d 	adds	w13, w1, #0xb8e
    2ae8:	4554442f 	.inst	0x4554442f ; undefined
    2aec:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
    2af0:	646f6374 	.inst	0x646f6374 ; undefined
    2af4:	69622f65 	ldpsw	x5, x11, [x27,#-240]
    2af8:	2e2e2f6e 	uqsub	v14.8b, v27.8b, v14.8b
    2afc:	6372732f 	.inst	0x6372732f ; undefined
    2b00:	6372612f 	.inst	0x6372612f ; undefined
    2b04:	65722f68 	.inst	0x65722f68 ; undefined
    2b08:	2f746573 	.inst	0x2f746573 ; undefined
    2b0c:	746f6f62 	.inst	0x746f6f62 ; undefined
    2b10:	74636576 	.inst	0x74636576 ; undefined
    2b14:	762f726f 	.inst	0x762f726f ; undefined
    2b18:	66697265 	.inst	0x66697265 ; undefined
    2b1c:	6d695f79 	ldp	d25, d23, [x27,#-368]
    2b20:	00632e67 	.inst	0x00632e67 ; undefined
    2b24:	5f617372 	sqdmlsl	s18, h27, v1.h[2]
    2b28:	7074756f 	adr	x15, eb9d7 <_stack_size+0xea9d7>
    2b2c:	70007475 	adr	x21, 39bb <_stack_size+0x29bb>
    2b30:	6769735f 	.inst	0x6769735f ; undefined
    2b34:	7574616e 	.inst	0x7574616e ; undefined
    2b38:	68006572 	.inst	0x68006572 ; undefined
    2b3c:	31687361 	adds	w1, w27, #0xa1c, lsl #12
    2b40:	73616800 	.inst	0x73616800 ; undefined
    2b44:	Address 0x0000000000002b44 is out of bounds.


Disassembly of section .comment:

0000000000000000 <.comment>:
   0:	3a434347 	ccmn	w26, w3, #0x7, mi
   4:	65522820 	.inst	0x65522820 ; undefined
   8:	65746c61 	.inst	0x65746c61 ; undefined
   c:	5341206b 	.inst	0x5341206b ; undefined
  10:	34364b44 	cbz	w4, 6c978 <_stack_size+0x6b978>
  14:	392e342d 	strb	w13, [x1,#2957]
  18:	4220332e 	.inst	0x4220332e ; undefined
  1c:	646c6975 	.inst	0x646c6975 ; undefined
  20:	38313220 	ldsetb	w17, w0, [x17]
  24:	34202930 	cbz	w16, 40548 <_stack_size+0x3f548>
  28:	332e392e 	.inst	0x332e392e ; undefined
  2c:	31303220 	adds	w0, w17, #0xc0c
  30:	31343035 	adds	w21, w1, #0xd0c
  34:	70282033 	adr	x19, 5043b <_stack_size+0x4f43b>
  38:	65726572 	.inst	0x65726572 ; undefined
  3c:	7361656c 	.inst	0x7361656c ; undefined
  40:	Address 0x0000000000000040 is out of bounds.


Disassembly of section .debug_frame:

0000000000000000 <.debug_frame>:
       0:	0000000c 	.inst	0x0000000c ; undefined
       4:	ffffffff 	.inst	0xffffffff ; undefined
       8:	78040001 	sturh	w1, [x0,#64]
       c:	001f0c1e 	.inst	0x001f0c1e ; undefined
      10:	00000014 	.word	0x00000014
      14:	00000000 	.word	0x00000000
      18:	03000038 	.word	0x03000038
      1c:	00000000 	.word	0x00000000
      20:	00000014 	.word	0x00000014
      24:	00000000 	.word	0x00000000
      28:	00000024 	.word	0x00000024
      2c:	00000000 	.word	0x00000000
      30:	0300004c 	.word	0x0300004c
      34:	00000000 	.word	0x00000000
      38:	00000040 	.word	0x00000040
      3c:	00000000 	.word	0x00000000
      40:	93100e43 	.word	0x93100e43
      44:	4c019e02 	.word	0x4c019e02
      48:	000ed3de 	.word	0x000ed3de
      4c:	00000000 	.word	0x00000000
      50:	00000024 	.word	0x00000024
      54:	00000000 	.word	0x00000000
      58:	0300008c 	.word	0x0300008c
      5c:	00000000 	.word	0x00000000
      60:	00000034 	.word	0x00000034
      64:	00000000 	.word	0x00000000
      68:	9e100e41 	.word	0x9e100e41
      6c:	0ede4b02 	.word	0x0ede4b02
	...
      78:	0000003c 	.word	0x0000003c
      7c:	00000000 	.word	0x00000000
      80:	030000c0 	.word	0x030000c0
      84:	00000000 	.word	0x00000000
      88:	000001e8 	.word	0x000001e8
      8c:	00000000 	.word	0x00000000
      90:	93200e41 	.word	0x93200e41
      94:	42039404 	.word	0x42039404
      98:	0a51029e 	.word	0x0a51029e
      9c:	0eded3d4 	.word	0x0eded3d4
      a0:	4c0b4100 	.word	0x4c0b4100
      a4:	ded3d40a 	.word	0xded3d40a
      a8:	0b41000e 	.word	0x0b41000e
      ac:	d3d45702 	.word	0xd3d45702
      b0:	00000ede 	.word	0x00000ede
      b4:	00000000 	.word	0x00000000
      b8:	00000024 	.word	0x00000024
      bc:	00000000 	.word	0x00000000
      c0:	030002a8 	.word	0x030002a8
      c4:	00000000 	.word	0x00000000
      c8:	00000064 	.word	0x00000064
      cc:	00000000 	.word	0x00000000
      d0:	93100e41 	.word	0x93100e41
      d4:	57019e02 	.word	0x57019e02
      d8:	000ed3de 	.word	0x000ed3de
      dc:	00000000 	.word	0x00000000
      e0:	00000014 	.word	0x00000014
      e4:	00000000 	.word	0x00000000
      e8:	0300030c 	.word	0x0300030c
      ec:	00000000 	.word	0x00000000
      f0:	00000018 	.word	0x00000018
      f4:	00000000 	.word	0x00000000
      f8:	0000000c 	.word	0x0000000c
      fc:	ffffffff 	.word	0xffffffff
     100:	78040001 	.word	0x78040001
     104:	001f0c1e 	.word	0x001f0c1e
     108:	00000024 	.word	0x00000024
     10c:	000000f8 	.word	0x000000f8
     110:	03000324 	.word	0x03000324
     114:	00000000 	.word	0x00000000
     118:	00000134 	.word	0x00000134
     11c:	00000000 	.word	0x00000000
     120:	93200e45 	.word	0x93200e45
     124:	43039404 	.word	0x43039404
     128:	0000029e 	.word	0x0000029e
     12c:	00000000 	.word	0x00000000
     130:	0000000c 	.word	0x0000000c
     134:	ffffffff 	.word	0xffffffff
     138:	78040001 	.word	0x78040001
     13c:	001f0c1e 	.word	0x001f0c1e
     140:	00000014 	.word	0x00000014
     144:	00000130 	.word	0x00000130
     148:	03000458 	.word	0x03000458
     14c:	00000000 	.word	0x00000000
     150:	00000040 	.word	0x00000040
     154:	00000000 	.word	0x00000000
     158:	0000004c 	.word	0x0000004c
     15c:	00000130 	.word	0x00000130
     160:	03000498 	.word	0x03000498
     164:	00000000 	.word	0x00000000
     168:	00000100 	.word	0x00000100
     16c:	00000000 	.word	0x00000000
     170:	93500e41 	.word	0x93500e41
     174:	4609940a 	.word	0x4609940a
     178:	07960895 	.word	0x07960895
     17c:	05980697 	.word	0x05980697
     180:	039a0499 	.word	0x039a0499
     184:	0a6f029e 	.word	0x0a6f029e
     188:	d9ded3d4 	.word	0xd9ded3d4
     18c:	d5d8d7da 	.word	0xd5d8d7da
     190:	41000ed6 	.word	0x41000ed6
     194:	d5d6480b 	.word	0xd5d6480b
     198:	d9dad7d8 	.word	0xd9dad7d8
     19c:	0ed4d3de 	.word	0x0ed4d3de
	...
     1a8:	0000000c 	.word	0x0000000c
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	78040001 	.word	0x78040001
     1b4:	001f0c1e 	.word	0x001f0c1e
     1b8:	00000014 	.word	0x00000014
     1bc:	000001a8 	.word	0x000001a8
     1c0:	03000598 	.word	0x03000598
     1c4:	00000000 	.word	0x00000000
     1c8:	000000e0 	.word	0x000000e0
     1cc:	00000000 	.word	0x00000000
     1d0:	00000034 	.word	0x00000034
     1d4:	000001a8 	.word	0x000001a8
     1d8:	03000678 	.word	0x03000678
     1dc:	00000000 	.word	0x00000000
     1e0:	00000060 	.word	0x00000060
     1e4:	00000000 	.word	0x00000000
     1e8:	93400e41 	.word	0x93400e41
     1ec:	43079408 	.word	0x43079408
     1f0:	0a47069e 	.word	0x0a47069e
     1f4:	0eded3d4 	.word	0x0eded3d4
     1f8:	4b0b4100 	.word	0x4b0b4100
     1fc:	0ed4d3de 	.word	0x0ed4d3de
	...
     208:	00000024 	.word	0x00000024
     20c:	000001a8 	.word	0x000001a8
     210:	030006d8 	.word	0x030006d8
     214:	00000000 	.word	0x00000000
     218:	0000001c 	.word	0x0000001c
     21c:	00000000 	.word	0x00000000
     220:	9e100e41 	.word	0x9e100e41
     224:	0ede4502 	.word	0x0ede4502
	...
     230:	00000044 	.word	0x00000044
     234:	000001a8 	.word	0x000001a8
     238:	030006f4 	.word	0x030006f4
     23c:	00000000 	.word	0x00000000
     240:	00000850 	.word	0x00000850
     244:	00000000 	.word	0x00000000
     248:	01a00e41 	.word	0x01a00e41
     24c:	13941493 	.word	0x13941493
     250:	98109747 	.word	0x98109747
     254:	9a0e990f 	.word	0x9a0e990f
     258:	9c0c9b0d 	.word	0x9c0c9b0d
     25c:	9612950b 	.word	0x9612950b
     260:	560a9e11 	.word	0x560a9e11
     264:	ded3d40a 	.word	0xded3d40a
     268:	dad9dcdb 	.word	0xdad9dcdb
     26c:	d6d5d8d7 	.word	0xd6d5d8d7
     270:	0b41000e 	.word	0x0b41000e
     274:	00000000 	.word	0x00000000
     278:	0000002c 	.word	0x0000002c
     27c:	000001a8 	.word	0x000001a8
     280:	03000f44 	.word	0x03000f44
     284:	00000000 	.word	0x00000000
     288:	000000d0 	.word	0x000000d0
     28c:	00000000 	.word	0x00000000
     290:	04a00e41 	.word	0x04a00e41
     294:	04b00e41 	.word	0x04b00e41
     298:	459e4693 	.word	0x459e4693
     29c:	0ed3de70 	.word	0x0ed3de70
     2a0:	0e4104a0 	.word	0x0e4104a0
     2a4:	00000000 	.word	0x00000000
     2a8:	00000024 	.word	0x00000024
     2ac:	000001a8 	.word	0x000001a8
     2b0:	03001014 	.word	0x03001014
     2b4:	00000000 	.word	0x00000000
     2b8:	00000084 	.word	0x00000084
     2bc:	00000000 	.word	0x00000000
     2c0:	02800e41 	.word	0x02800e41
     2c4:	4e209e51 	.word	0x4e209e51
     2c8:	00000ede 	.word	0x00000ede
     2cc:	00000000 	.word	0x00000000
     2d0:	00000024 	.word	0x00000024
     2d4:	000001a8 	.word	0x000001a8
     2d8:	03001098 	.word	0x03001098
     2dc:	00000000 	.word	0x00000000
     2e0:	00000030 	.word	0x00000030
     2e4:	00000000 	.word	0x00000000
     2e8:	9e300e42 	.word	0x9e300e42
     2ec:	0ede4906 	.word	0x0ede4906
	...
     2f8:	00000024 	.word	0x00000024
     2fc:	000001a8 	.word	0x000001a8
     300:	030010c8 	.word	0x030010c8
     304:	00000000 	.word	0x00000000
     308:	00000098 	.word	0x00000098
     30c:	00000000 	.word	0x00000000
     310:	02a00e41 	.word	0x02a00e41
     314:	50249e54 	.word	0x50249e54
     318:	00000ede 	.word	0x00000ede
     31c:	00000000 	.word	0x00000000
     320:	0000000c 	.word	0x0000000c
     324:	ffffffff 	.word	0xffffffff
     328:	78040001 	.word	0x78040001
     32c:	001f0c1e 	.word	0x001f0c1e
     330:	0000003c 	.word	0x0000003c
     334:	00000320 	.word	0x00000320
     338:	03001160 	.word	0x03001160
     33c:	00000000 	.word	0x00000000
     340:	000000d0 	.word	0x000000d0
     344:	00000000 	.word	0x00000000
     348:	93300e41 	.word	0x93300e41
     34c:	45059406 	.word	0x45059406
     350:	03960495 	.word	0x03960495
     354:	0a57029e 	.word	0x0a57029e
     358:	d5ded3d4 	.word	0xd5ded3d4
     35c:	41000ed6 	.word	0x41000ed6
     360:	d40a540b 	.word	0xd40a540b
     364:	d6d5ded3 	.word	0xd6d5ded3
     368:	0b41000e 	.word	0x0b41000e
     36c:	00000000 	.word	0x00000000
     370:	00000034 	.word	0x00000034
     374:	00000320 	.word	0x00000320
     378:	03001230 	.word	0x03001230
     37c:	00000000 	.word	0x00000000
     380:	00000118 	.word	0x00000118
     384:	00000000 	.word	0x00000000
     388:	93100e43 	.word	0x93100e43
     38c:	58019e02 	.word	0x58019e02
     390:	0ed3de0a 	.word	0x0ed3de0a
     394:	450b4100 	.word	0x450b4100
     398:	0eded30a 	.word	0x0eded30a
     39c:	450b4100 	.word	0x450b4100
     3a0:	0eded30a 	.word	0x0eded30a
     3a4:	000b4100 	.word	0x000b4100
     3a8:	00000014 	.word	0x00000014
     3ac:	00000320 	.word	0x00000320
     3b0:	03001348 	.word	0x03001348
     3b4:	00000000 	.word	0x00000000
     3b8:	00000014 	.word	0x00000014
     3bc:	00000000 	.word	0x00000000
     3c0:	00000034 	.word	0x00000034
     3c4:	00000320 	.word	0x00000320
     3c8:	0300135c 	.word	0x0300135c
     3cc:	00000000 	.word	0x00000000
     3d0:	000000c8 	.word	0x000000c8
     3d4:	00000000 	.word	0x00000000
     3d8:	93400e41 	.word	0x93400e41
     3dc:	43079408 	.word	0x43079408
     3e0:	05960695 	.word	0x05960695
     3e4:	98049744 	.word	0x98049744
     3e8:	69029e03 	.word	0x69029e03
     3ec:	d7ded3d4 	.word	0xd7ded3d4
     3f0:	0ed6d5d8 	.word	0x0ed6d5d8
     3f4:	00000000 	.word	0x00000000
     3f8:	00000034 	.word	0x00000034
     3fc:	00000320 	.word	0x00000320
     400:	03001424 	.word	0x03001424
     404:	00000000 	.word	0x00000000
     408:	000000e8 	.word	0x000000e8
     40c:	00000000 	.word	0x00000000
     410:	93500e41 	.word	0x93500e41
     414:	4309940a 	.word	0x4309940a
     418:	07960895 	.word	0x07960895
     41c:	98069744 	.word	0x98069744
     420:	71049e05 	.word	0x71049e05
     424:	d7ded3d4 	.word	0xd7ded3d4
     428:	0ed6d5d8 	.word	0x0ed6d5d8
     42c:	00000000 	.word	0x00000000
     430:	00000014 	.word	0x00000014
     434:	00000320 	.word	0x00000320
     438:	0300150c 	.word	0x0300150c
     43c:	00000000 	.word	0x00000000
     440:	0000002c 	.word	0x0000002c
     444:	00000000 	.word	0x00000000
     448:	0000002c 	.word	0x0000002c
     44c:	00000320 	.word	0x00000320
     450:	03001538 	.word	0x03001538
     454:	00000000 	.word	0x00000000
     458:	000000ac 	.word	0x000000ac
     45c:	00000000 	.word	0x00000000
     460:	93300e41 	.word	0x93300e41
     464:	42059406 	.word	0x42059406
     468:	03960495 	.word	0x03960495
     46c:	62029e44 	.word	0x62029e44
     470:	d5ded3d4 	.word	0xd5ded3d4
     474:	00000ed6 	.word	0x00000ed6
     478:	00000034 	.word	0x00000034
     47c:	00000320 	.word	0x00000320
     480:	030015e4 	.word	0x030015e4
     484:	00000000 	.word	0x00000000
     488:	000002ec 	.word	0x000002ec
     48c:	00000000 	.word	0x00000000
     490:	93300e41 	.word	0x93300e41
     494:	45059406 	.word	0x45059406
     498:	03960495 	.word	0x03960495
     49c:	019e0297 	.word	0x019e0297
     4a0:	d40a7b02 	.word	0xd40a7b02
     4a4:	d5ded7d3 	.word	0xd5ded7d3
     4a8:	41000ed6 	.word	0x41000ed6
     4ac:	0000000b 	.word	0x0000000b
     4b0:	0000004c 	.word	0x0000004c
     4b4:	00000320 	.word	0x00000320
     4b8:	030018d0 	.word	0x030018d0
     4bc:	00000000 	.word	0x00000000
     4c0:	00000138 	.word	0x00000138
     4c4:	00000000 	.word	0x00000000
     4c8:	93500e41 	.word	0x93500e41
     4cc:	4509940a 	.word	0x4509940a
     4d0:	05980697 	.word	0x05980697
     4d4:	039a0499 	.word	0x039a0499
     4d8:	07960895 	.word	0x07960895
     4dc:	019e029b 	.word	0x019e029b
     4e0:	d3d40a6d 	.word	0xd3d40a6d
     4e4:	dad9dedb 	.word	0xdad9dedb
     4e8:	d6d5d8d7 	.word	0xd6d5d8d7
     4ec:	0b41000e 	.word	0x0b41000e
     4f0:	d5d60a58 	.word	0xd5d60a58
     4f4:	d9dad7d8 	.word	0xd9dad7d8
     4f8:	d4d3dbde 	.word	0xd4d3dbde
     4fc:	0b41000e 	.word	0x0b41000e
     500:	0000004c 	.word	0x0000004c
     504:	00000320 	.word	0x00000320
     508:	03001a08 	.word	0x03001a08
     50c:	00000000 	.word	0x00000000
     510:	00000130 	.word	0x00000130
     514:	00000000 	.word	0x00000000
     518:	93100e41 	.word	0x93100e41
     51c:	5d019e02 	.word	0x5d019e02
     520:	0ed3de0a 	.word	0x0ed3de0a
     524:	4c0b4100 	.word	0x4c0b4100
     528:	0ed3de0a 	.word	0x0ed3de0a
     52c:	470b4300 	.word	0x470b4300
     530:	0eded30a 	.word	0x0eded30a
     534:	470b4100 	.word	0x470b4100
     538:	0eded30a 	.word	0x0eded30a
     53c:	460b4100 	.word	0x460b4100
     540:	0eded30a 	.word	0x0eded30a
     544:	460b4100 	.word	0x460b4100
     548:	000eded3 	.word	0x000eded3
     54c:	00000000 	.word	0x00000000
     550:	0000002c 	.word	0x0000002c
     554:	00000320 	.word	0x00000320
     558:	03001b38 	.word	0x03001b38
     55c:	00000000 	.word	0x00000000
     560:	00000090 	.word	0x00000090
     564:	00000000 	.word	0x00000000
     568:	93100e41 	.word	0x93100e41
     56c:	56019e02 	.word	0x56019e02
     570:	0ed3de0a 	.word	0x0ed3de0a
     574:	460b4100 	.word	0x460b4100
     578:	0ed3de0a 	.word	0x0ed3de0a
     57c:	000b4300 	.word	0x000b4300
     580:	0000002c 	.word	0x0000002c
     584:	00000320 	.word	0x00000320
     588:	03001bc8 	.word	0x03001bc8
     58c:	00000000 	.word	0x00000000
     590:	00000078 	.word	0x00000078
     594:	00000000 	.word	0x00000000
     598:	93100e43 	.word	0x93100e43
     59c:	51019e02 	.word	0x51019e02
     5a0:	0ed3de0a 	.word	0x0ed3de0a
     5a4:	460b4100 	.word	0x460b4100
     5a8:	000ed3de 	.word	0x000ed3de
     5ac:	00000000 	.word	0x00000000
     5b0:	0000002c 	.word	0x0000002c
     5b4:	00000320 	.word	0x00000320
     5b8:	03001c40 	.word	0x03001c40
     5bc:	00000000 	.word	0x00000000
     5c0:	00000110 	.word	0x00000110
     5c4:	00000000 	.word	0x00000000
     5c8:	93300e41 	.word	0x93300e41
     5cc:	44059406 	.word	0x44059406
     5d0:	03960495 	.word	0x03960495
     5d4:	d47e029e 	.word	0xd47e029e
     5d8:	d6d5ded3 	.word	0xd6d5ded3
     5dc:	0000000e 	.word	0x0000000e
     5e0:	00000014 	.word	0x00000014
     5e4:	00000320 	.word	0x00000320
     5e8:	03001d50 	.word	0x03001d50
     5ec:	00000000 	.word	0x00000000
     5f0:	00000010 	.word	0x00000010
     5f4:	00000000 	.word	0x00000000
     5f8:	0000000c 	.word	0x0000000c
     5fc:	ffffffff 	.word	0xffffffff
     600:	78040001 	.word	0x78040001
     604:	001f0c1e 	.word	0x001f0c1e
     608:	00000054 	.word	0x00000054
     60c:	000005f8 	.word	0x000005f8
     610:	03001d60 	.word	0x03001d60
     614:	00000000 	.word	0x00000000
     618:	00000248 	.word	0x00000248
     61c:	00000000 	.word	0x00000000
     620:	02d00e41 	.word	0x02d00e41
     624:	29942a93 	.word	0x29942a93
     628:	96289543 	.word	0x96289543
     62c:	98269727 	.word	0x98269727
     630:	02249e25 	.word	0x02249e25
     634:	d3d40a5b 	.word	0xd3d40a5b
     638:	d5d8d7de 	.word	0xd5d8d7de
     63c:	41000ed6 	.word	0x41000ed6
     640:	d60a450b 	.word	0xd60a450b
     644:	ded7d8d5 	.word	0xded7d8d5
     648:	000ed4d3 	.word	0x000ed4d3
     64c:	0a450b41 	.word	0x0a450b41
     650:	d7d8d5d6 	.word	0xd7d8d5d6
     654:	0ed4d3de 	.word	0x0ed4d3de
     658:	000b4100 	.word	0x000b4100
     65c:	00000000 	.word	0x00000000
     660:	0000000c 	.word	0x0000000c
     664:	ffffffff 	.word	0xffffffff
     668:	78040001 	.word	0x78040001
     66c:	001f0c1e 	.word	0x001f0c1e
     670:	0000002c 	.word	0x0000002c
     674:	00000660 	.word	0x00000660
     678:	03001fa8 	.word	0x03001fa8
     67c:	00000000 	.word	0x00000000
     680:	000001b8 	.word	0x000001b8
     684:	00000000 	.word	0x00000000
     688:	93300e41 	.word	0x93300e41
     68c:	46059406 	.word	0x46059406
     690:	5902049e 	.word	0x5902049e
     694:	ded3d40a 	.word	0xded3d40a
     698:	0b41000e 	.word	0x0b41000e
     69c:	00000000 	.word	0x00000000
     6a0:	00000044 	.word	0x00000044
     6a4:	00000660 	.word	0x00000660
     6a8:	03002160 	.word	0x03002160
     6ac:	00000000 	.word	0x00000000
     6b0:	00000298 	.word	0x00000298
     6b4:	00000000 	.word	0x00000000
     6b8:	93500e41 	.word	0x93500e41
     6bc:	4509940a 	.word	0x4509940a
     6c0:	07960895 	.word	0x07960895
     6c4:	05980697 	.word	0x05980697
     6c8:	0a49049e 	.word	0x0a49049e
     6cc:	d7ded3d4 	.word	0xd7ded3d4
     6d0:	0ed6d5d8 	.word	0x0ed6d5d8
     6d4:	020b4100 	.word	0x020b4100
     6d8:	d3d40a66 	.word	0xd3d40a66
     6dc:	d5d8d7de 	.word	0xd5d8d7de
     6e0:	41000ed6 	.word	0x41000ed6
     6e4:	0000000b 	.word	0x0000000b
     6e8:	0000004c 	.word	0x0000004c
     6ec:	00000660 	.word	0x00000660
     6f0:	030023f8 	.word	0x030023f8
     6f4:	00000000 	.word	0x00000000
     6f8:	00000274 	.word	0x00000274
     6fc:	00000000 	.word	0x00000000
     700:	93500e41 	.word	0x93500e41
     704:	4509940a 	.word	0x4509940a
     708:	07960895 	.word	0x07960895
     70c:	98069745 	.word	0x98069745
     710:	9a049905 	.word	0x9a049905
     714:	02029e03 	.word	0x02029e03
     718:	d3d40a66 	.word	0xd3d40a66
     71c:	d7dad9de 	.word	0xd7dad9de
     720:	0ed6d5d8 	.word	0x0ed6d5d8
     724:	460b4100 	.word	0x460b4100
     728:	ded3d40a 	.word	0xded3d40a
     72c:	d8d7dad9 	.word	0xd8d7dad9
     730:	000ed6d5 	.word	0x000ed6d5
     734:	00000b41 	.word	0x00000b41
     738:	0000000c 	.word	0x0000000c
     73c:	ffffffff 	.word	0xffffffff
     740:	78040001 	.word	0x78040001
     744:	001f0c1e 	.word	0x001f0c1e
     748:	00000014 	.word	0x00000014
     74c:	00000738 	.word	0x00000738
     750:	0300266c 	.word	0x0300266c
     754:	00000000 	.word	0x00000000
     758:	0000001c 	.word	0x0000001c
     75c:	00000000 	.word	0x00000000
     760:	00000014 	.word	0x00000014
     764:	00000738 	.word	0x00000738
     768:	03002688 	.word	0x03002688
     76c:	00000000 	.word	0x00000000
     770:	0000001c 	.word	0x0000001c
     774:	00000000 	.word	0x00000000
     778:	00000014 	.word	0x00000014
     77c:	00000738 	.word	0x00000738
     780:	030026a4 	.word	0x030026a4
     784:	00000000 	.word	0x00000000
     788:	00000008 	.word	0x00000008
     78c:	00000000 	.word	0x00000000
     790:	00000014 	.word	0x00000014
     794:	00000738 	.word	0x00000738
     798:	030026ac 	.word	0x030026ac
     79c:	00000000 	.word	0x00000000
     7a0:	0000002c 	.word	0x0000002c
     7a4:	00000000 	.word	0x00000000
     7a8:	00000024 	.word	0x00000024
     7ac:	00000738 	.word	0x00000738
     7b0:	030026d8 	.word	0x030026d8
     7b4:	00000000 	.word	0x00000000
     7b8:	000000b4 	.word	0x000000b4
     7bc:	00000000 	.word	0x00000000
     7c0:	9e100e45 	.word	0x9e100e45
     7c4:	de0a5f02 	.word	0xde0a5f02
     7c8:	0b41000e 	.word	0x0b41000e
     7cc:	00000000 	.word	0x00000000
     7d0:	00000024 	.word	0x00000024
     7d4:	00000738 	.word	0x00000738
     7d8:	0300278c 	.word	0x0300278c
     7dc:	00000000 	.word	0x00000000
     7e0:	000002fc 	.word	0x000002fc
     7e4:	00000000 	.word	0x00000000
     7e8:	9e300e41 	.word	0x9e300e41
     7ec:	debd0206 	.word	0xdebd0206
     7f0:	0000000e 	.word	0x0000000e
     7f4:	00000000 	.word	0x00000000
     7f8:	0000005c 	.word	0x0000005c
     7fc:	00000738 	.word	0x00000738
     800:	03002a88 	.word	0x03002a88
     804:	00000000 	.word	0x00000000
     808:	00000214 	.word	0x00000214
     80c:	00000000 	.word	0x00000000
     810:	10900e41 	.word	0x10900e41
     814:	10d00e46 	.word	0x10d00e46
     818:	94028a93 	.word	0x94028a93
     81c:	95430289 	.word	0x95430289
     820:	87960288 	.word	0x87960288
     824:	86974402 	.word	0x86974402
     828:	02859802 	.word	0x02859802
     82c:	0202849e 	.word	0x0202849e
     830:	d3d40a68 	.word	0xd3d40a68
     834:	d5d8d7de 	.word	0xd5d8d7de
     838:	10900ed6 	.word	0x10900ed6
     83c:	41000e43 	.word	0x41000e43
     840:	d60a480b 	.word	0xd60a480b
     844:	ded7d8d5 	.word	0xded7d8d5
     848:	900ed4d3 	.word	0x900ed4d3
     84c:	000e4110 	.word	0x000e4110
     850:	00000b41 	.word	0x00000b41
     854:	00000000 	.word	0x00000000
     858:	00000034 	.word	0x00000034
     85c:	00000738 	.word	0x00000738
     860:	03002c9c 	.word	0x03002c9c
     864:	00000000 	.word	0x00000000
     868:	00000224 	.word	0x00000224
     86c:	00000000 	.word	0x00000000
     870:	93300e41 	.word	0x93300e41
     874:	46059406 	.word	0x46059406
     878:	03960495 	.word	0x03960495
     87c:	0a5e029e 	.word	0x0a5e029e
     880:	d5ded3d4 	.word	0xd5ded3d4
     884:	41000ed6 	.word	0x41000ed6
     888:	0000000b 	.word	0x0000000b
     88c:	00000000 	.word	0x00000000
     890:	00000024 	.word	0x00000024
     894:	00000738 	.word	0x00000738
     898:	03002ec0 	.word	0x03002ec0
     89c:	00000000 	.word	0x00000000
     8a0:	0000033c 	.word	0x0000033c
     8a4:	00000000 	.word	0x00000000
     8a8:	9e300e41 	.word	0x9e300e41
     8ac:	decd0206 	.word	0xdecd0206
     8b0:	0000000e 	.word	0x0000000e
     8b4:	00000000 	.word	0x00000000
     8b8:	00000054 	.word	0x00000054
     8bc:	00000738 	.word	0x00000738
     8c0:	030031fc 	.word	0x030031fc
     8c4:	00000000 	.word	0x00000000
     8c8:	00000274 	.word	0x00000274
     8cc:	00000000 	.word	0x00000000
     8d0:	93600e41 	.word	0x93600e41
     8d4:	460b940c 	.word	0x460b940c
     8d8:	09960a95 	.word	0x09960a95
     8dc:	07980897 	.word	0x07980897
     8e0:	059a0699 	.word	0x059a0699
     8e4:	039e049b 	.word	0x039e049b
     8e8:	d40a4502 	.word	0xd40a4502
     8ec:	d9dedbd3 	.word	0xd9dedbd3
     8f0:	d5d8d7da 	.word	0xd5d8d7da
     8f4:	41000ed6 	.word	0x41000ed6
     8f8:	0a4a020b 	.word	0x0a4a020b
     8fc:	d7d8d5d6 	.word	0xd7d8d5d6
     900:	dbded9da 	.word	0xdbded9da
     904:	000ed4d3 	.word	0x000ed4d3
     908:	00000b41 	.word	0x00000b41
     90c:	00000000 	.word	0x00000000
     910:	00000054 	.word	0x00000054
     914:	00000738 	.word	0x00000738
     918:	03003470 	.word	0x03003470
     91c:	00000000 	.word	0x00000000
     920:	00000128 	.word	0x00000128
     924:	00000000 	.word	0x00000000
     928:	93600e41 	.word	0x93600e41
     92c:	470b940c 	.word	0x470b940c
     930:	039c049b 	.word	0x039c049b
     934:	09960a95 	.word	0x09960a95
     938:	07980897 	.word	0x07980897
     93c:	059a0699 	.word	0x059a0699
     940:	0a74029e 	.word	0x0a74029e
     944:	d7d8d5d6 	.word	0xd7d8d5d6
     948:	dbdcd9da 	.word	0xdbdcd9da
     94c:	0ed4d3de 	.word	0x0ed4d3de
     950:	4c0b4100 	.word	0x4c0b4100
     954:	dbded3d4 	.word	0xdbded3d4
     958:	d7dad9dc 	.word	0xd7dad9dc
     95c:	0ed6d5d8 	.word	0x0ed6d5d8
	...
     968:	00000054 	.word	0x00000054
     96c:	00000738 	.word	0x00000738
     970:	03003598 	.word	0x03003598
     974:	00000000 	.word	0x00000000
     978:	000004b8 	.word	0x000004b8
     97c:	00000000 	.word	0x00000000
     980:	93700e41 	.word	0x93700e41
     984:	450d940e 	.word	0x450d940e
     988:	059c069b 	.word	0x059c069b
     98c:	0b960c95 	.word	0x0b960c95
     990:	09980a97 	.word	0x09980a97
     994:	079a0899 	.word	0x079a0899
     998:	0a7f049e 	.word	0x0a7f049e
     99c:	dbded3d4 	.word	0xdbded3d4
     9a0:	d7dad9dc 	.word	0xd7dad9dc
     9a4:	0ed6d5d8 	.word	0x0ed6d5d8
     9a8:	020b4100 	.word	0x020b4100
     9ac:	d8d5d6e7 	.word	0xd8d5d6e7
     9b0:	dcd9dad7 	.word	0xdcd9dad7
     9b4:	d4d3dedb 	.word	0xd4d3dedb
     9b8:	0000000e 	.word	0x0000000e
     9bc:	00000000 	.word	0x00000000
     9c0:	00000024 	.word	0x00000024
     9c4:	00000738 	.word	0x00000738
     9c8:	03003a50 	.word	0x03003a50
     9cc:	00000000 	.word	0x00000000
     9d0:	00000168 	.word	0x00000168
     9d4:	00000000 	.word	0x00000000
     9d8:	93100e45 	.word	0x93100e45
     9dc:	02019e02 	.word	0x02019e02
     9e0:	d3de0a4a 	.word	0xd3de0a4a
     9e4:	0b41000e 	.word	0x0b41000e
     9e8:	0000000c 	.word	0x0000000c
     9ec:	ffffffff 	.word	0xffffffff
     9f0:	78040001 	.word	0x78040001
     9f4:	001f0c1e 	.word	0x001f0c1e
     9f8:	0000003c 	.word	0x0000003c
     9fc:	000009e8 	.word	0x000009e8
     a00:	03003bb8 	.word	0x03003bb8
     a04:	00000000 	.word	0x00000000
     a08:	000000c4 	.word	0x000000c4
     a0c:	00000000 	.word	0x00000000
     a10:	93100e41 	.word	0x93100e41
     a14:	54019e02 	.word	0x54019e02
     a18:	0ed3de0a 	.word	0x0ed3de0a
     a1c:	450b4100 	.word	0x450b4100
     a20:	0eded30a 	.word	0x0eded30a
     a24:	500b4100 	.word	0x500b4100
     a28:	0eded30a 	.word	0x0eded30a
     a2c:	430b4100 	.word	0x430b4100
     a30:	000eded3 	.word	0x000eded3
     a34:	00000000 	.word	0x00000000
     a38:	00000024 	.word	0x00000024
     a3c:	000009e8 	.word	0x000009e8
     a40:	03003c7c 	.word	0x03003c7c
     a44:	00000000 	.word	0x00000000
     a48:	0000004c 	.word	0x0000004c
     a4c:	00000000 	.word	0x00000000
     a50:	93100e41 	.word	0x93100e41
     a54:	51019e02 	.word	0x51019e02
     a58:	000ed3de 	.word	0x000ed3de
     a5c:	00000000 	.word	0x00000000
     a60:	0000001c 	.word	0x0000001c
     a64:	000009e8 	.word	0x000009e8
     a68:	03003cc8 	.word	0x03003cc8
     a6c:	00000000 	.word	0x00000000
     a70:	00000098 	.word	0x00000098
     a74:	00000000 	.word	0x00000000
     a78:	64100e41 	.word	0x64100e41
     a7c:	0000000e 	.word	0x0000000e
     a80:	00000024 	.word	0x00000024
     a84:	000009e8 	.word	0x000009e8
     a88:	03003d60 	.word	0x03003d60
     a8c:	00000000 	.word	0x00000000
     a90:	00000094 	.word	0x00000094
     a94:	00000000 	.word	0x00000000
     a98:	93300e41 	.word	0x93300e41
     a9c:	44059406 	.word	0x44059406
     aa0:	d45f049e 	.word	0xd45f049e
     aa4:	000eded3 	.word	0x000eded3
     aa8:	0000002c 	.word	0x0000002c
     aac:	000009e8 	.word	0x000009e8
     ab0:	03003df4 	.word	0x03003df4
     ab4:	00000000 	.word	0x00000000
     ab8:	00000070 	.word	0x00000070
     abc:	00000000 	.word	0x00000000
     ac0:	93200e41 	.word	0x93200e41
     ac4:	55039e04 	.word	0x55039e04
     ac8:	0ed3de0a 	.word	0x0ed3de0a
     acc:	430b4100 	.word	0x430b4100
     ad0:	0eded30a 	.word	0x0eded30a
     ad4:	000b4100 	.word	0x000b4100
     ad8:	00000024 	.word	0x00000024
     adc:	000009e8 	.word	0x000009e8
     ae0:	03003e64 	.word	0x03003e64
     ae4:	00000000 	.word	0x00000000
     ae8:	00000030 	.word	0x00000030
     aec:	00000000 	.word	0x00000000
     af0:	9e200e41 	.word	0x9e200e41
     af4:	0ede4704 	.word	0x0ede4704
	...
     b00:	00000024 	.word	0x00000024
     b04:	000009e8 	.word	0x000009e8
     b08:	03003e94 	.word	0x03003e94
     b0c:	00000000 	.word	0x00000000
     b10:	00000050 	.word	0x00000050
     b14:	00000000 	.word	0x00000000
     b18:	93200e41 	.word	0x93200e41
     b1c:	4e039e04 	.word	0x4e039e04
     b20:	0ed3de0a 	.word	0x0ed3de0a
     b24:	000b4400 	.word	0x000b4400
     b28:	00000024 	.word	0x00000024
     b2c:	000009e8 	.word	0x000009e8
     b30:	03003ee4 	.word	0x03003ee4
     b34:	00000000 	.word	0x00000000
     b38:	00000040 	.word	0x00000040
     b3c:	00000000 	.word	0x00000000
     b40:	93200e41 	.word	0x93200e41
     b44:	4d039e04 	.word	0x4d039e04
     b48:	0ed3de0a 	.word	0x0ed3de0a
     b4c:	000b4100 	.word	0x000b4100
     b50:	00000034 	.word	0x00000034
     b54:	000009e8 	.word	0x000009e8
     b58:	03003f24 	.word	0x03003f24
     b5c:	00000000 	.word	0x00000000
     b60:	00000078 	.word	0x00000078
     b64:	00000000 	.word	0x00000000
     b68:	93300e41 	.word	0x93300e41
     b6c:	44059406 	.word	0x44059406
     b70:	03960495 	.word	0x03960495
     b74:	55029e42 	.word	0x55029e42
     b78:	ded3d40a 	.word	0xded3d40a
     b7c:	000ed6d5 	.word	0x000ed6d5
     b80:	00000b41 	.word	0x00000b41
     b84:	00000000 	.word	0x00000000
     b88:	00000014 	.word	0x00000014
     b8c:	000009e8 	.word	0x000009e8
     b90:	03003f9c 	.word	0x03003f9c
     b94:	00000000 	.word	0x00000000
     b98:	00000034 	.word	0x00000034
     b9c:	00000000 	.word	0x00000000
     ba0:	0000002c 	.word	0x0000002c
     ba4:	000009e8 	.word	0x000009e8
     ba8:	03003fd0 	.word	0x03003fd0
     bac:	00000000 	.word	0x00000000
     bb0:	00000074 	.word	0x00000074
     bb4:	00000000 	.word	0x00000000
     bb8:	93300e41 	.word	0x93300e41
     bbc:	42059406 	.word	0x42059406
     bc0:	03960495 	.word	0x03960495
     bc4:	d459029e 	.word	0xd459029e
     bc8:	d6d5ded3 	.word	0xd6d5ded3
     bcc:	0000000e 	.word	0x0000000e
     bd0:	0000002c 	.word	0x0000002c
     bd4:	000009e8 	.word	0x000009e8
     bd8:	03004044 	.word	0x03004044
     bdc:	00000000 	.word	0x00000000
     be0:	00000044 	.word	0x00000044
     be4:	00000000 	.word	0x00000000
     be8:	9e100e41 	.word	0x9e100e41
     bec:	de0a4a02 	.word	0xde0a4a02
     bf0:	0b41000e 	.word	0x0b41000e
     bf4:	0ede0a42 	.word	0x0ede0a42
     bf8:	000b4100 	.word	0x000b4100
     bfc:	00000000 	.word	0x00000000
     c00:	00000024 	.word	0x00000024
     c04:	000009e8 	.word	0x000009e8
     c08:	03004088 	.word	0x03004088
     c0c:	00000000 	.word	0x00000000
     c10:	00000028 	.word	0x00000028
     c14:	00000000 	.word	0x00000000
     c18:	9e100e42 	.word	0x9e100e42
     c1c:	0ede4702 	.word	0x0ede4702
	...
     c28:	0000000c 	.word	0x0000000c
     c2c:	ffffffff 	.word	0xffffffff
     c30:	78040001 	.word	0x78040001
     c34:	001f0c1e 	.word	0x001f0c1e
     c38:	00000044 	.word	0x00000044
     c3c:	00000c28 	.word	0x00000c28
     c40:	030040b0 	.word	0x030040b0
     c44:	00000000 	.word	0x00000000
     c48:	00000130 	.word	0x00000130
     c4c:	00000000 	.word	0x00000000
     c50:	93400e41 	.word	0x93400e41
     c54:	43079408 	.word	0x43079408
     c58:	05960695 	.word	0x05960695
     c5c:	03980497 	.word	0x03980497
     c60:	019e0299 	.word	0x019e0299
     c64:	d3d40a47 	.word	0xd3d40a47
     c68:	d8d7ded9 	.word	0xd8d7ded9
     c6c:	000ed6d5 	.word	0x000ed6d5
     c70:	0a790b41 	.word	0x0a790b41
     c74:	d7d8d5d6 	.word	0xd7d8d5d6
     c78:	d4d3d9de 	.word	0xd4d3d9de
     c7c:	0b41000e 	.word	0x0b41000e
     c80:	00000054 	.word	0x00000054
     c84:	00000c28 	.word	0x00000c28
     c88:	030041e0 	.word	0x030041e0
     c8c:	00000000 	.word	0x00000000
     c90:	00000180 	.word	0x00000180
     c94:	00000000 	.word	0x00000000
     c98:	93700e43 	.word	0x93700e43
     c9c:	480d940e 	.word	0x480d940e
     ca0:	0c95049e 	.word	0x0c95049e
     ca4:	0a970b96 	.word	0x0a970b96
     ca8:	08990998 	.word	0x08990998
     cac:	069b079a 	.word	0x069b079a
     cb0:	4802059c 	.word	0x4802059c
     cb4:	ded3d40a 	.word	0xded3d40a
     cb8:	dad9dcdb 	.word	0xdad9dcdb
     cbc:	d6d5d8d7 	.word	0xd6d5d8d7
     cc0:	0b41000e 	.word	0x0b41000e
     cc4:	d5d60a47 	.word	0xd5d60a47
     cc8:	d9dad7d8 	.word	0xd9dad7d8
     ccc:	d3dedbdc 	.word	0xd3dedbdc
     cd0:	41000ed4 	.word	0x41000ed4
     cd4:	0000000b 	.word	0x0000000b
     cd8:	00000054 	.word	0x00000054
     cdc:	00000c28 	.word	0x00000c28
     ce0:	03004360 	.word	0x03004360
     ce4:	00000000 	.word	0x00000000
     ce8:	00000170 	.word	0x00000170
     cec:	00000000 	.word	0x00000000
     cf0:	93700e43 	.word	0x93700e43
     cf4:	480d940e 	.word	0x480d940e
     cf8:	0c95049e 	.word	0x0c95049e
     cfc:	0a970b96 	.word	0x0a970b96
     d00:	08990998 	.word	0x08990998
     d04:	069b079a 	.word	0x069b079a
     d08:	4402059c 	.word	0x4402059c
     d0c:	ded3d40a 	.word	0xded3d40a
     d10:	dad9dcdb 	.word	0xdad9dcdb
     d14:	d6d5d8d7 	.word	0xd6d5d8d7
     d18:	0b41000e 	.word	0x0b41000e
     d1c:	d5d60a47 	.word	0xd5d60a47
     d20:	d9dad7d8 	.word	0xd9dad7d8
     d24:	d3dedbdc 	.word	0xd3dedbdc
     d28:	41000ed4 	.word	0x41000ed4
     d2c:	0000000b 	.word	0x0000000b
     d30:	00000044 	.word	0x00000044
     d34:	00000c28 	.word	0x00000c28
     d38:	030044d0 	.word	0x030044d0
     d3c:	00000000 	.word	0x00000000
     d40:	000001ac 	.word	0x000001ac
     d44:	00000000 	.word	0x00000000
     d48:	93500e41 	.word	0x93500e41
     d4c:	4509940a 	.word	0x4509940a
     d50:	07960895 	.word	0x07960895
     d54:	019e029b 	.word	0x019e029b
     d58:	05980697 	.word	0x05980697
     d5c:	039a0499 	.word	0x039a0499
     d60:	d40a5f02 	.word	0xd40a5f02
     d64:	d9dedbd3 	.word	0xd9dedbd3
     d68:	d5d8d7da 	.word	0xd5d8d7da
     d6c:	41000ed6 	.word	0x41000ed6
     d70:	0000000b 	.word	0x0000000b
     d74:	00000000 	.word	0x00000000
     d78:	00000044 	.word	0x00000044
     d7c:	00000c28 	.word	0x00000c28
     d80:	0300467c 	.word	0x0300467c
     d84:	00000000 	.word	0x00000000
     d88:	00000300 	.word	0x00000300
     d8c:	00000000 	.word	0x00000000
     d90:	93600e4a 	.word	0x93600e4a
     d94:	4b0b940c 	.word	0x4b0b940c
     d98:	049b029e 	.word	0x049b029e
     d9c:	0a95039c 	.word	0x0a95039c
     da0:	08970996 	.word	0x08970996
     da4:	06990798 	.word	0x06990798
     da8:	a702059a 	.word	0xa702059a
     dac:	ded3d40a 	.word	0xded3d40a
     db0:	dad9dcdb 	.word	0xdad9dcdb
     db4:	d6d5d8d7 	.word	0xd6d5d8d7
     db8:	0b41000e 	.word	0x0b41000e
     dbc:	00000000 	.word	0x00000000
     dc0:	00000054 	.word	0x00000054
     dc4:	00000c28 	.word	0x00000c28
     dc8:	0300497c 	.word	0x0300497c
     dcc:	00000000 	.word	0x00000000
     dd0:	0000025c 	.word	0x0000025c
     dd4:	00000000 	.word	0x00000000
     dd8:	93500e41 	.word	0x93500e41
     ddc:	4509940a 	.word	0x4509940a
     de0:	07960895 	.word	0x07960895
     de4:	019e029b 	.word	0x019e029b
     de8:	05980697 	.word	0x05980697
     dec:	039a0499 	.word	0x039a0499
     df0:	d40a8602 	.word	0xd40a8602
     df4:	d9dedbd3 	.word	0xd9dedbd3
     df8:	d5d8d7da 	.word	0xd5d8d7da
     dfc:	41000ed6 	.word	0x41000ed6
     e00:	d60a460b 	.word	0xd60a460b
     e04:	dad7d8d5 	.word	0xdad7d8d5
     e08:	d3dbded9 	.word	0xd3dbded9
     e0c:	41000ed4 	.word	0x41000ed4
     e10:	0000000b 	.word	0x0000000b
     e14:	00000000 	.word	0x00000000
     e18:	0000002c 	.word	0x0000002c
     e1c:	00000c28 	.word	0x00000c28
     e20:	03004bd8 	.word	0x03004bd8
     e24:	00000000 	.word	0x00000000
     e28:	000000a0 	.word	0x000000a0
     e2c:	00000000 	.word	0x00000000
     e30:	93300e41 	.word	0x93300e41
     e34:	45059406 	.word	0x45059406
     e38:	0495029e 	.word	0x0495029e
     e3c:	d4610396 	.word	0xd4610396
     e40:	d6d5ded3 	.word	0xd6d5ded3
     e44:	0000000e 	.word	0x0000000e
     e48:	0000002c 	.word	0x0000002c
     e4c:	00000c28 	.word	0x00000c28
     e50:	03004c78 	.word	0x03004c78
     e54:	00000000 	.word	0x00000000
     e58:	0000009c 	.word	0x0000009c
     e5c:	00000000 	.word	0x00000000
     e60:	93300e41 	.word	0x93300e41
     e64:	45059406 	.word	0x45059406
     e68:	0495029e 	.word	0x0495029e
     e6c:	d4600396 	.word	0xd4600396
     e70:	d6d5ded3 	.word	0xd6d5ded3
     e74:	0000000e 	.word	0x0000000e
     e78:	00000014 	.word	0x00000014
     e7c:	00000c28 	.word	0x00000c28
     e80:	03004d14 	.word	0x03004d14
     e84:	00000000 	.word	0x00000000
     e88:	00000010 	.word	0x00000010
     e8c:	00000000 	.word	0x00000000
     e90:	00000014 	.word	0x00000014
     e94:	00000c28 	.word	0x00000c28
     e98:	03004d24 	.word	0x03004d24
     e9c:	00000000 	.word	0x00000000
     ea0:	00000010 	.word	0x00000010
     ea4:	00000000 	.word	0x00000000
     ea8:	0000000c 	.word	0x0000000c
     eac:	ffffffff 	.word	0xffffffff
     eb0:	78040001 	.word	0x78040001
     eb4:	001f0c1e 	.word	0x001f0c1e
     eb8:	00000014 	.word	0x00000014
     ebc:	00000ea8 	.word	0x00000ea8
     ec0:	03004d34 	.word	0x03004d34
     ec4:	00000000 	.word	0x00000000
     ec8:	00000034 	.word	0x00000034
     ecc:	00000000 	.word	0x00000000
     ed0:	00000014 	.word	0x00000014
     ed4:	00000ea8 	.word	0x00000ea8
     ed8:	03004d68 	.word	0x03004d68
     edc:	00000000 	.word	0x00000000
     ee0:	0000005c 	.word	0x0000005c
     ee4:	00000000 	.word	0x00000000
     ee8:	00000024 	.word	0x00000024
     eec:	00000ea8 	.word	0x00000ea8
     ef0:	03004dc4 	.word	0x03004dc4
     ef4:	00000000 	.word	0x00000000
     ef8:	000000b0 	.word	0x000000b0
     efc:	00000000 	.word	0x00000000
     f00:	9e300e41 	.word	0x9e300e41
     f04:	0ede6a06 	.word	0x0ede6a06
	...
     f10:	0000000c 	.word	0x0000000c
     f14:	ffffffff 	.word	0xffffffff
     f18:	78040001 	.word	0x78040001
     f1c:	001f0c1e 	.word	0x001f0c1e
     f20:	00000014 	.word	0x00000014
     f24:	00000f10 	.word	0x00000f10
     f28:	03004e74 	.word	0x03004e74
     f2c:	00000000 	.word	0x00000000
     f30:	0000006c 	.word	0x0000006c
     f34:	00000000 	.word	0x00000000
     f38:	0000002c 	.word	0x0000002c
     f3c:	00000f10 	.word	0x00000f10
     f40:	03004ee0 	.word	0x03004ee0
     f44:	00000000 	.word	0x00000000
     f48:	000000e8 	.word	0x000000e8
     f4c:	00000000 	.word	0x00000000
     f50:	93100e43 	.word	0x93100e43
     f54:	6e019e02 	.word	0x6e019e02
     f58:	0ed3de0a 	.word	0x0ed3de0a
     f5c:	450b4100 	.word	0x450b4100
     f60:	0ed3de0a 	.word	0x0ed3de0a
     f64:	000b4200 	.word	0x000b4200
     f68:	00000034 	.word	0x00000034
     f6c:	00000f10 	.word	0x00000f10
     f70:	03004fc8 	.word	0x03004fc8
     f74:	00000000 	.word	0x00000000
     f78:	000000ac 	.word	0x000000ac
     f7c:	00000000 	.word	0x00000000
     f80:	93200e41 	.word	0x93200e41
     f84:	41039404 	.word	0x41039404
     f88:	0a57029e 	.word	0x0a57029e
     f8c:	0eded3d4 	.word	0x0eded3d4
     f90:	4e0b4100 	.word	0x4e0b4100
     f94:	d4d3de0a 	.word	0xd4d3de0a
     f98:	0b41000e 	.word	0x0b41000e
     f9c:	00000000 	.word	0x00000000
     fa0:	0000000c 	.word	0x0000000c
     fa4:	ffffffff 	.word	0xffffffff
     fa8:	78040001 	.word	0x78040001
     fac:	001f0c1e 	.word	0x001f0c1e
     fb0:	0000002c 	.word	0x0000002c
     fb4:	00000fa0 	.word	0x00000fa0
     fb8:	03005074 	.word	0x03005074
     fbc:	00000000 	.word	0x00000000
     fc0:	000000ac 	.word	0x000000ac
     fc4:	00000000 	.word	0x00000000
     fc8:	93300e41 	.word	0x93300e41
     fcc:	42059406 	.word	0x42059406
     fd0:	0a56049e 	.word	0x0a56049e
     fd4:	0eded3d4 	.word	0x0eded3d4
     fd8:	000b4100 	.word	0x000b4100
     fdc:	00000000 	.word	0x00000000
     fe0:	0000002c 	.word	0x0000002c
     fe4:	00000fa0 	.word	0x00000fa0
     fe8:	03005120 	.word	0x03005120
     fec:	00000000 	.word	0x00000000
     ff0:	000000f8 	.word	0x000000f8
     ff4:	00000000 	.word	0x00000000
     ff8:	93300e41 	.word	0x93300e41
     ffc:	42059406 	.word	0x42059406
    1000:	039e0495 	.word	0x039e0495
    1004:	d3d40a4a 	.word	0xd3d40a4a
    1008:	000eded5 	.word	0x000eded5
    100c:	00000b41 	.word	0x00000b41
    1010:	0000002c 	.word	0x0000002c
    1014:	00000fa0 	.word	0x00000fa0
    1018:	03005218 	.word	0x03005218
    101c:	00000000 	.word	0x00000000
    1020:	00000160 	.word	0x00000160
    1024:	00000000 	.word	0x00000000
    1028:	93400e41 	.word	0x93400e41
    102c:	45079408 	.word	0x45079408
    1030:	059e0695 	.word	0x059e0695
    1034:	d3d40a4e 	.word	0xd3d40a4e
    1038:	000eded5 	.word	0x000eded5
    103c:	00000b41 	.word	0x00000b41
    1040:	0000000c 	.word	0x0000000c
    1044:	ffffffff 	.word	0xffffffff
    1048:	78040001 	.word	0x78040001
    104c:	001f0c1e 	.word	0x001f0c1e
    1050:	0000003c 	.word	0x0000003c
    1054:	00001040 	.word	0x00001040
    1058:	03005378 	.word	0x03005378
    105c:	00000000 	.word	0x00000000
    1060:	0000011c 	.word	0x0000011c
    1064:	00000000 	.word	0x00000000
    1068:	04800e41 	.word	0x04800e41
    106c:	04b00e41 	.word	0x04b00e41
    1070:	45944693 	.word	0x45944693
    1074:	96449544 	.word	0x96449544
    1078:	42974443 	.word	0x42974443
    107c:	0a5a419e 	.word	0x0a5a419e
    1080:	ded7d3d4 	.word	0xded7d3d4
    1084:	800ed6d5 	.word	0x800ed6d5
    1088:	000e4104 	.word	0x000e4104
    108c:	00000b41 	.word	0x00000b41
    1090:	0000003c 	.word	0x0000003c
    1094:	00001040 	.word	0x00001040
    1098:	03005494 	.word	0x03005494
    109c:	00000000 	.word	0x00000000
    10a0:	0000011c 	.word	0x0000011c
    10a4:	00000000 	.word	0x00000000
    10a8:	93300e41 	.word	0x93300e41
    10ac:	44059406 	.word	0x44059406
    10b0:	03960495 	.word	0x03960495
    10b4:	019e0297 	.word	0x019e0297
    10b8:	d3d40a45 	.word	0xd3d40a45
    10bc:	d6d5ded7 	.word	0xd6d5ded7
    10c0:	0b41000e 	.word	0x0b41000e
    10c4:	d3d40a78 	.word	0xd3d40a78
    10c8:	d6d5ded7 	.word	0xd6d5ded7
    10cc:	0b41000e 	.word	0x0b41000e
    10d0:	00000044 	.word	0x00000044
    10d4:	00001040 	.word	0x00001040
    10d8:	030055b0 	.word	0x030055b0
    10dc:	00000000 	.word	0x00000000
    10e0:	00000134 	.word	0x00000134
    10e4:	00000000 	.word	0x00000000
    10e8:	93400e41 	.word	0x93400e41
    10ec:	45079408 	.word	0x45079408
    10f0:	05960695 	.word	0x05960695
    10f4:	03980497 	.word	0x03980497
    10f8:	0a46029e 	.word	0x0a46029e
    10fc:	d7ded3d4 	.word	0xd7ded3d4
    1100:	0ed6d5d8 	.word	0x0ed6d5d8
    1104:	7c0b4100 	.word	0x7c0b4100
    1108:	ded3d40a 	.word	0xded3d40a
    110c:	d6d5d8d7 	.word	0xd6d5d8d7
    1110:	0b41000e 	.word	0x0b41000e
    1114:	00000000 	.word	0x00000000
    1118:	0000000c 	.word	0x0000000c
    111c:	ffffffff 	.word	0xffffffff
    1120:	78040001 	.word	0x78040001
    1124:	001f0c1e 	.word	0x001f0c1e
    1128:	0000004c 	.word	0x0000004c
    112c:	00001118 	.word	0x00001118
    1130:	030056e4 	.word	0x030056e4
    1134:	00000000 	.word	0x00000000
    1138:	00000108 	.word	0x00000108
    113c:	00000000 	.word	0x00000000
    1140:	93400e41 	.word	0x93400e41
    1144:	45079408 	.word	0x45079408
    1148:	05960695 	.word	0x05960695
    114c:	03980497 	.word	0x03980497
    1150:	0a64029e 	.word	0x0a64029e
    1154:	d7ded3d4 	.word	0xd7ded3d4
    1158:	0ed6d5d8 	.word	0x0ed6d5d8
    115c:	500b4100 	.word	0x500b4100
    1160:	d8d5d60a 	.word	0xd8d5d60a
    1164:	d4d3ded7 	.word	0xd4d3ded7
    1168:	0b41000e 	.word	0x0b41000e
    116c:	d8d5d645 	.word	0xd8d5d645
    1170:	d4d3ded7 	.word	0xd4d3ded7
    1174:	0000000e 	.word	0x0000000e
    1178:	00000034 	.word	0x00000034
    117c:	00001118 	.word	0x00001118
    1180:	030057ec 	.word	0x030057ec
    1184:	00000000 	.word	0x00000000
    1188:	000000a4 	.word	0x000000a4
    118c:	00000000 	.word	0x00000000
    1190:	93300e41 	.word	0x93300e41
    1194:	45059406 	.word	0x45059406
    1198:	0495029e 	.word	0x0495029e
    119c:	0a560396 	.word	0x0a560396
    11a0:	d5ded3d4 	.word	0xd5ded3d4
    11a4:	41000ed6 	.word	0x41000ed6
    11a8:	0000000b 	.word	0x0000000b
    11ac:	00000000 	.word	0x00000000
    11b0:	0000002c 	.word	0x0000002c
    11b4:	00001118 	.word	0x00001118
    11b8:	03005890 	.word	0x03005890
    11bc:	00000000 	.word	0x00000000
    11c0:	00000060 	.word	0x00000060
    11c4:	00000000 	.word	0x00000000
    11c8:	93200e41 	.word	0x93200e41
    11cc:	45039404 	.word	0x45039404
    11d0:	019e0295 	.word	0x019e0295
    11d4:	d5d3d451 	.word	0xd5d3d451
    11d8:	00000ede 	.word	0x00000ede
    11dc:	00000000 	.word	0x00000000
    11e0:	0000000c 	.word	0x0000000c
    11e4:	ffffffff 	.word	0xffffffff
    11e8:	78040001 	.word	0x78040001
    11ec:	001f0c1e 	.word	0x001f0c1e
    11f0:	0000002c 	.word	0x0000002c
    11f4:	000011e0 	.word	0x000011e0
    11f8:	030058f0 	.word	0x030058f0
    11fc:	00000000 	.word	0x00000000
    1200:	00000048 	.word	0x00000048
    1204:	00000000 	.word	0x00000000
    1208:	93100e43 	.word	0x93100e43
    120c:	45019e02 	.word	0x45019e02
    1210:	0ed3de0a 	.word	0x0ed3de0a
    1214:	480b4100 	.word	0x480b4100
    1218:	000eded3 	.word	0x000eded3
    121c:	00000000 	.word	0x00000000
    1220:	0000002c 	.word	0x0000002c
    1224:	000011e0 	.word	0x000011e0
    1228:	03005938 	.word	0x03005938
    122c:	00000000 	.word	0x00000000
    1230:	00000050 	.word	0x00000050
    1234:	00000000 	.word	0x00000000
    1238:	93100e43 	.word	0x93100e43
    123c:	47019e02 	.word	0x47019e02
    1240:	0ed3de0a 	.word	0x0ed3de0a
    1244:	480b4100 	.word	0x480b4100
    1248:	000eded3 	.word	0x000eded3
    124c:	00000000 	.word	0x00000000
    1250:	0000000c 	.word	0x0000000c
    1254:	ffffffff 	.word	0xffffffff
    1258:	78040001 	.word	0x78040001
    125c:	001f0c1e 	.word	0x001f0c1e
    1260:	00000014 	.word	0x00000014
    1264:	00001250 	.word	0x00001250
    1268:	03005988 	.word	0x03005988
    126c:	00000000 	.word	0x00000000
    1270:	00000018 	.word	0x00000018
    1274:	00000000 	.word	0x00000000
    1278:	0000000c 	.word	0x0000000c
    127c:	ffffffff 	.word	0xffffffff
    1280:	78040001 	.word	0x78040001
    1284:	001f0c1e 	.word	0x001f0c1e
    1288:	00000014 	.word	0x00000014
    128c:	00001278 	.word	0x00001278
    1290:	030059a0 	.word	0x030059a0
    1294:	00000000 	.word	0x00000000
    1298:	00000048 	.word	0x00000048
    129c:	00000000 	.word	0x00000000
    12a0:	00000014 	.word	0x00000014
    12a4:	00001278 	.word	0x00001278
    12a8:	030059e8 	.word	0x030059e8
    12ac:	00000000 	.word	0x00000000
    12b0:	00000014 	.word	0x00000014
    12b4:	00000000 	.word	0x00000000
    12b8:	00000014 	.word	0x00000014
    12bc:	00001278 	.word	0x00001278
    12c0:	030059fc 	.word	0x030059fc
    12c4:	00000000 	.word	0x00000000
    12c8:	0000003c 	.word	0x0000003c
    12cc:	00000000 	.word	0x00000000
    12d0:	00000014 	.word	0x00000014
    12d4:	00001278 	.word	0x00001278
    12d8:	03005a38 	.word	0x03005a38
    12dc:	00000000 	.word	0x00000000
    12e0:	0000002c 	.word	0x0000002c
    12e4:	00000000 	.word	0x00000000
    12e8:	00000024 	.word	0x00000024
    12ec:	00001278 	.word	0x00001278
    12f0:	03005a64 	.word	0x03005a64
    12f4:	00000000 	.word	0x00000000
    12f8:	00000050 	.word	0x00000050
    12fc:	00000000 	.word	0x00000000
    1300:	93100e41 	.word	0x93100e41
    1304:	4e019e02 	.word	0x4e019e02
    1308:	0ed3de0a 	.word	0x0ed3de0a
    130c:	000b4100 	.word	0x000b4100
    1310:	00000024 	.word	0x00000024
    1314:	00001278 	.word	0x00001278
    1318:	03005ab4 	.word	0x03005ab4
    131c:	00000000 	.word	0x00000000
    1320:	00000058 	.word	0x00000058
    1324:	00000000 	.word	0x00000000
    1328:	93100e41 	.word	0x93100e41
    132c:	4e019e02 	.word	0x4e019e02
    1330:	0ed3de0a 	.word	0x0ed3de0a
    1334:	000b4100 	.word	0x000b4100
    1338:	0000000c 	.word	0x0000000c
    133c:	ffffffff 	.word	0xffffffff
    1340:	78040001 	.word	0x78040001
    1344:	001f0c1e 	.word	0x001f0c1e
    1348:	00000024 	.word	0x00000024
    134c:	00001338 	.word	0x00001338
    1350:	03005b0c 	.word	0x03005b0c
    1354:	00000000 	.word	0x00000000
    1358:	00000074 	.word	0x00000074
    135c:	00000000 	.word	0x00000000
    1360:	9e100e43 	.word	0x9e100e43
    1364:	0ede5902 	.word	0x0ede5902
	...
    1370:	00000014 	.word	0x00000014
    1374:	00001338 	.word	0x00001338
    1378:	03005b80 	.word	0x03005b80
    137c:	00000000 	.word	0x00000000
    1380:	000000a4 	.word	0x000000a4
    1384:	00000000 	.word	0x00000000
    1388:	00000014 	.word	0x00000014
    138c:	00001338 	.word	0x00001338
    1390:	03005c24 	.word	0x03005c24
    1394:	00000000 	.word	0x00000000
    1398:	0000004c 	.word	0x0000004c
    139c:	00000000 	.word	0x00000000
    13a0:	00000014 	.word	0x00000014
    13a4:	00001338 	.word	0x00001338
    13a8:	03005c70 	.word	0x03005c70
    13ac:	00000000 	.word	0x00000000
    13b0:	0000008c 	.word	0x0000008c
    13b4:	00000000 	.word	0x00000000
    13b8:	00000014 	.word	0x00000014
    13bc:	00001338 	.word	0x00001338
    13c0:	03005cfc 	.word	0x03005cfc
    13c4:	00000000 	.word	0x00000000
    13c8:	0000001c 	.word	0x0000001c
    13cc:	00000000 	.word	0x00000000
    13d0:	00000014 	.word	0x00000014
    13d4:	00001338 	.word	0x00001338
    13d8:	03005d18 	.word	0x03005d18
    13dc:	00000000 	.word	0x00000000
    13e0:	00000014 	.word	0x00000014
    13e4:	00000000 	.word	0x00000000
    13e8:	00000014 	.word	0x00000014
    13ec:	00001338 	.word	0x00001338
    13f0:	03005d2c 	.word	0x03005d2c
    13f4:	00000000 	.word	0x00000000
    13f8:	00000024 	.word	0x00000024
    13fc:	00000000 	.word	0x00000000
    1400:	0000003c 	.word	0x0000003c
    1404:	00001338 	.word	0x00001338
    1408:	03005d50 	.word	0x03005d50
    140c:	00000000 	.word	0x00000000
    1410:	000000f4 	.word	0x000000f4
    1414:	00000000 	.word	0x00000000
    1418:	93400e41 	.word	0x93400e41
    141c:	44079408 	.word	0x44079408
    1420:	05960695 	.word	0x05960695
    1424:	039e0497 	.word	0x039e0497
    1428:	d3d40a68 	.word	0xd3d40a68
    142c:	d6d5ded7 	.word	0xd6d5ded7
    1430:	0b41000e 	.word	0x0b41000e
    1434:	ded5d64e 	.word	0xded5d64e
    1438:	0ed4d3d7 	.word	0x0ed4d3d7
    143c:	00000000 	.word	0x00000000
    1440:	0000002c 	.word	0x0000002c
    1444:	00001338 	.word	0x00001338
    1448:	03005e44 	.word	0x03005e44
    144c:	00000000 	.word	0x00000000
    1450:	0000008c 	.word	0x0000008c
    1454:	00000000 	.word	0x00000000
    1458:	93300e41 	.word	0x93300e41
    145c:	46059406 	.word	0x46059406
    1460:	039e0495 	.word	0x039e0495
    1464:	d5d3d45b 	.word	0xd5d3d45b
    1468:	00000ede 	.word	0x00000ede
    146c:	00000000 	.word	0x00000000
    1470:	0000003c 	.word	0x0000003c
    1474:	00001338 	.word	0x00001338
    1478:	03005ed0 	.word	0x03005ed0
    147c:	00000000 	.word	0x00000000
    1480:	000000e4 	.word	0x000000e4
    1484:	00000000 	.word	0x00000000
    1488:	93400e41 	.word	0x93400e41
    148c:	44079408 	.word	0x44079408
    1490:	05960695 	.word	0x05960695
    1494:	0a64049e 	.word	0x0a64049e
    1498:	d5ded3d4 	.word	0xd5ded3d4
    149c:	41000ed6 	.word	0x41000ed6
    14a0:	d5d64e0b 	.word	0xd5d64e0b
    14a4:	0ed4d3de 	.word	0x0ed4d3de
	...
    14b0:	0000003c 	.word	0x0000003c
    14b4:	00001338 	.word	0x00001338
    14b8:	03005fb4 	.word	0x03005fb4
    14bc:	00000000 	.word	0x00000000
    14c0:	000000ec 	.word	0x000000ec
    14c4:	00000000 	.word	0x00000000
    14c8:	93400e41 	.word	0x93400e41
    14cc:	44079408 	.word	0x44079408
    14d0:	05960695 	.word	0x05960695
    14d4:	0a66049e 	.word	0x0a66049e
    14d8:	d5ded3d4 	.word	0xd5ded3d4
    14dc:	41000ed6 	.word	0x41000ed6
    14e0:	d5d64e0b 	.word	0xd5d64e0b
    14e4:	0ed4d3de 	.word	0x0ed4d3de
	...
    14f0:	00000014 	.word	0x00000014
    14f4:	00001338 	.word	0x00001338
    14f8:	030060a0 	.word	0x030060a0
    14fc:	00000000 	.word	0x00000000
    1500:	00000030 	.word	0x00000030
    1504:	00000000 	.word	0x00000000
    1508:	00000014 	.word	0x00000014
    150c:	00001338 	.word	0x00001338
    1510:	030060d0 	.word	0x030060d0
    1514:	00000000 	.word	0x00000000
    1518:	00000068 	.word	0x00000068
    151c:	00000000 	.word	0x00000000
    1520:	00000014 	.word	0x00000014
    1524:	00001338 	.word	0x00001338
    1528:	03006138 	.word	0x03006138
    152c:	00000000 	.word	0x00000000
    1530:	00000060 	.word	0x00000060
    1534:	00000000 	.word	0x00000000
    1538:	00000014 	.word	0x00000014
    153c:	00001338 	.word	0x00001338
    1540:	03006198 	.word	0x03006198
    1544:	00000000 	.word	0x00000000
    1548:	00000008 	.word	0x00000008
    154c:	00000000 	.word	0x00000000
    1550:	00000024 	.word	0x00000024
    1554:	00001338 	.word	0x00001338
    1558:	030061a0 	.word	0x030061a0
    155c:	00000000 	.word	0x00000000
    1560:	00000034 	.word	0x00000034
    1564:	00000000 	.word	0x00000000
    1568:	93100e41 	.word	0x93100e41
    156c:	49019e02 	.word	0x49019e02
    1570:	000ed3de 	.word	0x000ed3de
    1574:	00000000 	.word	0x00000000
    1578:	0000000c 	.word	0x0000000c
    157c:	ffffffff 	.word	0xffffffff
    1580:	78040001 	.word	0x78040001
    1584:	001f0c1e 	.word	0x001f0c1e
    1588:	00000024 	.word	0x00000024
    158c:	00001578 	.word	0x00001578
    1590:	030061d4 	.word	0x030061d4
    1594:	00000000 	.word	0x00000000
    1598:	0000009c 	.word	0x0000009c
    159c:	00000000 	.word	0x00000000
    15a0:	5b100e43 	.word	0x5b100e43
    15a4:	41000e0a 	.word	0x41000e0a
    15a8:	000e470b 	.word	0x000e470b
    15ac:	00000000 	.word	0x00000000
    15b0:	00000024 	.word	0x00000024
    15b4:	00001578 	.word	0x00001578
    15b8:	03006270 	.word	0x03006270
    15bc:	00000000 	.word	0x00000000
    15c0:	0000009c 	.word	0x0000009c
    15c4:	00000000 	.word	0x00000000
    15c8:	5b100e43 	.word	0x5b100e43
    15cc:	41000e0a 	.word	0x41000e0a
    15d0:	000e470b 	.word	0x000e470b
    15d4:	00000000 	.word	0x00000000
    15d8:	00000014 	.word	0x00000014
    15dc:	00001578 	.word	0x00001578
    15e0:	0300630c 	.word	0x0300630c
    15e4:	00000000 	.word	0x00000000
    15e8:	00000028 	.word	0x00000028
    15ec:	00000000 	.word	0x00000000
    15f0:	0000000c 	.word	0x0000000c
    15f4:	ffffffff 	.word	0xffffffff
    15f8:	78040001 	.word	0x78040001
    15fc:	001f0c1e 	.word	0x001f0c1e
    1600:	0000003c 	.word	0x0000003c
    1604:	000015f0 	.word	0x000015f0
    1608:	03006334 	.word	0x03006334
    160c:	00000000 	.word	0x00000000
    1610:	000000a8 	.word	0x000000a8
    1614:	00000000 	.word	0x00000000
    1618:	93200e41 	.word	0x93200e41
    161c:	47039404 	.word	0x47039404
    1620:	0a53029e 	.word	0x0a53029e
    1624:	0eded3d4 	.word	0x0eded3d4
    1628:	460b4100 	.word	0x460b4100
    162c:	d4d3de0a 	.word	0xd4d3de0a
    1630:	0b41000e 	.word	0x0b41000e
    1634:	d4d3de46 	.word	0xd4d3de46
    1638:	0000000e 	.word	0x0000000e
    163c:	00000000 	.word	0x00000000
    1640:	00000014 	.word	0x00000014
    1644:	000015f0 	.word	0x000015f0
    1648:	030063dc 	.word	0x030063dc
    164c:	00000000 	.word	0x00000000
    1650:	00000018 	.word	0x00000018
    1654:	00000000 	.word	0x00000000
    1658:	00000014 	.word	0x00000014
    165c:	000015f0 	.word	0x000015f0
    1660:	030063f4 	.word	0x030063f4
    1664:	00000000 	.word	0x00000000
    1668:	00000074 	.word	0x00000074
    166c:	00000000 	.word	0x00000000
    1670:	0000001c 	.word	0x0000001c
    1674:	000015f0 	.word	0x000015f0
    1678:	03006468 	.word	0x03006468
    167c:	00000000 	.word	0x00000000
    1680:	0000002c 	.word	0x0000002c
    1684:	00000000 	.word	0x00000000
    1688:	49100e41 	.word	0x49100e41
    168c:	0000000e 	.word	0x0000000e
    1690:	00000014 	.word	0x00000014
    1694:	000015f0 	.word	0x000015f0
    1698:	03006494 	.word	0x03006494
    169c:	00000000 	.word	0x00000000
    16a0:	00000018 	.word	0x00000018
    16a4:	00000000 	.word	0x00000000
    16a8:	0000001c 	.word	0x0000001c
    16ac:	000015f0 	.word	0x000015f0
    16b0:	030064ac 	.word	0x030064ac
    16b4:	00000000 	.word	0x00000000
    16b8:	00000040 	.word	0x00000040
    16bc:	00000000 	.word	0x00000000
    16c0:	4d100e41 	.word	0x4d100e41
    16c4:	0000000e 	.word	0x0000000e
    16c8:	00000024 	.word	0x00000024
    16cc:	000015f0 	.word	0x000015f0
    16d0:	030064ec 	.word	0x030064ec
    16d4:	00000000 	.word	0x00000000
    16d8:	0000008c 	.word	0x0000008c
    16dc:	00000000 	.word	0x00000000
    16e0:	93200e41 	.word	0x93200e41
    16e4:	43039404 	.word	0x43039404
    16e8:	d45e029e 	.word	0xd45e029e
    16ec:	000eded3 	.word	0x000eded3
    16f0:	00000044 	.word	0x00000044
    16f4:	000015f0 	.word	0x000015f0
    16f8:	03006578 	.word	0x03006578
    16fc:	00000000 	.word	0x00000000
    1700:	00000548 	.word	0x00000548
    1704:	00000000 	.word	0x00000000
    1708:	01b00e41 	.word	0x01b00e41
    170c:	15941693 	.word	0x15941693
    1710:	96149555 	.word	0x96149555
    1714:	98129713 	.word	0x98129713
    1718:	420e9e11 	.word	0x420e9e11
    171c:	0f9a1099 	.word	0x0f9a1099
    1720:	0a011003 	.word	0x0a011003
    1724:	d9ded3d4 	.word	0xd9ded3d4
    1728:	d5d8d7da 	.word	0xd5d8d7da
    172c:	41000ed6 	.word	0x41000ed6
    1730:	0000000b 	.word	0x0000000b
    1734:	00000000 	.word	0x00000000
    1738:	00000044 	.word	0x00000044
    173c:	000015f0 	.word	0x000015f0
    1740:	03006ac0 	.word	0x03006ac0
    1744:	00000000 	.word	0x00000000
    1748:	00000548 	.word	0x00000548
    174c:	00000000 	.word	0x00000000
    1750:	01b00e41 	.word	0x01b00e41
    1754:	15941693 	.word	0x15941693
    1758:	96149555 	.word	0x96149555
    175c:	98129713 	.word	0x98129713
    1760:	420e9e11 	.word	0x420e9e11
    1764:	0f9a1099 	.word	0x0f9a1099
    1768:	0a011003 	.word	0x0a011003
    176c:	d9ded3d4 	.word	0xd9ded3d4
    1770:	d5d8d7da 	.word	0xd5d8d7da
    1774:	41000ed6 	.word	0x41000ed6
    1778:	0000000b 	.word	0x0000000b
    177c:	00000000 	.word	0x00000000
    1780:	00000014 	.word	0x00000014
    1784:	000015f0 	.word	0x000015f0
    1788:	03007008 	.word	0x03007008
    178c:	00000000 	.word	0x00000000
    1790:	000000b0 	.word	0x000000b0
    1794:	00000000 	.word	0x00000000
    1798:	00000014 	.word	0x00000014
    179c:	000015f0 	.word	0x000015f0
    17a0:	030070b8 	.word	0x030070b8
    17a4:	00000000 	.word	0x00000000
    17a8:	00000084 	.word	0x00000084
    17ac:	00000000 	.word	0x00000000
    17b0:	00000014 	.word	0x00000014
    17b4:	000015f0 	.word	0x000015f0
    17b8:	0300713c 	.word	0x0300713c
    17bc:	00000000 	.word	0x00000000
    17c0:	00000090 	.word	0x00000090
    17c4:	00000000 	.word	0x00000000
    17c8:	00000014 	.word	0x00000014
    17cc:	000015f0 	.word	0x000015f0
    17d0:	030071cc 	.word	0x030071cc
    17d4:	00000000 	.word	0x00000000
    17d8:	00000030 	.word	0x00000030
    17dc:	00000000 	.word	0x00000000
    17e0:	00000014 	.word	0x00000014
    17e4:	000015f0 	.word	0x000015f0
    17e8:	030071fc 	.word	0x030071fc
    17ec:	00000000 	.word	0x00000000
    17f0:	00000058 	.word	0x00000058
    17f4:	00000000 	.word	0x00000000
    17f8:	00000014 	.word	0x00000014
    17fc:	000015f0 	.word	0x000015f0
    1800:	03007254 	.word	0x03007254
    1804:	00000000 	.word	0x00000000
    1808:	00000038 	.word	0x00000038
    180c:	00000000 	.word	0x00000000
    1810:	00000014 	.word	0x00000014
    1814:	000015f0 	.word	0x000015f0
    1818:	0300728c 	.word	0x0300728c
    181c:	00000000 	.word	0x00000000
    1820:	00000008 	.word	0x00000008
    1824:	00000000 	.word	0x00000000
    1828:	00000014 	.word	0x00000014
    182c:	000015f0 	.word	0x000015f0
    1830:	03007294 	.word	0x03007294
    1834:	00000000 	.word	0x00000000
    1838:	00000038 	.word	0x00000038
    183c:	00000000 	.word	0x00000000
    1840:	0000001c 	.word	0x0000001c
    1844:	000015f0 	.word	0x000015f0
    1848:	030072cc 	.word	0x030072cc
    184c:	00000000 	.word	0x00000000
    1850:	0000007c 	.word	0x0000007c
    1854:	00000000 	.word	0x00000000
    1858:	9e100e41 	.word	0x9e100e41
    185c:	00000002 	.word	0x00000002
    1860:	00000034 	.word	0x00000034
    1864:	000015f0 	.word	0x000015f0
    1868:	03007348 	.word	0x03007348
    186c:	00000000 	.word	0x00000000
    1870:	000000cc 	.word	0x000000cc
    1874:	00000000 	.word	0x00000000
    1878:	93400e41 	.word	0x93400e41
    187c:	43079408 	.word	0x43079408
    1880:	05960695 	.word	0x05960695
    1884:	0a6d049e 	.word	0x0a6d049e
    1888:	d5ded3d4 	.word	0xd5ded3d4
    188c:	41000ed6 	.word	0x41000ed6
    1890:	0000000b 	.word	0x0000000b
    1894:	00000000 	.word	0x00000000
    1898:	00000034 	.word	0x00000034
    189c:	000015f0 	.word	0x000015f0
    18a0:	03007414 	.word	0x03007414
    18a4:	00000000 	.word	0x00000000
    18a8:	00000254 	.word	0x00000254
    18ac:	00000000 	.word	0x00000000
    18b0:	93500e41 	.word	0x93500e41
    18b4:	4409940a 	.word	0x4409940a
    18b8:	07960895 	.word	0x07960895
    18bc:	05980697 	.word	0x05980697
    18c0:	0a7f049e 	.word	0x0a7f049e
    18c4:	d7ded3d4 	.word	0xd7ded3d4
    18c8:	0ed6d5d8 	.word	0x0ed6d5d8
    18cc:	000b4100 	.word	0x000b4100
    18d0:	00000014 	.word	0x00000014
    18d4:	000015f0 	.word	0x000015f0
    18d8:	03007668 	.word	0x03007668
    18dc:	00000000 	.word	0x00000000
    18e0:	00000034 	.word	0x00000034
    18e4:	00000000 	.word	0x00000000
    18e8:	00000044 	.word	0x00000044
    18ec:	000015f0 	.word	0x000015f0
    18f0:	0300769c 	.word	0x0300769c
    18f4:	00000000 	.word	0x00000000
    18f8:	00000124 	.word	0x00000124
    18fc:	00000000 	.word	0x00000000
    1900:	93400e41 	.word	0x93400e41
    1904:	43079408 	.word	0x43079408
    1908:	05960695 	.word	0x05960695
    190c:	03980497 	.word	0x03980497
    1910:	019e0299 	.word	0x019e0299
    1914:	d3d40a7a 	.word	0xd3d40a7a
    1918:	d8d7ded9 	.word	0xd8d7ded9
    191c:	000ed6d5 	.word	0x000ed6d5
    1920:	0a440b41 	.word	0x0a440b41
    1924:	d7d8d5d6 	.word	0xd7d8d5d6
    1928:	d4d3d9de 	.word	0xd4d3d9de
    192c:	0b43000e 	.word	0x0b43000e
    1930:	00000024 	.word	0x00000024
    1934:	000015f0 	.word	0x000015f0
    1938:	030077c0 	.word	0x030077c0
    193c:	00000000 	.word	0x00000000
    1940:	000000a0 	.word	0x000000a0
    1944:	00000000 	.word	0x00000000
    1948:	9e200e41 	.word	0x9e200e41
    194c:	0ede6604 	.word	0x0ede6604
	...
    1958:	0000003c 	.word	0x0000003c
    195c:	000015f0 	.word	0x000015f0
    1960:	03007860 	.word	0x03007860
    1964:	00000000 	.word	0x00000000
    1968:	00000140 	.word	0x00000140
    196c:	00000000 	.word	0x00000000
    1970:	93200e41 	.word	0x93200e41
    1974:	43039404 	.word	0x43039404
    1978:	019e0295 	.word	0x019e0295
    197c:	d3d40a56 	.word	0xd3d40a56
    1980:	000eded5 	.word	0x000eded5
    1984:	0a4a0b41 	.word	0x0a4a0b41
    1988:	d4d3d5de 	.word	0xd4d3d5de
    198c:	0b41000e 	.word	0x0b41000e
    1990:	d3d5de69 	.word	0xd3d5de69
    1994:	00000ed4 	.word	0x00000ed4
    1998:	0000001c 	.word	0x0000001c
    199c:	000015f0 	.word	0x000015f0
    19a0:	030079a0 	.word	0x030079a0
    19a4:	00000000 	.word	0x00000000
    19a8:	000000a0 	.word	0x000000a0
    19ac:	00000000 	.word	0x00000000
    19b0:	66100e41 	.word	0x66100e41
    19b4:	0000000e 	.word	0x0000000e
    19b8:	0000002c 	.word	0x0000002c
    19bc:	000015f0 	.word	0x000015f0
    19c0:	03007a40 	.word	0x03007a40
    19c4:	00000000 	.word	0x00000000
    19c8:	0000003c 	.word	0x0000003c
    19cc:	00000000 	.word	0x00000000
    19d0:	93200e41 	.word	0x93200e41
    19d4:	43039404 	.word	0x43039404
    19d8:	0a49029e 	.word	0x0a49029e
    19dc:	0eded3d4 	.word	0x0eded3d4
    19e0:	000b4100 	.word	0x000b4100
    19e4:	00000000 	.word	0x00000000
    19e8:	0000002c 	.word	0x0000002c
    19ec:	000015f0 	.word	0x000015f0
    19f0:	03007a7c 	.word	0x03007a7c
    19f4:	00000000 	.word	0x00000000
    19f8:	00000060 	.word	0x00000060
    19fc:	00000000 	.word	0x00000000
    1a00:	93200e41 	.word	0x93200e41
    1a04:	43039404 	.word	0x43039404
    1a08:	0a52029e 	.word	0x0a52029e
    1a0c:	0eded3d4 	.word	0x0eded3d4
    1a10:	000b4100 	.word	0x000b4100
    1a14:	00000000 	.word	0x00000000
    1a18:	0000002c 	.word	0x0000002c
    1a1c:	000015f0 	.word	0x000015f0
    1a20:	03007adc 	.word	0x03007adc
    1a24:	00000000 	.word	0x00000000
    1a28:	00000060 	.word	0x00000060
    1a2c:	00000000 	.word	0x00000000
    1a30:	93200e41 	.word	0x93200e41
    1a34:	43039404 	.word	0x43039404
    1a38:	0a52029e 	.word	0x0a52029e
    1a3c:	0eded3d4 	.word	0x0eded3d4
    1a40:	000b4100 	.word	0x000b4100
    1a44:	00000000 	.word	0x00000000
    1a48:	00000014 	.word	0x00000014
    1a4c:	000015f0 	.word	0x000015f0
    1a50:	03007b3c 	.word	0x03007b3c
    1a54:	00000000 	.word	0x00000000
    1a58:	00000028 	.word	0x00000028
    1a5c:	00000000 	.word	0x00000000
    1a60:	0000000c 	.word	0x0000000c
    1a64:	ffffffff 	.word	0xffffffff
    1a68:	78040001 	.word	0x78040001
    1a6c:	001f0c1e 	.word	0x001f0c1e
    1a70:	0000004c 	.word	0x0000004c
    1a74:	00001a60 	.word	0x00001a60
    1a78:	03007b64 	.word	0x03007b64
    1a7c:	00000000 	.word	0x00000000
    1a80:	00000228 	.word	0x00000228
    1a84:	00000000 	.word	0x00000000
    1a88:	93600e41 	.word	0x93600e41
    1a8c:	430b940c 	.word	0x430b940c
    1a90:	09960a95 	.word	0x09960a95
    1a94:	97049e48 	.word	0x97049e48
    1a98:	99079808 	.word	0x99079808
    1a9c:	6c059a06 	.word	0x6c059a06
    1aa0:	ded3d40a 	.word	0xded3d40a
    1aa4:	d8d7dad9 	.word	0xd8d7dad9
    1aa8:	000ed6d5 	.word	0x000ed6d5
    1aac:	0a460b41 	.word	0x0a460b41
    1ab0:	d7d8d5d6 	.word	0xd7d8d5d6
    1ab4:	d3ded9da 	.word	0xd3ded9da
    1ab8:	41000ed4 	.word	0x41000ed4
    1abc:	0000000b 	.word	0x0000000b

Disassembly of section .debug_ranges:

0000000000000000 <.debug_ranges>:
   0:	00000020 	.inst	0x00000020 ; undefined
   4:	00000000 	.inst	0x00000000 ; undefined
   8:	00000024 	.inst	0x00000024 ; undefined
   c:	00000000 	.inst	0x00000000 ; undefined
  10:	00000028 	.inst	0x00000028 ; undefined
  14:	00000000 	.inst	0x00000000 ; undefined
  18:	00000044 	.inst	0x00000044 ; undefined
  1c:	00000000 	.inst	0x00000000 ; undefined
  20:	00000050 	.inst	0x00000050 ; undefined
  24:	00000000 	.inst	0x00000000 ; undefined
  28:	0000005c 	.inst	0x0000005c ; undefined
	...
  40:	00000044 	.inst	0x00000044 ; undefined
  44:	00000000 	.inst	0x00000000 ; undefined
  48:	00000050 	.inst	0x00000050 ; undefined
  4c:	00000000 	.inst	0x00000000 ; undefined
  50:	0000005c 	.inst	0x0000005c ; undefined
  54:	00000000 	.inst	0x00000000 ; undefined
  58:	00000098 	.inst	0x00000098 ; undefined
  5c:	00000000 	.inst	0x00000000 ; undefined
  60:	00000108 	.inst	0x00000108 ; undefined
  64:	00000000 	.inst	0x00000000 ; undefined
  68:	00000110 	.inst	0x00000110 ; undefined
	...
  80:	00000044 	.inst	0x00000044 ; undefined
  84:	00000000 	.inst	0x00000000 ; undefined
  88:	0000004c 	.inst	0x0000004c ; undefined
  8c:	00000000 	.inst	0x00000000 ; undefined
  90:	00000070 	.inst	0x00000070 ; undefined
  94:	00000000 	.inst	0x00000000 ; undefined
  98:	000000c4 	.inst	0x000000c4 ; undefined
	...
  b0:	00000018 	.inst	0x00000018 ; undefined
  b4:	00000000 	.inst	0x00000000 ; undefined
  b8:	0000001c 	.inst	0x0000001c ; undefined
  bc:	00000000 	.inst	0x00000000 ; undefined
  c0:	00000020 	.inst	0x00000020 ; undefined
  c4:	00000000 	.inst	0x00000000 ; undefined
  c8:	00000030 	.inst	0x00000030 ; undefined
  cc:	00000000 	.inst	0x00000000 ; undefined
  d0:	00000034 	.inst	0x00000034 ; undefined
  d4:	00000000 	.inst	0x00000000 ; undefined
  d8:	0000004c 	.inst	0x0000004c ; undefined
  dc:	00000000 	.inst	0x00000000 ; undefined
  e0:	00000058 	.inst	0x00000058 ; undefined
  e4:	00000000 	.inst	0x00000000 ; undefined
  e8:	0000005c 	.inst	0x0000005c ; undefined
	...
 100:	00000310 	.inst	0x00000310 ; undefined
 104:	00000000 	.inst	0x00000000 ; undefined
 108:	000003b4 	.inst	0x000003b4 ; undefined
 10c:	00000000 	.inst	0x00000000 ; undefined
 110:	000004e0 	.inst	0x000004e0 ; undefined
 114:	00000000 	.inst	0x00000000 ; undefined
 118:	000004e4 	.inst	0x000004e4 ; undefined
 11c:	00000000 	.inst	0x00000000 ; undefined
 120:	0000050c 	.inst	0x0000050c ; undefined
 124:	00000000 	.inst	0x00000000 ; undefined
 128:	00000518 	.inst	0x00000518 ; undefined
 12c:	00000000 	.inst	0x00000000 ; undefined
 130:	00000768 	.inst	0x00000768 ; undefined
 134:	00000000 	.inst	0x00000000 ; undefined
 138:	00000778 	.inst	0x00000778 ; undefined
 13c:	00000000 	.inst	0x00000000 ; undefined
 140:	00000868 	.inst	0x00000868 ; undefined
 144:	00000000 	.inst	0x00000000 ; undefined
 148:	00000874 	.inst	0x00000874 ; undefined
	...
 160:	00000418 	.inst	0x00000418 ; undefined
 164:	00000000 	.inst	0x00000000 ; undefined
 168:	000004bc 	.inst	0x000004bc ; undefined
 16c:	00000000 	.inst	0x00000000 ; undefined
 170:	00000674 	.inst	0x00000674 ; undefined
 174:	00000000 	.inst	0x00000000 ; undefined
 178:	0000067c 	.inst	0x0000067c ; undefined
 17c:	00000000 	.inst	0x00000000 ; undefined
 180:	000007f4 	.inst	0x000007f4 ; undefined
 184:	00000000 	.inst	0x00000000 ; undefined
 188:	000007fc 	.inst	0x000007fc ; undefined
	...
 1a0:	000009e8 	.inst	0x000009e8 ; undefined
 1a4:	00000000 	.inst	0x00000000 ; undefined
 1a8:	000009ec 	.inst	0x000009ec ; undefined
 1ac:	00000000 	.inst	0x00000000 ; undefined
 1b0:	000009f0 	.inst	0x000009f0 ; undefined
 1b4:	00000000 	.inst	0x00000000 ; undefined
 1b8:	000009f4 	.inst	0x000009f4 ; undefined
 1bc:	00000000 	.inst	0x00000000 ; undefined
 1c0:	00000a10 	.inst	0x00000a10 ; undefined
 1c4:	00000000 	.inst	0x00000000 ; undefined
 1c8:	00000a14 	.inst	0x00000a14 ; undefined
 1cc:	00000000 	.inst	0x00000000 ; undefined
 1d0:	00000a1c 	.inst	0x00000a1c ; undefined
 1d4:	00000000 	.inst	0x00000000 ; undefined
 1d8:	00000a20 	.inst	0x00000a20 ; undefined
 1dc:	00000000 	.inst	0x00000000 ; undefined
 1e0:	00000a54 	.inst	0x00000a54 ; undefined
 1e4:	00000000 	.inst	0x00000000 ; undefined
 1e8:	00000a6c 	.inst	0x00000a6c ; undefined
	...
 200:	00000b70 	.inst	0x00000b70 ; undefined
 204:	00000000 	.inst	0x00000000 ; undefined
 208:	00000b74 	.inst	0x00000b74 ; undefined
 20c:	00000000 	.inst	0x00000000 ; undefined
 210:	00000b78 	.inst	0x00000b78 ; undefined
 214:	00000000 	.inst	0x00000000 ; undefined
 218:	00000b80 	.inst	0x00000b80 ; undefined
 21c:	00000000 	.inst	0x00000000 ; undefined
 220:	00000bb0 	.inst	0x00000bb0 ; undefined
 224:	00000000 	.inst	0x00000000 ; undefined
 228:	00000bbc 	.inst	0x00000bbc ; undefined
	...
 240:	00000078 	.inst	0x00000078 ; undefined
 244:	00000000 	.inst	0x00000000 ; undefined
 248:	000000b4 	.inst	0x000000b4 ; undefined
 24c:	00000000 	.inst	0x00000000 ; undefined
 250:	000000b8 	.inst	0x000000b8 ; undefined
 254:	00000000 	.inst	0x00000000 ; undefined
 258:	000000c0 	.inst	0x000000c0 ; undefined
 25c:	00000000 	.inst	0x00000000 ; undefined
 260:	000000c8 	.inst	0x000000c8 ; undefined
 264:	00000000 	.inst	0x00000000 ; undefined
 268:	000000cc 	.inst	0x000000cc ; undefined
	...
 280:	0000048c 	.inst	0x0000048c ; undefined
 284:	00000000 	.inst	0x00000000 ; undefined
 288:	00000494 	.inst	0x00000494 ; undefined
 28c:	00000000 	.inst	0x00000000 ; undefined
 290:	0000049c 	.inst	0x0000049c ; undefined
 294:	00000000 	.inst	0x00000000 ; undefined
 298:	000004a0 	.inst	0x000004a0 ; undefined
 29c:	00000000 	.inst	0x00000000 ; undefined
 2a0:	000004b0 	.inst	0x000004b0 ; undefined
 2a4:	00000000 	.inst	0x00000000 ; undefined
 2a8:	000004c4 	.inst	0x000004c4 ; undefined
	...
 2c0:	00000634 	.inst	0x00000634 ; undefined
 2c4:	00000000 	.inst	0x00000000 ; undefined
 2c8:	00000644 	.inst	0x00000644 ; undefined
 2cc:	00000000 	.inst	0x00000000 ; undefined
 2d0:	0000064c 	.inst	0x0000064c ; undefined
 2d4:	00000000 	.inst	0x00000000 ; undefined
 2d8:	000006b4 	.inst	0x000006b4 ; undefined
 2dc:	00000000 	.inst	0x00000000 ; undefined
 2e0:	000006c8 	.inst	0x000006c8 ; undefined
 2e4:	00000000 	.inst	0x00000000 ; undefined
 2e8:	00000748 	.inst	0x00000748 ; undefined
	...
 300:	00000b94 	.inst	0x00000b94 ; undefined
 304:	00000000 	.inst	0x00000000 ; undefined
 308:	00000b9c 	.inst	0x00000b9c ; undefined
 30c:	00000000 	.inst	0x00000000 ; undefined
 310:	00000bac 	.inst	0x00000bac ; undefined
 314:	00000000 	.inst	0x00000000 ; undefined
 318:	00000cac 	.inst	0x00000cac ; undefined
 31c:	00000000 	.inst	0x00000000 ; undefined
 320:	00000cc4 	.inst	0x00000cc4 ; undefined
 324:	00000000 	.inst	0x00000000 ; undefined
 328:	00000cf8 	.inst	0x00000cf8 ; undefined
 32c:	00000000 	.inst	0x00000000 ; undefined
 330:	00000dfc 	.inst	0x00000dfc ; undefined
 334:	00000000 	.inst	0x00000000 ; undefined
 338:	00000e04 	.inst	0x00000e04 ; undefined
	...
 350:	00000bbc 	.inst	0x00000bbc ; undefined
 354:	00000000 	.inst	0x00000000 ; undefined
 358:	00000bd4 	.inst	0x00000bd4 ; undefined
 35c:	00000000 	.inst	0x00000000 ; undefined
 360:	00000c04 	.inst	0x00000c04 ; undefined
 364:	00000000 	.inst	0x00000000 ; undefined
 368:	00000c0c 	.inst	0x00000c0c ; undefined
 36c:	00000000 	.inst	0x00000000 ; undefined
 370:	00000c10 	.inst	0x00000c10 ; undefined
 374:	00000000 	.inst	0x00000000 ; undefined
 378:	00000c18 	.inst	0x00000c18 ; undefined
 37c:	00000000 	.inst	0x00000000 ; undefined
 380:	00000c1c 	.inst	0x00000c1c ; undefined
 384:	00000000 	.inst	0x00000000 ; undefined
 388:	00000c24 	.inst	0x00000c24 ; undefined
 38c:	00000000 	.inst	0x00000000 ; undefined
 390:	00000c28 	.inst	0x00000c28 ; undefined
 394:	00000000 	.inst	0x00000000 ; undefined
 398:	00000c34 	.inst	0x00000c34 ; undefined
 39c:	00000000 	.inst	0x00000000 ; undefined
 3a0:	00000c4c 	.inst	0x00000c4c ; undefined
 3a4:	00000000 	.inst	0x00000000 ; undefined
 3a8:	00000c74 	.inst	0x00000c74 ; undefined
	...
 3c0:	00000c04 	.inst	0x00000c04 ; undefined
 3c4:	00000000 	.inst	0x00000000 ; undefined
 3c8:	00000c0c 	.inst	0x00000c0c ; undefined
 3cc:	00000000 	.inst	0x00000000 ; undefined
 3d0:	00000c10 	.inst	0x00000c10 ; undefined
 3d4:	00000000 	.inst	0x00000000 ; undefined
 3d8:	00000c18 	.inst	0x00000c18 ; undefined
 3dc:	00000000 	.inst	0x00000000 ; undefined
 3e0:	00000c1c 	.inst	0x00000c1c ; undefined
 3e4:	00000000 	.inst	0x00000000 ; undefined
 3e8:	00000c24 	.inst	0x00000c24 ; undefined
 3ec:	00000000 	.inst	0x00000000 ; undefined
 3f0:	00000c30 	.inst	0x00000c30 ; undefined
 3f4:	00000000 	.inst	0x00000000 ; undefined
 3f8:	00000c34 	.inst	0x00000c34 ; undefined
 3fc:	00000000 	.inst	0x00000000 ; undefined
 400:	00000c68 	.inst	0x00000c68 ; undefined
 404:	00000000 	.inst	0x00000000 ; undefined
 408:	00000c74 	.inst	0x00000c74 ; undefined
	...
 420:	00000c0c 	.inst	0x00000c0c ; undefined
 424:	00000000 	.inst	0x00000000 ; undefined
 428:	00000c10 	.inst	0x00000c10 ; undefined
 42c:	00000000 	.inst	0x00000000 ; undefined
 430:	00000c18 	.inst	0x00000c18 ; undefined
 434:	00000000 	.inst	0x00000000 ; undefined
 438:	00000c1c 	.inst	0x00000c1c ; undefined
	...
 450:	00000d18 	.inst	0x00000d18 ; undefined
 454:	00000000 	.inst	0x00000000 ; undefined
 458:	00000d20 	.inst	0x00000d20 ; undefined
 45c:	00000000 	.inst	0x00000000 ; undefined
 460:	00000d28 	.inst	0x00000d28 ; undefined
 464:	00000000 	.inst	0x00000000 ; undefined
 468:	00000d7c 	.inst	0x00000d7c ; undefined
	...
 480:	00000d4c 	.inst	0x00000d4c ; undefined
 484:	00000000 	.inst	0x00000000 ; undefined
 488:	00000d54 	.inst	0x00000d54 ; undefined
 48c:	00000000 	.inst	0x00000000 ; undefined
 490:	00000d58 	.inst	0x00000d58 ; undefined
 494:	00000000 	.inst	0x00000000 ; undefined
 498:	00000d60 	.inst	0x00000d60 ; undefined
 49c:	00000000 	.inst	0x00000000 ; undefined
 4a0:	00000d6c 	.inst	0x00000d6c ; undefined
 4a4:	00000000 	.inst	0x00000000 ; undefined
 4a8:	00000d7c 	.inst	0x00000d7c ; undefined
	...
 4c0:	00000d8c 	.inst	0x00000d8c ; undefined
 4c4:	00000000 	.inst	0x00000000 ; undefined
 4c8:	00000d9c 	.inst	0x00000d9c ; undefined
 4cc:	00000000 	.inst	0x00000000 ; undefined
 4d0:	00000da4 	.inst	0x00000da4 ; undefined
 4d4:	00000000 	.inst	0x00000000 ; undefined
 4d8:	00000dc0 	.inst	0x00000dc0 ; undefined
	...
 4f0:	00000dc4 	.inst	0x00000dc4 ; undefined
 4f4:	00000000 	.inst	0x00000000 ; undefined
 4f8:	00000dc8 	.inst	0x00000dc8 ; undefined
 4fc:	00000000 	.inst	0x00000000 ; undefined
 500:	00000dcc 	.inst	0x00000dcc ; undefined
 504:	00000000 	.inst	0x00000000 ; undefined
 508:	00000dd0 	.inst	0x00000dd0 ; undefined
	...
 520:	00000e74 	.inst	0x00000e74 ; undefined
 524:	00000000 	.inst	0x00000000 ; undefined
 528:	00000e94 	.inst	0x00000e94 ; undefined
 52c:	00000000 	.inst	0x00000000 ; undefined
 530:	00000ea8 	.inst	0x00000ea8 ; undefined
 534:	00000000 	.inst	0x00000000 ; undefined
 538:	00000ebc 	.inst	0x00000ebc ; undefined
 53c:	00000000 	.inst	0x00000000 ; undefined
 540:	00000ef8 	.inst	0x00000ef8 ; undefined
 544:	00000000 	.inst	0x00000000 ; undefined
 548:	00000f0c 	.inst	0x00000f0c ; undefined
	...
 560:	00000e74 	.inst	0x00000e74 ; undefined
 564:	00000000 	.inst	0x00000000 ; undefined
 568:	00000e7c 	.inst	0x00000e7c ; undefined
 56c:	00000000 	.inst	0x00000000 ; undefined
 570:	00000ea8 	.inst	0x00000ea8 ; undefined
 574:	00000000 	.inst	0x00000000 ; undefined
 578:	00000eac 	.inst	0x00000eac ; undefined
	...
 590:	00000fa0 	.inst	0x00000fa0 ; undefined
 594:	00000000 	.inst	0x00000000 ; undefined
 598:	00000fc0 	.inst	0x00000fc0 ; undefined
 59c:	00000000 	.inst	0x00000000 ; undefined
 5a0:	00000fc8 	.inst	0x00000fc8 ; undefined
 5a4:	00000000 	.inst	0x00000000 ; undefined
 5a8:	00000fd0 	.inst	0x00000fd0 ; undefined
 5ac:	00000000 	.inst	0x00000000 ; undefined
 5b0:	0000105c 	.inst	0x0000105c ; undefined
 5b4:	00000000 	.inst	0x00000000 ; undefined
 5b8:	000010bc 	.inst	0x000010bc ; undefined
 5bc:	00000000 	.inst	0x00000000 ; undefined
 5c0:	0000131c 	.inst	0x0000131c ; undefined
 5c4:	00000000 	.inst	0x00000000 ; undefined
 5c8:	00001348 	.inst	0x00001348 ; undefined
	...
 5e0:	00000fb8 	.inst	0x00000fb8 ; undefined
 5e4:	00000000 	.inst	0x00000000 ; undefined
 5e8:	00000fc0 	.inst	0x00000fc0 ; undefined
 5ec:	00000000 	.inst	0x00000000 ; undefined
 5f0:	00001060 	.inst	0x00001060 ; undefined
 5f4:	00000000 	.inst	0x00000000 ; undefined
 5f8:	00001068 	.inst	0x00001068 ; undefined
	...
 610:	00000fc0 	.inst	0x00000fc0 ; undefined
 614:	00000000 	.inst	0x00000000 ; undefined
 618:	00000fc8 	.inst	0x00000fc8 ; undefined
 61c:	00000000 	.inst	0x00000000 ; undefined
 620:	000010bc 	.inst	0x000010bc ; undefined
 624:	00000000 	.inst	0x00000000 ; undefined
 628:	000010c0 	.inst	0x000010c0 ; undefined
 62c:	00000000 	.inst	0x00000000 ; undefined
 630:	000010c4 	.inst	0x000010c4 ; undefined
 634:	00000000 	.inst	0x00000000 ; undefined
 638:	0000131c 	.inst	0x0000131c ; undefined
 63c:	00000000 	.inst	0x00000000 ; undefined
 640:	00001348 	.inst	0x00001348 ; undefined
 644:	00000000 	.inst	0x00000000 ; undefined
 648:	000013c4 	.inst	0x000013c4 ; undefined
	...
 660:	00000fc0 	.inst	0x00000fc0 ; undefined
 664:	00000000 	.inst	0x00000000 ; undefined
 668:	00000fc8 	.inst	0x00000fc8 ; undefined
 66c:	00000000 	.inst	0x00000000 ; undefined
 670:	000010dc 	.inst	0x000010dc ; undefined
 674:	00000000 	.inst	0x00000000 ; undefined
 678:	000010e0 	.inst	0x000010e0 ; undefined
	...
 690:	000010bc 	.inst	0x000010bc ; undefined
 694:	00000000 	.inst	0x00000000 ; undefined
 698:	000010c0 	.inst	0x000010c0 ; undefined
 69c:	00000000 	.inst	0x00000000 ; undefined
 6a0:	000010c4 	.inst	0x000010c4 ; undefined
 6a4:	00000000 	.inst	0x00000000 ; undefined
 6a8:	000010c8 	.inst	0x000010c8 ; undefined
	...
 6c0:	00001378 	.inst	0x00001378 ; undefined
 6c4:	00000000 	.inst	0x00000000 ; undefined
 6c8:	00001388 	.inst	0x00001388 ; undefined
 6cc:	00000000 	.inst	0x00000000 ; undefined
 6d0:	00001390 	.inst	0x00001390 ; undefined
 6d4:	00000000 	.inst	0x00000000 ; undefined
 6d8:	000013a4 	.inst	0x000013a4 ; undefined
	...
 6f0:	00000010 	.inst	0x00000010 ; undefined
 6f4:	00000000 	.inst	0x00000000 ; undefined
 6f8:	00000030 	.inst	0x00000030 ; undefined
 6fc:	00000000 	.inst	0x00000000 ; undefined
 700:	00000034 	.inst	0x00000034 ; undefined
 704:	00000000 	.inst	0x00000000 ; undefined
 708:	00000038 	.inst	0x00000038 ; undefined
 70c:	00000000 	.inst	0x00000000 ; undefined
 710:	0000003c 	.inst	0x0000003c ; undefined
 714:	00000000 	.inst	0x00000000 ; undefined
 718:	00000040 	.inst	0x00000040 ; undefined
 71c:	00000000 	.inst	0x00000000 ; undefined
 720:	00000044 	.inst	0x00000044 ; undefined
 724:	00000000 	.inst	0x00000000 ; undefined
 728:	00000048 	.inst	0x00000048 ; undefined
	...
 740:	00000068 	.inst	0x00000068 ; undefined
 744:	00000000 	.inst	0x00000000 ; undefined
 748:	00000080 	.inst	0x00000080 ; undefined
 74c:	00000000 	.inst	0x00000000 ; undefined
 750:	00000084 	.inst	0x00000084 ; undefined
 754:	00000000 	.inst	0x00000000 ; undefined
 758:	00000088 	.inst	0x00000088 ; undefined
 75c:	00000000 	.inst	0x00000000 ; undefined
 760:	0000008c 	.inst	0x0000008c ; undefined
 764:	00000000 	.inst	0x00000000 ; undefined
 768:	00000090 	.inst	0x00000090 ; undefined
 76c:	00000000 	.inst	0x00000000 ; undefined
 770:	00000094 	.inst	0x00000094 ; undefined
 774:	00000000 	.inst	0x00000000 ; undefined
 778:	00000098 	.inst	0x00000098 ; undefined
	...
 790:	00000214 	.inst	0x00000214 ; undefined
 794:	00000000 	.inst	0x00000000 ; undefined
 798:	000002d8 	.inst	0x000002d8 ; undefined
 79c:	00000000 	.inst	0x00000000 ; undefined
 7a0:	000002f0 	.inst	0x000002f0 ; undefined
 7a4:	00000000 	.inst	0x00000000 ; undefined
 7a8:	00000304 	.inst	0x00000304 ; undefined
	...
 7c0:	00000120 	.inst	0x00000120 ; undefined
 7c4:	00000000 	.inst	0x00000000 ; undefined
 7c8:	00000128 	.inst	0x00000128 ; undefined
 7cc:	00000000 	.inst	0x00000000 ; undefined
 7d0:	00000130 	.inst	0x00000130 ; undefined
 7d4:	00000000 	.inst	0x00000000 ; undefined
 7d8:	00000134 	.inst	0x00000134 ; undefined
 7dc:	00000000 	.inst	0x00000000 ; undefined
 7e0:	00000148 	.inst	0x00000148 ; undefined
 7e4:	00000000 	.inst	0x00000000 ; undefined
 7e8:	0000021c 	.inst	0x0000021c ; undefined
 7ec:	00000000 	.inst	0x00000000 ; undefined
 7f0:	00000228 	.inst	0x00000228 ; undefined
 7f4:	00000000 	.inst	0x00000000 ; undefined
 7f8:	00000238 	.inst	0x00000238 ; undefined
	...
 810:	00000130 	.inst	0x00000130 ; undefined
 814:	00000000 	.inst	0x00000000 ; undefined
 818:	00000134 	.inst	0x00000134 ; undefined
 81c:	00000000 	.inst	0x00000000 ; undefined
 820:	00000148 	.inst	0x00000148 ; undefined
 824:	00000000 	.inst	0x00000000 ; undefined
 828:	0000015c 	.inst	0x0000015c ; undefined
 82c:	00000000 	.inst	0x00000000 ; undefined
 830:	0000022c 	.inst	0x0000022c ; undefined
 834:	00000000 	.inst	0x00000000 ; undefined
 838:	00000238 	.inst	0x00000238 ; undefined
	...
 850:	0000023c 	.inst	0x0000023c ; undefined
 854:	00000000 	.inst	0x00000000 ; undefined
 858:	00000244 	.inst	0x00000244 ; undefined
 85c:	00000000 	.inst	0x00000000 ; undefined
 860:	00000250 	.inst	0x00000250 ; undefined
 864:	00000000 	.inst	0x00000000 ; undefined
 868:	00000254 	.inst	0x00000254 ; undefined
 86c:	00000000 	.inst	0x00000000 ; undefined
 870:	0000026c 	.inst	0x0000026c ; undefined
 874:	00000000 	.inst	0x00000000 ; undefined
 878:	0000034c 	.inst	0x0000034c ; undefined
 87c:	00000000 	.inst	0x00000000 ; undefined
 880:	0000035c 	.inst	0x0000035c ; undefined
 884:	00000000 	.inst	0x00000000 ; undefined
 888:	0000036c 	.inst	0x0000036c ; undefined
	...
 8a0:	00000250 	.inst	0x00000250 ; undefined
 8a4:	00000000 	.inst	0x00000000 ; undefined
 8a8:	00000254 	.inst	0x00000254 ; undefined
 8ac:	00000000 	.inst	0x00000000 ; undefined
 8b0:	0000026c 	.inst	0x0000026c ; undefined
 8b4:	00000000 	.inst	0x00000000 ; undefined
 8b8:	00000284 	.inst	0x00000284 ; undefined
 8bc:	00000000 	.inst	0x00000000 ; undefined
 8c0:	00000360 	.inst	0x00000360 ; undefined
 8c4:	00000000 	.inst	0x00000000 ; undefined
 8c8:	0000036c 	.inst	0x0000036c ; undefined
	...
 8e0:	00000024 	.inst	0x00000024 ; undefined
 8e4:	00000000 	.inst	0x00000000 ; undefined
 8e8:	0000002c 	.inst	0x0000002c ; undefined
 8ec:	00000000 	.inst	0x00000000 ; undefined
 8f0:	0000006c 	.inst	0x0000006c ; undefined
 8f4:	00000000 	.inst	0x00000000 ; undefined
 8f8:	00000078 	.inst	0x00000078 ; undefined
 8fc:	00000000 	.inst	0x00000000 ; undefined
 900:	0000007c 	.inst	0x0000007c ; undefined
 904:	00000000 	.inst	0x00000000 ; undefined
 908:	00000080 	.inst	0x00000080 ; undefined
 90c:	00000000 	.inst	0x00000000 ; undefined
 910:	0000008c 	.inst	0x0000008c ; undefined
 914:	00000000 	.inst	0x00000000 ; undefined
 918:	00000094 	.inst	0x00000094 ; undefined
	...
 930:	0000010c 	.inst	0x0000010c ; undefined
 934:	00000000 	.inst	0x00000000 ; undefined
 938:	00000118 	.inst	0x00000118 ; undefined
 93c:	00000000 	.inst	0x00000000 ; undefined
 940:	00000120 	.inst	0x00000120 ; undefined
 944:	00000000 	.inst	0x00000000 ; undefined
 948:	00000168 	.inst	0x00000168 ; undefined
 94c:	00000000 	.inst	0x00000000 ; undefined
 950:	0000017c 	.inst	0x0000017c ; undefined
 954:	00000000 	.inst	0x00000000 ; undefined
 958:	000001ac 	.inst	0x000001ac ; undefined
	...
 970:	000001b0 	.inst	0x000001b0 ; undefined
 974:	00000000 	.inst	0x00000000 ; undefined
 978:	000001c0 	.inst	0x000001c0 ; undefined
 97c:	00000000 	.inst	0x00000000 ; undefined
 980:	000001c4 	.inst	0x000001c4 ; undefined
 984:	00000000 	.inst	0x00000000 ; undefined
 988:	000001c8 	.inst	0x000001c8 ; undefined
 98c:	00000000 	.inst	0x00000000 ; undefined
 990:	000001cc 	.inst	0x000001cc ; undefined
 994:	00000000 	.inst	0x00000000 ; undefined
 998:	000001f4 	.inst	0x000001f4 ; undefined
	...
 9b0:	0000000c 	.inst	0x0000000c ; undefined
 9b4:	00000000 	.inst	0x00000000 ; undefined
 9b8:	00000010 	.inst	0x00000010 ; undefined
 9bc:	00000000 	.inst	0x00000000 ; undefined
 9c0:	00000018 	.inst	0x00000018 ; undefined
 9c4:	00000000 	.inst	0x00000000 ; undefined
 9c8:	0000001c 	.inst	0x0000001c ; undefined
 9cc:	00000000 	.inst	0x00000000 ; undefined
 9d0:	00000024 	.inst	0x00000024 ; undefined
 9d4:	00000000 	.inst	0x00000000 ; undefined
 9d8:	00000040 	.inst	0x00000040 ; undefined
	...
 9f0:	00000054 	.inst	0x00000054 ; undefined
 9f4:	00000000 	.inst	0x00000000 ; undefined
 9f8:	00000058 	.inst	0x00000058 ; undefined
 9fc:	00000000 	.inst	0x00000000 ; undefined
 a00:	00000064 	.inst	0x00000064 ; undefined
 a04:	00000000 	.inst	0x00000000 ; undefined
 a08:	00000068 	.inst	0x00000068 ; undefined
 a0c:	00000000 	.inst	0x00000000 ; undefined
 a10:	00000074 	.inst	0x00000074 ; undefined
 a14:	00000000 	.inst	0x00000000 ; undefined
 a18:	0000008c 	.inst	0x0000008c ; undefined
	...
 a30:	000000c8 	.inst	0x000000c8 ; undefined
 a34:	00000000 	.inst	0x00000000 ; undefined
 a38:	000000cc 	.inst	0x000000cc ; undefined
 a3c:	00000000 	.inst	0x00000000 ; undefined
 a40:	000000d0 	.inst	0x000000d0 ; undefined
 a44:	00000000 	.inst	0x00000000 ; undefined
 a48:	000000d4 	.inst	0x000000d4 ; undefined
 a4c:	00000000 	.inst	0x00000000 ; undefined
 a50:	00000108 	.inst	0x00000108 ; undefined
 a54:	00000000 	.inst	0x00000000 ; undefined
 a58:	00000114 	.inst	0x00000114 ; undefined
	...
 a70:	000000d4 	.inst	0x000000d4 ; undefined
 a74:	00000000 	.inst	0x00000000 ; undefined
 a78:	000000e4 	.inst	0x000000e4 ; undefined
 a7c:	00000000 	.inst	0x00000000 ; undefined
 a80:	000000f0 	.inst	0x000000f0 ; undefined
 a84:	00000000 	.inst	0x00000000 ; undefined
 a88:	000000fc 	.inst	0x000000fc ; undefined
	...
 aa0:	00000118 	.inst	0x00000118 ; undefined
 aa4:	00000000 	.inst	0x00000000 ; undefined
 aa8:	0000011c 	.inst	0x0000011c ; undefined
 aac:	00000000 	.inst	0x00000000 ; undefined
 ab0:	00000120 	.inst	0x00000120 ; undefined
 ab4:	00000000 	.inst	0x00000000 ; undefined
 ab8:	00000124 	.inst	0x00000124 ; undefined
 abc:	00000000 	.inst	0x00000000 ; undefined
 ac0:	00000160 	.inst	0x00000160 ; undefined
 ac4:	00000000 	.inst	0x00000000 ; undefined
 ac8:	0000016c 	.inst	0x0000016c ; undefined
	...
 ae0:	00000124 	.inst	0x00000124 ; undefined
 ae4:	00000000 	.inst	0x00000000 ; undefined
 ae8:	00000134 	.inst	0x00000134 ; undefined
 aec:	00000000 	.inst	0x00000000 ; undefined
 af0:	00000140 	.inst	0x00000140 ; undefined
 af4:	00000000 	.inst	0x00000000 ; undefined
 af8:	0000014c 	.inst	0x0000014c ; undefined
	...
 b10:	00000084 	.inst	0x00000084 ; undefined
 b14:	00000000 	.inst	0x00000000 ; undefined
 b18:	00000088 	.inst	0x00000088 ; undefined
 b1c:	00000000 	.inst	0x00000000 ; undefined
 b20:	0000009c 	.inst	0x0000009c ; undefined
 b24:	00000000 	.inst	0x00000000 ; undefined
 b28:	000000a0 	.inst	0x000000a0 ; undefined
 b2c:	00000000 	.inst	0x00000000 ; undefined
 b30:	000000a4 	.inst	0x000000a4 ; undefined
 b34:	00000000 	.inst	0x00000000 ; undefined
 b38:	000000a8 	.inst	0x000000a8 ; undefined
 b3c:	00000000 	.inst	0x00000000 ; undefined
 b40:	000000ac 	.inst	0x000000ac ; undefined
 b44:	00000000 	.inst	0x00000000 ; undefined
 b48:	000000b0 	.inst	0x000000b0 ; undefined
 b4c:	00000000 	.inst	0x00000000 ; undefined
 b50:	000000c4 	.inst	0x000000c4 ; undefined
 b54:	00000000 	.inst	0x00000000 ; undefined
 b58:	000000cc 	.inst	0x000000cc ; undefined
 b5c:	00000000 	.inst	0x00000000 ; undefined
 b60:	000000e0 	.inst	0x000000e0 ; undefined
 b64:	00000000 	.inst	0x00000000 ; undefined
 b68:	000000e4 	.inst	0x000000e4 ; undefined
	...
 b80:	0000008c 	.inst	0x0000008c ; undefined
 b84:	00000000 	.inst	0x00000000 ; undefined
 b88:	00000090 	.inst	0x00000090 ; undefined
 b8c:	00000000 	.inst	0x00000000 ; undefined
 b90:	000000bc 	.inst	0x000000bc ; undefined
 b94:	00000000 	.inst	0x00000000 ; undefined
 b98:	000000c0 	.inst	0x000000c0 ; undefined
 b9c:	00000000 	.inst	0x00000000 ; undefined
 ba0:	000000cc 	.inst	0x000000cc ; undefined
 ba4:	00000000 	.inst	0x00000000 ; undefined
 ba8:	000000d0 	.inst	0x000000d0 ; undefined
 bac:	00000000 	.inst	0x00000000 ; undefined
 bb0:	000000ec 	.inst	0x000000ec ; undefined
 bb4:	00000000 	.inst	0x00000000 ; undefined
 bb8:	000000f0 	.inst	0x000000f0 ; undefined
	...
 bd0:	00000094 	.inst	0x00000094 ; undefined
 bd4:	00000000 	.inst	0x00000000 ; undefined
 bd8:	00000098 	.inst	0x00000098 ; undefined
 bdc:	00000000 	.inst	0x00000000 ; undefined
 be0:	000000d0 	.inst	0x000000d0 ; undefined
 be4:	00000000 	.inst	0x00000000 ; undefined
 be8:	000000d4 	.inst	0x000000d4 ; undefined
 bec:	00000000 	.inst	0x00000000 ; undefined
 bf0:	000000d8 	.inst	0x000000d8 ; undefined
 bf4:	00000000 	.inst	0x00000000 ; undefined
 bf8:	000000dc 	.inst	0x000000dc ; undefined
 bfc:	00000000 	.inst	0x00000000 ; undefined
 c00:	000000f4 	.inst	0x000000f4 ; undefined
 c04:	00000000 	.inst	0x00000000 ; undefined
 c08:	000000f8 	.inst	0x000000f8 ; undefined
	...
 c20:	000000a0 	.inst	0x000000a0 ; undefined
 c24:	00000000 	.inst	0x00000000 ; undefined
 c28:	000000a4 	.inst	0x000000a4 ; undefined
 c2c:	00000000 	.inst	0x00000000 ; undefined
 c30:	000000d4 	.inst	0x000000d4 ; undefined
 c34:	00000000 	.inst	0x00000000 ; undefined
 c38:	000000d8 	.inst	0x000000d8 ; undefined
 c3c:	00000000 	.inst	0x00000000 ; undefined
 c40:	000000dc 	.inst	0x000000dc ; undefined
 c44:	00000000 	.inst	0x00000000 ; undefined
 c48:	000000e0 	.inst	0x000000e0 ; undefined
 c4c:	00000000 	.inst	0x00000000 ; undefined
 c50:	000000e4 	.inst	0x000000e4 ; undefined
 c54:	00000000 	.inst	0x00000000 ; undefined
 c58:	000000e8 	.inst	0x000000e8 ; undefined
 c5c:	00000000 	.inst	0x00000000 ; undefined
 c60:	000000f8 	.inst	0x000000f8 ; undefined
 c64:	00000000 	.inst	0x00000000 ; undefined
 c68:	000000fc 	.inst	0x000000fc ; undefined
	...
 c80:	000000b8 	.inst	0x000000b8 ; undefined
 c84:	00000000 	.inst	0x00000000 ; undefined
 c88:	000000bc 	.inst	0x000000bc ; undefined
 c8c:	00000000 	.inst	0x00000000 ; undefined
 c90:	000000e8 	.inst	0x000000e8 ; undefined
 c94:	00000000 	.inst	0x00000000 ; undefined
 c98:	000000ec 	.inst	0x000000ec ; undefined
	...
 cb0:	000000fc 	.inst	0x000000fc ; undefined
 cb4:	00000000 	.inst	0x00000000 ; undefined
 cb8:	00000100 	.inst	0x00000100 ; undefined
 cbc:	00000000 	.inst	0x00000000 ; undefined
 cc0:	00000108 	.inst	0x00000108 ; undefined
 cc4:	00000000 	.inst	0x00000000 ; undefined
 cc8:	0000010c 	.inst	0x0000010c ; undefined
	...
 ce0:	00000104 	.inst	0x00000104 ; undefined
 ce4:	00000000 	.inst	0x00000000 ; undefined
 ce8:	00000108 	.inst	0x00000108 ; undefined
 cec:	00000000 	.inst	0x00000000 ; undefined
 cf0:	0000010c 	.inst	0x0000010c ; undefined
 cf4:	00000000 	.inst	0x00000000 ; undefined
 cf8:	00000110 	.inst	0x00000110 ; undefined
	...
 d10:	00000154 	.inst	0x00000154 ; undefined
 d14:	00000000 	.inst	0x00000000 ; undefined
 d18:	00000158 	.inst	0x00000158 ; undefined
 d1c:	00000000 	.inst	0x00000000 ; undefined
 d20:	0000015c 	.inst	0x0000015c ; undefined
 d24:	00000000 	.inst	0x00000000 ; undefined
 d28:	00000160 	.inst	0x00000160 ; undefined
	...
 d40:	000005d4 	.inst	0x000005d4 ; undefined
 d44:	00000000 	.inst	0x00000000 ; undefined
 d48:	000005d8 	.inst	0x000005d8 ; undefined
 d4c:	00000000 	.inst	0x00000000 ; undefined
 d50:	00000610 	.inst	0x00000610 ; undefined
 d54:	00000000 	.inst	0x00000000 ; undefined
 d58:	0000062c 	.inst	0x0000062c ; undefined
	...
 d70:	0000065c 	.inst	0x0000065c ; undefined
 d74:	00000000 	.inst	0x00000000 ; undefined
 d78:	00000670 	.inst	0x00000670 ; undefined
 d7c:	00000000 	.inst	0x00000000 ; undefined
 d80:	00000674 	.inst	0x00000674 ; undefined
 d84:	00000000 	.inst	0x00000000 ; undefined
 d88:	0000067c 	.inst	0x0000067c ; undefined
	...
 da0:	00000034 	.inst	0x00000034 ; undefined
 da4:	00000000 	.inst	0x00000000 ; undefined
 da8:	00000038 	.inst	0x00000038 ; undefined
 dac:	00000000 	.inst	0x00000000 ; undefined
 db0:	0000003c 	.inst	0x0000003c ; undefined
 db4:	00000000 	.inst	0x00000000 ; undefined
 db8:	00000048 	.inst	0x00000048 ; undefined
	...
 dd0:	000000d0 	.inst	0x000000d0 ; undefined
 dd4:	00000000 	.inst	0x00000000 ; undefined
 dd8:	000000d4 	.inst	0x000000d4 ; undefined
 ddc:	00000000 	.inst	0x00000000 ; undefined
 de0:	000000d8 	.inst	0x000000d8 ; undefined
 de4:	00000000 	.inst	0x00000000 ; undefined
 de8:	000000e4 	.inst	0x000000e4 ; undefined
	...
